// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddTagsToResourceRequest struct {
	Tag                  []*AddTagsToResourceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	OwnerId              *int64                         `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                        `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string                        `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId              *string                        `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	RegionId             *string                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId         *string                        `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Tags                 *string                        `json:"Tags,omitempty" xml:"Tags,omitempty"`
	OwnerAccount         *string                        `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddTagsToResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTagsToResourceRequest) GoString() string {
	return s.String()
}

func (s *AddTagsToResourceRequest) SetTag(v []*AddTagsToResourceRequestTag) *AddTagsToResourceRequest {
	s.Tag = v
	return s
}

func (s *AddTagsToResourceRequest) SetOwnerId(v int64) *AddTagsToResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *AddTagsToResourceRequest) SetResourceOwnerAccount(v string) *AddTagsToResourceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddTagsToResourceRequest) SetResourceOwnerId(v int64) *AddTagsToResourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddTagsToResourceRequest) SetClientToken(v string) *AddTagsToResourceRequest {
	s.ClientToken = &v
	return s
}

func (s *AddTagsToResourceRequest) SetProxyId(v string) *AddTagsToResourceRequest {
	s.ProxyId = &v
	return s
}

func (s *AddTagsToResourceRequest) SetRegionId(v string) *AddTagsToResourceRequest {
	s.RegionId = &v
	return s
}

func (s *AddTagsToResourceRequest) SetDBInstanceId(v string) *AddTagsToResourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *AddTagsToResourceRequest) SetTags(v string) *AddTagsToResourceRequest {
	s.Tags = &v
	return s
}

func (s *AddTagsToResourceRequest) SetOwnerAccount(v string) *AddTagsToResourceRequest {
	s.OwnerAccount = &v
	return s
}

type AddTagsToResourceRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s AddTagsToResourceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s AddTagsToResourceRequestTag) GoString() string {
	return s.String()
}

func (s *AddTagsToResourceRequestTag) SetKey(v string) *AddTagsToResourceRequestTag {
	s.Key = &v
	return s
}

func (s *AddTagsToResourceRequestTag) SetValue(v string) *AddTagsToResourceRequestTag {
	s.Value = &v
	return s
}

type AddTagsToResourceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddTagsToResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTagsToResourceResponseBody) GoString() string {
	return s.String()
}

func (s *AddTagsToResourceResponseBody) SetRequestId(v string) *AddTagsToResourceResponseBody {
	s.RequestId = &v
	return s
}

type AddTagsToResourceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddTagsToResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddTagsToResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTagsToResourceResponse) GoString() string {
	return s.String()
}

func (s *AddTagsToResourceResponse) SetHeaders(v map[string]*string) *AddTagsToResourceResponse {
	s.Headers = v
	return s
}

func (s *AddTagsToResourceResponse) SetBody(v *AddTagsToResourceResponseBody) *AddTagsToResourceResponse {
	s.Body = v
	return s
}

type AllocateInstancePublicConnectionRequest struct {
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	Port                   *string `json:"Port,omitempty" xml:"Port,omitempty"`
	OwnerAccount           *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AllocateInstancePublicConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateInstancePublicConnectionRequest) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionRequest) SetOwnerId(v int64) *AllocateInstancePublicConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetResourceOwnerAccount(v string) *AllocateInstancePublicConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetResourceOwnerId(v int64) *AllocateInstancePublicConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetDBInstanceId(v string) *AllocateInstancePublicConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetConnectionStringPrefix(v string) *AllocateInstancePublicConnectionRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetPort(v string) *AllocateInstancePublicConnectionRequest {
	s.Port = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetOwnerAccount(v string) *AllocateInstancePublicConnectionRequest {
	s.OwnerAccount = &v
	return s
}

type AllocateInstancePublicConnectionResponseBody struct {
	DbInstanceName   *string `json:"DbInstanceName,omitempty" xml:"DbInstanceName,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
}

func (s AllocateInstancePublicConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllocateInstancePublicConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionResponseBody) SetDbInstanceName(v string) *AllocateInstancePublicConnectionResponseBody {
	s.DbInstanceName = &v
	return s
}

func (s *AllocateInstancePublicConnectionResponseBody) SetRequestId(v string) *AllocateInstancePublicConnectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *AllocateInstancePublicConnectionResponseBody) SetConnectionString(v string) *AllocateInstancePublicConnectionResponseBody {
	s.ConnectionString = &v
	return s
}

type AllocateInstancePublicConnectionResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AllocateInstancePublicConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AllocateInstancePublicConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateInstancePublicConnectionResponse) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionResponse) SetHeaders(v map[string]*string) *AllocateInstancePublicConnectionResponse {
	s.Headers = v
	return s
}

func (s *AllocateInstancePublicConnectionResponse) SetBody(v *AllocateInstancePublicConnectionResponseBody) *AllocateInstancePublicConnectionResponse {
	s.Body = v
	return s
}

type AllocateReadWriteSplittingConnectionRequest struct {
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount           *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	Port                   *string `json:"Port,omitempty" xml:"Port,omitempty"`
	MaxDelayTime           *string `json:"MaxDelayTime,omitempty" xml:"MaxDelayTime,omitempty"`
	NetType                *string `json:"NetType,omitempty" xml:"NetType,omitempty"`
	DistributionType       *string `json:"DistributionType,omitempty" xml:"DistributionType,omitempty"`
	Weight                 *string `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s AllocateReadWriteSplittingConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateReadWriteSplittingConnectionRequest) GoString() string {
	return s.String()
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetOwnerId(v int64) *AllocateReadWriteSplittingConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetResourceOwnerAccount(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetResourceOwnerId(v int64) *AllocateReadWriteSplittingConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetOwnerAccount(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetDBInstanceId(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetConnectionStringPrefix(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetPort(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.Port = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetMaxDelayTime(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.MaxDelayTime = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetNetType(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.NetType = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetDistributionType(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.DistributionType = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetWeight(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.Weight = &v
	return s
}

type AllocateReadWriteSplittingConnectionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AllocateReadWriteSplittingConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AllocateReadWriteSplittingConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *AllocateReadWriteSplittingConnectionResponseBody) SetRequestId(v string) *AllocateReadWriteSplittingConnectionResponseBody {
	s.RequestId = &v
	return s
}

type AllocateReadWriteSplittingConnectionResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AllocateReadWriteSplittingConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AllocateReadWriteSplittingConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateReadWriteSplittingConnectionResponse) GoString() string {
	return s.String()
}

func (s *AllocateReadWriteSplittingConnectionResponse) SetHeaders(v map[string]*string) *AllocateReadWriteSplittingConnectionResponse {
	s.Headers = v
	return s
}

func (s *AllocateReadWriteSplittingConnectionResponse) SetBody(v *AllocateReadWriteSplittingConnectionResponseBody) *AllocateReadWriteSplittingConnectionResponse {
	s.Body = v
	return s
}

type CalculateDBInstanceWeightRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s CalculateDBInstanceWeightRequest) String() string {
	return tea.Prettify(s)
}

func (s CalculateDBInstanceWeightRequest) GoString() string {
	return s.String()
}

func (s *CalculateDBInstanceWeightRequest) SetResourceOwnerId(v int64) *CalculateDBInstanceWeightRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CalculateDBInstanceWeightRequest) SetDBInstanceId(v string) *CalculateDBInstanceWeightRequest {
	s.DBInstanceId = &v
	return s
}

type CalculateDBInstanceWeightResponseBody struct {
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Items     *CalculateDBInstanceWeightResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s CalculateDBInstanceWeightResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CalculateDBInstanceWeightResponseBody) GoString() string {
	return s.String()
}

func (s *CalculateDBInstanceWeightResponseBody) SetRequestId(v string) *CalculateDBInstanceWeightResponseBody {
	s.RequestId = &v
	return s
}

func (s *CalculateDBInstanceWeightResponseBody) SetItems(v *CalculateDBInstanceWeightResponseBodyItems) *CalculateDBInstanceWeightResponseBody {
	s.Items = v
	return s
}

type CalculateDBInstanceWeightResponseBodyItems struct {
	DBInstanceWeight []*CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight `json:"DBInstanceWeight,omitempty" xml:"DBInstanceWeight,omitempty" type:"Repeated"`
}

func (s CalculateDBInstanceWeightResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s CalculateDBInstanceWeightResponseBodyItems) GoString() string {
	return s.String()
}

func (s *CalculateDBInstanceWeightResponseBodyItems) SetDBInstanceWeight(v []*CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight) *CalculateDBInstanceWeightResponseBodyItems {
	s.DBInstanceWeight = v
	return s
}

type CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight struct {
	ReadonlyInstanceSQLDelayedTime *string `json:"ReadonlyInstanceSQLDelayedTime,omitempty" xml:"ReadonlyInstanceSQLDelayedTime,omitempty"`
	Weight                         *string `json:"Weight,omitempty" xml:"Weight,omitempty"`
	DBInstanceType                 *string `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty"`
	DBInstanceId                   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Role                           *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight) String() string {
	return tea.Prettify(s)
}

func (s CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight) GoString() string {
	return s.String()
}

func (s *CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight) SetReadonlyInstanceSQLDelayedTime(v string) *CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight {
	s.ReadonlyInstanceSQLDelayedTime = &v
	return s
}

func (s *CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight) SetWeight(v string) *CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight {
	s.Weight = &v
	return s
}

func (s *CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight) SetDBInstanceType(v string) *CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight {
	s.DBInstanceType = &v
	return s
}

func (s *CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight) SetDBInstanceId(v string) *CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight {
	s.DBInstanceId = &v
	return s
}

func (s *CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight) SetRole(v string) *CalculateDBInstanceWeightResponseBodyItemsDBInstanceWeight {
	s.Role = &v
	return s
}

type CalculateDBInstanceWeightResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CalculateDBInstanceWeightResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CalculateDBInstanceWeightResponse) String() string {
	return tea.Prettify(s)
}

func (s CalculateDBInstanceWeightResponse) GoString() string {
	return s.String()
}

func (s *CalculateDBInstanceWeightResponse) SetHeaders(v map[string]*string) *CalculateDBInstanceWeightResponse {
	s.Headers = v
	return s
}

func (s *CalculateDBInstanceWeightResponse) SetBody(v *CalculateDBInstanceWeightResponseBody) *CalculateDBInstanceWeightResponse {
	s.Body = v
	return s
}

type CancelImportRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ImportId             *int32  `json:"ImportId,omitempty" xml:"ImportId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CancelImportRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelImportRequest) GoString() string {
	return s.String()
}

func (s *CancelImportRequest) SetOwnerId(v int64) *CancelImportRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelImportRequest) SetResourceOwnerAccount(v string) *CancelImportRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelImportRequest) SetResourceOwnerId(v int64) *CancelImportRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelImportRequest) SetDBInstanceId(v string) *CancelImportRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CancelImportRequest) SetImportId(v int32) *CancelImportRequest {
	s.ImportId = &v
	return s
}

func (s *CancelImportRequest) SetOwnerAccount(v string) *CancelImportRequest {
	s.OwnerAccount = &v
	return s
}

type CancelImportResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelImportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelImportResponseBody) GoString() string {
	return s.String()
}

func (s *CancelImportResponseBody) SetRequestId(v string) *CancelImportResponseBody {
	s.RequestId = &v
	return s
}

type CancelImportResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelImportResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelImportResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelImportResponse) GoString() string {
	return s.String()
}

func (s *CancelImportResponse) SetHeaders(v map[string]*string) *CancelImportResponse {
	s.Headers = v
	return s
}

func (s *CancelImportResponse) SetBody(v *CancelImportResponseBody) *CancelImportResponse {
	s.Body = v
	return s
}

type CheckAccountNameAvailableRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CheckAccountNameAvailableRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckAccountNameAvailableRequest) GoString() string {
	return s.String()
}

func (s *CheckAccountNameAvailableRequest) SetOwnerId(v int64) *CheckAccountNameAvailableRequest {
	s.OwnerId = &v
	return s
}

func (s *CheckAccountNameAvailableRequest) SetResourceOwnerAccount(v string) *CheckAccountNameAvailableRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CheckAccountNameAvailableRequest) SetResourceOwnerId(v int64) *CheckAccountNameAvailableRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CheckAccountNameAvailableRequest) SetClientToken(v string) *CheckAccountNameAvailableRequest {
	s.ClientToken = &v
	return s
}

func (s *CheckAccountNameAvailableRequest) SetDBInstanceId(v string) *CheckAccountNameAvailableRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckAccountNameAvailableRequest) SetAccountName(v string) *CheckAccountNameAvailableRequest {
	s.AccountName = &v
	return s
}

func (s *CheckAccountNameAvailableRequest) SetOwnerAccount(v string) *CheckAccountNameAvailableRequest {
	s.OwnerAccount = &v
	return s
}

type CheckAccountNameAvailableResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckAccountNameAvailableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckAccountNameAvailableResponseBody) GoString() string {
	return s.String()
}

func (s *CheckAccountNameAvailableResponseBody) SetRequestId(v string) *CheckAccountNameAvailableResponseBody {
	s.RequestId = &v
	return s
}

type CheckAccountNameAvailableResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CheckAccountNameAvailableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckAccountNameAvailableResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckAccountNameAvailableResponse) GoString() string {
	return s.String()
}

func (s *CheckAccountNameAvailableResponse) SetHeaders(v map[string]*string) *CheckAccountNameAvailableResponse {
	s.Headers = v
	return s
}

func (s *CheckAccountNameAvailableResponse) SetBody(v *CheckAccountNameAvailableResponseBody) *CheckAccountNameAvailableResponse {
	s.Body = v
	return s
}

type CheckCloudResourceAuthorizedRequest struct {
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TargetRegionId       *string `json:"TargetRegionId,omitempty" xml:"TargetRegionId,omitempty"`
}

func (s CheckCloudResourceAuthorizedRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudResourceAuthorizedRequest) GoString() string {
	return s.String()
}

func (s *CheckCloudResourceAuthorizedRequest) SetSecurityToken(v string) *CheckCloudResourceAuthorizedRequest {
	s.SecurityToken = &v
	return s
}

func (s *CheckCloudResourceAuthorizedRequest) SetOwnerId(v int64) *CheckCloudResourceAuthorizedRequest {
	s.OwnerId = &v
	return s
}

func (s *CheckCloudResourceAuthorizedRequest) SetResourceOwnerAccount(v string) *CheckCloudResourceAuthorizedRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CheckCloudResourceAuthorizedRequest) SetResourceOwnerId(v int64) *CheckCloudResourceAuthorizedRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CheckCloudResourceAuthorizedRequest) SetOwnerAccount(v string) *CheckCloudResourceAuthorizedRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CheckCloudResourceAuthorizedRequest) SetRegionId(v string) *CheckCloudResourceAuthorizedRequest {
	s.RegionId = &v
	return s
}

func (s *CheckCloudResourceAuthorizedRequest) SetDBInstanceId(v string) *CheckCloudResourceAuthorizedRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckCloudResourceAuthorizedRequest) SetTargetRegionId(v string) *CheckCloudResourceAuthorizedRequest {
	s.TargetRegionId = &v
	return s
}

type CheckCloudResourceAuthorizedResponseBody struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RoleArn            *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	AuthorizationState *int32  `json:"AuthorizationState,omitempty" xml:"AuthorizationState,omitempty"`
}

func (s CheckCloudResourceAuthorizedResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudResourceAuthorizedResponseBody) GoString() string {
	return s.String()
}

func (s *CheckCloudResourceAuthorizedResponseBody) SetRequestId(v string) *CheckCloudResourceAuthorizedResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckCloudResourceAuthorizedResponseBody) SetRoleArn(v string) *CheckCloudResourceAuthorizedResponseBody {
	s.RoleArn = &v
	return s
}

func (s *CheckCloudResourceAuthorizedResponseBody) SetAuthorizationState(v int32) *CheckCloudResourceAuthorizedResponseBody {
	s.AuthorizationState = &v
	return s
}

type CheckCloudResourceAuthorizedResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CheckCloudResourceAuthorizedResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckCloudResourceAuthorizedResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudResourceAuthorizedResponse) GoString() string {
	return s.String()
}

func (s *CheckCloudResourceAuthorizedResponse) SetHeaders(v map[string]*string) *CheckCloudResourceAuthorizedResponse {
	s.Headers = v
	return s
}

func (s *CheckCloudResourceAuthorizedResponse) SetBody(v *CheckCloudResourceAuthorizedResponseBody) *CheckCloudResourceAuthorizedResponse {
	s.Body = v
	return s
}

type CheckCreateDdrDBInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceClass      *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage    *int32  `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	RestoreType          *string `json:"RestoreType,omitempty" xml:"RestoreType,omitempty"`
	BackupSetId          *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	RestoreTime          *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	SourceRegion         *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	SourceDBInstanceName *string `json:"SourceDBInstanceName,omitempty" xml:"SourceDBInstanceName,omitempty"`
	BinlogName           *string `json:"BinlogName,omitempty" xml:"BinlogName,omitempty"`
	BinlogPosition       *string `json:"BinlogPosition,omitempty" xml:"BinlogPosition,omitempty"`
	BinlogRole           *string `json:"BinlogRole,omitempty" xml:"BinlogRole,omitempty"`
}

func (s CheckCreateDdrDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCreateDdrDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CheckCreateDdrDBInstanceRequest) SetOwnerId(v int64) *CheckCreateDdrDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetResourceOwnerAccount(v string) *CheckCreateDdrDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetResourceOwnerId(v int64) *CheckCreateDdrDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetRegionId(v string) *CheckCreateDdrDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetEngine(v string) *CheckCreateDdrDBInstanceRequest {
	s.Engine = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetEngineVersion(v string) *CheckCreateDdrDBInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetDBInstanceClass(v string) *CheckCreateDdrDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetDBInstanceStorage(v int32) *CheckCreateDdrDBInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetRestoreType(v string) *CheckCreateDdrDBInstanceRequest {
	s.RestoreType = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetBackupSetId(v string) *CheckCreateDdrDBInstanceRequest {
	s.BackupSetId = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetRestoreTime(v string) *CheckCreateDdrDBInstanceRequest {
	s.RestoreTime = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetSourceRegion(v string) *CheckCreateDdrDBInstanceRequest {
	s.SourceRegion = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetSourceDBInstanceName(v string) *CheckCreateDdrDBInstanceRequest {
	s.SourceDBInstanceName = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetBinlogName(v string) *CheckCreateDdrDBInstanceRequest {
	s.BinlogName = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetBinlogPosition(v string) *CheckCreateDdrDBInstanceRequest {
	s.BinlogPosition = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetBinlogRole(v string) *CheckCreateDdrDBInstanceRequest {
	s.BinlogRole = &v
	return s
}

type CheckCreateDdrDBInstanceResponseBody struct {
	IsValid   *string `json:"IsValid,omitempty" xml:"IsValid,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckCreateDdrDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckCreateDdrDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CheckCreateDdrDBInstanceResponseBody) SetIsValid(v string) *CheckCreateDdrDBInstanceResponseBody {
	s.IsValid = &v
	return s
}

func (s *CheckCreateDdrDBInstanceResponseBody) SetRequestId(v string) *CheckCreateDdrDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CheckCreateDdrDBInstanceResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CheckCreateDdrDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckCreateDdrDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCreateDdrDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CheckCreateDdrDBInstanceResponse) SetHeaders(v map[string]*string) *CheckCreateDdrDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *CheckCreateDdrDBInstanceResponse) SetBody(v *CheckCreateDdrDBInstanceResponseBody) *CheckCreateDdrDBInstanceResponse {
	s.Body = v
	return s
}

type CheckDBNameAvailableRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CheckDBNameAvailableRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckDBNameAvailableRequest) GoString() string {
	return s.String()
}

func (s *CheckDBNameAvailableRequest) SetOwnerId(v int64) *CheckDBNameAvailableRequest {
	s.OwnerId = &v
	return s
}

func (s *CheckDBNameAvailableRequest) SetResourceOwnerAccount(v string) *CheckDBNameAvailableRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CheckDBNameAvailableRequest) SetResourceOwnerId(v int64) *CheckDBNameAvailableRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CheckDBNameAvailableRequest) SetClientToken(v string) *CheckDBNameAvailableRequest {
	s.ClientToken = &v
	return s
}

func (s *CheckDBNameAvailableRequest) SetDBInstanceId(v string) *CheckDBNameAvailableRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckDBNameAvailableRequest) SetDBName(v string) *CheckDBNameAvailableRequest {
	s.DBName = &v
	return s
}

func (s *CheckDBNameAvailableRequest) SetOwnerAccount(v string) *CheckDBNameAvailableRequest {
	s.OwnerAccount = &v
	return s
}

type CheckDBNameAvailableResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckDBNameAvailableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckDBNameAvailableResponseBody) GoString() string {
	return s.String()
}

func (s *CheckDBNameAvailableResponseBody) SetRequestId(v string) *CheckDBNameAvailableResponseBody {
	s.RequestId = &v
	return s
}

type CheckDBNameAvailableResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CheckDBNameAvailableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckDBNameAvailableResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckDBNameAvailableResponse) GoString() string {
	return s.String()
}

func (s *CheckDBNameAvailableResponse) SetHeaders(v map[string]*string) *CheckDBNameAvailableResponse {
	s.Headers = v
	return s
}

func (s *CheckDBNameAvailableResponse) SetBody(v *CheckDBNameAvailableResponseBody) *CheckDBNameAvailableResponse {
	s.Body = v
	return s
}

type CheckInstanceExistRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s CheckInstanceExistRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckInstanceExistRequest) GoString() string {
	return s.String()
}

func (s *CheckInstanceExistRequest) SetOwnerId(v int64) *CheckInstanceExistRequest {
	s.OwnerId = &v
	return s
}

func (s *CheckInstanceExistRequest) SetResourceOwnerAccount(v string) *CheckInstanceExistRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CheckInstanceExistRequest) SetResourceOwnerId(v int64) *CheckInstanceExistRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CheckInstanceExistRequest) SetDBInstanceId(v string) *CheckInstanceExistRequest {
	s.DBInstanceId = &v
	return s
}

type CheckInstanceExistResponseBody struct {
	IsExistInstance *bool   `json:"IsExistInstance,omitempty" xml:"IsExistInstance,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CheckInstanceExistResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckInstanceExistResponseBody) GoString() string {
	return s.String()
}

func (s *CheckInstanceExistResponseBody) SetIsExistInstance(v bool) *CheckInstanceExistResponseBody {
	s.IsExistInstance = &v
	return s
}

func (s *CheckInstanceExistResponseBody) SetRequestId(v string) *CheckInstanceExistResponseBody {
	s.RequestId = &v
	return s
}

type CheckInstanceExistResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CheckInstanceExistResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckInstanceExistResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckInstanceExistResponse) GoString() string {
	return s.String()
}

func (s *CheckInstanceExistResponse) SetHeaders(v map[string]*string) *CheckInstanceExistResponse {
	s.Headers = v
	return s
}

func (s *CheckInstanceExistResponse) SetBody(v *CheckInstanceExistResponseBody) *CheckInstanceExistResponse {
	s.Body = v
	return s
}

type ClearDedicatedHostRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	FailoverMode         *string `json:"FailoverMode,omitempty" xml:"FailoverMode,omitempty"`
}

func (s ClearDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *ClearDedicatedHostRequest) SetOwnerId(v int64) *ClearDedicatedHostRequest {
	s.OwnerId = &v
	return s
}

func (s *ClearDedicatedHostRequest) SetResourceOwnerAccount(v string) *ClearDedicatedHostRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ClearDedicatedHostRequest) SetResourceOwnerId(v int64) *ClearDedicatedHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ClearDedicatedHostRequest) SetRegionId(v string) *ClearDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *ClearDedicatedHostRequest) SetDedicatedHostId(v string) *ClearDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ClearDedicatedHostRequest) SetFailoverMode(v string) *ClearDedicatedHostRequest {
	s.FailoverMode = &v
	return s
}

type ClearDedicatedHostResponseBody struct {
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	TaskId          *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ClearDedicatedHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClearDedicatedHostResponseBody) GoString() string {
	return s.String()
}

func (s *ClearDedicatedHostResponseBody) SetDedicatedHostId(v string) *ClearDedicatedHostResponseBody {
	s.DedicatedHostId = &v
	return s
}

func (s *ClearDedicatedHostResponseBody) SetTaskId(v string) *ClearDedicatedHostResponseBody {
	s.TaskId = &v
	return s
}

func (s *ClearDedicatedHostResponseBody) SetRequestId(v string) *ClearDedicatedHostResponseBody {
	s.RequestId = &v
	return s
}

type ClearDedicatedHostResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ClearDedicatedHostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ClearDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ClearDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *ClearDedicatedHostResponse) SetHeaders(v map[string]*string) *ClearDedicatedHostResponse {
	s.Headers = v
	return s
}

func (s *ClearDedicatedHostResponse) SetBody(v *ClearDedicatedHostResponseBody) *ClearDedicatedHostResponse {
	s.Body = v
	return s
}

type CloneDBInstanceRequest struct {
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage     *int32  `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	DbNames               *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	InstanceNetworkType   *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupId              *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime           *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	VPCId                 *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId             *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress      *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	UsedTime              *int32  `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	Period                *string `json:"Period,omitempty" xml:"Period,omitempty"`
	Category              *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	RestoreTable          *string `json:"RestoreTable,omitempty" xml:"RestoreTable,omitempty"`
	TableMeta             *string `json:"TableMeta,omitempty" xml:"TableMeta,omitempty"`
	DedicatedHostGroupId  *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	BackupType            *string `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
}

func (s CloneDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceRequest) SetResourceOwnerId(v int64) *CloneDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetRegionId(v string) *CloneDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetZoneId(v string) *CloneDBInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDBInstanceClass(v string) *CloneDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDBInstanceStorage(v int32) *CloneDBInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDbNames(v string) *CloneDBInstanceRequest {
	s.DbNames = &v
	return s
}

func (s *CloneDBInstanceRequest) SetPayType(v string) *CloneDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CloneDBInstanceRequest) SetInstanceNetworkType(v string) *CloneDBInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDBInstanceId(v string) *CloneDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetBackupId(v string) *CloneDBInstanceRequest {
	s.BackupId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetRestoreTime(v string) *CloneDBInstanceRequest {
	s.RestoreTime = &v
	return s
}

func (s *CloneDBInstanceRequest) SetVPCId(v string) *CloneDBInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetVSwitchId(v string) *CloneDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetPrivateIpAddress(v string) *CloneDBInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CloneDBInstanceRequest) SetUsedTime(v int32) *CloneDBInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *CloneDBInstanceRequest) SetPeriod(v string) *CloneDBInstanceRequest {
	s.Period = &v
	return s
}

func (s *CloneDBInstanceRequest) SetCategory(v string) *CloneDBInstanceRequest {
	s.Category = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDBInstanceStorageType(v string) *CloneDBInstanceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *CloneDBInstanceRequest) SetRestoreTable(v string) *CloneDBInstanceRequest {
	s.RestoreTable = &v
	return s
}

func (s *CloneDBInstanceRequest) SetTableMeta(v string) *CloneDBInstanceRequest {
	s.TableMeta = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDedicatedHostGroupId(v string) *CloneDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetBackupType(v string) *CloneDBInstanceRequest {
	s.BackupType = &v
	return s
}

type CloneDBInstanceResponseBody struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId      *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s CloneDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloneDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceResponseBody) SetDBInstanceId(v string) *CloneDBInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CloneDBInstanceResponseBody) SetRequestId(v string) *CloneDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CloneDBInstanceResponseBody) SetOrderId(v string) *CloneDBInstanceResponseBody {
	s.OrderId = &v
	return s
}

type CloneDBInstanceResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CloneDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CloneDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceResponse) SetHeaders(v map[string]*string) *CloneDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *CloneDBInstanceResponse) SetBody(v *CloneDBInstanceResponseBody) *CloneDBInstanceResponse {
	s.Body = v
	return s
}

type CloneParameterGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TargetRegionId       *string `json:"TargetRegionId,omitempty" xml:"TargetRegionId,omitempty"`
	ParameterGroupId     *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
	ParameterGroupName   *string `json:"ParameterGroupName,omitempty" xml:"ParameterGroupName,omitempty"`
	ParameterGroupDesc   *string `json:"ParameterGroupDesc,omitempty" xml:"ParameterGroupDesc,omitempty"`
}

func (s CloneParameterGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneParameterGroupRequest) GoString() string {
	return s.String()
}

func (s *CloneParameterGroupRequest) SetOwnerId(v int64) *CloneParameterGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CloneParameterGroupRequest) SetResourceOwnerAccount(v string) *CloneParameterGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CloneParameterGroupRequest) SetResourceOwnerId(v int64) *CloneParameterGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CloneParameterGroupRequest) SetRegionId(v string) *CloneParameterGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CloneParameterGroupRequest) SetTargetRegionId(v string) *CloneParameterGroupRequest {
	s.TargetRegionId = &v
	return s
}

func (s *CloneParameterGroupRequest) SetParameterGroupId(v string) *CloneParameterGroupRequest {
	s.ParameterGroupId = &v
	return s
}

func (s *CloneParameterGroupRequest) SetParameterGroupName(v string) *CloneParameterGroupRequest {
	s.ParameterGroupName = &v
	return s
}

func (s *CloneParameterGroupRequest) SetParameterGroupDesc(v string) *CloneParameterGroupRequest {
	s.ParameterGroupDesc = &v
	return s
}

type CloneParameterGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CloneParameterGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloneParameterGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CloneParameterGroupResponseBody) SetRequestId(v string) *CloneParameterGroupResponseBody {
	s.RequestId = &v
	return s
}

type CloneParameterGroupResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CloneParameterGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CloneParameterGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneParameterGroupResponse) GoString() string {
	return s.String()
}

func (s *CloneParameterGroupResponse) SetHeaders(v map[string]*string) *CloneParameterGroupResponse {
	s.Headers = v
	return s
}

func (s *CloneParameterGroupResponse) SetBody(v *CloneParameterGroupResponseBody) *CloneParameterGroupResponse {
	s.Body = v
	return s
}

type CopyDatabaseRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CopyDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyDatabaseRequest) GoString() string {
	return s.String()
}

func (s *CopyDatabaseRequest) SetOwnerId(v int64) *CopyDatabaseRequest {
	s.OwnerId = &v
	return s
}

func (s *CopyDatabaseRequest) SetResourceOwnerAccount(v string) *CopyDatabaseRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CopyDatabaseRequest) SetResourceOwnerId(v int64) *CopyDatabaseRequest {
	s.ResourceOwnerId = &v
	return s
}

type CopyDatabaseResponseBody struct {
	DBName   *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	TaskId   *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	DBStatus *string `json:"DBStatus,omitempty" xml:"DBStatus,omitempty"`
}

func (s CopyDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *CopyDatabaseResponseBody) SetDBName(v string) *CopyDatabaseResponseBody {
	s.DBName = &v
	return s
}

func (s *CopyDatabaseResponseBody) SetTaskId(v string) *CopyDatabaseResponseBody {
	s.TaskId = &v
	return s
}

func (s *CopyDatabaseResponseBody) SetDBStatus(v string) *CopyDatabaseResponseBody {
	s.DBStatus = &v
	return s
}

type CopyDatabaseResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CopyDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopyDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyDatabaseResponse) GoString() string {
	return s.String()
}

func (s *CopyDatabaseResponse) SetHeaders(v map[string]*string) *CopyDatabaseResponse {
	s.Headers = v
	return s
}

func (s *CopyDatabaseResponse) SetBody(v *CopyDatabaseResponseBody) *CopyDatabaseResponse {
	s.Body = v
	return s
}

type CopyDatabaseBetweenInstancesRequest struct {
	ResourceOwnerId    *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TargetDBInstanceId *string `json:"TargetDBInstanceId,omitempty" xml:"TargetDBInstanceId,omitempty"`
	DbNames            *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	BackupId           *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime        *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	SyncUserPrivilege  *string `json:"SyncUserPrivilege,omitempty" xml:"SyncUserPrivilege,omitempty"`
}

func (s CopyDatabaseBetweenInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyDatabaseBetweenInstancesRequest) GoString() string {
	return s.String()
}

func (s *CopyDatabaseBetweenInstancesRequest) SetResourceOwnerId(v int64) *CopyDatabaseBetweenInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetDBInstanceId(v string) *CopyDatabaseBetweenInstancesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetTargetDBInstanceId(v string) *CopyDatabaseBetweenInstancesRequest {
	s.TargetDBInstanceId = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetDbNames(v string) *CopyDatabaseBetweenInstancesRequest {
	s.DbNames = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetBackupId(v string) *CopyDatabaseBetweenInstancesRequest {
	s.BackupId = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetRestoreTime(v string) *CopyDatabaseBetweenInstancesRequest {
	s.RestoreTime = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetSyncUserPrivilege(v string) *CopyDatabaseBetweenInstancesRequest {
	s.SyncUserPrivilege = &v
	return s
}

type CopyDatabaseBetweenInstancesResponseBody struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CopyDatabaseBetweenInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyDatabaseBetweenInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *CopyDatabaseBetweenInstancesResponseBody) SetDBInstanceId(v string) *CopyDatabaseBetweenInstancesResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesResponseBody) SetRequestId(v string) *CopyDatabaseBetweenInstancesResponseBody {
	s.RequestId = &v
	return s
}

type CopyDatabaseBetweenInstancesResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CopyDatabaseBetweenInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CopyDatabaseBetweenInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyDatabaseBetweenInstancesResponse) GoString() string {
	return s.String()
}

func (s *CopyDatabaseBetweenInstancesResponse) SetHeaders(v map[string]*string) *CopyDatabaseBetweenInstancesResponse {
	s.Headers = v
	return s
}

func (s *CopyDatabaseBetweenInstancesResponse) SetBody(v *CopyDatabaseBetweenInstancesResponseBody) *CopyDatabaseBetweenInstancesResponse {
	s.Body = v
	return s
}

type CreateAccountRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountPassword      *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	AccountDescription   *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	AccountType          *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CreateAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateAccountRequest) SetOwnerId(v int64) *CreateAccountRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateAccountRequest) SetResourceOwnerAccount(v string) *CreateAccountRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateAccountRequest) SetResourceOwnerId(v int64) *CreateAccountRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateAccountRequest) SetDBInstanceId(v string) *CreateAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateAccountRequest) SetAccountName(v string) *CreateAccountRequest {
	s.AccountName = &v
	return s
}

func (s *CreateAccountRequest) SetAccountPassword(v string) *CreateAccountRequest {
	s.AccountPassword = &v
	return s
}

func (s *CreateAccountRequest) SetAccountDescription(v string) *CreateAccountRequest {
	s.AccountDescription = &v
	return s
}

func (s *CreateAccountRequest) SetAccountType(v string) *CreateAccountRequest {
	s.AccountType = &v
	return s
}

func (s *CreateAccountRequest) SetOwnerAccount(v string) *CreateAccountRequest {
	s.OwnerAccount = &v
	return s
}

type CreateAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAccountResponseBody) SetRequestId(v string) *CreateAccountResponseBody {
	s.RequestId = &v
	return s
}

type CreateAccountResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateAccountResponse) SetHeaders(v map[string]*string) *CreateAccountResponse {
	s.Headers = v
	return s
}

func (s *CreateAccountResponse) SetBody(v *CreateAccountResponseBody) *CreateAccountResponse {
	s.Body = v
	return s
}

type CreateBackupRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBName          *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	BackupStrategy  *string `json:"BackupStrategy,omitempty" xml:"BackupStrategy,omitempty"`
	BackupMethod    *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty"`
	BackupType      *string `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
}

func (s CreateBackupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupRequest) GoString() string {
	return s.String()
}

func (s *CreateBackupRequest) SetResourceOwnerId(v int64) *CreateBackupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateBackupRequest) SetDBInstanceId(v string) *CreateBackupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateBackupRequest) SetDBName(v string) *CreateBackupRequest {
	s.DBName = &v
	return s
}

func (s *CreateBackupRequest) SetBackupStrategy(v string) *CreateBackupRequest {
	s.BackupStrategy = &v
	return s
}

func (s *CreateBackupRequest) SetBackupMethod(v string) *CreateBackupRequest {
	s.BackupMethod = &v
	return s
}

func (s *CreateBackupRequest) SetBackupType(v string) *CreateBackupRequest {
	s.BackupType = &v
	return s
}

type CreateBackupResponseBody struct {
	BackupJobId *string `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBackupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackupResponseBody) SetBackupJobId(v string) *CreateBackupResponseBody {
	s.BackupJobId = &v
	return s
}

func (s *CreateBackupResponseBody) SetRequestId(v string) *CreateBackupResponseBody {
	s.RequestId = &v
	return s
}

type CreateBackupResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateBackupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateBackupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupResponse) GoString() string {
	return s.String()
}

func (s *CreateBackupResponse) SetHeaders(v map[string]*string) *CreateBackupResponse {
	s.Headers = v
	return s
}

func (s *CreateBackupResponse) SetBody(v *CreateBackupResponseBody) *CreateBackupResponse {
	s.Body = v
	return s
}

type CreateDatabaseRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	CharacterSetName     *string `json:"CharacterSetName,omitempty" xml:"CharacterSetName,omitempty"`
	DBDescription        *string `json:"DBDescription,omitempty" xml:"DBDescription,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CreateDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseRequest) GoString() string {
	return s.String()
}

func (s *CreateDatabaseRequest) SetOwnerId(v int64) *CreateDatabaseRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDatabaseRequest) SetResourceOwnerAccount(v string) *CreateDatabaseRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDatabaseRequest) SetResourceOwnerId(v int64) *CreateDatabaseRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDatabaseRequest) SetDBInstanceId(v string) *CreateDatabaseRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDatabaseRequest) SetDBName(v string) *CreateDatabaseRequest {
	s.DBName = &v
	return s
}

func (s *CreateDatabaseRequest) SetCharacterSetName(v string) *CreateDatabaseRequest {
	s.CharacterSetName = &v
	return s
}

func (s *CreateDatabaseRequest) SetDBDescription(v string) *CreateDatabaseRequest {
	s.DBDescription = &v
	return s
}

func (s *CreateDatabaseRequest) SetOwnerAccount(v string) *CreateDatabaseRequest {
	s.OwnerAccount = &v
	return s
}

type CreateDatabaseResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDatabaseResponseBody) SetRequestId(v string) *CreateDatabaseResponseBody {
	s.RequestId = &v
	return s
}

type CreateDatabaseResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseResponse) GoString() string {
	return s.String()
}

func (s *CreateDatabaseResponse) SetHeaders(v map[string]*string) *CreateDatabaseResponse {
	s.Headers = v
	return s
}

func (s *CreateDatabaseResponse) SetBody(v *CreateDatabaseResponseBody) *CreateDatabaseResponse {
	s.Body = v
	return s
}

type CreateDBInstanceRequest struct {
	ResourceOwnerId                *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Engine                         *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion                  *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceClass                *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage              *int32  `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	SystemDBCharset                *string `json:"SystemDBCharset,omitempty" xml:"SystemDBCharset,omitempty"`
	DBInstanceNetType              *string `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty"`
	DBInstanceDescription          *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	SecurityIPList                 *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
	ClientToken                    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	PayType                        *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	ZoneId                         *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ZoneIdSlave1                   *string `json:"ZoneIdSlave1,omitempty" xml:"ZoneIdSlave1,omitempty"`
	ZoneIdSlave2                   *string `json:"ZoneIdSlave2,omitempty" xml:"ZoneIdSlave2,omitempty"`
	InstanceNetworkType            *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	ConnectionMode                 *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	VPCId                          *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId                      *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress               *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	UsedTime                       *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	Period                         *string `json:"Period,omitempty" xml:"Period,omitempty"`
	ResourceGroupId                *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	DBInstanceStorageType          *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	BusinessInfo                   *string `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
	EncryptionKey                  *string `json:"EncryptionKey,omitempty" xml:"EncryptionKey,omitempty"`
	RoleARN                        *string `json:"RoleARN,omitempty" xml:"RoleARN,omitempty"`
	AutoRenew                      *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	Category                       *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DedicatedHostGroupId           *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	TargetDedicatedHostIdForMaster *string `json:"TargetDedicatedHostIdForMaster,omitempty" xml:"TargetDedicatedHostIdForMaster,omitempty"`
	TargetDedicatedHostIdForSlave  *string `json:"TargetDedicatedHostIdForSlave,omitempty" xml:"TargetDedicatedHostIdForSlave,omitempty"`
	TargetDedicatedHostIdForLog    *string `json:"TargetDedicatedHostIdForLog,omitempty" xml:"TargetDedicatedHostIdForLog,omitempty"`
	DBParamGroupId                 *string `json:"DBParamGroupId,omitempty" xml:"DBParamGroupId,omitempty"`
	DBTimeZone                     *string `json:"DBTimeZone,omitempty" xml:"DBTimeZone,omitempty"`
	DBIsIgnoreCase                 *string `json:"DBIsIgnoreCase,omitempty" xml:"DBIsIgnoreCase,omitempty"`
	TargetMinorVersion             *string `json:"TargetMinorVersion,omitempty" xml:"TargetMinorVersion,omitempty"`
	StorageAutoScale               *string `json:"StorageAutoScale,omitempty" xml:"StorageAutoScale,omitempty"`
	StorageThreshold               *int32  `json:"StorageThreshold,omitempty" xml:"StorageThreshold,omitempty"`
	StorageUpperBound              *int32  `json:"StorageUpperBound,omitempty" xml:"StorageUpperBound,omitempty"`
	DryRun                         *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	UserBackupId                   *string `json:"UserBackupId,omitempty" xml:"UserBackupId,omitempty"`
}

func (s CreateDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceRequest) SetResourceOwnerId(v int64) *CreateDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetRegionId(v string) *CreateDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEngine(v string) *CreateDBInstanceRequest {
	s.Engine = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEngineVersion(v string) *CreateDBInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceClass(v string) *CreateDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceStorage(v int32) *CreateDBInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSystemDBCharset(v string) *CreateDBInstanceRequest {
	s.SystemDBCharset = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceNetType(v string) *CreateDBInstanceRequest {
	s.DBInstanceNetType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceDescription(v string) *CreateDBInstanceRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSecurityIPList(v string) *CreateDBInstanceRequest {
	s.SecurityIPList = &v
	return s
}

func (s *CreateDBInstanceRequest) SetClientToken(v string) *CreateDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPayType(v string) *CreateDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetZoneId(v string) *CreateDBInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetZoneIdSlave1(v string) *CreateDBInstanceRequest {
	s.ZoneIdSlave1 = &v
	return s
}

func (s *CreateDBInstanceRequest) SetZoneIdSlave2(v string) *CreateDBInstanceRequest {
	s.ZoneIdSlave2 = &v
	return s
}

func (s *CreateDBInstanceRequest) SetInstanceNetworkType(v string) *CreateDBInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetConnectionMode(v string) *CreateDBInstanceRequest {
	s.ConnectionMode = &v
	return s
}

func (s *CreateDBInstanceRequest) SetVPCId(v string) *CreateDBInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetVSwitchId(v string) *CreateDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPrivateIpAddress(v string) *CreateDBInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateDBInstanceRequest) SetUsedTime(v string) *CreateDBInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPeriod(v string) *CreateDBInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateDBInstanceRequest) SetResourceGroupId(v string) *CreateDBInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceStorageType(v string) *CreateDBInstanceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetBusinessInfo(v string) *CreateDBInstanceRequest {
	s.BusinessInfo = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEncryptionKey(v string) *CreateDBInstanceRequest {
	s.EncryptionKey = &v
	return s
}

func (s *CreateDBInstanceRequest) SetRoleARN(v string) *CreateDBInstanceRequest {
	s.RoleARN = &v
	return s
}

func (s *CreateDBInstanceRequest) SetAutoRenew(v string) *CreateDBInstanceRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateDBInstanceRequest) SetCategory(v string) *CreateDBInstanceRequest {
	s.Category = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDedicatedHostGroupId(v string) *CreateDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetTargetDedicatedHostIdForMaster(v string) *CreateDBInstanceRequest {
	s.TargetDedicatedHostIdForMaster = &v
	return s
}

func (s *CreateDBInstanceRequest) SetTargetDedicatedHostIdForSlave(v string) *CreateDBInstanceRequest {
	s.TargetDedicatedHostIdForSlave = &v
	return s
}

func (s *CreateDBInstanceRequest) SetTargetDedicatedHostIdForLog(v string) *CreateDBInstanceRequest {
	s.TargetDedicatedHostIdForLog = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBParamGroupId(v string) *CreateDBInstanceRequest {
	s.DBParamGroupId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBTimeZone(v string) *CreateDBInstanceRequest {
	s.DBTimeZone = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBIsIgnoreCase(v string) *CreateDBInstanceRequest {
	s.DBIsIgnoreCase = &v
	return s
}

func (s *CreateDBInstanceRequest) SetTargetMinorVersion(v string) *CreateDBInstanceRequest {
	s.TargetMinorVersion = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStorageAutoScale(v string) *CreateDBInstanceRequest {
	s.StorageAutoScale = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStorageThreshold(v int32) *CreateDBInstanceRequest {
	s.StorageThreshold = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStorageUpperBound(v int32) *CreateDBInstanceRequest {
	s.StorageUpperBound = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDryRun(v bool) *CreateDBInstanceRequest {
	s.DryRun = &v
	return s
}

func (s *CreateDBInstanceRequest) SetUserBackupId(v string) *CreateDBInstanceRequest {
	s.UserBackupId = &v
	return s
}

type CreateDBInstanceResponseBody struct {
	DryRunResult     *bool   `json:"DryRunResult,omitempty" xml:"DryRunResult,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Port             *string `json:"Port,omitempty" xml:"Port,omitempty"`
	DryRun           *bool   `json:"DryRun,omitempty" xml:"DryRun,omitempty"`
	OrderId          *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s CreateDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceResponseBody) SetDryRunResult(v bool) *CreateDBInstanceResponseBody {
	s.DryRunResult = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetRequestId(v string) *CreateDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetConnectionString(v string) *CreateDBInstanceResponseBody {
	s.ConnectionString = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetDBInstanceId(v string) *CreateDBInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetPort(v string) *CreateDBInstanceResponseBody {
	s.Port = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetDryRun(v bool) *CreateDBInstanceResponseBody {
	s.DryRun = &v
	return s
}

func (s *CreateDBInstanceResponseBody) SetOrderId(v string) *CreateDBInstanceResponseBody {
	s.OrderId = &v
	return s
}

type CreateDBInstanceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceResponse) SetHeaders(v map[string]*string) *CreateDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateDBInstanceResponse) SetBody(v *CreateDBInstanceResponseBody) *CreateDBInstanceResponse {
	s.Body = v
	return s
}

type CreateDBProxyEndpointAddressRequest struct {
	RegionId                    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId                *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBProxyEndpointId           *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty"`
	ConnectionStringPrefix      *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	DBProxyNewConnectStringPort *string `json:"DBProxyNewConnectStringPort,omitempty" xml:"DBProxyNewConnectStringPort,omitempty"`
	DBProxyConnectStringNetType *string `json:"DBProxyConnectStringNetType,omitempty" xml:"DBProxyConnectStringNetType,omitempty"`
	VPCId                       *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId                   *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateDBProxyEndpointAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDBProxyEndpointAddressRequest) GoString() string {
	return s.String()
}

func (s *CreateDBProxyEndpointAddressRequest) SetRegionId(v string) *CreateDBProxyEndpointAddressRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetDBInstanceId(v string) *CreateDBProxyEndpointAddressRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetDBProxyEndpointId(v string) *CreateDBProxyEndpointAddressRequest {
	s.DBProxyEndpointId = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetConnectionStringPrefix(v string) *CreateDBProxyEndpointAddressRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetDBProxyNewConnectStringPort(v string) *CreateDBProxyEndpointAddressRequest {
	s.DBProxyNewConnectStringPort = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetDBProxyConnectStringNetType(v string) *CreateDBProxyEndpointAddressRequest {
	s.DBProxyConnectStringNetType = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetVPCId(v string) *CreateDBProxyEndpointAddressRequest {
	s.VPCId = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetVSwitchId(v string) *CreateDBProxyEndpointAddressRequest {
	s.VSwitchId = &v
	return s
}

type CreateDBProxyEndpointAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDBProxyEndpointAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDBProxyEndpointAddressResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDBProxyEndpointAddressResponseBody) SetRequestId(v string) *CreateDBProxyEndpointAddressResponseBody {
	s.RequestId = &v
	return s
}

type CreateDBProxyEndpointAddressResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDBProxyEndpointAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDBProxyEndpointAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDBProxyEndpointAddressResponse) GoString() string {
	return s.String()
}

func (s *CreateDBProxyEndpointAddressResponse) SetHeaders(v map[string]*string) *CreateDBProxyEndpointAddressResponse {
	s.Headers = v
	return s
}

func (s *CreateDBProxyEndpointAddressResponse) SetBody(v *CreateDBProxyEndpointAddressResponseBody) *CreateDBProxyEndpointAddressResponse {
	s.Body = v
	return s
}

type CreateDdrInstanceRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Engine                *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage     *int32  `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	SystemDBCharset       *string `json:"SystemDBCharset,omitempty" xml:"SystemDBCharset,omitempty"`
	DBInstanceNetType     *string `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty"`
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	SecurityIPList        *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceNetworkType   *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	ConnectionMode        *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	VPCId                 *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId             *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress      *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	UsedTime              *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	Period                *string `json:"Period,omitempty" xml:"Period,omitempty"`
	ResourceGroupId       *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	RestoreType           *string `json:"RestoreType,omitempty" xml:"RestoreType,omitempty"`
	BackupSetId           *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	RestoreTime           *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	SourceRegion          *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	SourceDBInstanceName  *string `json:"SourceDBInstanceName,omitempty" xml:"SourceDBInstanceName,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	BinlogName            *string `json:"BinlogName,omitempty" xml:"BinlogName,omitempty"`
	BinlogPosition        *string `json:"BinlogPosition,omitempty" xml:"BinlogPosition,omitempty"`
	BinlogRole            *string `json:"BinlogRole,omitempty" xml:"BinlogRole,omitempty"`
}

func (s CreateDdrInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDdrInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateDdrInstanceRequest) SetOwnerId(v int64) *CreateDdrInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetResourceOwnerAccount(v string) *CreateDdrInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetResourceOwnerId(v int64) *CreateDdrInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetRegionId(v string) *CreateDdrInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetEngine(v string) *CreateDdrInstanceRequest {
	s.Engine = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetEngineVersion(v string) *CreateDdrInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetDBInstanceClass(v string) *CreateDdrInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetDBInstanceStorage(v int32) *CreateDdrInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetSystemDBCharset(v string) *CreateDdrInstanceRequest {
	s.SystemDBCharset = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetDBInstanceNetType(v string) *CreateDdrInstanceRequest {
	s.DBInstanceNetType = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetDBInstanceDescription(v string) *CreateDdrInstanceRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetSecurityIPList(v string) *CreateDdrInstanceRequest {
	s.SecurityIPList = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetClientToken(v string) *CreateDdrInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetPayType(v string) *CreateDdrInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetZoneId(v string) *CreateDdrInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetInstanceNetworkType(v string) *CreateDdrInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetConnectionMode(v string) *CreateDdrInstanceRequest {
	s.ConnectionMode = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetVPCId(v string) *CreateDdrInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetVSwitchId(v string) *CreateDdrInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetPrivateIpAddress(v string) *CreateDdrInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetOwnerAccount(v string) *CreateDdrInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetUsedTime(v string) *CreateDdrInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetPeriod(v string) *CreateDdrInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetResourceGroupId(v string) *CreateDdrInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetRestoreType(v string) *CreateDdrInstanceRequest {
	s.RestoreType = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetBackupSetId(v string) *CreateDdrInstanceRequest {
	s.BackupSetId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetRestoreTime(v string) *CreateDdrInstanceRequest {
	s.RestoreTime = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetSourceRegion(v string) *CreateDdrInstanceRequest {
	s.SourceRegion = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetSourceDBInstanceName(v string) *CreateDdrInstanceRequest {
	s.SourceDBInstanceName = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetDBInstanceStorageType(v string) *CreateDdrInstanceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetBinlogName(v string) *CreateDdrInstanceRequest {
	s.BinlogName = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetBinlogPosition(v string) *CreateDdrInstanceRequest {
	s.BinlogPosition = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetBinlogRole(v string) *CreateDdrInstanceRequest {
	s.BinlogRole = &v
	return s
}

type CreateDdrInstanceResponseBody struct {
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Port             *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	OrderId          *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s CreateDdrInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDdrInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDdrInstanceResponseBody) SetDBInstanceId(v string) *CreateDdrInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDdrInstanceResponseBody) SetRequestId(v string) *CreateDdrInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDdrInstanceResponseBody) SetPort(v string) *CreateDdrInstanceResponseBody {
	s.Port = &v
	return s
}

func (s *CreateDdrInstanceResponseBody) SetConnectionString(v string) *CreateDdrInstanceResponseBody {
	s.ConnectionString = &v
	return s
}

func (s *CreateDdrInstanceResponseBody) SetOrderId(v string) *CreateDdrInstanceResponseBody {
	s.OrderId = &v
	return s
}

type CreateDdrInstanceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDdrInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDdrInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDdrInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateDdrInstanceResponse) SetHeaders(v map[string]*string) *CreateDdrInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateDdrInstanceResponse) SetBody(v *CreateDdrInstanceResponseBody) *CreateDdrInstanceResponse {
	s.Body = v
	return s
}

type CreateDedicatedHostRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	HostName             *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	HostClass            *string `json:"HostClass,omitempty" xml:"HostClass,omitempty"`
	PayType              *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	Period               *string `json:"Period,omitempty" xml:"Period,omitempty"`
	UsedTime             *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	AutoRenew            *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
}

func (s CreateDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostRequest) SetOwnerId(v int64) *CreateDedicatedHostRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetResourceOwnerAccount(v string) *CreateDedicatedHostRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetResourceOwnerId(v int64) *CreateDedicatedHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetRegionId(v string) *CreateDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetDedicatedHostGroupId(v string) *CreateDedicatedHostRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetHostName(v string) *CreateDedicatedHostRequest {
	s.HostName = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetZoneId(v string) *CreateDedicatedHostRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetVSwitchId(v string) *CreateDedicatedHostRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetHostClass(v string) *CreateDedicatedHostRequest {
	s.HostClass = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetPayType(v string) *CreateDedicatedHostRequest {
	s.PayType = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetPeriod(v string) *CreateDedicatedHostRequest {
	s.Period = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetUsedTime(v string) *CreateDedicatedHostRequest {
	s.UsedTime = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetClientToken(v string) *CreateDedicatedHostRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetAutoRenew(v string) *CreateDedicatedHostRequest {
	s.AutoRenew = &v
	return s
}

type CreateDedicatedHostResponseBody struct {
	RequestId        *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DedicateHostList *CreateDedicatedHostResponseBodyDedicateHostList `json:"DedicateHostList,omitempty" xml:"DedicateHostList,omitempty" type:"Struct"`
	OrderId          *int64                                           `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s CreateDedicatedHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostResponseBody) SetRequestId(v string) *CreateDedicatedHostResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDedicatedHostResponseBody) SetDedicateHostList(v *CreateDedicatedHostResponseBodyDedicateHostList) *CreateDedicatedHostResponseBody {
	s.DedicateHostList = v
	return s
}

func (s *CreateDedicatedHostResponseBody) SetOrderId(v int64) *CreateDedicatedHostResponseBody {
	s.OrderId = &v
	return s
}

type CreateDedicatedHostResponseBodyDedicateHostList struct {
	DedicateHostList []*CreateDedicatedHostResponseBodyDedicateHostListDedicateHostList `json:"DedicateHostList,omitempty" xml:"DedicateHostList,omitempty" type:"Repeated"`
}

func (s CreateDedicatedHostResponseBodyDedicateHostList) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostResponseBodyDedicateHostList) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostResponseBodyDedicateHostList) SetDedicateHostList(v []*CreateDedicatedHostResponseBodyDedicateHostListDedicateHostList) *CreateDedicatedHostResponseBodyDedicateHostList {
	s.DedicateHostList = v
	return s
}

type CreateDedicatedHostResponseBodyDedicateHostListDedicateHostList struct {
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
}

func (s CreateDedicatedHostResponseBodyDedicateHostListDedicateHostList) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostResponseBodyDedicateHostListDedicateHostList) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostResponseBodyDedicateHostListDedicateHostList) SetDedicatedHostId(v string) *CreateDedicatedHostResponseBodyDedicateHostListDedicateHostList {
	s.DedicatedHostId = &v
	return s
}

type CreateDedicatedHostResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDedicatedHostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostResponse) SetHeaders(v map[string]*string) *CreateDedicatedHostResponse {
	s.Headers = v
	return s
}

func (s *CreateDedicatedHostResponse) SetBody(v *CreateDedicatedHostResponseBody) *CreateDedicatedHostResponse {
	s.Body = v
	return s
}

type CreateDedicatedHostAccountRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountPassword      *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateDedicatedHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostAccountRequest) SetOwnerId(v int64) *CreateDedicatedHostAccountRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDedicatedHostAccountRequest) SetResourceOwnerAccount(v string) *CreateDedicatedHostAccountRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDedicatedHostAccountRequest) SetResourceOwnerId(v int64) *CreateDedicatedHostAccountRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDedicatedHostAccountRequest) SetDedicatedHostId(v string) *CreateDedicatedHostAccountRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *CreateDedicatedHostAccountRequest) SetAccountName(v string) *CreateDedicatedHostAccountRequest {
	s.AccountName = &v
	return s
}

func (s *CreateDedicatedHostAccountRequest) SetAccountPassword(v string) *CreateDedicatedHostAccountRequest {
	s.AccountPassword = &v
	return s
}

func (s *CreateDedicatedHostAccountRequest) SetRegionId(v string) *CreateDedicatedHostAccountRequest {
	s.RegionId = &v
	return s
}

type CreateDedicatedHostAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDedicatedHostAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostAccountResponseBody) SetRequestId(v string) *CreateDedicatedHostAccountResponseBody {
	s.RequestId = &v
	return s
}

type CreateDedicatedHostAccountResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDedicatedHostAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDedicatedHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostAccountResponse) SetHeaders(v map[string]*string) *CreateDedicatedHostAccountResponse {
	s.Headers = v
	return s
}

func (s *CreateDedicatedHostAccountResponse) SetBody(v *CreateDedicatedHostAccountResponseBody) *CreateDedicatedHostAccountResponse {
	s.Body = v
	return s
}

type CreateDedicatedHostGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	CpuAllocationRatio   *int32  `json:"CpuAllocationRatio,omitempty" xml:"CpuAllocationRatio,omitempty"`
	MemAllocationRatio   *int32  `json:"MemAllocationRatio,omitempty" xml:"MemAllocationRatio,omitempty"`
	DiskAllocationRatio  *int32  `json:"DiskAllocationRatio,omitempty" xml:"DiskAllocationRatio,omitempty"`
	AllocationPolicy     *string `json:"AllocationPolicy,omitempty" xml:"AllocationPolicy,omitempty"`
	VPCId                *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	HostReplacePolicy    *string `json:"HostReplacePolicy,omitempty" xml:"HostReplacePolicy,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OpenPermission       *int32  `json:"OpenPermission,omitempty" xml:"OpenPermission,omitempty"`
}

func (s CreateDedicatedHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostGroupRequest) SetOwnerId(v int64) *CreateDedicatedHostGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetResourceOwnerAccount(v string) *CreateDedicatedHostGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetResourceOwnerId(v int64) *CreateDedicatedHostGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetRegionId(v string) *CreateDedicatedHostGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetEngine(v string) *CreateDedicatedHostGroupRequest {
	s.Engine = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetCpuAllocationRatio(v int32) *CreateDedicatedHostGroupRequest {
	s.CpuAllocationRatio = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetMemAllocationRatio(v int32) *CreateDedicatedHostGroupRequest {
	s.MemAllocationRatio = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetDiskAllocationRatio(v int32) *CreateDedicatedHostGroupRequest {
	s.DiskAllocationRatio = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetAllocationPolicy(v string) *CreateDedicatedHostGroupRequest {
	s.AllocationPolicy = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetVPCId(v string) *CreateDedicatedHostGroupRequest {
	s.VPCId = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetHostReplacePolicy(v string) *CreateDedicatedHostGroupRequest {
	s.HostReplacePolicy = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetClientToken(v string) *CreateDedicatedHostGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetOpenPermission(v int32) *CreateDedicatedHostGroupRequest {
	s.OpenPermission = &v
	return s
}

type CreateDedicatedHostGroupResponseBody struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
}

func (s CreateDedicatedHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostGroupResponseBody) SetRequestId(v string) *CreateDedicatedHostGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDedicatedHostGroupResponseBody) SetDedicatedHostGroupId(v string) *CreateDedicatedHostGroupResponseBody {
	s.DedicatedHostGroupId = &v
	return s
}

type CreateDedicatedHostGroupResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDedicatedHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDedicatedHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostGroupResponse) SetHeaders(v map[string]*string) *CreateDedicatedHostGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateDedicatedHostGroupResponse) SetBody(v *CreateDedicatedHostGroupResponseBody) *CreateDedicatedHostGroupResponse {
	s.Body = v
	return s
}

type CreateDedicatedHostUserRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DedicatedHostName    *string `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	UserPassword         *string `json:"UserPassword,omitempty" xml:"UserPassword,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateDedicatedHostUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostUserRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostUserRequest) SetOwnerId(v int64) *CreateDedicatedHostUserRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDedicatedHostUserRequest) SetResourceOwnerAccount(v string) *CreateDedicatedHostUserRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDedicatedHostUserRequest) SetResourceOwnerId(v int64) *CreateDedicatedHostUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDedicatedHostUserRequest) SetDedicatedHostName(v string) *CreateDedicatedHostUserRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *CreateDedicatedHostUserRequest) SetUserName(v string) *CreateDedicatedHostUserRequest {
	s.UserName = &v
	return s
}

func (s *CreateDedicatedHostUserRequest) SetUserPassword(v string) *CreateDedicatedHostUserRequest {
	s.UserPassword = &v
	return s
}

func (s *CreateDedicatedHostUserRequest) SetRegionId(v string) *CreateDedicatedHostUserRequest {
	s.RegionId = &v
	return s
}

type CreateDedicatedHostUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDedicatedHostUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostUserResponseBody) SetRequestId(v string) *CreateDedicatedHostUserResponseBody {
	s.RequestId = &v
	return s
}

type CreateDedicatedHostUserResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDedicatedHostUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDedicatedHostUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostUserResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostUserResponse) SetHeaders(v map[string]*string) *CreateDedicatedHostUserResponse {
	s.Headers = v
	return s
}

func (s *CreateDedicatedHostUserResponse) SetBody(v *CreateDedicatedHostUserResponseBody) *CreateDedicatedHostUserResponse {
	s.Body = v
	return s
}

type CreateDiagnosticReportRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s CreateDiagnosticReportRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportRequest) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportRequest) SetDBInstanceId(v string) *CreateDiagnosticReportRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetStartTime(v string) *CreateDiagnosticReportRequest {
	s.StartTime = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetEndTime(v string) *CreateDiagnosticReportRequest {
	s.EndTime = &v
	return s
}

type CreateDiagnosticReportResponseBody struct {
	ReportId  *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDiagnosticReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponseBody) SetReportId(v string) *CreateDiagnosticReportResponseBody {
	s.ReportId = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetRequestId(v string) *CreateDiagnosticReportResponseBody {
	s.RequestId = &v
	return s
}

type CreateDiagnosticReportResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDiagnosticReportResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDiagnosticReportResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponse) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponse) SetHeaders(v map[string]*string) *CreateDiagnosticReportResponse {
	s.Headers = v
	return s
}

func (s *CreateDiagnosticReportResponse) SetBody(v *CreateDiagnosticReportResponseBody) *CreateDiagnosticReportResponse {
	s.Body = v
	return s
}

type CreateGdnInstanceRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	PrimaryInstanceName   *string `json:"PrimaryInstanceName,omitempty" xml:"PrimaryInstanceName,omitempty"`
	PrimaryInstanceRegion *string `json:"PrimaryInstanceRegion,omitempty" xml:"PrimaryInstanceRegion,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s CreateGdnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGdnInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateGdnInstanceRequest) SetOwnerId(v int64) *CreateGdnInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateGdnInstanceRequest) SetResourceOwnerAccount(v string) *CreateGdnInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateGdnInstanceRequest) SetResourceOwnerId(v int64) *CreateGdnInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateGdnInstanceRequest) SetClientToken(v string) *CreateGdnInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateGdnInstanceRequest) SetPrimaryInstanceName(v string) *CreateGdnInstanceRequest {
	s.PrimaryInstanceName = &v
	return s
}

func (s *CreateGdnInstanceRequest) SetPrimaryInstanceRegion(v string) *CreateGdnInstanceRequest {
	s.PrimaryInstanceRegion = &v
	return s
}

func (s *CreateGdnInstanceRequest) SetDescription(v string) *CreateGdnInstanceRequest {
	s.Description = &v
	return s
}

type CreateGdnInstanceResponseBody struct {
	GdnInstanceId   *int64  `json:"GdnInstanceId,omitempty" xml:"GdnInstanceId,omitempty"`
	GdnInstanceName *string `json:"GdnInstanceName,omitempty" xml:"GdnInstanceName,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateGdnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGdnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateGdnInstanceResponseBody) SetGdnInstanceId(v int64) *CreateGdnInstanceResponseBody {
	s.GdnInstanceId = &v
	return s
}

func (s *CreateGdnInstanceResponseBody) SetGdnInstanceName(v string) *CreateGdnInstanceResponseBody {
	s.GdnInstanceName = &v
	return s
}

func (s *CreateGdnInstanceResponseBody) SetRequestId(v string) *CreateGdnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateGdnInstanceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateGdnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateGdnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGdnInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateGdnInstanceResponse) SetHeaders(v map[string]*string) *CreateGdnInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateGdnInstanceResponse) SetBody(v *CreateGdnInstanceResponseBody) *CreateGdnInstanceResponse {
	s.Body = v
	return s
}

type CreateMigrateTaskRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	BackupMode           *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	IsOnlineDB           *string `json:"IsOnlineDB,omitempty" xml:"IsOnlineDB,omitempty"`
	CheckDBMode          *string `json:"CheckDBMode,omitempty" xml:"CheckDBMode,omitempty"`
	OssObjectPositions   *string `json:"OssObjectPositions,omitempty" xml:"OssObjectPositions,omitempty"`
	OSSUrls              *string `json:"OSSUrls,omitempty" xml:"OSSUrls,omitempty"`
	MigrateTaskId        *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
}

func (s CreateMigrateTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrateTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateMigrateTaskRequest) SetOwnerId(v int64) *CreateMigrateTaskRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetResourceOwnerAccount(v string) *CreateMigrateTaskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetResourceOwnerId(v int64) *CreateMigrateTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetDBInstanceId(v string) *CreateMigrateTaskRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetDBName(v string) *CreateMigrateTaskRequest {
	s.DBName = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetBackupMode(v string) *CreateMigrateTaskRequest {
	s.BackupMode = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetIsOnlineDB(v string) *CreateMigrateTaskRequest {
	s.IsOnlineDB = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetCheckDBMode(v string) *CreateMigrateTaskRequest {
	s.CheckDBMode = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetOssObjectPositions(v string) *CreateMigrateTaskRequest {
	s.OssObjectPositions = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetOSSUrls(v string) *CreateMigrateTaskRequest {
	s.OSSUrls = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetMigrateTaskId(v string) *CreateMigrateTaskRequest {
	s.MigrateTaskId = &v
	return s
}

type CreateMigrateTaskResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DBName        *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	BackupMode    *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	MigrateTaskId *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
	TaskId        *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateMigrateTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrateTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMigrateTaskResponseBody) SetRequestId(v string) *CreateMigrateTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMigrateTaskResponseBody) SetDBName(v string) *CreateMigrateTaskResponseBody {
	s.DBName = &v
	return s
}

func (s *CreateMigrateTaskResponseBody) SetBackupMode(v string) *CreateMigrateTaskResponseBody {
	s.BackupMode = &v
	return s
}

func (s *CreateMigrateTaskResponseBody) SetDBInstanceId(v string) *CreateMigrateTaskResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateMigrateTaskResponseBody) SetMigrateTaskId(v string) *CreateMigrateTaskResponseBody {
	s.MigrateTaskId = &v
	return s
}

func (s *CreateMigrateTaskResponseBody) SetTaskId(v string) *CreateMigrateTaskResponseBody {
	s.TaskId = &v
	return s
}

type CreateMigrateTaskResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateMigrateTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMigrateTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrateTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateMigrateTaskResponse) SetHeaders(v map[string]*string) *CreateMigrateTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateMigrateTaskResponse) SetBody(v *CreateMigrateTaskResponseBody) *CreateMigrateTaskResponse {
	s.Body = v
	return s
}

type CreateMigrateTaskForSQLServerRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	TaskType             *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	IsOnlineDB           *string `json:"IsOnlineDB,omitempty" xml:"IsOnlineDB,omitempty"`
	OSSUrls              *string `json:"OSSUrls,omitempty" xml:"OSSUrls,omitempty"`
}

func (s CreateMigrateTaskForSQLServerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrateTaskForSQLServerRequest) GoString() string {
	return s.String()
}

func (s *CreateMigrateTaskForSQLServerRequest) SetOwnerId(v int64) *CreateMigrateTaskForSQLServerRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetResourceOwnerAccount(v string) *CreateMigrateTaskForSQLServerRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetResourceOwnerId(v int64) *CreateMigrateTaskForSQLServerRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetDBInstanceId(v string) *CreateMigrateTaskForSQLServerRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetDBName(v string) *CreateMigrateTaskForSQLServerRequest {
	s.DBName = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetTaskType(v string) *CreateMigrateTaskForSQLServerRequest {
	s.TaskType = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetIsOnlineDB(v string) *CreateMigrateTaskForSQLServerRequest {
	s.IsOnlineDB = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetOSSUrls(v string) *CreateMigrateTaskForSQLServerRequest {
	s.OSSUrls = &v
	return s
}

type CreateMigrateTaskForSQLServerResponseBody struct {
	MigrateIaskId  *string `json:"MigrateIaskId,omitempty" xml:"MigrateIaskId,omitempty"`
	TaskType       *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	DBInstanceName *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DBName         *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	DBInstanceId   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TaskId         *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateMigrateTaskForSQLServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrateTaskForSQLServerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMigrateTaskForSQLServerResponseBody) SetMigrateIaskId(v string) *CreateMigrateTaskForSQLServerResponseBody {
	s.MigrateIaskId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponseBody) SetTaskType(v string) *CreateMigrateTaskForSQLServerResponseBody {
	s.TaskType = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponseBody) SetDBInstanceName(v string) *CreateMigrateTaskForSQLServerResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponseBody) SetRequestId(v string) *CreateMigrateTaskForSQLServerResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponseBody) SetDBName(v string) *CreateMigrateTaskForSQLServerResponseBody {
	s.DBName = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponseBody) SetDBInstanceId(v string) *CreateMigrateTaskForSQLServerResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponseBody) SetTaskId(v string) *CreateMigrateTaskForSQLServerResponseBody {
	s.TaskId = &v
	return s
}

type CreateMigrateTaskForSQLServerResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateMigrateTaskForSQLServerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMigrateTaskForSQLServerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrateTaskForSQLServerResponse) GoString() string {
	return s.String()
}

func (s *CreateMigrateTaskForSQLServerResponse) SetHeaders(v map[string]*string) *CreateMigrateTaskForSQLServerResponse {
	s.Headers = v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponse) SetBody(v *CreateMigrateTaskForSQLServerResponseBody) *CreateMigrateTaskForSQLServerResponse {
	s.Body = v
	return s
}

type CreateOnlineDatabaseTaskRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	MigrateTaskId        *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
	CheckDBMode          *string `json:"CheckDBMode,omitempty" xml:"CheckDBMode,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CreateOnlineDatabaseTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOnlineDatabaseTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateOnlineDatabaseTaskRequest) SetOwnerId(v int64) *CreateOnlineDatabaseTaskRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetResourceOwnerAccount(v string) *CreateOnlineDatabaseTaskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetResourceOwnerId(v int64) *CreateOnlineDatabaseTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetClientToken(v string) *CreateOnlineDatabaseTaskRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetDBInstanceId(v string) *CreateOnlineDatabaseTaskRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetDBName(v string) *CreateOnlineDatabaseTaskRequest {
	s.DBName = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetMigrateTaskId(v string) *CreateOnlineDatabaseTaskRequest {
	s.MigrateTaskId = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetCheckDBMode(v string) *CreateOnlineDatabaseTaskRequest {
	s.CheckDBMode = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetOwnerAccount(v string) *CreateOnlineDatabaseTaskRequest {
	s.OwnerAccount = &v
	return s
}

type CreateOnlineDatabaseTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateOnlineDatabaseTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOnlineDatabaseTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOnlineDatabaseTaskResponseBody) SetRequestId(v string) *CreateOnlineDatabaseTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateOnlineDatabaseTaskResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateOnlineDatabaseTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateOnlineDatabaseTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOnlineDatabaseTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateOnlineDatabaseTaskResponse) SetHeaders(v map[string]*string) *CreateOnlineDatabaseTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateOnlineDatabaseTaskResponse) SetBody(v *CreateOnlineDatabaseTaskResponseBody) *CreateOnlineDatabaseTaskResponse {
	s.Body = v
	return s
}

type CreateParameterGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ParameterGroupName   *string `json:"ParameterGroupName,omitempty" xml:"ParameterGroupName,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	Parameters           *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	ParameterGroupDesc   *string `json:"ParameterGroupDesc,omitempty" xml:"ParameterGroupDesc,omitempty"`
}

func (s CreateParameterGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateParameterGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateParameterGroupRequest) SetOwnerId(v int64) *CreateParameterGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateParameterGroupRequest) SetResourceOwnerAccount(v string) *CreateParameterGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateParameterGroupRequest) SetResourceOwnerId(v int64) *CreateParameterGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateParameterGroupRequest) SetRegionId(v string) *CreateParameterGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateParameterGroupRequest) SetParameterGroupName(v string) *CreateParameterGroupRequest {
	s.ParameterGroupName = &v
	return s
}

func (s *CreateParameterGroupRequest) SetEngine(v string) *CreateParameterGroupRequest {
	s.Engine = &v
	return s
}

func (s *CreateParameterGroupRequest) SetEngineVersion(v string) *CreateParameterGroupRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateParameterGroupRequest) SetParameters(v string) *CreateParameterGroupRequest {
	s.Parameters = &v
	return s
}

func (s *CreateParameterGroupRequest) SetParameterGroupDesc(v string) *CreateParameterGroupRequest {
	s.ParameterGroupDesc = &v
	return s
}

type CreateParameterGroupResponseBody struct {
	ParameterGroupId *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateParameterGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateParameterGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateParameterGroupResponseBody) SetParameterGroupId(v string) *CreateParameterGroupResponseBody {
	s.ParameterGroupId = &v
	return s
}

func (s *CreateParameterGroupResponseBody) SetRequestId(v string) *CreateParameterGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateParameterGroupResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateParameterGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateParameterGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateParameterGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateParameterGroupResponse) SetHeaders(v map[string]*string) *CreateParameterGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateParameterGroupResponse) SetBody(v *CreateParameterGroupResponseBody) *CreateParameterGroupResponse {
	s.Body = v
	return s
}

type CreateReadOnlyDBInstanceRequest struct {
	OwnerId                        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount           *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken                    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId                       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                         *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DBInstanceId                   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBInstanceClass                *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage              *int32  `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	EngineVersion                  *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	PayType                        *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	DBInstanceDescription          *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	InstanceNetworkType            *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	VPCId                          *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId                      *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress               *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	OwnerAccount                   *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceGroupId                *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Category                       *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DBInstanceStorageType          *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	DedicatedHostGroupId           *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	TargetDedicatedHostIdForMaster *string `json:"TargetDedicatedHostIdForMaster,omitempty" xml:"TargetDedicatedHostIdForMaster,omitempty"`
	GdnInstanceName                *string `json:"GdnInstanceName,omitempty" xml:"GdnInstanceName,omitempty"`
	TddlBizType                    *string `json:"TddlBizType,omitempty" xml:"TddlBizType,omitempty"`
	TddlRegionConfig               *string `json:"TddlRegionConfig,omitempty" xml:"TddlRegionConfig,omitempty"`
	InstructionSetArch             *string `json:"InstructionSetArch,omitempty" xml:"InstructionSetArch,omitempty"`
	UsedTime                       *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	Period                         *string `json:"Period,omitempty" xml:"Period,omitempty"`
	AutoRenew                      *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
}

func (s CreateReadOnlyDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateReadOnlyDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateReadOnlyDBInstanceRequest) SetOwnerId(v int64) *CreateReadOnlyDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetResourceOwnerAccount(v string) *CreateReadOnlyDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetResourceOwnerId(v int64) *CreateReadOnlyDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetClientToken(v string) *CreateReadOnlyDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetRegionId(v string) *CreateReadOnlyDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetZoneId(v string) *CreateReadOnlyDBInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDBInstanceId(v string) *CreateReadOnlyDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDBInstanceClass(v string) *CreateReadOnlyDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDBInstanceStorage(v int32) *CreateReadOnlyDBInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetEngineVersion(v string) *CreateReadOnlyDBInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetPayType(v string) *CreateReadOnlyDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDBInstanceDescription(v string) *CreateReadOnlyDBInstanceRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetInstanceNetworkType(v string) *CreateReadOnlyDBInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetVPCId(v string) *CreateReadOnlyDBInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetVSwitchId(v string) *CreateReadOnlyDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetPrivateIpAddress(v string) *CreateReadOnlyDBInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetOwnerAccount(v string) *CreateReadOnlyDBInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetResourceGroupId(v string) *CreateReadOnlyDBInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetCategory(v string) *CreateReadOnlyDBInstanceRequest {
	s.Category = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDBInstanceStorageType(v string) *CreateReadOnlyDBInstanceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDedicatedHostGroupId(v string) *CreateReadOnlyDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetTargetDedicatedHostIdForMaster(v string) *CreateReadOnlyDBInstanceRequest {
	s.TargetDedicatedHostIdForMaster = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetGdnInstanceName(v string) *CreateReadOnlyDBInstanceRequest {
	s.GdnInstanceName = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetTddlBizType(v string) *CreateReadOnlyDBInstanceRequest {
	s.TddlBizType = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetTddlRegionConfig(v string) *CreateReadOnlyDBInstanceRequest {
	s.TddlRegionConfig = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetInstructionSetArch(v string) *CreateReadOnlyDBInstanceRequest {
	s.InstructionSetArch = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetUsedTime(v string) *CreateReadOnlyDBInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetPeriod(v string) *CreateReadOnlyDBInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetAutoRenew(v string) *CreateReadOnlyDBInstanceRequest {
	s.AutoRenew = &v
	return s
}

type CreateReadOnlyDBInstanceResponseBody struct {
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Port             *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	OrderId          *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s CreateReadOnlyDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateReadOnlyDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateReadOnlyDBInstanceResponseBody) SetDBInstanceId(v string) *CreateReadOnlyDBInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceResponseBody) SetRequestId(v string) *CreateReadOnlyDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceResponseBody) SetPort(v string) *CreateReadOnlyDBInstanceResponseBody {
	s.Port = &v
	return s
}

func (s *CreateReadOnlyDBInstanceResponseBody) SetConnectionString(v string) *CreateReadOnlyDBInstanceResponseBody {
	s.ConnectionString = &v
	return s
}

func (s *CreateReadOnlyDBInstanceResponseBody) SetOrderId(v string) *CreateReadOnlyDBInstanceResponseBody {
	s.OrderId = &v
	return s
}

type CreateReadOnlyDBInstanceResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateReadOnlyDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateReadOnlyDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateReadOnlyDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateReadOnlyDBInstanceResponse) SetHeaders(v map[string]*string) *CreateReadOnlyDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateReadOnlyDBInstanceResponse) SetBody(v *CreateReadOnlyDBInstanceResponseBody) *CreateReadOnlyDBInstanceResponse {
	s.Body = v
	return s
}

type CreateTempDBInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupId             *int32  `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime          *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CreateTempDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTempDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateTempDBInstanceRequest) SetOwnerId(v int64) *CreateTempDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateTempDBInstanceRequest) SetResourceOwnerAccount(v string) *CreateTempDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateTempDBInstanceRequest) SetResourceOwnerId(v int64) *CreateTempDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateTempDBInstanceRequest) SetDBInstanceId(v string) *CreateTempDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateTempDBInstanceRequest) SetBackupId(v int32) *CreateTempDBInstanceRequest {
	s.BackupId = &v
	return s
}

func (s *CreateTempDBInstanceRequest) SetRestoreTime(v string) *CreateTempDBInstanceRequest {
	s.RestoreTime = &v
	return s
}

func (s *CreateTempDBInstanceRequest) SetOwnerAccount(v string) *CreateTempDBInstanceRequest {
	s.OwnerAccount = &v
	return s
}

type CreateTempDBInstanceResponseBody struct {
	TempDBInstanceId *string `json:"TempDBInstanceId,omitempty" xml:"TempDBInstanceId,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateTempDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTempDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTempDBInstanceResponseBody) SetTempDBInstanceId(v string) *CreateTempDBInstanceResponseBody {
	s.TempDBInstanceId = &v
	return s
}

func (s *CreateTempDBInstanceResponseBody) SetRequestId(v string) *CreateTempDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateTempDBInstanceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateTempDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateTempDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTempDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateTempDBInstanceResponse) SetHeaders(v map[string]*string) *CreateTempDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateTempDBInstanceResponse) SetBody(v *CreateTempDBInstanceResponseBody) *CreateTempDBInstanceResponse {
	s.Body = v
	return s
}

type DeleteAccountRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccountRequest) GoString() string {
	return s.String()
}

func (s *DeleteAccountRequest) SetOwnerId(v int64) *DeleteAccountRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteAccountRequest) SetResourceOwnerAccount(v string) *DeleteAccountRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteAccountRequest) SetResourceOwnerId(v int64) *DeleteAccountRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteAccountRequest) SetDBInstanceId(v string) *DeleteAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteAccountRequest) SetAccountName(v string) *DeleteAccountRequest {
	s.AccountName = &v
	return s
}

func (s *DeleteAccountRequest) SetOwnerAccount(v string) *DeleteAccountRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccountResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAccountResponseBody) SetRequestId(v string) *DeleteAccountResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAccountResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccountResponse) GoString() string {
	return s.String()
}

func (s *DeleteAccountResponse) SetHeaders(v map[string]*string) *DeleteAccountResponse {
	s.Headers = v
	return s
}

func (s *DeleteAccountResponse) SetBody(v *DeleteAccountResponseBody) *DeleteAccountResponse {
	s.Body = v
	return s
}

type DeleteBackupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteBackupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackupRequest) SetOwnerId(v int64) *DeleteBackupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteBackupRequest) SetResourceOwnerAccount(v string) *DeleteBackupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteBackupRequest) SetResourceOwnerId(v int64) *DeleteBackupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteBackupRequest) SetDBInstanceId(v string) *DeleteBackupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteBackupRequest) SetBackupId(v string) *DeleteBackupRequest {
	s.BackupId = &v
	return s
}

func (s *DeleteBackupRequest) SetOwnerAccount(v string) *DeleteBackupRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteBackupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBackupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBackupResponseBody) SetRequestId(v string) *DeleteBackupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBackupResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteBackupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteBackupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackupResponse) SetHeaders(v map[string]*string) *DeleteBackupResponse {
	s.Headers = v
	return s
}

func (s *DeleteBackupResponse) SetBody(v *DeleteBackupResponseBody) *DeleteBackupResponse {
	s.Body = v
	return s
}

type DeleteBackupFileRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	BackupTime           *string `json:"BackupTime,omitempty" xml:"BackupTime,omitempty"`
}

func (s DeleteBackupFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackupFileRequest) SetOwnerId(v int64) *DeleteBackupFileRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteBackupFileRequest) SetResourceOwnerAccount(v string) *DeleteBackupFileRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteBackupFileRequest) SetResourceOwnerId(v int64) *DeleteBackupFileRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteBackupFileRequest) SetRegionId(v string) *DeleteBackupFileRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteBackupFileRequest) SetDBInstanceId(v string) *DeleteBackupFileRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteBackupFileRequest) SetBackupId(v string) *DeleteBackupFileRequest {
	s.BackupId = &v
	return s
}

func (s *DeleteBackupFileRequest) SetDBName(v string) *DeleteBackupFileRequest {
	s.DBName = &v
	return s
}

func (s *DeleteBackupFileRequest) SetBackupTime(v string) *DeleteBackupFileRequest {
	s.BackupTime = &v
	return s
}

type DeleteBackupFileResponseBody struct {
	RequestId        *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DeletedBaksetIds *DeleteBackupFileResponseBodyDeletedBaksetIds `json:"DeletedBaksetIds,omitempty" xml:"DeletedBaksetIds,omitempty" type:"Struct"`
}

func (s DeleteBackupFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBackupFileResponseBody) SetRequestId(v string) *DeleteBackupFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteBackupFileResponseBody) SetDeletedBaksetIds(v *DeleteBackupFileResponseBodyDeletedBaksetIds) *DeleteBackupFileResponseBody {
	s.DeletedBaksetIds = v
	return s
}

type DeleteBackupFileResponseBodyDeletedBaksetIds struct {
	DeletedBaksetIds []*int32 `json:"DeletedBaksetIds,omitempty" xml:"DeletedBaksetIds,omitempty" type:"Repeated"`
}

func (s DeleteBackupFileResponseBodyDeletedBaksetIds) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupFileResponseBodyDeletedBaksetIds) GoString() string {
	return s.String()
}

func (s *DeleteBackupFileResponseBodyDeletedBaksetIds) SetDeletedBaksetIds(v []*int32) *DeleteBackupFileResponseBodyDeletedBaksetIds {
	s.DeletedBaksetIds = v
	return s
}

type DeleteBackupFileResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteBackupFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteBackupFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackupFileResponse) SetHeaders(v map[string]*string) *DeleteBackupFileResponse {
	s.Headers = v
	return s
}

func (s *DeleteBackupFileResponse) SetBody(v *DeleteBackupFileResponseBody) *DeleteBackupFileResponse {
	s.Body = v
	return s
}

type DeleteDatabaseRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBName          *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
}

func (s DeleteDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseRequest) SetResourceOwnerId(v int64) *DeleteDatabaseRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDatabaseRequest) SetDBInstanceId(v string) *DeleteDatabaseRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDatabaseRequest) SetDBName(v string) *DeleteDatabaseRequest {
	s.DBName = &v
	return s
}

type DeleteDatabaseResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseResponseBody) SetRequestId(v string) *DeleteDatabaseResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDatabaseResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseResponse) SetHeaders(v map[string]*string) *DeleteDatabaseResponse {
	s.Headers = v
	return s
}

func (s *DeleteDatabaseResponse) SetBody(v *DeleteDatabaseResponseBody) *DeleteDatabaseResponse {
	s.Body = v
	return s
}

type DeleteDBInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ReleasedKeepPolicy   *string `json:"ReleasedKeepPolicy,omitempty" xml:"ReleasedKeepPolicy,omitempty"`
}

func (s DeleteDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceRequest) SetOwnerId(v int64) *DeleteDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetResourceOwnerAccount(v string) *DeleteDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetResourceOwnerId(v int64) *DeleteDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetDBInstanceId(v string) *DeleteDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetOwnerAccount(v string) *DeleteDBInstanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetReleasedKeepPolicy(v string) *DeleteDBInstanceRequest {
	s.ReleasedKeepPolicy = &v
	return s
}

type DeleteDBInstanceResponseBody struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceResponseBody) SetRegionId(v string) *DeleteDBInstanceResponseBody {
	s.RegionId = &v
	return s
}

func (s *DeleteDBInstanceResponseBody) SetRequestId(v string) *DeleteDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDBInstanceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceResponse) SetHeaders(v map[string]*string) *DeleteDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDBInstanceResponse) SetBody(v *DeleteDBInstanceResponseBody) *DeleteDBInstanceResponse {
	s.Body = v
	return s
}

type DeleteDBProxyEndpointAddressRequest struct {
	RegionId                    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId                *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBProxyEndpointId           *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty"`
	DBProxyConnectStringNetType *string `json:"DBProxyConnectStringNetType,omitempty" xml:"DBProxyConnectStringNetType,omitempty"`
}

func (s DeleteDBProxyEndpointAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBProxyEndpointAddressRequest) GoString() string {
	return s.String()
}

func (s *DeleteDBProxyEndpointAddressRequest) SetRegionId(v string) *DeleteDBProxyEndpointAddressRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDBProxyEndpointAddressRequest) SetDBInstanceId(v string) *DeleteDBProxyEndpointAddressRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBProxyEndpointAddressRequest) SetDBProxyEndpointId(v string) *DeleteDBProxyEndpointAddressRequest {
	s.DBProxyEndpointId = &v
	return s
}

func (s *DeleteDBProxyEndpointAddressRequest) SetDBProxyConnectStringNetType(v string) *DeleteDBProxyEndpointAddressRequest {
	s.DBProxyConnectStringNetType = &v
	return s
}

type DeleteDBProxyEndpointAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDBProxyEndpointAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBProxyEndpointAddressResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDBProxyEndpointAddressResponseBody) SetRequestId(v string) *DeleteDBProxyEndpointAddressResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDBProxyEndpointAddressResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDBProxyEndpointAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDBProxyEndpointAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBProxyEndpointAddressResponse) GoString() string {
	return s.String()
}

func (s *DeleteDBProxyEndpointAddressResponse) SetHeaders(v map[string]*string) *DeleteDBProxyEndpointAddressResponse {
	s.Headers = v
	return s
}

func (s *DeleteDBProxyEndpointAddressResponse) SetBody(v *DeleteDBProxyEndpointAddressResponseBody) *DeleteDBProxyEndpointAddressResponse {
	s.Body = v
	return s
}

type DeleteDedicatedHostAccountRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDedicatedHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostAccountRequest) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostAccountRequest) SetOwnerId(v int64) *DeleteDedicatedHostAccountRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDedicatedHostAccountRequest) SetResourceOwnerAccount(v string) *DeleteDedicatedHostAccountRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDedicatedHostAccountRequest) SetResourceOwnerId(v int64) *DeleteDedicatedHostAccountRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDedicatedHostAccountRequest) SetDedicatedHostId(v string) *DeleteDedicatedHostAccountRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *DeleteDedicatedHostAccountRequest) SetAccountName(v string) *DeleteDedicatedHostAccountRequest {
	s.AccountName = &v
	return s
}

func (s *DeleteDedicatedHostAccountRequest) SetRegionId(v string) *DeleteDedicatedHostAccountRequest {
	s.RegionId = &v
	return s
}

type DeleteDedicatedHostAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDedicatedHostAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostAccountResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostAccountResponseBody) SetRequestId(v string) *DeleteDedicatedHostAccountResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDedicatedHostAccountResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDedicatedHostAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDedicatedHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostAccountResponse) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostAccountResponse) SetHeaders(v map[string]*string) *DeleteDedicatedHostAccountResponse {
	s.Headers = v
	return s
}

func (s *DeleteDedicatedHostAccountResponse) SetBody(v *DeleteDedicatedHostAccountResponseBody) *DeleteDedicatedHostAccountResponse {
	s.Body = v
	return s
}

type DeleteDedicatedHostGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDedicatedHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostGroupRequest) SetOwnerId(v int64) *DeleteDedicatedHostGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDedicatedHostGroupRequest) SetResourceOwnerAccount(v string) *DeleteDedicatedHostGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDedicatedHostGroupRequest) SetResourceOwnerId(v int64) *DeleteDedicatedHostGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteDedicatedHostGroupRequest) SetDedicatedHostGroupId(v string) *DeleteDedicatedHostGroupRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DeleteDedicatedHostGroupRequest) SetRegionId(v string) *DeleteDedicatedHostGroupRequest {
	s.RegionId = &v
	return s
}

type DeleteDedicatedHostGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDedicatedHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostGroupResponseBody) SetRequestId(v string) *DeleteDedicatedHostGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDedicatedHostGroupResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDedicatedHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDedicatedHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostGroupResponse) SetHeaders(v map[string]*string) *DeleteDedicatedHostGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteDedicatedHostGroupResponse) SetBody(v *DeleteDedicatedHostGroupResponseBody) *DeleteDedicatedHostGroupResponse {
	s.Body = v
	return s
}

type DeleteParameterGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ParameterGroupId     *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
}

func (s DeleteParameterGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteParameterGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteParameterGroupRequest) SetOwnerId(v int64) *DeleteParameterGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteParameterGroupRequest) SetResourceOwnerAccount(v string) *DeleteParameterGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteParameterGroupRequest) SetResourceOwnerId(v int64) *DeleteParameterGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteParameterGroupRequest) SetRegionId(v string) *DeleteParameterGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteParameterGroupRequest) SetParameterGroupId(v string) *DeleteParameterGroupRequest {
	s.ParameterGroupId = &v
	return s
}

type DeleteParameterGroupResponseBody struct {
	ParameterGroupId *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteParameterGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteParameterGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteParameterGroupResponseBody) SetParameterGroupId(v string) *DeleteParameterGroupResponseBody {
	s.ParameterGroupId = &v
	return s
}

func (s *DeleteParameterGroupResponseBody) SetRequestId(v string) *DeleteParameterGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteParameterGroupResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteParameterGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteParameterGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteParameterGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteParameterGroupResponse) SetHeaders(v map[string]*string) *DeleteParameterGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteParameterGroupResponse) SetBody(v *DeleteParameterGroupResponseBody) *DeleteParameterGroupResponse {
	s.Body = v
	return s
}

type DeleteUserBackupFileRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteUserBackupFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserBackupFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserBackupFileRequest) SetOwnerId(v int64) *DeleteUserBackupFileRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteUserBackupFileRequest) SetResourceOwnerAccount(v string) *DeleteUserBackupFileRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteUserBackupFileRequest) SetResourceOwnerId(v int64) *DeleteUserBackupFileRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteUserBackupFileRequest) SetBackupId(v string) *DeleteUserBackupFileRequest {
	s.BackupId = &v
	return s
}

func (s *DeleteUserBackupFileRequest) SetRegionId(v string) *DeleteUserBackupFileRequest {
	s.RegionId = &v
	return s
}

type DeleteUserBackupFileResponseBody struct {
	BackupId  *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteUserBackupFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserBackupFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserBackupFileResponseBody) SetBackupId(v string) *DeleteUserBackupFileResponseBody {
	s.BackupId = &v
	return s
}

func (s *DeleteUserBackupFileResponseBody) SetRequestId(v string) *DeleteUserBackupFileResponseBody {
	s.RequestId = &v
	return s
}

type DeleteUserBackupFileResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteUserBackupFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteUserBackupFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserBackupFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserBackupFileResponse) SetHeaders(v map[string]*string) *DeleteUserBackupFileResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserBackupFileResponse) SetBody(v *DeleteUserBackupFileResponseBody) *DeleteUserBackupFileResponse {
	s.Body = v
	return s
}

type DescibeImportsFromDatabaseRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ImportId             *int32  `json:"ImportId,omitempty" xml:"ImportId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescibeImportsFromDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DescibeImportsFromDatabaseRequest) GoString() string {
	return s.String()
}

func (s *DescibeImportsFromDatabaseRequest) SetOwnerId(v int64) *DescibeImportsFromDatabaseRequest {
	s.OwnerId = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetResourceOwnerAccount(v string) *DescibeImportsFromDatabaseRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetResourceOwnerId(v int64) *DescibeImportsFromDatabaseRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetClientToken(v string) *DescibeImportsFromDatabaseRequest {
	s.ClientToken = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetDBInstanceId(v string) *DescibeImportsFromDatabaseRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetEngine(v string) *DescibeImportsFromDatabaseRequest {
	s.Engine = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetImportId(v int32) *DescibeImportsFromDatabaseRequest {
	s.ImportId = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetStartTime(v string) *DescibeImportsFromDatabaseRequest {
	s.StartTime = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetEndTime(v string) *DescibeImportsFromDatabaseRequest {
	s.EndTime = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetPageSize(v int32) *DescibeImportsFromDatabaseRequest {
	s.PageSize = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetPageNumber(v int32) *DescibeImportsFromDatabaseRequest {
	s.PageNumber = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetOwnerAccount(v string) *DescibeImportsFromDatabaseRequest {
	s.OwnerAccount = &v
	return s
}

type DescibeImportsFromDatabaseResponseBody struct {
	RequestId        *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                                       `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                       `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescibeImportsFromDatabaseResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescibeImportsFromDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescibeImportsFromDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *DescibeImportsFromDatabaseResponseBody) SetRequestId(v string) *DescibeImportsFromDatabaseResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseBody) SetPageNumber(v int32) *DescibeImportsFromDatabaseResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseBody) SetPageRecordCount(v int32) *DescibeImportsFromDatabaseResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseBody) SetTotalRecordCount(v int32) *DescibeImportsFromDatabaseResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseBody) SetItems(v *DescibeImportsFromDatabaseResponseBodyItems) *DescibeImportsFromDatabaseResponseBody {
	s.Items = v
	return s
}

type DescibeImportsFromDatabaseResponseBodyItems struct {
	ImportResultFromDB []*DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB `json:"ImportResultFromDB,omitempty" xml:"ImportResultFromDB,omitempty" type:"Repeated"`
}

func (s DescibeImportsFromDatabaseResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescibeImportsFromDatabaseResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescibeImportsFromDatabaseResponseBodyItems) SetImportResultFromDB(v []*DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB) *DescibeImportsFromDatabaseResponseBodyItems {
	s.ImportResultFromDB = v
	return s
}

type DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB struct {
	IncrementalImportingTime    *string `json:"IncrementalImportingTime,omitempty" xml:"IncrementalImportingTime,omitempty"`
	ImportId                    *int32  `json:"ImportId,omitempty" xml:"ImportId,omitempty"`
	ImportDataStatus            *string `json:"ImportDataStatus,omitempty" xml:"ImportDataStatus,omitempty"`
	ImportDataType              *string `json:"ImportDataType,omitempty" xml:"ImportDataType,omitempty"`
	ImportDataStatusDescription *string `json:"ImportDataStatusDescription,omitempty" xml:"ImportDataStatusDescription,omitempty"`
}

func (s DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB) String() string {
	return tea.Prettify(s)
}

func (s DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB) GoString() string {
	return s.String()
}

func (s *DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB) SetIncrementalImportingTime(v string) *DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB {
	s.IncrementalImportingTime = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB) SetImportId(v int32) *DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB {
	s.ImportId = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB) SetImportDataStatus(v string) *DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB {
	s.ImportDataStatus = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB) SetImportDataType(v string) *DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB {
	s.ImportDataType = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB) SetImportDataStatusDescription(v string) *DescibeImportsFromDatabaseResponseBodyItemsImportResultFromDB {
	s.ImportDataStatusDescription = &v
	return s
}

type DescibeImportsFromDatabaseResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescibeImportsFromDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescibeImportsFromDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DescibeImportsFromDatabaseResponse) GoString() string {
	return s.String()
}

func (s *DescibeImportsFromDatabaseResponse) SetHeaders(v map[string]*string) *DescibeImportsFromDatabaseResponse {
	s.Headers = v
	return s
}

func (s *DescibeImportsFromDatabaseResponse) SetBody(v *DescibeImportsFromDatabaseResponseBody) *DescibeImportsFromDatabaseResponse {
	s.Body = v
	return s
}

type DescribeAccountsRequest struct {
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeAccountsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountsRequest) SetResourceOwnerAccount(v string) *DescribeAccountsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAccountsRequest) SetResourceOwnerId(v int64) *DescribeAccountsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAccountsRequest) SetDBInstanceId(v string) *DescribeAccountsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeAccountsRequest) SetAccountName(v string) *DescribeAccountsRequest {
	s.AccountName = &v
	return s
}

func (s *DescribeAccountsRequest) SetPageSize(v int32) *DescribeAccountsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAccountsRequest) SetPageNumber(v int32) *DescribeAccountsRequest {
	s.PageNumber = &v
	return s
}

type DescribeAccountsResponseBody struct {
	SystemAdminAccountStatus              *string                               `json:"SystemAdminAccountStatus,omitempty" xml:"SystemAdminAccountStatus,omitempty"`
	SystemAdminAccountFirstActivationTime *string                               `json:"SystemAdminAccountFirstActivationTime,omitempty" xml:"SystemAdminAccountFirstActivationTime,omitempty"`
	PageNumber                            *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RequestId                             *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalRecordCount                      *int32                                `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Accounts                              *DescribeAccountsResponseBodyAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" type:"Struct"`
}

func (s DescribeAccountsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBody) SetSystemAdminAccountStatus(v string) *DescribeAccountsResponseBody {
	s.SystemAdminAccountStatus = &v
	return s
}

func (s *DescribeAccountsResponseBody) SetSystemAdminAccountFirstActivationTime(v string) *DescribeAccountsResponseBody {
	s.SystemAdminAccountFirstActivationTime = &v
	return s
}

func (s *DescribeAccountsResponseBody) SetPageNumber(v int32) *DescribeAccountsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAccountsResponseBody) SetRequestId(v string) *DescribeAccountsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAccountsResponseBody) SetTotalRecordCount(v int32) *DescribeAccountsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeAccountsResponseBody) SetAccounts(v *DescribeAccountsResponseBodyAccounts) *DescribeAccountsResponseBody {
	s.Accounts = v
	return s
}

type DescribeAccountsResponseBodyAccounts struct {
	DBInstanceAccount []*DescribeAccountsResponseBodyAccountsDBInstanceAccount `json:"DBInstanceAccount,omitempty" xml:"DBInstanceAccount,omitempty" type:"Repeated"`
}

func (s DescribeAccountsResponseBodyAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseBodyAccounts) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBodyAccounts) SetDBInstanceAccount(v []*DescribeAccountsResponseBodyAccountsDBInstanceAccount) *DescribeAccountsResponseBodyAccounts {
	s.DBInstanceAccount = v
	return s
}

type DescribeAccountsResponseBodyAccountsDBInstanceAccount struct {
	AccountStatus      *string                                                                  `json:"AccountStatus,omitempty" xml:"AccountStatus,omitempty"`
	AccountDescription *string                                                                  `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	DBInstanceId       *string                                                                  `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	PrivExceeded       *string                                                                  `json:"PrivExceeded,omitempty" xml:"PrivExceeded,omitempty"`
	AccountType        *string                                                                  `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	AccountName        *string                                                                  `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	DatabasePrivileges *DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivileges `json:"DatabasePrivileges,omitempty" xml:"DatabasePrivileges,omitempty" type:"Struct"`
}

func (s DescribeAccountsResponseBodyAccountsDBInstanceAccount) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseBodyAccountsDBInstanceAccount) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountStatus(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountStatus = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountDescription(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountDescription = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetDBInstanceId(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetPrivExceeded(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.PrivExceeded = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountType(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountType = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetAccountName(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.AccountName = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccount) SetDatabasePrivileges(v *DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivileges) *DescribeAccountsResponseBodyAccountsDBInstanceAccount {
	s.DatabasePrivileges = v
	return s
}

type DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivileges struct {
	DatabasePrivilege []*DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege `json:"DatabasePrivilege,omitempty" xml:"DatabasePrivilege,omitempty" type:"Repeated"`
}

func (s DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivileges) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivileges) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivileges) SetDatabasePrivilege(v []*DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) *DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivileges {
	s.DatabasePrivilege = v
	return s
}

type DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege struct {
	DBName                 *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	AccountPrivilege       *string `json:"AccountPrivilege,omitempty" xml:"AccountPrivilege,omitempty"`
	AccountPrivilegeDetail *string `json:"AccountPrivilegeDetail,omitempty" xml:"AccountPrivilegeDetail,omitempty"`
}

func (s DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) SetDBName(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege {
	s.DBName = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) SetAccountPrivilege(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege {
	s.AccountPrivilege = &v
	return s
}

func (s *DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) SetAccountPrivilegeDetail(v string) *DescribeAccountsResponseBodyAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege {
	s.AccountPrivilegeDetail = &v
	return s
}

type DescribeAccountsResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAccountsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAccountsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponse) SetHeaders(v map[string]*string) *DescribeAccountsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAccountsResponse) SetBody(v *DescribeAccountsResponseBody) *DescribeAccountsResponse {
	s.Body = v
	return s
}

type DescribeActionEventPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeActionEventPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeActionEventPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeActionEventPolicyRequest) SetOwnerId(v int64) *DescribeActionEventPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeActionEventPolicyRequest) SetResourceOwnerAccount(v string) *DescribeActionEventPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeActionEventPolicyRequest) SetResourceOwnerId(v int64) *DescribeActionEventPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeActionEventPolicyRequest) SetRegionId(v string) *DescribeActionEventPolicyRequest {
	s.RegionId = &v
	return s
}

type DescribeActionEventPolicyResponseBody struct {
	EnableEventLog *string `json:"EnableEventLog,omitempty" xml:"EnableEventLog,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeActionEventPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeActionEventPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeActionEventPolicyResponseBody) SetEnableEventLog(v string) *DescribeActionEventPolicyResponseBody {
	s.EnableEventLog = &v
	return s
}

func (s *DescribeActionEventPolicyResponseBody) SetRequestId(v string) *DescribeActionEventPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeActionEventPolicyResponseBody) SetRegionId(v string) *DescribeActionEventPolicyResponseBody {
	s.RegionId = &v
	return s
}

type DescribeActionEventPolicyResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeActionEventPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeActionEventPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeActionEventPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeActionEventPolicyResponse) SetHeaders(v map[string]*string) *DescribeActionEventPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeActionEventPolicyResponse) SetBody(v *DescribeActionEventPolicyResponseBody) *DescribeActionEventPolicyResponse {
	s.Body = v
	return s
}

type DescribeAvailableClassesRequest struct {
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceChargeType    *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Engine                *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OrderType             *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	Category              *string `json:"Category,omitempty" xml:"Category,omitempty"`
	CommodityCode         *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
}

func (s DescribeAvailableClassesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableClassesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableClassesRequest) SetResourceOwnerId(v int64) *DescribeAvailableClassesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetRegionId(v string) *DescribeAvailableClassesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetZoneId(v string) *DescribeAvailableClassesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetInstanceChargeType(v string) *DescribeAvailableClassesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetEngine(v string) *DescribeAvailableClassesRequest {
	s.Engine = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetEngineVersion(v string) *DescribeAvailableClassesRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetDBInstanceId(v string) *DescribeAvailableClassesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetOrderType(v string) *DescribeAvailableClassesRequest {
	s.OrderType = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetDBInstanceStorageType(v string) *DescribeAvailableClassesRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetCategory(v string) *DescribeAvailableClassesRequest {
	s.Category = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetCommodityCode(v string) *DescribeAvailableClassesRequest {
	s.CommodityCode = &v
	return s
}

type DescribeAvailableClassesResponseBody struct {
	RequestId         *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DBInstanceClasses []*DescribeAvailableClassesResponseBodyDBInstanceClasses `json:"DBInstanceClasses,omitempty" xml:"DBInstanceClasses,omitempty" type:"Repeated"`
}

func (s DescribeAvailableClassesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableClassesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableClassesResponseBody) SetRequestId(v string) *DescribeAvailableClassesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableClassesResponseBody) SetDBInstanceClasses(v []*DescribeAvailableClassesResponseBodyDBInstanceClasses) *DescribeAvailableClassesResponseBody {
	s.DBInstanceClasses = v
	return s
}

type DescribeAvailableClassesResponseBodyDBInstanceClasses struct {
	DBInstanceClass        *string                                                                      `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorageRange *DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange `json:"DBInstanceStorageRange,omitempty" xml:"DBInstanceStorageRange,omitempty" type:"Struct"`
}

func (s DescribeAvailableClassesResponseBodyDBInstanceClasses) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableClassesResponseBodyDBInstanceClasses) GoString() string {
	return s.String()
}

func (s *DescribeAvailableClassesResponseBodyDBInstanceClasses) SetDBInstanceClass(v string) *DescribeAvailableClassesResponseBodyDBInstanceClasses {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeAvailableClassesResponseBodyDBInstanceClasses) SetDBInstanceStorageRange(v *DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange) *DescribeAvailableClassesResponseBodyDBInstanceClasses {
	s.DBInstanceStorageRange = v
	return s
}

type DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange struct {
	Step     *int32 `json:"Step,omitempty" xml:"Step,omitempty"`
	MinValue *int32 `json:"MinValue,omitempty" xml:"MinValue,omitempty"`
	MaxValue *int32 `json:"MaxValue,omitempty" xml:"MaxValue,omitempty"`
}

func (s DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange) GoString() string {
	return s.String()
}

func (s *DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange) SetStep(v int32) *DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange {
	s.Step = &v
	return s
}

func (s *DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange) SetMinValue(v int32) *DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange {
	s.MinValue = &v
	return s
}

func (s *DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange) SetMaxValue(v int32) *DescribeAvailableClassesResponseBodyDBInstanceClassesDBInstanceStorageRange {
	s.MaxValue = &v
	return s
}

type DescribeAvailableClassesResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAvailableClassesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAvailableClassesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableClassesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableClassesResponse) SetHeaders(v map[string]*string) *DescribeAvailableClassesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableClassesResponse) SetBody(v *DescribeAvailableClassesResponseBody) *DescribeAvailableClassesResponse {
	s.Body = v
	return s
}

type DescribeAvailableCrossRegionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeAvailableCrossRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCrossRegionRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCrossRegionRequest) SetOwnerId(v int64) *DescribeAvailableCrossRegionRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAvailableCrossRegionRequest) SetResourceOwnerAccount(v string) *DescribeAvailableCrossRegionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAvailableCrossRegionRequest) SetResourceOwnerId(v int64) *DescribeAvailableCrossRegionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAvailableCrossRegionRequest) SetRegionId(v string) *DescribeAvailableCrossRegionRequest {
	s.RegionId = &v
	return s
}

type DescribeAvailableCrossRegionResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Regions   *DescribeAvailableCrossRegionResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Struct"`
}

func (s DescribeAvailableCrossRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCrossRegionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCrossRegionResponseBody) SetRequestId(v string) *DescribeAvailableCrossRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableCrossRegionResponseBody) SetRegions(v *DescribeAvailableCrossRegionResponseBodyRegions) *DescribeAvailableCrossRegionResponseBody {
	s.Regions = v
	return s
}

type DescribeAvailableCrossRegionResponseBodyRegions struct {
	Region []*string `json:"Region,omitempty" xml:"Region,omitempty" type:"Repeated"`
}

func (s DescribeAvailableCrossRegionResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCrossRegionResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCrossRegionResponseBodyRegions) SetRegion(v []*string) *DescribeAvailableCrossRegionResponseBodyRegions {
	s.Region = v
	return s
}

type DescribeAvailableCrossRegionResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAvailableCrossRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAvailableCrossRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCrossRegionResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCrossRegionResponse) SetHeaders(v map[string]*string) *DescribeAvailableCrossRegionResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableCrossRegionResponse) SetBody(v *DescribeAvailableCrossRegionResponseBody) *DescribeAvailableCrossRegionResponse {
	s.Body = v
	return s
}

type DescribeAvailableDedicatedHostClassesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	StorageType          *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s DescribeAvailableDedicatedHostClassesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostClassesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostClassesRequest) SetOwnerId(v int64) *DescribeAvailableDedicatedHostClassesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesRequest) SetResourceOwnerAccount(v string) *DescribeAvailableDedicatedHostClassesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesRequest) SetResourceOwnerId(v int64) *DescribeAvailableDedicatedHostClassesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesRequest) SetRegionId(v string) *DescribeAvailableDedicatedHostClassesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesRequest) SetZoneId(v string) *DescribeAvailableDedicatedHostClassesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesRequest) SetStorageType(v string) *DescribeAvailableDedicatedHostClassesRequest {
	s.StorageType = &v
	return s
}

type DescribeAvailableDedicatedHostClassesResponseBody struct {
	RequestId   *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HostClasses *DescribeAvailableDedicatedHostClassesResponseBodyHostClasses `json:"HostClasses,omitempty" xml:"HostClasses,omitempty" type:"Struct"`
}

func (s DescribeAvailableDedicatedHostClassesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostClassesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostClassesResponseBody) SetRequestId(v string) *DescribeAvailableDedicatedHostClassesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesResponseBody) SetHostClasses(v *DescribeAvailableDedicatedHostClassesResponseBodyHostClasses) *DescribeAvailableDedicatedHostClassesResponseBody {
	s.HostClasses = v
	return s
}

type DescribeAvailableDedicatedHostClassesResponseBodyHostClasses struct {
	HostClasses []*DescribeAvailableDedicatedHostClassesResponseBodyHostClassesHostClasses `json:"HostClasses,omitempty" xml:"HostClasses,omitempty" type:"Repeated"`
}

func (s DescribeAvailableDedicatedHostClassesResponseBodyHostClasses) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostClassesResponseBodyHostClasses) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostClassesResponseBodyHostClasses) SetHostClasses(v []*DescribeAvailableDedicatedHostClassesResponseBodyHostClassesHostClasses) *DescribeAvailableDedicatedHostClassesResponseBodyHostClasses {
	s.HostClasses = v
	return s
}

type DescribeAvailableDedicatedHostClassesResponseBodyHostClassesHostClasses struct {
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HostClassName *string `json:"HostClassName,omitempty" xml:"HostClassName,omitempty"`
}

func (s DescribeAvailableDedicatedHostClassesResponseBodyHostClassesHostClasses) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostClassesResponseBodyHostClassesHostClasses) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostClassesResponseBodyHostClassesHostClasses) SetDescription(v string) *DescribeAvailableDedicatedHostClassesResponseBodyHostClassesHostClasses {
	s.Description = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesResponseBodyHostClassesHostClasses) SetHostClassName(v string) *DescribeAvailableDedicatedHostClassesResponseBodyHostClassesHostClasses {
	s.HostClassName = &v
	return s
}

type DescribeAvailableDedicatedHostClassesResponse struct {
	Headers map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAvailableDedicatedHostClassesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAvailableDedicatedHostClassesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostClassesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostClassesResponse) SetHeaders(v map[string]*string) *DescribeAvailableDedicatedHostClassesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesResponse) SetBody(v *DescribeAvailableDedicatedHostClassesResponseBody) *DescribeAvailableDedicatedHostClassesResponse {
	s.Body = v
	return s
}

type DescribeAvailableDedicatedHostZonesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeAvailableDedicatedHostZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostZonesRequest) SetOwnerId(v int64) *DescribeAvailableDedicatedHostZonesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostZonesRequest) SetResourceOwnerAccount(v string) *DescribeAvailableDedicatedHostZonesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAvailableDedicatedHostZonesRequest) SetResourceOwnerId(v int64) *DescribeAvailableDedicatedHostZonesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostZonesRequest) SetRegionId(v string) *DescribeAvailableDedicatedHostZonesRequest {
	s.RegionId = &v
	return s
}

type DescribeAvailableDedicatedHostZonesResponseBody struct {
	RequestId *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Zones     *DescribeAvailableDedicatedHostZonesResponseBodyZones `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Struct"`
}

func (s DescribeAvailableDedicatedHostZonesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostZonesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostZonesResponseBody) SetRequestId(v string) *DescribeAvailableDedicatedHostZonesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostZonesResponseBody) SetZones(v *DescribeAvailableDedicatedHostZonesResponseBodyZones) *DescribeAvailableDedicatedHostZonesResponseBody {
	s.Zones = v
	return s
}

type DescribeAvailableDedicatedHostZonesResponseBodyZones struct {
	DedicatedHostZones []*DescribeAvailableDedicatedHostZonesResponseBodyZonesDedicatedHostZones `json:"DedicatedHostZones,omitempty" xml:"DedicatedHostZones,omitempty" type:"Repeated"`
}

func (s DescribeAvailableDedicatedHostZonesResponseBodyZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostZonesResponseBodyZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostZonesResponseBodyZones) SetDedicatedHostZones(v []*DescribeAvailableDedicatedHostZonesResponseBodyZonesDedicatedHostZones) *DescribeAvailableDedicatedHostZonesResponseBodyZones {
	s.DedicatedHostZones = v
	return s
}

type DescribeAvailableDedicatedHostZonesResponseBodyZonesDedicatedHostZones struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ZoneId      *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeAvailableDedicatedHostZonesResponseBodyZonesDedicatedHostZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostZonesResponseBodyZonesDedicatedHostZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostZonesResponseBodyZonesDedicatedHostZones) SetDescription(v string) *DescribeAvailableDedicatedHostZonesResponseBodyZonesDedicatedHostZones {
	s.Description = &v
	return s
}

func (s *DescribeAvailableDedicatedHostZonesResponseBodyZonesDedicatedHostZones) SetZoneId(v string) *DescribeAvailableDedicatedHostZonesResponseBodyZonesDedicatedHostZones {
	s.ZoneId = &v
	return s
}

type DescribeAvailableDedicatedHostZonesResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAvailableDedicatedHostZonesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAvailableDedicatedHostZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostZonesResponse) SetHeaders(v map[string]*string) *DescribeAvailableDedicatedHostZonesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableDedicatedHostZonesResponse) SetBody(v *DescribeAvailableDedicatedHostZonesResponseBody) *DescribeAvailableDedicatedHostZonesResponse {
	s.Body = v
	return s
}

type DescribeAvailableRecoveryTimeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	CrossBackupId        *int32  `json:"CrossBackupId,omitempty" xml:"CrossBackupId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeAvailableRecoveryTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableRecoveryTimeRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableRecoveryTimeRequest) SetOwnerId(v int64) *DescribeAvailableRecoveryTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeRequest) SetResourceOwnerAccount(v string) *DescribeAvailableRecoveryTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeRequest) SetResourceOwnerId(v int64) *DescribeAvailableRecoveryTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeRequest) SetCrossBackupId(v int32) *DescribeAvailableRecoveryTimeRequest {
	s.CrossBackupId = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeRequest) SetRegionId(v string) *DescribeAvailableRecoveryTimeRequest {
	s.RegionId = &v
	return s
}

type DescribeAvailableRecoveryTimeResponseBody struct {
	RecoveryEndTime   *string `json:"RecoveryEndTime,omitempty" xml:"RecoveryEndTime,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CrossBackupId     *int32  `json:"CrossBackupId,omitempty" xml:"CrossBackupId,omitempty"`
	RecoveryBeginTime *string `json:"RecoveryBeginTime,omitempty" xml:"RecoveryBeginTime,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeAvailableRecoveryTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableRecoveryTimeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableRecoveryTimeResponseBody) SetRecoveryEndTime(v string) *DescribeAvailableRecoveryTimeResponseBody {
	s.RecoveryEndTime = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeResponseBody) SetRequestId(v string) *DescribeAvailableRecoveryTimeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeResponseBody) SetCrossBackupId(v int32) *DescribeAvailableRecoveryTimeResponseBody {
	s.CrossBackupId = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeResponseBody) SetRecoveryBeginTime(v string) *DescribeAvailableRecoveryTimeResponseBody {
	s.RecoveryBeginTime = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeResponseBody) SetRegionId(v string) *DescribeAvailableRecoveryTimeResponseBody {
	s.RegionId = &v
	return s
}

type DescribeAvailableRecoveryTimeResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAvailableRecoveryTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAvailableRecoveryTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableRecoveryTimeResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableRecoveryTimeResponse) SetHeaders(v map[string]*string) *DescribeAvailableRecoveryTimeResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableRecoveryTimeResponse) SetBody(v *DescribeAvailableRecoveryTimeResponseBody) *DescribeAvailableRecoveryTimeResponse {
	s.Body = v
	return s
}

type DescribeAvailableResourceRequest struct {
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceChargeType    *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Engine                *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	OrderType             *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	Category              *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DispenseMode          *int32  `json:"DispenseMode,omitempty" xml:"DispenseMode,omitempty"`
}

func (s DescribeAvailableResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceRequest) SetResourceOwnerId(v int64) *DescribeAvailableResourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetRegionId(v string) *DescribeAvailableResourceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetZoneId(v string) *DescribeAvailableResourceRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetInstanceChargeType(v string) *DescribeAvailableResourceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetEngine(v string) *DescribeAvailableResourceRequest {
	s.Engine = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetEngineVersion(v string) *DescribeAvailableResourceRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDBInstanceClass(v string) *DescribeAvailableResourceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetOrderType(v string) *DescribeAvailableResourceRequest {
	s.OrderType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDBInstanceStorageType(v string) *DescribeAvailableResourceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetCategory(v string) *DescribeAvailableResourceRequest {
	s.Category = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDispenseMode(v int32) *DescribeAvailableResourceRequest {
	s.DispenseMode = &v
	return s
}

type DescribeAvailableResourceResponseBody struct {
	RequestId      *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AvailableZones *DescribeAvailableResourceResponseBodyAvailableZones `json:"AvailableZones,omitempty" xml:"AvailableZones,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBody) SetRequestId(v string) *DescribeAvailableResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBody) SetAvailableZones(v *DescribeAvailableResourceResponseBodyAvailableZones) *DescribeAvailableResourceResponseBody {
	s.AvailableZones = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZones struct {
	AvailableZone []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone `json:"AvailableZone,omitempty" xml:"AvailableZone,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZones) SetAvailableZone(v []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone) *DescribeAvailableResourceResponseBodyAvailableZones {
	s.AvailableZone = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone struct {
	ZoneId           *string                                                                           `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	Status           *string                                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	RegionId         *string                                                                           `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SupportedEngines *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEngines `json:"SupportedEngines,omitempty" xml:"SupportedEngines,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone) SetZoneId(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone) SetStatus(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone {
	s.Status = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone) SetRegionId(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone) SetSupportedEngines(v *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEngines) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZone {
	s.SupportedEngines = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEngines struct {
	SupportedEngine []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine `json:"SupportedEngine,omitempty" xml:"SupportedEngine,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEngines) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEngines) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEngines) SetSupportedEngine(v []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEngines {
	s.SupportedEngine = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine struct {
	Engine                  *string                                                                                                                 `json:"Engine,omitempty" xml:"Engine,omitempty"`
	SupportedEngineVersions *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions `json:"SupportedEngineVersions,omitempty" xml:"SupportedEngineVersions,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine) SetEngine(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine {
	s.Engine = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine) SetSupportedEngineVersions(v *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngine {
	s.SupportedEngineVersions = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions struct {
	SupportedEngineVersion []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion `json:"SupportedEngineVersion,omitempty" xml:"SupportedEngineVersion,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions) SetSupportedEngineVersion(v []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions {
	s.SupportedEngineVersion = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion struct {
	Version            *string                                                                                                                                                         `json:"Version,omitempty" xml:"Version,omitempty"`
	SupportedCategorys *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys `json:"SupportedCategorys,omitempty" xml:"SupportedCategorys,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion) SetVersion(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion {
	s.Version = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion) SetSupportedCategorys(v *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion {
	s.SupportedCategorys = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys struct {
	SupportedCategory []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory `json:"SupportedCategory,omitempty" xml:"SupportedCategory,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys) SetSupportedCategory(v []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys {
	s.SupportedCategory = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory struct {
	Category              *string                                                                                                                                                                                               `json:"Category,omitempty" xml:"Category,omitempty"`
	SupportedStorageTypes *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes `json:"SupportedStorageTypes,omitempty" xml:"SupportedStorageTypes,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory) SetCategory(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory {
	s.Category = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory) SetSupportedStorageTypes(v *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory {
	s.SupportedStorageTypes = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes struct {
	SupportedStorageType []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType `json:"SupportedStorageType,omitempty" xml:"SupportedStorageType,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes) SetSupportedStorageType(v []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes {
	s.SupportedStorageType = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType struct {
	StorageType        *string                                                                                                                                                                                                                                     `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	AvailableResources *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources `json:"AvailableResources,omitempty" xml:"AvailableResources,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType) SetStorageType(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType {
	s.StorageType = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType) SetAvailableResources(v *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType {
	s.AvailableResources = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources struct {
	AvailableResource []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource `json:"AvailableResource,omitempty" xml:"AvailableResource,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources) SetAvailableResource(v []*DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources {
	s.AvailableResource = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource struct {
	StorageRange           *string                                                                                                                                                                                                                                                                            `json:"StorageRange,omitempty" xml:"StorageRange,omitempty"`
	DBInstanceClass        *string                                                                                                                                                                                                                                                                            `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorageRange *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange `json:"DBInstanceStorageRange,omitempty" xml:"DBInstanceStorageRange,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) SetStorageRange(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource {
	s.StorageRange = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) SetDBInstanceClass(v string) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) SetDBInstanceStorageRange(v *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource {
	s.DBInstanceStorageRange = v
	return s
}

type DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange struct {
	Step *int32 `json:"Step,omitempty" xml:"Step,omitempty"`
	Max  *int32 `json:"Max,omitempty" xml:"Max,omitempty"`
	Min  *int32 `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) SetStep(v int32) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange {
	s.Step = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) SetMax(v int32) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange {
	s.Max = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) SetMin(v int32) *DescribeAvailableResourceResponseBodyAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange {
	s.Min = &v
	return s
}

type DescribeAvailableResourceResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAvailableResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAvailableResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponse) SetHeaders(v map[string]*string) *DescribeAvailableResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableResourceResponse) SetBody(v *DescribeAvailableResourceResponseBody) *DescribeAvailableResourceResponse {
	s.Body = v
	return s
}

type DescribeAvailableZonesRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Engine          *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ZoneId          *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	EngineVersion   *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	CommodityCode   *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	DispenseMode    *string `json:"DispenseMode,omitempty" xml:"DispenseMode,omitempty"`
	DBInstanceName  *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	Category        *string `json:"Category,omitempty" xml:"Category,omitempty"`
}

func (s DescribeAvailableZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesRequest) SetResourceOwnerId(v int64) *DescribeAvailableZonesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetRegionId(v string) *DescribeAvailableZonesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetEngine(v string) *DescribeAvailableZonesRequest {
	s.Engine = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetZoneId(v string) *DescribeAvailableZonesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetEngineVersion(v string) *DescribeAvailableZonesRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetCommodityCode(v string) *DescribeAvailableZonesRequest {
	s.CommodityCode = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetDispenseMode(v string) *DescribeAvailableZonesRequest {
	s.DispenseMode = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetDBInstanceName(v string) *DescribeAvailableZonesRequest {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetCategory(v string) *DescribeAvailableZonesRequest {
	s.Category = &v
	return s
}

type DescribeAvailableZonesResponseBody struct {
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AvailableZones []*DescribeAvailableZonesResponseBodyAvailableZones `json:"AvailableZones,omitempty" xml:"AvailableZones,omitempty" type:"Repeated"`
}

func (s DescribeAvailableZonesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseBody) SetRequestId(v string) *DescribeAvailableZonesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableZonesResponseBody) SetAvailableZones(v []*DescribeAvailableZonesResponseBodyAvailableZones) *DescribeAvailableZonesResponseBody {
	s.AvailableZones = v
	return s
}

type DescribeAvailableZonesResponseBodyAvailableZones struct {
	ZoneId           *string                                                             `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	RegionId         *string                                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SupportedEngines []*DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines `json:"SupportedEngines,omitempty" xml:"SupportedEngines,omitempty" type:"Repeated"`
}

func (s DescribeAvailableZonesResponseBodyAvailableZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseBodyAvailableZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseBodyAvailableZones) SetZoneId(v string) *DescribeAvailableZonesResponseBodyAvailableZones {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableZonesResponseBodyAvailableZones) SetRegionId(v string) *DescribeAvailableZonesResponseBodyAvailableZones {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableZonesResponseBodyAvailableZones) SetSupportedEngines(v []*DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines) *DescribeAvailableZonesResponseBodyAvailableZones {
	s.SupportedEngines = v
	return s
}

type DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines struct {
	Engine                  *string                                                                                    `json:"Engine,omitempty" xml:"Engine,omitempty"`
	SupportedEngineVersions []*DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions `json:"SupportedEngineVersions,omitempty" xml:"SupportedEngineVersions,omitempty" type:"Repeated"`
}

func (s DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines) SetEngine(v string) *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines {
	s.Engine = &v
	return s
}

func (s *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines) SetSupportedEngineVersions(v []*DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions) *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEngines {
	s.SupportedEngineVersions = v
	return s
}

type DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions struct {
	Version            *string                                                                                                      `json:"Version,omitempty" xml:"Version,omitempty"`
	SupportedCategorys []*DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys `json:"SupportedCategorys,omitempty" xml:"SupportedCategorys,omitempty" type:"Repeated"`
}

func (s DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions) SetVersion(v string) *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions {
	s.Version = &v
	return s
}

func (s *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions) SetSupportedCategorys(v []*DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys) *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersions {
	s.SupportedCategorys = v
	return s
}

type DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys struct {
	Category              *string                                                                                                                           `json:"Category,omitempty" xml:"Category,omitempty"`
	SupportedStorageTypes []*DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes `json:"SupportedStorageTypes,omitempty" xml:"SupportedStorageTypes,omitempty" type:"Repeated"`
}

func (s DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys) SetCategory(v string) *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys {
	s.Category = &v
	return s
}

func (s *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys) SetSupportedStorageTypes(v []*DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes) *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys {
	s.SupportedStorageTypes = v
	return s
}

type DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes struct {
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes) SetStorageType(v string) *DescribeAvailableZonesResponseBodyAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes {
	s.StorageType = &v
	return s
}

type DescribeAvailableZonesResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAvailableZonesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAvailableZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponse) SetHeaders(v map[string]*string) *DescribeAvailableZonesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableZonesResponse) SetBody(v *DescribeAvailableZonesResponseBody) *DescribeAvailableZonesResponse {
	s.Body = v
	return s
}

type DescribeBackupDatabaseRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
}

func (s DescribeBackupDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupDatabaseRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupDatabaseRequest) SetOwnerId(v int64) *DescribeBackupDatabaseRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBackupDatabaseRequest) SetResourceOwnerAccount(v string) *DescribeBackupDatabaseRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeBackupDatabaseRequest) SetResourceOwnerId(v int64) *DescribeBackupDatabaseRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBackupDatabaseRequest) SetDBInstanceId(v string) *DescribeBackupDatabaseRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupDatabaseRequest) SetBackupId(v string) *DescribeBackupDatabaseRequest {
	s.BackupId = &v
	return s
}

type DescribeBackupDatabaseResponseBody struct {
	DatabaseNames *string `json:"DatabaseNames,omitempty" xml:"DatabaseNames,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBackupDatabaseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupDatabaseResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupDatabaseResponseBody) SetDatabaseNames(v string) *DescribeBackupDatabaseResponseBody {
	s.DatabaseNames = &v
	return s
}

func (s *DescribeBackupDatabaseResponseBody) SetRequestId(v string) *DescribeBackupDatabaseResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBackupDatabaseResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeBackupDatabaseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackupDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupDatabaseResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupDatabaseResponse) SetHeaders(v map[string]*string) *DescribeBackupDatabaseResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupDatabaseResponse) SetBody(v *DescribeBackupDatabaseResponseBody) *DescribeBackupDatabaseResponse {
	s.Body = v
	return s
}

type DescribeBackupPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupPolicyMode     *string `json:"BackupPolicyMode,omitempty" xml:"BackupPolicyMode,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	CompressType         *string `json:"CompressType,omitempty" xml:"CompressType,omitempty"`
	ReleasedKeepPolicy   *string `json:"ReleasedKeepPolicy,omitempty" xml:"ReleasedKeepPolicy,omitempty"`
}

func (s DescribeBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyRequest) SetOwnerId(v int64) *DescribeBackupPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBackupPolicyRequest) SetResourceOwnerAccount(v string) *DescribeBackupPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeBackupPolicyRequest) SetResourceOwnerId(v int64) *DescribeBackupPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBackupPolicyRequest) SetDBInstanceId(v string) *DescribeBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupPolicyRequest) SetBackupPolicyMode(v string) *DescribeBackupPolicyRequest {
	s.BackupPolicyMode = &v
	return s
}

func (s *DescribeBackupPolicyRequest) SetOwnerAccount(v string) *DescribeBackupPolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeBackupPolicyRequest) SetCompressType(v string) *DescribeBackupPolicyRequest {
	s.CompressType = &v
	return s
}

func (s *DescribeBackupPolicyRequest) SetReleasedKeepPolicy(v string) *DescribeBackupPolicyRequest {
	s.ReleasedKeepPolicy = &v
	return s
}

type DescribeBackupPolicyResponseBody struct {
	LogBackupRetentionPeriod      *int32  `json:"LogBackupRetentionPeriod,omitempty" xml:"LogBackupRetentionPeriod,omitempty"`
	ArchiveBackupKeepPolicy       *string `json:"ArchiveBackupKeepPolicy,omitempty" xml:"ArchiveBackupKeepPolicy,omitempty"`
	ArchiveBackupKeepCount        *string `json:"ArchiveBackupKeepCount,omitempty" xml:"ArchiveBackupKeepCount,omitempty"`
	LocalLogRetentionHours        *int32  `json:"LocalLogRetentionHours,omitempty" xml:"LocalLogRetentionHours,omitempty"`
	BackupRetentionPeriod         *int32  `json:"BackupRetentionPeriod,omitempty" xml:"BackupRetentionPeriod,omitempty"`
	RequestId                     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PreferredBackupPeriod         *string `json:"PreferredBackupPeriod,omitempty" xml:"PreferredBackupPeriod,omitempty"`
	CompressType                  *string `json:"CompressType,omitempty" xml:"CompressType,omitempty"`
	SupportReleasedKeep           *int32  `json:"SupportReleasedKeep,omitempty" xml:"SupportReleasedKeep,omitempty"`
	LocalLogRetentionSpace        *string `json:"LocalLogRetentionSpace,omitempty" xml:"LocalLogRetentionSpace,omitempty"`
	SupportVolumeShadowCopy       *int32  `json:"SupportVolumeShadowCopy,omitempty" xml:"SupportVolumeShadowCopy,omitempty"`
	BackupMethod                  *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty"`
	LogBackupFrequency            *string `json:"LogBackupFrequency,omitempty" xml:"LogBackupFrequency,omitempty"`
	PreferredNextBackupTime       *string `json:"PreferredNextBackupTime,omitempty" xml:"PreferredNextBackupTime,omitempty"`
	HighSpaceUsageProtection      *string `json:"HighSpaceUsageProtection,omitempty" xml:"HighSpaceUsageProtection,omitempty"`
	ArchiveBackupRetentionPeriod  *string `json:"ArchiveBackupRetentionPeriod,omitempty" xml:"ArchiveBackupRetentionPeriod,omitempty"`
	BackupInterval                *string `json:"BackupInterval,omitempty" xml:"BackupInterval,omitempty"`
	ReleasedKeepPolicy            *string `json:"ReleasedKeepPolicy,omitempty" xml:"ReleasedKeepPolicy,omitempty"`
	PreferredBackupTime           *string `json:"PreferredBackupTime,omitempty" xml:"PreferredBackupTime,omitempty"`
	LogBackupLocalRetentionNumber *int32  `json:"LogBackupLocalRetentionNumber,omitempty" xml:"LogBackupLocalRetentionNumber,omitempty"`
	Category                      *string `json:"Category,omitempty" xml:"Category,omitempty"`
	EnableBackupLog               *string `json:"EnableBackupLog,omitempty" xml:"EnableBackupLog,omitempty"`
	BackupLog                     *string `json:"BackupLog,omitempty" xml:"BackupLog,omitempty"`
}

func (s DescribeBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponseBody) SetLogBackupRetentionPeriod(v int32) *DescribeBackupPolicyResponseBody {
	s.LogBackupRetentionPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetArchiveBackupKeepPolicy(v string) *DescribeBackupPolicyResponseBody {
	s.ArchiveBackupKeepPolicy = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetArchiveBackupKeepCount(v string) *DescribeBackupPolicyResponseBody {
	s.ArchiveBackupKeepCount = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetLocalLogRetentionHours(v int32) *DescribeBackupPolicyResponseBody {
	s.LocalLogRetentionHours = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetBackupRetentionPeriod(v int32) *DescribeBackupPolicyResponseBody {
	s.BackupRetentionPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetRequestId(v string) *DescribeBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetPreferredBackupPeriod(v string) *DescribeBackupPolicyResponseBody {
	s.PreferredBackupPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetCompressType(v string) *DescribeBackupPolicyResponseBody {
	s.CompressType = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetSupportReleasedKeep(v int32) *DescribeBackupPolicyResponseBody {
	s.SupportReleasedKeep = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetLocalLogRetentionSpace(v string) *DescribeBackupPolicyResponseBody {
	s.LocalLogRetentionSpace = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetSupportVolumeShadowCopy(v int32) *DescribeBackupPolicyResponseBody {
	s.SupportVolumeShadowCopy = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetBackupMethod(v string) *DescribeBackupPolicyResponseBody {
	s.BackupMethod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetLogBackupFrequency(v string) *DescribeBackupPolicyResponseBody {
	s.LogBackupFrequency = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetPreferredNextBackupTime(v string) *DescribeBackupPolicyResponseBody {
	s.PreferredNextBackupTime = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetHighSpaceUsageProtection(v string) *DescribeBackupPolicyResponseBody {
	s.HighSpaceUsageProtection = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetArchiveBackupRetentionPeriod(v string) *DescribeBackupPolicyResponseBody {
	s.ArchiveBackupRetentionPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetBackupInterval(v string) *DescribeBackupPolicyResponseBody {
	s.BackupInterval = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetReleasedKeepPolicy(v string) *DescribeBackupPolicyResponseBody {
	s.ReleasedKeepPolicy = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetPreferredBackupTime(v string) *DescribeBackupPolicyResponseBody {
	s.PreferredBackupTime = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetLogBackupLocalRetentionNumber(v int32) *DescribeBackupPolicyResponseBody {
	s.LogBackupLocalRetentionNumber = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetCategory(v string) *DescribeBackupPolicyResponseBody {
	s.Category = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetEnableBackupLog(v string) *DescribeBackupPolicyResponseBody {
	s.EnableBackupLog = &v
	return s
}

func (s *DescribeBackupPolicyResponseBody) SetBackupLog(v string) *DescribeBackupPolicyResponseBody {
	s.BackupLog = &v
	return s
}

type DescribeBackupPolicyResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponse) SetHeaders(v map[string]*string) *DescribeBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupPolicyResponse) SetBody(v *DescribeBackupPolicyResponseBody) *DescribeBackupPolicyResponse {
	s.Body = v
	return s
}

type DescribeBackupsRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupId        *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	BackupStatus    *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	BackupMode      *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	StartTime       *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeBackupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupsRequest) SetResourceOwnerId(v int64) *DescribeBackupsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBackupsRequest) SetDBInstanceId(v string) *DescribeBackupsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupsRequest) SetBackupId(v string) *DescribeBackupsRequest {
	s.BackupId = &v
	return s
}

func (s *DescribeBackupsRequest) SetBackupStatus(v string) *DescribeBackupsRequest {
	s.BackupStatus = &v
	return s
}

func (s *DescribeBackupsRequest) SetBackupMode(v string) *DescribeBackupsRequest {
	s.BackupMode = &v
	return s
}

func (s *DescribeBackupsRequest) SetStartTime(v string) *DescribeBackupsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeBackupsRequest) SetEndTime(v string) *DescribeBackupsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeBackupsRequest) SetPageSize(v int32) *DescribeBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBackupsRequest) SetPageNumber(v int32) *DescribeBackupsRequest {
	s.PageNumber = &v
	return s
}

type DescribeBackupsResponseBody struct {
	RequestId            *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalEcsSnapshotSize *int64                            `json:"TotalEcsSnapshotSize,omitempty" xml:"TotalEcsSnapshotSize,omitempty"`
	PageRecordCount      *string                           `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount     *string                           `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	PageNumber           *string                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items                *DescribeBackupsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeBackupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupsResponseBody) SetRequestId(v string) *DescribeBackupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBackupsResponseBody) SetTotalEcsSnapshotSize(v int64) *DescribeBackupsResponseBody {
	s.TotalEcsSnapshotSize = &v
	return s
}

func (s *DescribeBackupsResponseBody) SetPageRecordCount(v string) *DescribeBackupsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeBackupsResponseBody) SetTotalRecordCount(v string) *DescribeBackupsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeBackupsResponseBody) SetPageNumber(v string) *DescribeBackupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeBackupsResponseBody) SetItems(v *DescribeBackupsResponseBodyItems) *DescribeBackupsResponseBody {
	s.Items = v
	return s
}

type DescribeBackupsResponseBodyItems struct {
	Backup []*DescribeBackupsResponseBodyItemsBackup `json:"Backup,omitempty" xml:"Backup,omitempty" type:"Repeated"`
}

func (s DescribeBackupsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeBackupsResponseBodyItems) SetBackup(v []*DescribeBackupsResponseBodyItemsBackup) *DescribeBackupsResponseBodyItems {
	s.Backup = v
	return s
}

type DescribeBackupsResponseBodyItemsBackup struct {
	StorageClass              *string `json:"StorageClass,omitempty" xml:"StorageClass,omitempty"`
	Encryption                *string `json:"Encryption,omitempty" xml:"Encryption,omitempty"`
	BackupStatus              *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	StoreStatus               *string `json:"StoreStatus,omitempty" xml:"StoreStatus,omitempty"`
	ConsistentTime            *int64  `json:"ConsistentTime,omitempty" xml:"ConsistentTime,omitempty"`
	BackupType                *string `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
	CopyOnlyBackup            *string `json:"CopyOnlyBackup,omitempty" xml:"CopyOnlyBackup,omitempty"`
	BackupEndTime             *string `json:"BackupEndTime,omitempty" xml:"BackupEndTime,omitempty"`
	MetaStatus                *string `json:"MetaStatus,omitempty" xml:"MetaStatus,omitempty"`
	BackupInitiator           *string `json:"BackupInitiator,omitempty" xml:"BackupInitiator,omitempty"`
	BackupIntranetDownloadURL *string `json:"BackupIntranetDownloadURL,omitempty" xml:"BackupIntranetDownloadURL,omitempty"`
	BackupMethod              *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty"`
	BackupStartTime           *string `json:"BackupStartTime,omitempty" xml:"BackupStartTime,omitempty"`
	BackupDownloadURL         *string `json:"BackupDownloadURL,omitempty" xml:"BackupDownloadURL,omitempty"`
	IsAvail                   *int32  `json:"IsAvail,omitempty" xml:"IsAvail,omitempty"`
	BackupId                  *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	HostInstanceID            *string `json:"HostInstanceID,omitempty" xml:"HostInstanceID,omitempty"`
	BackupSize                *int64  `json:"BackupSize,omitempty" xml:"BackupSize,omitempty"`
	BackupMode                *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	DBInstanceId              *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeBackupsResponseBodyItemsBackup) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupsResponseBodyItemsBackup) GoString() string {
	return s.String()
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetStorageClass(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.StorageClass = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetEncryption(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.Encryption = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupStatus(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupStatus = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetStoreStatus(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.StoreStatus = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetConsistentTime(v int64) *DescribeBackupsResponseBodyItemsBackup {
	s.ConsistentTime = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupType(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupType = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetCopyOnlyBackup(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.CopyOnlyBackup = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupEndTime(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupEndTime = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetMetaStatus(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.MetaStatus = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupInitiator(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupInitiator = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupIntranetDownloadURL(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupIntranetDownloadURL = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupMethod(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupMethod = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupStartTime(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupStartTime = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupDownloadURL(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupDownloadURL = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetIsAvail(v int32) *DescribeBackupsResponseBodyItemsBackup {
	s.IsAvail = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupId(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupId = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetHostInstanceID(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.HostInstanceID = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupSize(v int64) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupSize = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetBackupMode(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.BackupMode = &v
	return s
}

func (s *DescribeBackupsResponseBodyItemsBackup) SetDBInstanceId(v string) *DescribeBackupsResponseBodyItemsBackup {
	s.DBInstanceId = &v
	return s
}

type DescribeBackupsResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeBackupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupsResponse) SetHeaders(v map[string]*string) *DescribeBackupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupsResponse) SetBody(v *DescribeBackupsResponseBody) *DescribeBackupsResponse {
	s.Body = v
	return s
}

type DescribeBackupTasksRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Flag                 *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupJobId          *int32  `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	BackupMode           *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	BackupJobStatus      *string `json:"BackupJobStatus,omitempty" xml:"BackupJobStatus,omitempty"`
}

func (s DescribeBackupTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupTasksRequest) SetOwnerId(v int64) *DescribeBackupTasksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetResourceOwnerAccount(v string) *DescribeBackupTasksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetResourceOwnerId(v int64) *DescribeBackupTasksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetClientToken(v string) *DescribeBackupTasksRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetFlag(v string) *DescribeBackupTasksRequest {
	s.Flag = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetOwnerAccount(v string) *DescribeBackupTasksRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetDBInstanceId(v string) *DescribeBackupTasksRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetBackupJobId(v int32) *DescribeBackupTasksRequest {
	s.BackupJobId = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetBackupMode(v string) *DescribeBackupTasksRequest {
	s.BackupMode = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetBackupJobStatus(v string) *DescribeBackupTasksRequest {
	s.BackupJobStatus = &v
	return s
}

type DescribeBackupTasksResponseBody struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Items     *DescribeBackupTasksResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeBackupTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBackupTasksResponseBody) SetRequestId(v string) *DescribeBackupTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBackupTasksResponseBody) SetItems(v *DescribeBackupTasksResponseBodyItems) *DescribeBackupTasksResponseBody {
	s.Items = v
	return s
}

type DescribeBackupTasksResponseBodyItems struct {
	BackupJob []*DescribeBackupTasksResponseBodyItemsBackupJob `json:"BackupJob,omitempty" xml:"BackupJob,omitempty" type:"Repeated"`
}

func (s DescribeBackupTasksResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupTasksResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeBackupTasksResponseBodyItems) SetBackupJob(v []*DescribeBackupTasksResponseBodyItemsBackupJob) *DescribeBackupTasksResponseBodyItems {
	s.BackupJob = v
	return s
}

type DescribeBackupTasksResponseBodyItemsBackupJob struct {
	Process              *string `json:"Process,omitempty" xml:"Process,omitempty"`
	BackupJobId          *string `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	BackupStatus         *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	JobMode              *string `json:"JobMode,omitempty" xml:"JobMode,omitempty"`
	BackupProgressStatus *string `json:"BackupProgressStatus,omitempty" xml:"BackupProgressStatus,omitempty"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	TaskAction           *string `json:"TaskAction,omitempty" xml:"TaskAction,omitempty"`
}

func (s DescribeBackupTasksResponseBodyItemsBackupJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupTasksResponseBodyItemsBackupJob) GoString() string {
	return s.String()
}

func (s *DescribeBackupTasksResponseBodyItemsBackupJob) SetProcess(v string) *DescribeBackupTasksResponseBodyItemsBackupJob {
	s.Process = &v
	return s
}

func (s *DescribeBackupTasksResponseBodyItemsBackupJob) SetBackupJobId(v string) *DescribeBackupTasksResponseBodyItemsBackupJob {
	s.BackupJobId = &v
	return s
}

func (s *DescribeBackupTasksResponseBodyItemsBackupJob) SetBackupStatus(v string) *DescribeBackupTasksResponseBodyItemsBackupJob {
	s.BackupStatus = &v
	return s
}

func (s *DescribeBackupTasksResponseBodyItemsBackupJob) SetJobMode(v string) *DescribeBackupTasksResponseBodyItemsBackupJob {
	s.JobMode = &v
	return s
}

func (s *DescribeBackupTasksResponseBodyItemsBackupJob) SetBackupProgressStatus(v string) *DescribeBackupTasksResponseBodyItemsBackupJob {
	s.BackupProgressStatus = &v
	return s
}

func (s *DescribeBackupTasksResponseBodyItemsBackupJob) SetBackupId(v string) *DescribeBackupTasksResponseBodyItemsBackupJob {
	s.BackupId = &v
	return s
}

func (s *DescribeBackupTasksResponseBodyItemsBackupJob) SetTaskAction(v string) *DescribeBackupTasksResponseBodyItemsBackupJob {
	s.TaskAction = &v
	return s
}

type DescribeBackupTasksResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeBackupTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBackupTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupTasksResponse) SetHeaders(v map[string]*string) *DescribeBackupTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeBackupTasksResponse) SetBody(v *DescribeBackupTasksResponseBody) *DescribeBackupTasksResponse {
	s.Body = v
	return s
}

type DescribeBinlogFilesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeBinlogFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBinlogFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeBinlogFilesRequest) SetOwnerId(v int64) *DescribeBinlogFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetResourceOwnerAccount(v string) *DescribeBinlogFilesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetResourceOwnerId(v int64) *DescribeBinlogFilesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetDBInstanceId(v string) *DescribeBinlogFilesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetStartTime(v string) *DescribeBinlogFilesRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetEndTime(v string) *DescribeBinlogFilesRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetPageSize(v int32) *DescribeBinlogFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetPageNumber(v int32) *DescribeBinlogFilesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetOwnerAccount(v string) *DescribeBinlogFilesRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeBinlogFilesResponseBody struct {
	TotalFileSize    *int64                                `json:"TotalFileSize,omitempty" xml:"TotalFileSize,omitempty"`
	PageNumber       *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RequestId        *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *int32                                `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeBinlogFilesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeBinlogFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBinlogFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBinlogFilesResponseBody) SetTotalFileSize(v int64) *DescribeBinlogFilesResponseBody {
	s.TotalFileSize = &v
	return s
}

func (s *DescribeBinlogFilesResponseBody) SetPageNumber(v int32) *DescribeBinlogFilesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeBinlogFilesResponseBody) SetRequestId(v string) *DescribeBinlogFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBinlogFilesResponseBody) SetPageRecordCount(v int32) *DescribeBinlogFilesResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeBinlogFilesResponseBody) SetTotalRecordCount(v int32) *DescribeBinlogFilesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeBinlogFilesResponseBody) SetItems(v *DescribeBinlogFilesResponseBodyItems) *DescribeBinlogFilesResponseBody {
	s.Items = v
	return s
}

type DescribeBinlogFilesResponseBodyItems struct {
	BinLogFile []*DescribeBinlogFilesResponseBodyItemsBinLogFile `json:"BinLogFile,omitempty" xml:"BinLogFile,omitempty" type:"Repeated"`
}

func (s DescribeBinlogFilesResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeBinlogFilesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeBinlogFilesResponseBodyItems) SetBinLogFile(v []*DescribeBinlogFilesResponseBodyItemsBinLogFile) *DescribeBinlogFilesResponseBodyItems {
	s.BinLogFile = v
	return s
}

type DescribeBinlogFilesResponseBodyItemsBinLogFile struct {
	RemoteStatus         *string `json:"RemoteStatus,omitempty" xml:"RemoteStatus,omitempty"`
	IntranetDownloadLink *string `json:"IntranetDownloadLink,omitempty" xml:"IntranetDownloadLink,omitempty"`
	LogBeginTime         *string `json:"LogBeginTime,omitempty" xml:"LogBeginTime,omitempty"`
	LinkExpiredTime      *string `json:"LinkExpiredTime,omitempty" xml:"LinkExpiredTime,omitempty"`
	DownloadLink         *string `json:"DownloadLink,omitempty" xml:"DownloadLink,omitempty"`
	LogFileName          *string `json:"LogFileName,omitempty" xml:"LogFileName,omitempty"`
	Checksum             *string `json:"Checksum,omitempty" xml:"Checksum,omitempty"`
	LogEndTime           *string `json:"LogEndTime,omitempty" xml:"LogEndTime,omitempty"`
	HostInstanceID       *string `json:"HostInstanceID,omitempty" xml:"HostInstanceID,omitempty"`
	FileSize             *int64  `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s DescribeBinlogFilesResponseBodyItemsBinLogFile) String() string {
	return tea.Prettify(s)
}

func (s DescribeBinlogFilesResponseBodyItemsBinLogFile) GoString() string {
	return s.String()
}

func (s *DescribeBinlogFilesResponseBodyItemsBinLogFile) SetRemoteStatus(v string) *DescribeBinlogFilesResponseBodyItemsBinLogFile {
	s.RemoteStatus = &v
	return s
}

func (s *DescribeBinlogFilesResponseBodyItemsBinLogFile) SetIntranetDownloadLink(v string) *DescribeBinlogFilesResponseBodyItemsBinLogFile {
	s.IntranetDownloadLink = &v
	return s
}

func (s *DescribeBinlogFilesResponseBodyItemsBinLogFile) SetLogBeginTime(v string) *DescribeBinlogFilesResponseBodyItemsBinLogFile {
	s.LogBeginTime = &v
	return s
}

func (s *DescribeBinlogFilesResponseBodyItemsBinLogFile) SetLinkExpiredTime(v string) *DescribeBinlogFilesResponseBodyItemsBinLogFile {
	s.LinkExpiredTime = &v
	return s
}

func (s *DescribeBinlogFilesResponseBodyItemsBinLogFile) SetDownloadLink(v string) *DescribeBinlogFilesResponseBodyItemsBinLogFile {
	s.DownloadLink = &v
	return s
}

func (s *DescribeBinlogFilesResponseBodyItemsBinLogFile) SetLogFileName(v string) *DescribeBinlogFilesResponseBodyItemsBinLogFile {
	s.LogFileName = &v
	return s
}

func (s *DescribeBinlogFilesResponseBodyItemsBinLogFile) SetChecksum(v string) *DescribeBinlogFilesResponseBodyItemsBinLogFile {
	s.Checksum = &v
	return s
}

func (s *DescribeBinlogFilesResponseBodyItemsBinLogFile) SetLogEndTime(v string) *DescribeBinlogFilesResponseBodyItemsBinLogFile {
	s.LogEndTime = &v
	return s
}

func (s *DescribeBinlogFilesResponseBodyItemsBinLogFile) SetHostInstanceID(v string) *DescribeBinlogFilesResponseBodyItemsBinLogFile {
	s.HostInstanceID = &v
	return s
}

func (s *DescribeBinlogFilesResponseBodyItemsBinLogFile) SetFileSize(v int64) *DescribeBinlogFilesResponseBodyItemsBinLogFile {
	s.FileSize = &v
	return s
}

type DescribeBinlogFilesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeBinlogFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBinlogFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBinlogFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeBinlogFilesResponse) SetHeaders(v map[string]*string) *DescribeBinlogFilesResponse {
	s.Headers = v
	return s
}

func (s *DescribeBinlogFilesResponse) SetBody(v *DescribeBinlogFilesResponseBody) *DescribeBinlogFilesResponse {
	s.Body = v
	return s
}

type DescribeCharacterSetNameRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeCharacterSetNameRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharacterSetNameRequest) GoString() string {
	return s.String()
}

func (s *DescribeCharacterSetNameRequest) SetOwnerId(v int64) *DescribeCharacterSetNameRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCharacterSetNameRequest) SetResourceOwnerAccount(v string) *DescribeCharacterSetNameRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCharacterSetNameRequest) SetResourceOwnerId(v int64) *DescribeCharacterSetNameRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCharacterSetNameRequest) SetEngine(v string) *DescribeCharacterSetNameRequest {
	s.Engine = &v
	return s
}

func (s *DescribeCharacterSetNameRequest) SetRegionId(v string) *DescribeCharacterSetNameRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCharacterSetNameRequest) SetOwnerAccount(v string) *DescribeCharacterSetNameRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeCharacterSetNameResponseBody struct {
	Engine                *string                                                    `json:"Engine,omitempty" xml:"Engine,omitempty"`
	RequestId             *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CharacterSetNameItems *DescribeCharacterSetNameResponseBodyCharacterSetNameItems `json:"CharacterSetNameItems,omitempty" xml:"CharacterSetNameItems,omitempty" type:"Struct"`
}

func (s DescribeCharacterSetNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharacterSetNameResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCharacterSetNameResponseBody) SetEngine(v string) *DescribeCharacterSetNameResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeCharacterSetNameResponseBody) SetRequestId(v string) *DescribeCharacterSetNameResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCharacterSetNameResponseBody) SetCharacterSetNameItems(v *DescribeCharacterSetNameResponseBodyCharacterSetNameItems) *DescribeCharacterSetNameResponseBody {
	s.CharacterSetNameItems = v
	return s
}

type DescribeCharacterSetNameResponseBodyCharacterSetNameItems struct {
	CharacterSetName []*string `json:"CharacterSetName,omitempty" xml:"CharacterSetName,omitempty" type:"Repeated"`
}

func (s DescribeCharacterSetNameResponseBodyCharacterSetNameItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharacterSetNameResponseBodyCharacterSetNameItems) GoString() string {
	return s.String()
}

func (s *DescribeCharacterSetNameResponseBodyCharacterSetNameItems) SetCharacterSetName(v []*string) *DescribeCharacterSetNameResponseBodyCharacterSetNameItems {
	s.CharacterSetName = v
	return s
}

type DescribeCharacterSetNameResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCharacterSetNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCharacterSetNameResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharacterSetNameResponse) GoString() string {
	return s.String()
}

func (s *DescribeCharacterSetNameResponse) SetHeaders(v map[string]*string) *DescribeCharacterSetNameResponse {
	s.Headers = v
	return s
}

func (s *DescribeCharacterSetNameResponse) SetBody(v *DescribeCharacterSetNameResponseBody) *DescribeCharacterSetNameResponse {
	s.Body = v
	return s
}

type DescribeCollationTimeZonesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeCollationTimeZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollationTimeZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCollationTimeZonesRequest) SetOwnerId(v int64) *DescribeCollationTimeZonesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCollationTimeZonesRequest) SetResourceOwnerAccount(v string) *DescribeCollationTimeZonesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCollationTimeZonesRequest) SetResourceOwnerId(v int64) *DescribeCollationTimeZonesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeCollationTimeZonesResponseBody struct {
	RequestId          *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CollationTimeZones *DescribeCollationTimeZonesResponseBodyCollationTimeZones `json:"CollationTimeZones,omitempty" xml:"CollationTimeZones,omitempty" type:"Struct"`
}

func (s DescribeCollationTimeZonesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollationTimeZonesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCollationTimeZonesResponseBody) SetRequestId(v string) *DescribeCollationTimeZonesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCollationTimeZonesResponseBody) SetCollationTimeZones(v *DescribeCollationTimeZonesResponseBodyCollationTimeZones) *DescribeCollationTimeZonesResponseBody {
	s.CollationTimeZones = v
	return s
}

type DescribeCollationTimeZonesResponseBodyCollationTimeZones struct {
	CollationTimeZone []*DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone `json:"CollationTimeZone,omitempty" xml:"CollationTimeZone,omitempty" type:"Repeated"`
}

func (s DescribeCollationTimeZonesResponseBodyCollationTimeZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollationTimeZonesResponseBodyCollationTimeZones) GoString() string {
	return s.String()
}

func (s *DescribeCollationTimeZonesResponseBodyCollationTimeZones) SetCollationTimeZone(v []*DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone) *DescribeCollationTimeZonesResponseBodyCollationTimeZones {
	s.CollationTimeZone = v
	return s
}

type DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone struct {
	TimeZone           *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
	StandardTimeOffset *string `json:"StandardTimeOffset,omitempty" xml:"StandardTimeOffset,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone) GoString() string {
	return s.String()
}

func (s *DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone) SetTimeZone(v string) *DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone {
	s.TimeZone = &v
	return s
}

func (s *DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone) SetStandardTimeOffset(v string) *DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone {
	s.StandardTimeOffset = &v
	return s
}

func (s *DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone) SetDescription(v string) *DescribeCollationTimeZonesResponseBodyCollationTimeZonesCollationTimeZone {
	s.Description = &v
	return s
}

type DescribeCollationTimeZonesResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCollationTimeZonesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCollationTimeZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollationTimeZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCollationTimeZonesResponse) SetHeaders(v map[string]*string) *DescribeCollationTimeZonesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCollationTimeZonesResponse) SetBody(v *DescribeCollationTimeZonesResponseBody) *DescribeCollationTimeZonesResponse {
	s.Body = v
	return s
}

type DescribeCrossBackupMetaListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	BackupSetId          *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	GetDbName            *string `json:"GetDbName,omitempty" xml:"GetDbName,omitempty"`
	Pattern              *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	PageSize             *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageIndex            *string `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	Region               *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DescribeCrossBackupMetaListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossBackupMetaListRequest) GoString() string {
	return s.String()
}

func (s *DescribeCrossBackupMetaListRequest) SetOwnerId(v int64) *DescribeCrossBackupMetaListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetResourceOwnerAccount(v string) *DescribeCrossBackupMetaListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetResourceOwnerId(v int64) *DescribeCrossBackupMetaListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetBackupSetId(v string) *DescribeCrossBackupMetaListRequest {
	s.BackupSetId = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetGetDbName(v string) *DescribeCrossBackupMetaListRequest {
	s.GetDbName = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetPattern(v string) *DescribeCrossBackupMetaListRequest {
	s.Pattern = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetPageSize(v string) *DescribeCrossBackupMetaListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetPageIndex(v string) *DescribeCrossBackupMetaListRequest {
	s.PageIndex = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetRegion(v string) *DescribeCrossBackupMetaListRequest {
	s.Region = &v
	return s
}

type DescribeCrossBackupMetaListResponseBody struct {
	DBInstanceName   *string                                       `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	TotalPageCount   *int32                                        `json:"TotalPageCount,omitempty" xml:"TotalPageCount,omitempty"`
	RequestId        *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *int32                                        `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                        `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	PageNumber       *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items            *DescribeCrossBackupMetaListResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeCrossBackupMetaListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossBackupMetaListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCrossBackupMetaListResponseBody) SetDBInstanceName(v string) *DescribeCrossBackupMetaListResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponseBody) SetTotalPageCount(v int32) *DescribeCrossBackupMetaListResponseBody {
	s.TotalPageCount = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponseBody) SetRequestId(v string) *DescribeCrossBackupMetaListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponseBody) SetPageRecordCount(v int32) *DescribeCrossBackupMetaListResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponseBody) SetTotalRecordCount(v int32) *DescribeCrossBackupMetaListResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponseBody) SetPageNumber(v int32) *DescribeCrossBackupMetaListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponseBody) SetItems(v *DescribeCrossBackupMetaListResponseBodyItems) *DescribeCrossBackupMetaListResponseBody {
	s.Items = v
	return s
}

type DescribeCrossBackupMetaListResponseBodyItems struct {
	Meta []*DescribeCrossBackupMetaListResponseBodyItemsMeta `json:"Meta,omitempty" xml:"Meta,omitempty" type:"Repeated"`
}

func (s DescribeCrossBackupMetaListResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossBackupMetaListResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeCrossBackupMetaListResponseBodyItems) SetMeta(v []*DescribeCrossBackupMetaListResponseBodyItemsMeta) *DescribeCrossBackupMetaListResponseBodyItems {
	s.Meta = v
	return s
}

type DescribeCrossBackupMetaListResponseBodyItemsMeta struct {
	Tables   *string `json:"Tables,omitempty" xml:"Tables,omitempty"`
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	Size     *string `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeCrossBackupMetaListResponseBodyItemsMeta) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossBackupMetaListResponseBodyItemsMeta) GoString() string {
	return s.String()
}

func (s *DescribeCrossBackupMetaListResponseBodyItemsMeta) SetTables(v string) *DescribeCrossBackupMetaListResponseBodyItemsMeta {
	s.Tables = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponseBodyItemsMeta) SetDatabase(v string) *DescribeCrossBackupMetaListResponseBodyItemsMeta {
	s.Database = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponseBodyItemsMeta) SetSize(v string) *DescribeCrossBackupMetaListResponseBodyItemsMeta {
	s.Size = &v
	return s
}

type DescribeCrossBackupMetaListResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCrossBackupMetaListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCrossBackupMetaListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossBackupMetaListResponse) GoString() string {
	return s.String()
}

func (s *DescribeCrossBackupMetaListResponse) SetHeaders(v map[string]*string) *DescribeCrossBackupMetaListResponse {
	s.Headers = v
	return s
}

func (s *DescribeCrossBackupMetaListResponse) SetBody(v *DescribeCrossBackupMetaListResponseBody) *DescribeCrossBackupMetaListResponse {
	s.Body = v
	return s
}

type DescribeCrossRegionBackupDBInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeCrossRegionBackupDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetOwnerId(v int64) *DescribeCrossRegionBackupDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetResourceOwnerAccount(v string) *DescribeCrossRegionBackupDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetResourceOwnerId(v int64) *DescribeCrossRegionBackupDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetRegionId(v string) *DescribeCrossRegionBackupDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetDBInstanceId(v string) *DescribeCrossRegionBackupDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetPageSize(v int32) *DescribeCrossRegionBackupDBInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetPageNumber(v int32) *DescribeCrossRegionBackupDBInstanceRequest {
	s.PageNumber = &v
	return s
}

type DescribeCrossRegionBackupDBInstanceResponseBody struct {
	RequestId    *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalRecords *int32                                                `json:"TotalRecords,omitempty" xml:"TotalRecords,omitempty"`
	ItemsNumbers *int32                                                `json:"ItemsNumbers,omitempty" xml:"ItemsNumbers,omitempty"`
	PageSize     *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RegionId     *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Items        *DescribeCrossRegionBackupDBInstanceResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeCrossRegionBackupDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBody) SetRequestId(v string) *DescribeCrossRegionBackupDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBody) SetTotalRecords(v int32) *DescribeCrossRegionBackupDBInstanceResponseBody {
	s.TotalRecords = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBody) SetItemsNumbers(v int32) *DescribeCrossRegionBackupDBInstanceResponseBody {
	s.ItemsNumbers = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBody) SetPageSize(v int32) *DescribeCrossRegionBackupDBInstanceResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBody) SetPageNumber(v int32) *DescribeCrossRegionBackupDBInstanceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBody) SetRegionId(v string) *DescribeCrossRegionBackupDBInstanceResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBody) SetItems(v *DescribeCrossRegionBackupDBInstanceResponseBodyItems) *DescribeCrossRegionBackupDBInstanceResponseBody {
	s.Items = v
	return s
}

type DescribeCrossRegionBackupDBInstanceResponseBodyItems struct {
	Item []*DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s DescribeCrossRegionBackupDBInstanceResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupDBInstanceResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItems) SetItem(v []*DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) *DescribeCrossRegionBackupDBInstanceResponseBodyItems {
	s.Item = v
	return s
}

type DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem struct {
	LogBackupEnabledTime  *string `json:"LogBackupEnabledTime,omitempty" xml:"LogBackupEnabledTime,omitempty"`
	BackupEnabled         *string `json:"BackupEnabled,omitempty" xml:"BackupEnabled,omitempty"`
	DBInstanceStatus      *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	LockMode              *string `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	LogBackupEnabled      *string `json:"LogBackupEnabled,omitempty" xml:"LogBackupEnabled,omitempty"`
	RetentType            *int32  `json:"RetentType,omitempty" xml:"RetentType,omitempty"`
	Retention             *int32  `json:"Retention,omitempty" xml:"Retention,omitempty"`
	CrossBackupType       *string `json:"CrossBackupType,omitempty" xml:"CrossBackupType,omitempty"`
	CrossBackupRegion     *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Engine                *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	BackupEnabledTime     *string `json:"BackupEnabledTime,omitempty" xml:"BackupEnabledTime,omitempty"`
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
}

func (s DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetLogBackupEnabledTime(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.LogBackupEnabledTime = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetBackupEnabled(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.BackupEnabled = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetDBInstanceStatus(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetLockMode(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.LockMode = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetEngineVersion(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.EngineVersion = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetLogBackupEnabled(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.LogBackupEnabled = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetRetentType(v int32) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.RetentType = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetRetention(v int32) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.Retention = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetCrossBackupType(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.CrossBackupType = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetCrossBackupRegion(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetDBInstanceId(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetEngine(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.Engine = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetBackupEnabledTime(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.BackupEnabledTime = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem) SetDBInstanceDescription(v string) *DescribeCrossRegionBackupDBInstanceResponseBodyItemsItem {
	s.DBInstanceDescription = &v
	return s
}

type DescribeCrossRegionBackupDBInstanceResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCrossRegionBackupDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCrossRegionBackupDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupDBInstanceResponse) SetHeaders(v map[string]*string) *DescribeCrossRegionBackupDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponse) SetBody(v *DescribeCrossRegionBackupDBInstanceResponseBody) *DescribeCrossRegionBackupDBInstanceResponse {
	s.Body = v
	return s
}

type DescribeCrossRegionBackupsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CrossBackupRegion    *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	CrossBackupId        *int32  `json:"CrossBackupId,omitempty" xml:"CrossBackupId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	BackupId             *int32  `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
}

func (s DescribeCrossRegionBackupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsRequest) SetOwnerId(v int64) *DescribeCrossRegionBackupsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetResourceOwnerAccount(v string) *DescribeCrossRegionBackupsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetResourceOwnerId(v int64) *DescribeCrossRegionBackupsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetDBInstanceId(v string) *DescribeCrossRegionBackupsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetRegionId(v string) *DescribeCrossRegionBackupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetCrossBackupRegion(v string) *DescribeCrossRegionBackupsRequest {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetCrossBackupId(v int32) *DescribeCrossRegionBackupsRequest {
	s.CrossBackupId = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetStartTime(v string) *DescribeCrossRegionBackupsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetEndTime(v string) *DescribeCrossRegionBackupsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetPageSize(v int32) *DescribeCrossRegionBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetPageNumber(v int32) *DescribeCrossRegionBackupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetBackupId(v int32) *DescribeCrossRegionBackupsRequest {
	s.BackupId = &v
	return s
}

type DescribeCrossRegionBackupsResponseBody struct {
	EndTime          *string                                      `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime        *string                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	RequestId        *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *int32                                       `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                       `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	PageNumber       *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RegionId         *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Items            *DescribeCrossRegionBackupsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeCrossRegionBackupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsResponseBody) SetEndTime(v string) *DescribeCrossRegionBackupsResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBody) SetStartTime(v string) *DescribeCrossRegionBackupsResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBody) SetRequestId(v string) *DescribeCrossRegionBackupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBody) SetPageRecordCount(v int32) *DescribeCrossRegionBackupsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBody) SetTotalRecordCount(v int32) *DescribeCrossRegionBackupsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBody) SetPageNumber(v int32) *DescribeCrossRegionBackupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBody) SetRegionId(v string) *DescribeCrossRegionBackupsResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBody) SetItems(v *DescribeCrossRegionBackupsResponseBodyItems) *DescribeCrossRegionBackupsResponseBody {
	s.Items = v
	return s
}

type DescribeCrossRegionBackupsResponseBodyItems struct {
	Item []*DescribeCrossRegionBackupsResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s DescribeCrossRegionBackupsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsResponseBodyItems) SetItem(v []*DescribeCrossRegionBackupsResponseBodyItemsItem) *DescribeCrossRegionBackupsResponseBodyItems {
	s.Item = v
	return s
}

type DescribeCrossRegionBackupsResponseBodyItemsItem struct {
	ConsistentTime          *string                                                        `json:"ConsistentTime,omitempty" xml:"ConsistentTime,omitempty"`
	DBInstanceStorageType   *string                                                        `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	CrossBackupId           *int32                                                         `json:"CrossBackupId,omitempty" xml:"CrossBackupId,omitempty"`
	BackupType              *string                                                        `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
	BackupStartTime         *string                                                        `json:"BackupStartTime,omitempty" xml:"BackupStartTime,omitempty"`
	CrossBackupSetLocation  *string                                                        `json:"CrossBackupSetLocation,omitempty" xml:"CrossBackupSetLocation,omitempty"`
	InstanceId              *int32                                                         `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	CrossBackupDownloadLink *string                                                        `json:"CrossBackupDownloadLink,omitempty" xml:"CrossBackupDownloadLink,omitempty"`
	BackupEndTime           *string                                                        `json:"BackupEndTime,omitempty" xml:"BackupEndTime,omitempty"`
	EngineVersion           *string                                                        `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	BackupSetStatus         *int32                                                         `json:"BackupSetStatus,omitempty" xml:"BackupSetStatus,omitempty"`
	CrossBackupSetFile      *string                                                        `json:"CrossBackupSetFile,omitempty" xml:"CrossBackupSetFile,omitempty"`
	BackupSetScale          *int32                                                         `json:"BackupSetScale,omitempty" xml:"BackupSetScale,omitempty"`
	CrossBackupSetSize      *int64                                                         `json:"CrossBackupSetSize,omitempty" xml:"CrossBackupSetSize,omitempty"`
	CrossBackupRegion       *string                                                        `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	Category                *string                                                        `json:"Category,omitempty" xml:"Category,omitempty"`
	Engine                  *string                                                        `json:"Engine,omitempty" xml:"Engine,omitempty"`
	BackupMethod            *string                                                        `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty"`
	RestoreRegions          *DescribeCrossRegionBackupsResponseBodyItemsItemRestoreRegions `json:"RestoreRegions,omitempty" xml:"RestoreRegions,omitempty" type:"Struct"`
}

func (s DescribeCrossRegionBackupsResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetConsistentTime(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.ConsistentTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetDBInstanceStorageType(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetCrossBackupId(v int32) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.CrossBackupId = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetBackupType(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.BackupType = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetBackupStartTime(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.BackupStartTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetCrossBackupSetLocation(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.CrossBackupSetLocation = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetInstanceId(v int32) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.InstanceId = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetCrossBackupDownloadLink(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.CrossBackupDownloadLink = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetBackupEndTime(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.BackupEndTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetEngineVersion(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.EngineVersion = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetBackupSetStatus(v int32) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.BackupSetStatus = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetCrossBackupSetFile(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.CrossBackupSetFile = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetBackupSetScale(v int32) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.BackupSetScale = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetCrossBackupSetSize(v int64) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.CrossBackupSetSize = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetCrossBackupRegion(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetCategory(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.Category = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetEngine(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.Engine = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetBackupMethod(v string) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.BackupMethod = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItem) SetRestoreRegions(v *DescribeCrossRegionBackupsResponseBodyItemsItemRestoreRegions) *DescribeCrossRegionBackupsResponseBodyItemsItem {
	s.RestoreRegions = v
	return s
}

type DescribeCrossRegionBackupsResponseBodyItemsItemRestoreRegions struct {
	RestoreRegion []*string `json:"RestoreRegion,omitempty" xml:"RestoreRegion,omitempty" type:"Repeated"`
}

func (s DescribeCrossRegionBackupsResponseBodyItemsItemRestoreRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsResponseBodyItemsItemRestoreRegions) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsResponseBodyItemsItemRestoreRegions) SetRestoreRegion(v []*string) *DescribeCrossRegionBackupsResponseBodyItemsItemRestoreRegions {
	s.RestoreRegion = v
	return s
}

type DescribeCrossRegionBackupsResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCrossRegionBackupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCrossRegionBackupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsResponse) SetHeaders(v map[string]*string) *DescribeCrossRegionBackupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCrossRegionBackupsResponse) SetBody(v *DescribeCrossRegionBackupsResponseBody) *DescribeCrossRegionBackupsResponse {
	s.Body = v
	return s
}

type DescribeCrossRegionLogBackupFilesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CrossBackupRegion    *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeCrossRegionLogBackupFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionLogBackupFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetOwnerId(v int64) *DescribeCrossRegionLogBackupFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetResourceOwnerAccount(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetResourceOwnerId(v int64) *DescribeCrossRegionLogBackupFilesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetDBInstanceId(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetRegionId(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetCrossBackupRegion(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetStartTime(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetEndTime(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetPageSize(v int32) *DescribeCrossRegionLogBackupFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetPageNumber(v int32) *DescribeCrossRegionLogBackupFilesRequest {
	s.PageNumber = &v
	return s
}

type DescribeCrossRegionLogBackupFilesResponseBody struct {
	EndTime          *string                                             `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime        *string                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	RequestId        *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *int32                                              `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                              `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	DBInstanceId     *string                                             `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	PageNumber       *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RegionId         *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Items            *DescribeCrossRegionLogBackupFilesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeCrossRegionLogBackupFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionLogBackupFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionLogBackupFilesResponseBody) SetEndTime(v string) *DescribeCrossRegionLogBackupFilesResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBody) SetStartTime(v string) *DescribeCrossRegionLogBackupFilesResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBody) SetRequestId(v string) *DescribeCrossRegionLogBackupFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBody) SetPageRecordCount(v int32) *DescribeCrossRegionLogBackupFilesResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBody) SetTotalRecordCount(v int32) *DescribeCrossRegionLogBackupFilesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBody) SetDBInstanceId(v string) *DescribeCrossRegionLogBackupFilesResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBody) SetPageNumber(v int32) *DescribeCrossRegionLogBackupFilesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBody) SetRegionId(v string) *DescribeCrossRegionLogBackupFilesResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBody) SetItems(v *DescribeCrossRegionLogBackupFilesResponseBodyItems) *DescribeCrossRegionLogBackupFilesResponseBody {
	s.Items = v
	return s
}

type DescribeCrossRegionLogBackupFilesResponseBodyItems struct {
	Item []*DescribeCrossRegionLogBackupFilesResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s DescribeCrossRegionLogBackupFilesResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionLogBackupFilesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItems) SetItem(v []*DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) *DescribeCrossRegionLogBackupFilesResponseBodyItems {
	s.Item = v
	return s
}

type DescribeCrossRegionLogBackupFilesResponseBodyItemsItem struct {
	LogBeginTime              *string `json:"LogBeginTime,omitempty" xml:"LogBeginTime,omitempty"`
	LinkExpiredTime           *string `json:"LinkExpiredTime,omitempty" xml:"LinkExpiredTime,omitempty"`
	CrossIntranetDownloadLink *string `json:"CrossIntranetDownloadLink,omitempty" xml:"CrossIntranetDownloadLink,omitempty"`
	LogFileName               *string `json:"LogFileName,omitempty" xml:"LogFileName,omitempty"`
	CrossBackupRegion         *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	CrossDownloadLink         *string `json:"CrossDownloadLink,omitempty" xml:"CrossDownloadLink,omitempty"`
	CrossLogBackupSize        *int64  `json:"CrossLogBackupSize,omitempty" xml:"CrossLogBackupSize,omitempty"`
	InstanceId                *int32  `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	CrossLogBackupId          *int32  `json:"CrossLogBackupId,omitempty" xml:"CrossLogBackupId,omitempty"`
	LogEndTime                *string `json:"LogEndTime,omitempty" xml:"LogEndTime,omitempty"`
}

func (s DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) SetLogBeginTime(v string) *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem {
	s.LogBeginTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) SetLinkExpiredTime(v string) *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem {
	s.LinkExpiredTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) SetCrossIntranetDownloadLink(v string) *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem {
	s.CrossIntranetDownloadLink = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) SetLogFileName(v string) *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem {
	s.LogFileName = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) SetCrossBackupRegion(v string) *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) SetCrossDownloadLink(v string) *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem {
	s.CrossDownloadLink = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) SetCrossLogBackupSize(v int64) *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem {
	s.CrossLogBackupSize = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) SetInstanceId(v int32) *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem {
	s.InstanceId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) SetCrossLogBackupId(v int32) *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem {
	s.CrossLogBackupId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem) SetLogEndTime(v string) *DescribeCrossRegionLogBackupFilesResponseBodyItemsItem {
	s.LogEndTime = &v
	return s
}

type DescribeCrossRegionLogBackupFilesResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeCrossRegionLogBackupFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCrossRegionLogBackupFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionLogBackupFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetHeaders(v map[string]*string) *DescribeCrossRegionLogBackupFilesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetBody(v *DescribeCrossRegionLogBackupFilesResponseBody) *DescribeCrossRegionLogBackupFilesResponse {
	s.Body = v
	return s
}

type DescribeDatabasesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	DBStatus             *string `json:"DBStatus,omitempty" xml:"DBStatus,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeDatabasesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesRequest) SetOwnerId(v int64) *DescribeDatabasesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDatabasesRequest) SetResourceOwnerAccount(v string) *DescribeDatabasesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDatabasesRequest) SetResourceOwnerId(v int64) *DescribeDatabasesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDatabasesRequest) SetDBInstanceId(v string) *DescribeDatabasesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDatabasesRequest) SetDBName(v string) *DescribeDatabasesRequest {
	s.DBName = &v
	return s
}

func (s *DescribeDatabasesRequest) SetDBStatus(v string) *DescribeDatabasesRequest {
	s.DBStatus = &v
	return s
}

func (s *DescribeDatabasesRequest) SetOwnerAccount(v string) *DescribeDatabasesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDatabasesRequest) SetPageSize(v int32) *DescribeDatabasesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDatabasesRequest) SetPageNumber(v int32) *DescribeDatabasesRequest {
	s.PageNumber = &v
	return s
}

type DescribeDatabasesResponseBody struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Databases *DescribeDatabasesResponseBodyDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Struct"`
}

func (s DescribeDatabasesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseBody) SetRequestId(v string) *DescribeDatabasesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDatabasesResponseBody) SetDatabases(v *DescribeDatabasesResponseBodyDatabases) *DescribeDatabasesResponseBody {
	s.Databases = v
	return s
}

type DescribeDatabasesResponseBodyDatabases struct {
	Database []*DescribeDatabasesResponseBodyDatabasesDatabase `json:"Database,omitempty" xml:"Database,omitempty" type:"Repeated"`
}

func (s DescribeDatabasesResponseBodyDatabases) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseBodyDatabases) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseBodyDatabases) SetDatabase(v []*DescribeDatabasesResponseBodyDatabasesDatabase) *DescribeDatabasesResponseBodyDatabases {
	s.Database = v
	return s
}

type DescribeDatabasesResponseBodyDatabasesDatabase struct {
	DBDescription    *string                                                 `json:"DBDescription,omitempty" xml:"DBDescription,omitempty"`
	DBStatus         *string                                                 `json:"DBStatus,omitempty" xml:"DBStatus,omitempty"`
	DBName           *string                                                 `json:"DBName,omitempty" xml:"DBName,omitempty"`
	DBInstanceId     *string                                                 `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Engine           *string                                                 `json:"Engine,omitempty" xml:"Engine,omitempty"`
	CharacterSetName *string                                                 `json:"CharacterSetName,omitempty" xml:"CharacterSetName,omitempty"`
	Accounts         *DescribeDatabasesResponseBodyDatabasesDatabaseAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" type:"Struct"`
}

func (s DescribeDatabasesResponseBodyDatabasesDatabase) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseBodyDatabasesDatabase) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabase) SetDBDescription(v string) *DescribeDatabasesResponseBodyDatabasesDatabase {
	s.DBDescription = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabase) SetDBStatus(v string) *DescribeDatabasesResponseBodyDatabasesDatabase {
	s.DBStatus = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabase) SetDBName(v string) *DescribeDatabasesResponseBodyDatabasesDatabase {
	s.DBName = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabase) SetDBInstanceId(v string) *DescribeDatabasesResponseBodyDatabasesDatabase {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabase) SetEngine(v string) *DescribeDatabasesResponseBodyDatabasesDatabase {
	s.Engine = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabase) SetCharacterSetName(v string) *DescribeDatabasesResponseBodyDatabasesDatabase {
	s.CharacterSetName = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabase) SetAccounts(v *DescribeDatabasesResponseBodyDatabasesDatabaseAccounts) *DescribeDatabasesResponseBodyDatabasesDatabase {
	s.Accounts = v
	return s
}

type DescribeDatabasesResponseBodyDatabasesDatabaseAccounts struct {
	AccountPrivilegeInfo []*DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo `json:"AccountPrivilegeInfo,omitempty" xml:"AccountPrivilegeInfo,omitempty" type:"Repeated"`
}

func (s DescribeDatabasesResponseBodyDatabasesDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseBodyDatabasesDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabaseAccounts) SetAccountPrivilegeInfo(v []*DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo) *DescribeDatabasesResponseBodyDatabasesDatabaseAccounts {
	s.AccountPrivilegeInfo = v
	return s
}

type DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo struct {
	Account                *string `json:"Account,omitempty" xml:"Account,omitempty"`
	AccountPrivilege       *string `json:"AccountPrivilege,omitempty" xml:"AccountPrivilege,omitempty"`
	AccountPrivilegeDetail *string `json:"AccountPrivilegeDetail,omitempty" xml:"AccountPrivilegeDetail,omitempty"`
}

func (s DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo) SetAccount(v string) *DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo {
	s.Account = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo) SetAccountPrivilege(v string) *DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo {
	s.AccountPrivilege = &v
	return s
}

func (s *DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo) SetAccountPrivilegeDetail(v string) *DescribeDatabasesResponseBodyDatabasesDatabaseAccountsAccountPrivilegeInfo {
	s.AccountPrivilegeDetail = &v
	return s
}

type DescribeDatabasesResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDatabasesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDatabasesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponse) SetHeaders(v map[string]*string) *DescribeDatabasesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDatabasesResponse) SetBody(v *DescribeDatabasesResponseBody) *DescribeDatabasesResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceAttributeRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Expired         *string `json:"Expired,omitempty" xml:"Expired,omitempty"`
}

func (s DescribeDBInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeRequest) SetResourceOwnerId(v int64) *DescribeDBInstanceAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceAttributeRequest) SetDBInstanceId(v string) *DescribeDBInstanceAttributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeRequest) SetExpired(v string) *DescribeDBInstanceAttributeRequest {
	s.Expired = &v
	return s
}

type DescribeDBInstanceAttributeResponseBody struct {
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Items     *DescribeDBInstanceAttributeResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeDBInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBody) SetRequestId(v string) *DescribeDBInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBody) SetItems(v *DescribeDBInstanceAttributeResponseBodyItems) *DescribeDBInstanceAttributeResponseBody {
	s.Items = v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItems struct {
	DBInstanceAttribute []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute `json:"DBInstanceAttribute,omitempty" xml:"DBInstanceAttribute,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItems) SetDBInstanceAttribute(v []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) *DescribeDBInstanceAttributeResponseBodyItems {
	s.DBInstanceAttribute = v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute struct {
	VpcId                          *string                                                                               `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	CreationTime                   *string                                                                               `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	IncrementSourceDBInstanceId    *string                                                                               `json:"IncrementSourceDBInstanceId,omitempty" xml:"IncrementSourceDBInstanceId,omitempty"`
	MaintainTime                   *string                                                                               `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty"`
	PayType                        *string                                                                               `json:"PayType,omitempty" xml:"PayType,omitempty"`
	AvailabilityValue              *string                                                                               `json:"AvailabilityValue,omitempty" xml:"AvailabilityValue,omitempty"`
	EngineVersion                  *string                                                                               `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DedicatedHostGroupId           *string                                                                               `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	ConnectionString               *string                                                                               `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	SuperPermissionMode            *string                                                                               `json:"SuperPermissionMode,omitempty" xml:"SuperPermissionMode,omitempty"`
	InstanceNetworkType            *string                                                                               `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	MasterInstanceId               *string                                                                               `json:"MasterInstanceId,omitempty" xml:"MasterInstanceId,omitempty"`
	AutoUpgradeMinorVersion        *string                                                                               `json:"AutoUpgradeMinorVersion,omitempty" xml:"AutoUpgradeMinorVersion,omitempty"`
	ExpireTime                     *string                                                                               `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	AccountMaxQuantity             *int32                                                                                `json:"AccountMaxQuantity,omitempty" xml:"AccountMaxQuantity,omitempty"`
	MasterZone                     *string                                                                               `json:"MasterZone,omitempty" xml:"MasterZone,omitempty"`
	GuardDBInstanceId              *string                                                                               `json:"GuardDBInstanceId,omitempty" xml:"GuardDBInstanceId,omitempty"`
	DBInstanceStorage              *int32                                                                                `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	TimeZone                       *string                                                                               `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
	LatestKernelVersion            *string                                                                               `json:"LatestKernelVersion,omitempty" xml:"LatestKernelVersion,omitempty"`
	TipsLevel                      *int32                                                                                `json:"TipsLevel,omitempty" xml:"TipsLevel,omitempty"`
	ZoneId                         *string                                                                               `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	MaxConnections                 *int32                                                                                `json:"MaxConnections,omitempty" xml:"MaxConnections,omitempty"`
	DBInstanceId                   *string                                                                               `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TempDBInstanceId               *string                                                                               `json:"TempDBInstanceId,omitempty" xml:"TempDBInstanceId,omitempty"`
	AdvancedFeatures               *string                                                                               `json:"AdvancedFeatures,omitempty" xml:"AdvancedFeatures,omitempty"`
	DBInstanceStorageType          *string                                                                               `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	DBInstanceMemory               *int64                                                                                `json:"DBInstanceMemory,omitempty" xml:"DBInstanceMemory,omitempty"`
	ConsoleVersion                 *string                                                                               `json:"ConsoleVersion,omitempty" xml:"ConsoleVersion,omitempty"`
	ConnectionMode                 *string                                                                               `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	Port                           *string                                                                               `json:"Port,omitempty" xml:"Port,omitempty"`
	LockMode                       *string                                                                               `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	GeneralGroupName               *string                                                                               `json:"GeneralGroupName,omitempty" xml:"GeneralGroupName,omitempty"`
	VpcCloudInstanceId             *string                                                                               `json:"VpcCloudInstanceId,omitempty" xml:"VpcCloudInstanceId,omitempty"`
	Collation                      *string                                                                               `json:"Collation,omitempty" xml:"Collation,omitempty"`
	MaxIOPS                        *int32                                                                                `json:"MaxIOPS,omitempty" xml:"MaxIOPS,omitempty"`
	Tips                           *string                                                                               `json:"Tips,omitempty" xml:"Tips,omitempty"`
	SecurityIPMode                 *string                                                                               `json:"SecurityIPMode,omitempty" xml:"SecurityIPMode,omitempty"`
	DBInstanceClassType            *string                                                                               `json:"DBInstanceClassType,omitempty" xml:"DBInstanceClassType,omitempty"`
	ProxyType                      *int32                                                                                `json:"ProxyType,omitempty" xml:"ProxyType,omitempty"`
	CurrentKernelVersion           *string                                                                               `json:"CurrentKernelVersion,omitempty" xml:"CurrentKernelVersion,omitempty"`
	DBInstanceDescription          *string                                                                               `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	DBInstanceCPU                  *string                                                                               `json:"DBInstanceCPU,omitempty" xml:"DBInstanceCPU,omitempty"`
	DBInstanceNetType              *string                                                                               `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty"`
	DBInstanceType                 *string                                                                               `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty"`
	LockReason                     *string                                                                               `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	DBInstanceStatus               *string                                                                               `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	DBMaxQuantity                  *int32                                                                                `json:"DBMaxQuantity,omitempty" xml:"DBMaxQuantity,omitempty"`
	RegionId                       *string                                                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReadonlyInstanceSQLDelayedTime *string                                                                               `json:"ReadonlyInstanceSQLDelayedTime,omitempty" xml:"ReadonlyInstanceSQLDelayedTime,omitempty"`
	VSwitchId                      *string                                                                               `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ResourceGroupId                *string                                                                               `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Category                       *string                                                                               `json:"Category,omitempty" xml:"Category,omitempty"`
	DBInstanceClass                *string                                                                               `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	Engine                         *string                                                                               `json:"Engine,omitempty" xml:"Engine,omitempty"`
	SlaveZones                     *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZones            `json:"SlaveZones,omitempty" xml:"SlaveZones,omitempty" type:"Struct"`
	ReadOnlyDBInstanceIds          *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIds `json:"ReadOnlyDBInstanceIds,omitempty" xml:"ReadOnlyDBInstanceIds,omitempty" type:"Struct"`
	Extra                          *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtra                 `json:"Extra,omitempty" xml:"Extra,omitempty" type:"Struct"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetVpcId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCreationTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.CreationTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetIncrementSourceDBInstanceId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.IncrementSourceDBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMaintainTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MaintainTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetPayType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetAvailabilityValue(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.AvailabilityValue = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetEngineVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDedicatedHostGroupId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetConnectionString(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSuperPermissionMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SuperPermissionMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetInstanceNetworkType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMasterInstanceId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetAutoUpgradeMinorVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.AutoUpgradeMinorVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetExpireTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetAccountMaxQuantity(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.AccountMaxQuantity = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMasterZone(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MasterZone = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetGuardDBInstanceId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.GuardDBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceStorage(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceStorage = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetTimeZone(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.TimeZone = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetLatestKernelVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.LatestKernelVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetTipsLevel(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.TipsLevel = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetZoneId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMaxConnections(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MaxConnections = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetTempDBInstanceId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.TempDBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetAdvancedFeatures(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.AdvancedFeatures = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceStorageType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceMemory(v int64) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceMemory = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetConsoleVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ConsoleVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetConnectionMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetPort(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Port = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetLockMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetGeneralGroupName(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.GeneralGroupName = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetVpcCloudInstanceId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.VpcCloudInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCollation(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Collation = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetMaxIOPS(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.MaxIOPS = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetTips(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Tips = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSecurityIPMode(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SecurityIPMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceClassType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceClassType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetProxyType(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ProxyType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCurrentKernelVersion(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.CurrentKernelVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceDescription(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceCPU(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceCPU = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceNetType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceType(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetLockReason(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceStatus(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBMaxQuantity(v int32) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBMaxQuantity = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetRegionId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetReadonlyInstanceSQLDelayedTime(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ReadonlyInstanceSQLDelayedTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetVSwitchId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetResourceGroupId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetCategory(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Category = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetDBInstanceClass(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetEngine(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetSlaveZones(v *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZones) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.SlaveZones = v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetReadOnlyDBInstanceIds(v *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIds) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.ReadOnlyDBInstanceIds = v
	return s
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute) SetExtra(v *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtra) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttribute {
	s.Extra = v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZones struct {
	SlaveZone []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZonesSlaveZone `json:"SlaveZone,omitempty" xml:"SlaveZone,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZones) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZones) SetSlaveZone(v []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZonesSlaveZone) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZones {
	s.SlaveZone = v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZonesSlaveZone struct {
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZonesSlaveZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZonesSlaveZone) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZonesSlaveZone) SetZoneId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeSlaveZonesSlaveZone {
	s.ZoneId = &v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIds struct {
	ReadOnlyDBInstanceId []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId `json:"ReadOnlyDBInstanceId,omitempty" xml:"ReadOnlyDBInstanceId,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIds) SetReadOnlyDBInstanceId(v []*DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIds {
	s.ReadOnlyDBInstanceId = v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId) SetDBInstanceId(v string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtra struct {
	DBInstanceIds *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtraDBInstanceIds `json:"DBInstanceIds,omitempty" xml:"DBInstanceIds,omitempty" type:"Struct"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtra) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtra) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtra) SetDBInstanceIds(v *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtraDBInstanceIds) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtra {
	s.DBInstanceIds = v
	return s
}

type DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtraDBInstanceIds struct {
	DBInstanceId []*string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtraDBInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtraDBInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtraDBInstanceIds) SetDBInstanceId(v []*string) *DescribeDBInstanceAttributeResponseBodyItemsDBInstanceAttributeExtraDBInstanceIds {
	s.DBInstanceId = v
	return s
}

type DescribeDBInstanceAttributeResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceAttributeResponse) SetBody(v *DescribeDBInstanceAttributeResponseBody) *DescribeDBInstanceAttributeResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceDetailRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstanceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDetailRequest) SetOwnerId(v int64) *DescribeDBInstanceDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceDetailRequest) SetResourceOwnerAccount(v string) *DescribeDBInstanceDetailRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceDetailRequest) SetResourceOwnerId(v int64) *DescribeDBInstanceDetailRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceDetailRequest) SetClientToken(v string) *DescribeDBInstanceDetailRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstanceDetailRequest) SetDBInstanceId(v string) *DescribeDBInstanceDetailRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceDetailResponseBody struct {
	ActivationState *string `json:"ActivationState,omitempty" xml:"ActivationState,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	LicenseType     *string `json:"LicenseType,omitempty" xml:"LicenseType,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDBInstanceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDetailResponseBody) SetActivationState(v string) *DescribeDBInstanceDetailResponseBody {
	s.ActivationState = &v
	return s
}

func (s *DescribeDBInstanceDetailResponseBody) SetDBInstanceId(v string) *DescribeDBInstanceDetailResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceDetailResponseBody) SetLicenseType(v string) *DescribeDBInstanceDetailResponseBody {
	s.LicenseType = &v
	return s
}

func (s *DescribeDBInstanceDetailResponseBody) SetRequestId(v string) *DescribeDBInstanceDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceDetailResponseBody) SetRegionId(v string) *DescribeDBInstanceDetailResponseBody {
	s.RegionId = &v
	return s
}

type DescribeDBInstanceDetailResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDetailResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceDetailResponse) SetBody(v *DescribeDBInstanceDetailResponseBody) *DescribeDBInstanceDetailResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceEncryptionKeyRequest struct {
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	EncryptionKey        *string `json:"EncryptionKey,omitempty" xml:"EncryptionKey,omitempty"`
	TargetRegionId       *string `json:"TargetRegionId,omitempty" xml:"TargetRegionId,omitempty"`
}

func (s DescribeDBInstanceEncryptionKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceEncryptionKeyRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceEncryptionKeyRequest) SetSecurityToken(v string) *DescribeDBInstanceEncryptionKeyRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyRequest) SetOwnerId(v int64) *DescribeDBInstanceEncryptionKeyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyRequest) SetResourceOwnerAccount(v string) *DescribeDBInstanceEncryptionKeyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyRequest) SetResourceOwnerId(v int64) *DescribeDBInstanceEncryptionKeyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyRequest) SetOwnerAccount(v string) *DescribeDBInstanceEncryptionKeyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyRequest) SetRegionId(v string) *DescribeDBInstanceEncryptionKeyRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyRequest) SetDBInstanceId(v string) *DescribeDBInstanceEncryptionKeyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyRequest) SetEncryptionKey(v string) *DescribeDBInstanceEncryptionKeyRequest {
	s.EncryptionKey = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyRequest) SetTargetRegionId(v string) *DescribeDBInstanceEncryptionKeyRequest {
	s.TargetRegionId = &v
	return s
}

type DescribeDBInstanceEncryptionKeyResponseBody struct {
	DeleteDate          *string `json:"DeleteDate,omitempty" xml:"DeleteDate,omitempty"`
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Origin              *string `json:"Origin,omitempty" xml:"Origin,omitempty"`
	MaterialExpireTime  *string `json:"MaterialExpireTime,omitempty" xml:"MaterialExpireTime,omitempty"`
	EncryptionKeyStatus *string `json:"EncryptionKeyStatus,omitempty" xml:"EncryptionKeyStatus,omitempty"`
	KeyUsage            *string `json:"KeyUsage,omitempty" xml:"KeyUsage,omitempty"`
	EncryptionKey       *string `json:"EncryptionKey,omitempty" xml:"EncryptionKey,omitempty"`
	Creator             *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
}

func (s DescribeDBInstanceEncryptionKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceEncryptionKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceEncryptionKeyResponseBody) SetDeleteDate(v string) *DescribeDBInstanceEncryptionKeyResponseBody {
	s.DeleteDate = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyResponseBody) SetRequestId(v string) *DescribeDBInstanceEncryptionKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyResponseBody) SetDescription(v string) *DescribeDBInstanceEncryptionKeyResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyResponseBody) SetOrigin(v string) *DescribeDBInstanceEncryptionKeyResponseBody {
	s.Origin = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyResponseBody) SetMaterialExpireTime(v string) *DescribeDBInstanceEncryptionKeyResponseBody {
	s.MaterialExpireTime = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyResponseBody) SetEncryptionKeyStatus(v string) *DescribeDBInstanceEncryptionKeyResponseBody {
	s.EncryptionKeyStatus = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyResponseBody) SetKeyUsage(v string) *DescribeDBInstanceEncryptionKeyResponseBody {
	s.KeyUsage = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyResponseBody) SetEncryptionKey(v string) *DescribeDBInstanceEncryptionKeyResponseBody {
	s.EncryptionKey = &v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyResponseBody) SetCreator(v string) *DescribeDBInstanceEncryptionKeyResponseBody {
	s.Creator = &v
	return s
}

type DescribeDBInstanceEncryptionKeyResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceEncryptionKeyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceEncryptionKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceEncryptionKeyResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceEncryptionKeyResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceEncryptionKeyResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceEncryptionKeyResponse) SetBody(v *DescribeDBInstanceEncryptionKeyResponseBody) *DescribeDBInstanceEncryptionKeyResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceHAConfigRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeDBInstanceHAConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceHAConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceHAConfigRequest) SetOwnerId(v int64) *DescribeDBInstanceHAConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigRequest) SetResourceOwnerAccount(v string) *DescribeDBInstanceHAConfigRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceHAConfigRequest) SetResourceOwnerId(v int64) *DescribeDBInstanceHAConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigRequest) SetDBInstanceId(v string) *DescribeDBInstanceHAConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigRequest) SetOwnerAccount(v string) *DescribeDBInstanceHAConfigRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeDBInstanceHAConfigResponseBody struct {
	DBInstanceId      *string                                                  `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId         *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HAMode            *string                                                  `json:"HAMode,omitempty" xml:"HAMode,omitempty"`
	SyncMode          *string                                                  `json:"SyncMode,omitempty" xml:"SyncMode,omitempty"`
	HostInstanceInfos *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfos `json:"HostInstanceInfos,omitempty" xml:"HostInstanceInfos,omitempty" type:"Struct"`
}

func (s DescribeDBInstanceHAConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceHAConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceHAConfigResponseBody) SetDBInstanceId(v string) *DescribeDBInstanceHAConfigResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseBody) SetRequestId(v string) *DescribeDBInstanceHAConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseBody) SetHAMode(v string) *DescribeDBInstanceHAConfigResponseBody {
	s.HAMode = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseBody) SetSyncMode(v string) *DescribeDBInstanceHAConfigResponseBody {
	s.SyncMode = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseBody) SetHostInstanceInfos(v *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfos) *DescribeDBInstanceHAConfigResponseBody {
	s.HostInstanceInfos = v
	return s
}

type DescribeDBInstanceHAConfigResponseBodyHostInstanceInfos struct {
	NodeInfo []*DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo `json:"NodeInfo,omitempty" xml:"NodeInfo,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceHAConfigResponseBodyHostInstanceInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceHAConfigResponseBodyHostInstanceInfos) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfos) SetNodeInfo(v []*DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo) *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfos {
	s.NodeInfo = v
	return s
}

type DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo struct {
	LogSyncTime  *string `json:"LogSyncTime,omitempty" xml:"LogSyncTime,omitempty"`
	NodeType     *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	ZoneId       *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	SyncStatus   *string `json:"SyncStatus,omitempty" xml:"SyncStatus,omitempty"`
	DataSyncTime *string `json:"DataSyncTime,omitempty" xml:"DataSyncTime,omitempty"`
	NodeId       *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo) SetLogSyncTime(v string) *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo {
	s.LogSyncTime = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo) SetNodeType(v string) *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo {
	s.NodeType = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo) SetZoneId(v string) *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo) SetSyncStatus(v string) *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo {
	s.SyncStatus = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo) SetDataSyncTime(v string) *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo {
	s.DataSyncTime = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo) SetNodeId(v string) *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo) SetRegionId(v string) *DescribeDBInstanceHAConfigResponseBodyHostInstanceInfosNodeInfo {
	s.RegionId = &v
	return s
}

type DescribeDBInstanceHAConfigResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceHAConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceHAConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceHAConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceHAConfigResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceHAConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceHAConfigResponse) SetBody(v *DescribeDBInstanceHAConfigResponseBody) *DescribeDBInstanceHAConfigResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceIPArrayListRequest struct {
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	WhitelistNetworkType *string `json:"WhitelistNetworkType,omitempty" xml:"WhitelistNetworkType,omitempty"`
}

func (s DescribeDBInstanceIPArrayListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListRequest) SetResourceOwnerId(v int64) *DescribeDBInstanceIPArrayListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListRequest) SetDBInstanceId(v string) *DescribeDBInstanceIPArrayListRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListRequest) SetOwnerAccount(v string) *DescribeDBInstanceIPArrayListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListRequest) SetWhitelistNetworkType(v string) *DescribeDBInstanceIPArrayListRequest {
	s.WhitelistNetworkType = &v
	return s
}

type DescribeDBInstanceIPArrayListResponseBody struct {
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Items     *DescribeDBInstanceIPArrayListResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeDBInstanceIPArrayListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseBody) SetRequestId(v string) *DescribeDBInstanceIPArrayListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBody) SetItems(v *DescribeDBInstanceIPArrayListResponseBodyItems) *DescribeDBInstanceIPArrayListResponseBody {
	s.Items = v
	return s
}

type DescribeDBInstanceIPArrayListResponseBodyItems struct {
	DBInstanceIPArray []*DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray `json:"DBInstanceIPArray,omitempty" xml:"DBInstanceIPArray,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceIPArrayListResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItems) SetDBInstanceIPArray(v []*DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) *DescribeDBInstanceIPArrayListResponseBodyItems {
	s.DBInstanceIPArray = v
	return s
}

type DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray struct {
	DBInstanceIPArrayAttribute *string `json:"DBInstanceIPArrayAttribute,omitempty" xml:"DBInstanceIPArrayAttribute,omitempty"`
	DBInstanceIPArrayName      *string `json:"DBInstanceIPArrayName,omitempty" xml:"DBInstanceIPArrayName,omitempty"`
	SecurityIPType             *string `json:"SecurityIPType,omitempty" xml:"SecurityIPType,omitempty"`
	SecurityIPList             *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
}

func (s DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) SetDBInstanceIPArrayAttribute(v string) *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	s.DBInstanceIPArrayAttribute = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) SetDBInstanceIPArrayName(v string) *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	s.DBInstanceIPArrayName = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) SetSecurityIPType(v string) *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	s.SecurityIPType = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray) SetSecurityIPList(v string) *DescribeDBInstanceIPArrayListResponseBodyItemsDBInstanceIPArray {
	s.SecurityIPList = &v
	return s
}

type DescribeDBInstanceIPArrayListResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceIPArrayListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceIPArrayListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceIPArrayListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponse) SetBody(v *DescribeDBInstanceIPArrayListResponseBody) *DescribeDBInstanceIPArrayListResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceIpHostnameRequest struct {
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDBInstanceIpHostnameRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIpHostnameRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIpHostnameRequest) SetSecurityToken(v string) *DescribeDBInstanceIpHostnameRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameRequest) SetOwnerId(v int64) *DescribeDBInstanceIpHostnameRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameRequest) SetResourceOwnerAccount(v string) *DescribeDBInstanceIpHostnameRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameRequest) SetResourceOwnerId(v int64) *DescribeDBInstanceIpHostnameRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameRequest) SetOwnerAccount(v string) *DescribeDBInstanceIpHostnameRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameRequest) SetDBInstanceId(v string) *DescribeDBInstanceIpHostnameRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameRequest) SetRegionId(v string) *DescribeDBInstanceIpHostnameRequest {
	s.RegionId = &v
	return s
}

type DescribeDBInstanceIpHostnameResponseBody struct {
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	IpHostnameInfos *string `json:"IpHostnameInfos,omitempty" xml:"IpHostnameInfos,omitempty"`
}

func (s DescribeDBInstanceIpHostnameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIpHostnameResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIpHostnameResponseBody) SetDBInstanceId(v string) *DescribeDBInstanceIpHostnameResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameResponseBody) SetRequestId(v string) *DescribeDBInstanceIpHostnameResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameResponseBody) SetIpHostnameInfos(v string) *DescribeDBInstanceIpHostnameResponseBody {
	s.IpHostnameInfos = &v
	return s
}

type DescribeDBInstanceIpHostnameResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceIpHostnameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceIpHostnameResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIpHostnameResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIpHostnameResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceIpHostnameResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceIpHostnameResponse) SetBody(v *DescribeDBInstanceIpHostnameResponseBody) *DescribeDBInstanceIpHostnameResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceMonitorRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeDBInstanceMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceMonitorRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceMonitorRequest) SetOwnerId(v int64) *DescribeDBInstanceMonitorRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceMonitorRequest) SetResourceOwnerAccount(v string) *DescribeDBInstanceMonitorRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceMonitorRequest) SetResourceOwnerId(v int64) *DescribeDBInstanceMonitorRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceMonitorRequest) SetClientToken(v string) *DescribeDBInstanceMonitorRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstanceMonitorRequest) SetDBInstanceId(v string) *DescribeDBInstanceMonitorRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceMonitorRequest) SetOwnerAccount(v string) *DescribeDBInstanceMonitorRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeDBInstanceMonitorResponseBody struct {
	Period    *string `json:"Period,omitempty" xml:"Period,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDBInstanceMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceMonitorResponseBody) SetPeriod(v string) *DescribeDBInstanceMonitorResponseBody {
	s.Period = &v
	return s
}

func (s *DescribeDBInstanceMonitorResponseBody) SetRequestId(v string) *DescribeDBInstanceMonitorResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDBInstanceMonitorResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceMonitorResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceMonitorResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceMonitorResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceMonitorResponse) SetBody(v *DescribeDBInstanceMonitorResponseBody) *DescribeDBInstanceMonitorResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceNetInfoRequest struct {
	OwnerId                  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount     *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken              *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId             *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Flag                     *int32  `json:"Flag,omitempty" xml:"Flag,omitempty"`
	DBInstanceNetRWSplitType *string `json:"DBInstanceNetRWSplitType,omitempty" xml:"DBInstanceNetRWSplitType,omitempty"`
	OwnerAccount             *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeDBInstanceNetInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoRequest) SetOwnerId(v int64) *DescribeDBInstanceNetInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetResourceOwnerAccount(v string) *DescribeDBInstanceNetInfoRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetResourceOwnerId(v int64) *DescribeDBInstanceNetInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetClientToken(v string) *DescribeDBInstanceNetInfoRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetDBInstanceId(v string) *DescribeDBInstanceNetInfoRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetFlag(v int32) *DescribeDBInstanceNetInfoRequest {
	s.Flag = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetDBInstanceNetRWSplitType(v string) *DescribeDBInstanceNetInfoRequest {
	s.DBInstanceNetRWSplitType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetOwnerAccount(v string) *DescribeDBInstanceNetInfoRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeDBInstanceNetInfoResponseBody struct {
	SecurityIPMode      *string                                                  `json:"SecurityIPMode,omitempty" xml:"SecurityIPMode,omitempty"`
	RequestId           *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	InstanceNetworkType *string                                                  `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	DBInstanceNetInfos  *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos `json:"DBInstanceNetInfos,omitempty" xml:"DBInstanceNetInfos,omitempty" type:"Struct"`
}

func (s DescribeDBInstanceNetInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBody) SetSecurityIPMode(v string) *DescribeDBInstanceNetInfoResponseBody {
	s.SecurityIPMode = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBody) SetRequestId(v string) *DescribeDBInstanceNetInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBody) SetInstanceNetworkType(v string) *DescribeDBInstanceNetInfoResponseBody {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBody) SetDBInstanceNetInfos(v *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) *DescribeDBInstanceNetInfoResponseBody {
	s.DBInstanceNetInfos = v
	return s
}

type DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos struct {
	DBInstanceNetInfo []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo `json:"DBInstanceNetInfo,omitempty" xml:"DBInstanceNetInfo,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos) SetDBInstanceNetInfo(v []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfos {
	s.DBInstanceNetInfo = v
	return s
}

type DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo struct {
	VSwitchId            *string                                                                                    `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ConnectionStringType *string                                                                                    `json:"ConnectionStringType,omitempty" xml:"ConnectionStringType,omitempty"`
	ConnectionString     *string                                                                                    `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	ExpiredTime          *string                                                                                    `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	Upgradeable          *string                                                                                    `json:"Upgradeable,omitempty" xml:"Upgradeable,omitempty"`
	MaxDelayTime         *string                                                                                    `json:"MaxDelayTime,omitempty" xml:"MaxDelayTime,omitempty"`
	IPType               *string                                                                                    `json:"IPType,omitempty" xml:"IPType,omitempty"`
	Port                 *string                                                                                    `json:"Port,omitempty" xml:"Port,omitempty"`
	VPCId                *string                                                                                    `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	DistributionType     *string                                                                                    `json:"DistributionType,omitempty" xml:"DistributionType,omitempty"`
	IPAddress            *string                                                                                    `json:"IPAddress,omitempty" xml:"IPAddress,omitempty"`
	SecurityIPGroups     *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups  `json:"SecurityIPGroups,omitempty" xml:"SecurityIPGroups,omitempty" type:"Struct"`
	DBInstanceWeights    *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights `json:"DBInstanceWeights,omitempty" xml:"DBInstanceWeights,omitempty" type:"Struct"`
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetVSwitchId(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetConnectionStringType(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.ConnectionStringType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetConnectionString(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetExpiredTime(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetUpgradeable(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.Upgradeable = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetMaxDelayTime(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.MaxDelayTime = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetIPType(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.IPType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetPort(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.Port = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetVPCId(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.VPCId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetDistributionType(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.DistributionType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetIPAddress(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.IPAddress = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetSecurityIPGroups(v *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.SecurityIPGroups = v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo) SetDBInstanceWeights(v *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfo {
	s.DBInstanceWeights = v
	return s
}

type DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups struct {
	SecurityIPGroup []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup `json:"securityIPGroup,omitempty" xml:"securityIPGroup,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups) SetSecurityIPGroup(v []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups {
	s.SecurityIPGroup = v
	return s
}

type DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup struct {
	SecurityIPs         *string `json:"SecurityIPs,omitempty" xml:"SecurityIPs,omitempty"`
	SecurityIPGroupName *string `json:"SecurityIPGroupName,omitempty" xml:"SecurityIPGroupName,omitempty"`
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup) SetSecurityIPs(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup {
	s.SecurityIPs = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup) SetSecurityIPGroupName(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup {
	s.SecurityIPGroupName = &v
	return s
}

type DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights struct {
	DBInstanceWeight []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight `json:"DBInstanceWeight,omitempty" xml:"DBInstanceWeight,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights) SetDBInstanceWeight(v []*DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights {
	s.DBInstanceWeight = v
	return s
}

type DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight struct {
	Availability   *string `json:"Availability,omitempty" xml:"Availability,omitempty"`
	Weight         *string `json:"Weight,omitempty" xml:"Weight,omitempty"`
	DBInstanceId   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Role           *string `json:"Role,omitempty" xml:"Role,omitempty"`
	DBInstanceType *string `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty"`
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) SetAvailability(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight {
	s.Availability = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) SetWeight(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight {
	s.Weight = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) SetDBInstanceId(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) SetRole(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight {
	s.Role = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) SetDBInstanceType(v string) *DescribeDBInstanceNetInfoResponseBodyDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight {
	s.DBInstanceType = &v
	return s
}

type DescribeDBInstanceNetInfoResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceNetInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceNetInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceNetInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceNetInfoResponse) SetBody(v *DescribeDBInstanceNetInfoResponseBody) *DescribeDBInstanceNetInfoResponse {
	s.Body = v
	return s
}

type DescribeDBInstancePerformanceRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Key             *string `json:"Key,omitempty" xml:"Key,omitempty"`
	StartTime       *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
}

func (s DescribeDBInstancePerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceRequest) SetResourceOwnerId(v int64) *DescribeDBInstancePerformanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetDBInstanceId(v string) *DescribeDBInstancePerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetKey(v string) *DescribeDBInstancePerformanceRequest {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetStartTime(v string) *DescribeDBInstancePerformanceRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetEndTime(v string) *DescribeDBInstancePerformanceRequest {
	s.EndTime = &v
	return s
}

type DescribeDBInstancePerformanceResponseBody struct {
	EndTime         *string                                                   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime       *string                                                   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DBInstanceId    *string                                                   `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Engine          *string                                                   `json:"Engine,omitempty" xml:"Engine,omitempty"`
	RequestId       *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PerformanceKeys *DescribeDBInstancePerformanceResponseBodyPerformanceKeys `json:"PerformanceKeys,omitempty" xml:"PerformanceKeys,omitempty" type:"Struct"`
}

func (s DescribeDBInstancePerformanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponseBody) SetEndTime(v string) *DescribeDBInstancePerformanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetStartTime(v string) *DescribeDBInstancePerformanceResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetDBInstanceId(v string) *DescribeDBInstancePerformanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetEngine(v string) *DescribeDBInstancePerformanceResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetRequestId(v string) *DescribeDBInstancePerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBody) SetPerformanceKeys(v *DescribeDBInstancePerformanceResponseBodyPerformanceKeys) *DescribeDBInstancePerformanceResponseBody {
	s.PerformanceKeys = v
	return s
}

type DescribeDBInstancePerformanceResponseBodyPerformanceKeys struct {
	PerformanceKey []*DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey `json:"PerformanceKey,omitempty" xml:"PerformanceKey,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancePerformanceResponseBodyPerformanceKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponseBodyPerformanceKeys) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponseBodyPerformanceKeys) SetPerformanceKey(v []*DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey) *DescribeDBInstancePerformanceResponseBodyPerformanceKeys {
	s.PerformanceKey = v
	return s
}

type DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey struct {
	Key         *string                                                                       `json:"Key,omitempty" xml:"Key,omitempty"`
	ValueFormat *string                                                                       `json:"ValueFormat,omitempty" xml:"ValueFormat,omitempty"`
	Unit        *string                                                                       `json:"Unit,omitempty" xml:"Unit,omitempty"`
	Values      *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Struct"`
}

func (s DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey) SetKey(v string) *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey) SetValueFormat(v string) *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey {
	s.ValueFormat = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey) SetUnit(v string) *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey {
	s.Unit = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey) SetValues(v *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValues) *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKey {
	s.Values = v
	return s
}

type DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValues struct {
	PerformanceValue []*DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue `json:"PerformanceValue,omitempty" xml:"PerformanceValue,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValues) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValues) SetPerformanceValue(v []*DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue) *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValues {
	s.PerformanceValue = v
	return s
}

type DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue struct {
	Date  *string `json:"Date,omitempty" xml:"Date,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue) SetDate(v string) *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue {
	s.Date = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue) SetValue(v string) *DescribeDBInstancePerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue {
	s.Value = &v
	return s
}

type DescribeDBInstancePerformanceResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstancePerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstancePerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponse) SetHeaders(v map[string]*string) *DescribeDBInstancePerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) SetBody(v *DescribeDBInstancePerformanceResponseBody) *DescribeDBInstancePerformanceResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceProxyConfigurationRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstanceProxyConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceProxyConfigurationRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceProxyConfigurationRequest) SetOwnerId(v int64) *DescribeDBInstanceProxyConfigurationRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceProxyConfigurationRequest) SetResourceOwnerAccount(v string) *DescribeDBInstanceProxyConfigurationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceProxyConfigurationRequest) SetResourceOwnerId(v int64) *DescribeDBInstanceProxyConfigurationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceProxyConfigurationRequest) SetDBInstanceId(v string) *DescribeDBInstanceProxyConfigurationRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceProxyConfigurationResponseBody struct {
	PersistentConnectionsConfiguration *string `json:"PersistentConnectionsConfiguration,omitempty" xml:"PersistentConnectionsConfiguration,omitempty"`
	AttacksProtectionConfiguration     *string `json:"AttacksProtectionConfiguration,omitempty" xml:"AttacksProtectionConfiguration,omitempty"`
	RequestId                          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TransparentSwitchConfiguration     *string `json:"TransparentSwitchConfiguration,omitempty" xml:"TransparentSwitchConfiguration,omitempty"`
}

func (s DescribeDBInstanceProxyConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceProxyConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceProxyConfigurationResponseBody) SetPersistentConnectionsConfiguration(v string) *DescribeDBInstanceProxyConfigurationResponseBody {
	s.PersistentConnectionsConfiguration = &v
	return s
}

func (s *DescribeDBInstanceProxyConfigurationResponseBody) SetAttacksProtectionConfiguration(v string) *DescribeDBInstanceProxyConfigurationResponseBody {
	s.AttacksProtectionConfiguration = &v
	return s
}

func (s *DescribeDBInstanceProxyConfigurationResponseBody) SetRequestId(v string) *DescribeDBInstanceProxyConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceProxyConfigurationResponseBody) SetTransparentSwitchConfiguration(v string) *DescribeDBInstanceProxyConfigurationResponseBody {
	s.TransparentSwitchConfiguration = &v
	return s
}

type DescribeDBInstanceProxyConfigurationResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceProxyConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceProxyConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceProxyConfigurationResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceProxyConfigurationResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceProxyConfigurationResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceProxyConfigurationResponse) SetBody(v *DescribeDBInstanceProxyConfigurationResponseBody) *DescribeDBInstanceProxyConfigurationResponse {
	s.Body = v
	return s
}

type DescribeDBInstancesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId              *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	DBInstanceStatus     *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	Expired              *string `json:"Expired,omitempty" xml:"Expired,omitempty"`
	SearchKey            *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBInstanceType       *string `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	InstanceNetworkType  *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	DBInstanceClass      *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	PayType              *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	ConnectionMode       *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	Tags                 *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	InstanceLevel        *int32  `json:"InstanceLevel,omitempty" xml:"InstanceLevel,omitempty"`
	ConnectionString     *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
}

func (s DescribeDBInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesRequest) SetOwnerId(v int64) *DescribeDBInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetResourceOwnerAccount(v string) *DescribeDBInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetResourceOwnerId(v int64) *DescribeDBInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetClientToken(v string) *DescribeDBInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetProxyId(v string) *DescribeDBInstancesRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetEngine(v string) *DescribeDBInstancesRequest {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetZoneId(v string) *DescribeDBInstancesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetResourceGroupId(v string) *DescribeDBInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceStatus(v string) *DescribeDBInstancesRequest {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetExpired(v string) *DescribeDBInstancesRequest {
	s.Expired = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetSearchKey(v string) *DescribeDBInstancesRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceId(v string) *DescribeDBInstancesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceType(v string) *DescribeDBInstancesRequest {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetRegionId(v string) *DescribeDBInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetPageSize(v int32) *DescribeDBInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetPageNumber(v int32) *DescribeDBInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetInstanceNetworkType(v string) *DescribeDBInstancesRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetVpcId(v string) *DescribeDBInstancesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetVSwitchId(v string) *DescribeDBInstancesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceClass(v string) *DescribeDBInstancesRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetEngineVersion(v string) *DescribeDBInstancesRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetPayType(v string) *DescribeDBInstancesRequest {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetConnectionMode(v string) *DescribeDBInstancesRequest {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetTags(v string) *DescribeDBInstancesRequest {
	s.Tags = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetOwnerAccount(v string) *DescribeDBInstancesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDedicatedHostGroupId(v string) *DescribeDBInstancesRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDedicatedHostId(v string) *DescribeDBInstancesRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetInstanceLevel(v int32) *DescribeDBInstancesRequest {
	s.InstanceLevel = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetConnectionString(v string) *DescribeDBInstancesRequest {
	s.ConnectionString = &v
	return s
}

type DescribeDBInstancesResponseBody struct {
	RequestId        *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                                `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeDBInstancesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeDBInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBody) SetRequestId(v string) *DescribeDBInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetPageNumber(v int32) *DescribeDBInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetPageRecordCount(v int32) *DescribeDBInstancesResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetTotalRecordCount(v int32) *DescribeDBInstancesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstancesResponseBody) SetItems(v *DescribeDBInstancesResponseBodyItems) *DescribeDBInstancesResponseBody {
	s.Items = v
	return s
}

type DescribeDBInstancesResponseBodyItems struct {
	DBInstance []*DescribeDBInstancesResponseBodyItemsDBInstance `json:"DBInstance,omitempty" xml:"DBInstance,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItems) SetDBInstance(v []*DescribeDBInstancesResponseBodyItemsDBInstance) *DescribeDBInstancesResponseBodyItems {
	s.DBInstance = v
	return s
}

type DescribeDBInstancesResponseBodyItemsDBInstance struct {
	VpcId                        *string                                                              `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	DedicatedHostIdForLog        *string                                                              `json:"DedicatedHostIdForLog,omitempty" xml:"DedicatedHostIdForLog,omitempty"`
	TempDBInstanceId             *string                                                              `json:"TempDBInstanceId,omitempty" xml:"TempDBInstanceId,omitempty"`
	DBInstanceStorageType        *string                                                              `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	CreateTime                   *string                                                              `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	PayType                      *string                                                              `json:"PayType,omitempty" xml:"PayType,omitempty"`
	DedicatedHostNameForLog      *string                                                              `json:"DedicatedHostNameForLog,omitempty" xml:"DedicatedHostNameForLog,omitempty"`
	MutriORsignle                *bool                                                                `json:"MutriORsignle,omitempty" xml:"MutriORsignle,omitempty"`
	DedicatedHostGroupName       *string                                                              `json:"DedicatedHostGroupName,omitempty" xml:"DedicatedHostGroupName,omitempty"`
	ConnectionMode               *string                                                              `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	LockMode                     *string                                                              `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	EngineVersion                *string                                                              `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	GeneralGroupName             *string                                                              `json:"GeneralGroupName,omitempty" xml:"GeneralGroupName,omitempty"`
	DedicatedHostGroupId         *string                                                              `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	VpcName                      *string                                                              `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	VpcCloudInstanceId           *string                                                              `json:"VpcCloudInstanceId,omitempty" xml:"VpcCloudInstanceId,omitempty"`
	DedicatedHostZoneIdForSlave  *string                                                              `json:"DedicatedHostZoneIdForSlave,omitempty" xml:"DedicatedHostZoneIdForSlave,omitempty"`
	DedicatedHostZoneIdForMaster *string                                                              `json:"DedicatedHostZoneIdForMaster,omitempty" xml:"DedicatedHostZoneIdForMaster,omitempty"`
	ConnectionString             *string                                                              `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	Tips                         *string                                                              `json:"Tips,omitempty" xml:"Tips,omitempty"`
	InstanceNetworkType          *string                                                              `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	DedicatedHostZoneIdForLog    *string                                                              `json:"DedicatedHostZoneIdForLog,omitempty" xml:"DedicatedHostZoneIdForLog,omitempty"`
	MasterInstanceId             *string                                                              `json:"MasterInstanceId,omitempty" xml:"MasterInstanceId,omitempty"`
	DedicatedHostNameForSlave    *string                                                              `json:"DedicatedHostNameForSlave,omitempty" xml:"DedicatedHostNameForSlave,omitempty"`
	DBInstanceDescription        *string                                                              `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	AutoUpgradeMinorVersion      *string                                                              `json:"AutoUpgradeMinorVersion,omitempty" xml:"AutoUpgradeMinorVersion,omitempty"`
	DBInstanceNetType            *string                                                              `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty"`
	ExpireTime                   *string                                                              `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	DBInstanceType               *string                                                              `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty"`
	DestroyTime                  *string                                                              `json:"DestroyTime,omitempty" xml:"DestroyTime,omitempty"`
	LockReason                   *string                                                              `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	DBInstanceStatus             *string                                                              `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	DedicatedHostNameForMaster   *string                                                              `json:"DedicatedHostNameForMaster,omitempty" xml:"DedicatedHostNameForMaster,omitempty"`
	GuardDBInstanceId            *string                                                              `json:"GuardDBInstanceId,omitempty" xml:"GuardDBInstanceId,omitempty"`
	RegionId                     *string                                                              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VSwitchId                    *string                                                              `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	DedicatedHostIdForSlave      *string                                                              `json:"DedicatedHostIdForSlave,omitempty" xml:"DedicatedHostIdForSlave,omitempty"`
	ResourceGroupId              *string                                                              `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	TipsLevel                    *int32                                                               `json:"TipsLevel,omitempty" xml:"TipsLevel,omitempty"`
	ZoneId                       *string                                                              `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	Category                     *string                                                              `json:"Category,omitempty" xml:"Category,omitempty"`
	DBInstanceId                 *string                                                              `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DedicatedHostIdForMaster     *string                                                              `json:"DedicatedHostIdForMaster,omitempty" xml:"DedicatedHostIdForMaster,omitempty"`
	DBInstanceClass              *string                                                              `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	Engine                       *string                                                              `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ReadOnlyDBInstanceIds        *DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIds `json:"ReadOnlyDBInstanceIds,omitempty" xml:"ReadOnlyDBInstanceIds,omitempty" type:"Struct"`
}

func (s DescribeDBInstancesResponseBodyItemsDBInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItemsDBInstance) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetVpcId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostIdForLog(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostIdForLog = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetTempDBInstanceId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.TempDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceStorageType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetCreateTime(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.CreateTime = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetPayType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostNameForLog(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostNameForLog = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetMutriORsignle(v bool) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.MutriORsignle = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostGroupName(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostGroupName = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetConnectionMode(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetLockMode(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetEngineVersion(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetGeneralGroupName(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.GeneralGroupName = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostGroupId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetVpcName(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.VpcName = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetVpcCloudInstanceId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.VpcCloudInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostZoneIdForSlave(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostZoneIdForSlave = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostZoneIdForMaster(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostZoneIdForMaster = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetConnectionString(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetTips(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.Tips = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetInstanceNetworkType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostZoneIdForLog(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostZoneIdForLog = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetMasterInstanceId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostNameForSlave(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostNameForSlave = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceDescription(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetAutoUpgradeMinorVersion(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.AutoUpgradeMinorVersion = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceNetType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetExpireTime(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceType(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDestroyTime(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DestroyTime = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetLockReason(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceStatus(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostNameForMaster(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostNameForMaster = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetGuardDBInstanceId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.GuardDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetRegionId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetVSwitchId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostIdForSlave(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostIdForSlave = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetResourceGroupId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetTipsLevel(v int32) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.TipsLevel = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetZoneId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetCategory(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.Category = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceId(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDedicatedHostIdForMaster(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DedicatedHostIdForMaster = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetDBInstanceClass(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetEngine(v string) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstance) SetReadOnlyDBInstanceIds(v *DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIds) *DescribeDBInstancesResponseBodyItemsDBInstance {
	s.ReadOnlyDBInstanceIds = v
	return s
}

type DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIds struct {
	ReadOnlyDBInstanceId []*DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId `json:"ReadOnlyDBInstanceId,omitempty" xml:"ReadOnlyDBInstanceId,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIds) SetReadOnlyDBInstanceId(v []*DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) *DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIds {
	s.ReadOnlyDBInstanceId = v
	return s
}

type DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) SetDBInstanceId(v string) *DescribeDBInstancesResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstancesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponse) SetHeaders(v map[string]*string) *DescribeDBInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancesResponse) SetBody(v *DescribeDBInstancesResponseBody) *DescribeDBInstancesResponse {
	s.Body = v
	return s
}

type DescribeDBInstancesAsCsvRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstancesAsCsvRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesAsCsvRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesAsCsvRequest) SetOwnerId(v int64) *DescribeDBInstancesAsCsvRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvRequest) SetResourceOwnerAccount(v string) *DescribeDBInstancesAsCsvRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstancesAsCsvRequest) SetResourceOwnerId(v int64) *DescribeDBInstancesAsCsvRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvRequest) SetRegionId(v string) *DescribeDBInstancesAsCsvRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvRequest) SetDBInstanceId(v string) *DescribeDBInstancesAsCsvRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstancesAsCsvResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Items     *DescribeDBInstancesAsCsvResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeDBInstancesAsCsvResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesAsCsvResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesAsCsvResponseBody) SetRequestId(v string) *DescribeDBInstancesAsCsvResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBody) SetItems(v *DescribeDBInstancesAsCsvResponseBodyItems) *DescribeDBInstancesAsCsvResponseBody {
	s.Items = v
	return s
}

type DescribeDBInstancesAsCsvResponseBodyItems struct {
	DBInstanceAttribute []*DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute `json:"DBInstanceAttribute,omitempty" xml:"DBInstanceAttribute,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesAsCsvResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesAsCsvResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesAsCsvResponseBodyItems) SetDBInstanceAttribute(v []*DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) *DescribeDBInstancesAsCsvResponseBodyItems {
	s.DBInstanceAttribute = v
	return s
}

type DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute struct {
	VpcId                       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	CreationTime                *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	TempDBInstanceId            *string `json:"TempDBInstanceId,omitempty" xml:"TempDBInstanceId,omitempty"`
	SupportUpgradeAccountType   *string `json:"SupportUpgradeAccountType,omitempty" xml:"SupportUpgradeAccountType,omitempty"`
	IncrementSourceDBInstanceId *string `json:"IncrementSourceDBInstanceId,omitempty" xml:"IncrementSourceDBInstanceId,omitempty"`
	DBInstanceMemory            *int64  `json:"DBInstanceMemory,omitempty" xml:"DBInstanceMemory,omitempty"`
	MaintainTime                *string `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty"`
	PayType                     *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	Tags                        *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	AvailabilityValue           *string `json:"AvailabilityValue,omitempty" xml:"AvailabilityValue,omitempty"`
	ReadDelayTime               *string `json:"ReadDelayTime,omitempty" xml:"ReadDelayTime,omitempty"`
	ConnectionMode              *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	Port                        *string `json:"Port,omitempty" xml:"Port,omitempty"`
	AccountType                 *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	LockMode                    *string `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	EngineVersion               *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	MaxIOPS                     *int32  `json:"MaxIOPS,omitempty" xml:"MaxIOPS,omitempty"`
	ConnectionString            *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	InstanceNetworkType         *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	SecurityIPList              *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty"`
	MasterInstanceId            *string `json:"MasterInstanceId,omitempty" xml:"MasterInstanceId,omitempty"`
	DBInstanceClassType         *string `json:"DBInstanceClassType,omitempty" xml:"DBInstanceClassType,omitempty"`
	DBInstanceDescription       *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	DBInstanceCPU               *string `json:"DBInstanceCPU,omitempty" xml:"DBInstanceCPU,omitempty"`
	ExpireTime                  *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	DBInstanceNetType           *string `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty"`
	DBInstanceType              *string `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty"`
	AccountMaxQuantity          *int32  `json:"AccountMaxQuantity,omitempty" xml:"AccountMaxQuantity,omitempty"`
	LockReason                  *string `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	DBInstanceStatus            *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	DBMaxQuantity               *int32  `json:"DBMaxQuantity,omitempty" xml:"DBMaxQuantity,omitempty"`
	GuardDBInstanceId           *string `json:"GuardDBInstanceId,omitempty" xml:"GuardDBInstanceId,omitempty"`
	RegionId                    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceStorage           *int32  `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	VSwitchId                   *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId                      *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	Category                    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	MaxConnections              *int32  `json:"MaxConnections,omitempty" xml:"MaxConnections,omitempty"`
	DBInstanceId                *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBInstanceClass             *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	Engine                      *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
}

func (s DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetVpcId(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetCreationTime(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.CreationTime = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetTempDBInstanceId(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.TempDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetSupportUpgradeAccountType(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.SupportUpgradeAccountType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetIncrementSourceDBInstanceId(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.IncrementSourceDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBInstanceMemory(v int64) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceMemory = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetMaintainTime(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.MaintainTime = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetPayType(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetTags(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.Tags = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetAvailabilityValue(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.AvailabilityValue = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetReadDelayTime(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.ReadDelayTime = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetConnectionMode(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetPort(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.Port = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetAccountType(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.AccountType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetLockMode(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetEngineVersion(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetMaxIOPS(v int32) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.MaxIOPS = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetConnectionString(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetInstanceNetworkType(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetSecurityIPList(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.SecurityIPList = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetMasterInstanceId(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBInstanceClassType(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceClassType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBInstanceDescription(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBInstanceCPU(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceCPU = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetExpireTime(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBInstanceNetType(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBInstanceType(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetAccountMaxQuantity(v int32) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.AccountMaxQuantity = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetLockReason(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBInstanceStatus(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBMaxQuantity(v int32) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBMaxQuantity = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetGuardDBInstanceId(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.GuardDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetRegionId(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBInstanceStorage(v int32) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceStorage = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetVSwitchId(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetZoneId(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetCategory(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.Category = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetMaxConnections(v int32) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.MaxConnections = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBInstanceId(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetDBInstanceClass(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute) SetEngine(v string) *DescribeDBInstancesAsCsvResponseBodyItemsDBInstanceAttribute {
	s.Engine = &v
	return s
}

type DescribeDBInstancesAsCsvResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstancesAsCsvResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstancesAsCsvResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesAsCsvResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesAsCsvResponse) SetHeaders(v map[string]*string) *DescribeDBInstancesAsCsvResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancesAsCsvResponse) SetBody(v *DescribeDBInstancesAsCsvResponseBody) *DescribeDBInstancesAsCsvResponse {
	s.Body = v
	return s
}

type DescribeDBInstancesByExpireTimeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProxyId              *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	ExpirePeriod         *int32  `json:"ExpirePeriod,omitempty" xml:"ExpirePeriod,omitempty"`
	Expired              *bool   `json:"Expired,omitempty" xml:"Expired,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Tags                 *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeDBInstancesByExpireTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByExpireTimeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetOwnerId(v int64) *DescribeDBInstancesByExpireTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetResourceOwnerAccount(v string) *DescribeDBInstancesByExpireTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetResourceOwnerId(v int64) *DescribeDBInstancesByExpireTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetRegionId(v string) *DescribeDBInstancesByExpireTimeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetProxyId(v string) *DescribeDBInstancesByExpireTimeRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetExpirePeriod(v int32) *DescribeDBInstancesByExpireTimeRequest {
	s.ExpirePeriod = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetExpired(v bool) *DescribeDBInstancesByExpireTimeRequest {
	s.Expired = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetPageSize(v int32) *DescribeDBInstancesByExpireTimeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetPageNumber(v int32) *DescribeDBInstancesByExpireTimeRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetTags(v string) *DescribeDBInstancesByExpireTimeRequest {
	s.Tags = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetOwnerAccount(v string) *DescribeDBInstancesByExpireTimeRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeDBInstancesByExpireTimeResponseBody struct {
	RequestId        *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                                            `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                            `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeDBInstancesByExpireTimeResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeDBInstancesByExpireTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByExpireTimeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByExpireTimeResponseBody) SetRequestId(v string) *DescribeDBInstancesByExpireTimeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseBody) SetPageNumber(v int32) *DescribeDBInstancesByExpireTimeResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseBody) SetPageRecordCount(v int32) *DescribeDBInstancesByExpireTimeResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseBody) SetTotalRecordCount(v int32) *DescribeDBInstancesByExpireTimeResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseBody) SetItems(v *DescribeDBInstancesByExpireTimeResponseBodyItems) *DescribeDBInstancesByExpireTimeResponseBody {
	s.Items = v
	return s
}

type DescribeDBInstancesByExpireTimeResponseBodyItems struct {
	DBInstanceExpireTime []*DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime `json:"DBInstanceExpireTime,omitempty" xml:"DBInstanceExpireTime,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesByExpireTimeResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByExpireTimeResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByExpireTimeResponseBodyItems) SetDBInstanceExpireTime(v []*DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime) *DescribeDBInstancesByExpireTimeResponseBodyItems {
	s.DBInstanceExpireTime = v
	return s
}

type DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime struct {
	ExpireTime            *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBInstanceStatus      *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	LockMode              *string `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
}

func (s DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime) SetExpireTime(v string) *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime) SetPayType(v string) *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime) SetDBInstanceId(v string) *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime) SetDBInstanceStatus(v string) *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime) SetDBInstanceDescription(v string) *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime) SetLockMode(v string) *DescribeDBInstancesByExpireTimeResponseBodyItemsDBInstanceExpireTime {
	s.LockMode = &v
	return s
}

type DescribeDBInstancesByExpireTimeResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstancesByExpireTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstancesByExpireTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByExpireTimeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByExpireTimeResponse) SetHeaders(v map[string]*string) *DescribeDBInstancesByExpireTimeResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponse) SetBody(v *DescribeDBInstancesByExpireTimeResponseBody) *DescribeDBInstancesByExpireTimeResponse {
	s.Body = v
	return s
}

type DescribeDBInstancesByPerformanceRequest struct {
	Tag                  []*DescribeDBInstancesByPerformanceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	OwnerId              *int64                                        `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                                       `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                                        `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string                                       `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId              *string                                       `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	DBInstanceId         *string                                       `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	PageSize             *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	SortMethod           *string                                       `json:"SortMethod,omitempty" xml:"SortMethod,omitempty"`
	SortKey              *string                                       `json:"SortKey,omitempty" xml:"SortKey,omitempty"`
	Tags                 *string                                       `json:"Tags,omitempty" xml:"Tags,omitempty"`
	OwnerAccount         *string                                       `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	RegionId             *string                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDBInstancesByPerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceRequest) SetTag(v []*DescribeDBInstancesByPerformanceRequestTag) *DescribeDBInstancesByPerformanceRequest {
	s.Tag = v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetOwnerId(v int64) *DescribeDBInstancesByPerformanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetResourceOwnerAccount(v string) *DescribeDBInstancesByPerformanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetResourceOwnerId(v int64) *DescribeDBInstancesByPerformanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetClientToken(v string) *DescribeDBInstancesByPerformanceRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetProxyId(v string) *DescribeDBInstancesByPerformanceRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetDBInstanceId(v string) *DescribeDBInstancesByPerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetPageSize(v int32) *DescribeDBInstancesByPerformanceRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetPageNumber(v int32) *DescribeDBInstancesByPerformanceRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetSortMethod(v string) *DescribeDBInstancesByPerformanceRequest {
	s.SortMethod = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetSortKey(v string) *DescribeDBInstancesByPerformanceRequest {
	s.SortKey = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetTags(v string) *DescribeDBInstancesByPerformanceRequest {
	s.Tags = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetOwnerAccount(v string) *DescribeDBInstancesByPerformanceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetRegionId(v string) *DescribeDBInstancesByPerformanceRequest {
	s.RegionId = &v
	return s
}

type DescribeDBInstancesByPerformanceRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeDBInstancesByPerformanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceRequestTag) SetKey(v string) *DescribeDBInstancesByPerformanceRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequestTag) SetValue(v string) *DescribeDBInstancesByPerformanceRequestTag {
	s.Value = &v
	return s
}

type DescribeDBInstancesByPerformanceResponseBody struct {
	RequestId        *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                                             `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                             `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeDBInstancesByPerformanceResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeDBInstancesByPerformanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceResponseBody) SetRequestId(v string) *DescribeDBInstancesByPerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseBody) SetPageNumber(v int32) *DescribeDBInstancesByPerformanceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseBody) SetPageRecordCount(v int32) *DescribeDBInstancesByPerformanceResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseBody) SetTotalRecordCount(v int32) *DescribeDBInstancesByPerformanceResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseBody) SetItems(v *DescribeDBInstancesByPerformanceResponseBodyItems) *DescribeDBInstancesByPerformanceResponseBody {
	s.Items = v
	return s
}

type DescribeDBInstancesByPerformanceResponseBodyItems struct {
	DBInstancePerformance []*DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance `json:"DBInstancePerformance,omitempty" xml:"DBInstancePerformance,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesByPerformanceResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceResponseBodyItems) SetDBInstancePerformance(v []*DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance) *DescribeDBInstancesByPerformanceResponseBodyItems {
	s.DBInstancePerformance = v
	return s
}

type DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance struct {
	CPUUsage              *string `json:"CPUUsage,omitempty" xml:"CPUUsage,omitempty"`
	SessionUsage          *string `json:"SessionUsage,omitempty" xml:"SessionUsage,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	IOPSUsage             *string `json:"IOPSUsage,omitempty" xml:"IOPSUsage,omitempty"`
	DiskUsage             *string `json:"DiskUsage,omitempty" xml:"DiskUsage,omitempty"`
}

func (s DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance) SetCPUUsage(v string) *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance {
	s.CPUUsage = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance) SetSessionUsage(v string) *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance {
	s.SessionUsage = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance) SetDBInstanceId(v string) *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance) SetDBInstanceDescription(v string) *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance) SetIOPSUsage(v string) *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance {
	s.IOPSUsage = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance) SetDiskUsage(v string) *DescribeDBInstancesByPerformanceResponseBodyItemsDBInstancePerformance {
	s.DiskUsage = &v
	return s
}

type DescribeDBInstancesByPerformanceResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstancesByPerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstancesByPerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceResponse) SetHeaders(v map[string]*string) *DescribeDBInstancesByPerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponse) SetBody(v *DescribeDBInstancesByPerformanceResponseBody) *DescribeDBInstancesByPerformanceResponse {
	s.Body = v
	return s
}

type DescribeDBInstancesForCloneRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId              *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DBInstanceStatus     *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	Expired              *string `json:"Expired,omitempty" xml:"Expired,omitempty"`
	SearchKey            *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBInstanceType       *string `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	InstanceNetworkType  *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	DBInstanceClass      *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	NodeType             *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	PayType              *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	ConnectionMode       *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	CurrentInstanceId    *string `json:"CurrentInstanceId,omitempty" xml:"CurrentInstanceId,omitempty"`
}

func (s DescribeDBInstancesForCloneRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneRequest) SetOwnerId(v int64) *DescribeDBInstancesForCloneRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetResourceOwnerAccount(v string) *DescribeDBInstancesForCloneRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetResourceOwnerId(v int64) *DescribeDBInstancesForCloneRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetClientToken(v string) *DescribeDBInstancesForCloneRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetProxyId(v string) *DescribeDBInstancesForCloneRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetEngine(v string) *DescribeDBInstancesForCloneRequest {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetZoneId(v string) *DescribeDBInstancesForCloneRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetDBInstanceStatus(v string) *DescribeDBInstancesForCloneRequest {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetExpired(v string) *DescribeDBInstancesForCloneRequest {
	s.Expired = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetSearchKey(v string) *DescribeDBInstancesForCloneRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetDBInstanceId(v string) *DescribeDBInstancesForCloneRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetDBInstanceType(v string) *DescribeDBInstancesForCloneRequest {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetRegionId(v string) *DescribeDBInstancesForCloneRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetPageSize(v int32) *DescribeDBInstancesForCloneRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetPageNumber(v int32) *DescribeDBInstancesForCloneRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetInstanceNetworkType(v string) *DescribeDBInstancesForCloneRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetVpcId(v string) *DescribeDBInstancesForCloneRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetVSwitchId(v string) *DescribeDBInstancesForCloneRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetDBInstanceClass(v string) *DescribeDBInstancesForCloneRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetEngineVersion(v string) *DescribeDBInstancesForCloneRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetNodeType(v string) *DescribeDBInstancesForCloneRequest {
	s.NodeType = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetPayType(v string) *DescribeDBInstancesForCloneRequest {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetConnectionMode(v string) *DescribeDBInstancesForCloneRequest {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetOwnerAccount(v string) *DescribeDBInstancesForCloneRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetCurrentInstanceId(v string) *DescribeDBInstancesForCloneRequest {
	s.CurrentInstanceId = &v
	return s
}

type DescribeDBInstancesForCloneResponseBody struct {
	RequestId        *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                                        `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                        `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeDBInstancesForCloneResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeDBInstancesForCloneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponseBody) SetRequestId(v string) *DescribeDBInstancesForCloneResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBody) SetPageNumber(v int32) *DescribeDBInstancesForCloneResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBody) SetPageRecordCount(v int32) *DescribeDBInstancesForCloneResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBody) SetTotalRecordCount(v int32) *DescribeDBInstancesForCloneResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBody) SetItems(v *DescribeDBInstancesForCloneResponseBodyItems) *DescribeDBInstancesForCloneResponseBody {
	s.Items = v
	return s
}

type DescribeDBInstancesForCloneResponseBodyItems struct {
	DBInstance []*DescribeDBInstancesForCloneResponseBodyItemsDBInstance `json:"DBInstance,omitempty" xml:"DBInstance,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesForCloneResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponseBodyItems) SetDBInstance(v []*DescribeDBInstancesForCloneResponseBodyItemsDBInstance) *DescribeDBInstancesForCloneResponseBodyItems {
	s.DBInstance = v
	return s
}

type DescribeDBInstancesForCloneResponseBodyItemsDBInstance struct {
	VpcId                 *string                                                                      `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ReplicateId           *string                                                                      `json:"ReplicateId,omitempty" xml:"ReplicateId,omitempty"`
	TempDBInstanceId      *string                                                                      `json:"TempDBInstanceId,omitempty" xml:"TempDBInstanceId,omitempty"`
	DBInstanceStorageType *string                                                                      `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	CreateTime            *string                                                                      `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	PayType               *string                                                                      `json:"PayType,omitempty" xml:"PayType,omitempty"`
	MutriORsignle         *bool                                                                        `json:"MutriORsignle,omitempty" xml:"MutriORsignle,omitempty"`
	ConnectionMode        *string                                                                      `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	LockMode              *string                                                                      `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	EngineVersion         *string                                                                      `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	VpcCloudInstanceId    *string                                                                      `json:"VpcCloudInstanceId,omitempty" xml:"VpcCloudInstanceId,omitempty"`
	InsId                 *int32                                                                       `json:"InsId,omitempty" xml:"InsId,omitempty"`
	InstanceNetworkType   *string                                                                      `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	MasterInstanceId      *string                                                                      `json:"MasterInstanceId,omitempty" xml:"MasterInstanceId,omitempty"`
	DBInstanceDescription *string                                                                      `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	ExpireTime            *string                                                                      `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	DBInstanceNetType     *string                                                                      `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty"`
	DBInstanceType        *string                                                                      `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty"`
	DestroyTime           *string                                                                      `json:"DestroyTime,omitempty" xml:"DestroyTime,omitempty"`
	LockReason            *string                                                                      `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	DBInstanceStatus      *string                                                                      `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	GuardDBInstanceId     *string                                                                      `json:"GuardDBInstanceId,omitempty" xml:"GuardDBInstanceId,omitempty"`
	RegionId              *string                                                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VSwitchId             *string                                                                      `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ResourceGroupId       *string                                                                      `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId                *string                                                                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DBInstanceId          *string                                                                      `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Category              *string                                                                      `json:"Category,omitempty" xml:"Category,omitempty"`
	Engine                *string                                                                      `json:"Engine,omitempty" xml:"Engine,omitempty"`
	DBInstanceClass       *string                                                                      `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	ReadOnlyDBInstanceIds *DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIds `json:"ReadOnlyDBInstanceIds,omitempty" xml:"ReadOnlyDBInstanceIds,omitempty" type:"Struct"`
}

func (s DescribeDBInstancesForCloneResponseBodyItemsDBInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponseBodyItemsDBInstance) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetVpcId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetReplicateId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.ReplicateId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetTempDBInstanceId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.TempDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetDBInstanceStorageType(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetCreateTime(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.CreateTime = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetPayType(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetMutriORsignle(v bool) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.MutriORsignle = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetConnectionMode(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetLockMode(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetEngineVersion(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetVpcCloudInstanceId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.VpcCloudInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetInsId(v int32) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.InsId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetInstanceNetworkType(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetMasterInstanceId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetDBInstanceDescription(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetExpireTime(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetDBInstanceNetType(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetDBInstanceType(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetDestroyTime(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.DestroyTime = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetLockReason(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetDBInstanceStatus(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetGuardDBInstanceId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.GuardDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetRegionId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetVSwitchId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetResourceGroupId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetZoneId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetDBInstanceId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetCategory(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.Category = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetEngine(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetDBInstanceClass(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstance) SetReadOnlyDBInstanceIds(v *DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIds) *DescribeDBInstancesForCloneResponseBodyItemsDBInstance {
	s.ReadOnlyDBInstanceIds = v
	return s
}

type DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIds struct {
	ReadOnlyDBInstanceId []*DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId `json:"ReadOnlyDBInstanceId,omitempty" xml:"ReadOnlyDBInstanceId,omitempty" type:"Repeated"`
}

func (s DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIds) SetReadOnlyDBInstanceId(v []*DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) *DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIds {
	s.ReadOnlyDBInstanceId = v
	return s
}

type DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) SetDBInstanceId(v string) *DescribeDBInstancesForCloneResponseBodyItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstancesForCloneResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstancesForCloneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstancesForCloneResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponse) SetHeaders(v map[string]*string) *DescribeDBInstancesForCloneResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstancesForCloneResponse) SetBody(v *DescribeDBInstancesForCloneResponseBody) *DescribeDBInstancesForCloneResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceSSLRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeDBInstanceSSLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSSLRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLRequest) SetOwnerId(v int64) *DescribeDBInstanceSSLRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceSSLRequest) SetResourceOwnerAccount(v string) *DescribeDBInstanceSSLRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceSSLRequest) SetResourceOwnerId(v int64) *DescribeDBInstanceSSLRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceSSLRequest) SetDBInstanceId(v string) *DescribeDBInstanceSSLRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceSSLRequest) SetOwnerAccount(v string) *DescribeDBInstanceSSLRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeDBInstanceSSLResponseBody struct {
	ServerCert               *string `json:"ServerCert,omitempty" xml:"ServerCert,omitempty"`
	ClientCACertExpireTime   *string `json:"ClientCACertExpireTime,omitempty" xml:"ClientCACertExpireTime,omitempty"`
	RequireUpdateItem        *string `json:"RequireUpdateItem,omitempty" xml:"RequireUpdateItem,omitempty"`
	ServerCAUrl              *string `json:"ServerCAUrl,omitempty" xml:"ServerCAUrl,omitempty"`
	RequireUpdate            *string `json:"RequireUpdate,omitempty" xml:"RequireUpdate,omitempty"`
	ClientCertRevocationList *string `json:"ClientCertRevocationList,omitempty" xml:"ClientCertRevocationList,omitempty"`
	SSLExpireTime            *string `json:"SSLExpireTime,omitempty" xml:"SSLExpireTime,omitempty"`
	CAType                   *string `json:"CAType,omitempty" xml:"CAType,omitempty"`
	SSLCreateTime            *string `json:"SSLCreateTime,omitempty" xml:"SSLCreateTime,omitempty"`
	ReplicationACL           *string `json:"ReplicationACL,omitempty" xml:"ReplicationACL,omitempty"`
	ACL                      *string `json:"ACL,omitempty" xml:"ACL,omitempty"`
	RequestId                *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LastModifyStatus         *string `json:"LastModifyStatus,omitempty" xml:"LastModifyStatus,omitempty"`
	SSLEnabled               *string `json:"SSLEnabled,omitempty" xml:"SSLEnabled,omitempty"`
	ConnectionString         *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	RequireUpdateReason      *string `json:"RequireUpdateReason,omitempty" xml:"RequireUpdateReason,omitempty"`
	ClientCACert             *string `json:"ClientCACert,omitempty" xml:"ClientCACert,omitempty"`
	ServerKey                *string `json:"ServerKey,omitempty" xml:"ServerKey,omitempty"`
	ModifyStatusReason       *string `json:"ModifyStatusReason,omitempty" xml:"ModifyStatusReason,omitempty"`
}

func (s DescribeDBInstanceSSLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSSLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLResponseBody) SetServerCert(v string) *DescribeDBInstanceSSLResponseBody {
	s.ServerCert = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetClientCACertExpireTime(v string) *DescribeDBInstanceSSLResponseBody {
	s.ClientCACertExpireTime = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetRequireUpdateItem(v string) *DescribeDBInstanceSSLResponseBody {
	s.RequireUpdateItem = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetServerCAUrl(v string) *DescribeDBInstanceSSLResponseBody {
	s.ServerCAUrl = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetRequireUpdate(v string) *DescribeDBInstanceSSLResponseBody {
	s.RequireUpdate = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetClientCertRevocationList(v string) *DescribeDBInstanceSSLResponseBody {
	s.ClientCertRevocationList = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetSSLExpireTime(v string) *DescribeDBInstanceSSLResponseBody {
	s.SSLExpireTime = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetCAType(v string) *DescribeDBInstanceSSLResponseBody {
	s.CAType = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetSSLCreateTime(v string) *DescribeDBInstanceSSLResponseBody {
	s.SSLCreateTime = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetReplicationACL(v string) *DescribeDBInstanceSSLResponseBody {
	s.ReplicationACL = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetACL(v string) *DescribeDBInstanceSSLResponseBody {
	s.ACL = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetRequestId(v string) *DescribeDBInstanceSSLResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetLastModifyStatus(v string) *DescribeDBInstanceSSLResponseBody {
	s.LastModifyStatus = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetSSLEnabled(v string) *DescribeDBInstanceSSLResponseBody {
	s.SSLEnabled = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetConnectionString(v string) *DescribeDBInstanceSSLResponseBody {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetRequireUpdateReason(v string) *DescribeDBInstanceSSLResponseBody {
	s.RequireUpdateReason = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetClientCACert(v string) *DescribeDBInstanceSSLResponseBody {
	s.ClientCACert = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetServerKey(v string) *DescribeDBInstanceSSLResponseBody {
	s.ServerKey = &v
	return s
}

func (s *DescribeDBInstanceSSLResponseBody) SetModifyStatusReason(v string) *DescribeDBInstanceSSLResponseBody {
	s.ModifyStatusReason = &v
	return s
}

type DescribeDBInstanceSSLResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceSSLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceSSLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSSLResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceSSLResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceSSLResponse) SetBody(v *DescribeDBInstanceSSLResponseBody) *DescribeDBInstanceSSLResponse {
	s.Body = v
	return s
}

type DescribeDBInstanceTDERequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeDBInstanceTDERequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceTDERequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceTDERequest) SetOwnerId(v int64) *DescribeDBInstanceTDERequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBInstanceTDERequest) SetResourceOwnerAccount(v string) *DescribeDBInstanceTDERequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBInstanceTDERequest) SetResourceOwnerId(v int64) *DescribeDBInstanceTDERequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBInstanceTDERequest) SetDBInstanceId(v string) *DescribeDBInstanceTDERequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceTDERequest) SetOwnerAccount(v string) *DescribeDBInstanceTDERequest {
	s.OwnerAccount = &v
	return s
}

type DescribeDBInstanceTDEResponseBody struct {
	TDEStatus *string                                     `json:"TDEStatus,omitempty" xml:"TDEStatus,omitempty"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Databases *DescribeDBInstanceTDEResponseBodyDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" type:"Struct"`
}

func (s DescribeDBInstanceTDEResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceTDEResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceTDEResponseBody) SetTDEStatus(v string) *DescribeDBInstanceTDEResponseBody {
	s.TDEStatus = &v
	return s
}

func (s *DescribeDBInstanceTDEResponseBody) SetRequestId(v string) *DescribeDBInstanceTDEResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceTDEResponseBody) SetDatabases(v *DescribeDBInstanceTDEResponseBodyDatabases) *DescribeDBInstanceTDEResponseBody {
	s.Databases = v
	return s
}

type DescribeDBInstanceTDEResponseBodyDatabases struct {
	Database []*DescribeDBInstanceTDEResponseBodyDatabasesDatabase `json:"Database,omitempty" xml:"Database,omitempty" type:"Repeated"`
}

func (s DescribeDBInstanceTDEResponseBodyDatabases) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceTDEResponseBodyDatabases) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceTDEResponseBodyDatabases) SetDatabase(v []*DescribeDBInstanceTDEResponseBodyDatabasesDatabase) *DescribeDBInstanceTDEResponseBodyDatabases {
	s.Database = v
	return s
}

type DescribeDBInstanceTDEResponseBodyDatabasesDatabase struct {
	DBName    *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	TDEStatus *string `json:"TDEStatus,omitempty" xml:"TDEStatus,omitempty"`
}

func (s DescribeDBInstanceTDEResponseBodyDatabasesDatabase) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceTDEResponseBodyDatabasesDatabase) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceTDEResponseBodyDatabasesDatabase) SetDBName(v string) *DescribeDBInstanceTDEResponseBodyDatabasesDatabase {
	s.DBName = &v
	return s
}

func (s *DescribeDBInstanceTDEResponseBodyDatabasesDatabase) SetTDEStatus(v string) *DescribeDBInstanceTDEResponseBodyDatabasesDatabase {
	s.TDEStatus = &v
	return s
}

type DescribeDBInstanceTDEResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBInstanceTDEResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBInstanceTDEResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceTDEResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceTDEResponse) SetHeaders(v map[string]*string) *DescribeDBInstanceTDEResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBInstanceTDEResponse) SetBody(v *DescribeDBInstanceTDEResponseBody) *DescribeDBInstanceTDEResponse {
	s.Body = v
	return s
}

type DescribeDBProxyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDBProxyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyRequest) SetOwnerId(v int64) *DescribeDBProxyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBProxyRequest) SetResourceOwnerAccount(v string) *DescribeDBProxyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBProxyRequest) SetResourceOwnerId(v int64) *DescribeDBProxyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBProxyRequest) SetDBInstanceId(v string) *DescribeDBProxyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBProxyRequest) SetRegionId(v string) *DescribeDBProxyRequest {
	s.RegionId = &v
	return s
}

type DescribeDBProxyResponseBody struct {
	DBProxyInstanceLatestMinorVersion  *string                                               `json:"DBProxyInstanceLatestMinorVersion,omitempty" xml:"DBProxyInstanceLatestMinorVersion,omitempty"`
	RequestId                          *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DBProxyInstanceCurrentMinorVersion *string                                               `json:"DBProxyInstanceCurrentMinorVersion,omitempty" xml:"DBProxyInstanceCurrentMinorVersion,omitempty"`
	DBProxyInstanceNum                 *int32                                                `json:"DBProxyInstanceNum,omitempty" xml:"DBProxyInstanceNum,omitempty"`
	DBProxyInstanceType                *string                                               `json:"DBProxyInstanceType,omitempty" xml:"DBProxyInstanceType,omitempty"`
	DBProxyInstanceStatus              *string                                               `json:"DBProxyInstanceStatus,omitempty" xml:"DBProxyInstanceStatus,omitempty"`
	DBProxyServiceStatus               *string                                               `json:"DBProxyServiceStatus,omitempty" xml:"DBProxyServiceStatus,omitempty"`
	DBProxyInstanceName                *string                                               `json:"DBProxyInstanceName,omitempty" xml:"DBProxyInstanceName,omitempty"`
	DBProxyConnectStringItems          *DescribeDBProxyResponseBodyDBProxyConnectStringItems `json:"DBProxyConnectStringItems,omitempty" xml:"DBProxyConnectStringItems,omitempty" type:"Struct"`
	DbProxyEndpointItems               *DescribeDBProxyResponseBodyDbProxyEndpointItems      `json:"DbProxyEndpointItems,omitempty" xml:"DbProxyEndpointItems,omitempty" type:"Struct"`
}

func (s DescribeDBProxyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyResponseBody) SetDBProxyInstanceLatestMinorVersion(v string) *DescribeDBProxyResponseBody {
	s.DBProxyInstanceLatestMinorVersion = &v
	return s
}

func (s *DescribeDBProxyResponseBody) SetRequestId(v string) *DescribeDBProxyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBProxyResponseBody) SetDBProxyInstanceCurrentMinorVersion(v string) *DescribeDBProxyResponseBody {
	s.DBProxyInstanceCurrentMinorVersion = &v
	return s
}

func (s *DescribeDBProxyResponseBody) SetDBProxyInstanceNum(v int32) *DescribeDBProxyResponseBody {
	s.DBProxyInstanceNum = &v
	return s
}

func (s *DescribeDBProxyResponseBody) SetDBProxyInstanceType(v string) *DescribeDBProxyResponseBody {
	s.DBProxyInstanceType = &v
	return s
}

func (s *DescribeDBProxyResponseBody) SetDBProxyInstanceStatus(v string) *DescribeDBProxyResponseBody {
	s.DBProxyInstanceStatus = &v
	return s
}

func (s *DescribeDBProxyResponseBody) SetDBProxyServiceStatus(v string) *DescribeDBProxyResponseBody {
	s.DBProxyServiceStatus = &v
	return s
}

func (s *DescribeDBProxyResponseBody) SetDBProxyInstanceName(v string) *DescribeDBProxyResponseBody {
	s.DBProxyInstanceName = &v
	return s
}

func (s *DescribeDBProxyResponseBody) SetDBProxyConnectStringItems(v *DescribeDBProxyResponseBodyDBProxyConnectStringItems) *DescribeDBProxyResponseBody {
	s.DBProxyConnectStringItems = v
	return s
}

func (s *DescribeDBProxyResponseBody) SetDbProxyEndpointItems(v *DescribeDBProxyResponseBodyDbProxyEndpointItems) *DescribeDBProxyResponseBody {
	s.DbProxyEndpointItems = v
	return s
}

type DescribeDBProxyResponseBodyDBProxyConnectStringItems struct {
	DBProxyConnectStringItems []*DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems `json:"DBProxyConnectStringItems,omitempty" xml:"DBProxyConnectStringItems,omitempty" type:"Repeated"`
}

func (s DescribeDBProxyResponseBodyDBProxyConnectStringItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyResponseBodyDBProxyConnectStringItems) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyResponseBodyDBProxyConnectStringItems) SetDBProxyConnectStringItems(v []*DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems) *DescribeDBProxyResponseBodyDBProxyConnectStringItems {
	s.DBProxyConnectStringItems = v
	return s
}

type DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems struct {
	DBProxyConnectStringNetWorkType *string `json:"DBProxyConnectStringNetWorkType,omitempty" xml:"DBProxyConnectStringNetWorkType,omitempty"`
	DBProxyConnectStringNetType     *string `json:"DBProxyConnectStringNetType,omitempty" xml:"DBProxyConnectStringNetType,omitempty"`
	DBProxyVpcInstanceId            *string `json:"DBProxyVpcInstanceId,omitempty" xml:"DBProxyVpcInstanceId,omitempty"`
	DBProxyEndpointName             *string `json:"DBProxyEndpointName,omitempty" xml:"DBProxyEndpointName,omitempty"`
	DBProxyEndpointId               *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty"`
	DBProxyConnectStringPort        *string `json:"DBProxyConnectStringPort,omitempty" xml:"DBProxyConnectStringPort,omitempty"`
	DBProxyConnectString            *string `json:"DBProxyConnectString,omitempty" xml:"DBProxyConnectString,omitempty"`
}

func (s DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyConnectStringNetWorkType(v string) *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyConnectStringNetWorkType = &v
	return s
}

func (s *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyConnectStringNetType(v string) *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyConnectStringNetType = &v
	return s
}

func (s *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyVpcInstanceId(v string) *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyVpcInstanceId = &v
	return s
}

func (s *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyEndpointName(v string) *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyEndpointName = &v
	return s
}

func (s *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyEndpointId(v string) *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyEndpointId = &v
	return s
}

func (s *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyConnectStringPort(v string) *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyConnectStringPort = &v
	return s
}

func (s *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyConnectString(v string) *DescribeDBProxyResponseBodyDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyConnectString = &v
	return s
}

type DescribeDBProxyResponseBodyDbProxyEndpointItems struct {
	DbProxyEndpointItems []*DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems `json:"DbProxyEndpointItems,omitempty" xml:"DbProxyEndpointItems,omitempty" type:"Repeated"`
}

func (s DescribeDBProxyResponseBodyDbProxyEndpointItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyResponseBodyDbProxyEndpointItems) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyResponseBodyDbProxyEndpointItems) SetDbProxyEndpointItems(v []*DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems) *DescribeDBProxyResponseBodyDbProxyEndpointItems {
	s.DbProxyEndpointItems = v
	return s
}

type DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems struct {
	DbProxyEndpointAliases *string `json:"DbProxyEndpointAliases,omitempty" xml:"DbProxyEndpointAliases,omitempty"`
	DbProxyEndpointName    *string `json:"DbProxyEndpointName,omitempty" xml:"DbProxyEndpointName,omitempty"`
	DbProxyEndpointType    *string `json:"DbProxyEndpointType,omitempty" xml:"DbProxyEndpointType,omitempty"`
	DbProxyReadWriteMode   *string `json:"DbProxyReadWriteMode,omitempty" xml:"DbProxyReadWriteMode,omitempty"`
}

func (s DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems) SetDbProxyEndpointAliases(v string) *DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems {
	s.DbProxyEndpointAliases = &v
	return s
}

func (s *DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems) SetDbProxyEndpointName(v string) *DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems {
	s.DbProxyEndpointName = &v
	return s
}

func (s *DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems) SetDbProxyEndpointType(v string) *DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems {
	s.DbProxyEndpointType = &v
	return s
}

func (s *DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems) SetDbProxyReadWriteMode(v string) *DescribeDBProxyResponseBodyDbProxyEndpointItemsDbProxyEndpointItems {
	s.DbProxyReadWriteMode = &v
	return s
}

type DescribeDBProxyResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBProxyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBProxyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyResponse) SetHeaders(v map[string]*string) *DescribeDBProxyResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBProxyResponse) SetBody(v *DescribeDBProxyResponseBody) *DescribeDBProxyResponse {
	s.Body = v
	return s
}

type DescribeDBProxyEndpointRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBProxyEndpointId    *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty"`
	DBProxyConnectString *string `json:"DBProxyConnectString,omitempty" xml:"DBProxyConnectString,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDBProxyEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyEndpointRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyEndpointRequest) SetOwnerId(v int64) *DescribeDBProxyEndpointRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBProxyEndpointRequest) SetResourceOwnerAccount(v string) *DescribeDBProxyEndpointRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBProxyEndpointRequest) SetResourceOwnerId(v int64) *DescribeDBProxyEndpointRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBProxyEndpointRequest) SetDBInstanceId(v string) *DescribeDBProxyEndpointRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBProxyEndpointRequest) SetDBProxyEndpointId(v string) *DescribeDBProxyEndpointRequest {
	s.DBProxyEndpointId = &v
	return s
}

func (s *DescribeDBProxyEndpointRequest) SetDBProxyConnectString(v string) *DescribeDBProxyEndpointRequest {
	s.DBProxyConnectString = &v
	return s
}

func (s *DescribeDBProxyEndpointRequest) SetRegionId(v string) *DescribeDBProxyEndpointRequest {
	s.RegionId = &v
	return s
}

type DescribeDBProxyEndpointResponseBody struct {
	DBProxyConnectStringNetType      *string                                                  `json:"DBProxyConnectStringNetType,omitempty" xml:"DBProxyConnectStringNetType,omitempty"`
	DBProxyFeatures                  *string                                                  `json:"DBProxyFeatures,omitempty" xml:"DBProxyFeatures,omitempty"`
	RequestId                        *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ReadOnlyInstanceWeight           *string                                                  `json:"ReadOnlyInstanceWeight,omitempty" xml:"ReadOnlyInstanceWeight,omitempty"`
	ReadOnlyInstanceDistributionType *string                                                  `json:"ReadOnlyInstanceDistributionType,omitempty" xml:"ReadOnlyInstanceDistributionType,omitempty"`
	ReadOnlyInstanceMaxDelayTime     *string                                                  `json:"ReadOnlyInstanceMaxDelayTime,omitempty" xml:"ReadOnlyInstanceMaxDelayTime,omitempty"`
	DbProxyEndpointReadWriteMode     *string                                                  `json:"DbProxyEndpointReadWriteMode,omitempty" xml:"DbProxyEndpointReadWriteMode,omitempty"`
	DbProxyEndpointAliases           *string                                                  `json:"DbProxyEndpointAliases,omitempty" xml:"DbProxyEndpointAliases,omitempty"`
	DBProxyEndpointId                *string                                                  `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty"`
	DBProxyConnectStringPort         *string                                                  `json:"DBProxyConnectStringPort,omitempty" xml:"DBProxyConnectStringPort,omitempty"`
	DBProxyConnectString             *string                                                  `json:"DBProxyConnectString,omitempty" xml:"DBProxyConnectString,omitempty"`
	EndpointConnectItems             *DescribeDBProxyEndpointResponseBodyEndpointConnectItems `json:"EndpointConnectItems,omitempty" xml:"EndpointConnectItems,omitempty" type:"Struct"`
}

func (s DescribeDBProxyEndpointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyEndpointResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyEndpointResponseBody) SetDBProxyConnectStringNetType(v string) *DescribeDBProxyEndpointResponseBody {
	s.DBProxyConnectStringNetType = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetDBProxyFeatures(v string) *DescribeDBProxyEndpointResponseBody {
	s.DBProxyFeatures = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetRequestId(v string) *DescribeDBProxyEndpointResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetReadOnlyInstanceWeight(v string) *DescribeDBProxyEndpointResponseBody {
	s.ReadOnlyInstanceWeight = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetReadOnlyInstanceDistributionType(v string) *DescribeDBProxyEndpointResponseBody {
	s.ReadOnlyInstanceDistributionType = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetReadOnlyInstanceMaxDelayTime(v string) *DescribeDBProxyEndpointResponseBody {
	s.ReadOnlyInstanceMaxDelayTime = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetDbProxyEndpointReadWriteMode(v string) *DescribeDBProxyEndpointResponseBody {
	s.DbProxyEndpointReadWriteMode = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetDbProxyEndpointAliases(v string) *DescribeDBProxyEndpointResponseBody {
	s.DbProxyEndpointAliases = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetDBProxyEndpointId(v string) *DescribeDBProxyEndpointResponseBody {
	s.DBProxyEndpointId = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetDBProxyConnectStringPort(v string) *DescribeDBProxyEndpointResponseBody {
	s.DBProxyConnectStringPort = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetDBProxyConnectString(v string) *DescribeDBProxyEndpointResponseBody {
	s.DBProxyConnectString = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBody) SetEndpointConnectItems(v *DescribeDBProxyEndpointResponseBodyEndpointConnectItems) *DescribeDBProxyEndpointResponseBody {
	s.EndpointConnectItems = v
	return s
}

type DescribeDBProxyEndpointResponseBodyEndpointConnectItems struct {
	EndpointConnectItems []*DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems `json:"EndpointConnectItems,omitempty" xml:"EndpointConnectItems,omitempty" type:"Repeated"`
}

func (s DescribeDBProxyEndpointResponseBodyEndpointConnectItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyEndpointResponseBodyEndpointConnectItems) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyEndpointResponseBodyEndpointConnectItems) SetEndpointConnectItems(v []*DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems) *DescribeDBProxyEndpointResponseBodyEndpointConnectItems {
	s.EndpointConnectItems = v
	return s
}

type DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems struct {
	DbProxyEndpointPort          *string `json:"DbProxyEndpointPort,omitempty" xml:"DbProxyEndpointPort,omitempty"`
	DbProxyEndpointConnectString *string `json:"DbProxyEndpointConnectString,omitempty" xml:"DbProxyEndpointConnectString,omitempty"`
	DbProxyEndpointNetType       *string `json:"DbProxyEndpointNetType,omitempty" xml:"DbProxyEndpointNetType,omitempty"`
}

func (s DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems) SetDbProxyEndpointPort(v string) *DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems {
	s.DbProxyEndpointPort = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems) SetDbProxyEndpointConnectString(v string) *DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems {
	s.DbProxyEndpointConnectString = &v
	return s
}

func (s *DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems) SetDbProxyEndpointNetType(v string) *DescribeDBProxyEndpointResponseBodyEndpointConnectItemsEndpointConnectItems {
	s.DbProxyEndpointNetType = &v
	return s
}

type DescribeDBProxyEndpointResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBProxyEndpointResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBProxyEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyEndpointResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyEndpointResponse) SetHeaders(v map[string]*string) *DescribeDBProxyEndpointResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBProxyEndpointResponse) SetBody(v *DescribeDBProxyEndpointResponseBody) *DescribeDBProxyEndpointResponse {
	s.Body = v
	return s
}

type DescribeDBProxyPerformanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBProxyInstanceType  *string `json:"DBProxyInstanceType,omitempty" xml:"DBProxyInstanceType,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	MetricsName          *string `json:"MetricsName,omitempty" xml:"MetricsName,omitempty"`
}

func (s DescribeDBProxyPerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceRequest) SetOwnerId(v int64) *DescribeDBProxyPerformanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetResourceOwnerAccount(v string) *DescribeDBProxyPerformanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetResourceOwnerId(v int64) *DescribeDBProxyPerformanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetDBInstanceId(v string) *DescribeDBProxyPerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetDBProxyInstanceType(v string) *DescribeDBProxyPerformanceRequest {
	s.DBProxyInstanceType = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetStartTime(v string) *DescribeDBProxyPerformanceRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetEndTime(v string) *DescribeDBProxyPerformanceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetRegionId(v string) *DescribeDBProxyPerformanceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetMetricsName(v string) *DescribeDBProxyPerformanceRequest {
	s.MetricsName = &v
	return s
}

type DescribeDBProxyPerformanceResponseBody struct {
	EndTime         *string                                                `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime       *string                                                `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DBInstanceId    *string                                                `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId       *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PerformanceKeys *DescribeDBProxyPerformanceResponseBodyPerformanceKeys `json:"PerformanceKeys,omitempty" xml:"PerformanceKeys,omitempty" type:"Struct"`
}

func (s DescribeDBProxyPerformanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponseBody) SetEndTime(v string) *DescribeDBProxyPerformanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponseBody) SetStartTime(v string) *DescribeDBProxyPerformanceResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponseBody) SetDBInstanceId(v string) *DescribeDBProxyPerformanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponseBody) SetRequestId(v string) *DescribeDBProxyPerformanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponseBody) SetPerformanceKeys(v *DescribeDBProxyPerformanceResponseBodyPerformanceKeys) *DescribeDBProxyPerformanceResponseBody {
	s.PerformanceKeys = v
	return s
}

type DescribeDBProxyPerformanceResponseBodyPerformanceKeys struct {
	PerformanceKey []*DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey `json:"PerformanceKey,omitempty" xml:"PerformanceKey,omitempty" type:"Repeated"`
}

func (s DescribeDBProxyPerformanceResponseBodyPerformanceKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponseBodyPerformanceKeys) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponseBodyPerformanceKeys) SetPerformanceKey(v []*DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey) *DescribeDBProxyPerformanceResponseBodyPerformanceKeys {
	s.PerformanceKey = v
	return s
}

type DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey struct {
	ValueFormat *string                                                                    `json:"ValueFormat,omitempty" xml:"ValueFormat,omitempty"`
	Key         *string                                                                    `json:"Key,omitempty" xml:"Key,omitempty"`
	Values      *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Struct"`
}

func (s DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey) SetValueFormat(v string) *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey {
	s.ValueFormat = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey) SetKey(v string) *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey {
	s.Key = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey) SetValues(v *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValues) *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKey {
	s.Values = v
	return s
}

type DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValues struct {
	PerformanceValue []*DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue `json:"PerformanceValue,omitempty" xml:"PerformanceValue,omitempty" type:"Repeated"`
}

func (s DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValues) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValues) SetPerformanceValue(v []*DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue) *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValues {
	s.PerformanceValue = v
	return s
}

type DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue struct {
	Date  *string `json:"Date,omitempty" xml:"Date,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue) SetDate(v string) *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue {
	s.Date = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue) SetValue(v string) *DescribeDBProxyPerformanceResponseBodyPerformanceKeysPerformanceKeyValuesPerformanceValue {
	s.Value = &v
	return s
}

type DescribeDBProxyPerformanceResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDBProxyPerformanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDBProxyPerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponse) SetHeaders(v map[string]*string) *DescribeDBProxyPerformanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDBProxyPerformanceResponse) SetBody(v *DescribeDBProxyPerformanceResponseBody) *DescribeDBProxyPerformanceResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
}

func (s DescribeDedicatedHostAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAttributeRequest) SetOwnerId(v int64) *DescribeDedicatedHostAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostAttributeRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeRequest) SetRegionId(v string) *DescribeDedicatedHostAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeRequest) SetDedicatedHostId(v string) *DescribeDedicatedHostAttributeRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeRequest) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostAttributeRequest {
	s.DedicatedHostGroupId = &v
	return s
}

type DescribeDedicatedHostAttributeResponseBody struct {
	CPUAllocationRatio     *string `json:"CPUAllocationRatio,omitempty" xml:"CPUAllocationRatio,omitempty"`
	DiskAllocationRatio    *string `json:"DiskAllocationRatio,omitempty" xml:"DiskAllocationRatio,omitempty"`
	DedicatedHostId        *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	InstanceNumber         *int32  `json:"InstanceNumber,omitempty" xml:"InstanceNumber,omitempty"`
	CreatedTime            *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DedicatedHostGroupId   *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	AutoRenew              *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ImageCategory          *string `json:"ImageCategory,omitempty" xml:"ImageCategory,omitempty"`
	HostStorage            *int32  `json:"HostStorage,omitempty" xml:"HostStorage,omitempty"`
	InstanceNumberSlave    *int32  `json:"InstanceNumberSlave,omitempty" xml:"InstanceNumberSlave,omitempty"`
	OpenPermission         *string `json:"OpenPermission,omitempty" xml:"OpenPermission,omitempty"`
	HostType               *string `json:"HostType,omitempty" xml:"HostType,omitempty"`
	ExpiredTime            *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	HostMem                *int32  `json:"HostMem,omitempty" xml:"HostMem,omitempty"`
	MemoryUsed             *string `json:"MemoryUsed,omitempty" xml:"MemoryUsed,omitempty"`
	HostStatus             *string `json:"HostStatus,omitempty" xml:"HostStatus,omitempty"`
	CpuUsed                *string `json:"CpuUsed,omitempty" xml:"CpuUsed,omitempty"`
	HostName               *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InstanceNumberROSlave  *int32  `json:"InstanceNumberROSlave,omitempty" xml:"InstanceNumberROSlave,omitempty"`
	AllocationStatus       *string `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MemAllocationRatio     *string `json:"MemAllocationRatio,omitempty" xml:"MemAllocationRatio,omitempty"`
	ZoneId                 *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceNumberROMaster *int32  `json:"InstanceNumberROMaster,omitempty" xml:"InstanceNumberROMaster,omitempty"`
	VPCId                  *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId              *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	InstanceNumberMaster   *int32  `json:"InstanceNumberMaster,omitempty" xml:"InstanceNumberMaster,omitempty"`
	StorageUsed            *string `json:"StorageUsed,omitempty" xml:"StorageUsed,omitempty"`
	HostClass              *string `json:"HostClass,omitempty" xml:"HostClass,omitempty"`
	HostCPU                *int32  `json:"HostCPU,omitempty" xml:"HostCPU,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	IPAddress              *string `json:"IPAddress,omitempty" xml:"IPAddress,omitempty"`
	AccountName            *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
}

func (s DescribeDedicatedHostAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetCPUAllocationRatio(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.CPUAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetDiskAllocationRatio(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.DiskAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetDedicatedHostId(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetInstanceNumber(v int32) *DescribeDedicatedHostAttributeResponseBody {
	s.InstanceNumber = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetCreatedTime(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetAutoRenew(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.AutoRenew = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetImageCategory(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.ImageCategory = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetHostStorage(v int32) *DescribeDedicatedHostAttributeResponseBody {
	s.HostStorage = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetInstanceNumberSlave(v int32) *DescribeDedicatedHostAttributeResponseBody {
	s.InstanceNumberSlave = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetOpenPermission(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.OpenPermission = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetHostType(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.HostType = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetExpiredTime(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetHostMem(v int32) *DescribeDedicatedHostAttributeResponseBody {
	s.HostMem = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetMemoryUsed(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.MemoryUsed = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetHostStatus(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.HostStatus = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetCpuUsed(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.CpuUsed = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetHostName(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.HostName = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetInstanceNumberROSlave(v int32) *DescribeDedicatedHostAttributeResponseBody {
	s.InstanceNumberROSlave = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetAllocationStatus(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.AllocationStatus = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetRequestId(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetMemAllocationRatio(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.MemAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetZoneId(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetInstanceNumberROMaster(v int32) *DescribeDedicatedHostAttributeResponseBody {
	s.InstanceNumberROMaster = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetVPCId(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.VPCId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetVSwitchId(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetInstanceNumberMaster(v int32) *DescribeDedicatedHostAttributeResponseBody {
	s.InstanceNumberMaster = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetStorageUsed(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.StorageUsed = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetHostClass(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.HostClass = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetHostCPU(v int32) *DescribeDedicatedHostAttributeResponseBody {
	s.HostCPU = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetRegionId(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetIPAddress(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.IPAddress = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponseBody) SetAccountName(v string) *DescribeDedicatedHostAttributeResponseBody {
	s.AccountName = &v
	return s
}

type DescribeDedicatedHostAttributeResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDedicatedHostAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAttributeResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetBody(v *DescribeDedicatedHostAttributeResponseBody) *DescribeDedicatedHostAttributeResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostGroupsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	ImageCategory        *string `json:"ImageCategory,omitempty" xml:"ImageCategory,omitempty"`
}

func (s DescribeDedicatedHostGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsRequest) SetOwnerId(v int64) *DescribeDedicatedHostGroupsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostGroupsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostGroupsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsRequest) SetRegionId(v string) *DescribeDedicatedHostGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsRequest) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostGroupsRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsRequest) SetImageCategory(v string) *DescribeDedicatedHostGroupsRequest {
	s.ImageCategory = &v
	return s
}

type DescribeDedicatedHostGroupsResponseBody struct {
	RequestId           *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DedicatedHostGroups *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroups `json:"DedicatedHostGroups,omitempty" xml:"DedicatedHostGroups,omitempty" type:"Struct"`
}

func (s DescribeDedicatedHostGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsResponseBody) SetRequestId(v string) *DescribeDedicatedHostGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBody) SetDedicatedHostGroups(v *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroups) *DescribeDedicatedHostGroupsResponseBody {
	s.DedicatedHostGroups = v
	return s
}

type DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroups struct {
	DedicatedHostGroups []*DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups `json:"DedicatedHostGroups,omitempty" xml:"DedicatedHostGroups,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroups) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroups) SetDedicatedHostGroups(v []*DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroups {
	s.DedicatedHostGroups = v
	return s
}

type DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups struct {
	DiskAllocateRation                *float32                                                                                 `json:"DiskAllocateRation,omitempty" xml:"DiskAllocateRation,omitempty"`
	CreateTime                        *string                                                                                  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DedicatedHostCountGroupByHostType map[string]interface{}                                                                   `json:"DedicatedHostCountGroupByHostType,omitempty" xml:"DedicatedHostCountGroupByHostType,omitempty"`
	Text                              *string                                                                                  `json:"Text,omitempty" xml:"Text,omitempty"`
	DedicatedHostGroupId              *string                                                                                  `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	DiskUtility                       *float32                                                                                 `json:"DiskUtility,omitempty" xml:"DiskUtility,omitempty"`
	MemUsedAmount                     *float32                                                                                 `json:"MemUsedAmount,omitempty" xml:"MemUsedAmount,omitempty"`
	MemAllocatedAmount                *float32                                                                                 `json:"MemAllocatedAmount,omitempty" xml:"MemAllocatedAmount,omitempty"`
	CpuAllocationRatio                *int32                                                                                   `json:"CpuAllocationRatio,omitempty" xml:"CpuAllocationRatio,omitempty"`
	MemAllocationRatio                *int32                                                                                   `json:"MemAllocationRatio,omitempty" xml:"MemAllocationRatio,omitempty"`
	MemUtility                        *float32                                                                                 `json:"MemUtility,omitempty" xml:"MemUtility,omitempty"`
	MemAllocateRation                 *float32                                                                                 `json:"MemAllocateRation,omitempty" xml:"MemAllocateRation,omitempty"`
	CpuAllocatedAmount                *float32                                                                                 `json:"CpuAllocatedAmount,omitempty" xml:"CpuAllocatedAmount,omitempty"`
	DedicatedHostGroupDesc            *string                                                                                  `json:"DedicatedHostGroupDesc,omitempty" xml:"DedicatedHostGroupDesc,omitempty"`
	CpuAllocateRation                 *float32                                                                                 `json:"CpuAllocateRation,omitempty" xml:"CpuAllocateRation,omitempty"`
	InstanceNumber                    *int32                                                                                   `json:"InstanceNumber,omitempty" xml:"InstanceNumber,omitempty"`
	OpenPermission                    *string                                                                                  `json:"OpenPermission,omitempty" xml:"OpenPermission,omitempty"`
	VPCId                             *string                                                                                  `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	DiskAllocatedAmount               *float32                                                                                 `json:"DiskAllocatedAmount,omitempty" xml:"DiskAllocatedAmount,omitempty"`
	HostNumber                        *int32                                                                                   `json:"HostNumber,omitempty" xml:"HostNumber,omitempty"`
	DiskUsedAmount                    *float32                                                                                 `json:"DiskUsedAmount,omitempty" xml:"DiskUsedAmount,omitempty"`
	AllocationPolicy                  *string                                                                                  `json:"AllocationPolicy,omitempty" xml:"AllocationPolicy,omitempty"`
	Engine                            *string                                                                                  `json:"Engine,omitempty" xml:"Engine,omitempty"`
	DiskAllocationRatio               *int32                                                                                   `json:"DiskAllocationRatio,omitempty" xml:"DiskAllocationRatio,omitempty"`
	BastionInstanceId                 *string                                                                                  `json:"BastionInstanceId,omitempty" xml:"BastionInstanceId,omitempty"`
	HostReplacePolicy                 *string                                                                                  `json:"HostReplacePolicy,omitempty" xml:"HostReplacePolicy,omitempty"`
	ZoneIDList                        *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroupsZoneIDList `json:"ZoneIDList,omitempty" xml:"ZoneIDList,omitempty" type:"Struct"`
}

func (s DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetDiskAllocateRation(v float32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.DiskAllocateRation = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetCreateTime(v string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.CreateTime = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetDedicatedHostCountGroupByHostType(v map[string]interface{}) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.DedicatedHostCountGroupByHostType = v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetText(v string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.Text = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetDiskUtility(v float32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.DiskUtility = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetMemUsedAmount(v float32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.MemUsedAmount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetMemAllocatedAmount(v float32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.MemAllocatedAmount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetCpuAllocationRatio(v int32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.CpuAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetMemAllocationRatio(v int32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.MemAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetMemUtility(v float32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.MemUtility = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetMemAllocateRation(v float32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.MemAllocateRation = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetCpuAllocatedAmount(v float32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.CpuAllocatedAmount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetDedicatedHostGroupDesc(v string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.DedicatedHostGroupDesc = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetCpuAllocateRation(v float32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.CpuAllocateRation = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetInstanceNumber(v int32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.InstanceNumber = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetOpenPermission(v string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.OpenPermission = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetVPCId(v string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.VPCId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetDiskAllocatedAmount(v float32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.DiskAllocatedAmount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetHostNumber(v int32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.HostNumber = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetDiskUsedAmount(v float32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.DiskUsedAmount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetAllocationPolicy(v string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.AllocationPolicy = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetEngine(v string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.Engine = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetDiskAllocationRatio(v int32) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.DiskAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetBastionInstanceId(v string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.BastionInstanceId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetHostReplacePolicy(v string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.HostReplacePolicy = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups) SetZoneIDList(v *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroupsZoneIDList) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroups {
	s.ZoneIDList = v
	return s
}

type DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroupsZoneIDList struct {
	ZoneIDList []*string `json:"ZoneIDList,omitempty" xml:"ZoneIDList,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroupsZoneIDList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroupsZoneIDList) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroupsZoneIDList) SetZoneIDList(v []*string) *DescribeDedicatedHostGroupsResponseBodyDedicatedHostGroupsDedicatedHostGroupsZoneIDList {
	s.ZoneIDList = v
	return s
}

type DescribeDedicatedHostGroupsResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDedicatedHostGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostGroupsResponse) SetBody(v *DescribeDedicatedHostGroupsResponseBody) *DescribeDedicatedHostGroupsResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostImageCategoriesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	HostGroup            *string `json:"HostGroup,omitempty" xml:"HostGroup,omitempty"`
}

func (s DescribeDedicatedHostImageCategoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostImageCategoriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostImageCategoriesRequest) SetOwnerId(v int64) *DescribeDedicatedHostImageCategoriesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostImageCategoriesRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostImageCategoriesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostImageCategoriesRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostImageCategoriesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostImageCategoriesRequest) SetRegionId(v string) *DescribeDedicatedHostImageCategoriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostImageCategoriesRequest) SetHostGroup(v string) *DescribeDedicatedHostImageCategoriesRequest {
	s.HostGroup = &v
	return s
}

type DescribeDedicatedHostImageCategoriesResponseBody struct {
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Images    *DescribeDedicatedHostImageCategoriesResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
}

func (s DescribeDedicatedHostImageCategoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostImageCategoriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostImageCategoriesResponseBody) SetRequestId(v string) *DescribeDedicatedHostImageCategoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostImageCategoriesResponseBody) SetImages(v *DescribeDedicatedHostImageCategoriesResponseBodyImages) *DescribeDedicatedHostImageCategoriesResponseBody {
	s.Images = v
	return s
}

type DescribeDedicatedHostImageCategoriesResponseBodyImages struct {
	Images []*DescribeDedicatedHostImageCategoriesResponseBodyImagesImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostImageCategoriesResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostImageCategoriesResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostImageCategoriesResponseBodyImages) SetImages(v []*DescribeDedicatedHostImageCategoriesResponseBodyImagesImages) *DescribeDedicatedHostImageCategoriesResponseBodyImages {
	s.Images = v
	return s
}

type DescribeDedicatedHostImageCategoriesResponseBodyImagesImages struct {
	ImageCode *string `json:"ImageCode,omitempty" xml:"ImageCode,omitempty"`
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
}

func (s DescribeDedicatedHostImageCategoriesResponseBodyImagesImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostImageCategoriesResponseBodyImagesImages) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostImageCategoriesResponseBodyImagesImages) SetImageCode(v string) *DescribeDedicatedHostImageCategoriesResponseBodyImagesImages {
	s.ImageCode = &v
	return s
}

func (s *DescribeDedicatedHostImageCategoriesResponseBodyImagesImages) SetImageName(v string) *DescribeDedicatedHostImageCategoriesResponseBodyImagesImages {
	s.ImageName = &v
	return s
}

type DescribeDedicatedHostImageCategoriesResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDedicatedHostImageCategoriesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostImageCategoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostImageCategoriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostImageCategoriesResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostImageCategoriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostImageCategoriesResponse) SetBody(v *DescribeDedicatedHostImageCategoriesResponseBody) *DescribeDedicatedHostImageCategoriesResponse {
	s.Body = v
	return s
}

type DescribeDedicatedHostsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	OrderId              *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	HostType             *string `json:"HostType,omitempty" xml:"HostType,omitempty"`
	HostStatus           *string `json:"HostStatus,omitempty" xml:"HostStatus,omitempty"`
	AllocationStatus     *string `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
}

func (s DescribeDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsRequest) SetOwnerId(v int64) *DescribeDedicatedHostsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceOwnerAccount(v string) *DescribeDedicatedHostsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetResourceOwnerId(v int64) *DescribeDedicatedHostsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetRegionId(v string) *DescribeDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetOrderId(v int64) *DescribeDedicatedHostsRequest {
	s.OrderId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetHostType(v string) *DescribeDedicatedHostsRequest {
	s.HostType = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetHostStatus(v string) *DescribeDedicatedHostsRequest {
	s.HostStatus = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetAllocationStatus(v string) *DescribeDedicatedHostsRequest {
	s.AllocationStatus = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetZoneId(v string) *DescribeDedicatedHostsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostId(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostId = &v
	return s
}

type DescribeDedicatedHostsResponseBody struct {
	DedicatedHostGroupId *string                                           `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	RequestId            *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DedicatedHosts       *DescribeDedicatedHostsResponseBodyDedicatedHosts `json:"DedicatedHosts,omitempty" xml:"DedicatedHosts,omitempty" type:"Struct"`
}

func (s DescribeDedicatedHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBody) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostsResponseBody {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBody) SetRequestId(v string) *DescribeDedicatedHostsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBody) SetDedicatedHosts(v *DescribeDedicatedHostsResponseBodyDedicatedHosts) *DescribeDedicatedHostsResponseBody {
	s.DedicatedHosts = v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHosts struct {
	DedicatedHosts []*DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts `json:"DedicatedHosts,omitempty" xml:"DedicatedHosts,omitempty" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHosts) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHosts) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHosts) SetDedicatedHosts(v []*DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) *DescribeDedicatedHostsResponseBodyDedicatedHosts {
	s.DedicatedHosts = v
	return s
}

type DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts struct {
	HostType             *string `json:"HostType,omitempty" xml:"HostType,omitempty"`
	HostStorage          *string `json:"HostStorage,omitempty" xml:"HostStorage,omitempty"`
	MemoryUsed           *string `json:"MemoryUsed,omitempty" xml:"MemoryUsed,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	AllocationStatus     *string `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty"`
	StorageUsed          *string `json:"StorageUsed,omitempty" xml:"StorageUsed,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	MemAllocationRatio   *string `json:"MemAllocationRatio,omitempty" xml:"MemAllocationRatio,omitempty"`
	CreatedTime          *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	IPAddress            *string `json:"IPAddress,omitempty" xml:"IPAddress,omitempty"`
	HostStatus           *string `json:"HostStatus,omitempty" xml:"HostStatus,omitempty"`
	HostName             *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	HostCPU              *string `json:"HostCPU,omitempty" xml:"HostCPU,omitempty"`
	InstanceNumber       *string `json:"InstanceNumber,omitempty" xml:"InstanceNumber,omitempty"`
	OpenPermission       *string `json:"OpenPermission,omitempty" xml:"OpenPermission,omitempty"`
	CpuUsed              *string `json:"CpuUsed,omitempty" xml:"CpuUsed,omitempty"`
	VPCId                *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	HostClass            *string `json:"HostClass,omitempty" xml:"HostClass,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	CPUAllocationRatio   *string `json:"CPUAllocationRatio,omitempty" xml:"CPUAllocationRatio,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ImageCategory        *string `json:"ImageCategory,omitempty" xml:"ImageCategory,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	DiskAllocationRatio  *string `json:"DiskAllocationRatio,omitempty" xml:"DiskAllocationRatio,omitempty"`
	HostMem              *string `json:"HostMem,omitempty" xml:"HostMem,omitempty"`
	BastionInstanceId    *string `json:"BastionInstanceId,omitempty" xml:"BastionInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetHostType(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.HostType = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetHostStorage(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.HostStorage = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetMemoryUsed(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.MemoryUsed = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetAllocationStatus(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.AllocationStatus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetStorageUsed(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.StorageUsed = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetDedicatedHostId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetMemAllocationRatio(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.MemAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetCreatedTime(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetIPAddress(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.IPAddress = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetHostStatus(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.HostStatus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetHostName(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.HostName = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetHostCPU(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.HostCPU = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetInstanceNumber(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.InstanceNumber = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetOpenPermission(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.OpenPermission = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetCpuUsed(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.CpuUsed = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetVPCId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.VPCId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetHostClass(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.HostClass = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetEndTime(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.EndTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetVSwitchId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetCPUAllocationRatio(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.CPUAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetZoneId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetImageCategory(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.ImageCategory = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetEngine(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.Engine = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetDiskAllocationRatio(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.DiskAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetHostMem(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.HostMem = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetBastionInstanceId(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.BastionInstanceId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts) SetAccountName(v string) *DescribeDedicatedHostsResponseBodyDedicatedHostsDedicatedHosts {
	s.AccountName = &v
	return s
}

type DescribeDedicatedHostsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDedicatedHostsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponse) SetHeaders(v map[string]*string) *DescribeDedicatedHostsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedHostsResponse) SetBody(v *DescribeDedicatedHostsResponseBody) *DescribeDedicatedHostsResponse {
	s.Body = v
	return s
}

type DescribeDetachedBackupsRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupId        *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	BackupStatus    *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	BackupMode      *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	StartTime       *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DescribeDetachedBackupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetachedBackupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDetachedBackupsRequest) SetResourceOwnerId(v int64) *DescribeDetachedBackupsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetDBInstanceId(v string) *DescribeDetachedBackupsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetBackupId(v string) *DescribeDetachedBackupsRequest {
	s.BackupId = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetBackupStatus(v string) *DescribeDetachedBackupsRequest {
	s.BackupStatus = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetBackupMode(v string) *DescribeDetachedBackupsRequest {
	s.BackupMode = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetStartTime(v string) *DescribeDetachedBackupsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetEndTime(v string) *DescribeDetachedBackupsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetPageSize(v int32) *DescribeDetachedBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetPageNumber(v int32) *DescribeDetachedBackupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetRegion(v string) *DescribeDetachedBackupsRequest {
	s.Region = &v
	return s
}

type DescribeDetachedBackupsResponseBody struct {
	PageNumber       *string                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RequestId        *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *string                                   `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *string                                   `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeDetachedBackupsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeDetachedBackupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetachedBackupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDetachedBackupsResponseBody) SetPageNumber(v string) *DescribeDetachedBackupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBody) SetRequestId(v string) *DescribeDetachedBackupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBody) SetPageRecordCount(v string) *DescribeDetachedBackupsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBody) SetTotalRecordCount(v string) *DescribeDetachedBackupsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBody) SetItems(v *DescribeDetachedBackupsResponseBodyItems) *DescribeDetachedBackupsResponseBody {
	s.Items = v
	return s
}

type DescribeDetachedBackupsResponseBodyItems struct {
	Backup []*DescribeDetachedBackupsResponseBodyItemsBackup `json:"Backup,omitempty" xml:"Backup,omitempty" type:"Repeated"`
}

func (s DescribeDetachedBackupsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetachedBackupsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDetachedBackupsResponseBodyItems) SetBackup(v []*DescribeDetachedBackupsResponseBodyItemsBackup) *DescribeDetachedBackupsResponseBodyItems {
	s.Backup = v
	return s
}

type DescribeDetachedBackupsResponseBodyItemsBackup struct {
	ConsistentTime            *int64  `json:"ConsistentTime,omitempty" xml:"ConsistentTime,omitempty"`
	StoreStatus               *string `json:"StoreStatus,omitempty" xml:"StoreStatus,omitempty"`
	BackupStatus              *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	BackupType                *string `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
	BackupStartTime           *string `json:"BackupStartTime,omitempty" xml:"BackupStartTime,omitempty"`
	BackupDownloadURL         *string `json:"BackupDownloadURL,omitempty" xml:"BackupDownloadURL,omitempty"`
	IsAvail                   *int32  `json:"IsAvail,omitempty" xml:"IsAvail,omitempty"`
	MetaStatus                *string `json:"MetaStatus,omitempty" xml:"MetaStatus,omitempty"`
	BackupEndTime             *string `json:"BackupEndTime,omitempty" xml:"BackupEndTime,omitempty"`
	BackupId                  *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	HostInstanceID            *string `json:"HostInstanceID,omitempty" xml:"HostInstanceID,omitempty"`
	BackupIntranetDownloadURL *string `json:"BackupIntranetDownloadURL,omitempty" xml:"BackupIntranetDownloadURL,omitempty"`
	BackupSize                *int64  `json:"BackupSize,omitempty" xml:"BackupSize,omitempty"`
	BackupMode                *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	DBInstanceId              *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupMethod              *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty"`
}

func (s DescribeDetachedBackupsResponseBodyItemsBackup) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetachedBackupsResponseBodyItemsBackup) GoString() string {
	return s.String()
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetConsistentTime(v int64) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.ConsistentTime = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetStoreStatus(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.StoreStatus = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetBackupStatus(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.BackupStatus = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetBackupType(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.BackupType = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetBackupStartTime(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.BackupStartTime = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetBackupDownloadURL(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.BackupDownloadURL = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetIsAvail(v int32) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.IsAvail = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetMetaStatus(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.MetaStatus = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetBackupEndTime(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.BackupEndTime = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetBackupId(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.BackupId = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetHostInstanceID(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.HostInstanceID = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetBackupIntranetDownloadURL(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.BackupIntranetDownloadURL = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetBackupSize(v int64) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.BackupSize = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetBackupMode(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.BackupMode = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetDBInstanceId(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDetachedBackupsResponseBodyItemsBackup) SetBackupMethod(v string) *DescribeDetachedBackupsResponseBodyItemsBackup {
	s.BackupMethod = &v
	return s
}

type DescribeDetachedBackupsResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDetachedBackupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDetachedBackupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetachedBackupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDetachedBackupsResponse) SetHeaders(v map[string]*string) *DescribeDetachedBackupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDetachedBackupsResponse) SetBody(v *DescribeDetachedBackupsResponseBody) *DescribeDetachedBackupsResponse {
	s.Body = v
	return s
}

type DescribeDiagnosticReportListRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDiagnosticReportListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListRequest) SetDBInstanceId(v string) *DescribeDiagnosticReportListRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDiagnosticReportListResponseBody struct {
	RequestId  *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ReportList []*DescribeDiagnosticReportListResponseBodyReportList `json:"ReportList,omitempty" xml:"ReportList,omitempty" type:"Repeated"`
}

func (s DescribeDiagnosticReportListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListResponseBody) SetRequestId(v string) *DescribeDiagnosticReportListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetReportList(v []*DescribeDiagnosticReportListResponseBodyReportList) *DescribeDiagnosticReportListResponseBody {
	s.ReportList = v
	return s
}

type DescribeDiagnosticReportListResponseBodyReportList struct {
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	DiagnosticTime *string `json:"DiagnosticTime,omitempty" xml:"DiagnosticTime,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Score          *int32  `json:"Score,omitempty" xml:"Score,omitempty"`
	DownloadURL    *string `json:"DownloadURL,omitempty" xml:"DownloadURL,omitempty"`
}

func (s DescribeDiagnosticReportListResponseBodyReportList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListResponseBodyReportList) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListResponseBodyReportList) SetEndTime(v string) *DescribeDiagnosticReportListResponseBodyReportList {
	s.EndTime = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBodyReportList) SetDiagnosticTime(v string) *DescribeDiagnosticReportListResponseBodyReportList {
	s.DiagnosticTime = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBodyReportList) SetStartTime(v string) *DescribeDiagnosticReportListResponseBodyReportList {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBodyReportList) SetScore(v int32) *DescribeDiagnosticReportListResponseBodyReportList {
	s.Score = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBodyReportList) SetDownloadURL(v string) *DescribeDiagnosticReportListResponseBodyReportList {
	s.DownloadURL = &v
	return s
}

type DescribeDiagnosticReportListResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDiagnosticReportListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDiagnosticReportListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListResponse) SetHeaders(v map[string]*string) *DescribeDiagnosticReportListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosticReportListResponse) SetBody(v *DescribeDiagnosticReportListResponseBody) *DescribeDiagnosticReportListResponse {
	s.Body = v
	return s
}

type DescribeDTCSecurityIpHostsForSQLServerRequest struct {
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDTCSecurityIpHostsForSQLServerRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTCSecurityIpHostsForSQLServerRequest) GoString() string {
	return s.String()
}

func (s *DescribeDTCSecurityIpHostsForSQLServerRequest) SetSecurityToken(v string) *DescribeDTCSecurityIpHostsForSQLServerRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerRequest) SetOwnerId(v int64) *DescribeDTCSecurityIpHostsForSQLServerRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerRequest) SetResourceOwnerAccount(v string) *DescribeDTCSecurityIpHostsForSQLServerRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerRequest) SetResourceOwnerId(v int64) *DescribeDTCSecurityIpHostsForSQLServerRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerRequest) SetOwnerAccount(v string) *DescribeDTCSecurityIpHostsForSQLServerRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerRequest) SetDBInstanceId(v string) *DescribeDTCSecurityIpHostsForSQLServerRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerRequest) SetRegionId(v string) *DescribeDTCSecurityIpHostsForSQLServerRequest {
	s.RegionId = &v
	return s
}

type DescribeDTCSecurityIpHostsForSQLServerResponseBody struct {
	DBInstanceId  *string                                                  `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId     *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	IpHostPairNum *string                                                  `json:"IpHostPairNum,omitempty" xml:"IpHostPairNum,omitempty"`
	Items         *DescribeDTCSecurityIpHostsForSQLServerResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponseBody) SetDBInstanceId(v string) *DescribeDTCSecurityIpHostsForSQLServerResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponseBody) SetRequestId(v string) *DescribeDTCSecurityIpHostsForSQLServerResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponseBody) SetIpHostPairNum(v string) *DescribeDTCSecurityIpHostsForSQLServerResponseBody {
	s.IpHostPairNum = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponseBody) SetItems(v *DescribeDTCSecurityIpHostsForSQLServerResponseBodyItems) *DescribeDTCSecurityIpHostsForSQLServerResponseBody {
	s.Items = v
	return s
}

type DescribeDTCSecurityIpHostsForSQLServerResponseBodyItems struct {
	WhiteListGroups []*DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups `json:"WhiteListGroups,omitempty" xml:"WhiteListGroups,omitempty" type:"Repeated"`
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponseBodyItems) SetWhiteListGroups(v []*DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups) *DescribeDTCSecurityIpHostsForSQLServerResponseBodyItems {
	s.WhiteListGroups = v
	return s
}

type DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups struct {
	SecurityIpHosts    *string `json:"SecurityIpHosts,omitempty" xml:"SecurityIpHosts,omitempty"`
	WhitelistGroupName *string `json:"WhitelistGroupName,omitempty" xml:"WhitelistGroupName,omitempty"`
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups) GoString() string {
	return s.String()
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups) SetSecurityIpHosts(v string) *DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups {
	s.SecurityIpHosts = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups) SetWhitelistGroupName(v string) *DescribeDTCSecurityIpHostsForSQLServerResponseBodyItemsWhiteListGroups {
	s.WhitelistGroupName = &v
	return s
}

type DescribeDTCSecurityIpHostsForSQLServerResponse struct {
	Headers map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDTCSecurityIpHostsForSQLServerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponse) GoString() string {
	return s.String()
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponse) SetHeaders(v map[string]*string) *DescribeDTCSecurityIpHostsForSQLServerResponse {
	s.Headers = v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponse) SetBody(v *DescribeDTCSecurityIpHostsForSQLServerResponseBody) *DescribeDTCSecurityIpHostsForSQLServerResponse {
	s.Body = v
	return s
}

type DescribeErrorLogsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeErrorLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeErrorLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeErrorLogsRequest) SetOwnerId(v int64) *DescribeErrorLogsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetResourceOwnerAccount(v string) *DescribeErrorLogsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetResourceOwnerId(v int64) *DescribeErrorLogsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetDBInstanceId(v string) *DescribeErrorLogsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetStartTime(v string) *DescribeErrorLogsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetEndTime(v string) *DescribeErrorLogsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetPageSize(v int32) *DescribeErrorLogsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetPageNumber(v int32) *DescribeErrorLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetOwnerAccount(v string) *DescribeErrorLogsRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeErrorLogsResponseBody struct {
	PageNumber       *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RequestId        *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *int32                              `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                              `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeErrorLogsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeErrorLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeErrorLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeErrorLogsResponseBody) SetPageNumber(v int32) *DescribeErrorLogsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeErrorLogsResponseBody) SetRequestId(v string) *DescribeErrorLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeErrorLogsResponseBody) SetPageRecordCount(v int32) *DescribeErrorLogsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeErrorLogsResponseBody) SetTotalRecordCount(v int32) *DescribeErrorLogsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeErrorLogsResponseBody) SetItems(v *DescribeErrorLogsResponseBodyItems) *DescribeErrorLogsResponseBody {
	s.Items = v
	return s
}

type DescribeErrorLogsResponseBodyItems struct {
	ErrorLog []*DescribeErrorLogsResponseBodyItemsErrorLog `json:"ErrorLog,omitempty" xml:"ErrorLog,omitempty" type:"Repeated"`
}

func (s DescribeErrorLogsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeErrorLogsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeErrorLogsResponseBodyItems) SetErrorLog(v []*DescribeErrorLogsResponseBodyItemsErrorLog) *DescribeErrorLogsResponseBodyItems {
	s.ErrorLog = v
	return s
}

type DescribeErrorLogsResponseBodyItemsErrorLog struct {
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorInfo  *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty"`
}

func (s DescribeErrorLogsResponseBodyItemsErrorLog) String() string {
	return tea.Prettify(s)
}

func (s DescribeErrorLogsResponseBodyItemsErrorLog) GoString() string {
	return s.String()
}

func (s *DescribeErrorLogsResponseBodyItemsErrorLog) SetCreateTime(v string) *DescribeErrorLogsResponseBodyItemsErrorLog {
	s.CreateTime = &v
	return s
}

func (s *DescribeErrorLogsResponseBodyItemsErrorLog) SetErrorInfo(v string) *DescribeErrorLogsResponseBodyItemsErrorLog {
	s.ErrorInfo = &v
	return s
}

type DescribeErrorLogsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeErrorLogsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeErrorLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeErrorLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeErrorLogsResponse) SetHeaders(v map[string]*string) *DescribeErrorLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeErrorLogsResponse) SetBody(v *DescribeErrorLogsResponseBody) *DescribeErrorLogsResponse {
	s.Body = v
	return s
}

type DescribeEventsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventsRequest) SetOwnerId(v int64) *DescribeEventsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeEventsRequest) SetResourceOwnerAccount(v string) *DescribeEventsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeEventsRequest) SetResourceOwnerId(v int64) *DescribeEventsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeEventsRequest) SetRegionId(v string) *DescribeEventsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEventsRequest) SetStartTime(v string) *DescribeEventsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeEventsRequest) SetEndTime(v string) *DescribeEventsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEventsRequest) SetPageSize(v int32) *DescribeEventsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEventsRequest) SetPageNumber(v int32) *DescribeEventsRequest {
	s.PageNumber = &v
	return s
}

type DescribeEventsResponseBody struct {
	PageNumber       *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RequestId        *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize         *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalRecordCount *int32                                `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	EventItems       *DescribeEventsResponseBodyEventItems `json:"EventItems,omitempty" xml:"EventItems,omitempty" type:"Struct"`
}

func (s DescribeEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventsResponseBody) SetPageNumber(v int32) *DescribeEventsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeEventsResponseBody) SetRequestId(v string) *DescribeEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventsResponseBody) SetPageSize(v int32) *DescribeEventsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEventsResponseBody) SetTotalRecordCount(v int32) *DescribeEventsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeEventsResponseBody) SetEventItems(v *DescribeEventsResponseBodyEventItems) *DescribeEventsResponseBody {
	s.EventItems = v
	return s
}

type DescribeEventsResponseBodyEventItems struct {
	EventItems []*DescribeEventsResponseBodyEventItemsEventItems `json:"EventItems,omitempty" xml:"EventItems,omitempty" type:"Repeated"`
}

func (s DescribeEventsResponseBodyEventItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsResponseBodyEventItems) GoString() string {
	return s.String()
}

func (s *DescribeEventsResponseBodyEventItems) SetEventItems(v []*DescribeEventsResponseBodyEventItemsEventItems) *DescribeEventsResponseBodyEventItems {
	s.EventItems = v
	return s
}

type DescribeEventsResponseBodyEventItemsEventItems struct {
	EventName       *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	EventTime       *string `json:"EventTime,omitempty" xml:"EventTime,omitempty"`
	EventUserType   *string `json:"EventUserType,omitempty" xml:"EventUserType,omitempty"`
	EventRecordTime *string `json:"EventRecordTime,omitempty" xml:"EventRecordTime,omitempty"`
	CallerUid       *int64  `json:"CallerUid,omitempty" xml:"CallerUid,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EventId         *int32  `json:"EventId,omitempty" xml:"EventId,omitempty"`
	EventType       *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	ResourceType    *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	EventPayload    *string `json:"EventPayload,omitempty" xml:"EventPayload,omitempty"`
	EventReason     *string `json:"EventReason,omitempty" xml:"EventReason,omitempty"`
	ResourceName    *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
}

func (s DescribeEventsResponseBodyEventItemsEventItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsResponseBodyEventItemsEventItems) GoString() string {
	return s.String()
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetEventName(v string) *DescribeEventsResponseBodyEventItemsEventItems {
	s.EventName = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetEventTime(v string) *DescribeEventsResponseBodyEventItemsEventItems {
	s.EventTime = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetEventUserType(v string) *DescribeEventsResponseBodyEventItemsEventItems {
	s.EventUserType = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetEventRecordTime(v string) *DescribeEventsResponseBodyEventItemsEventItems {
	s.EventRecordTime = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetCallerUid(v int64) *DescribeEventsResponseBodyEventItemsEventItems {
	s.CallerUid = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetRegionId(v string) *DescribeEventsResponseBodyEventItemsEventItems {
	s.RegionId = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetEventId(v int32) *DescribeEventsResponseBodyEventItemsEventItems {
	s.EventId = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetEventType(v string) *DescribeEventsResponseBodyEventItemsEventItems {
	s.EventType = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetResourceType(v string) *DescribeEventsResponseBodyEventItemsEventItems {
	s.ResourceType = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetEventPayload(v string) *DescribeEventsResponseBodyEventItemsEventItems {
	s.EventPayload = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetEventReason(v string) *DescribeEventsResponseBodyEventItemsEventItems {
	s.EventReason = &v
	return s
}

func (s *DescribeEventsResponseBodyEventItemsEventItems) SetResourceName(v string) *DescribeEventsResponseBodyEventItemsEventItems {
	s.ResourceName = &v
	return s
}

type DescribeEventsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeEventsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventsResponse) SetHeaders(v map[string]*string) *DescribeEventsResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventsResponse) SetBody(v *DescribeEventsResponseBody) *DescribeEventsResponse {
	s.Body = v
	return s
}

type DescribeHADiagnoseConfigRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeHADiagnoseConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHADiagnoseConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeHADiagnoseConfigRequest) SetOwnerId(v int64) *DescribeHADiagnoseConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHADiagnoseConfigRequest) SetResourceOwnerAccount(v string) *DescribeHADiagnoseConfigRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeHADiagnoseConfigRequest) SetResourceOwnerId(v int64) *DescribeHADiagnoseConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeHADiagnoseConfigRequest) SetDBInstanceId(v string) *DescribeHADiagnoseConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHADiagnoseConfigRequest) SetRegionId(v string) *DescribeHADiagnoseConfigRequest {
	s.RegionId = &v
	return s
}

type DescribeHADiagnoseConfigResponseBody struct {
	TcpConnectionType *string `json:"TcpConnectionType,omitempty" xml:"TcpConnectionType,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeHADiagnoseConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHADiagnoseConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHADiagnoseConfigResponseBody) SetTcpConnectionType(v string) *DescribeHADiagnoseConfigResponseBody {
	s.TcpConnectionType = &v
	return s
}

func (s *DescribeHADiagnoseConfigResponseBody) SetRequestId(v string) *DescribeHADiagnoseConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeHADiagnoseConfigResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeHADiagnoseConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHADiagnoseConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHADiagnoseConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeHADiagnoseConfigResponse) SetHeaders(v map[string]*string) *DescribeHADiagnoseConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeHADiagnoseConfigResponse) SetBody(v *DescribeHADiagnoseConfigResponseBody) *DescribeHADiagnoseConfigResponse {
	s.Body = v
	return s
}

type DescribeHASwitchConfigRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeHASwitchConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHASwitchConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeHASwitchConfigRequest) SetOwnerId(v int64) *DescribeHASwitchConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeHASwitchConfigRequest) SetResourceOwnerAccount(v string) *DescribeHASwitchConfigRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeHASwitchConfigRequest) SetResourceOwnerId(v int64) *DescribeHASwitchConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeHASwitchConfigRequest) SetDBInstanceId(v string) *DescribeHASwitchConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHASwitchConfigRequest) SetRegionId(v string) *DescribeHASwitchConfigRequest {
	s.RegionId = &v
	return s
}

type DescribeHASwitchConfigResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ManualHATime *string `json:"ManualHATime,omitempty" xml:"ManualHATime,omitempty"`
	HAConfig     *string `json:"HAConfig,omitempty" xml:"HAConfig,omitempty"`
}

func (s DescribeHASwitchConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHASwitchConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHASwitchConfigResponseBody) SetRequestId(v string) *DescribeHASwitchConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHASwitchConfigResponseBody) SetManualHATime(v string) *DescribeHASwitchConfigResponseBody {
	s.ManualHATime = &v
	return s
}

func (s *DescribeHASwitchConfigResponseBody) SetHAConfig(v string) *DescribeHASwitchConfigResponseBody {
	s.HAConfig = &v
	return s
}

type DescribeHASwitchConfigResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeHASwitchConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHASwitchConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHASwitchConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeHASwitchConfigResponse) SetHeaders(v map[string]*string) *DescribeHASwitchConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeHASwitchConfigResponse) SetBody(v *DescribeHASwitchConfigResponseBody) *DescribeHASwitchConfigResponse {
	s.Body = v
	return s
}

type DescribeInstanceAutoRenewalAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId              *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeInstanceAutoRenewalAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewalAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetOwnerId(v int64) *DescribeInstanceAutoRenewalAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetResourceOwnerAccount(v string) *DescribeInstanceAutoRenewalAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetResourceOwnerId(v int64) *DescribeInstanceAutoRenewalAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetClientToken(v string) *DescribeInstanceAutoRenewalAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetProxyId(v string) *DescribeInstanceAutoRenewalAttributeRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetRegionId(v string) *DescribeInstanceAutoRenewalAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetDBInstanceId(v string) *DescribeInstanceAutoRenewalAttributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetPageSize(v int32) *DescribeInstanceAutoRenewalAttributeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetPageNumber(v int32) *DescribeInstanceAutoRenewalAttributeRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetOwnerAccount(v string) *DescribeInstanceAutoRenewalAttributeRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeInstanceAutoRenewalAttributeResponseBody struct {
	RequestId        *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                                                 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                                 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeInstanceAutoRenewalAttributeResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeInstanceAutoRenewalAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewalAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBody) SetRequestId(v string) *DescribeInstanceAutoRenewalAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBody) SetPageNumber(v int32) *DescribeInstanceAutoRenewalAttributeResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBody) SetPageRecordCount(v int32) *DescribeInstanceAutoRenewalAttributeResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBody) SetTotalRecordCount(v int32) *DescribeInstanceAutoRenewalAttributeResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBody) SetItems(v *DescribeInstanceAutoRenewalAttributeResponseBodyItems) *DescribeInstanceAutoRenewalAttributeResponseBody {
	s.Items = v
	return s
}

type DescribeInstanceAutoRenewalAttributeResponseBodyItems struct {
	Item []*DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s DescribeInstanceAutoRenewalAttributeResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewalAttributeResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBodyItems) SetItem(v []*DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem) *DescribeInstanceAutoRenewalAttributeResponseBodyItems {
	s.Item = v
	return s
}

type DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem struct {
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Duration     *int32  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AutoRenew    *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem) SetStatus(v string) *DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem {
	s.Status = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem) SetDuration(v int32) *DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem {
	s.Duration = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem) SetDBInstanceId(v string) *DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem) SetAutoRenew(v string) *DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem {
	s.AutoRenew = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem) SetRegionId(v string) *DescribeInstanceAutoRenewalAttributeResponseBodyItemsItem {
	s.RegionId = &v
	return s
}

type DescribeInstanceAutoRenewalAttributeResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceAutoRenewalAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceAutoRenewalAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewalAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewalAttributeResponse) SetHeaders(v map[string]*string) *DescribeInstanceAutoRenewalAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponse) SetBody(v *DescribeInstanceAutoRenewalAttributeResponseBody) *DescribeInstanceAutoRenewalAttributeResponse {
	s.Body = v
	return s
}

type DescribeInstanceCrossBackupPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInstanceCrossBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceCrossBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceCrossBackupPolicyRequest) SetOwnerId(v int64) *DescribeInstanceCrossBackupPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyRequest) SetResourceOwnerAccount(v string) *DescribeInstanceCrossBackupPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyRequest) SetResourceOwnerId(v int64) *DescribeInstanceCrossBackupPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyRequest) SetDBInstanceId(v string) *DescribeInstanceCrossBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyRequest) SetRegionId(v string) *DescribeInstanceCrossBackupPolicyRequest {
	s.RegionId = &v
	return s
}

type DescribeInstanceCrossBackupPolicyResponseBody struct {
	LogBackupEnabledTime  *string `json:"LogBackupEnabledTime,omitempty" xml:"LogBackupEnabledTime,omitempty"`
	BackupEnabled         *string `json:"BackupEnabled,omitempty" xml:"BackupEnabled,omitempty"`
	DBInstanceStatus      *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	LockMode              *string `json:"LockMode,omitempty" xml:"LockMode,omitempty"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LogBackupEnabled      *string `json:"LogBackupEnabled,omitempty" xml:"LogBackupEnabled,omitempty"`
	RequestId             *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RetentType            *int32  `json:"RetentType,omitempty" xml:"RetentType,omitempty"`
	Retention             *int32  `json:"Retention,omitempty" xml:"Retention,omitempty"`
	CrossBackupType       *string `json:"CrossBackupType,omitempty" xml:"CrossBackupType,omitempty"`
	CrossBackupRegion     *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Engine                *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	BackupEnabledTime     *string `json:"BackupEnabledTime,omitempty" xml:"BackupEnabledTime,omitempty"`
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
}

func (s DescribeInstanceCrossBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceCrossBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetLogBackupEnabledTime(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.LogBackupEnabledTime = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetBackupEnabled(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.BackupEnabled = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetDBInstanceStatus(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetLockMode(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.LockMode = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetEngineVersion(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.EngineVersion = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetRegionId(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetLogBackupEnabled(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.LogBackupEnabled = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetRequestId(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetRetentType(v int32) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.RetentType = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetRetention(v int32) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.Retention = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetCrossBackupType(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.CrossBackupType = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetCrossBackupRegion(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetDBInstanceId(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetEngine(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetBackupEnabledTime(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.BackupEnabledTime = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponseBody) SetDBInstanceDescription(v string) *DescribeInstanceCrossBackupPolicyResponseBody {
	s.DBInstanceDescription = &v
	return s
}

type DescribeInstanceCrossBackupPolicyResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceCrossBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceCrossBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceCrossBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetHeaders(v map[string]*string) *DescribeInstanceCrossBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetBody(v *DescribeInstanceCrossBackupPolicyResponseBody) *DescribeInstanceCrossBackupPolicyResponse {
	s.Body = v
	return s
}

type DescribeInstanceKeywordsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Key                  *string `json:"Key,omitempty" xml:"Key,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeInstanceKeywordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceKeywordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceKeywordsRequest) SetOwnerId(v int64) *DescribeInstanceKeywordsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInstanceKeywordsRequest) SetResourceOwnerAccount(v string) *DescribeInstanceKeywordsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeInstanceKeywordsRequest) SetResourceOwnerId(v int64) *DescribeInstanceKeywordsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeInstanceKeywordsRequest) SetKey(v string) *DescribeInstanceKeywordsRequest {
	s.Key = &v
	return s
}

func (s *DescribeInstanceKeywordsRequest) SetOwnerAccount(v string) *DescribeInstanceKeywordsRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeInstanceKeywordsResponseBody struct {
	Key       *string                                    `json:"Key,omitempty" xml:"Key,omitempty"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Words     *DescribeInstanceKeywordsResponseBodyWords `json:"Words,omitempty" xml:"Words,omitempty" type:"Struct"`
}

func (s DescribeInstanceKeywordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceKeywordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceKeywordsResponseBody) SetKey(v string) *DescribeInstanceKeywordsResponseBody {
	s.Key = &v
	return s
}

func (s *DescribeInstanceKeywordsResponseBody) SetRequestId(v string) *DescribeInstanceKeywordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceKeywordsResponseBody) SetWords(v *DescribeInstanceKeywordsResponseBodyWords) *DescribeInstanceKeywordsResponseBody {
	s.Words = v
	return s
}

type DescribeInstanceKeywordsResponseBodyWords struct {
	Word []*string `json:"word,omitempty" xml:"word,omitempty" type:"Repeated"`
}

func (s DescribeInstanceKeywordsResponseBodyWords) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceKeywordsResponseBodyWords) GoString() string {
	return s.String()
}

func (s *DescribeInstanceKeywordsResponseBodyWords) SetWord(v []*string) *DescribeInstanceKeywordsResponseBodyWords {
	s.Word = v
	return s
}

type DescribeInstanceKeywordsResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeInstanceKeywordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceKeywordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceKeywordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceKeywordsResponse) SetHeaders(v map[string]*string) *DescribeInstanceKeywordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceKeywordsResponse) SetBody(v *DescribeInstanceKeywordsResponseBody) *DescribeInstanceKeywordsResponse {
	s.Body = v
	return s
}

type DescribeLocalAvailableRecoveryTimeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Region               *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DescribeLocalAvailableRecoveryTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalAvailableRecoveryTimeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLocalAvailableRecoveryTimeRequest) SetOwnerId(v int64) *DescribeLocalAvailableRecoveryTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeRequest) SetResourceOwnerAccount(v string) *DescribeLocalAvailableRecoveryTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeRequest) SetResourceOwnerId(v int64) *DescribeLocalAvailableRecoveryTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeRequest) SetDBInstanceId(v string) *DescribeLocalAvailableRecoveryTimeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeRequest) SetRegion(v string) *DescribeLocalAvailableRecoveryTimeRequest {
	s.Region = &v
	return s
}

type DescribeLocalAvailableRecoveryTimeResponseBody struct {
	RecoveryEndTime   *string `json:"RecoveryEndTime,omitempty" xml:"RecoveryEndTime,omitempty"`
	DBInstanceId      *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RecoveryBeginTime *string `json:"RecoveryBeginTime,omitempty" xml:"RecoveryBeginTime,omitempty"`
}

func (s DescribeLocalAvailableRecoveryTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalAvailableRecoveryTimeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLocalAvailableRecoveryTimeResponseBody) SetRecoveryEndTime(v string) *DescribeLocalAvailableRecoveryTimeResponseBody {
	s.RecoveryEndTime = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeResponseBody) SetDBInstanceId(v string) *DescribeLocalAvailableRecoveryTimeResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeResponseBody) SetRequestId(v string) *DescribeLocalAvailableRecoveryTimeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeResponseBody) SetRecoveryBeginTime(v string) *DescribeLocalAvailableRecoveryTimeResponseBody {
	s.RecoveryBeginTime = &v
	return s
}

type DescribeLocalAvailableRecoveryTimeResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLocalAvailableRecoveryTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLocalAvailableRecoveryTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalAvailableRecoveryTimeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLocalAvailableRecoveryTimeResponse) SetHeaders(v map[string]*string) *DescribeLocalAvailableRecoveryTimeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeResponse) SetBody(v *DescribeLocalAvailableRecoveryTimeResponseBody) *DescribeLocalAvailableRecoveryTimeResponse {
	s.Body = v
	return s
}

type DescribeLogBackupFilesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeLogBackupFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupFilesRequest) SetOwnerId(v int64) *DescribeLogBackupFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetResourceOwnerAccount(v string) *DescribeLogBackupFilesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetResourceOwnerId(v int64) *DescribeLogBackupFilesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetDBInstanceId(v string) *DescribeLogBackupFilesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetStartTime(v string) *DescribeLogBackupFilesRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetEndTime(v string) *DescribeLogBackupFilesRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetPageSize(v int32) *DescribeLogBackupFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetPageNumber(v int32) *DescribeLogBackupFilesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetOwnerAccount(v string) *DescribeLogBackupFilesRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeLogBackupFilesResponseBody struct {
	TotalFileSize    *int64                                   `json:"TotalFileSize,omitempty" xml:"TotalFileSize,omitempty"`
	PageNumber       *int32                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RequestId        *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *int32                                   `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                   `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeLogBackupFilesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeLogBackupFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupFilesResponseBody) SetTotalFileSize(v int64) *DescribeLogBackupFilesResponseBody {
	s.TotalFileSize = &v
	return s
}

func (s *DescribeLogBackupFilesResponseBody) SetPageNumber(v int32) *DescribeLogBackupFilesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLogBackupFilesResponseBody) SetRequestId(v string) *DescribeLogBackupFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLogBackupFilesResponseBody) SetPageRecordCount(v int32) *DescribeLogBackupFilesResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeLogBackupFilesResponseBody) SetTotalRecordCount(v int32) *DescribeLogBackupFilesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeLogBackupFilesResponseBody) SetItems(v *DescribeLogBackupFilesResponseBodyItems) *DescribeLogBackupFilesResponseBody {
	s.Items = v
	return s
}

type DescribeLogBackupFilesResponseBodyItems struct {
	BinLogFile []*DescribeLogBackupFilesResponseBodyItemsBinLogFile `json:"BinLogFile,omitempty" xml:"BinLogFile,omitempty" type:"Repeated"`
}

func (s DescribeLogBackupFilesResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupFilesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupFilesResponseBodyItems) SetBinLogFile(v []*DescribeLogBackupFilesResponseBodyItemsBinLogFile) *DescribeLogBackupFilesResponseBodyItems {
	s.BinLogFile = v
	return s
}

type DescribeLogBackupFilesResponseBodyItemsBinLogFile struct {
	LogBeginTime         *string `json:"LogBeginTime,omitempty" xml:"LogBeginTime,omitempty"`
	IntranetDownloadLink *string `json:"IntranetDownloadLink,omitempty" xml:"IntranetDownloadLink,omitempty"`
	LinkExpiredTime      *string `json:"LinkExpiredTime,omitempty" xml:"LinkExpiredTime,omitempty"`
	DownloadLink         *string `json:"DownloadLink,omitempty" xml:"DownloadLink,omitempty"`
	LogEndTime           *string `json:"LogEndTime,omitempty" xml:"LogEndTime,omitempty"`
	FileSize             *int64  `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s DescribeLogBackupFilesResponseBodyItemsBinLogFile) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupFilesResponseBodyItemsBinLogFile) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupFilesResponseBodyItemsBinLogFile) SetLogBeginTime(v string) *DescribeLogBackupFilesResponseBodyItemsBinLogFile {
	s.LogBeginTime = &v
	return s
}

func (s *DescribeLogBackupFilesResponseBodyItemsBinLogFile) SetIntranetDownloadLink(v string) *DescribeLogBackupFilesResponseBodyItemsBinLogFile {
	s.IntranetDownloadLink = &v
	return s
}

func (s *DescribeLogBackupFilesResponseBodyItemsBinLogFile) SetLinkExpiredTime(v string) *DescribeLogBackupFilesResponseBodyItemsBinLogFile {
	s.LinkExpiredTime = &v
	return s
}

func (s *DescribeLogBackupFilesResponseBodyItemsBinLogFile) SetDownloadLink(v string) *DescribeLogBackupFilesResponseBodyItemsBinLogFile {
	s.DownloadLink = &v
	return s
}

func (s *DescribeLogBackupFilesResponseBodyItemsBinLogFile) SetLogEndTime(v string) *DescribeLogBackupFilesResponseBodyItemsBinLogFile {
	s.LogEndTime = &v
	return s
}

func (s *DescribeLogBackupFilesResponseBodyItemsBinLogFile) SetFileSize(v int64) *DescribeLogBackupFilesResponseBodyItemsBinLogFile {
	s.FileSize = &v
	return s
}

type DescribeLogBackupFilesResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLogBackupFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLogBackupFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupFilesResponse) SetHeaders(v map[string]*string) *DescribeLogBackupFilesResponse {
	s.Headers = v
	return s
}

func (s *DescribeLogBackupFilesResponse) SetBody(v *DescribeLogBackupFilesResponseBody) *DescribeLogBackupFilesResponse {
	s.Body = v
	return s
}

type DescribeMetaListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RestoreType          *string `json:"RestoreType,omitempty" xml:"RestoreType,omitempty"`
	BackupSetID          *int32  `json:"BackupSetID,omitempty" xml:"BackupSetID,omitempty"`
	RestoreTime          *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	GetDbName            *string `json:"GetDbName,omitempty" xml:"GetDbName,omitempty"`
	Pattern              *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageIndex            *int32  `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
}

func (s DescribeMetaListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaListRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetaListRequest) SetOwnerId(v int64) *DescribeMetaListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMetaListRequest) SetResourceOwnerAccount(v string) *DescribeMetaListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeMetaListRequest) SetResourceOwnerId(v int64) *DescribeMetaListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeMetaListRequest) SetClientToken(v string) *DescribeMetaListRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeMetaListRequest) SetDBInstanceId(v string) *DescribeMetaListRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeMetaListRequest) SetRestoreType(v string) *DescribeMetaListRequest {
	s.RestoreType = &v
	return s
}

func (s *DescribeMetaListRequest) SetBackupSetID(v int32) *DescribeMetaListRequest {
	s.BackupSetID = &v
	return s
}

func (s *DescribeMetaListRequest) SetRestoreTime(v string) *DescribeMetaListRequest {
	s.RestoreTime = &v
	return s
}

func (s *DescribeMetaListRequest) SetGetDbName(v string) *DescribeMetaListRequest {
	s.GetDbName = &v
	return s
}

func (s *DescribeMetaListRequest) SetPattern(v string) *DescribeMetaListRequest {
	s.Pattern = &v
	return s
}

func (s *DescribeMetaListRequest) SetPageSize(v int32) *DescribeMetaListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMetaListRequest) SetPageIndex(v int32) *DescribeMetaListRequest {
	s.PageIndex = &v
	return s
}

type DescribeMetaListResponseBody struct {
	DBInstanceName   *string                            `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	TotalPageCount   *int32                             `json:"TotalPageCount,omitempty" xml:"TotalPageCount,omitempty"`
	RequestId        *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *int32                             `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                             `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	PageNumber       *int32                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items            *DescribeMetaListResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeMetaListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetaListResponseBody) SetDBInstanceName(v string) *DescribeMetaListResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeMetaListResponseBody) SetTotalPageCount(v int32) *DescribeMetaListResponseBody {
	s.TotalPageCount = &v
	return s
}

func (s *DescribeMetaListResponseBody) SetRequestId(v string) *DescribeMetaListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetaListResponseBody) SetPageRecordCount(v int32) *DescribeMetaListResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeMetaListResponseBody) SetTotalRecordCount(v int32) *DescribeMetaListResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeMetaListResponseBody) SetPageNumber(v int32) *DescribeMetaListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMetaListResponseBody) SetItems(v *DescribeMetaListResponseBodyItems) *DescribeMetaListResponseBody {
	s.Items = v
	return s
}

type DescribeMetaListResponseBodyItems struct {
	Meta []*DescribeMetaListResponseBodyItemsMeta `json:"Meta,omitempty" xml:"Meta,omitempty" type:"Repeated"`
}

func (s DescribeMetaListResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaListResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeMetaListResponseBodyItems) SetMeta(v []*DescribeMetaListResponseBodyItemsMeta) *DescribeMetaListResponseBodyItems {
	s.Meta = v
	return s
}

type DescribeMetaListResponseBodyItemsMeta struct {
	Tables   *string `json:"Tables,omitempty" xml:"Tables,omitempty"`
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	Size     *string `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeMetaListResponseBodyItemsMeta) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaListResponseBodyItemsMeta) GoString() string {
	return s.String()
}

func (s *DescribeMetaListResponseBodyItemsMeta) SetTables(v string) *DescribeMetaListResponseBodyItemsMeta {
	s.Tables = &v
	return s
}

func (s *DescribeMetaListResponseBodyItemsMeta) SetDatabase(v string) *DescribeMetaListResponseBodyItemsMeta {
	s.Database = &v
	return s
}

func (s *DescribeMetaListResponseBodyItemsMeta) SetSize(v string) *DescribeMetaListResponseBodyItemsMeta {
	s.Size = &v
	return s
}

type DescribeMetaListResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeMetaListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMetaListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaListResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetaListResponse) SetHeaders(v map[string]*string) *DescribeMetaListResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetaListResponse) SetBody(v *DescribeMetaListResponseBody) *DescribeMetaListResponse {
	s.Body = v
	return s
}

type DescribeMigrateTaskByIdRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	MigrateTaskId        *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
}

func (s DescribeMigrateTaskByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTaskByIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTaskByIdRequest) SetOwnerId(v int64) *DescribeMigrateTaskByIdRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMigrateTaskByIdRequest) SetResourceOwnerAccount(v string) *DescribeMigrateTaskByIdRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeMigrateTaskByIdRequest) SetResourceOwnerId(v int64) *DescribeMigrateTaskByIdRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeMigrateTaskByIdRequest) SetDBInstanceId(v string) *DescribeMigrateTaskByIdRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeMigrateTaskByIdRequest) SetMigrateTaskId(v string) *DescribeMigrateTaskByIdRequest {
	s.MigrateTaskId = &v
	return s
}

type DescribeMigrateTaskByIdResponseBody struct {
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	DBInstanceName *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	CreateTime     *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DBName         *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	BackupMode     *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	MigrateTaskId  *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
	IsDBReplaced   *string `json:"IsDBReplaced,omitempty" xml:"IsDBReplaced,omitempty"`
}

func (s DescribeMigrateTaskByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTaskByIdResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTaskByIdResponseBody) SetStatus(v string) *DescribeMigrateTaskByIdResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponseBody) SetEndTime(v string) *DescribeMigrateTaskByIdResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponseBody) SetDBInstanceName(v string) *DescribeMigrateTaskByIdResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponseBody) SetRequestId(v string) *DescribeMigrateTaskByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponseBody) SetDescription(v string) *DescribeMigrateTaskByIdResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponseBody) SetCreateTime(v string) *DescribeMigrateTaskByIdResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponseBody) SetDBName(v string) *DescribeMigrateTaskByIdResponseBody {
	s.DBName = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponseBody) SetBackupMode(v string) *DescribeMigrateTaskByIdResponseBody {
	s.BackupMode = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponseBody) SetMigrateTaskId(v string) *DescribeMigrateTaskByIdResponseBody {
	s.MigrateTaskId = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponseBody) SetIsDBReplaced(v string) *DescribeMigrateTaskByIdResponseBody {
	s.IsDBReplaced = &v
	return s
}

type DescribeMigrateTaskByIdResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeMigrateTaskByIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMigrateTaskByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTaskByIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTaskByIdResponse) SetHeaders(v map[string]*string) *DescribeMigrateTaskByIdResponse {
	s.Headers = v
	return s
}

func (s *DescribeMigrateTaskByIdResponse) SetBody(v *DescribeMigrateTaskByIdResponseBody) *DescribeMigrateTaskByIdResponse {
	s.Body = v
	return s
}

type DescribeMigrateTasksRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeMigrateTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksRequest) SetOwnerId(v int64) *DescribeMigrateTasksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetResourceOwnerAccount(v string) *DescribeMigrateTasksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetResourceOwnerId(v int64) *DescribeMigrateTasksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetDBInstanceId(v string) *DescribeMigrateTasksRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetStartTime(v string) *DescribeMigrateTasksRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetEndTime(v string) *DescribeMigrateTasksRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetPageSize(v int32) *DescribeMigrateTasksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetPageNumber(v int32) *DescribeMigrateTasksRequest {
	s.PageNumber = &v
	return s
}

type DescribeMigrateTasksResponseBody struct {
	DBInstanceId     *string                                `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	PageNumber       *int32                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	RequestId        *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *int32                                 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeMigrateTasksResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeMigrateTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksResponseBody) SetDBInstanceId(v string) *DescribeMigrateTasksResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeMigrateTasksResponseBody) SetPageNumber(v int32) *DescribeMigrateTasksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMigrateTasksResponseBody) SetRequestId(v string) *DescribeMigrateTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrateTasksResponseBody) SetPageRecordCount(v int32) *DescribeMigrateTasksResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeMigrateTasksResponseBody) SetTotalRecordCount(v int32) *DescribeMigrateTasksResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeMigrateTasksResponseBody) SetItems(v *DescribeMigrateTasksResponseBodyItems) *DescribeMigrateTasksResponseBody {
	s.Items = v
	return s
}

type DescribeMigrateTasksResponseBodyItems struct {
	MigrateTask []*DescribeMigrateTasksResponseBodyItemsMigrateTask `json:"MigrateTask,omitempty" xml:"MigrateTask,omitempty" type:"Repeated"`
}

func (s DescribeMigrateTasksResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksResponseBodyItems) SetMigrateTask(v []*DescribeMigrateTasksResponseBodyItemsMigrateTask) *DescribeMigrateTasksResponseBodyItems {
	s.MigrateTask = v
	return s
}

type DescribeMigrateTasksResponseBodyItemsMigrateTask struct {
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	CreateTime    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DBName        *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	BackupMode    *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	MigrateTaskId *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
	IsDBReplaced  *string `json:"IsDBReplaced,omitempty" xml:"IsDBReplaced,omitempty"`
}

func (s DescribeMigrateTasksResponseBodyItemsMigrateTask) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksResponseBodyItemsMigrateTask) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksResponseBodyItemsMigrateTask) SetEndTime(v string) *DescribeMigrateTasksResponseBodyItemsMigrateTask {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTasksResponseBodyItemsMigrateTask) SetStatus(v string) *DescribeMigrateTasksResponseBodyItemsMigrateTask {
	s.Status = &v
	return s
}

func (s *DescribeMigrateTasksResponseBodyItemsMigrateTask) SetDescription(v string) *DescribeMigrateTasksResponseBodyItemsMigrateTask {
	s.Description = &v
	return s
}

func (s *DescribeMigrateTasksResponseBodyItemsMigrateTask) SetCreateTime(v string) *DescribeMigrateTasksResponseBodyItemsMigrateTask {
	s.CreateTime = &v
	return s
}

func (s *DescribeMigrateTasksResponseBodyItemsMigrateTask) SetDBName(v string) *DescribeMigrateTasksResponseBodyItemsMigrateTask {
	s.DBName = &v
	return s
}

func (s *DescribeMigrateTasksResponseBodyItemsMigrateTask) SetBackupMode(v string) *DescribeMigrateTasksResponseBodyItemsMigrateTask {
	s.BackupMode = &v
	return s
}

func (s *DescribeMigrateTasksResponseBodyItemsMigrateTask) SetMigrateTaskId(v string) *DescribeMigrateTasksResponseBodyItemsMigrateTask {
	s.MigrateTaskId = &v
	return s
}

func (s *DescribeMigrateTasksResponseBodyItemsMigrateTask) SetIsDBReplaced(v string) *DescribeMigrateTasksResponseBodyItemsMigrateTask {
	s.IsDBReplaced = &v
	return s
}

type DescribeMigrateTasksResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeMigrateTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMigrateTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksResponse) SetHeaders(v map[string]*string) *DescribeMigrateTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeMigrateTasksResponse) SetBody(v *DescribeMigrateTasksResponseBody) *DescribeMigrateTasksResponse {
	s.Body = v
	return s
}

type DescribeMigrateTasksForSQLServerRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeMigrateTasksForSQLServerRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksForSQLServerRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetOwnerId(v int64) *DescribeMigrateTasksForSQLServerRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetResourceOwnerAccount(v string) *DescribeMigrateTasksForSQLServerRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetResourceOwnerId(v int64) *DescribeMigrateTasksForSQLServerRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetDBInstanceId(v string) *DescribeMigrateTasksForSQLServerRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetStartTime(v string) *DescribeMigrateTasksForSQLServerRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetEndTime(v string) *DescribeMigrateTasksForSQLServerRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetPageSize(v int32) *DescribeMigrateTasksForSQLServerRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetPageNumber(v int32) *DescribeMigrateTasksForSQLServerRequest {
	s.PageNumber = &v
	return s
}

type DescribeMigrateTasksForSQLServerResponseBody struct {
	EndTime          *string                                            `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	DBInstanceName   *string                                            `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	StartTime        *string                                            `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	RequestId        *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *int32                                             `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                             `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	DBInstanceID     *string                                            `json:"DBInstanceID,omitempty" xml:"DBInstanceID,omitempty"`
	PageNumber       *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items            *DescribeMigrateTasksForSQLServerResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeMigrateTasksForSQLServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksForSQLServerResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksForSQLServerResponseBody) SetEndTime(v string) *DescribeMigrateTasksForSQLServerResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBody) SetDBInstanceName(v string) *DescribeMigrateTasksForSQLServerResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBody) SetStartTime(v string) *DescribeMigrateTasksForSQLServerResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBody) SetRequestId(v string) *DescribeMigrateTasksForSQLServerResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBody) SetPageRecordCount(v int32) *DescribeMigrateTasksForSQLServerResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBody) SetTotalRecordCount(v int32) *DescribeMigrateTasksForSQLServerResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBody) SetDBInstanceID(v string) *DescribeMigrateTasksForSQLServerResponseBody {
	s.DBInstanceID = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBody) SetPageNumber(v int32) *DescribeMigrateTasksForSQLServerResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBody) SetItems(v *DescribeMigrateTasksForSQLServerResponseBodyItems) *DescribeMigrateTasksForSQLServerResponseBody {
	s.Items = v
	return s
}

type DescribeMigrateTasksForSQLServerResponseBodyItems struct {
	MigrateTask []*DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask `json:"MigrateTask,omitempty" xml:"MigrateTask,omitempty" type:"Repeated"`
}

func (s DescribeMigrateTasksForSQLServerResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksForSQLServerResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksForSQLServerResponseBodyItems) SetMigrateTask(v []*DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) *DescribeMigrateTasksForSQLServerResponseBodyItems {
	s.MigrateTask = v
	return s
}

type DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask struct {
	MigrateIaskId *string `json:"MigrateIaskId,omitempty" xml:"MigrateIaskId,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskType      *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	CreateTime    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DBName        *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	IsDBReplaced  *string `json:"IsDBReplaced,omitempty" xml:"IsDBReplaced,omitempty"`
	Desc          *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
}

func (s DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) SetMigrateIaskId(v string) *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask {
	s.MigrateIaskId = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) SetEndTime(v string) *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) SetStatus(v string) *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask {
	s.Status = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) SetTaskType(v string) *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask {
	s.TaskType = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) SetCreateTime(v string) *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask {
	s.CreateTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) SetDBName(v string) *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask {
	s.DBName = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) SetIsDBReplaced(v string) *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask {
	s.IsDBReplaced = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask) SetDesc(v string) *DescribeMigrateTasksForSQLServerResponseBodyItemsMigrateTask {
	s.Desc = &v
	return s
}

type DescribeMigrateTasksForSQLServerResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeMigrateTasksForSQLServerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMigrateTasksForSQLServerResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksForSQLServerResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetHeaders(v map[string]*string) *DescribeMigrateTasksForSQLServerResponse {
	s.Headers = v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetBody(v *DescribeMigrateTasksForSQLServerResponseBody) *DescribeMigrateTasksForSQLServerResponse {
	s.Body = v
	return s
}

type DescribeModifyParameterLogRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeModifyParameterLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogRequest) SetOwnerId(v int64) *DescribeModifyParameterLogRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetResourceOwnerAccount(v string) *DescribeModifyParameterLogRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetResourceOwnerId(v int64) *DescribeModifyParameterLogRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetDBInstanceId(v string) *DescribeModifyParameterLogRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetStartTime(v string) *DescribeModifyParameterLogRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetEndTime(v string) *DescribeModifyParameterLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetPageSize(v int32) *DescribeModifyParameterLogRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetPageNumber(v int32) *DescribeModifyParameterLogRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetOwnerAccount(v string) *DescribeModifyParameterLogRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeModifyParameterLogResponseBody struct {
	RequestId        *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageRecordCount  *int32                                       `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                       `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	DBInstanceId     *string                                      `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Engine           *string                                      `json:"Engine,omitempty" xml:"Engine,omitempty"`
	PageNumber       *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	EngineVersion    *string                                      `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	Items            *DescribeModifyParameterLogResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeModifyParameterLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponseBody) SetRequestId(v string) *DescribeModifyParameterLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBody) SetPageRecordCount(v int32) *DescribeModifyParameterLogResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBody) SetTotalRecordCount(v int32) *DescribeModifyParameterLogResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBody) SetDBInstanceId(v string) *DescribeModifyParameterLogResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBody) SetEngine(v string) *DescribeModifyParameterLogResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBody) SetPageNumber(v int32) *DescribeModifyParameterLogResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBody) SetEngineVersion(v string) *DescribeModifyParameterLogResponseBody {
	s.EngineVersion = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBody) SetItems(v *DescribeModifyParameterLogResponseBodyItems) *DescribeModifyParameterLogResponseBody {
	s.Items = v
	return s
}

type DescribeModifyParameterLogResponseBodyItems struct {
	ParameterChangeLog []*DescribeModifyParameterLogResponseBodyItemsParameterChangeLog `json:"ParameterChangeLog,omitempty" xml:"ParameterChangeLog,omitempty" type:"Repeated"`
}

func (s DescribeModifyParameterLogResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponseBodyItems) SetParameterChangeLog(v []*DescribeModifyParameterLogResponseBodyItemsParameterChangeLog) *DescribeModifyParameterLogResponseBodyItems {
	s.ParameterChangeLog = v
	return s
}

type DescribeModifyParameterLogResponseBodyItemsParameterChangeLog struct {
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	OldParameterValue *string `json:"OldParameterValue,omitempty" xml:"OldParameterValue,omitempty"`
	ParameterName     *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	NewParameterValue *string `json:"NewParameterValue,omitempty" xml:"NewParameterValue,omitempty"`
	ModifyTime        *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
}

func (s DescribeModifyParameterLogResponseBodyItemsParameterChangeLog) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogResponseBodyItemsParameterChangeLog) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponseBodyItemsParameterChangeLog) SetStatus(v string) *DescribeModifyParameterLogResponseBodyItemsParameterChangeLog {
	s.Status = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyItemsParameterChangeLog) SetOldParameterValue(v string) *DescribeModifyParameterLogResponseBodyItemsParameterChangeLog {
	s.OldParameterValue = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyItemsParameterChangeLog) SetParameterName(v string) *DescribeModifyParameterLogResponseBodyItemsParameterChangeLog {
	s.ParameterName = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyItemsParameterChangeLog) SetNewParameterValue(v string) *DescribeModifyParameterLogResponseBodyItemsParameterChangeLog {
	s.NewParameterValue = &v
	return s
}

func (s *DescribeModifyParameterLogResponseBodyItemsParameterChangeLog) SetModifyTime(v string) *DescribeModifyParameterLogResponseBodyItemsParameterChangeLog {
	s.ModifyTime = &v
	return s
}

type DescribeModifyParameterLogResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeModifyParameterLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeModifyParameterLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponse) SetHeaders(v map[string]*string) *DescribeModifyParameterLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetBody(v *DescribeModifyParameterLogResponseBody) *DescribeModifyParameterLogResponse {
	s.Body = v
	return s
}

type DescribeOssDownloadsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	MigrateTaskId        *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
}

func (s DescribeOssDownloadsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsRequest) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsRequest) SetOwnerId(v int64) *DescribeOssDownloadsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeOssDownloadsRequest) SetResourceOwnerAccount(v string) *DescribeOssDownloadsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeOssDownloadsRequest) SetResourceOwnerId(v int64) *DescribeOssDownloadsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeOssDownloadsRequest) SetDBInstanceId(v string) *DescribeOssDownloadsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeOssDownloadsRequest) SetMigrateTaskId(v string) *DescribeOssDownloadsRequest {
	s.MigrateTaskId = &v
	return s
}

type DescribeOssDownloadsResponseBody struct {
	DBInstanceId  *string                                `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId     *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MigrateTaskId *string                                `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
	Items         *DescribeOssDownloadsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeOssDownloadsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsResponseBody) SetDBInstanceId(v string) *DescribeOssDownloadsResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeOssDownloadsResponseBody) SetRequestId(v string) *DescribeOssDownloadsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOssDownloadsResponseBody) SetMigrateTaskId(v string) *DescribeOssDownloadsResponseBody {
	s.MigrateTaskId = &v
	return s
}

func (s *DescribeOssDownloadsResponseBody) SetItems(v *DescribeOssDownloadsResponseBodyItems) *DescribeOssDownloadsResponseBody {
	s.Items = v
	return s
}

type DescribeOssDownloadsResponseBodyItems struct {
	OssDownload []*DescribeOssDownloadsResponseBodyItemsOssDownload `json:"OssDownload,omitempty" xml:"OssDownload,omitempty" type:"Repeated"`
}

func (s DescribeOssDownloadsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsResponseBodyItems) SetOssDownload(v []*DescribeOssDownloadsResponseBodyItemsOssDownload) *DescribeOssDownloadsResponseBodyItems {
	s.OssDownload = v
	return s
}

type DescribeOssDownloadsResponseBodyItemsOssDownload struct {
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	CreateTime  *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	BackupMode  *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	IsAvailable *string `json:"IsAvailable,omitempty" xml:"IsAvailable,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	FileSize    *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s DescribeOssDownloadsResponseBodyItemsOssDownload) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsResponseBodyItemsOssDownload) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsResponseBodyItemsOssDownload) SetEndTime(v string) *DescribeOssDownloadsResponseBodyItemsOssDownload {
	s.EndTime = &v
	return s
}

func (s *DescribeOssDownloadsResponseBodyItemsOssDownload) SetStatus(v string) *DescribeOssDownloadsResponseBodyItemsOssDownload {
	s.Status = &v
	return s
}

func (s *DescribeOssDownloadsResponseBodyItemsOssDownload) SetDescription(v string) *DescribeOssDownloadsResponseBodyItemsOssDownload {
	s.Description = &v
	return s
}

func (s *DescribeOssDownloadsResponseBodyItemsOssDownload) SetCreateTime(v string) *DescribeOssDownloadsResponseBodyItemsOssDownload {
	s.CreateTime = &v
	return s
}

func (s *DescribeOssDownloadsResponseBodyItemsOssDownload) SetBackupMode(v string) *DescribeOssDownloadsResponseBodyItemsOssDownload {
	s.BackupMode = &v
	return s
}

func (s *DescribeOssDownloadsResponseBodyItemsOssDownload) SetIsAvailable(v string) *DescribeOssDownloadsResponseBodyItemsOssDownload {
	s.IsAvailable = &v
	return s
}

func (s *DescribeOssDownloadsResponseBodyItemsOssDownload) SetFileName(v string) *DescribeOssDownloadsResponseBodyItemsOssDownload {
	s.FileName = &v
	return s
}

func (s *DescribeOssDownloadsResponseBodyItemsOssDownload) SetFileSize(v string) *DescribeOssDownloadsResponseBodyItemsOssDownload {
	s.FileSize = &v
	return s
}

type DescribeOssDownloadsResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeOssDownloadsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeOssDownloadsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsResponse) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsResponse) SetHeaders(v map[string]*string) *DescribeOssDownloadsResponse {
	s.Headers = v
	return s
}

func (s *DescribeOssDownloadsResponse) SetBody(v *DescribeOssDownloadsResponseBody) *DescribeOssDownloadsResponse {
	s.Body = v
	return s
}

type DescribeOssDownloadsForSQLServerRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	MigrateTaskId        *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
}

func (s DescribeOssDownloadsForSQLServerRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsForSQLServerRequest) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsForSQLServerRequest) SetOwnerId(v int64) *DescribeOssDownloadsForSQLServerRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerRequest) SetResourceOwnerAccount(v string) *DescribeOssDownloadsForSQLServerRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerRequest) SetResourceOwnerId(v int64) *DescribeOssDownloadsForSQLServerRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerRequest) SetDBInstanceId(v string) *DescribeOssDownloadsForSQLServerRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerRequest) SetMigrateTaskId(v string) *DescribeOssDownloadsForSQLServerRequest {
	s.MigrateTaskId = &v
	return s
}

type DescribeOssDownloadsForSQLServerResponseBody struct {
	RequestId      *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DBInstanceName *string                                            `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	MigrateIaskId  *string                                            `json:"MigrateIaskId,omitempty" xml:"MigrateIaskId,omitempty"`
	Items          *DescribeOssDownloadsForSQLServerResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeOssDownloadsForSQLServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsForSQLServerResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsForSQLServerResponseBody) SetRequestId(v string) *DescribeOssDownloadsForSQLServerResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseBody) SetDBInstanceName(v string) *DescribeOssDownloadsForSQLServerResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseBody) SetMigrateIaskId(v string) *DescribeOssDownloadsForSQLServerResponseBody {
	s.MigrateIaskId = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseBody) SetItems(v *DescribeOssDownloadsForSQLServerResponseBodyItems) *DescribeOssDownloadsForSQLServerResponseBody {
	s.Items = v
	return s
}

type DescribeOssDownloadsForSQLServerResponseBodyItems struct {
	OssDownload []*DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload `json:"OssDownload,omitempty" xml:"OssDownload,omitempty" type:"Repeated"`
}

func (s DescribeOssDownloadsForSQLServerResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsForSQLServerResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsForSQLServerResponseBodyItems) SetOssDownload(v []*DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload) *DescribeOssDownloadsForSQLServerResponseBodyItems {
	s.OssDownload = v
	return s
}

type DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload struct {
	FileName   *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	BakType    *string `json:"BakType,omitempty" xml:"BakType,omitempty"`
	FileSize   *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	IsAvail    *string `json:"IsAvail,omitempty" xml:"IsAvail,omitempty"`
	Desc       *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
}

func (s DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload) SetFileName(v string) *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload {
	s.FileName = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload) SetCreateTime(v string) *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload {
	s.CreateTime = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload) SetBakType(v string) *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload {
	s.BakType = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload) SetFileSize(v string) *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload {
	s.FileSize = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload) SetStatus(v string) *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload {
	s.Status = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload) SetIsAvail(v string) *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload {
	s.IsAvail = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload) SetDesc(v string) *DescribeOssDownloadsForSQLServerResponseBodyItemsOssDownload {
	s.Desc = &v
	return s
}

type DescribeOssDownloadsForSQLServerResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeOssDownloadsForSQLServerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeOssDownloadsForSQLServerResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsForSQLServerResponse) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsForSQLServerResponse) SetHeaders(v map[string]*string) *DescribeOssDownloadsForSQLServerResponse {
	s.Headers = v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponse) SetBody(v *DescribeOssDownloadsForSQLServerResponseBody) *DescribeOssDownloadsForSQLServerResponse {
	s.Body = v
	return s
}

type DescribeParameterGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ParameterGroupId     *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeParameterGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupRequest) SetOwnerId(v int64) *DescribeParameterGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeParameterGroupRequest) SetResourceOwnerAccount(v string) *DescribeParameterGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeParameterGroupRequest) SetResourceOwnerId(v int64) *DescribeParameterGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeParameterGroupRequest) SetParameterGroupId(v string) *DescribeParameterGroupRequest {
	s.ParameterGroupId = &v
	return s
}

func (s *DescribeParameterGroupRequest) SetRegionId(v string) *DescribeParameterGroupRequest {
	s.RegionId = &v
	return s
}

type DescribeParameterGroupResponseBody struct {
	RequestId  *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ParamGroup *DescribeParameterGroupResponseBodyParamGroup `json:"ParamGroup,omitempty" xml:"ParamGroup,omitempty" type:"Struct"`
}

func (s DescribeParameterGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponseBody) SetRequestId(v string) *DescribeParameterGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParameterGroupResponseBody) SetParamGroup(v *DescribeParameterGroupResponseBodyParamGroup) *DescribeParameterGroupResponseBody {
	s.ParamGroup = v
	return s
}

type DescribeParameterGroupResponseBodyParamGroup struct {
	ParameterGroup []*DescribeParameterGroupResponseBodyParamGroupParameterGroup `json:"ParameterGroup,omitempty" xml:"ParameterGroup,omitempty" type:"Repeated"`
}

func (s DescribeParameterGroupResponseBodyParamGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponseBodyParamGroup) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponseBodyParamGroup) SetParameterGroup(v []*DescribeParameterGroupResponseBodyParamGroupParameterGroup) *DescribeParameterGroupResponseBodyParamGroup {
	s.ParameterGroup = v
	return s
}

type DescribeParameterGroupResponseBodyParamGroupParameterGroup struct {
	UpdateTime         *string                                                                `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	ParameterGroupDesc *string                                                                `json:"ParameterGroupDesc,omitempty" xml:"ParameterGroupDesc,omitempty"`
	CreateTime         *string                                                                `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ForceRestart       *int32                                                                 `json:"ForceRestart,omitempty" xml:"ForceRestart,omitempty"`
	ParameterGroupId   *string                                                                `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
	ParameterGroupName *string                                                                `json:"ParameterGroupName,omitempty" xml:"ParameterGroupName,omitempty"`
	Engine             *string                                                                `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ParamCounts        *int32                                                                 `json:"ParamCounts,omitempty" xml:"ParamCounts,omitempty"`
	EngineVersion      *string                                                                `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	ParameterGroupType *int32                                                                 `json:"ParameterGroupType,omitempty" xml:"ParameterGroupType,omitempty"`
	ParamDetail        *DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetail `json:"ParamDetail,omitempty" xml:"ParamDetail,omitempty" type:"Struct"`
}

func (s DescribeParameterGroupResponseBodyParamGroupParameterGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponseBodyParamGroupParameterGroup) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetUpdateTime(v string) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.UpdateTime = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetParameterGroupDesc(v string) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.ParameterGroupDesc = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetCreateTime(v string) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.CreateTime = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetForceRestart(v int32) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.ForceRestart = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetParameterGroupId(v string) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.ParameterGroupId = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetParameterGroupName(v string) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.ParameterGroupName = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetEngine(v string) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.Engine = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetParamCounts(v int32) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.ParamCounts = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetEngineVersion(v string) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.EngineVersion = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetParameterGroupType(v int32) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.ParameterGroupType = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroup) SetParamDetail(v *DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetail) *DescribeParameterGroupResponseBodyParamGroupParameterGroup {
	s.ParamDetail = v
	return s
}

type DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetail struct {
	ParameterDetail []*DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail `json:"ParameterDetail,omitempty" xml:"ParameterDetail,omitempty" type:"Repeated"`
}

func (s DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetail) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetail) SetParameterDetail(v []*DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail) *DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetail {
	s.ParameterDetail = v
	return s
}

type DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail struct {
	ParamName  *string `json:"ParamName,omitempty" xml:"ParamName,omitempty"`
	ParamValue *string `json:"ParamValue,omitempty" xml:"ParamValue,omitempty"`
}

func (s DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail) SetParamName(v string) *DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail {
	s.ParamName = &v
	return s
}

func (s *DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail) SetParamValue(v string) *DescribeParameterGroupResponseBodyParamGroupParameterGroupParamDetailParameterDetail {
	s.ParamValue = &v
	return s
}

type DescribeParameterGroupResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeParameterGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeParameterGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponse) SetHeaders(v map[string]*string) *DescribeParameterGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeParameterGroupResponse) SetBody(v *DescribeParameterGroupResponseBody) *DescribeParameterGroupResponse {
	s.Body = v
	return s
}

type DescribeParameterGroupsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeParameterGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupsRequest) SetOwnerId(v int64) *DescribeParameterGroupsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeParameterGroupsRequest) SetResourceOwnerAccount(v string) *DescribeParameterGroupsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeParameterGroupsRequest) SetResourceOwnerId(v int64) *DescribeParameterGroupsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeParameterGroupsRequest) SetRegionId(v string) *DescribeParameterGroupsRequest {
	s.RegionId = &v
	return s
}

type DescribeParameterGroupsResponseBody struct {
	SignalForOptimizeParams *bool                                               `json:"SignalForOptimizeParams,omitempty" xml:"SignalForOptimizeParams,omitempty"`
	RequestId               *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ParameterGroups         *DescribeParameterGroupsResponseBodyParameterGroups `json:"ParameterGroups,omitempty" xml:"ParameterGroups,omitempty" type:"Struct"`
}

func (s DescribeParameterGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupsResponseBody) SetSignalForOptimizeParams(v bool) *DescribeParameterGroupsResponseBody {
	s.SignalForOptimizeParams = &v
	return s
}

func (s *DescribeParameterGroupsResponseBody) SetRequestId(v string) *DescribeParameterGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParameterGroupsResponseBody) SetParameterGroups(v *DescribeParameterGroupsResponseBodyParameterGroups) *DescribeParameterGroupsResponseBody {
	s.ParameterGroups = v
	return s
}

type DescribeParameterGroupsResponseBodyParameterGroups struct {
	ParameterGroup []*DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup `json:"ParameterGroup,omitempty" xml:"ParameterGroup,omitempty" type:"Repeated"`
}

func (s DescribeParameterGroupsResponseBodyParameterGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupsResponseBodyParameterGroups) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupsResponseBodyParameterGroups) SetParameterGroup(v []*DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) *DescribeParameterGroupsResponseBodyParameterGroups {
	s.ParameterGroup = v
	return s
}

type DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup struct {
	UpdateTime         *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	ParameterGroupDesc *string `json:"ParameterGroupDesc,omitempty" xml:"ParameterGroupDesc,omitempty"`
	CreateTime         *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ForceRestart       *int32  `json:"ForceRestart,omitempty" xml:"ForceRestart,omitempty"`
	ParameterGroupId   *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
	ParameterGroupName *string `json:"ParameterGroupName,omitempty" xml:"ParameterGroupName,omitempty"`
	Engine             *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ParamCounts        *int32  `json:"ParamCounts,omitempty" xml:"ParamCounts,omitempty"`
	EngineVersion      *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	ParameterGroupType *int32  `json:"ParameterGroupType,omitempty" xml:"ParameterGroupType,omitempty"`
}

func (s DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) SetUpdateTime(v string) *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup {
	s.UpdateTime = &v
	return s
}

func (s *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) SetParameterGroupDesc(v string) *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup {
	s.ParameterGroupDesc = &v
	return s
}

func (s *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) SetCreateTime(v string) *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup {
	s.CreateTime = &v
	return s
}

func (s *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) SetForceRestart(v int32) *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup {
	s.ForceRestart = &v
	return s
}

func (s *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) SetParameterGroupId(v string) *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup {
	s.ParameterGroupId = &v
	return s
}

func (s *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) SetParameterGroupName(v string) *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup {
	s.ParameterGroupName = &v
	return s
}

func (s *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) SetEngine(v string) *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup {
	s.Engine = &v
	return s
}

func (s *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) SetParamCounts(v int32) *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup {
	s.ParamCounts = &v
	return s
}

func (s *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) SetEngineVersion(v string) *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup {
	s.EngineVersion = &v
	return s
}

func (s *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup) SetParameterGroupType(v int32) *DescribeParameterGroupsResponseBodyParameterGroupsParameterGroup {
	s.ParameterGroupType = &v
	return s
}

type DescribeParameterGroupsResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeParameterGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeParameterGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupsResponse) SetHeaders(v map[string]*string) *DescribeParameterGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeParameterGroupsResponse) SetBody(v *DescribeParameterGroupsResponseBody) *DescribeParameterGroupsResponse {
	s.Body = v
	return s
}

type DescribeParametersRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersRequest) GoString() string {
	return s.String()
}

func (s *DescribeParametersRequest) SetOwnerId(v int64) *DescribeParametersRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeParametersRequest) SetResourceOwnerAccount(v string) *DescribeParametersRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeParametersRequest) SetResourceOwnerId(v int64) *DescribeParametersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeParametersRequest) SetClientToken(v string) *DescribeParametersRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeParametersRequest) SetDBInstanceId(v string) *DescribeParametersRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeParametersRequest) SetOwnerAccount(v string) *DescribeParametersRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeParametersResponseBody struct {
	RequestId         *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Engine            *string                                          `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion     *string                                          `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	ConfigParameters  *DescribeParametersResponseBodyConfigParameters  `json:"ConfigParameters,omitempty" xml:"ConfigParameters,omitempty" type:"Struct"`
	RunningParameters *DescribeParametersResponseBodyRunningParameters `json:"RunningParameters,omitempty" xml:"RunningParameters,omitempty" type:"Struct"`
}

func (s DescribeParametersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBody) SetRequestId(v string) *DescribeParametersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParametersResponseBody) SetEngine(v string) *DescribeParametersResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeParametersResponseBody) SetEngineVersion(v string) *DescribeParametersResponseBody {
	s.EngineVersion = &v
	return s
}

func (s *DescribeParametersResponseBody) SetConfigParameters(v *DescribeParametersResponseBodyConfigParameters) *DescribeParametersResponseBody {
	s.ConfigParameters = v
	return s
}

func (s *DescribeParametersResponseBody) SetRunningParameters(v *DescribeParametersResponseBodyRunningParameters) *DescribeParametersResponseBody {
	s.RunningParameters = v
	return s
}

type DescribeParametersResponseBodyConfigParameters struct {
	DBInstanceParameter []*DescribeParametersResponseBodyConfigParametersDBInstanceParameter `json:"DBInstanceParameter,omitempty" xml:"DBInstanceParameter,omitempty" type:"Repeated"`
}

func (s DescribeParametersResponseBodyConfigParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseBodyConfigParameters) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBodyConfigParameters) SetDBInstanceParameter(v []*DescribeParametersResponseBodyConfigParametersDBInstanceParameter) *DescribeParametersResponseBodyConfigParameters {
	s.DBInstanceParameter = v
	return s
}

type DescribeParametersResponseBodyConfigParametersDBInstanceParameter struct {
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterValue       *string `json:"ParameterValue,omitempty" xml:"ParameterValue,omitempty"`
}

func (s DescribeParametersResponseBodyConfigParametersDBInstanceParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseBodyConfigParametersDBInstanceParameter) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBodyConfigParametersDBInstanceParameter) SetParameterDescription(v string) *DescribeParametersResponseBodyConfigParametersDBInstanceParameter {
	s.ParameterDescription = &v
	return s
}

func (s *DescribeParametersResponseBodyConfigParametersDBInstanceParameter) SetParameterName(v string) *DescribeParametersResponseBodyConfigParametersDBInstanceParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeParametersResponseBodyConfigParametersDBInstanceParameter) SetParameterValue(v string) *DescribeParametersResponseBodyConfigParametersDBInstanceParameter {
	s.ParameterValue = &v
	return s
}

type DescribeParametersResponseBodyRunningParameters struct {
	DBInstanceParameter []*DescribeParametersResponseBodyRunningParametersDBInstanceParameter `json:"DBInstanceParameter,omitempty" xml:"DBInstanceParameter,omitempty" type:"Repeated"`
}

func (s DescribeParametersResponseBodyRunningParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseBodyRunningParameters) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBodyRunningParameters) SetDBInstanceParameter(v []*DescribeParametersResponseBodyRunningParametersDBInstanceParameter) *DescribeParametersResponseBodyRunningParameters {
	s.DBInstanceParameter = v
	return s
}

type DescribeParametersResponseBodyRunningParametersDBInstanceParameter struct {
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterValue       *string `json:"ParameterValue,omitempty" xml:"ParameterValue,omitempty"`
}

func (s DescribeParametersResponseBodyRunningParametersDBInstanceParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseBodyRunningParametersDBInstanceParameter) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseBodyRunningParametersDBInstanceParameter) SetParameterDescription(v string) *DescribeParametersResponseBodyRunningParametersDBInstanceParameter {
	s.ParameterDescription = &v
	return s
}

func (s *DescribeParametersResponseBodyRunningParametersDBInstanceParameter) SetParameterName(v string) *DescribeParametersResponseBodyRunningParametersDBInstanceParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeParametersResponseBodyRunningParametersDBInstanceParameter) SetParameterValue(v string) *DescribeParametersResponseBodyRunningParametersDBInstanceParameter {
	s.ParameterValue = &v
	return s
}

type DescribeParametersResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeParametersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponse) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponse) SetHeaders(v map[string]*string) *DescribeParametersResponse {
	s.Headers = v
	return s
}

func (s *DescribeParametersResponse) SetBody(v *DescribeParametersResponseBody) *DescribeParametersResponse {
	s.Body = v
	return s
}

type DescribeParameterTemplatesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeParameterTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterTemplatesRequest) GoString() string {
	return s.String()
}

func (s *DescribeParameterTemplatesRequest) SetOwnerId(v int64) *DescribeParameterTemplatesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetResourceOwnerAccount(v string) *DescribeParameterTemplatesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetResourceOwnerId(v int64) *DescribeParameterTemplatesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetClientToken(v string) *DescribeParameterTemplatesRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetEngine(v string) *DescribeParameterTemplatesRequest {
	s.Engine = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetEngineVersion(v string) *DescribeParameterTemplatesRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetOwnerAccount(v string) *DescribeParameterTemplatesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetCategory(v string) *DescribeParameterTemplatesRequest {
	s.Category = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetRegionId(v string) *DescribeParameterTemplatesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetDBInstanceId(v string) *DescribeParameterTemplatesRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeParameterTemplatesResponseBody struct {
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Engine         *string                                           `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ParameterCount *string                                           `json:"ParameterCount,omitempty" xml:"ParameterCount,omitempty"`
	EngineVersion  *string                                           `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	Parameters     *DescribeParameterTemplatesResponseBodyParameters `json:"Parameters,omitempty" xml:"Parameters,omitempty" type:"Struct"`
}

func (s DescribeParameterTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeParameterTemplatesResponseBody) SetRequestId(v string) *DescribeParameterTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeParameterTemplatesResponseBody) SetEngine(v string) *DescribeParameterTemplatesResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeParameterTemplatesResponseBody) SetParameterCount(v string) *DescribeParameterTemplatesResponseBody {
	s.ParameterCount = &v
	return s
}

func (s *DescribeParameterTemplatesResponseBody) SetEngineVersion(v string) *DescribeParameterTemplatesResponseBody {
	s.EngineVersion = &v
	return s
}

func (s *DescribeParameterTemplatesResponseBody) SetParameters(v *DescribeParameterTemplatesResponseBodyParameters) *DescribeParameterTemplatesResponseBody {
	s.Parameters = v
	return s
}

type DescribeParameterTemplatesResponseBodyParameters struct {
	TemplateRecord []*DescribeParameterTemplatesResponseBodyParametersTemplateRecord `json:"TemplateRecord,omitempty" xml:"TemplateRecord,omitempty" type:"Repeated"`
}

func (s DescribeParameterTemplatesResponseBodyParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterTemplatesResponseBodyParameters) GoString() string {
	return s.String()
}

func (s *DescribeParameterTemplatesResponseBodyParameters) SetTemplateRecord(v []*DescribeParameterTemplatesResponseBodyParametersTemplateRecord) *DescribeParameterTemplatesResponseBodyParameters {
	s.TemplateRecord = v
	return s
}

type DescribeParameterTemplatesResponseBodyParametersTemplateRecord struct {
	CheckingCode         *string `json:"CheckingCode,omitempty" xml:"CheckingCode,omitempty"`
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty"`
	ParameterValue       *string `json:"ParameterValue,omitempty" xml:"ParameterValue,omitempty"`
	ForceModify          *string `json:"ForceModify,omitempty" xml:"ForceModify,omitempty"`
	ForceRestart         *string `json:"ForceRestart,omitempty" xml:"ForceRestart,omitempty"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty"`
}

func (s DescribeParameterTemplatesResponseBodyParametersTemplateRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterTemplatesResponseBodyParametersTemplateRecord) GoString() string {
	return s.String()
}

func (s *DescribeParameterTemplatesResponseBodyParametersTemplateRecord) SetCheckingCode(v string) *DescribeParameterTemplatesResponseBodyParametersTemplateRecord {
	s.CheckingCode = &v
	return s
}

func (s *DescribeParameterTemplatesResponseBodyParametersTemplateRecord) SetParameterName(v string) *DescribeParameterTemplatesResponseBodyParametersTemplateRecord {
	s.ParameterName = &v
	return s
}

func (s *DescribeParameterTemplatesResponseBodyParametersTemplateRecord) SetParameterValue(v string) *DescribeParameterTemplatesResponseBodyParametersTemplateRecord {
	s.ParameterValue = &v
	return s
}

func (s *DescribeParameterTemplatesResponseBodyParametersTemplateRecord) SetForceModify(v string) *DescribeParameterTemplatesResponseBodyParametersTemplateRecord {
	s.ForceModify = &v
	return s
}

func (s *DescribeParameterTemplatesResponseBodyParametersTemplateRecord) SetForceRestart(v string) *DescribeParameterTemplatesResponseBodyParametersTemplateRecord {
	s.ForceRestart = &v
	return s
}

func (s *DescribeParameterTemplatesResponseBodyParametersTemplateRecord) SetParameterDescription(v string) *DescribeParameterTemplatesResponseBodyParametersTemplateRecord {
	s.ParameterDescription = &v
	return s
}

type DescribeParameterTemplatesResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeParameterTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeParameterTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DescribeParameterTemplatesResponse) SetHeaders(v map[string]*string) *DescribeParameterTemplatesResponse {
	s.Headers = v
	return s
}

func (s *DescribeParameterTemplatesResponse) SetBody(v *DescribeParameterTemplatesResponseBody) *DescribeParameterTemplatesResponse {
	s.Body = v
	return s
}

type DescribePriceRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	CommodityCode         *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Engine                *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage     *int32  `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	UsedTime              *int32  `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	TimeType              *string `json:"TimeType,omitempty" xml:"TimeType,omitempty"`
	Quantity              *int32  `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	InstanceUsedType      *int32  `json:"InstanceUsedType,omitempty" xml:"InstanceUsedType,omitempty"`
	OrderType             *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribePriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceRequest) SetOwnerId(v int64) *DescribePriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribePriceRequest) SetResourceOwnerAccount(v string) *DescribePriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribePriceRequest) SetResourceOwnerId(v int64) *DescribePriceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribePriceRequest) SetClientToken(v string) *DescribePriceRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribePriceRequest) SetOwnerAccount(v string) *DescribePriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribePriceRequest) SetCommodityCode(v string) *DescribePriceRequest {
	s.CommodityCode = &v
	return s
}

func (s *DescribePriceRequest) SetRegionId(v string) *DescribePriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePriceRequest) SetEngine(v string) *DescribePriceRequest {
	s.Engine = &v
	return s
}

func (s *DescribePriceRequest) SetEngineVersion(v string) *DescribePriceRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribePriceRequest) SetDBInstanceClass(v string) *DescribePriceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribePriceRequest) SetDBInstanceStorage(v int32) *DescribePriceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *DescribePriceRequest) SetPayType(v string) *DescribePriceRequest {
	s.PayType = &v
	return s
}

func (s *DescribePriceRequest) SetZoneId(v string) *DescribePriceRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribePriceRequest) SetUsedTime(v int32) *DescribePriceRequest {
	s.UsedTime = &v
	return s
}

func (s *DescribePriceRequest) SetTimeType(v string) *DescribePriceRequest {
	s.TimeType = &v
	return s
}

func (s *DescribePriceRequest) SetQuantity(v int32) *DescribePriceRequest {
	s.Quantity = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceUsedType(v int32) *DescribePriceRequest {
	s.InstanceUsedType = &v
	return s
}

func (s *DescribePriceRequest) SetOrderType(v string) *DescribePriceRequest {
	s.OrderType = &v
	return s
}

func (s *DescribePriceRequest) SetDBInstanceStorageType(v string) *DescribePriceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribePriceRequest) SetDBInstanceId(v string) *DescribePriceRequest {
	s.DBInstanceId = &v
	return s
}

type DescribePriceResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PriceInfo *DescribePriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	Rules     *DescribePriceResponseBodyRules     `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Struct"`
}

func (s DescribePriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBody) SetRequestId(v string) *DescribePriceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePriceResponseBody) SetPriceInfo(v *DescribePriceResponseBodyPriceInfo) *DescribePriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribePriceResponseBody) SetRules(v *DescribePriceResponseBodyRules) *DescribePriceResponseBody {
	s.Rules = v
	return s
}

type DescribePriceResponseBodyPriceInfo struct {
	OriginalPrice *float32                                        `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	DiscountPrice *float32                                        `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	Currency      *string                                         `json:"Currency,omitempty" xml:"Currency,omitempty"`
	TradePrice    *float32                                        `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
	Coupons       *DescribePriceResponseBodyPriceInfoCoupons      `json:"Coupons,omitempty" xml:"Coupons,omitempty" type:"Struct"`
	RuleIds       *DescribePriceResponseBodyPriceInfoRuleIds      `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" type:"Struct"`
	ActivityInfo  *DescribePriceResponseBodyPriceInfoActivityInfo `json:"ActivityInfo,omitempty" xml:"ActivityInfo,omitempty" type:"Struct"`
}

func (s DescribePriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfo) SetOriginalPrice(v float32) *DescribePriceResponseBodyPriceInfo {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetDiscountPrice(v float32) *DescribePriceResponseBodyPriceInfo {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetCurrency(v string) *DescribePriceResponseBodyPriceInfo {
	s.Currency = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetTradePrice(v float32) *DescribePriceResponseBodyPriceInfo {
	s.TradePrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetCoupons(v *DescribePriceResponseBodyPriceInfoCoupons) *DescribePriceResponseBodyPriceInfo {
	s.Coupons = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetRuleIds(v *DescribePriceResponseBodyPriceInfoRuleIds) *DescribePriceResponseBodyPriceInfo {
	s.RuleIds = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetActivityInfo(v *DescribePriceResponseBodyPriceInfoActivityInfo) *DescribePriceResponseBodyPriceInfo {
	s.ActivityInfo = v
	return s
}

type DescribePriceResponseBodyPriceInfoCoupons struct {
	Coupon []*DescribePriceResponseBodyPriceInfoCouponsCoupon `json:"Coupon,omitempty" xml:"Coupon,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoCoupons) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoCoupons) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoCoupons) SetCoupon(v []*DescribePriceResponseBodyPriceInfoCouponsCoupon) *DescribePriceResponseBodyPriceInfoCoupons {
	s.Coupon = v
	return s
}

type DescribePriceResponseBodyPriceInfoCouponsCoupon struct {
	IsSelected  *string `json:"IsSelected,omitempty" xml:"IsSelected,omitempty"`
	CouponNo    *string `json:"CouponNo,omitempty" xml:"CouponNo,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoCouponsCoupon) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoCouponsCoupon) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoCouponsCoupon) SetIsSelected(v string) *DescribePriceResponseBodyPriceInfoCouponsCoupon {
	s.IsSelected = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoCouponsCoupon) SetCouponNo(v string) *DescribePriceResponseBodyPriceInfoCouponsCoupon {
	s.CouponNo = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoCouponsCoupon) SetName(v string) *DescribePriceResponseBodyPriceInfoCouponsCoupon {
	s.Name = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoCouponsCoupon) SetDescription(v string) *DescribePriceResponseBodyPriceInfoCouponsCoupon {
	s.Description = &v
	return s
}

type DescribePriceResponseBodyPriceInfoRuleIds struct {
	RuleId []*string `json:"RuleId,omitempty" xml:"RuleId,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfoRuleIds) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoRuleIds) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoRuleIds) SetRuleId(v []*string) *DescribePriceResponseBodyPriceInfoRuleIds {
	s.RuleId = v
	return s
}

type DescribePriceResponseBodyPriceInfoActivityInfo struct {
	CheckErrMsg *string `json:"CheckErrMsg,omitempty" xml:"CheckErrMsg,omitempty"`
	ErrorCode   *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Success     *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoActivityInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoActivityInfo) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoActivityInfo) SetCheckErrMsg(v string) *DescribePriceResponseBodyPriceInfoActivityInfo {
	s.CheckErrMsg = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoActivityInfo) SetErrorCode(v string) *DescribePriceResponseBodyPriceInfoActivityInfo {
	s.ErrorCode = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoActivityInfo) SetSuccess(v string) *DescribePriceResponseBodyPriceInfoActivityInfo {
	s.Success = &v
	return s
}

type DescribePriceResponseBodyRules struct {
	Rule []*DescribePriceResponseBodyRulesRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyRules) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyRules) SetRule(v []*DescribePriceResponseBodyRulesRule) *DescribePriceResponseBodyRules {
	s.Rule = v
	return s
}

type DescribePriceResponseBodyRulesRule struct {
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribePriceResponseBodyRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyRulesRule) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyRulesRule) SetName(v string) *DescribePriceResponseBodyRulesRule {
	s.Name = &v
	return s
}

func (s *DescribePriceResponseBodyRulesRule) SetDescription(v string) *DescribePriceResponseBodyRulesRule {
	s.Description = &v
	return s
}

func (s *DescribePriceResponseBodyRulesRule) SetRuleId(v int64) *DescribePriceResponseBodyRulesRule {
	s.RuleId = &v
	return s
}

type DescribePriceResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribePriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceResponse) SetHeaders(v map[string]*string) *DescribePriceResponse {
	s.Headers = v
	return s
}

func (s *DescribePriceResponse) SetBody(v *DescribePriceResponseBody) *DescribePriceResponse {
	s.Body = v
	return s
}

type DescribeRdsResourceSettingsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceNiche        *string `json:"ResourceNiche,omitempty" xml:"ResourceNiche,omitempty"`
}

func (s DescribeRdsResourceSettingsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsResourceSettingsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRdsResourceSettingsRequest) SetOwnerId(v int64) *DescribeRdsResourceSettingsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRdsResourceSettingsRequest) SetResourceOwnerAccount(v string) *DescribeRdsResourceSettingsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRdsResourceSettingsRequest) SetResourceOwnerId(v int64) *DescribeRdsResourceSettingsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRdsResourceSettingsRequest) SetResourceNiche(v string) *DescribeRdsResourceSettingsRequest {
	s.ResourceNiche = &v
	return s
}

type DescribeRdsResourceSettingsResponseBody struct {
	RequestId                   *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RdsInstanceResourceSettings *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettings `json:"RdsInstanceResourceSettings,omitempty" xml:"RdsInstanceResourceSettings,omitempty" type:"Struct"`
}

func (s DescribeRdsResourceSettingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsResourceSettingsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRdsResourceSettingsResponseBody) SetRequestId(v string) *DescribeRdsResourceSettingsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseBody) SetRdsInstanceResourceSettings(v *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettings) *DescribeRdsResourceSettingsResponseBody {
	s.RdsInstanceResourceSettings = v
	return s
}

type DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettings struct {
	RdsInstanceResourceSetting []*DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting `json:"RdsInstanceResourceSetting,omitempty" xml:"RdsInstanceResourceSetting,omitempty" type:"Repeated"`
}

func (s DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettings) GoString() string {
	return s.String()
}

func (s *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettings) SetRdsInstanceResourceSetting(v []*DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettings {
	s.RdsInstanceResourceSetting = v
	return s
}

type DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting struct {
	PoppedUpButtonType *string `json:"PoppedUpButtonType,omitempty" xml:"PoppedUpButtonType,omitempty"`
	NoticeBarContent   *string `json:"NoticeBarContent,omitempty" xml:"NoticeBarContent,omitempty"`
	EndDate            *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	PoppedUpContent    *string `json:"PoppedUpContent,omitempty" xml:"PoppedUpContent,omitempty"`
	StartDate          *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
	PoppedUpButtonText *string `json:"PoppedUpButtonText,omitempty" xml:"PoppedUpButtonText,omitempty"`
	IsTop              *string `json:"IsTop,omitempty" xml:"IsTop,omitempty"`
	ResourceNiche      *string `json:"ResourceNiche,omitempty" xml:"ResourceNiche,omitempty"`
	PoppedUpButtonUrl  *string `json:"PoppedUpButtonUrl,omitempty" xml:"PoppedUpButtonUrl,omitempty"`
}

func (s DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) GoString() string {
	return s.String()
}

func (s *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetPoppedUpButtonType(v string) *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.PoppedUpButtonType = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetNoticeBarContent(v string) *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.NoticeBarContent = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetEndDate(v string) *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.EndDate = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetPoppedUpContent(v string) *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.PoppedUpContent = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetStartDate(v string) *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.StartDate = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetPoppedUpButtonText(v string) *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.PoppedUpButtonText = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetIsTop(v string) *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.IsTop = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetResourceNiche(v string) *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.ResourceNiche = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetPoppedUpButtonUrl(v string) *DescribeRdsResourceSettingsResponseBodyRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.PoppedUpButtonUrl = &v
	return s
}

type DescribeRdsResourceSettingsResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRdsResourceSettingsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRdsResourceSettingsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsResourceSettingsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRdsResourceSettingsResponse) SetHeaders(v map[string]*string) *DescribeRdsResourceSettingsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRdsResourceSettingsResponse) SetBody(v *DescribeRdsResourceSettingsResponseBody) *DescribeRdsResourceSettingsResponse {
	s.Body = v
	return s
}

type DescribeReadDBInstanceDelayRequest struct {
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ReadInstanceId       *string `json:"ReadInstanceId,omitempty" xml:"ReadInstanceId,omitempty"`
}

func (s DescribeReadDBInstanceDelayRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayRequest) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayRequest) SetSecurityToken(v string) *DescribeReadDBInstanceDelayRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeReadDBInstanceDelayRequest) SetOwnerId(v int64) *DescribeReadDBInstanceDelayRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayRequest) SetResourceOwnerAccount(v string) *DescribeReadDBInstanceDelayRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeReadDBInstanceDelayRequest) SetResourceOwnerId(v int64) *DescribeReadDBInstanceDelayRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayRequest) SetOwnerAccount(v string) *DescribeReadDBInstanceDelayRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeReadDBInstanceDelayRequest) SetDBInstanceId(v string) *DescribeReadDBInstanceDelayRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayRequest) SetReadInstanceId(v string) *DescribeReadDBInstanceDelayRequest {
	s.ReadInstanceId = &v
	return s
}

type DescribeReadDBInstanceDelayResponseBody struct {
	DBInstanceId     *string                                       `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId        *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DelayTime        *int32                                        `json:"DelayTime,omitempty" xml:"DelayTime,omitempty"`
	ReadDBInstanceId *string                                       `json:"ReadDBInstanceId,omitempty" xml:"ReadDBInstanceId,omitempty"`
	Items            *DescribeReadDBInstanceDelayResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeReadDBInstanceDelayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseBody) SetDBInstanceId(v string) *DescribeReadDBInstanceDelayResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBody) SetRequestId(v string) *DescribeReadDBInstanceDelayResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBody) SetDelayTime(v int32) *DescribeReadDBInstanceDelayResponseBody {
	s.DelayTime = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBody) SetReadDBInstanceId(v string) *DescribeReadDBInstanceDelayResponseBody {
	s.ReadDBInstanceId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBody) SetItems(v *DescribeReadDBInstanceDelayResponseBodyItems) *DescribeReadDBInstanceDelayResponseBody {
	s.Items = v
	return s
}

type DescribeReadDBInstanceDelayResponseBodyItems struct {
	Items []*DescribeReadDBInstanceDelayResponseBodyItemsItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
}

func (s DescribeReadDBInstanceDelayResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseBodyItems) SetItems(v []*DescribeReadDBInstanceDelayResponseBodyItemsItems) *DescribeReadDBInstanceDelayResponseBodyItems {
	s.Items = v
	return s
}

type DescribeReadDBInstanceDelayResponseBodyItemsItems struct {
	DBInstanceId          *string                                                                 `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ReadonlyInstanceDelay *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelay `json:"ReadonlyInstanceDelay,omitempty" xml:"ReadonlyInstanceDelay,omitempty" type:"Struct"`
	ReadDelayTimes        *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDelayTimes        `json:"ReadDelayTimes,omitempty" xml:"ReadDelayTimes,omitempty" type:"Struct"`
	ReadDBInstanceNames   *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDBInstanceNames   `json:"ReadDBInstanceNames,omitempty" xml:"ReadDBInstanceNames,omitempty" type:"Struct"`
}

func (s DescribeReadDBInstanceDelayResponseBodyItemsItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseBodyItemsItems) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItems) SetDBInstanceId(v string) *DescribeReadDBInstanceDelayResponseBodyItemsItems {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItems) SetReadonlyInstanceDelay(v *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelay) *DescribeReadDBInstanceDelayResponseBodyItemsItems {
	s.ReadonlyInstanceDelay = v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItems) SetReadDelayTimes(v *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDelayTimes) *DescribeReadDBInstanceDelayResponseBodyItemsItems {
	s.ReadDelayTimes = v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItems) SetReadDBInstanceNames(v *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDBInstanceNames) *DescribeReadDBInstanceDelayResponseBodyItemsItems {
	s.ReadDBInstanceNames = v
	return s
}

type DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelay struct {
	ReadonlyInstanceDelay []*DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay `json:"ReadonlyInstanceDelay,omitempty" xml:"ReadonlyInstanceDelay,omitempty" type:"Repeated"`
}

func (s DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelay) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelay) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelay) SetReadonlyInstanceDelay(v []*DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelay {
	s.ReadonlyInstanceDelay = v
	return s
}

type DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay struct {
	WriteLatency       *string `json:"WriteLatency,omitempty" xml:"WriteLatency,omitempty"`
	FlushLatency       *string `json:"FlushLatency,omitempty" xml:"FlushLatency,omitempty"`
	ReadDBInstanceName *string `json:"ReadDBInstanceName,omitempty" xml:"ReadDBInstanceName,omitempty"`
	WriteLag           *string `json:"WriteLag,omitempty" xml:"WriteLag,omitempty"`
	FlushLag           *string `json:"FlushLag,omitempty" xml:"FlushLag,omitempty"`
	SendLatency        *string `json:"SendLatency,omitempty" xml:"SendLatency,omitempty"`
	ReplayLag          *string `json:"ReplayLag,omitempty" xml:"ReplayLag,omitempty"`
	ReplayLatency      *string `json:"ReplayLatency,omitempty" xml:"ReplayLatency,omitempty"`
}

func (s DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetWriteLatency(v string) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.WriteLatency = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetFlushLatency(v string) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.FlushLatency = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetReadDBInstanceName(v string) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.ReadDBInstanceName = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetWriteLag(v string) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.WriteLag = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetFlushLag(v string) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.FlushLag = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetSendLatency(v string) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.SendLatency = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetReplayLag(v string) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.ReplayLag = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetReplayLatency(v string) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.ReplayLatency = &v
	return s
}

type DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDelayTimes struct {
	ReadDelayTime []*string `json:"ReadDelayTime,omitempty" xml:"ReadDelayTime,omitempty" type:"Repeated"`
}

func (s DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDelayTimes) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDelayTimes) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDelayTimes) SetReadDelayTime(v []*string) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDelayTimes {
	s.ReadDelayTime = v
	return s
}

type DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDBInstanceNames struct {
	ReadDBInstanceName []*string `json:"ReadDBInstanceName,omitempty" xml:"ReadDBInstanceName,omitempty" type:"Repeated"`
}

func (s DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDBInstanceNames) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDBInstanceNames) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDBInstanceNames) SetReadDBInstanceName(v []*string) *DescribeReadDBInstanceDelayResponseBodyItemsItemsReadDBInstanceNames {
	s.ReadDBInstanceName = v
	return s
}

type DescribeReadDBInstanceDelayResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeReadDBInstanceDelayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeReadDBInstanceDelayResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponse) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponse) SetHeaders(v map[string]*string) *DescribeReadDBInstanceDelayResponse {
	s.Headers = v
	return s
}

func (s *DescribeReadDBInstanceDelayResponse) SetBody(v *DescribeReadDBInstanceDelayResponseBody) *DescribeReadDBInstanceDelayResponse {
	s.Body = v
	return s
}

type DescribeRegionsRequest struct {
	ResourceOwnerId *int64 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetResourceOwnerId(v int64) *DescribeRegionsRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeRegionsResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Regions   *DescribeRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Struct"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRegionsResponseBody) SetRegions(v *DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody {
	s.Regions = v
	return s
}

type DescribeRegionsResponseBodyRegions struct {
	RDSRegion []*DescribeRegionsResponseBodyRegionsRDSRegion `json:"RDSRegion,omitempty" xml:"RDSRegion,omitempty" type:"Repeated"`
}

func (s DescribeRegionsResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegions) SetRDSRegion(v []*DescribeRegionsResponseBodyRegionsRDSRegion) *DescribeRegionsResponseBodyRegions {
	s.RDSRegion = v
	return s
}

type DescribeRegionsResponseBodyRegionsRDSRegion struct {
	ZoneId         *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	RegionEndpoint *string `json:"RegionEndpoint,omitempty" xml:"RegionEndpoint,omitempty"`
	LocalName      *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRegionsResponseBodyRegionsRDSRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegionsRDSRegion) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegionsRDSRegion) SetZoneId(v string) *DescribeRegionsResponseBodyRegionsRDSRegion {
	s.ZoneId = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRDSRegion) SetRegionEndpoint(v string) *DescribeRegionsResponseBodyRegionsRDSRegion {
	s.RegionEndpoint = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRDSRegion) SetLocalName(v string) *DescribeRegionsResponseBodyRegionsRDSRegion {
	s.LocalName = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegionsRDSRegion) SetRegionId(v string) *DescribeRegionsResponseBodyRegionsRDSRegion {
	s.RegionId = &v
	return s
}

type DescribeRegionsResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DescribeRenewalPriceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PayType              *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	DBInstanceClass      *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	UsedTime             *int32  `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	TimeType             *string `json:"TimeType,omitempty" xml:"TimeType,omitempty"`
	Quantity             *int32  `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	OrderType            *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	BusinessInfo         *string `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
}

func (s DescribeRenewalPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceRequest) SetOwnerId(v int64) *DescribeRenewalPriceRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceOwnerAccount(v string) *DescribeRenewalPriceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceOwnerId(v int64) *DescribeRenewalPriceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetClientToken(v string) *DescribeRenewalPriceRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetOwnerAccount(v string) *DescribeRenewalPriceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetDBInstanceId(v string) *DescribeRenewalPriceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetRegionId(v string) *DescribeRenewalPriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetPayType(v string) *DescribeRenewalPriceRequest {
	s.PayType = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetDBInstanceClass(v string) *DescribeRenewalPriceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetUsedTime(v int32) *DescribeRenewalPriceRequest {
	s.UsedTime = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetTimeType(v string) *DescribeRenewalPriceRequest {
	s.TimeType = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetQuantity(v int32) *DescribeRenewalPriceRequest {
	s.Quantity = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetOrderType(v string) *DescribeRenewalPriceRequest {
	s.OrderType = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetBusinessInfo(v string) *DescribeRenewalPriceRequest {
	s.BusinessInfo = &v
	return s
}

type DescribeRenewalPriceResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PriceInfo *DescribeRenewalPriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	Rules     *DescribeRenewalPriceResponseBodyRules     `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Struct"`
}

func (s DescribeRenewalPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBody) SetRequestId(v string) *DescribeRenewalPriceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRenewalPriceResponseBody) SetPriceInfo(v *DescribeRenewalPriceResponseBodyPriceInfo) *DescribeRenewalPriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribeRenewalPriceResponseBody) SetRules(v *DescribeRenewalPriceResponseBodyRules) *DescribeRenewalPriceResponseBody {
	s.Rules = v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfo struct {
	OriginalPrice *float32                                               `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	DiscountPrice *float32                                               `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	Currency      *string                                                `json:"Currency,omitempty" xml:"Currency,omitempty"`
	TradePrice    *float32                                               `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
	Coupons       *DescribeRenewalPriceResponseBodyPriceInfoCoupons      `json:"Coupons,omitempty" xml:"Coupons,omitempty" type:"Struct"`
	RuleIds       *DescribeRenewalPriceResponseBodyPriceInfoRuleIds      `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" type:"Struct"`
	ActivityInfo  *DescribeRenewalPriceResponseBodyPriceInfoActivityInfo `json:"ActivityInfo,omitempty" xml:"ActivityInfo,omitempty" type:"Struct"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetOriginalPrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.OriginalPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetDiscountPrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.DiscountPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetCurrency(v string) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.Currency = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetTradePrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.TradePrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetCoupons(v *DescribeRenewalPriceResponseBodyPriceInfoCoupons) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.Coupons = v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetRuleIds(v *DescribeRenewalPriceResponseBodyPriceInfoRuleIds) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.RuleIds = v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetActivityInfo(v *DescribeRenewalPriceResponseBodyPriceInfoActivityInfo) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.ActivityInfo = v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoCoupons struct {
	Coupon []*DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon `json:"Coupon,omitempty" xml:"Coupon,omitempty" type:"Repeated"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoCoupons) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoCoupons) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoCoupons) SetCoupon(v []*DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon) *DescribeRenewalPriceResponseBodyPriceInfoCoupons {
	s.Coupon = v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon struct {
	IsSelected  *string `json:"IsSelected,omitempty" xml:"IsSelected,omitempty"`
	CouponNo    *string `json:"CouponNo,omitempty" xml:"CouponNo,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon) SetIsSelected(v string) *DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon {
	s.IsSelected = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon) SetCouponNo(v string) *DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon {
	s.CouponNo = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon) SetName(v string) *DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon {
	s.Name = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon) SetDescription(v string) *DescribeRenewalPriceResponseBodyPriceInfoCouponsCoupon {
	s.Description = &v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoRuleIds struct {
	RuleId []*string `json:"RuleId,omitempty" xml:"RuleId,omitempty" type:"Repeated"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoRuleIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoRuleIds) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoRuleIds) SetRuleId(v []*string) *DescribeRenewalPriceResponseBodyPriceInfoRuleIds {
	s.RuleId = v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoActivityInfo struct {
	CheckErrMsg *string `json:"CheckErrMsg,omitempty" xml:"CheckErrMsg,omitempty"`
	ErrorCode   *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Success     *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoActivityInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoActivityInfo) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoActivityInfo) SetCheckErrMsg(v string) *DescribeRenewalPriceResponseBodyPriceInfoActivityInfo {
	s.CheckErrMsg = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoActivityInfo) SetErrorCode(v string) *DescribeRenewalPriceResponseBodyPriceInfoActivityInfo {
	s.ErrorCode = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoActivityInfo) SetSuccess(v string) *DescribeRenewalPriceResponseBodyPriceInfoActivityInfo {
	s.Success = &v
	return s
}

type DescribeRenewalPriceResponseBodyRules struct {
	Rule []*DescribeRenewalPriceResponseBodyRulesRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Repeated"`
}

func (s DescribeRenewalPriceResponseBodyRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyRules) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyRules) SetRule(v []*DescribeRenewalPriceResponseBodyRulesRule) *DescribeRenewalPriceResponseBodyRules {
	s.Rule = v
	return s
}

type DescribeRenewalPriceResponseBodyRulesRule struct {
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribeRenewalPriceResponseBodyRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyRulesRule) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyRulesRule) SetName(v string) *DescribeRenewalPriceResponseBodyRulesRule {
	s.Name = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyRulesRule) SetDescription(v string) *DescribeRenewalPriceResponseBodyRulesRule {
	s.Description = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyRulesRule) SetRuleId(v int64) *DescribeRenewalPriceResponseBodyRulesRule {
	s.RuleId = &v
	return s
}

type DescribeRenewalPriceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeRenewalPriceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeRenewalPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponse) SetHeaders(v map[string]*string) *DescribeRenewalPriceResponse {
	s.Headers = v
	return s
}

func (s *DescribeRenewalPriceResponse) SetBody(v *DescribeRenewalPriceResponseBody) *DescribeRenewalPriceResponse {
	s.Body = v
	return s
}

type DescribeResourceUsageRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeResourceUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageRequest) SetOwnerId(v int64) *DescribeResourceUsageRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeResourceUsageRequest) SetResourceOwnerAccount(v string) *DescribeResourceUsageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeResourceUsageRequest) SetResourceOwnerId(v int64) *DescribeResourceUsageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeResourceUsageRequest) SetDBInstanceId(v string) *DescribeResourceUsageRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeResourceUsageRequest) SetOwnerAccount(v string) *DescribeResourceUsageRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeResourceUsageResponseBody struct {
	BackupOssDataSize *int64  `json:"BackupOssDataSize,omitempty" xml:"BackupOssDataSize,omitempty"`
	DiskUsed          *int64  `json:"DiskUsed,omitempty" xml:"DiskUsed,omitempty"`
	ArchiveBackupSize *int64  `json:"ArchiveBackupSize,omitempty" xml:"ArchiveBackupSize,omitempty"`
	BackupOssLogSize  *int64  `json:"BackupOssLogSize,omitempty" xml:"BackupOssLogSize,omitempty"`
	BackupLogSize     *int64  `json:"BackupLogSize,omitempty" xml:"BackupLogSize,omitempty"`
	BackupDataSize    *int64  `json:"BackupDataSize,omitempty" xml:"BackupDataSize,omitempty"`
	ColdBackupSize    *int64  `json:"ColdBackupSize,omitempty" xml:"ColdBackupSize,omitempty"`
	DataSize          *int64  `json:"DataSize,omitempty" xml:"DataSize,omitempty"`
	PaidBackupSize    *int64  `json:"PaidBackupSize,omitempty" xml:"PaidBackupSize,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LogSize           *int64  `json:"LogSize,omitempty" xml:"LogSize,omitempty"`
	BackupSize        *int64  `json:"BackupSize,omitempty" xml:"BackupSize,omitempty"`
	DBInstanceId      *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Engine            *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	SQLSize           *int64  `json:"SQLSize,omitempty" xml:"SQLSize,omitempty"`
}

func (s DescribeResourceUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageResponseBody) SetBackupOssDataSize(v int64) *DescribeResourceUsageResponseBody {
	s.BackupOssDataSize = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetDiskUsed(v int64) *DescribeResourceUsageResponseBody {
	s.DiskUsed = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetArchiveBackupSize(v int64) *DescribeResourceUsageResponseBody {
	s.ArchiveBackupSize = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetBackupOssLogSize(v int64) *DescribeResourceUsageResponseBody {
	s.BackupOssLogSize = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetBackupLogSize(v int64) *DescribeResourceUsageResponseBody {
	s.BackupLogSize = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetBackupDataSize(v int64) *DescribeResourceUsageResponseBody {
	s.BackupDataSize = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetColdBackupSize(v int64) *DescribeResourceUsageResponseBody {
	s.ColdBackupSize = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetDataSize(v int64) *DescribeResourceUsageResponseBody {
	s.DataSize = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetPaidBackupSize(v int64) *DescribeResourceUsageResponseBody {
	s.PaidBackupSize = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetRequestId(v string) *DescribeResourceUsageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetLogSize(v int64) *DescribeResourceUsageResponseBody {
	s.LogSize = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetBackupSize(v int64) *DescribeResourceUsageResponseBody {
	s.BackupSize = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetDBInstanceId(v string) *DescribeResourceUsageResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetEngine(v string) *DescribeResourceUsageResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeResourceUsageResponseBody) SetSQLSize(v int64) *DescribeResourceUsageResponseBody {
	s.SQLSize = &v
	return s
}

type DescribeResourceUsageResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeResourceUsageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeResourceUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageResponse) SetHeaders(v map[string]*string) *DescribeResourceUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceUsageResponse) SetBody(v *DescribeResourceUsageResponseBody) *DescribeResourceUsageResponse {
	s.Body = v
	return s
}

type DescribeSecurityGroupConfigurationRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeSecurityGroupConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupConfigurationRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupConfigurationRequest) SetOwnerId(v int64) *DescribeSecurityGroupConfigurationRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationRequest) SetResourceOwnerAccount(v string) *DescribeSecurityGroupConfigurationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationRequest) SetResourceOwnerId(v int64) *DescribeSecurityGroupConfigurationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationRequest) SetDBInstanceId(v string) *DescribeSecurityGroupConfigurationRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeSecurityGroupConfigurationResponseBody struct {
	DBInstanceName *string                                              `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	RequestId      *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Items          *DescribeSecurityGroupConfigurationResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeSecurityGroupConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupConfigurationResponseBody) SetDBInstanceName(v string) *DescribeSecurityGroupConfigurationResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationResponseBody) SetRequestId(v string) *DescribeSecurityGroupConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationResponseBody) SetItems(v *DescribeSecurityGroupConfigurationResponseBodyItems) *DescribeSecurityGroupConfigurationResponseBody {
	s.Items = v
	return s
}

type DescribeSecurityGroupConfigurationResponseBodyItems struct {
	EcsSecurityGroupRelation []*DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation `json:"EcsSecurityGroupRelation,omitempty" xml:"EcsSecurityGroupRelation,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupConfigurationResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupConfigurationResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupConfigurationResponseBodyItems) SetEcsSecurityGroupRelation(v []*DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) *DescribeSecurityGroupConfigurationResponseBodyItems {
	s.EcsSecurityGroupRelation = v
	return s
}

type DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation struct {
	NetworkType     *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) SetNetworkType(v string) *DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation {
	s.NetworkType = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) SetSecurityGroupId(v string) *DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) SetRegionId(v string) *DescribeSecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation {
	s.RegionId = &v
	return s
}

type DescribeSecurityGroupConfigurationResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSecurityGroupConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityGroupConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupConfigurationResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupConfigurationResponse) SetHeaders(v map[string]*string) *DescribeSecurityGroupConfigurationResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityGroupConfigurationResponse) SetBody(v *DescribeSecurityGroupConfigurationResponseBody) *DescribeSecurityGroupConfigurationResponse {
	s.Body = v
	return s
}

type DescribeSlowLogRecordsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	SQLHASH              *string `json:"SQLHASH,omitempty" xml:"SQLHASH,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeSlowLogRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogRecordsRequest) SetOwnerId(v int64) *DescribeSlowLogRecordsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetResourceOwnerAccount(v string) *DescribeSlowLogRecordsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetResourceOwnerId(v int64) *DescribeSlowLogRecordsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetDBInstanceId(v string) *DescribeSlowLogRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetSQLHASH(v string) *DescribeSlowLogRecordsRequest {
	s.SQLHASH = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetStartTime(v string) *DescribeSlowLogRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetEndTime(v string) *DescribeSlowLogRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetDBName(v string) *DescribeSlowLogRecordsRequest {
	s.DBName = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetPageSize(v int32) *DescribeSlowLogRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetPageNumber(v int32) *DescribeSlowLogRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetOwnerAccount(v string) *DescribeSlowLogRecordsRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeSlowLogRecordsResponseBody struct {
	RowsAffectedCount     *int64                                   `json:"RowsAffectedCount,omitempty" xml:"RowsAffectedCount,omitempty"`
	PageRecordCount       *int32                                   `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	WritesIOCount         *int64                                   `json:"WritesIOCount,omitempty" xml:"WritesIOCount,omitempty"`
	SQLHash               *string                                  `json:"SQLHash,omitempty" xml:"SQLHash,omitempty"`
	LogicalIORead         *int64                                   `json:"LogicalIORead,omitempty" xml:"LogicalIORead,omitempty"`
	RequestId             *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PhysicalIORead        *int64                                   `json:"PhysicalIORead,omitempty" xml:"PhysicalIORead,omitempty"`
	TotalRecordCount      *int32                                   `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	DBInstanceId          *string                                  `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Engine                *string                                  `json:"Engine,omitempty" xml:"Engine,omitempty"`
	PageNumber            *int32                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	CPUTime               *int64                                   `json:"CPUTime,omitempty" xml:"CPUTime,omitempty"`
	UserName              *string                                  `json:"UserName,omitempty" xml:"UserName,omitempty"`
	LastRowsAffectedCount *int64                                   `json:"LastRowsAffectedCount,omitempty" xml:"LastRowsAffectedCount,omitempty"`
	Items                 *DescribeSlowLogRecordsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeSlowLogRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogRecordsResponseBody) SetRowsAffectedCount(v int64) *DescribeSlowLogRecordsResponseBody {
	s.RowsAffectedCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetPageRecordCount(v int32) *DescribeSlowLogRecordsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetWritesIOCount(v int64) *DescribeSlowLogRecordsResponseBody {
	s.WritesIOCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetSQLHash(v string) *DescribeSlowLogRecordsResponseBody {
	s.SQLHash = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetLogicalIORead(v int64) *DescribeSlowLogRecordsResponseBody {
	s.LogicalIORead = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetRequestId(v string) *DescribeSlowLogRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetPhysicalIORead(v int64) *DescribeSlowLogRecordsResponseBody {
	s.PhysicalIORead = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetTotalRecordCount(v int32) *DescribeSlowLogRecordsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetDBInstanceId(v string) *DescribeSlowLogRecordsResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetEngine(v string) *DescribeSlowLogRecordsResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetPageNumber(v int32) *DescribeSlowLogRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetCPUTime(v int64) *DescribeSlowLogRecordsResponseBody {
	s.CPUTime = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetUserName(v string) *DescribeSlowLogRecordsResponseBody {
	s.UserName = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetLastRowsAffectedCount(v int64) *DescribeSlowLogRecordsResponseBody {
	s.LastRowsAffectedCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBody) SetItems(v *DescribeSlowLogRecordsResponseBodyItems) *DescribeSlowLogRecordsResponseBody {
	s.Items = v
	return s
}

type DescribeSlowLogRecordsResponseBodyItems struct {
	SQLSlowRecord []*DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord `json:"SQLSlowRecord,omitempty" xml:"SQLSlowRecord,omitempty" type:"Repeated"`
}

func (s DescribeSlowLogRecordsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogRecordsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogRecordsResponseBodyItems) SetSQLSlowRecord(v []*DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) *DescribeSlowLogRecordsResponseBodyItems {
	s.SQLSlowRecord = v
	return s
}

type DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord struct {
	HostAddress           *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	RowsAffectedCount     *int64  `json:"RowsAffectedCount,omitempty" xml:"RowsAffectedCount,omitempty"`
	QueryTimes            *int64  `json:"QueryTimes,omitempty" xml:"QueryTimes,omitempty"`
	SQLText               *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	CpuTime               *int64  `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	QueryTimeMS           *int64  `json:"QueryTimeMS,omitempty" xml:"QueryTimeMS,omitempty"`
	ApplicationName       *string `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty"`
	LockTimes             *int64  `json:"LockTimes,omitempty" xml:"LockTimes,omitempty"`
	ExecutionStartTime    *string `json:"ExecutionStartTime,omitempty" xml:"ExecutionStartTime,omitempty"`
	LogicalIORead         *int64  `json:"LogicalIORead,omitempty" xml:"LogicalIORead,omitempty"`
	WriteIOCount          *int64  `json:"WriteIOCount,omitempty" xml:"WriteIOCount,omitempty"`
	PhysicalIORead        *int64  `json:"PhysicalIORead,omitempty" xml:"PhysicalIORead,omitempty"`
	ReturnRowCounts       *int64  `json:"ReturnRowCounts,omitempty" xml:"ReturnRowCounts,omitempty"`
	ParseRowCounts        *int64  `json:"ParseRowCounts,omitempty" xml:"ParseRowCounts,omitempty"`
	DBName                *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	ClientHostName        *string `json:"ClientHostName,omitempty" xml:"ClientHostName,omitempty"`
	UserName              *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	LastRowsAffectedCount *int64  `json:"LastRowsAffectedCount,omitempty" xml:"LastRowsAffectedCount,omitempty"`
}

func (s DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetHostAddress(v string) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.HostAddress = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetRowsAffectedCount(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.RowsAffectedCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetQueryTimes(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.QueryTimes = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetSQLText(v string) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.SQLText = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetCpuTime(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.CpuTime = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetQueryTimeMS(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.QueryTimeMS = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetApplicationName(v string) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.ApplicationName = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetLockTimes(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.LockTimes = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetExecutionStartTime(v string) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.ExecutionStartTime = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetLogicalIORead(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.LogicalIORead = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetWriteIOCount(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.WriteIOCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetPhysicalIORead(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.PhysicalIORead = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetReturnRowCounts(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.ReturnRowCounts = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetParseRowCounts(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.ParseRowCounts = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetDBName(v string) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.DBName = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetClientHostName(v string) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.ClientHostName = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetUserName(v string) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.UserName = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord) SetLastRowsAffectedCount(v int64) *DescribeSlowLogRecordsResponseBodyItemsSQLSlowRecord {
	s.LastRowsAffectedCount = &v
	return s
}

type DescribeSlowLogRecordsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSlowLogRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSlowLogRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogRecordsResponse) SetHeaders(v map[string]*string) *DescribeSlowLogRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetBody(v *DescribeSlowLogRecordsResponseBody) *DescribeSlowLogRecordsResponse {
	s.Body = v
	return s
}

type DescribeSlowLogsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	SortKey              *string `json:"SortKey,omitempty" xml:"SortKey,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeSlowLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogsRequest) SetOwnerId(v int64) *DescribeSlowLogsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetResourceOwnerAccount(v string) *DescribeSlowLogsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetResourceOwnerId(v int64) *DescribeSlowLogsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetDBInstanceId(v string) *DescribeSlowLogsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetStartTime(v string) *DescribeSlowLogsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetEndTime(v string) *DescribeSlowLogsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetDBName(v string) *DescribeSlowLogsRequest {
	s.DBName = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetSortKey(v string) *DescribeSlowLogsRequest {
	s.SortKey = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetPageSize(v int32) *DescribeSlowLogsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetPageNumber(v int32) *DescribeSlowLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetOwnerAccount(v string) *DescribeSlowLogsRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeSlowLogsResponseBody struct {
	RequestId        *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DBInstanceId     *string                            `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Engine           *string                            `json:"Engine,omitempty" xml:"Engine,omitempty"`
	StartTime        *string                            `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime          *string                            `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	TotalRecordCount *int32                             `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	PageNumber       *int32                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                             `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	Items            *DescribeSlowLogsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeSlowLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogsResponseBody) SetRequestId(v string) *DescribeSlowLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSlowLogsResponseBody) SetDBInstanceId(v string) *DescribeSlowLogsResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSlowLogsResponseBody) SetEngine(v string) *DescribeSlowLogsResponseBody {
	s.Engine = &v
	return s
}

func (s *DescribeSlowLogsResponseBody) SetStartTime(v string) *DescribeSlowLogsResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBody) SetEndTime(v string) *DescribeSlowLogsResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBody) SetTotalRecordCount(v int32) *DescribeSlowLogsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSlowLogsResponseBody) SetPageNumber(v int32) *DescribeSlowLogsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSlowLogsResponseBody) SetPageRecordCount(v int32) *DescribeSlowLogsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSlowLogsResponseBody) SetItems(v *DescribeSlowLogsResponseBodyItems) *DescribeSlowLogsResponseBody {
	s.Items = v
	return s
}

type DescribeSlowLogsResponseBodyItems struct {
	SQLSlowLog []*DescribeSlowLogsResponseBodyItemsSQLSlowLog `json:"SQLSlowLog,omitempty" xml:"SQLSlowLog,omitempty" type:"Repeated"`
}

func (s DescribeSlowLogsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogsResponseBodyItems) SetSQLSlowLog(v []*DescribeSlowLogsResponseBodyItemsSQLSlowLog) *DescribeSlowLogsResponseBodyItems {
	s.SQLSlowLog = v
	return s
}

type DescribeSlowLogsResponseBodyItemsSQLSlowLog struct {
	SlowLogId                     *int64  `json:"SlowLogId,omitempty" xml:"SlowLogId,omitempty"`
	SQLHASH                       *string `json:"SQLHASH,omitempty" xml:"SQLHASH,omitempty"`
	SQLIdStr                      *string `json:"SQLIdStr,omitempty" xml:"SQLIdStr,omitempty"`
	DBName                        *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	SQLText                       *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	MySQLTotalExecutionCounts     *int64  `json:"MySQLTotalExecutionCounts,omitempty" xml:"MySQLTotalExecutionCounts,omitempty"`
	MySQLTotalExecutionTimes      *int64  `json:"MySQLTotalExecutionTimes,omitempty" xml:"MySQLTotalExecutionTimes,omitempty"`
	TotalLockTimes                *int64  `json:"TotalLockTimes,omitempty" xml:"TotalLockTimes,omitempty"`
	MaxLockTime                   *int64  `json:"MaxLockTime,omitempty" xml:"MaxLockTime,omitempty"`
	ParseTotalRowCounts           *int64  `json:"ParseTotalRowCounts,omitempty" xml:"ParseTotalRowCounts,omitempty"`
	ParseMaxRowCount              *int64  `json:"ParseMaxRowCount,omitempty" xml:"ParseMaxRowCount,omitempty"`
	ReturnTotalRowCounts          *int64  `json:"ReturnTotalRowCounts,omitempty" xml:"ReturnTotalRowCounts,omitempty"`
	ReturnMaxRowCount             *int64  `json:"ReturnMaxRowCount,omitempty" xml:"ReturnMaxRowCount,omitempty"`
	CreateTime                    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	SQLServerTotalExecutionCounts *int64  `json:"SQLServerTotalExecutionCounts,omitempty" xml:"SQLServerTotalExecutionCounts,omitempty"`
	SQLServerTotalExecutionTimes  *int64  `json:"SQLServerTotalExecutionTimes,omitempty" xml:"SQLServerTotalExecutionTimes,omitempty"`
	TotalLogicalReadCounts        *int64  `json:"TotalLogicalReadCounts,omitempty" xml:"TotalLogicalReadCounts,omitempty"`
	TotalPhysicalReadCounts       *int64  `json:"TotalPhysicalReadCounts,omitempty" xml:"TotalPhysicalReadCounts,omitempty"`
	ReportTime                    *string `json:"ReportTime,omitempty" xml:"ReportTime,omitempty"`
	MaxExecutionTime              *int64  `json:"MaxExecutionTime,omitempty" xml:"MaxExecutionTime,omitempty"`
	AvgExecutionTime              *int64  `json:"AvgExecutionTime,omitempty" xml:"AvgExecutionTime,omitempty"`
	AvgPhysicalReadCounts         *int64  `json:"AvgPhysicalReadCounts,omitempty" xml:"AvgPhysicalReadCounts,omitempty"`
	MaxPhysicalReadCounts         *int64  `json:"MaxPhysicalReadCounts,omitempty" xml:"MaxPhysicalReadCounts,omitempty"`
	MinPhysicalReadCounts         *int64  `json:"MinPhysicalReadCounts,omitempty" xml:"MinPhysicalReadCounts,omitempty"`
	AvgLogicalReadCounts          *int64  `json:"AvgLogicalReadCounts,omitempty" xml:"AvgLogicalReadCounts,omitempty"`
	MaxLogicalReadCounts          *int64  `json:"MaxLogicalReadCounts,omitempty" xml:"MaxLogicalReadCounts,omitempty"`
	MinLogicalReadCounts          *int64  `json:"MinLogicalReadCounts,omitempty" xml:"MinLogicalReadCounts,omitempty"`
	TotalIOWriteCounts            *int64  `json:"TotalIOWriteCounts,omitempty" xml:"TotalIOWriteCounts,omitempty"`
	AvgIOWriteCounts              *int64  `json:"AvgIOWriteCounts,omitempty" xml:"AvgIOWriteCounts,omitempty"`
	MaxIOWriteCounts              *int64  `json:"MaxIOWriteCounts,omitempty" xml:"MaxIOWriteCounts,omitempty"`
	MinIOWriteCounts              *int64  `json:"MinIOWriteCounts,omitempty" xml:"MinIOWriteCounts,omitempty"`
	TotalRowsAffectedCounts       *int64  `json:"TotalRowsAffectedCounts,omitempty" xml:"TotalRowsAffectedCounts,omitempty"`
	AvgRowsAffectedCounts         *int64  `json:"AvgRowsAffectedCounts,omitempty" xml:"AvgRowsAffectedCounts,omitempty"`
	MaxRowsAffectedCounts         *int64  `json:"MaxRowsAffectedCounts,omitempty" xml:"MaxRowsAffectedCounts,omitempty"`
	MinRowsAffectedCounts         *int64  `json:"MinRowsAffectedCounts,omitempty" xml:"MinRowsAffectedCounts,omitempty"`
	TotalLastRowsAffectedCounts   *int64  `json:"TotalLastRowsAffectedCounts,omitempty" xml:"TotalLastRowsAffectedCounts,omitempty"`
	AvgLastRowsAffectedCounts     *int64  `json:"AvgLastRowsAffectedCounts,omitempty" xml:"AvgLastRowsAffectedCounts,omitempty"`
	MaxLastRowsAffectedCounts     *int64  `json:"MaxLastRowsAffectedCounts,omitempty" xml:"MaxLastRowsAffectedCounts,omitempty"`
	MinLastRowsAffectedCounts     *int64  `json:"MinLastRowsAffectedCounts,omitempty" xml:"MinLastRowsAffectedCounts,omitempty"`
	SQLServerMinExecutionTime     *int64  `json:"SQLServerMinExecutionTime,omitempty" xml:"SQLServerMinExecutionTime,omitempty"`
	SQLServerAvgExecutionTime     *int64  `json:"SQLServerAvgExecutionTime,omitempty" xml:"SQLServerAvgExecutionTime,omitempty"`
	SQLServerTotalCpuTime         *int64  `json:"SQLServerTotalCpuTime,omitempty" xml:"SQLServerTotalCpuTime,omitempty"`
	SQLServerAvgCpuTime           *int64  `json:"SQLServerAvgCpuTime,omitempty" xml:"SQLServerAvgCpuTime,omitempty"`
	SQLServerMaxCpuTime           *int64  `json:"SQLServerMaxCpuTime,omitempty" xml:"SQLServerMaxCpuTime,omitempty"`
	SQLServerMinCpuTime           *int64  `json:"SQLServerMinCpuTime,omitempty" xml:"SQLServerMinCpuTime,omitempty"`
}

func (s DescribeSlowLogsResponseBodyItemsSQLSlowLog) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogsResponseBodyItemsSQLSlowLog) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSlowLogId(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SlowLogId = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLHASH(v string) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLHASH = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLIdStr(v string) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLIdStr = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetDBName(v string) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.DBName = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLText(v string) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLText = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMySQLTotalExecutionCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MySQLTotalExecutionCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMySQLTotalExecutionTimes(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MySQLTotalExecutionTimes = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetTotalLockTimes(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.TotalLockTimes = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMaxLockTime(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MaxLockTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetParseTotalRowCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.ParseTotalRowCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetParseMaxRowCount(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.ParseMaxRowCount = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetReturnTotalRowCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.ReturnTotalRowCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetReturnMaxRowCount(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.ReturnMaxRowCount = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetCreateTime(v string) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.CreateTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLServerTotalExecutionCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLServerTotalExecutionCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLServerTotalExecutionTimes(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLServerTotalExecutionTimes = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetTotalLogicalReadCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.TotalLogicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetTotalPhysicalReadCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.TotalPhysicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetReportTime(v string) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.ReportTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMaxExecutionTime(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MaxExecutionTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetAvgExecutionTime(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.AvgExecutionTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetAvgPhysicalReadCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.AvgPhysicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMaxPhysicalReadCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MaxPhysicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMinPhysicalReadCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MinPhysicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetAvgLogicalReadCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.AvgLogicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMaxLogicalReadCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MaxLogicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMinLogicalReadCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MinLogicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetTotalIOWriteCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.TotalIOWriteCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetAvgIOWriteCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.AvgIOWriteCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMaxIOWriteCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MaxIOWriteCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMinIOWriteCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MinIOWriteCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetTotalRowsAffectedCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.TotalRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetAvgRowsAffectedCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.AvgRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMaxRowsAffectedCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MaxRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMinRowsAffectedCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MinRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetTotalLastRowsAffectedCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.TotalLastRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetAvgLastRowsAffectedCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.AvgLastRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMaxLastRowsAffectedCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MaxLastRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetMinLastRowsAffectedCounts(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.MinLastRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLServerMinExecutionTime(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLServerMinExecutionTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLServerAvgExecutionTime(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLServerAvgExecutionTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLServerTotalCpuTime(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLServerTotalCpuTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLServerAvgCpuTime(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLServerAvgCpuTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLServerMaxCpuTime(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLServerMaxCpuTime = &v
	return s
}

func (s *DescribeSlowLogsResponseBodyItemsSQLSlowLog) SetSQLServerMinCpuTime(v int64) *DescribeSlowLogsResponseBodyItemsSQLSlowLog {
	s.SQLServerMinCpuTime = &v
	return s
}

type DescribeSlowLogsResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSlowLogsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSlowLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogsResponse) SetHeaders(v map[string]*string) *DescribeSlowLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSlowLogsResponse) SetBody(v *DescribeSlowLogsResponseBody) *DescribeSlowLogsResponse {
	s.Body = v
	return s
}

type DescribeSQLCollectorPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeSQLCollectorPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLCollectorPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLCollectorPolicyRequest) SetOwnerId(v int64) *DescribeSQLCollectorPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSQLCollectorPolicyRequest) SetResourceOwnerAccount(v string) *DescribeSQLCollectorPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSQLCollectorPolicyRequest) SetResourceOwnerId(v int64) *DescribeSQLCollectorPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSQLCollectorPolicyRequest) SetClientToken(v string) *DescribeSQLCollectorPolicyRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSQLCollectorPolicyRequest) SetDBInstanceId(v string) *DescribeSQLCollectorPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLCollectorPolicyRequest) SetOwnerAccount(v string) *DescribeSQLCollectorPolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSQLCollectorPolicyRequest) SetResourceGroupId(v string) *DescribeSQLCollectorPolicyRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeSQLCollectorPolicyResponseBody struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SQLCollectorStatus *string `json:"SQLCollectorStatus,omitempty" xml:"SQLCollectorStatus,omitempty"`
	StoragePeriod      *int32  `json:"StoragePeriod,omitempty" xml:"StoragePeriod,omitempty"`
}

func (s DescribeSQLCollectorPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLCollectorPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLCollectorPolicyResponseBody) SetRequestId(v string) *DescribeSQLCollectorPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLCollectorPolicyResponseBody) SetSQLCollectorStatus(v string) *DescribeSQLCollectorPolicyResponseBody {
	s.SQLCollectorStatus = &v
	return s
}

func (s *DescribeSQLCollectorPolicyResponseBody) SetStoragePeriod(v int32) *DescribeSQLCollectorPolicyResponseBody {
	s.StoragePeriod = &v
	return s
}

type DescribeSQLCollectorPolicyResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSQLCollectorPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSQLCollectorPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLCollectorPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLCollectorPolicyResponse) SetHeaders(v map[string]*string) *DescribeSQLCollectorPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLCollectorPolicyResponse) SetBody(v *DescribeSQLCollectorPolicyResponseBody) *DescribeSQLCollectorPolicyResponse {
	s.Body = v
	return s
}

type DescribeSQLCollectorRetentionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeSQLCollectorRetentionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLCollectorRetentionRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLCollectorRetentionRequest) SetOwnerId(v int64) *DescribeSQLCollectorRetentionRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSQLCollectorRetentionRequest) SetSecurityToken(v string) *DescribeSQLCollectorRetentionRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeSQLCollectorRetentionRequest) SetResourceOwnerAccount(v string) *DescribeSQLCollectorRetentionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSQLCollectorRetentionRequest) SetResourceOwnerId(v int64) *DescribeSQLCollectorRetentionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSQLCollectorRetentionRequest) SetOwnerAccount(v string) *DescribeSQLCollectorRetentionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeSQLCollectorRetentionRequest) SetDBInstanceId(v string) *DescribeSQLCollectorRetentionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLCollectorRetentionRequest) SetResourceGroupId(v string) *DescribeSQLCollectorRetentionRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeSQLCollectorRetentionResponseBody struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeSQLCollectorRetentionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLCollectorRetentionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLCollectorRetentionResponseBody) SetConfigValue(v string) *DescribeSQLCollectorRetentionResponseBody {
	s.ConfigValue = &v
	return s
}

func (s *DescribeSQLCollectorRetentionResponseBody) SetRequestId(v string) *DescribeSQLCollectorRetentionResponseBody {
	s.RequestId = &v
	return s
}

type DescribeSQLCollectorRetentionResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSQLCollectorRetentionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSQLCollectorRetentionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLCollectorRetentionResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLCollectorRetentionResponse) SetHeaders(v map[string]*string) *DescribeSQLCollectorRetentionResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLCollectorRetentionResponse) SetBody(v *DescribeSQLCollectorRetentionResponseBody) *DescribeSQLCollectorRetentionResponse {
	s.Body = v
	return s
}

type DescribeSQLLogFilesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	FileName             *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeSQLLogFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogFilesRequest) SetOwnerId(v int64) *DescribeSQLLogFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSQLLogFilesRequest) SetResourceOwnerAccount(v string) *DescribeSQLLogFilesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSQLLogFilesRequest) SetResourceOwnerId(v int64) *DescribeSQLLogFilesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSQLLogFilesRequest) SetDBInstanceId(v string) *DescribeSQLLogFilesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogFilesRequest) SetFileName(v string) *DescribeSQLLogFilesRequest {
	s.FileName = &v
	return s
}

func (s *DescribeSQLLogFilesRequest) SetPageSize(v int32) *DescribeSQLLogFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogFilesRequest) SetPageNumber(v int32) *DescribeSQLLogFilesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogFilesRequest) SetOwnerAccount(v string) *DescribeSQLLogFilesRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeSQLLogFilesResponseBody struct {
	RequestId        *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                                `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeSQLLogFilesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeSQLLogFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogFilesResponseBody) SetRequestId(v string) *DescribeSQLLogFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogFilesResponseBody) SetPageNumber(v int32) *DescribeSQLLogFilesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogFilesResponseBody) SetPageRecordCount(v int32) *DescribeSQLLogFilesResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogFilesResponseBody) SetTotalRecordCount(v int32) *DescribeSQLLogFilesResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSQLLogFilesResponseBody) SetItems(v *DescribeSQLLogFilesResponseBodyItems) *DescribeSQLLogFilesResponseBody {
	s.Items = v
	return s
}

type DescribeSQLLogFilesResponseBodyItems struct {
	LogFile []*DescribeSQLLogFilesResponseBodyItemsLogFile `json:"LogFile,omitempty" xml:"LogFile,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogFilesResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogFilesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogFilesResponseBodyItems) SetLogFile(v []*DescribeSQLLogFilesResponseBodyItemsLogFile) *DescribeSQLLogFilesResponseBodyItems {
	s.LogFile = v
	return s
}

type DescribeSQLLogFilesResponseBodyItemsLogFile struct {
	FileID         *string `json:"FileID,omitempty" xml:"FileID,omitempty"`
	LogStartTime   *string `json:"LogStartTime,omitempty" xml:"LogStartTime,omitempty"`
	LogSize        *string `json:"LogSize,omitempty" xml:"LogSize,omitempty"`
	LogDownloadURL *string `json:"LogDownloadURL,omitempty" xml:"LogDownloadURL,omitempty"`
	LogEndTime     *string `json:"LogEndTime,omitempty" xml:"LogEndTime,omitempty"`
	LogStatus      *string `json:"LogStatus,omitempty" xml:"LogStatus,omitempty"`
}

func (s DescribeSQLLogFilesResponseBodyItemsLogFile) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogFilesResponseBodyItemsLogFile) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogFilesResponseBodyItemsLogFile) SetFileID(v string) *DescribeSQLLogFilesResponseBodyItemsLogFile {
	s.FileID = &v
	return s
}

func (s *DescribeSQLLogFilesResponseBodyItemsLogFile) SetLogStartTime(v string) *DescribeSQLLogFilesResponseBodyItemsLogFile {
	s.LogStartTime = &v
	return s
}

func (s *DescribeSQLLogFilesResponseBodyItemsLogFile) SetLogSize(v string) *DescribeSQLLogFilesResponseBodyItemsLogFile {
	s.LogSize = &v
	return s
}

func (s *DescribeSQLLogFilesResponseBodyItemsLogFile) SetLogDownloadURL(v string) *DescribeSQLLogFilesResponseBodyItemsLogFile {
	s.LogDownloadURL = &v
	return s
}

func (s *DescribeSQLLogFilesResponseBodyItemsLogFile) SetLogEndTime(v string) *DescribeSQLLogFilesResponseBodyItemsLogFile {
	s.LogEndTime = &v
	return s
}

func (s *DescribeSQLLogFilesResponseBodyItemsLogFile) SetLogStatus(v string) *DescribeSQLLogFilesResponseBodyItemsLogFile {
	s.LogStatus = &v
	return s
}

type DescribeSQLLogFilesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSQLLogFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSQLLogFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogFilesResponse) SetHeaders(v map[string]*string) *DescribeSQLLogFilesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLLogFilesResponse) SetBody(v *DescribeSQLLogFilesResponseBody) *DescribeSQLLogFilesResponse {
	s.Body = v
	return s
}

type DescribeSQLLogRecordsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	SQLId                *int64  `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	QueryKeywords        *string `json:"QueryKeywords,omitempty" xml:"QueryKeywords,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Database             *string `json:"Database,omitempty" xml:"Database,omitempty"`
	User                 *string `json:"User,omitempty" xml:"User,omitempty"`
	Form                 *string `json:"Form,omitempty" xml:"Form,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeSQLLogRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogRecordsRequest) SetOwnerId(v int64) *DescribeSQLLogRecordsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetResourceOwnerAccount(v string) *DescribeSQLLogRecordsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetResourceOwnerId(v int64) *DescribeSQLLogRecordsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetClientToken(v string) *DescribeSQLLogRecordsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetDBInstanceId(v string) *DescribeSQLLogRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetSQLId(v int64) *DescribeSQLLogRecordsRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetQueryKeywords(v string) *DescribeSQLLogRecordsRequest {
	s.QueryKeywords = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetStartTime(v string) *DescribeSQLLogRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetDatabase(v string) *DescribeSQLLogRecordsRequest {
	s.Database = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetUser(v string) *DescribeSQLLogRecordsRequest {
	s.User = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetForm(v string) *DescribeSQLLogRecordsRequest {
	s.Form = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetEndTime(v string) *DescribeSQLLogRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetPageSize(v int32) *DescribeSQLLogRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetPageNumber(v int32) *DescribeSQLLogRecordsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetOwnerAccount(v string) *DescribeSQLLogRecordsRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeSQLLogRecordsResponseBody struct {
	RequestId        *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                                  `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int64                                  `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeSQLLogRecordsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeSQLLogRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogRecordsResponseBody) SetRequestId(v string) *DescribeSQLLogRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBody) SetPageNumber(v int32) *DescribeSQLLogRecordsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBody) SetPageRecordCount(v int32) *DescribeSQLLogRecordsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBody) SetTotalRecordCount(v int64) *DescribeSQLLogRecordsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBody) SetItems(v *DescribeSQLLogRecordsResponseBodyItems) *DescribeSQLLogRecordsResponseBody {
	s.Items = v
	return s
}

type DescribeSQLLogRecordsResponseBodyItems struct {
	SQLRecord []*DescribeSQLLogRecordsResponseBodyItemsSQLRecord `json:"SQLRecord,omitempty" xml:"SQLRecord,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogRecordsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogRecordsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogRecordsResponseBodyItems) SetSQLRecord(v []*DescribeSQLLogRecordsResponseBodyItemsSQLRecord) *DescribeSQLLogRecordsResponseBodyItems {
	s.SQLRecord = v
	return s
}

type DescribeSQLLogRecordsResponseBodyItemsSQLRecord struct {
	HostAddress         *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	SQLText             *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	ReturnRowCounts     *int64  `json:"ReturnRowCounts,omitempty" xml:"ReturnRowCounts,omitempty"`
	DBName              *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	ExecuteTime         *string `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	ThreadID            *string `json:"ThreadID,omitempty" xml:"ThreadID,omitempty"`
	TotalExecutionTimes *int64  `json:"TotalExecutionTimes,omitempty" xml:"TotalExecutionTimes,omitempty"`
	AccountName         *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
}

func (s DescribeSQLLogRecordsResponseBodyItemsSQLRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogRecordsResponseBodyItemsSQLRecord) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogRecordsResponseBodyItemsSQLRecord) SetHostAddress(v string) *DescribeSQLLogRecordsResponseBodyItemsSQLRecord {
	s.HostAddress = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBodyItemsSQLRecord) SetSQLText(v string) *DescribeSQLLogRecordsResponseBodyItemsSQLRecord {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBodyItemsSQLRecord) SetReturnRowCounts(v int64) *DescribeSQLLogRecordsResponseBodyItemsSQLRecord {
	s.ReturnRowCounts = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBodyItemsSQLRecord) SetDBName(v string) *DescribeSQLLogRecordsResponseBodyItemsSQLRecord {
	s.DBName = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBodyItemsSQLRecord) SetExecuteTime(v string) *DescribeSQLLogRecordsResponseBodyItemsSQLRecord {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBodyItemsSQLRecord) SetThreadID(v string) *DescribeSQLLogRecordsResponseBodyItemsSQLRecord {
	s.ThreadID = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBodyItemsSQLRecord) SetTotalExecutionTimes(v int64) *DescribeSQLLogRecordsResponseBodyItemsSQLRecord {
	s.TotalExecutionTimes = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseBodyItemsSQLRecord) SetAccountName(v string) *DescribeSQLLogRecordsResponseBodyItemsSQLRecord {
	s.AccountName = &v
	return s
}

type DescribeSQLLogRecordsResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSQLLogRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSQLLogRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogRecordsResponse) SetHeaders(v map[string]*string) *DescribeSQLLogRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLLogRecordsResponse) SetBody(v *DescribeSQLLogRecordsResponseBody) *DescribeSQLLogRecordsResponse {
	s.Body = v
	return s
}

type DescribeSQLLogReportListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeSQLLogReportListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListRequest) SetOwnerId(v int64) *DescribeSQLLogReportListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetResourceOwnerAccount(v string) *DescribeSQLLogReportListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetResourceOwnerId(v int64) *DescribeSQLLogReportListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetDBInstanceId(v string) *DescribeSQLLogReportListRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetStartTime(v string) *DescribeSQLLogReportListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetEndTime(v string) *DescribeSQLLogReportListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetPageSize(v int32) *DescribeSQLLogReportListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetPageNumber(v int32) *DescribeSQLLogReportListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetOwnerAccount(v string) *DescribeSQLLogReportListRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeSQLLogReportListResponseBody struct {
	RequestId        *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                                     `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                     `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeSQLLogReportListResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeSQLLogReportListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseBody) SetRequestId(v string) *DescribeSQLLogReportListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogReportListResponseBody) SetPageNumber(v int32) *DescribeSQLLogReportListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogReportListResponseBody) SetPageRecordCount(v int32) *DescribeSQLLogReportListResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogReportListResponseBody) SetTotalRecordCount(v int32) *DescribeSQLLogReportListResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSQLLogReportListResponseBody) SetItems(v *DescribeSQLLogReportListResponseBodyItems) *DescribeSQLLogReportListResponseBody {
	s.Items = v
	return s
}

type DescribeSQLLogReportListResponseBodyItems struct {
	Item []*DescribeSQLLogReportListResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogReportListResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseBodyItems) SetItem(v []*DescribeSQLLogReportListResponseBodyItemsItem) *DescribeSQLLogReportListResponseBodyItems {
	s.Item = v
	return s
}

type DescribeSQLLogReportListResponseBodyItemsItem struct {
	ReportTime       *string                                                        `json:"ReportTime,omitempty" xml:"ReportTime,omitempty"`
	LatencyTopNItems *DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItems `json:"LatencyTopNItems,omitempty" xml:"LatencyTopNItems,omitempty" type:"Struct"`
	QPSTopNItems     *DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItems     `json:"QPSTopNItems,omitempty" xml:"QPSTopNItems,omitempty" type:"Struct"`
}

func (s DescribeSQLLogReportListResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseBodyItemsItem) SetReportTime(v string) *DescribeSQLLogReportListResponseBodyItemsItem {
	s.ReportTime = &v
	return s
}

func (s *DescribeSQLLogReportListResponseBodyItemsItem) SetLatencyTopNItems(v *DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItems) *DescribeSQLLogReportListResponseBodyItemsItem {
	s.LatencyTopNItems = v
	return s
}

func (s *DescribeSQLLogReportListResponseBodyItemsItem) SetQPSTopNItems(v *DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItems) *DescribeSQLLogReportListResponseBodyItemsItem {
	s.QPSTopNItems = v
	return s
}

type DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItems struct {
	LatencyTopNItem []*DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem `json:"LatencyTopNItem,omitempty" xml:"LatencyTopNItem,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItems) SetLatencyTopNItem(v []*DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) *DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItems {
	s.LatencyTopNItem = v
	return s
}

type DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem struct {
	SQLText         *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	SQLExecuteTimes *int64  `json:"SQLExecuteTimes,omitempty" xml:"SQLExecuteTimes,omitempty"`
	AvgLatency      *int64  `json:"AvgLatency,omitempty" xml:"AvgLatency,omitempty"`
}

func (s DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) SetSQLText(v string) *DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) SetSQLExecuteTimes(v int64) *DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem {
	s.SQLExecuteTimes = &v
	return s
}

func (s *DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) SetAvgLatency(v int64) *DescribeSQLLogReportListResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem {
	s.AvgLatency = &v
	return s
}

type DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItems struct {
	QPSTopNItem []*DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem `json:"QPSTopNItem,omitempty" xml:"QPSTopNItem,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItems) SetQPSTopNItem(v []*DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem) *DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItems {
	s.QPSTopNItem = v
	return s
}

type DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem struct {
	SQLExecuteTimes *int64  `json:"SQLExecuteTimes,omitempty" xml:"SQLExecuteTimes,omitempty"`
	SQLText         *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
}

func (s DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem) SetSQLExecuteTimes(v int64) *DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem {
	s.SQLExecuteTimes = &v
	return s
}

func (s *DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem) SetSQLText(v string) *DescribeSQLLogReportListResponseBodyItemsItemQPSTopNItemsQPSTopNItem {
	s.SQLText = &v
	return s
}

type DescribeSQLLogReportListResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSQLLogReportListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSQLLogReportListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponse) SetHeaders(v map[string]*string) *DescribeSQLLogReportListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLLogReportListResponse) SetBody(v *DescribeSQLLogReportListResponseBody) *DescribeSQLLogReportListResponse {
	s.Body = v
	return s
}

type DescribeSQLLogReportsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeSQLLogReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsRequest) SetOwnerId(v int64) *DescribeSQLLogReportsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetResourceOwnerAccount(v string) *DescribeSQLLogReportsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetResourceOwnerId(v int64) *DescribeSQLLogReportsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetDBInstanceId(v string) *DescribeSQLLogReportsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetStartTime(v string) *DescribeSQLLogReportsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetEndTime(v string) *DescribeSQLLogReportsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetPageSize(v int32) *DescribeSQLLogReportsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetPageNumber(v int32) *DescribeSQLLogReportsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetOwnerAccount(v string) *DescribeSQLLogReportsRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeSQLLogReportsResponseBody struct {
	RequestId        *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                                  `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                                  `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeSQLLogReportsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeSQLLogReportsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseBody) SetRequestId(v string) *DescribeSQLLogReportsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogReportsResponseBody) SetPageNumber(v int32) *DescribeSQLLogReportsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogReportsResponseBody) SetPageRecordCount(v int32) *DescribeSQLLogReportsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogReportsResponseBody) SetTotalRecordCount(v int32) *DescribeSQLLogReportsResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSQLLogReportsResponseBody) SetItems(v *DescribeSQLLogReportsResponseBodyItems) *DescribeSQLLogReportsResponseBody {
	s.Items = v
	return s
}

type DescribeSQLLogReportsResponseBodyItems struct {
	Item []*DescribeSQLLogReportsResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogReportsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseBodyItems) SetItem(v []*DescribeSQLLogReportsResponseBodyItemsItem) *DescribeSQLLogReportsResponseBodyItems {
	s.Item = v
	return s
}

type DescribeSQLLogReportsResponseBodyItemsItem struct {
	ReportTime       *string                                                     `json:"ReportTime,omitempty" xml:"ReportTime,omitempty"`
	LatencyTopNItems *DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItems `json:"LatencyTopNItems,omitempty" xml:"LatencyTopNItems,omitempty" type:"Struct"`
	QPSTopNItems     *DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItems     `json:"QPSTopNItems,omitempty" xml:"QPSTopNItems,omitempty" type:"Struct"`
}

func (s DescribeSQLLogReportsResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseBodyItemsItem) SetReportTime(v string) *DescribeSQLLogReportsResponseBodyItemsItem {
	s.ReportTime = &v
	return s
}

func (s *DescribeSQLLogReportsResponseBodyItemsItem) SetLatencyTopNItems(v *DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItems) *DescribeSQLLogReportsResponseBodyItemsItem {
	s.LatencyTopNItems = v
	return s
}

func (s *DescribeSQLLogReportsResponseBodyItemsItem) SetQPSTopNItems(v *DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItems) *DescribeSQLLogReportsResponseBodyItemsItem {
	s.QPSTopNItems = v
	return s
}

type DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItems struct {
	LatencyTopNItem []*DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem `json:"LatencyTopNItem,omitempty" xml:"LatencyTopNItem,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItems) SetLatencyTopNItem(v []*DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) *DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItems {
	s.LatencyTopNItem = v
	return s
}

type DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem struct {
	SQLText         *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	SQLExecuteTimes *int64  `json:"SQLExecuteTimes,omitempty" xml:"SQLExecuteTimes,omitempty"`
	AvgLatency      *int64  `json:"AvgLatency,omitempty" xml:"AvgLatency,omitempty"`
}

func (s DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) SetSQLText(v string) *DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) SetSQLExecuteTimes(v int64) *DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem {
	s.SQLExecuteTimes = &v
	return s
}

func (s *DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem) SetAvgLatency(v int64) *DescribeSQLLogReportsResponseBodyItemsItemLatencyTopNItemsLatencyTopNItem {
	s.AvgLatency = &v
	return s
}

type DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItems struct {
	QPSTopNItem []*DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItemsQPSTopNItem `json:"QPSTopNItem,omitempty" xml:"QPSTopNItem,omitempty" type:"Repeated"`
}

func (s DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItems) SetQPSTopNItem(v []*DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItemsQPSTopNItem) *DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItems {
	s.QPSTopNItem = v
	return s
}

type DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItemsQPSTopNItem struct {
	SQLExecuteTimes *int64  `json:"SQLExecuteTimes,omitempty" xml:"SQLExecuteTimes,omitempty"`
	SQLText         *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
}

func (s DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItemsQPSTopNItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItemsQPSTopNItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItemsQPSTopNItem) SetSQLExecuteTimes(v int64) *DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItemsQPSTopNItem {
	s.SQLExecuteTimes = &v
	return s
}

func (s *DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItemsQPSTopNItem) SetSQLText(v string) *DescribeSQLLogReportsResponseBodyItemsItemQPSTopNItemsQPSTopNItem {
	s.SQLText = &v
	return s
}

type DescribeSQLLogReportsResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSQLLogReportsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSQLLogReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponse) SetHeaders(v map[string]*string) *DescribeSQLLogReportsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSQLLogReportsResponse) SetBody(v *DescribeSQLLogReportsResponseBody) *DescribeSQLLogReportsResponse {
	s.Body = v
	return s
}

type DescribeTagsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId              *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Tags                 *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceType         *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsRequest) SetOwnerId(v int64) *DescribeTagsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceOwnerAccount(v string) *DescribeTagsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceOwnerId(v int64) *DescribeTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTagsRequest) SetClientToken(v string) *DescribeTagsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeTagsRequest) SetProxyId(v string) *DescribeTagsRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeTagsRequest) SetRegionId(v string) *DescribeTagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTagsRequest) SetDBInstanceId(v string) *DescribeTagsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeTagsRequest) SetTags(v string) *DescribeTagsRequest {
	s.Tags = &v
	return s
}

func (s *DescribeTagsRequest) SetOwnerAccount(v string) *DescribeTagsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DescribeTagsRequest) SetResourceType(v string) *DescribeTagsRequest {
	s.ResourceType = &v
	return s
}

type DescribeTagsResponseBody struct {
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Items     *DescribeTagsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBody) SetRequestId(v string) *DescribeTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsResponseBody) SetItems(v *DescribeTagsResponseBodyItems) *DescribeTagsResponseBody {
	s.Items = v
	return s
}

type DescribeTagsResponseBodyItems struct {
	TagInfos []*DescribeTagsResponseBodyItemsTagInfos `json:"TagInfos,omitempty" xml:"TagInfos,omitempty" type:"Repeated"`
}

func (s DescribeTagsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBodyItems) SetTagInfos(v []*DescribeTagsResponseBodyItemsTagInfos) *DescribeTagsResponseBodyItems {
	s.TagInfos = v
	return s
}

type DescribeTagsResponseBodyItemsTagInfos struct {
	TagValue      *string                                             `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey        *string                                             `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	DBInstanceIds *DescribeTagsResponseBodyItemsTagInfosDBInstanceIds `json:"DBInstanceIds,omitempty" xml:"DBInstanceIds,omitempty" type:"Struct"`
}

func (s DescribeTagsResponseBodyItemsTagInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseBodyItemsTagInfos) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBodyItemsTagInfos) SetTagValue(v string) *DescribeTagsResponseBodyItemsTagInfos {
	s.TagValue = &v
	return s
}

func (s *DescribeTagsResponseBodyItemsTagInfos) SetTagKey(v string) *DescribeTagsResponseBodyItemsTagInfos {
	s.TagKey = &v
	return s
}

func (s *DescribeTagsResponseBodyItemsTagInfos) SetDBInstanceIds(v *DescribeTagsResponseBodyItemsTagInfosDBInstanceIds) *DescribeTagsResponseBodyItemsTagInfos {
	s.DBInstanceIds = v
	return s
}

type DescribeTagsResponseBodyItemsTagInfosDBInstanceIds struct {
	DBInstanceIds []*string `json:"DBInstanceIds,omitempty" xml:"DBInstanceIds,omitempty" type:"Repeated"`
}

func (s DescribeTagsResponseBodyItemsTagInfosDBInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseBodyItemsTagInfosDBInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseBodyItemsTagInfosDBInstanceIds) SetDBInstanceIds(v []*string) *DescribeTagsResponseBodyItemsTagInfosDBInstanceIds {
	s.DBInstanceIds = v
	return s
}

type DescribeTagsResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponse) SetHeaders(v map[string]*string) *DescribeTagsResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagsResponse) SetBody(v *DescribeTagsResponseBody) *DescribeTagsResponse {
	s.Body = v
	return s
}

type DescribeTasksRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StartTime            *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskAction           *string `json:"TaskAction,omitempty" xml:"TaskAction,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DescribeTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeTasksRequest) SetOwnerId(v int64) *DescribeTasksRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeTasksRequest) SetResourceOwnerAccount(v string) *DescribeTasksRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DescribeTasksRequest) SetResourceOwnerId(v int64) *DescribeTasksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeTasksRequest) SetDBInstanceId(v string) *DescribeTasksRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeTasksRequest) SetStartTime(v string) *DescribeTasksRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeTasksRequest) SetEndTime(v string) *DescribeTasksRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTasksRequest) SetPageSize(v int32) *DescribeTasksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTasksRequest) SetPageNumber(v int32) *DescribeTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTasksRequest) SetStatus(v string) *DescribeTasksRequest {
	s.Status = &v
	return s
}

func (s *DescribeTasksRequest) SetTaskAction(v string) *DescribeTasksRequest {
	s.TaskAction = &v
	return s
}

func (s *DescribeTasksRequest) SetOwnerAccount(v string) *DescribeTasksRequest {
	s.OwnerAccount = &v
	return s
}

type DescribeTasksResponseBody struct {
	RequestId        *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int32                          `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	TotalRecordCount *int32                          `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
	Items            *DescribeTasksResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s DescribeTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseBody) SetRequestId(v string) *DescribeTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTasksResponseBody) SetPageNumber(v int32) *DescribeTasksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeTasksResponseBody) SetPageRecordCount(v int32) *DescribeTasksResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeTasksResponseBody) SetTotalRecordCount(v int32) *DescribeTasksResponseBody {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeTasksResponseBody) SetItems(v *DescribeTasksResponseBodyItems) *DescribeTasksResponseBody {
	s.Items = v
	return s
}

type DescribeTasksResponseBodyItems struct {
	TaskProgressInfo []*DescribeTasksResponseBodyItemsTaskProgressInfo `json:"TaskProgressInfo,omitempty" xml:"TaskProgressInfo,omitempty" type:"Repeated"`
}

func (s DescribeTasksResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseBodyItems) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseBodyItems) SetTaskProgressInfo(v []*DescribeTasksResponseBodyItemsTaskProgressInfo) *DescribeTasksResponseBodyItems {
	s.TaskProgressInfo = v
	return s
}

type DescribeTasksResponseBodyItemsTaskProgressInfo struct {
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty"`
	FinishTime         *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Progress           *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	StepsInfo          *string `json:"StepsInfo,omitempty" xml:"StepsInfo,omitempty"`
	BeginTime          *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	ExpectedFinishTime *string `json:"ExpectedFinishTime,omitempty" xml:"ExpectedFinishTime,omitempty"`
	TaskErrorCode      *string `json:"TaskErrorCode,omitempty" xml:"TaskErrorCode,omitempty"`
	CurrentStepName    *string `json:"CurrentStepName,omitempty" xml:"CurrentStepName,omitempty"`
	ProgressInfo       *string `json:"ProgressInfo,omitempty" xml:"ProgressInfo,omitempty"`
	StepProgressInfo   *string `json:"StepProgressInfo,omitempty" xml:"StepProgressInfo,omitempty"`
	TaskErrorMessage   *string `json:"TaskErrorMessage,omitempty" xml:"TaskErrorMessage,omitempty"`
	TaskAction         *string `json:"TaskAction,omitempty" xml:"TaskAction,omitempty"`
	Remain             *int32  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	DBName             *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	TaskId             *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeTasksResponseBodyItemsTaskProgressInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseBodyItemsTaskProgressInfo) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetStatus(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.Status = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetFinishTime(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.FinishTime = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetProgress(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.Progress = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetStepsInfo(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.StepsInfo = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetBeginTime(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.BeginTime = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetExpectedFinishTime(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.ExpectedFinishTime = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetTaskErrorCode(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.TaskErrorCode = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetCurrentStepName(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.CurrentStepName = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetProgressInfo(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.ProgressInfo = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetStepProgressInfo(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.StepProgressInfo = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetTaskErrorMessage(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.TaskErrorMessage = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetTaskAction(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.TaskAction = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetRemain(v int32) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.Remain = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetDBName(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.DBName = &v
	return s
}

func (s *DescribeTasksResponseBodyItemsTaskProgressInfo) SetTaskId(v string) *DescribeTasksResponseBodyItemsTaskProgressInfo {
	s.TaskId = &v
	return s
}

type DescribeTasksResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponse) SetHeaders(v map[string]*string) *DescribeTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeTasksResponse) SetBody(v *DescribeTasksResponseBody) *DescribeTasksResponse {
	s.Body = v
	return s
}

type DestroyDBInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DestroyDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DestroyDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *DestroyDBInstanceRequest) SetOwnerId(v int64) *DestroyDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DestroyDBInstanceRequest) SetResourceOwnerAccount(v string) *DestroyDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DestroyDBInstanceRequest) SetResourceOwnerId(v int64) *DestroyDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DestroyDBInstanceRequest) SetClientToken(v string) *DestroyDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *DestroyDBInstanceRequest) SetDBInstanceId(v string) *DestroyDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DestroyDBInstanceRequest) SetOwnerAccount(v string) *DestroyDBInstanceRequest {
	s.OwnerAccount = &v
	return s
}

type DestroyDBInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DestroyDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DestroyDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DestroyDBInstanceResponseBody) SetRequestId(v string) *DestroyDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DestroyDBInstanceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DestroyDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DestroyDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DestroyDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *DestroyDBInstanceResponse) SetHeaders(v map[string]*string) *DestroyDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *DestroyDBInstanceResponse) SetBody(v *DestroyDBInstanceResponseBody) *DestroyDBInstanceResponse {
	s.Body = v
	return s
}

type DropDedicatedHostUserRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DedicatedHostName    *string `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DropDedicatedHostUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DropDedicatedHostUserRequest) GoString() string {
	return s.String()
}

func (s *DropDedicatedHostUserRequest) SetOwnerId(v int64) *DropDedicatedHostUserRequest {
	s.OwnerId = &v
	return s
}

func (s *DropDedicatedHostUserRequest) SetResourceOwnerAccount(v string) *DropDedicatedHostUserRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DropDedicatedHostUserRequest) SetResourceOwnerId(v int64) *DropDedicatedHostUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DropDedicatedHostUserRequest) SetDedicatedHostName(v string) *DropDedicatedHostUserRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *DropDedicatedHostUserRequest) SetUserName(v string) *DropDedicatedHostUserRequest {
	s.UserName = &v
	return s
}

func (s *DropDedicatedHostUserRequest) SetRegionId(v string) *DropDedicatedHostUserRequest {
	s.RegionId = &v
	return s
}

type DropDedicatedHostUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DropDedicatedHostUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DropDedicatedHostUserResponseBody) GoString() string {
	return s.String()
}

func (s *DropDedicatedHostUserResponseBody) SetRequestId(v string) *DropDedicatedHostUserResponseBody {
	s.RequestId = &v
	return s
}

type DropDedicatedHostUserResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DropDedicatedHostUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DropDedicatedHostUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DropDedicatedHostUserResponse) GoString() string {
	return s.String()
}

func (s *DropDedicatedHostUserResponse) SetHeaders(v map[string]*string) *DropDedicatedHostUserResponse {
	s.Headers = v
	return s
}

func (s *DropDedicatedHostUserResponse) SetBody(v *DropDedicatedHostUserResponseBody) *DropDedicatedHostUserResponse {
	s.Body = v
	return s
}

type EvaluateDedicatedHostInstanceResourceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	DiskType             *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	DiskSize             *string `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	InstanceClassNames   *string `json:"InstanceClassNames,omitempty" xml:"InstanceClassNames,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
}

func (s EvaluateDedicatedHostInstanceResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s EvaluateDedicatedHostInstanceResourceRequest) GoString() string {
	return s.String()
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetOwnerId(v int64) *EvaluateDedicatedHostInstanceResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetResourceOwnerAccount(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetResourceOwnerId(v int64) *EvaluateDedicatedHostInstanceResourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetRegionId(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.RegionId = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetDedicatedHostGroupId(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetDiskType(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.DiskType = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetDiskSize(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.DiskSize = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetInstanceClassNames(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.InstanceClassNames = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetEngine(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.Engine = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetEngineVersion(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.EngineVersion = &v
	return s
}

type EvaluateDedicatedHostInstanceResourceResponseBody struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	Available       *int32  `json:"Available,omitempty" xml:"Available,omitempty"`
}

func (s EvaluateDedicatedHostInstanceResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EvaluateDedicatedHostInstanceResourceResponseBody) GoString() string {
	return s.String()
}

func (s *EvaluateDedicatedHostInstanceResourceResponseBody) SetRequestId(v string) *EvaluateDedicatedHostInstanceResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceResponseBody) SetDBInstanceClass(v string) *EvaluateDedicatedHostInstanceResourceResponseBody {
	s.DBInstanceClass = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceResponseBody) SetAvailable(v int32) *EvaluateDedicatedHostInstanceResourceResponseBody {
	s.Available = &v
	return s
}

type EvaluateDedicatedHostInstanceResourceResponse struct {
	Headers map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EvaluateDedicatedHostInstanceResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EvaluateDedicatedHostInstanceResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s EvaluateDedicatedHostInstanceResourceResponse) GoString() string {
	return s.String()
}

func (s *EvaluateDedicatedHostInstanceResourceResponse) SetHeaders(v map[string]*string) *EvaluateDedicatedHostInstanceResourceResponse {
	s.Headers = v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceResponse) SetBody(v *EvaluateDedicatedHostInstanceResourceResponseBody) *EvaluateDedicatedHostInstanceResourceResponse {
	s.Body = v
	return s
}

type GetDbProxyInstanceSslRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DbInstanceId *string `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty"`
}

func (s GetDbProxyInstanceSslRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDbProxyInstanceSslRequest) GoString() string {
	return s.String()
}

func (s *GetDbProxyInstanceSslRequest) SetRegionId(v string) *GetDbProxyInstanceSslRequest {
	s.RegionId = &v
	return s
}

func (s *GetDbProxyInstanceSslRequest) SetDbInstanceId(v string) *GetDbProxyInstanceSslRequest {
	s.DbInstanceId = &v
	return s
}

type GetDbProxyInstanceSslResponseBody struct {
	RequestId            *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DbProxyCertListItems *GetDbProxyInstanceSslResponseBodyDbProxyCertListItems `json:"DbProxyCertListItems,omitempty" xml:"DbProxyCertListItems,omitempty" type:"Struct"`
}

func (s GetDbProxyInstanceSslResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDbProxyInstanceSslResponseBody) GoString() string {
	return s.String()
}

func (s *GetDbProxyInstanceSslResponseBody) SetRequestId(v string) *GetDbProxyInstanceSslResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDbProxyInstanceSslResponseBody) SetDbProxyCertListItems(v *GetDbProxyInstanceSslResponseBodyDbProxyCertListItems) *GetDbProxyInstanceSslResponseBody {
	s.DbProxyCertListItems = v
	return s
}

type GetDbProxyInstanceSslResponseBodyDbProxyCertListItems struct {
	DbProxyCertListItems []*GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems `json:"DbProxyCertListItems,omitempty" xml:"DbProxyCertListItems,omitempty" type:"Repeated"`
}

func (s GetDbProxyInstanceSslResponseBodyDbProxyCertListItems) String() string {
	return tea.Prettify(s)
}

func (s GetDbProxyInstanceSslResponseBodyDbProxyCertListItems) GoString() string {
	return s.String()
}

func (s *GetDbProxyInstanceSslResponseBodyDbProxyCertListItems) SetDbProxyCertListItems(v []*GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems) *GetDbProxyInstanceSslResponseBodyDbProxyCertListItems {
	s.DbProxyCertListItems = v
	return s
}

type GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems struct {
	DbInstanceName *string `json:"DbInstanceName,omitempty" xml:"DbInstanceName,omitempty"`
	EndpointName   *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty"`
	EndpointType   *string `json:"EndpointType,omitempty" xml:"EndpointType,omitempty"`
	SslExpiredTime *string `json:"SslExpiredTime,omitempty" xml:"SslExpiredTime,omitempty"`
	CertCommonName *string `json:"CertCommonName,omitempty" xml:"CertCommonName,omitempty"`
}

func (s GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems) String() string {
	return tea.Prettify(s)
}

func (s GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems) GoString() string {
	return s.String()
}

func (s *GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems) SetDbInstanceName(v string) *GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems {
	s.DbInstanceName = &v
	return s
}

func (s *GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems) SetEndpointName(v string) *GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems {
	s.EndpointName = &v
	return s
}

func (s *GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems) SetEndpointType(v string) *GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems {
	s.EndpointType = &v
	return s
}

func (s *GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems) SetSslExpiredTime(v string) *GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems {
	s.SslExpiredTime = &v
	return s
}

func (s *GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems) SetCertCommonName(v string) *GetDbProxyInstanceSslResponseBodyDbProxyCertListItemsDbProxyCertListItems {
	s.CertCommonName = &v
	return s
}

type GetDbProxyInstanceSslResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetDbProxyInstanceSslResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDbProxyInstanceSslResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDbProxyInstanceSslResponse) GoString() string {
	return s.String()
}

func (s *GetDbProxyInstanceSslResponse) SetHeaders(v map[string]*string) *GetDbProxyInstanceSslResponse {
	s.Headers = v
	return s
}

func (s *GetDbProxyInstanceSslResponse) SetBody(v *GetDbProxyInstanceSslResponseBody) *GetDbProxyInstanceSslResponse {
	s.Body = v
	return s
}

type GrantAccountPrivilegeRequest struct {
	ResourceOwnerId  *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName      *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	DBName           *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	AccountPrivilege *string `json:"AccountPrivilege,omitempty" xml:"AccountPrivilege,omitempty"`
}

func (s GrantAccountPrivilegeRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantAccountPrivilegeRequest) GoString() string {
	return s.String()
}

func (s *GrantAccountPrivilegeRequest) SetResourceOwnerId(v int64) *GrantAccountPrivilegeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GrantAccountPrivilegeRequest) SetDBInstanceId(v string) *GrantAccountPrivilegeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GrantAccountPrivilegeRequest) SetAccountName(v string) *GrantAccountPrivilegeRequest {
	s.AccountName = &v
	return s
}

func (s *GrantAccountPrivilegeRequest) SetDBName(v string) *GrantAccountPrivilegeRequest {
	s.DBName = &v
	return s
}

func (s *GrantAccountPrivilegeRequest) SetAccountPrivilege(v string) *GrantAccountPrivilegeRequest {
	s.AccountPrivilege = &v
	return s
}

type GrantAccountPrivilegeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GrantAccountPrivilegeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GrantAccountPrivilegeResponseBody) GoString() string {
	return s.String()
}

func (s *GrantAccountPrivilegeResponseBody) SetRequestId(v string) *GrantAccountPrivilegeResponseBody {
	s.RequestId = &v
	return s
}

type GrantAccountPrivilegeResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GrantAccountPrivilegeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GrantAccountPrivilegeResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantAccountPrivilegeResponse) GoString() string {
	return s.String()
}

func (s *GrantAccountPrivilegeResponse) SetHeaders(v map[string]*string) *GrantAccountPrivilegeResponse {
	s.Headers = v
	return s
}

func (s *GrantAccountPrivilegeResponse) SetBody(v *GrantAccountPrivilegeResponseBody) *GrantAccountPrivilegeResponse {
	s.Body = v
	return s
}

type GrantOperatorPermissionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ExpiredTime          *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	Privileges           *string `json:"Privileges,omitempty" xml:"Privileges,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s GrantOperatorPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantOperatorPermissionRequest) GoString() string {
	return s.String()
}

func (s *GrantOperatorPermissionRequest) SetOwnerId(v int64) *GrantOperatorPermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *GrantOperatorPermissionRequest) SetResourceOwnerAccount(v string) *GrantOperatorPermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GrantOperatorPermissionRequest) SetResourceOwnerId(v int64) *GrantOperatorPermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GrantOperatorPermissionRequest) SetDBInstanceId(v string) *GrantOperatorPermissionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GrantOperatorPermissionRequest) SetExpiredTime(v string) *GrantOperatorPermissionRequest {
	s.ExpiredTime = &v
	return s
}

func (s *GrantOperatorPermissionRequest) SetPrivileges(v string) *GrantOperatorPermissionRequest {
	s.Privileges = &v
	return s
}

func (s *GrantOperatorPermissionRequest) SetOwnerAccount(v string) *GrantOperatorPermissionRequest {
	s.OwnerAccount = &v
	return s
}

type GrantOperatorPermissionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GrantOperatorPermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GrantOperatorPermissionResponseBody) GoString() string {
	return s.String()
}

func (s *GrantOperatorPermissionResponseBody) SetRequestId(v string) *GrantOperatorPermissionResponseBody {
	s.RequestId = &v
	return s
}

type GrantOperatorPermissionResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GrantOperatorPermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GrantOperatorPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantOperatorPermissionResponse) GoString() string {
	return s.String()
}

func (s *GrantOperatorPermissionResponse) SetHeaders(v map[string]*string) *GrantOperatorPermissionResponse {
	s.Headers = v
	return s
}

func (s *GrantOperatorPermissionResponse) SetBody(v *GrantOperatorPermissionResponseBody) *GrantOperatorPermissionResponse {
	s.Body = v
	return s
}

type ImportDatabaseBetweenInstancesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	SourceDBInstanceId   *string `json:"SourceDBInstanceId,omitempty" xml:"SourceDBInstanceId,omitempty"`
	DBInfo               *string `json:"DBInfo,omitempty" xml:"DBInfo,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ImportDatabaseBetweenInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportDatabaseBetweenInstancesRequest) GoString() string {
	return s.String()
}

func (s *ImportDatabaseBetweenInstancesRequest) SetOwnerId(v int64) *ImportDatabaseBetweenInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *ImportDatabaseBetweenInstancesRequest) SetResourceOwnerAccount(v string) *ImportDatabaseBetweenInstancesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ImportDatabaseBetweenInstancesRequest) SetResourceOwnerId(v int64) *ImportDatabaseBetweenInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ImportDatabaseBetweenInstancesRequest) SetDBInstanceId(v string) *ImportDatabaseBetweenInstancesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ImportDatabaseBetweenInstancesRequest) SetSourceDBInstanceId(v string) *ImportDatabaseBetweenInstancesRequest {
	s.SourceDBInstanceId = &v
	return s
}

func (s *ImportDatabaseBetweenInstancesRequest) SetDBInfo(v string) *ImportDatabaseBetweenInstancesRequest {
	s.DBInfo = &v
	return s
}

func (s *ImportDatabaseBetweenInstancesRequest) SetOwnerAccount(v string) *ImportDatabaseBetweenInstancesRequest {
	s.OwnerAccount = &v
	return s
}

type ImportDatabaseBetweenInstancesResponseBody struct {
	ImportId  *string `json:"ImportId,omitempty" xml:"ImportId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportDatabaseBetweenInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportDatabaseBetweenInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ImportDatabaseBetweenInstancesResponseBody) SetImportId(v string) *ImportDatabaseBetweenInstancesResponseBody {
	s.ImportId = &v
	return s
}

func (s *ImportDatabaseBetweenInstancesResponseBody) SetRequestId(v string) *ImportDatabaseBetweenInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ImportDatabaseBetweenInstancesResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ImportDatabaseBetweenInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportDatabaseBetweenInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportDatabaseBetweenInstancesResponse) GoString() string {
	return s.String()
}

func (s *ImportDatabaseBetweenInstancesResponse) SetHeaders(v map[string]*string) *ImportDatabaseBetweenInstancesResponse {
	s.Headers = v
	return s
}

func (s *ImportDatabaseBetweenInstancesResponse) SetBody(v *ImportDatabaseBetweenInstancesResponseBody) *ImportDatabaseBetweenInstancesResponse {
	s.Body = v
	return s
}

type ImportUserBackupFileRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	BucketRegion         *string `json:"BucketRegion,omitempty" xml:"BucketRegion,omitempty"`
	BackupFile           *string `json:"BackupFile,omitempty" xml:"BackupFile,omitempty"`
	Comment              *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	RestoreSize          *int32  `json:"RestoreSize,omitempty" xml:"RestoreSize,omitempty"`
	Retention            *int32  `json:"Retention,omitempty" xml:"Retention,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ImportUserBackupFileRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportUserBackupFileRequest) GoString() string {
	return s.String()
}

func (s *ImportUserBackupFileRequest) SetOwnerId(v int64) *ImportUserBackupFileRequest {
	s.OwnerId = &v
	return s
}

func (s *ImportUserBackupFileRequest) SetResourceOwnerAccount(v string) *ImportUserBackupFileRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ImportUserBackupFileRequest) SetResourceOwnerId(v int64) *ImportUserBackupFileRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ImportUserBackupFileRequest) SetRegionId(v string) *ImportUserBackupFileRequest {
	s.RegionId = &v
	return s
}

func (s *ImportUserBackupFileRequest) SetEngineVersion(v string) *ImportUserBackupFileRequest {
	s.EngineVersion = &v
	return s
}

func (s *ImportUserBackupFileRequest) SetBucketRegion(v string) *ImportUserBackupFileRequest {
	s.BucketRegion = &v
	return s
}

func (s *ImportUserBackupFileRequest) SetBackupFile(v string) *ImportUserBackupFileRequest {
	s.BackupFile = &v
	return s
}

func (s *ImportUserBackupFileRequest) SetComment(v string) *ImportUserBackupFileRequest {
	s.Comment = &v
	return s
}

func (s *ImportUserBackupFileRequest) SetRestoreSize(v int32) *ImportUserBackupFileRequest {
	s.RestoreSize = &v
	return s
}

func (s *ImportUserBackupFileRequest) SetRetention(v int32) *ImportUserBackupFileRequest {
	s.Retention = &v
	return s
}

func (s *ImportUserBackupFileRequest) SetZoneId(v string) *ImportUserBackupFileRequest {
	s.ZoneId = &v
	return s
}

type ImportUserBackupFileResponseBody struct {
	Status    *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	BackupId  *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
}

func (s ImportUserBackupFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportUserBackupFileResponseBody) GoString() string {
	return s.String()
}

func (s *ImportUserBackupFileResponseBody) SetStatus(v bool) *ImportUserBackupFileResponseBody {
	s.Status = &v
	return s
}

func (s *ImportUserBackupFileResponseBody) SetRequestId(v string) *ImportUserBackupFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *ImportUserBackupFileResponseBody) SetBackupId(v string) *ImportUserBackupFileResponseBody {
	s.BackupId = &v
	return s
}

type ImportUserBackupFileResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ImportUserBackupFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportUserBackupFileResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportUserBackupFileResponse) GoString() string {
	return s.String()
}

func (s *ImportUserBackupFileResponse) SetHeaders(v map[string]*string) *ImportUserBackupFileResponse {
	s.Headers = v
	return s
}

func (s *ImportUserBackupFileResponse) SetBody(v *ImportUserBackupFileResponseBody) *ImportUserBackupFileResponse {
	s.Body = v
	return s
}

type ListClassesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CommodityCode        *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OrderType            *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListClassesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClassesRequest) GoString() string {
	return s.String()
}

func (s *ListClassesRequest) SetOwnerId(v int64) *ListClassesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListClassesRequest) SetResourceOwnerAccount(v string) *ListClassesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListClassesRequest) SetResourceOwnerId(v int64) *ListClassesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClassesRequest) SetClientToken(v string) *ListClassesRequest {
	s.ClientToken = &v
	return s
}

func (s *ListClassesRequest) SetCommodityCode(v string) *ListClassesRequest {
	s.CommodityCode = &v
	return s
}

func (s *ListClassesRequest) SetDBInstanceId(v string) *ListClassesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ListClassesRequest) SetOrderType(v string) *ListClassesRequest {
	s.OrderType = &v
	return s
}

func (s *ListClassesRequest) SetRegionId(v string) *ListClassesRequest {
	s.RegionId = &v
	return s
}

type ListClassesResponseBody struct {
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RegionId  *string                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Items     []*ListClassesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Repeated"`
}

func (s ListClassesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClassesResponseBody) GoString() string {
	return s.String()
}

func (s *ListClassesResponseBody) SetRequestId(v string) *ListClassesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClassesResponseBody) SetRegionId(v string) *ListClassesResponseBody {
	s.RegionId = &v
	return s
}

func (s *ListClassesResponseBody) SetItems(v []*ListClassesResponseBodyItems) *ListClassesResponseBody {
	s.Items = v
	return s
}

type ListClassesResponseBodyItems struct {
	MaxIOPS        *string `json:"MaxIOPS,omitempty" xml:"MaxIOPS,omitempty"`
	Cpu            *string `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	ReferencePrice *string `json:"ReferencePrice,omitempty" xml:"ReferencePrice,omitempty"`
	MaxConnections *string `json:"MaxConnections,omitempty" xml:"MaxConnections,omitempty"`
	MemoryClass    *string `json:"MemoryClass,omitempty" xml:"MemoryClass,omitempty"`
	ClassCode      *string `json:"ClassCode,omitempty" xml:"ClassCode,omitempty"`
	ClassGroup     *string `json:"ClassGroup,omitempty" xml:"ClassGroup,omitempty"`
	MaxIOMBPS      *string `json:"MaxIOMBPS,omitempty" xml:"MaxIOMBPS,omitempty"`
}

func (s ListClassesResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListClassesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListClassesResponseBodyItems) SetMaxIOPS(v string) *ListClassesResponseBodyItems {
	s.MaxIOPS = &v
	return s
}

func (s *ListClassesResponseBodyItems) SetCpu(v string) *ListClassesResponseBodyItems {
	s.Cpu = &v
	return s
}

func (s *ListClassesResponseBodyItems) SetReferencePrice(v string) *ListClassesResponseBodyItems {
	s.ReferencePrice = &v
	return s
}

func (s *ListClassesResponseBodyItems) SetMaxConnections(v string) *ListClassesResponseBodyItems {
	s.MaxConnections = &v
	return s
}

func (s *ListClassesResponseBodyItems) SetMemoryClass(v string) *ListClassesResponseBodyItems {
	s.MemoryClass = &v
	return s
}

func (s *ListClassesResponseBodyItems) SetClassCode(v string) *ListClassesResponseBodyItems {
	s.ClassCode = &v
	return s
}

func (s *ListClassesResponseBodyItems) SetClassGroup(v string) *ListClassesResponseBodyItems {
	s.ClassGroup = &v
	return s
}

func (s *ListClassesResponseBodyItems) SetMaxIOMBPS(v string) *ListClassesResponseBodyItems {
	s.MaxIOMBPS = &v
	return s
}

type ListClassesResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClassesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClassesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClassesResponse) GoString() string {
	return s.String()
}

func (s *ListClassesResponse) SetHeaders(v map[string]*string) *ListClassesResponse {
	s.Headers = v
	return s
}

func (s *ListClassesResponse) SetBody(v *ListClassesResponseBody) *ListClassesResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	OwnerId              *int64                        `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                       `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                        `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType         *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	NextToken            *string                       `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ResourceId           []*string                     `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag                  []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetOwnerId(v int64) *ListTagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerAccount(v string) *ListTagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerId(v int64) *ListTagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	NextToken    *string                                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ListUserBackupFilesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Comment              *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	OssUrl               *string `json:"OssUrl,omitempty" xml:"OssUrl,omitempty"`
	Tags                 *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ListUserBackupFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserBackupFilesRequest) GoString() string {
	return s.String()
}

func (s *ListUserBackupFilesRequest) SetOwnerId(v int64) *ListUserBackupFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListUserBackupFilesRequest) SetResourceOwnerAccount(v string) *ListUserBackupFilesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListUserBackupFilesRequest) SetResourceOwnerId(v int64) *ListUserBackupFilesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListUserBackupFilesRequest) SetStatus(v string) *ListUserBackupFilesRequest {
	s.Status = &v
	return s
}

func (s *ListUserBackupFilesRequest) SetRegionId(v string) *ListUserBackupFilesRequest {
	s.RegionId = &v
	return s
}

func (s *ListUserBackupFilesRequest) SetComment(v string) *ListUserBackupFilesRequest {
	s.Comment = &v
	return s
}

func (s *ListUserBackupFilesRequest) SetBackupId(v string) *ListUserBackupFilesRequest {
	s.BackupId = &v
	return s
}

func (s *ListUserBackupFilesRequest) SetOssUrl(v string) *ListUserBackupFilesRequest {
	s.OssUrl = &v
	return s
}

func (s *ListUserBackupFilesRequest) SetTags(v string) *ListUserBackupFilesRequest {
	s.Tags = &v
	return s
}

type ListUserBackupFilesResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Records   []*ListUserBackupFilesResponseBodyRecords `json:"Records,omitempty" xml:"Records,omitempty" type:"Repeated"`
}

func (s ListUserBackupFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserBackupFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserBackupFilesResponseBody) SetRequestId(v string) *ListUserBackupFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUserBackupFilesResponseBody) SetRecords(v []*ListUserBackupFilesResponseBodyRecords) *ListUserBackupFilesResponseBody {
	s.Records = v
	return s
}

type ListUserBackupFilesResponseBodyRecords struct {
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	CreationTime     *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Comment          *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	OssFilePath      *string `json:"OssFilePath,omitempty" xml:"OssFilePath,omitempty"`
	OssBucket        *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	ModificationTime *string `json:"ModificationTime,omitempty" xml:"ModificationTime,omitempty"`
	OssFileSize      *int64  `json:"OssFileSize,omitempty" xml:"OssFileSize,omitempty"`
	OssFileName      *string `json:"OssFileName,omitempty" xml:"OssFileName,omitempty"`
	EngineVersion    *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	BackupId         *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreSize      *string `json:"RestoreSize,omitempty" xml:"RestoreSize,omitempty"`
	ZoneId           *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	Retention        *int32  `json:"Retention,omitempty" xml:"Retention,omitempty"`
	Engine           *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	OssUrl           *string `json:"OssUrl,omitempty" xml:"OssUrl,omitempty"`
	OssFileMetaData  *string `json:"OssFileMetaData,omitempty" xml:"OssFileMetaData,omitempty"`
	BinlogInfo       *string `json:"BinlogInfo,omitempty" xml:"BinlogInfo,omitempty"`
	Reason           *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s ListUserBackupFilesResponseBodyRecords) String() string {
	return tea.Prettify(s)
}

func (s ListUserBackupFilesResponseBodyRecords) GoString() string {
	return s.String()
}

func (s *ListUserBackupFilesResponseBodyRecords) SetStatus(v string) *ListUserBackupFilesResponseBodyRecords {
	s.Status = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetCreationTime(v string) *ListUserBackupFilesResponseBodyRecords {
	s.CreationTime = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetComment(v string) *ListUserBackupFilesResponseBodyRecords {
	s.Comment = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetOssFilePath(v string) *ListUserBackupFilesResponseBodyRecords {
	s.OssFilePath = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetOssBucket(v string) *ListUserBackupFilesResponseBodyRecords {
	s.OssBucket = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetModificationTime(v string) *ListUserBackupFilesResponseBodyRecords {
	s.ModificationTime = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetOssFileSize(v int64) *ListUserBackupFilesResponseBodyRecords {
	s.OssFileSize = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetOssFileName(v string) *ListUserBackupFilesResponseBodyRecords {
	s.OssFileName = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetEngineVersion(v string) *ListUserBackupFilesResponseBodyRecords {
	s.EngineVersion = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetBackupId(v string) *ListUserBackupFilesResponseBodyRecords {
	s.BackupId = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetRestoreSize(v string) *ListUserBackupFilesResponseBodyRecords {
	s.RestoreSize = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetZoneId(v string) *ListUserBackupFilesResponseBodyRecords {
	s.ZoneId = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetRetention(v int32) *ListUserBackupFilesResponseBodyRecords {
	s.Retention = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetEngine(v string) *ListUserBackupFilesResponseBodyRecords {
	s.Engine = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetOssUrl(v string) *ListUserBackupFilesResponseBodyRecords {
	s.OssUrl = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetOssFileMetaData(v string) *ListUserBackupFilesResponseBodyRecords {
	s.OssFileMetaData = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetBinlogInfo(v string) *ListUserBackupFilesResponseBodyRecords {
	s.BinlogInfo = &v
	return s
}

func (s *ListUserBackupFilesResponseBodyRecords) SetReason(v string) *ListUserBackupFilesResponseBodyRecords {
	s.Reason = &v
	return s
}

type ListUserBackupFilesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListUserBackupFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListUserBackupFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserBackupFilesResponse) GoString() string {
	return s.String()
}

func (s *ListUserBackupFilesResponse) SetHeaders(v map[string]*string) *ListUserBackupFilesResponse {
	s.Headers = v
	return s
}

func (s *ListUserBackupFilesResponse) SetBody(v *ListUserBackupFilesResponseBody) *ListUserBackupFilesResponse {
	s.Body = v
	return s
}

type LockAccountRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
}

func (s LockAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s LockAccountRequest) GoString() string {
	return s.String()
}

func (s *LockAccountRequest) SetOwnerId(v int64) *LockAccountRequest {
	s.OwnerId = &v
	return s
}

func (s *LockAccountRequest) SetResourceOwnerAccount(v string) *LockAccountRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *LockAccountRequest) SetResourceOwnerId(v int64) *LockAccountRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *LockAccountRequest) SetDBInstanceId(v string) *LockAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *LockAccountRequest) SetAccountName(v string) *LockAccountRequest {
	s.AccountName = &v
	return s
}

type LockAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s LockAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LockAccountResponseBody) GoString() string {
	return s.String()
}

func (s *LockAccountResponseBody) SetRequestId(v string) *LockAccountResponseBody {
	s.RequestId = &v
	return s
}

type LockAccountResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *LockAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s LockAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s LockAccountResponse) GoString() string {
	return s.String()
}

func (s *LockAccountResponse) SetHeaders(v map[string]*string) *LockAccountResponse {
	s.Headers = v
	return s
}

func (s *LockAccountResponse) SetBody(v *LockAccountResponseBody) *LockAccountResponse {
	s.Body = v
	return s
}

type MigrateDBInstanceRequest struct {
	OwnerId                        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount           *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId           *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	DBInstanceId                   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TargetDedicatedHostIdForMaster *string `json:"TargetDedicatedHostIdForMaster,omitempty" xml:"TargetDedicatedHostIdForMaster,omitempty"`
	TargetDedicatedHostIdForSlave  *string `json:"TargetDedicatedHostIdForSlave,omitempty" xml:"TargetDedicatedHostIdForSlave,omitempty"`
	EffectiveTime                  *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	SpecifiedTime                  *string `json:"SpecifiedTime,omitempty" xml:"SpecifiedTime,omitempty"`
	ZoneIdForLog                   *string `json:"ZoneIdForLog,omitempty" xml:"ZoneIdForLog,omitempty"`
	ZoneIdForFollower              *string `json:"ZoneIdForFollower,omitempty" xml:"ZoneIdForFollower,omitempty"`
}

func (s MigrateDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *MigrateDBInstanceRequest) SetOwnerId(v int64) *MigrateDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetResourceOwnerAccount(v string) *MigrateDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetResourceOwnerId(v int64) *MigrateDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetRegionId(v string) *MigrateDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetDedicatedHostGroupId(v string) *MigrateDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetDBInstanceId(v string) *MigrateDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetTargetDedicatedHostIdForMaster(v string) *MigrateDBInstanceRequest {
	s.TargetDedicatedHostIdForMaster = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetTargetDedicatedHostIdForSlave(v string) *MigrateDBInstanceRequest {
	s.TargetDedicatedHostIdForSlave = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetEffectiveTime(v string) *MigrateDBInstanceRequest {
	s.EffectiveTime = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetSpecifiedTime(v string) *MigrateDBInstanceRequest {
	s.SpecifiedTime = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetZoneIdForLog(v string) *MigrateDBInstanceRequest {
	s.ZoneIdForLog = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetZoneIdForFollower(v string) *MigrateDBInstanceRequest {
	s.ZoneIdForFollower = &v
	return s
}

type MigrateDBInstanceResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId      *int32  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	MigrationId *int32  `json:"MigrationId,omitempty" xml:"MigrationId,omitempty"`
}

func (s MigrateDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MigrateDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *MigrateDBInstanceResponseBody) SetRequestId(v string) *MigrateDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *MigrateDBInstanceResponseBody) SetTaskId(v int32) *MigrateDBInstanceResponseBody {
	s.TaskId = &v
	return s
}

func (s *MigrateDBInstanceResponseBody) SetMigrationId(v int32) *MigrateDBInstanceResponseBody {
	s.MigrationId = &v
	return s
}

type MigrateDBInstanceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *MigrateDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s MigrateDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *MigrateDBInstanceResponse) SetHeaders(v map[string]*string) *MigrateDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *MigrateDBInstanceResponse) SetBody(v *MigrateDBInstanceResponseBody) *MigrateDBInstanceResponse {
	s.Body = v
	return s
}

type MigrateSecurityIPModeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s MigrateSecurityIPModeRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateSecurityIPModeRequest) GoString() string {
	return s.String()
}

func (s *MigrateSecurityIPModeRequest) SetOwnerId(v int64) *MigrateSecurityIPModeRequest {
	s.OwnerId = &v
	return s
}

func (s *MigrateSecurityIPModeRequest) SetResourceOwnerAccount(v string) *MigrateSecurityIPModeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *MigrateSecurityIPModeRequest) SetResourceOwnerId(v int64) *MigrateSecurityIPModeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *MigrateSecurityIPModeRequest) SetDBInstanceId(v string) *MigrateSecurityIPModeRequest {
	s.DBInstanceId = &v
	return s
}

type MigrateSecurityIPModeResponseBody struct {
	SecurityIPMode *string `json:"SecurityIPMode,omitempty" xml:"SecurityIPMode,omitempty"`
	DBInstanceId   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MigrateSecurityIPModeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MigrateSecurityIPModeResponseBody) GoString() string {
	return s.String()
}

func (s *MigrateSecurityIPModeResponseBody) SetSecurityIPMode(v string) *MigrateSecurityIPModeResponseBody {
	s.SecurityIPMode = &v
	return s
}

func (s *MigrateSecurityIPModeResponseBody) SetDBInstanceId(v string) *MigrateSecurityIPModeResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *MigrateSecurityIPModeResponseBody) SetRequestId(v string) *MigrateSecurityIPModeResponseBody {
	s.RequestId = &v
	return s
}

type MigrateSecurityIPModeResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *MigrateSecurityIPModeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s MigrateSecurityIPModeResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateSecurityIPModeResponse) GoString() string {
	return s.String()
}

func (s *MigrateSecurityIPModeResponse) SetHeaders(v map[string]*string) *MigrateSecurityIPModeResponse {
	s.Headers = v
	return s
}

func (s *MigrateSecurityIPModeResponse) SetBody(v *MigrateSecurityIPModeResponseBody) *MigrateSecurityIPModeResponse {
	s.Body = v
	return s
}

type MigrateToOtherZoneRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	VPCId                *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	EffectiveTime        *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ZoneIdSlave1         *string `json:"ZoneIdSlave1,omitempty" xml:"ZoneIdSlave1,omitempty"`
	ZoneIdSlave2         *string `json:"ZoneIdSlave2,omitempty" xml:"ZoneIdSlave2,omitempty"`
}

func (s MigrateToOtherZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateToOtherZoneRequest) GoString() string {
	return s.String()
}

func (s *MigrateToOtherZoneRequest) SetOwnerId(v int64) *MigrateToOtherZoneRequest {
	s.OwnerId = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetResourceOwnerAccount(v string) *MigrateToOtherZoneRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetResourceOwnerId(v int64) *MigrateToOtherZoneRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetDBInstanceId(v string) *MigrateToOtherZoneRequest {
	s.DBInstanceId = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetVPCId(v string) *MigrateToOtherZoneRequest {
	s.VPCId = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetZoneId(v string) *MigrateToOtherZoneRequest {
	s.ZoneId = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetOwnerAccount(v string) *MigrateToOtherZoneRequest {
	s.OwnerAccount = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetEffectiveTime(v string) *MigrateToOtherZoneRequest {
	s.EffectiveTime = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetVSwitchId(v string) *MigrateToOtherZoneRequest {
	s.VSwitchId = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetCategory(v string) *MigrateToOtherZoneRequest {
	s.Category = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetZoneIdSlave1(v string) *MigrateToOtherZoneRequest {
	s.ZoneIdSlave1 = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetZoneIdSlave2(v string) *MigrateToOtherZoneRequest {
	s.ZoneIdSlave2 = &v
	return s
}

type MigrateToOtherZoneResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MigrateToOtherZoneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MigrateToOtherZoneResponseBody) GoString() string {
	return s.String()
}

func (s *MigrateToOtherZoneResponseBody) SetRequestId(v string) *MigrateToOtherZoneResponseBody {
	s.RequestId = &v
	return s
}

type MigrateToOtherZoneResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *MigrateToOtherZoneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s MigrateToOtherZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateToOtherZoneResponse) GoString() string {
	return s.String()
}

func (s *MigrateToOtherZoneResponse) SetHeaders(v map[string]*string) *MigrateToOtherZoneResponse {
	s.Headers = v
	return s
}

func (s *MigrateToOtherZoneResponse) SetBody(v *MigrateToOtherZoneResponseBody) *MigrateToOtherZoneResponse {
	s.Body = v
	return s
}

type ModifyAccountDescriptionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountDescription   *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyAccountDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionRequest) SetOwnerId(v int64) *ModifyAccountDescriptionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetResourceOwnerAccount(v string) *ModifyAccountDescriptionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetResourceOwnerId(v int64) *ModifyAccountDescriptionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetDBInstanceId(v string) *ModifyAccountDescriptionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetAccountName(v string) *ModifyAccountDescriptionRequest {
	s.AccountName = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetAccountDescription(v string) *ModifyAccountDescriptionRequest {
	s.AccountDescription = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetOwnerAccount(v string) *ModifyAccountDescriptionRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyAccountDescriptionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAccountDescriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionResponseBody) SetRequestId(v string) *ModifyAccountDescriptionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAccountDescriptionResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyAccountDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAccountDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionResponse) SetHeaders(v map[string]*string) *ModifyAccountDescriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyAccountDescriptionResponse) SetBody(v *ModifyAccountDescriptionResponseBody) *ModifyAccountDescriptionResponse {
	s.Body = v
	return s
}

type ModifyActionEventPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EnableEventLog       *string `json:"EnableEventLog,omitempty" xml:"EnableEventLog,omitempty"`
}

func (s ModifyActionEventPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyActionEventPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyActionEventPolicyRequest) SetOwnerId(v int64) *ModifyActionEventPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyActionEventPolicyRequest) SetResourceOwnerAccount(v string) *ModifyActionEventPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyActionEventPolicyRequest) SetResourceOwnerId(v int64) *ModifyActionEventPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyActionEventPolicyRequest) SetRegionId(v string) *ModifyActionEventPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyActionEventPolicyRequest) SetEnableEventLog(v string) *ModifyActionEventPolicyRequest {
	s.EnableEventLog = &v
	return s
}

type ModifyActionEventPolicyResponseBody struct {
	EnableEventLog *string `json:"EnableEventLog,omitempty" xml:"EnableEventLog,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyActionEventPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyActionEventPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyActionEventPolicyResponseBody) SetEnableEventLog(v string) *ModifyActionEventPolicyResponseBody {
	s.EnableEventLog = &v
	return s
}

func (s *ModifyActionEventPolicyResponseBody) SetRequestId(v string) *ModifyActionEventPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyActionEventPolicyResponseBody) SetRegionId(v string) *ModifyActionEventPolicyResponseBody {
	s.RegionId = &v
	return s
}

type ModifyActionEventPolicyResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyActionEventPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyActionEventPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyActionEventPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyActionEventPolicyResponse) SetHeaders(v map[string]*string) *ModifyActionEventPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyActionEventPolicyResponse) SetBody(v *ModifyActionEventPolicyResponseBody) *ModifyActionEventPolicyResponse {
	s.Body = v
	return s
}

type ModifyBackupPolicyRequest struct {
	OwnerId                       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount          *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId               *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId                  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupPolicyMode              *string `json:"BackupPolicyMode,omitempty" xml:"BackupPolicyMode,omitempty"`
	PreferredBackupTime           *string `json:"PreferredBackupTime,omitempty" xml:"PreferredBackupTime,omitempty"`
	PreferredBackupPeriod         *string `json:"PreferredBackupPeriod,omitempty" xml:"PreferredBackupPeriod,omitempty"`
	BackupRetentionPeriod         *string `json:"BackupRetentionPeriod,omitempty" xml:"BackupRetentionPeriod,omitempty"`
	BackupLog                     *string `json:"BackupLog,omitempty" xml:"BackupLog,omitempty"`
	LogBackupRetentionPeriod      *string `json:"LogBackupRetentionPeriod,omitempty" xml:"LogBackupRetentionPeriod,omitempty"`
	OwnerAccount                  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	EnableBackupLog               *string `json:"EnableBackupLog,omitempty" xml:"EnableBackupLog,omitempty"`
	LocalLogRetentionHours        *string `json:"LocalLogRetentionHours,omitempty" xml:"LocalLogRetentionHours,omitempty"`
	LocalLogRetentionSpace        *string `json:"LocalLogRetentionSpace,omitempty" xml:"LocalLogRetentionSpace,omitempty"`
	HighSpaceUsageProtection      *string `json:"HighSpaceUsageProtection,omitempty" xml:"HighSpaceUsageProtection,omitempty"`
	LogBackupFrequency            *string `json:"LogBackupFrequency,omitempty" xml:"LogBackupFrequency,omitempty"`
	CompressType                  *string `json:"CompressType,omitempty" xml:"CompressType,omitempty"`
	ArchiveBackupRetentionPeriod  *string `json:"ArchiveBackupRetentionPeriod,omitempty" xml:"ArchiveBackupRetentionPeriod,omitempty"`
	ArchiveBackupKeepPolicy       *string `json:"ArchiveBackupKeepPolicy,omitempty" xml:"ArchiveBackupKeepPolicy,omitempty"`
	ArchiveBackupKeepCount        *int32  `json:"ArchiveBackupKeepCount,omitempty" xml:"ArchiveBackupKeepCount,omitempty"`
	ReleasedKeepPolicy            *string `json:"ReleasedKeepPolicy,omitempty" xml:"ReleasedKeepPolicy,omitempty"`
	LogBackupLocalRetentionNumber *int32  `json:"LogBackupLocalRetentionNumber,omitempty" xml:"LogBackupLocalRetentionNumber,omitempty"`
	Category                      *string `json:"Category,omitempty" xml:"Category,omitempty"`
	BackupInterval                *string `json:"BackupInterval,omitempty" xml:"BackupInterval,omitempty"`
	BackupMethod                  *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty"`
}

func (s ModifyBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyRequest) SetOwnerId(v int64) *ModifyBackupPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetResourceOwnerAccount(v string) *ModifyBackupPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetResourceOwnerId(v int64) *ModifyBackupPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetDBInstanceId(v string) *ModifyBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetBackupPolicyMode(v string) *ModifyBackupPolicyRequest {
	s.BackupPolicyMode = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPreferredBackupTime(v string) *ModifyBackupPolicyRequest {
	s.PreferredBackupTime = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPreferredBackupPeriod(v string) *ModifyBackupPolicyRequest {
	s.PreferredBackupPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetBackupRetentionPeriod(v string) *ModifyBackupPolicyRequest {
	s.BackupRetentionPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetBackupLog(v string) *ModifyBackupPolicyRequest {
	s.BackupLog = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetLogBackupRetentionPeriod(v string) *ModifyBackupPolicyRequest {
	s.LogBackupRetentionPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetOwnerAccount(v string) *ModifyBackupPolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetEnableBackupLog(v string) *ModifyBackupPolicyRequest {
	s.EnableBackupLog = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetLocalLogRetentionHours(v string) *ModifyBackupPolicyRequest {
	s.LocalLogRetentionHours = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetLocalLogRetentionSpace(v string) *ModifyBackupPolicyRequest {
	s.LocalLogRetentionSpace = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetHighSpaceUsageProtection(v string) *ModifyBackupPolicyRequest {
	s.HighSpaceUsageProtection = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetLogBackupFrequency(v string) *ModifyBackupPolicyRequest {
	s.LogBackupFrequency = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetCompressType(v string) *ModifyBackupPolicyRequest {
	s.CompressType = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetArchiveBackupRetentionPeriod(v string) *ModifyBackupPolicyRequest {
	s.ArchiveBackupRetentionPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetArchiveBackupKeepPolicy(v string) *ModifyBackupPolicyRequest {
	s.ArchiveBackupKeepPolicy = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetArchiveBackupKeepCount(v int32) *ModifyBackupPolicyRequest {
	s.ArchiveBackupKeepCount = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetReleasedKeepPolicy(v string) *ModifyBackupPolicyRequest {
	s.ReleasedKeepPolicy = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetLogBackupLocalRetentionNumber(v int32) *ModifyBackupPolicyRequest {
	s.LogBackupLocalRetentionNumber = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetCategory(v string) *ModifyBackupPolicyRequest {
	s.Category = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetBackupInterval(v string) *ModifyBackupPolicyRequest {
	s.BackupInterval = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetBackupMethod(v string) *ModifyBackupPolicyRequest {
	s.BackupMethod = &v
	return s
}

type ModifyBackupPolicyResponseBody struct {
	RequestId                     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CompressType                  *string `json:"CompressType,omitempty" xml:"CompressType,omitempty"`
	LocalLogRetentionSpace        *string `json:"LocalLogRetentionSpace,omitempty" xml:"LocalLogRetentionSpace,omitempty"`
	LogBackupLocalRetentionNumber *int32  `json:"LogBackupLocalRetentionNumber,omitempty" xml:"LogBackupLocalRetentionNumber,omitempty"`
	DBInstanceID                  *string `json:"DBInstanceID,omitempty" xml:"DBInstanceID,omitempty"`
	EnableBackupLog               *string `json:"EnableBackupLog,omitempty" xml:"EnableBackupLog,omitempty"`
	LocalLogRetentionHours        *int32  `json:"LocalLogRetentionHours,omitempty" xml:"LocalLogRetentionHours,omitempty"`
	HighSpaceUsageProtection      *string `json:"HighSpaceUsageProtection,omitempty" xml:"HighSpaceUsageProtection,omitempty"`
}

func (s ModifyBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyResponseBody) SetRequestId(v string) *ModifyBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyBackupPolicyResponseBody) SetCompressType(v string) *ModifyBackupPolicyResponseBody {
	s.CompressType = &v
	return s
}

func (s *ModifyBackupPolicyResponseBody) SetLocalLogRetentionSpace(v string) *ModifyBackupPolicyResponseBody {
	s.LocalLogRetentionSpace = &v
	return s
}

func (s *ModifyBackupPolicyResponseBody) SetLogBackupLocalRetentionNumber(v int32) *ModifyBackupPolicyResponseBody {
	s.LogBackupLocalRetentionNumber = &v
	return s
}

func (s *ModifyBackupPolicyResponseBody) SetDBInstanceID(v string) *ModifyBackupPolicyResponseBody {
	s.DBInstanceID = &v
	return s
}

func (s *ModifyBackupPolicyResponseBody) SetEnableBackupLog(v string) *ModifyBackupPolicyResponseBody {
	s.EnableBackupLog = &v
	return s
}

func (s *ModifyBackupPolicyResponseBody) SetLocalLogRetentionHours(v int32) *ModifyBackupPolicyResponseBody {
	s.LocalLogRetentionHours = &v
	return s
}

func (s *ModifyBackupPolicyResponseBody) SetHighSpaceUsageProtection(v string) *ModifyBackupPolicyResponseBody {
	s.HighSpaceUsageProtection = &v
	return s
}

type ModifyBackupPolicyResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyResponse) SetHeaders(v map[string]*string) *ModifyBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyBackupPolicyResponse) SetBody(v *ModifyBackupPolicyResponseBody) *ModifyBackupPolicyResponse {
	s.Body = v
	return s
}

type ModifyCollationTimeZoneRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Collation            *string `json:"Collation,omitempty" xml:"Collation,omitempty"`
	Timezone             *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
}

func (s ModifyCollationTimeZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCollationTimeZoneRequest) GoString() string {
	return s.String()
}

func (s *ModifyCollationTimeZoneRequest) SetOwnerId(v int64) *ModifyCollationTimeZoneRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyCollationTimeZoneRequest) SetResourceOwnerAccount(v string) *ModifyCollationTimeZoneRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyCollationTimeZoneRequest) SetResourceOwnerId(v int64) *ModifyCollationTimeZoneRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyCollationTimeZoneRequest) SetDBInstanceId(v string) *ModifyCollationTimeZoneRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyCollationTimeZoneRequest) SetCollation(v string) *ModifyCollationTimeZoneRequest {
	s.Collation = &v
	return s
}

func (s *ModifyCollationTimeZoneRequest) SetTimezone(v string) *ModifyCollationTimeZoneRequest {
	s.Timezone = &v
	return s
}

type ModifyCollationTimeZoneResponseBody struct {
	Collation    *string `json:"Collation,omitempty" xml:"Collation,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Timezone     *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ModifyCollationTimeZoneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCollationTimeZoneResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCollationTimeZoneResponseBody) SetCollation(v string) *ModifyCollationTimeZoneResponseBody {
	s.Collation = &v
	return s
}

func (s *ModifyCollationTimeZoneResponseBody) SetDBInstanceId(v string) *ModifyCollationTimeZoneResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyCollationTimeZoneResponseBody) SetRequestId(v string) *ModifyCollationTimeZoneResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCollationTimeZoneResponseBody) SetTimezone(v string) *ModifyCollationTimeZoneResponseBody {
	s.Timezone = &v
	return s
}

func (s *ModifyCollationTimeZoneResponseBody) SetTaskId(v string) *ModifyCollationTimeZoneResponseBody {
	s.TaskId = &v
	return s
}

type ModifyCollationTimeZoneResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyCollationTimeZoneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyCollationTimeZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCollationTimeZoneResponse) GoString() string {
	return s.String()
}

func (s *ModifyCollationTimeZoneResponse) SetHeaders(v map[string]*string) *ModifyCollationTimeZoneResponse {
	s.Headers = v
	return s
}

func (s *ModifyCollationTimeZoneResponse) SetBody(v *ModifyCollationTimeZoneResponseBody) *ModifyCollationTimeZoneResponse {
	s.Body = v
	return s
}

type ModifyDasInstanceConfigRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	StorageAutoScale     *string `json:"StorageAutoScale,omitempty" xml:"StorageAutoScale,omitempty"`
	StorageThreshold     *int32  `json:"StorageThreshold,omitempty" xml:"StorageThreshold,omitempty"`
	StorageUpperBound    *int32  `json:"StorageUpperBound,omitempty" xml:"StorageUpperBound,omitempty"`
}

func (s ModifyDasInstanceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDasInstanceConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyDasInstanceConfigRequest) SetOwnerId(v int64) *ModifyDasInstanceConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetResourceOwnerAccount(v string) *ModifyDasInstanceConfigRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetResourceOwnerId(v int64) *ModifyDasInstanceConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetClientToken(v string) *ModifyDasInstanceConfigRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetDBInstanceId(v string) *ModifyDasInstanceConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetStorageAutoScale(v string) *ModifyDasInstanceConfigRequest {
	s.StorageAutoScale = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetStorageThreshold(v int32) *ModifyDasInstanceConfigRequest {
	s.StorageThreshold = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetStorageUpperBound(v int32) *ModifyDasInstanceConfigRequest {
	s.StorageUpperBound = &v
	return s
}

type ModifyDasInstanceConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDasInstanceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDasInstanceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDasInstanceConfigResponseBody) SetRequestId(v string) *ModifyDasInstanceConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDasInstanceConfigResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDasInstanceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDasInstanceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDasInstanceConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyDasInstanceConfigResponse) SetHeaders(v map[string]*string) *ModifyDasInstanceConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyDasInstanceConfigResponse) SetBody(v *ModifyDasInstanceConfigResponseBody) *ModifyDasInstanceConfigResponse {
	s.Body = v
	return s
}

type ModifyDBDescriptionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	DBDescription        *string `json:"DBDescription,omitempty" xml:"DBDescription,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDBDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBDescriptionRequest) SetOwnerId(v int64) *ModifyDBDescriptionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBDescriptionRequest) SetResourceOwnerAccount(v string) *ModifyDBDescriptionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBDescriptionRequest) SetResourceOwnerId(v int64) *ModifyDBDescriptionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBDescriptionRequest) SetDBInstanceId(v string) *ModifyDBDescriptionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBDescriptionRequest) SetDBName(v string) *ModifyDBDescriptionRequest {
	s.DBName = &v
	return s
}

func (s *ModifyDBDescriptionRequest) SetDBDescription(v string) *ModifyDBDescriptionRequest {
	s.DBDescription = &v
	return s
}

func (s *ModifyDBDescriptionRequest) SetOwnerAccount(v string) *ModifyDBDescriptionRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDBDescriptionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBDescriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBDescriptionResponseBody) SetRequestId(v string) *ModifyDBDescriptionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBDescriptionResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBDescriptionResponse) SetHeaders(v map[string]*string) *ModifyDBDescriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBDescriptionResponse) SetBody(v *ModifyDBDescriptionResponseBody) *ModifyDBDescriptionResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceAutoUpgradeMinorVersionRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken             *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId            *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AutoUpgradeMinorVersion *string `json:"AutoUpgradeMinorVersion,omitempty" xml:"AutoUpgradeMinorVersion,omitempty"`
}

func (s ModifyDBInstanceAutoUpgradeMinorVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceAutoUpgradeMinorVersionRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionRequest) SetOwnerId(v int64) *ModifyDBInstanceAutoUpgradeMinorVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceAutoUpgradeMinorVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceAutoUpgradeMinorVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionRequest) SetClientToken(v string) *ModifyDBInstanceAutoUpgradeMinorVersionRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionRequest) SetDBInstanceId(v string) *ModifyDBInstanceAutoUpgradeMinorVersionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionRequest) SetAutoUpgradeMinorVersion(v string) *ModifyDBInstanceAutoUpgradeMinorVersionRequest {
	s.AutoUpgradeMinorVersion = &v
	return s
}

type ModifyDBInstanceAutoUpgradeMinorVersionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceAutoUpgradeMinorVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceAutoUpgradeMinorVersionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionResponseBody) SetRequestId(v string) *ModifyDBInstanceAutoUpgradeMinorVersionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceAutoUpgradeMinorVersionResponse struct {
	Headers map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceAutoUpgradeMinorVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceAutoUpgradeMinorVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceAutoUpgradeMinorVersionResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceAutoUpgradeMinorVersionResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionResponse) SetBody(v *ModifyDBInstanceAutoUpgradeMinorVersionResponseBody) *ModifyDBInstanceAutoUpgradeMinorVersionResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceConnectionModeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ConnectionMode       *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDBInstanceConnectionModeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionModeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionModeRequest) SetOwnerId(v int64) *ModifyDBInstanceConnectionModeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceConnectionModeRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceConnectionModeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceConnectionModeRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceConnectionModeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceConnectionModeRequest) SetDBInstanceId(v string) *ModifyDBInstanceConnectionModeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceConnectionModeRequest) SetConnectionMode(v string) *ModifyDBInstanceConnectionModeRequest {
	s.ConnectionMode = &v
	return s
}

func (s *ModifyDBInstanceConnectionModeRequest) SetOwnerAccount(v string) *ModifyDBInstanceConnectionModeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDBInstanceConnectionModeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceConnectionModeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionModeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionModeResponseBody) SetRequestId(v string) *ModifyDBInstanceConnectionModeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceConnectionModeResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceConnectionModeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceConnectionModeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionModeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionModeResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceConnectionModeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceConnectionModeResponse) SetBody(v *ModifyDBInstanceConnectionModeResponseBody) *ModifyDBInstanceConnectionModeResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceConnectionStringRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId            *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	CurrentConnectionString *string `json:"CurrentConnectionString,omitempty" xml:"CurrentConnectionString,omitempty"`
	ConnectionStringPrefix  *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	Port                    *string `json:"Port,omitempty" xml:"Port,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDBInstanceConnectionStringRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringRequest) SetOwnerId(v int64) *ModifyDBInstanceConnectionStringRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceConnectionStringRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceConnectionStringRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetDBInstanceId(v string) *ModifyDBInstanceConnectionStringRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetCurrentConnectionString(v string) *ModifyDBInstanceConnectionStringRequest {
	s.CurrentConnectionString = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetConnectionStringPrefix(v string) *ModifyDBInstanceConnectionStringRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetPort(v string) *ModifyDBInstanceConnectionStringRequest {
	s.Port = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetOwnerAccount(v string) *ModifyDBInstanceConnectionStringRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDBInstanceConnectionStringResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceConnectionStringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringResponseBody) SetRequestId(v string) *ModifyDBInstanceConnectionStringResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceConnectionStringResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceConnectionStringResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceConnectionStringResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceConnectionStringResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceConnectionStringResponse) SetBody(v *ModifyDBInstanceConnectionStringResponseBody) *ModifyDBInstanceConnectionStringResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceDescriptionRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDBInstanceDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionRequest) SetOwnerId(v int64) *ModifyDBInstanceDescriptionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceDescriptionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceDescriptionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) SetDBInstanceId(v string) *ModifyDBInstanceDescriptionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) SetDBInstanceDescription(v string) *ModifyDBInstanceDescriptionRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) SetOwnerAccount(v string) *ModifyDBInstanceDescriptionRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDBInstanceDescriptionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceDescriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDescriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionResponseBody) SetRequestId(v string) *ModifyDBInstanceDescriptionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceDescriptionResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceDescriptionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceDescriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceDescriptionResponse) SetBody(v *ModifyDBInstanceDescriptionResponseBody) *ModifyDBInstanceDescriptionResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceHAConfigRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SyncMode             *string `json:"SyncMode,omitempty" xml:"SyncMode,omitempty"`
	HAMode               *string `json:"HAMode,omitempty" xml:"HAMode,omitempty"`
	DbInstanceId         *string `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDBInstanceHAConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceHAConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceHAConfigRequest) SetOwnerId(v int64) *ModifyDBInstanceHAConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceHAConfigRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceHAConfigRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceHAConfigRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceHAConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceHAConfigRequest) SetSyncMode(v string) *ModifyDBInstanceHAConfigRequest {
	s.SyncMode = &v
	return s
}

func (s *ModifyDBInstanceHAConfigRequest) SetHAMode(v string) *ModifyDBInstanceHAConfigRequest {
	s.HAMode = &v
	return s
}

func (s *ModifyDBInstanceHAConfigRequest) SetDbInstanceId(v string) *ModifyDBInstanceHAConfigRequest {
	s.DbInstanceId = &v
	return s
}

func (s *ModifyDBInstanceHAConfigRequest) SetOwnerAccount(v string) *ModifyDBInstanceHAConfigRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDBInstanceHAConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceHAConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceHAConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceHAConfigResponseBody) SetRequestId(v string) *ModifyDBInstanceHAConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceHAConfigResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceHAConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceHAConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceHAConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceHAConfigResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceHAConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceHAConfigResponse) SetBody(v *ModifyDBInstanceHAConfigResponseBody) *ModifyDBInstanceHAConfigResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceMaintainTimeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	MaintainTime         *string `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDBInstanceMaintainTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetOwnerId(v int64) *ModifyDBInstanceMaintainTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceMaintainTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetClientToken(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetDBInstanceId(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetMaintainTime(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.MaintainTime = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetOwnerAccount(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDBInstanceMaintainTimeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceMaintainTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeResponseBody) SetRequestId(v string) *ModifyDBInstanceMaintainTimeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceMaintainTimeResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceMaintainTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceMaintainTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceMaintainTimeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceMaintainTimeResponse) SetBody(v *ModifyDBInstanceMaintainTimeResponseBody) *ModifyDBInstanceMaintainTimeResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceMonitorRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Period               *string `json:"Period,omitempty" xml:"Period,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDBInstanceMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMonitorRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMonitorRequest) SetOwnerId(v int64) *ModifyDBInstanceMonitorRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceMonitorRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceMonitorRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceMonitorRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceMonitorRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceMonitorRequest) SetClientToken(v string) *ModifyDBInstanceMonitorRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDBInstanceMonitorRequest) SetDBInstanceId(v string) *ModifyDBInstanceMonitorRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceMonitorRequest) SetPeriod(v string) *ModifyDBInstanceMonitorRequest {
	s.Period = &v
	return s
}

func (s *ModifyDBInstanceMonitorRequest) SetOwnerAccount(v string) *ModifyDBInstanceMonitorRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDBInstanceMonitorResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMonitorResponseBody) SetRequestId(v string) *ModifyDBInstanceMonitorResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceMonitorResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMonitorResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMonitorResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceMonitorResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceMonitorResponse) SetBody(v *ModifyDBInstanceMonitorResponseBody) *ModifyDBInstanceMonitorResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceNetworkExpireTimeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ConnectionString     *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	ClassicExpiredDays   *int32  `json:"ClassicExpiredDays,omitempty" xml:"ClassicExpiredDays,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDBInstanceNetworkExpireTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkExpireTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkExpireTimeRequest) SetOwnerId(v int64) *ModifyDBInstanceNetworkExpireTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceNetworkExpireTimeRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceNetworkExpireTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceNetworkExpireTimeRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceNetworkExpireTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceNetworkExpireTimeRequest) SetDBInstanceId(v string) *ModifyDBInstanceNetworkExpireTimeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceNetworkExpireTimeRequest) SetConnectionString(v string) *ModifyDBInstanceNetworkExpireTimeRequest {
	s.ConnectionString = &v
	return s
}

func (s *ModifyDBInstanceNetworkExpireTimeRequest) SetClassicExpiredDays(v int32) *ModifyDBInstanceNetworkExpireTimeRequest {
	s.ClassicExpiredDays = &v
	return s
}

func (s *ModifyDBInstanceNetworkExpireTimeRequest) SetOwnerAccount(v string) *ModifyDBInstanceNetworkExpireTimeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDBInstanceNetworkExpireTimeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceNetworkExpireTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkExpireTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkExpireTimeResponseBody) SetRequestId(v string) *ModifyDBInstanceNetworkExpireTimeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceNetworkExpireTimeResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceNetworkExpireTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceNetworkExpireTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkExpireTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkExpireTimeResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceNetworkExpireTimeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceNetworkExpireTimeResponse) SetBody(v *ModifyDBInstanceNetworkExpireTimeResponseBody) *ModifyDBInstanceNetworkExpireTimeResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceNetworkTypeRequest struct {
	OwnerId                              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount                 *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId                         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RetainClassic                        *string `json:"RetainClassic,omitempty" xml:"RetainClassic,omitempty"`
	ClassicExpiredDays                   *string `json:"ClassicExpiredDays,omitempty" xml:"ClassicExpiredDays,omitempty"`
	InstanceNetworkType                  *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	ReadWriteSplittingClassicExpiredDays *int32  `json:"ReadWriteSplittingClassicExpiredDays,omitempty" xml:"ReadWriteSplittingClassicExpiredDays,omitempty"`
	VPCId                                *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId                            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress                     *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	ReadWriteSplittingPrivateIpAddress   *string `json:"ReadWriteSplittingPrivateIpAddress,omitempty" xml:"ReadWriteSplittingPrivateIpAddress,omitempty"`
	OwnerAccount                         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ModifyDBInstanceNetworkTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetOwnerId(v int64) *ModifyDBInstanceNetworkTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceNetworkTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetDBInstanceId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetRetainClassic(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.RetainClassic = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetClassicExpiredDays(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.ClassicExpiredDays = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetInstanceNetworkType(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetReadWriteSplittingClassicExpiredDays(v int32) *ModifyDBInstanceNetworkTypeRequest {
	s.ReadWriteSplittingClassicExpiredDays = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetVPCId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.VPCId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetVSwitchId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetPrivateIpAddress(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetReadWriteSplittingPrivateIpAddress(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.ReadWriteSplittingPrivateIpAddress = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetOwnerAccount(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.OwnerAccount = &v
	return s
}

type ModifyDBInstanceNetworkTypeResponseBody struct {
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId           *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
}

func (s ModifyDBInstanceNetworkTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeResponseBody) SetRequestId(v string) *ModifyDBInstanceNetworkTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeResponseBody) SetTaskId(v string) *ModifyDBInstanceNetworkTypeResponseBody {
	s.TaskId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeResponseBody) SetConnectionString(v string) *ModifyDBInstanceNetworkTypeResponseBody {
	s.ConnectionString = &v
	return s
}

type ModifyDBInstanceNetworkTypeResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceNetworkTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceNetworkTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceNetworkTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceNetworkTypeResponse) SetBody(v *ModifyDBInstanceNetworkTypeResponseBody) *ModifyDBInstanceNetworkTypeResponse {
	s.Body = v
	return s
}

type ModifyDBInstancePayTypeRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	UsedTime        *int32  `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	PayType         *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	Period          *string `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s ModifyDBInstancePayTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstancePayTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeRequest) SetResourceOwnerId(v int64) *ModifyDBInstancePayTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetDBInstanceId(v string) *ModifyDBInstancePayTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetUsedTime(v int32) *ModifyDBInstancePayTypeRequest {
	s.UsedTime = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetPayType(v string) *ModifyDBInstancePayTypeRequest {
	s.PayType = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetPeriod(v string) *ModifyDBInstancePayTypeRequest {
	s.Period = &v
	return s
}

type ModifyDBInstancePayTypeResponseBody struct {
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyDBInstancePayTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstancePayTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeResponseBody) SetOrderId(v int64) *ModifyDBInstancePayTypeResponseBody {
	s.OrderId = &v
	return s
}

type ModifyDBInstancePayTypeResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstancePayTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstancePayTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstancePayTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeResponse) SetHeaders(v map[string]*string) *ModifyDBInstancePayTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstancePayTypeResponse) SetBody(v *ModifyDBInstancePayTypeResponseBody) *ModifyDBInstancePayTypeResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceProxyConfigurationRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId            *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ProxyConfigurationKey   *string `json:"ProxyConfigurationKey,omitempty" xml:"ProxyConfigurationKey,omitempty"`
	ProxyConfigurationValue *string `json:"ProxyConfigurationValue,omitempty" xml:"ProxyConfigurationValue,omitempty"`
}

func (s ModifyDBInstanceProxyConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceProxyConfigurationRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceProxyConfigurationRequest) SetOwnerId(v int64) *ModifyDBInstanceProxyConfigurationRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceProxyConfigurationRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceProxyConfigurationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceProxyConfigurationRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceProxyConfigurationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceProxyConfigurationRequest) SetDBInstanceId(v string) *ModifyDBInstanceProxyConfigurationRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceProxyConfigurationRequest) SetProxyConfigurationKey(v string) *ModifyDBInstanceProxyConfigurationRequest {
	s.ProxyConfigurationKey = &v
	return s
}

func (s *ModifyDBInstanceProxyConfigurationRequest) SetProxyConfigurationValue(v string) *ModifyDBInstanceProxyConfigurationRequest {
	s.ProxyConfigurationValue = &v
	return s
}

type ModifyDBInstanceProxyConfigurationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceProxyConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceProxyConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceProxyConfigurationResponseBody) SetRequestId(v string) *ModifyDBInstanceProxyConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceProxyConfigurationResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceProxyConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceProxyConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceProxyConfigurationResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceProxyConfigurationResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceProxyConfigurationResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceProxyConfigurationResponse) SetBody(v *ModifyDBInstanceProxyConfigurationResponseBody) *ModifyDBInstanceProxyConfigurationResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceSpecRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage     *int32  `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	EffectiveTime         *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	Direction             *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	SourceBiz             *string `json:"SourceBiz,omitempty" xml:"SourceBiz,omitempty"`
	DedicatedHostGroupId  *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ModifyDBInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSpecRequest) SetOwnerId(v int64) *ModifyDBInstanceSpecRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceSpecRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceSpecRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDBInstanceId(v string) *ModifyDBInstanceSpecRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDBInstanceClass(v string) *ModifyDBInstanceSpecRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDBInstanceStorage(v int32) *ModifyDBInstanceSpecRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetPayType(v string) *ModifyDBInstanceSpecRequest {
	s.PayType = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetOwnerAccount(v string) *ModifyDBInstanceSpecRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetEffectiveTime(v string) *ModifyDBInstanceSpecRequest {
	s.EffectiveTime = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetEngineVersion(v string) *ModifyDBInstanceSpecRequest {
	s.EngineVersion = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDBInstanceStorageType(v string) *ModifyDBInstanceSpecRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDirection(v string) *ModifyDBInstanceSpecRequest {
	s.Direction = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetSourceBiz(v string) *ModifyDBInstanceSpecRequest {
	s.SourceBiz = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDedicatedHostGroupId(v string) *ModifyDBInstanceSpecRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetZoneId(v string) *ModifyDBInstanceSpecRequest {
	s.ZoneId = &v
	return s
}

type ModifyDBInstanceSpecResponseBody struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId      *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s ModifyDBInstanceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSpecResponseBody) SetDBInstanceId(v string) *ModifyDBInstanceSpecResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceSpecResponseBody) SetRequestId(v string) *ModifyDBInstanceSpecResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceSpecResponseBody) SetOrderId(v int64) *ModifyDBInstanceSpecResponseBody {
	s.OrderId = &v
	return s
}

type ModifyDBInstanceSpecResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSpecResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceSpecResponse) SetBody(v *ModifyDBInstanceSpecResponseBody) *ModifyDBInstanceSpecResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceSSLRequest struct {
	OwnerId                  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount     *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId             *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ConnectionString         *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty"`
	OwnerAccount             *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	SSLEnabled               *int32  `json:"SSLEnabled,omitempty" xml:"SSLEnabled,omitempty"`
	CAType                   *string `json:"CAType,omitempty" xml:"CAType,omitempty"`
	ServerCert               *string `json:"ServerCert,omitempty" xml:"ServerCert,omitempty"`
	ServerKey                *string `json:"ServerKey,omitempty" xml:"ServerKey,omitempty"`
	ClientCAEnabled          *int32  `json:"ClientCAEnabled,omitempty" xml:"ClientCAEnabled,omitempty"`
	ClientCACert             *string `json:"ClientCACert,omitempty" xml:"ClientCACert,omitempty"`
	ClientCrlEnabled         *int32  `json:"ClientCrlEnabled,omitempty" xml:"ClientCrlEnabled,omitempty"`
	ClientCertRevocationList *string `json:"ClientCertRevocationList,omitempty" xml:"ClientCertRevocationList,omitempty"`
	ACL                      *string `json:"ACL,omitempty" xml:"ACL,omitempty"`
	ReplicationACL           *string `json:"ReplicationACL,omitempty" xml:"ReplicationACL,omitempty"`
}

func (s ModifyDBInstanceSSLRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSSLRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLRequest) SetOwnerId(v int64) *ModifyDBInstanceSSLRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceSSLRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetResourceOwnerId(v int64) *ModifyDBInstanceSSLRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetDBInstanceId(v string) *ModifyDBInstanceSSLRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetConnectionString(v string) *ModifyDBInstanceSSLRequest {
	s.ConnectionString = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetOwnerAccount(v string) *ModifyDBInstanceSSLRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetSSLEnabled(v int32) *ModifyDBInstanceSSLRequest {
	s.SSLEnabled = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetCAType(v string) *ModifyDBInstanceSSLRequest {
	s.CAType = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetServerCert(v string) *ModifyDBInstanceSSLRequest {
	s.ServerCert = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetServerKey(v string) *ModifyDBInstanceSSLRequest {
	s.ServerKey = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetClientCAEnabled(v int32) *ModifyDBInstanceSSLRequest {
	s.ClientCAEnabled = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetClientCACert(v string) *ModifyDBInstanceSSLRequest {
	s.ClientCACert = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetClientCrlEnabled(v int32) *ModifyDBInstanceSSLRequest {
	s.ClientCrlEnabled = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetClientCertRevocationList(v string) *ModifyDBInstanceSSLRequest {
	s.ClientCertRevocationList = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetACL(v string) *ModifyDBInstanceSSLRequest {
	s.ACL = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetReplicationACL(v string) *ModifyDBInstanceSSLRequest {
	s.ReplicationACL = &v
	return s
}

type ModifyDBInstanceSSLResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceSSLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSSLResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLResponseBody) SetRequestId(v string) *ModifyDBInstanceSSLResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceSSLResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceSSLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceSSLResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSSLResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceSSLResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceSSLResponse) SetBody(v *ModifyDBInstanceSSLResponseBody) *ModifyDBInstanceSSLResponse {
	s.Body = v
	return s
}

type ModifyDBInstanceTDERequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TDEStatus            *string `json:"TDEStatus,omitempty" xml:"TDEStatus,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	EncryptionKey        *string `json:"EncryptionKey,omitempty" xml:"EncryptionKey,omitempty"`
	RoleArn              *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s ModifyDBInstanceTDERequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceTDERequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceTDERequest) SetOwnerId(v int64) *ModifyDBInstanceTDERequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetResourceOwnerAccount(v string) *ModifyDBInstanceTDERequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetResourceOwnerId(v int64) *ModifyDBInstanceTDERequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetDBInstanceId(v string) *ModifyDBInstanceTDERequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetTDEStatus(v string) *ModifyDBInstanceTDERequest {
	s.TDEStatus = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetDBName(v string) *ModifyDBInstanceTDERequest {
	s.DBName = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetOwnerAccount(v string) *ModifyDBInstanceTDERequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetEncryptionKey(v string) *ModifyDBInstanceTDERequest {
	s.EncryptionKey = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetRoleArn(v string) *ModifyDBInstanceTDERequest {
	s.RoleArn = &v
	return s
}

type ModifyDBInstanceTDEResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBInstanceTDEResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceTDEResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceTDEResponseBody) SetRequestId(v string) *ModifyDBInstanceTDEResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceTDEResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBInstanceTDEResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBInstanceTDEResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceTDEResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceTDEResponse) SetHeaders(v map[string]*string) *ModifyDBInstanceTDEResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBInstanceTDEResponse) SetBody(v *ModifyDBInstanceTDEResponseBody) *ModifyDBInstanceTDEResponse {
	s.Body = v
	return s
}

type ModifyDBProxyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ConfigDBProxyService *string `json:"ConfigDBProxyService,omitempty" xml:"ConfigDBProxyService,omitempty"`
	DBProxyInstanceNum   *string `json:"DBProxyInstanceNum,omitempty" xml:"DBProxyInstanceNum,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceNetworkType  *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	VPCId                *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s ModifyDBProxyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyRequest) SetOwnerId(v int64) *ModifyDBProxyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBProxyRequest) SetResourceOwnerAccount(v string) *ModifyDBProxyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBProxyRequest) SetResourceOwnerId(v int64) *ModifyDBProxyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBProxyRequest) SetDBInstanceId(v string) *ModifyDBProxyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBProxyRequest) SetConfigDBProxyService(v string) *ModifyDBProxyRequest {
	s.ConfigDBProxyService = &v
	return s
}

func (s *ModifyDBProxyRequest) SetDBProxyInstanceNum(v string) *ModifyDBProxyRequest {
	s.DBProxyInstanceNum = &v
	return s
}

func (s *ModifyDBProxyRequest) SetRegionId(v string) *ModifyDBProxyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDBProxyRequest) SetInstanceNetworkType(v string) *ModifyDBProxyRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *ModifyDBProxyRequest) SetVPCId(v string) *ModifyDBProxyRequest {
	s.VPCId = &v
	return s
}

func (s *ModifyDBProxyRequest) SetVSwitchId(v string) *ModifyDBProxyRequest {
	s.VSwitchId = &v
	return s
}

type ModifyDBProxyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBProxyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyResponseBody) SetRequestId(v string) *ModifyDBProxyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBProxyResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBProxyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBProxyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyResponse) SetHeaders(v map[string]*string) *ModifyDBProxyResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBProxyResponse) SetBody(v *ModifyDBProxyResponseBody) *ModifyDBProxyResponse {
	s.Body = v
	return s
}

type ModifyDBProxyEndpointRequest struct {
	OwnerId                          *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount             *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                  *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId                     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBProxyEndpointId                *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty"`
	ConfigDBProxyFeatures            *string `json:"ConfigDBProxyFeatures,omitempty" xml:"ConfigDBProxyFeatures,omitempty"`
	RegionId                         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReadOnlyInstanceMaxDelayTime     *string `json:"ReadOnlyInstanceMaxDelayTime,omitempty" xml:"ReadOnlyInstanceMaxDelayTime,omitempty"`
	ReadOnlyInstanceDistributionType *string `json:"ReadOnlyInstanceDistributionType,omitempty" xml:"ReadOnlyInstanceDistributionType,omitempty"`
	ReadOnlyInstanceWeight           *string `json:"ReadOnlyInstanceWeight,omitempty" xml:"ReadOnlyInstanceWeight,omitempty"`
	DbEndpointOperator               *string `json:"DbEndpointOperator,omitempty" xml:"DbEndpointOperator,omitempty"`
	DbEndpointAliases                *string `json:"DbEndpointAliases,omitempty" xml:"DbEndpointAliases,omitempty"`
	DbEndpointType                   *string `json:"DbEndpointType,omitempty" xml:"DbEndpointType,omitempty"`
	DbEndpointReadWriteMode          *string `json:"DbEndpointReadWriteMode,omitempty" xml:"DbEndpointReadWriteMode,omitempty"`
}

func (s ModifyDBProxyEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyEndpointRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyEndpointRequest) SetOwnerId(v int64) *ModifyDBProxyEndpointRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetResourceOwnerAccount(v string) *ModifyDBProxyEndpointRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetResourceOwnerId(v int64) *ModifyDBProxyEndpointRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetDBInstanceId(v string) *ModifyDBProxyEndpointRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetDBProxyEndpointId(v string) *ModifyDBProxyEndpointRequest {
	s.DBProxyEndpointId = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetConfigDBProxyFeatures(v string) *ModifyDBProxyEndpointRequest {
	s.ConfigDBProxyFeatures = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetRegionId(v string) *ModifyDBProxyEndpointRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetReadOnlyInstanceMaxDelayTime(v string) *ModifyDBProxyEndpointRequest {
	s.ReadOnlyInstanceMaxDelayTime = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetReadOnlyInstanceDistributionType(v string) *ModifyDBProxyEndpointRequest {
	s.ReadOnlyInstanceDistributionType = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetReadOnlyInstanceWeight(v string) *ModifyDBProxyEndpointRequest {
	s.ReadOnlyInstanceWeight = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetDbEndpointOperator(v string) *ModifyDBProxyEndpointRequest {
	s.DbEndpointOperator = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetDbEndpointAliases(v string) *ModifyDBProxyEndpointRequest {
	s.DbEndpointAliases = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetDbEndpointType(v string) *ModifyDBProxyEndpointRequest {
	s.DbEndpointType = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetDbEndpointReadWriteMode(v string) *ModifyDBProxyEndpointRequest {
	s.DbEndpointReadWriteMode = &v
	return s
}

type ModifyDBProxyEndpointResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBProxyEndpointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyEndpointResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyEndpointResponseBody) SetRequestId(v string) *ModifyDBProxyEndpointResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBProxyEndpointResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBProxyEndpointResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBProxyEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyEndpointResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyEndpointResponse) SetHeaders(v map[string]*string) *ModifyDBProxyEndpointResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBProxyEndpointResponse) SetBody(v *ModifyDBProxyEndpointResponseBody) *ModifyDBProxyEndpointResponse {
	s.Body = v
	return s
}

type ModifyDBProxyEndpointAddressRequest struct {
	OwnerId                     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount        *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId             *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId                *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBProxyEndpointId           *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty"`
	DBProxyNewConnectString     *string `json:"DBProxyNewConnectString,omitempty" xml:"DBProxyNewConnectString,omitempty"`
	DBProxyNewConnectStringPort *string `json:"DBProxyNewConnectStringPort,omitempty" xml:"DBProxyNewConnectStringPort,omitempty"`
	DBProxyConnectStringNetType *string `json:"DBProxyConnectStringNetType,omitempty" xml:"DBProxyConnectStringNetType,omitempty"`
}

func (s ModifyDBProxyEndpointAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyEndpointAddressRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyEndpointAddressRequest) SetOwnerId(v int64) *ModifyDBProxyEndpointAddressRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetResourceOwnerAccount(v string) *ModifyDBProxyEndpointAddressRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetResourceOwnerId(v int64) *ModifyDBProxyEndpointAddressRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetDBInstanceId(v string) *ModifyDBProxyEndpointAddressRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetDBProxyEndpointId(v string) *ModifyDBProxyEndpointAddressRequest {
	s.DBProxyEndpointId = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetDBProxyNewConnectString(v string) *ModifyDBProxyEndpointAddressRequest {
	s.DBProxyNewConnectString = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetDBProxyNewConnectStringPort(v string) *ModifyDBProxyEndpointAddressRequest {
	s.DBProxyNewConnectStringPort = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetDBProxyConnectStringNetType(v string) *ModifyDBProxyEndpointAddressRequest {
	s.DBProxyConnectStringNetType = &v
	return s
}

type ModifyDBProxyEndpointAddressResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBProxyEndpointAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyEndpointAddressResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyEndpointAddressResponseBody) SetRequestId(v string) *ModifyDBProxyEndpointAddressResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBProxyEndpointAddressResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBProxyEndpointAddressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBProxyEndpointAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyEndpointAddressResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyEndpointAddressResponse) SetHeaders(v map[string]*string) *ModifyDBProxyEndpointAddressResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBProxyEndpointAddressResponse) SetBody(v *ModifyDBProxyEndpointAddressResponseBody) *ModifyDBProxyEndpointAddressResponse {
	s.Body = v
	return s
}

type ModifyDBProxyInstanceRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBProxyInstanceType   *string `json:"DBProxyInstanceType,omitempty" xml:"DBProxyInstanceType,omitempty"`
	DBProxyInstanceNum    *string `json:"DBProxyInstanceNum,omitempty" xml:"DBProxyInstanceNum,omitempty"`
	EffectiveTime         *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	EffectiveSpecificTime *string `json:"EffectiveSpecificTime,omitempty" xml:"EffectiveSpecificTime,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDBProxyInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyInstanceRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyInstanceRequest) SetOwnerId(v int64) *ModifyDBProxyInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetResourceOwnerAccount(v string) *ModifyDBProxyInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetResourceOwnerId(v int64) *ModifyDBProxyInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetDBInstanceId(v string) *ModifyDBProxyInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetDBProxyInstanceType(v string) *ModifyDBProxyInstanceRequest {
	s.DBProxyInstanceType = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetDBProxyInstanceNum(v string) *ModifyDBProxyInstanceRequest {
	s.DBProxyInstanceNum = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetEffectiveTime(v string) *ModifyDBProxyInstanceRequest {
	s.EffectiveTime = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetEffectiveSpecificTime(v string) *ModifyDBProxyInstanceRequest {
	s.EffectiveSpecificTime = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetRegionId(v string) *ModifyDBProxyInstanceRequest {
	s.RegionId = &v
	return s
}

type ModifyDBProxyInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDBProxyInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyInstanceResponseBody) SetRequestId(v string) *ModifyDBProxyInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDBProxyInstanceResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDBProxyInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDBProxyInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyInstanceResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyInstanceResponse) SetHeaders(v map[string]*string) *ModifyDBProxyInstanceResponse {
	s.Headers = v
	return s
}

func (s *ModifyDBProxyInstanceResponse) SetBody(v *ModifyDBProxyInstanceResponseBody) *ModifyDBProxyInstanceResponse {
	s.Body = v
	return s
}

type ModifyDbProxyInstanceSslRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DbInstanceId         *string `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty"`
	DbProxyEndpointId    *string `json:"DbProxyEndpointId,omitempty" xml:"DbProxyEndpointId,omitempty"`
	DbProxyConnectString *string `json:"DbProxyConnectString,omitempty" xml:"DbProxyConnectString,omitempty"`
	DbProxySslEnabled    *string `json:"DbProxySslEnabled,omitempty" xml:"DbProxySslEnabled,omitempty"`
}

func (s ModifyDbProxyInstanceSslRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDbProxyInstanceSslRequest) GoString() string {
	return s.String()
}

func (s *ModifyDbProxyInstanceSslRequest) SetRegionId(v string) *ModifyDbProxyInstanceSslRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDbProxyInstanceSslRequest) SetDbInstanceId(v string) *ModifyDbProxyInstanceSslRequest {
	s.DbInstanceId = &v
	return s
}

func (s *ModifyDbProxyInstanceSslRequest) SetDbProxyEndpointId(v string) *ModifyDbProxyInstanceSslRequest {
	s.DbProxyEndpointId = &v
	return s
}

func (s *ModifyDbProxyInstanceSslRequest) SetDbProxyConnectString(v string) *ModifyDbProxyInstanceSslRequest {
	s.DbProxyConnectString = &v
	return s
}

func (s *ModifyDbProxyInstanceSslRequest) SetDbProxySslEnabled(v string) *ModifyDbProxyInstanceSslRequest {
	s.DbProxySslEnabled = &v
	return s
}

type ModifyDbProxyInstanceSslResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDbProxyInstanceSslResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDbProxyInstanceSslResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDbProxyInstanceSslResponseBody) SetRequestId(v string) *ModifyDbProxyInstanceSslResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDbProxyInstanceSslResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDbProxyInstanceSslResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDbProxyInstanceSslResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDbProxyInstanceSslResponse) GoString() string {
	return s.String()
}

func (s *ModifyDbProxyInstanceSslResponse) SetHeaders(v map[string]*string) *ModifyDbProxyInstanceSslResponse {
	s.Headers = v
	return s
}

func (s *ModifyDbProxyInstanceSslResponse) SetBody(v *ModifyDbProxyInstanceSslResponseBody) *ModifyDbProxyInstanceSslResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostAccountRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountPassword      *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDedicatedHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAccountRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAccountRequest) SetOwnerId(v int64) *ModifyDedicatedHostAccountRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAccountRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAccountRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAccountRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAccountRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAccountRequest) SetDedicatedHostId(v string) *ModifyDedicatedHostAccountRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyDedicatedHostAccountRequest) SetAccountName(v string) *ModifyDedicatedHostAccountRequest {
	s.AccountName = &v
	return s
}

func (s *ModifyDedicatedHostAccountRequest) SetAccountPassword(v string) *ModifyDedicatedHostAccountRequest {
	s.AccountPassword = &v
	return s
}

func (s *ModifyDedicatedHostAccountRequest) SetRegionId(v string) *ModifyDedicatedHostAccountRequest {
	s.RegionId = &v
	return s
}

type ModifyDedicatedHostAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAccountResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAccountResponseBody) SetRequestId(v string) *ModifyDedicatedHostAccountResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAccountResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDedicatedHostAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAccountResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAccountResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostAccountResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostAccountResponse) SetBody(v *ModifyDedicatedHostAccountResponseBody) *ModifyDedicatedHostAccountResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	HostName             *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	AllocationStatus     *string `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty"`
}

func (s ModifyDedicatedHostAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeRequest) SetOwnerId(v int64) *ModifyDedicatedHostAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDedicatedHostId(v string) *ModifyDedicatedHostAttributeRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetHostName(v string) *ModifyDedicatedHostAttributeRequest {
	s.HostName = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetAllocationStatus(v string) *ModifyDedicatedHostAttributeRequest {
	s.AllocationStatus = &v
	return s
}

type ModifyDedicatedHostAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeResponseBody) SetRequestId(v string) *ModifyDedicatedHostAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAttributeResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDedicatedHostAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostAttributeResponse) SetBody(v *ModifyDedicatedHostAttributeResponseBody) *ModifyDedicatedHostAttributeResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostGroupAttributeRequest struct {
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId   *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	DedicatedHostGroupDesc *string `json:"DedicatedHostGroupDesc,omitempty" xml:"DedicatedHostGroupDesc,omitempty"`
	CpuAllocationRatio     *int32  `json:"CpuAllocationRatio,omitempty" xml:"CpuAllocationRatio,omitempty"`
	MemAllocationRatio     *int32  `json:"MemAllocationRatio,omitempty" xml:"MemAllocationRatio,omitempty"`
	DiskAllocationRatio    *int32  `json:"DiskAllocationRatio,omitempty" xml:"DiskAllocationRatio,omitempty"`
	AllocationPolicy       *string `json:"AllocationPolicy,omitempty" xml:"AllocationPolicy,omitempty"`
	HostReplacePolicy      *string `json:"HostReplacePolicy,omitempty" xml:"HostReplacePolicy,omitempty"`
}

func (s ModifyDedicatedHostGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetOwnerId(v int64) *ModifyDedicatedHostGroupAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostGroupAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetDedicatedHostGroupId(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetDedicatedHostGroupDesc(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.DedicatedHostGroupDesc = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetCpuAllocationRatio(v int32) *ModifyDedicatedHostGroupAttributeRequest {
	s.CpuAllocationRatio = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetMemAllocationRatio(v int32) *ModifyDedicatedHostGroupAttributeRequest {
	s.MemAllocationRatio = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetDiskAllocationRatio(v int32) *ModifyDedicatedHostGroupAttributeRequest {
	s.DiskAllocationRatio = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetAllocationPolicy(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.AllocationPolicy = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetHostReplacePolicy(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.HostReplacePolicy = &v
	return s
}

type ModifyDedicatedHostGroupAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostGroupAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostGroupAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostGroupAttributeResponseBody) SetRequestId(v string) *ModifyDedicatedHostGroupAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostGroupAttributeResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDedicatedHostGroupAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostGroupAttributeResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostGroupAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeResponse) SetBody(v *ModifyDedicatedHostGroupAttributeResponseBody) *ModifyDedicatedHostGroupAttributeResponse {
	s.Body = v
	return s
}

type ModifyDedicatedHostUserRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DedicatedHostName    *string `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty"`
	UserName             *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	OldPassword          *string `json:"OldPassword,omitempty" xml:"OldPassword,omitempty"`
	NewPassword          *string `json:"NewPassword,omitempty" xml:"NewPassword,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDedicatedHostUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostUserRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostUserRequest) SetOwnerId(v int64) *ModifyDedicatedHostUserRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetResourceOwnerAccount(v string) *ModifyDedicatedHostUserRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetResourceOwnerId(v int64) *ModifyDedicatedHostUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetDedicatedHostName(v string) *ModifyDedicatedHostUserRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetUserName(v string) *ModifyDedicatedHostUserRequest {
	s.UserName = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetOldPassword(v string) *ModifyDedicatedHostUserRequest {
	s.OldPassword = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetNewPassword(v string) *ModifyDedicatedHostUserRequest {
	s.NewPassword = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetRegionId(v string) *ModifyDedicatedHostUserRequest {
	s.RegionId = &v
	return s
}

type ModifyDedicatedHostUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDedicatedHostUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostUserResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostUserResponseBody) SetRequestId(v string) *ModifyDedicatedHostUserResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostUserResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDedicatedHostUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedHostUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostUserResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostUserResponse) SetHeaders(v map[string]*string) *ModifyDedicatedHostUserResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedHostUserResponse) SetBody(v *ModifyDedicatedHostUserResponseBody) *ModifyDedicatedHostUserResponse {
	s.Body = v
	return s
}

type ModifyDTCSecurityIpHostsForSQLServerRequest struct {
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	SecurityIpHosts      *string `json:"SecurityIpHosts,omitempty" xml:"SecurityIpHosts,omitempty"`
	WhiteListGroupName   *string `json:"WhiteListGroupName,omitempty" xml:"WhiteListGroupName,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDTCSecurityIpHostsForSQLServerRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDTCSecurityIpHostsForSQLServerRequest) GoString() string {
	return s.String()
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetSecurityToken(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetOwnerId(v int64) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetResourceOwnerAccount(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetResourceOwnerId(v int64) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetOwnerAccount(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetDBInstanceId(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetSecurityIpHosts(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.SecurityIpHosts = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetWhiteListGroupName(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.WhiteListGroupName = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetRegionId(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.RegionId = &v
	return s
}

type ModifyDTCSecurityIpHostsForSQLServerResponseBody struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	DTCSetResult *string `json:"DTCSetResult,omitempty" xml:"DTCSetResult,omitempty"`
}

func (s ModifyDTCSecurityIpHostsForSQLServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDTCSecurityIpHostsForSQLServerResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDTCSecurityIpHostsForSQLServerResponseBody) SetDBInstanceId(v string) *ModifyDTCSecurityIpHostsForSQLServerResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerResponseBody) SetRequestId(v string) *ModifyDTCSecurityIpHostsForSQLServerResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerResponseBody) SetTaskId(v string) *ModifyDTCSecurityIpHostsForSQLServerResponseBody {
	s.TaskId = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerResponseBody) SetDTCSetResult(v string) *ModifyDTCSecurityIpHostsForSQLServerResponseBody {
	s.DTCSetResult = &v
	return s
}

type ModifyDTCSecurityIpHostsForSQLServerResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyDTCSecurityIpHostsForSQLServerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDTCSecurityIpHostsForSQLServerResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDTCSecurityIpHostsForSQLServerResponse) GoString() string {
	return s.String()
}

func (s *ModifyDTCSecurityIpHostsForSQLServerResponse) SetHeaders(v map[string]*string) *ModifyDTCSecurityIpHostsForSQLServerResponse {
	s.Headers = v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerResponse) SetBody(v *ModifyDTCSecurityIpHostsForSQLServerResponseBody) *ModifyDTCSecurityIpHostsForSQLServerResponse {
	s.Body = v
	return s
}

type ModifyHADiagnoseConfigRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TcpConnectionType    *string `json:"TcpConnectionType,omitempty" xml:"TcpConnectionType,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyHADiagnoseConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHADiagnoseConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyHADiagnoseConfigRequest) SetOwnerId(v int64) *ModifyHADiagnoseConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyHADiagnoseConfigRequest) SetResourceOwnerAccount(v string) *ModifyHADiagnoseConfigRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyHADiagnoseConfigRequest) SetResourceOwnerId(v int64) *ModifyHADiagnoseConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyHADiagnoseConfigRequest) SetDBInstanceId(v string) *ModifyHADiagnoseConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyHADiagnoseConfigRequest) SetTcpConnectionType(v string) *ModifyHADiagnoseConfigRequest {
	s.TcpConnectionType = &v
	return s
}

func (s *ModifyHADiagnoseConfigRequest) SetRegionId(v string) *ModifyHADiagnoseConfigRequest {
	s.RegionId = &v
	return s
}

type ModifyHADiagnoseConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHADiagnoseConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHADiagnoseConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHADiagnoseConfigResponseBody) SetRequestId(v string) *ModifyHADiagnoseConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHADiagnoseConfigResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyHADiagnoseConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyHADiagnoseConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHADiagnoseConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyHADiagnoseConfigResponse) SetHeaders(v map[string]*string) *ModifyHADiagnoseConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyHADiagnoseConfigResponse) SetBody(v *ModifyHADiagnoseConfigResponseBody) *ModifyHADiagnoseConfigResponse {
	s.Body = v
	return s
}

type ModifyHASwitchConfigRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	HAConfig             *string `json:"HAConfig,omitempty" xml:"HAConfig,omitempty"`
	ManualHATime         *string `json:"ManualHATime,omitempty" xml:"ManualHATime,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyHASwitchConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHASwitchConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyHASwitchConfigRequest) SetOwnerId(v int64) *ModifyHASwitchConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyHASwitchConfigRequest) SetResourceOwnerAccount(v string) *ModifyHASwitchConfigRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyHASwitchConfigRequest) SetResourceOwnerId(v int64) *ModifyHASwitchConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyHASwitchConfigRequest) SetDBInstanceId(v string) *ModifyHASwitchConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyHASwitchConfigRequest) SetHAConfig(v string) *ModifyHASwitchConfigRequest {
	s.HAConfig = &v
	return s
}

func (s *ModifyHASwitchConfigRequest) SetManualHATime(v string) *ModifyHASwitchConfigRequest {
	s.ManualHATime = &v
	return s
}

func (s *ModifyHASwitchConfigRequest) SetRegionId(v string) *ModifyHASwitchConfigRequest {
	s.RegionId = &v
	return s
}

type ModifyHASwitchConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHASwitchConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHASwitchConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHASwitchConfigResponseBody) SetRequestId(v string) *ModifyHASwitchConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHASwitchConfigResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyHASwitchConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyHASwitchConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHASwitchConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyHASwitchConfigResponse) SetHeaders(v map[string]*string) *ModifyHASwitchConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyHASwitchConfigResponse) SetBody(v *ModifyHASwitchConfigResponseBody) *ModifyHASwitchConfigResponse {
	s.Body = v
	return s
}

type ModifyInstanceAutoRenewalAttributeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Duration             *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	AutoRenew            *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
}

func (s ModifyInstanceAutoRenewalAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewalAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetOwnerId(v int64) *ModifyInstanceAutoRenewalAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetResourceOwnerAccount(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetResourceOwnerId(v int64) *ModifyInstanceAutoRenewalAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetRegionId(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetClientToken(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetOwnerAccount(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetDBInstanceId(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetDuration(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetAutoRenew(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.AutoRenew = &v
	return s
}

type ModifyInstanceAutoRenewalAttributeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAutoRenewalAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewalAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewalAttributeResponseBody) SetRequestId(v string) *ModifyInstanceAutoRenewalAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAutoRenewalAttributeResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceAutoRenewalAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceAutoRenewalAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewalAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewalAttributeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAutoRenewalAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeResponse) SetBody(v *ModifyInstanceAutoRenewalAttributeResponseBody) *ModifyInstanceAutoRenewalAttributeResponse {
	s.Body = v
	return s
}

type ModifyInstanceCrossBackupPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CrossBackupType      *string `json:"CrossBackupType,omitempty" xml:"CrossBackupType,omitempty"`
	LogBackupEnabled     *string `json:"LogBackupEnabled,omitempty" xml:"LogBackupEnabled,omitempty"`
	BackupEnabled        *string `json:"BackupEnabled,omitempty" xml:"BackupEnabled,omitempty"`
	CrossBackupRegion    *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	RetentType           *int32  `json:"RetentType,omitempty" xml:"RetentType,omitempty"`
	Retention            *int32  `json:"Retention,omitempty" xml:"Retention,omitempty"`
}

func (s ModifyInstanceCrossBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceCrossBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetOwnerId(v int64) *ModifyInstanceCrossBackupPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetResourceOwnerAccount(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetResourceOwnerId(v int64) *ModifyInstanceCrossBackupPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetDBInstanceId(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetRegionId(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetCrossBackupType(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.CrossBackupType = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetLogBackupEnabled(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.LogBackupEnabled = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetBackupEnabled(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.BackupEnabled = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetCrossBackupRegion(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.CrossBackupRegion = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetRetentType(v int32) *ModifyInstanceCrossBackupPolicyRequest {
	s.RetentType = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetRetention(v int32) *ModifyInstanceCrossBackupPolicyRequest {
	s.Retention = &v
	return s
}

type ModifyInstanceCrossBackupPolicyResponseBody struct {
	BackupEnabled     *string `json:"BackupEnabled,omitempty" xml:"BackupEnabled,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LogBackupEnabled  *string `json:"LogBackupEnabled,omitempty" xml:"LogBackupEnabled,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RetentType        *int32  `json:"RetentType,omitempty" xml:"RetentType,omitempty"`
	CrossBackupRegion *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	CrossBackupType   *string `json:"CrossBackupType,omitempty" xml:"CrossBackupType,omitempty"`
	Retention         *int32  `json:"Retention,omitempty" xml:"Retention,omitempty"`
	DBInstanceId      *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s ModifyInstanceCrossBackupPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceCrossBackupPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceCrossBackupPolicyResponseBody) SetBackupEnabled(v string) *ModifyInstanceCrossBackupPolicyResponseBody {
	s.BackupEnabled = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponseBody) SetRegionId(v string) *ModifyInstanceCrossBackupPolicyResponseBody {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponseBody) SetLogBackupEnabled(v string) *ModifyInstanceCrossBackupPolicyResponseBody {
	s.LogBackupEnabled = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponseBody) SetRequestId(v string) *ModifyInstanceCrossBackupPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponseBody) SetRetentType(v int32) *ModifyInstanceCrossBackupPolicyResponseBody {
	s.RetentType = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponseBody) SetCrossBackupRegion(v string) *ModifyInstanceCrossBackupPolicyResponseBody {
	s.CrossBackupRegion = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponseBody) SetCrossBackupType(v string) *ModifyInstanceCrossBackupPolicyResponseBody {
	s.CrossBackupType = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponseBody) SetRetention(v int32) *ModifyInstanceCrossBackupPolicyResponseBody {
	s.Retention = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponseBody) SetDBInstanceId(v string) *ModifyInstanceCrossBackupPolicyResponseBody {
	s.DBInstanceId = &v
	return s
}

type ModifyInstanceCrossBackupPolicyResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyInstanceCrossBackupPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyInstanceCrossBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceCrossBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetHeaders(v map[string]*string) *ModifyInstanceCrossBackupPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetBody(v *ModifyInstanceCrossBackupPolicyResponseBody) *ModifyInstanceCrossBackupPolicyResponse {
	s.Body = v
	return s
}

type ModifyParameterRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Parameters           *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	Forcerestart         *bool   `json:"Forcerestart,omitempty" xml:"Forcerestart,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ParameterGroupId     *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
}

func (s ModifyParameterRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyParameterRequest) GoString() string {
	return s.String()
}

func (s *ModifyParameterRequest) SetOwnerId(v int64) *ModifyParameterRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyParameterRequest) SetResourceOwnerAccount(v string) *ModifyParameterRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyParameterRequest) SetResourceOwnerId(v int64) *ModifyParameterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyParameterRequest) SetClientToken(v string) *ModifyParameterRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyParameterRequest) SetDBInstanceId(v string) *ModifyParameterRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyParameterRequest) SetParameters(v string) *ModifyParameterRequest {
	s.Parameters = &v
	return s
}

func (s *ModifyParameterRequest) SetForcerestart(v bool) *ModifyParameterRequest {
	s.Forcerestart = &v
	return s
}

func (s *ModifyParameterRequest) SetOwnerAccount(v string) *ModifyParameterRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyParameterRequest) SetParameterGroupId(v string) *ModifyParameterRequest {
	s.ParameterGroupId = &v
	return s
}

type ModifyParameterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyParameterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyParameterResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyParameterResponseBody) SetRequestId(v string) *ModifyParameterResponseBody {
	s.RequestId = &v
	return s
}

type ModifyParameterResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyParameterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyParameterResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyParameterResponse) GoString() string {
	return s.String()
}

func (s *ModifyParameterResponse) SetHeaders(v map[string]*string) *ModifyParameterResponse {
	s.Headers = v
	return s
}

func (s *ModifyParameterResponse) SetBody(v *ModifyParameterResponseBody) *ModifyParameterResponse {
	s.Body = v
	return s
}

type ModifyParameterGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ParameterGroupId     *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
	ParameterGroupName   *string `json:"ParameterGroupName,omitempty" xml:"ParameterGroupName,omitempty"`
	ParameterGroupDesc   *string `json:"ParameterGroupDesc,omitempty" xml:"ParameterGroupDesc,omitempty"`
	Parameters           *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyParameterGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyParameterGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyParameterGroupRequest) SetOwnerId(v int64) *ModifyParameterGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetResourceOwnerAccount(v string) *ModifyParameterGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetResourceOwnerId(v int64) *ModifyParameterGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetParameterGroupId(v string) *ModifyParameterGroupRequest {
	s.ParameterGroupId = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetParameterGroupName(v string) *ModifyParameterGroupRequest {
	s.ParameterGroupName = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetParameterGroupDesc(v string) *ModifyParameterGroupRequest {
	s.ParameterGroupDesc = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetParameters(v string) *ModifyParameterGroupRequest {
	s.Parameters = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetRegionId(v string) *ModifyParameterGroupRequest {
	s.RegionId = &v
	return s
}

type ModifyParameterGroupResponseBody struct {
	ParameterGroupId *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyParameterGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyParameterGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyParameterGroupResponseBody) SetParameterGroupId(v string) *ModifyParameterGroupResponseBody {
	s.ParameterGroupId = &v
	return s
}

func (s *ModifyParameterGroupResponseBody) SetRequestId(v string) *ModifyParameterGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyParameterGroupResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyParameterGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyParameterGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyParameterGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyParameterGroupResponse) SetHeaders(v map[string]*string) *ModifyParameterGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyParameterGroupResponse) SetBody(v *ModifyParameterGroupResponseBody) *ModifyParameterGroupResponse {
	s.Body = v
	return s
}

type ModifyReadonlyInstanceDelayReplicationTimeRequest struct {
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ReadSQLReplicationTime *string `json:"ReadSQLReplicationTime,omitempty" xml:"ReadSQLReplicationTime,omitempty"`
}

func (s ModifyReadonlyInstanceDelayReplicationTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReadonlyInstanceDelayReplicationTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeRequest) SetOwnerId(v int64) *ModifyReadonlyInstanceDelayReplicationTimeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeRequest) SetResourceOwnerAccount(v string) *ModifyReadonlyInstanceDelayReplicationTimeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeRequest) SetResourceOwnerId(v int64) *ModifyReadonlyInstanceDelayReplicationTimeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeRequest) SetDBInstanceId(v string) *ModifyReadonlyInstanceDelayReplicationTimeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeRequest) SetReadSQLReplicationTime(v string) *ModifyReadonlyInstanceDelayReplicationTimeRequest {
	s.ReadSQLReplicationTime = &v
	return s
}

type ModifyReadonlyInstanceDelayReplicationTimeResponseBody struct {
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId                 *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	ReadSQLReplicationTime *string `json:"ReadSQLReplicationTime,omitempty" xml:"ReadSQLReplicationTime,omitempty"`
}

func (s ModifyReadonlyInstanceDelayReplicationTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyReadonlyInstanceDelayReplicationTimeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeResponseBody) SetDBInstanceId(v string) *ModifyReadonlyInstanceDelayReplicationTimeResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeResponseBody) SetRequestId(v string) *ModifyReadonlyInstanceDelayReplicationTimeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeResponseBody) SetTaskId(v string) *ModifyReadonlyInstanceDelayReplicationTimeResponseBody {
	s.TaskId = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeResponseBody) SetReadSQLReplicationTime(v string) *ModifyReadonlyInstanceDelayReplicationTimeResponseBody {
	s.ReadSQLReplicationTime = &v
	return s
}

type ModifyReadonlyInstanceDelayReplicationTimeResponse struct {
	Headers map[string]*string                                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyReadonlyInstanceDelayReplicationTimeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyReadonlyInstanceDelayReplicationTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReadonlyInstanceDelayReplicationTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeResponse) SetHeaders(v map[string]*string) *ModifyReadonlyInstanceDelayReplicationTimeResponse {
	s.Headers = v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeResponse) SetBody(v *ModifyReadonlyInstanceDelayReplicationTimeResponseBody) *ModifyReadonlyInstanceDelayReplicationTimeResponse {
	s.Body = v
	return s
}

type ModifyReadWriteSplittingConnectionRequest struct {
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount           *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	Port                   *string `json:"Port,omitempty" xml:"Port,omitempty"`
	MaxDelayTime           *string `json:"MaxDelayTime,omitempty" xml:"MaxDelayTime,omitempty"`
	DistributionType       *string `json:"DistributionType,omitempty" xml:"DistributionType,omitempty"`
	Weight                 *string `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s ModifyReadWriteSplittingConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReadWriteSplittingConnectionRequest) GoString() string {
	return s.String()
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetOwnerId(v int64) *ModifyReadWriteSplittingConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetResourceOwnerAccount(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetResourceOwnerId(v int64) *ModifyReadWriteSplittingConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetOwnerAccount(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetDBInstanceId(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetConnectionStringPrefix(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetPort(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.Port = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetMaxDelayTime(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.MaxDelayTime = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetDistributionType(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.DistributionType = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetWeight(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.Weight = &v
	return s
}

type ModifyReadWriteSplittingConnectionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyReadWriteSplittingConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyReadWriteSplittingConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyReadWriteSplittingConnectionResponseBody) SetRequestId(v string) *ModifyReadWriteSplittingConnectionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyReadWriteSplittingConnectionResponse struct {
	Headers map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyReadWriteSplittingConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyReadWriteSplittingConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReadWriteSplittingConnectionResponse) GoString() string {
	return s.String()
}

func (s *ModifyReadWriteSplittingConnectionResponse) SetHeaders(v map[string]*string) *ModifyReadWriteSplittingConnectionResponse {
	s.Headers = v
	return s
}

func (s *ModifyReadWriteSplittingConnectionResponse) SetBody(v *ModifyReadWriteSplittingConnectionResponseBody) *ModifyReadWriteSplittingConnectionResponse {
	s.Body = v
	return s
}

type ModifyResourceGroupRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ModifyResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyResourceGroupRequest) SetOwnerId(v int64) *ModifyResourceGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyResourceGroupRequest) SetResourceOwnerAccount(v string) *ModifyResourceGroupRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifyResourceGroupRequest) SetResourceOwnerId(v int64) *ModifyResourceGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyResourceGroupRequest) SetClientToken(v string) *ModifyResourceGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyResourceGroupRequest) SetOwnerAccount(v string) *ModifyResourceGroupRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifyResourceGroupRequest) SetDBInstanceId(v string) *ModifyResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyResourceGroupRequest) SetResourceGroupId(v string) *ModifyResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

type ModifyResourceGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyResourceGroupResponseBody) SetRequestId(v string) *ModifyResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyResourceGroupResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyResourceGroupResponse) SetHeaders(v map[string]*string) *ModifyResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyResourceGroupResponse) SetBody(v *ModifyResourceGroupResponseBody) *ModifyResourceGroupResponse {
	s.Body = v
	return s
}

type ModifySecurityGroupConfigurationRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	SecurityGroupId      *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s ModifySecurityGroupConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupConfigurationRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupConfigurationRequest) SetOwnerId(v int64) *ModifySecurityGroupConfigurationRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySecurityGroupConfigurationRequest) SetResourceOwnerAccount(v string) *ModifySecurityGroupConfigurationRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySecurityGroupConfigurationRequest) SetResourceOwnerId(v int64) *ModifySecurityGroupConfigurationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityGroupConfigurationRequest) SetDBInstanceId(v string) *ModifySecurityGroupConfigurationRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySecurityGroupConfigurationRequest) SetSecurityGroupId(v string) *ModifySecurityGroupConfigurationRequest {
	s.SecurityGroupId = &v
	return s
}

type ModifySecurityGroupConfigurationResponseBody struct {
	DBInstanceName *string                                            `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	RequestId      *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Items          *ModifySecurityGroupConfigurationResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ModifySecurityGroupConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupConfigurationResponseBody) SetDBInstanceName(v string) *ModifySecurityGroupConfigurationResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *ModifySecurityGroupConfigurationResponseBody) SetRequestId(v string) *ModifySecurityGroupConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySecurityGroupConfigurationResponseBody) SetItems(v *ModifySecurityGroupConfigurationResponseBodyItems) *ModifySecurityGroupConfigurationResponseBody {
	s.Items = v
	return s
}

type ModifySecurityGroupConfigurationResponseBodyItems struct {
	EcsSecurityGroupRelation []*ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation `json:"EcsSecurityGroupRelation,omitempty" xml:"EcsSecurityGroupRelation,omitempty" type:"Repeated"`
}

func (s ModifySecurityGroupConfigurationResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupConfigurationResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupConfigurationResponseBodyItems) SetEcsSecurityGroupRelation(v []*ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) *ModifySecurityGroupConfigurationResponseBodyItems {
	s.EcsSecurityGroupRelation = v
	return s
}

type ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation struct {
	NetworkType     *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) SetNetworkType(v string) *ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation {
	s.NetworkType = &v
	return s
}

func (s *ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) SetSecurityGroupId(v string) *ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation) SetRegionId(v string) *ModifySecurityGroupConfigurationResponseBodyItemsEcsSecurityGroupRelation {
	s.RegionId = &v
	return s
}

type ModifySecurityGroupConfigurationResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifySecurityGroupConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySecurityGroupConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupConfigurationResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupConfigurationResponse) SetHeaders(v map[string]*string) *ModifySecurityGroupConfigurationResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityGroupConfigurationResponse) SetBody(v *ModifySecurityGroupConfigurationResponseBody) *ModifySecurityGroupConfigurationResponse {
	s.Body = v
	return s
}

type ModifySecurityIpsRequest struct {
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId               *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	SecurityIps                *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty"`
	DBInstanceIPArrayName      *string `json:"DBInstanceIPArrayName,omitempty" xml:"DBInstanceIPArrayName,omitempty"`
	DBInstanceIPArrayAttribute *string `json:"DBInstanceIPArrayAttribute,omitempty" xml:"DBInstanceIPArrayAttribute,omitempty"`
	SecurityIPType             *string `json:"SecurityIPType,omitempty" xml:"SecurityIPType,omitempty"`
	WhitelistNetworkType       *string `json:"WhitelistNetworkType,omitempty" xml:"WhitelistNetworkType,omitempty"`
	ModifyMode                 *string `json:"ModifyMode,omitempty" xml:"ModifyMode,omitempty"`
}

func (s ModifySecurityIpsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsRequest) SetResourceOwnerId(v int64) *ModifySecurityIpsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetDBInstanceId(v string) *ModifySecurityIpsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetSecurityIps(v string) *ModifySecurityIpsRequest {
	s.SecurityIps = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetDBInstanceIPArrayName(v string) *ModifySecurityIpsRequest {
	s.DBInstanceIPArrayName = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetDBInstanceIPArrayAttribute(v string) *ModifySecurityIpsRequest {
	s.DBInstanceIPArrayAttribute = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetSecurityIPType(v string) *ModifySecurityIpsRequest {
	s.SecurityIPType = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetWhitelistNetworkType(v string) *ModifySecurityIpsRequest {
	s.WhitelistNetworkType = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetModifyMode(v string) *ModifySecurityIpsRequest {
	s.ModifyMode = &v
	return s
}

type ModifySecurityIpsResponseBody struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySecurityIpsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsResponseBody) SetTaskId(v string) *ModifySecurityIpsResponseBody {
	s.TaskId = &v
	return s
}

func (s *ModifySecurityIpsResponseBody) SetRequestId(v string) *ModifySecurityIpsResponseBody {
	s.RequestId = &v
	return s
}

type ModifySecurityIpsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifySecurityIpsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySecurityIpsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsResponse) SetHeaders(v map[string]*string) *ModifySecurityIpsResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityIpsResponse) SetBody(v *ModifySecurityIpsResponseBody) *ModifySecurityIpsResponse {
	s.Body = v
	return s
}

type ModifySQLCollectorPolicyRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	SQLCollectorStatus   *string `json:"SQLCollectorStatus,omitempty" xml:"SQLCollectorStatus,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ModifySQLCollectorPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyRequest) SetOwnerId(v int64) *ModifySQLCollectorPolicyRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) SetResourceOwnerAccount(v string) *ModifySQLCollectorPolicyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) SetResourceOwnerId(v int64) *ModifySQLCollectorPolicyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) SetDBInstanceId(v string) *ModifySQLCollectorPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) SetSQLCollectorStatus(v string) *ModifySQLCollectorPolicyRequest {
	s.SQLCollectorStatus = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) SetOwnerAccount(v string) *ModifySQLCollectorPolicyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) SetResourceGroupId(v string) *ModifySQLCollectorPolicyRequest {
	s.ResourceGroupId = &v
	return s
}

type ModifySQLCollectorPolicyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySQLCollectorPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyResponseBody) SetRequestId(v string) *ModifySQLCollectorPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifySQLCollectorPolicyResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifySQLCollectorPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySQLCollectorPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyResponse) SetHeaders(v map[string]*string) *ModifySQLCollectorPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifySQLCollectorPolicyResponse) SetBody(v *ModifySQLCollectorPolicyResponseBody) *ModifySQLCollectorPolicyResponse {
	s.Body = v
	return s
}

type ModifySQLCollectorRetentionRequest struct {
	SecurityToken        *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ConfigValue          *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ModifySQLCollectorRetentionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorRetentionRequest) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorRetentionRequest) SetSecurityToken(v string) *ModifySQLCollectorRetentionRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifySQLCollectorRetentionRequest) SetOwnerId(v int64) *ModifySQLCollectorRetentionRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySQLCollectorRetentionRequest) SetResourceOwnerAccount(v string) *ModifySQLCollectorRetentionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ModifySQLCollectorRetentionRequest) SetResourceOwnerId(v int64) *ModifySQLCollectorRetentionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifySQLCollectorRetentionRequest) SetOwnerAccount(v string) *ModifySQLCollectorRetentionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ModifySQLCollectorRetentionRequest) SetDBInstanceId(v string) *ModifySQLCollectorRetentionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySQLCollectorRetentionRequest) SetConfigValue(v string) *ModifySQLCollectorRetentionRequest {
	s.ConfigValue = &v
	return s
}

func (s *ModifySQLCollectorRetentionRequest) SetResourceGroupId(v string) *ModifySQLCollectorRetentionRequest {
	s.ResourceGroupId = &v
	return s
}

type ModifySQLCollectorRetentionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySQLCollectorRetentionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorRetentionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorRetentionResponseBody) SetRequestId(v string) *ModifySQLCollectorRetentionResponseBody {
	s.RequestId = &v
	return s
}

type ModifySQLCollectorRetentionResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifySQLCollectorRetentionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySQLCollectorRetentionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorRetentionResponse) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorRetentionResponse) SetHeaders(v map[string]*string) *ModifySQLCollectorRetentionResponse {
	s.Headers = v
	return s
}

func (s *ModifySQLCollectorRetentionResponse) SetBody(v *ModifySQLCollectorRetentionResponseBody) *ModifySQLCollectorRetentionResponse {
	s.Body = v
	return s
}

type PurgeDBInstanceLogRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s PurgeDBInstanceLogRequest) String() string {
	return tea.Prettify(s)
}

func (s PurgeDBInstanceLogRequest) GoString() string {
	return s.String()
}

func (s *PurgeDBInstanceLogRequest) SetOwnerId(v int64) *PurgeDBInstanceLogRequest {
	s.OwnerId = &v
	return s
}

func (s *PurgeDBInstanceLogRequest) SetResourceOwnerAccount(v string) *PurgeDBInstanceLogRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *PurgeDBInstanceLogRequest) SetResourceOwnerId(v int64) *PurgeDBInstanceLogRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *PurgeDBInstanceLogRequest) SetClientToken(v string) *PurgeDBInstanceLogRequest {
	s.ClientToken = &v
	return s
}

func (s *PurgeDBInstanceLogRequest) SetDBInstanceId(v string) *PurgeDBInstanceLogRequest {
	s.DBInstanceId = &v
	return s
}

func (s *PurgeDBInstanceLogRequest) SetOwnerAccount(v string) *PurgeDBInstanceLogRequest {
	s.OwnerAccount = &v
	return s
}

type PurgeDBInstanceLogResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PurgeDBInstanceLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PurgeDBInstanceLogResponseBody) GoString() string {
	return s.String()
}

func (s *PurgeDBInstanceLogResponseBody) SetRequestId(v string) *PurgeDBInstanceLogResponseBody {
	s.RequestId = &v
	return s
}

type PurgeDBInstanceLogResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PurgeDBInstanceLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PurgeDBInstanceLogResponse) String() string {
	return tea.Prettify(s)
}

func (s PurgeDBInstanceLogResponse) GoString() string {
	return s.String()
}

func (s *PurgeDBInstanceLogResponse) SetHeaders(v map[string]*string) *PurgeDBInstanceLogResponse {
	s.Headers = v
	return s
}

func (s *PurgeDBInstanceLogResponse) SetBody(v *PurgeDBInstanceLogResponseBody) *PurgeDBInstanceLogResponse {
	s.Body = v
	return s
}

type RebuildDBInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	RebuildNodeType      *string `json:"RebuildNodeType,omitempty" xml:"RebuildNodeType,omitempty"`
}

func (s RebuildDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebuildDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebuildDBInstanceRequest) SetOwnerId(v int64) *RebuildDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetResourceOwnerAccount(v string) *RebuildDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetResourceOwnerId(v int64) *RebuildDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetRegionId(v string) *RebuildDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetDedicatedHostGroupId(v string) *RebuildDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetDBInstanceId(v string) *RebuildDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetDedicatedHostId(v string) *RebuildDBInstanceRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetRebuildNodeType(v string) *RebuildDBInstanceRequest {
	s.RebuildNodeType = &v
	return s
}

type RebuildDBInstanceResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId      *int32  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	MigrationId *int32  `json:"MigrationId,omitempty" xml:"MigrationId,omitempty"`
}

func (s RebuildDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebuildDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebuildDBInstanceResponseBody) SetRequestId(v string) *RebuildDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RebuildDBInstanceResponseBody) SetTaskId(v int32) *RebuildDBInstanceResponseBody {
	s.TaskId = &v
	return s
}

func (s *RebuildDBInstanceResponseBody) SetMigrationId(v int32) *RebuildDBInstanceResponseBody {
	s.MigrationId = &v
	return s
}

type RebuildDBInstanceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RebuildDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RebuildDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebuildDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebuildDBInstanceResponse) SetHeaders(v map[string]*string) *RebuildDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebuildDBInstanceResponse) SetBody(v *RebuildDBInstanceResponseBody) *RebuildDBInstanceResponse {
	s.Body = v
	return s
}

type RecoveryDBInstanceRequest struct {
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage     *int32  `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	InstanceNetworkType   *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TargetDBInstanceId    *string `json:"TargetDBInstanceId,omitempty" xml:"TargetDBInstanceId,omitempty"`
	DbNames               *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	BackupId              *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime           *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	VPCId                 *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId             *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress      *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	UsedTime              *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	Period                *string `json:"Period,omitempty" xml:"Period,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
}

func (s RecoveryDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RecoveryDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *RecoveryDBInstanceRequest) SetResourceOwnerId(v int64) *RecoveryDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetDBInstanceClass(v string) *RecoveryDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetDBInstanceStorage(v int32) *RecoveryDBInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetPayType(v string) *RecoveryDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetInstanceNetworkType(v string) *RecoveryDBInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetDBInstanceId(v string) *RecoveryDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetTargetDBInstanceId(v string) *RecoveryDBInstanceRequest {
	s.TargetDBInstanceId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetDbNames(v string) *RecoveryDBInstanceRequest {
	s.DbNames = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetBackupId(v string) *RecoveryDBInstanceRequest {
	s.BackupId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetRestoreTime(v string) *RecoveryDBInstanceRequest {
	s.RestoreTime = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetVPCId(v string) *RecoveryDBInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetVSwitchId(v string) *RecoveryDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetPrivateIpAddress(v string) *RecoveryDBInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetUsedTime(v string) *RecoveryDBInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetPeriod(v string) *RecoveryDBInstanceRequest {
	s.Period = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetDBInstanceStorageType(v string) *RecoveryDBInstanceRequest {
	s.DBInstanceStorageType = &v
	return s
}

type RecoveryDBInstanceResponseBody struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OrderId      *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
}

func (s RecoveryDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RecoveryDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RecoveryDBInstanceResponseBody) SetDBInstanceId(v string) *RecoveryDBInstanceResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *RecoveryDBInstanceResponseBody) SetRequestId(v string) *RecoveryDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RecoveryDBInstanceResponseBody) SetOrderId(v string) *RecoveryDBInstanceResponseBody {
	s.OrderId = &v
	return s
}

type RecoveryDBInstanceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RecoveryDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RecoveryDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RecoveryDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *RecoveryDBInstanceResponse) SetHeaders(v map[string]*string) *RecoveryDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *RecoveryDBInstanceResponse) SetBody(v *RecoveryDBInstanceResponseBody) *RecoveryDBInstanceResponse {
	s.Body = v
	return s
}

type ReleaseInstanceConnectionRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId            *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	CurrentConnectionString *string `json:"CurrentConnectionString,omitempty" xml:"CurrentConnectionString,omitempty"`
	InstanceNetworkType     *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReleaseInstanceConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceConnectionRequest) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceConnectionRequest) SetOwnerId(v int64) *ReleaseInstanceConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseInstanceConnectionRequest) SetResourceOwnerAccount(v string) *ReleaseInstanceConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleaseInstanceConnectionRequest) SetResourceOwnerId(v int64) *ReleaseInstanceConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseInstanceConnectionRequest) SetDBInstanceId(v string) *ReleaseInstanceConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ReleaseInstanceConnectionRequest) SetCurrentConnectionString(v string) *ReleaseInstanceConnectionRequest {
	s.CurrentConnectionString = &v
	return s
}

func (s *ReleaseInstanceConnectionRequest) SetInstanceNetworkType(v string) *ReleaseInstanceConnectionRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *ReleaseInstanceConnectionRequest) SetOwnerAccount(v string) *ReleaseInstanceConnectionRequest {
	s.OwnerAccount = &v
	return s
}

type ReleaseInstanceConnectionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseInstanceConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceConnectionResponseBody) SetRequestId(v string) *ReleaseInstanceConnectionResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseInstanceConnectionResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleaseInstanceConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseInstanceConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceConnectionResponse) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceConnectionResponse) SetHeaders(v map[string]*string) *ReleaseInstanceConnectionResponse {
	s.Headers = v
	return s
}

func (s *ReleaseInstanceConnectionResponse) SetBody(v *ReleaseInstanceConnectionResponseBody) *ReleaseInstanceConnectionResponse {
	s.Body = v
	return s
}

type ReleaseInstancePublicConnectionRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId            *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	CurrentConnectionString *string `json:"CurrentConnectionString,omitempty" xml:"CurrentConnectionString,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReleaseInstancePublicConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstancePublicConnectionRequest) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionRequest) SetOwnerId(v int64) *ReleaseInstancePublicConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) SetResourceOwnerAccount(v string) *ReleaseInstancePublicConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) SetResourceOwnerId(v int64) *ReleaseInstancePublicConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) SetDBInstanceId(v string) *ReleaseInstancePublicConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) SetCurrentConnectionString(v string) *ReleaseInstancePublicConnectionRequest {
	s.CurrentConnectionString = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) SetOwnerAccount(v string) *ReleaseInstancePublicConnectionRequest {
	s.OwnerAccount = &v
	return s
}

type ReleaseInstancePublicConnectionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseInstancePublicConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstancePublicConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionResponseBody) SetRequestId(v string) *ReleaseInstancePublicConnectionResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseInstancePublicConnectionResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleaseInstancePublicConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseInstancePublicConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstancePublicConnectionResponse) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionResponse) SetHeaders(v map[string]*string) *ReleaseInstancePublicConnectionResponse {
	s.Headers = v
	return s
}

func (s *ReleaseInstancePublicConnectionResponse) SetBody(v *ReleaseInstancePublicConnectionResponseBody) *ReleaseInstancePublicConnectionResponse {
	s.Body = v
	return s
}

type ReleaseReadWriteSplittingConnectionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s ReleaseReadWriteSplittingConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseReadWriteSplittingConnectionRequest) GoString() string {
	return s.String()
}

func (s *ReleaseReadWriteSplittingConnectionRequest) SetOwnerId(v int64) *ReleaseReadWriteSplittingConnectionRequest {
	s.OwnerId = &v
	return s
}

func (s *ReleaseReadWriteSplittingConnectionRequest) SetResourceOwnerAccount(v string) *ReleaseReadWriteSplittingConnectionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReleaseReadWriteSplittingConnectionRequest) SetResourceOwnerId(v int64) *ReleaseReadWriteSplittingConnectionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseReadWriteSplittingConnectionRequest) SetOwnerAccount(v string) *ReleaseReadWriteSplittingConnectionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ReleaseReadWriteSplittingConnectionRequest) SetDBInstanceId(v string) *ReleaseReadWriteSplittingConnectionRequest {
	s.DBInstanceId = &v
	return s
}

type ReleaseReadWriteSplittingConnectionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseReadWriteSplittingConnectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseReadWriteSplittingConnectionResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseReadWriteSplittingConnectionResponseBody) SetRequestId(v string) *ReleaseReadWriteSplittingConnectionResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseReadWriteSplittingConnectionResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleaseReadWriteSplittingConnectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseReadWriteSplittingConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseReadWriteSplittingConnectionResponse) GoString() string {
	return s.String()
}

func (s *ReleaseReadWriteSplittingConnectionResponse) SetHeaders(v map[string]*string) *ReleaseReadWriteSplittingConnectionResponse {
	s.Headers = v
	return s
}

func (s *ReleaseReadWriteSplittingConnectionResponse) SetBody(v *ReleaseReadWriteSplittingConnectionResponseBody) *ReleaseReadWriteSplittingConnectionResponse {
	s.Body = v
	return s
}

type RemoveTagsFromResourceRequest struct {
	Tag                  []*RemoveTagsFromResourceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	OwnerId              *int64                              `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                             `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string                             `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId              *string                             `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	RegionId             *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId         *string                             `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Tags                 *string                             `json:"Tags,omitempty" xml:"Tags,omitempty"`
	OwnerAccount         *string                             `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s RemoveTagsFromResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsFromResourceRequest) GoString() string {
	return s.String()
}

func (s *RemoveTagsFromResourceRequest) SetTag(v []*RemoveTagsFromResourceRequestTag) *RemoveTagsFromResourceRequest {
	s.Tag = v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetOwnerId(v int64) *RemoveTagsFromResourceRequest {
	s.OwnerId = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetResourceOwnerAccount(v string) *RemoveTagsFromResourceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetResourceOwnerId(v int64) *RemoveTagsFromResourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetClientToken(v string) *RemoveTagsFromResourceRequest {
	s.ClientToken = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetProxyId(v string) *RemoveTagsFromResourceRequest {
	s.ProxyId = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetRegionId(v string) *RemoveTagsFromResourceRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetDBInstanceId(v string) *RemoveTagsFromResourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetTags(v string) *RemoveTagsFromResourceRequest {
	s.Tags = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetOwnerAccount(v string) *RemoveTagsFromResourceRequest {
	s.OwnerAccount = &v
	return s
}

type RemoveTagsFromResourceRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s RemoveTagsFromResourceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsFromResourceRequestTag) GoString() string {
	return s.String()
}

func (s *RemoveTagsFromResourceRequestTag) SetKey(v string) *RemoveTagsFromResourceRequestTag {
	s.Key = &v
	return s
}

func (s *RemoveTagsFromResourceRequestTag) SetValue(v string) *RemoveTagsFromResourceRequestTag {
	s.Value = &v
	return s
}

type RemoveTagsFromResourceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveTagsFromResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsFromResourceResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveTagsFromResourceResponseBody) SetRequestId(v string) *RemoveTagsFromResourceResponseBody {
	s.RequestId = &v
	return s
}

type RemoveTagsFromResourceResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RemoveTagsFromResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveTagsFromResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsFromResourceResponse) GoString() string {
	return s.String()
}

func (s *RemoveTagsFromResourceResponse) SetHeaders(v map[string]*string) *RemoveTagsFromResourceResponse {
	s.Headers = v
	return s
}

func (s *RemoveTagsFromResourceResponse) SetBody(v *RemoveTagsFromResourceResponseBody) *RemoveTagsFromResourceResponse {
	s.Body = v
	return s
}

type RenewInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	Period               *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	AutoPay              *string `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
}

func (s RenewInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewInstanceRequest) SetOwnerId(v int64) *RenewInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RenewInstanceRequest) SetResourceOwnerAccount(v string) *RenewInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RenewInstanceRequest) SetResourceOwnerId(v int64) *RenewInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RenewInstanceRequest) SetClientToken(v string) *RenewInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RenewInstanceRequest) SetDBInstanceId(v string) *RenewInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RenewInstanceRequest) SetPeriod(v int32) *RenewInstanceRequest {
	s.Period = &v
	return s
}

func (s *RenewInstanceRequest) SetAutoPay(v string) *RenewInstanceRequest {
	s.AutoPay = &v
	return s
}

type RenewInstanceResponseBody struct {
	OrderId   *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponseBody) SetOrderId(v int64) *RenewInstanceResponseBody {
	s.OrderId = &v
	return s
}

func (s *RenewInstanceResponseBody) SetRequestId(v string) *RenewInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RenewInstanceResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RenewInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RenewInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponse) SetHeaders(v map[string]*string) *RenewInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewInstanceResponse) SetBody(v *RenewInstanceResponseBody) *RenewInstanceResponse {
	s.Body = v
	return s
}

type ReplaceDedicatedHostRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	FailoverMode         *string `json:"FailoverMode,omitempty" xml:"FailoverMode,omitempty"`
}

func (s ReplaceDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ReplaceDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *ReplaceDedicatedHostRequest) SetOwnerId(v int64) *ReplaceDedicatedHostRequest {
	s.OwnerId = &v
	return s
}

func (s *ReplaceDedicatedHostRequest) SetResourceOwnerAccount(v string) *ReplaceDedicatedHostRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReplaceDedicatedHostRequest) SetResourceOwnerId(v int64) *ReplaceDedicatedHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReplaceDedicatedHostRequest) SetRegionId(v string) *ReplaceDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *ReplaceDedicatedHostRequest) SetDedicatedHostId(v string) *ReplaceDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ReplaceDedicatedHostRequest) SetFailoverMode(v string) *ReplaceDedicatedHostRequest {
	s.FailoverMode = &v
	return s
}

type ReplaceDedicatedHostResponseBody struct {
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	TaskId          *int32  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReplaceDedicatedHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReplaceDedicatedHostResponseBody) GoString() string {
	return s.String()
}

func (s *ReplaceDedicatedHostResponseBody) SetDedicatedHostId(v string) *ReplaceDedicatedHostResponseBody {
	s.DedicatedHostId = &v
	return s
}

func (s *ReplaceDedicatedHostResponseBody) SetTaskId(v int32) *ReplaceDedicatedHostResponseBody {
	s.TaskId = &v
	return s
}

func (s *ReplaceDedicatedHostResponseBody) SetRequestId(v string) *ReplaceDedicatedHostResponseBody {
	s.RequestId = &v
	return s
}

type ReplaceDedicatedHostResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReplaceDedicatedHostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReplaceDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ReplaceDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *ReplaceDedicatedHostResponse) SetHeaders(v map[string]*string) *ReplaceDedicatedHostResponse {
	s.Headers = v
	return s
}

func (s *ReplaceDedicatedHostResponse) SetBody(v *ReplaceDedicatedHostResponseBody) *ReplaceDedicatedHostResponse {
	s.Body = v
	return s
}

type ResetAccountRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountPassword      *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ResetAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountRequest) GoString() string {
	return s.String()
}

func (s *ResetAccountRequest) SetOwnerId(v int64) *ResetAccountRequest {
	s.OwnerId = &v
	return s
}

func (s *ResetAccountRequest) SetResourceOwnerAccount(v string) *ResetAccountRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ResetAccountRequest) SetResourceOwnerId(v int64) *ResetAccountRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ResetAccountRequest) SetDBInstanceId(v string) *ResetAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResetAccountRequest) SetAccountName(v string) *ResetAccountRequest {
	s.AccountName = &v
	return s
}

func (s *ResetAccountRequest) SetAccountPassword(v string) *ResetAccountRequest {
	s.AccountPassword = &v
	return s
}

func (s *ResetAccountRequest) SetOwnerAccount(v string) *ResetAccountRequest {
	s.OwnerAccount = &v
	return s
}

type ResetAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAccountResponseBody) SetRequestId(v string) *ResetAccountResponseBody {
	s.RequestId = &v
	return s
}

type ResetAccountResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResetAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountResponse) GoString() string {
	return s.String()
}

func (s *ResetAccountResponse) SetHeaders(v map[string]*string) *ResetAccountResponse {
	s.Headers = v
	return s
}

func (s *ResetAccountResponse) SetBody(v *ResetAccountResponseBody) *ResetAccountResponse {
	s.Body = v
	return s
}

type ResetAccountPasswordRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	AccountPassword      *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ResetAccountPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountPasswordRequest) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordRequest) SetOwnerId(v int64) *ResetAccountPasswordRequest {
	s.OwnerId = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetResourceOwnerAccount(v string) *ResetAccountPasswordRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetResourceOwnerId(v int64) *ResetAccountPasswordRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetDBInstanceId(v string) *ResetAccountPasswordRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetAccountName(v string) *ResetAccountPasswordRequest {
	s.AccountName = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetAccountPassword(v string) *ResetAccountPasswordRequest {
	s.AccountPassword = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetOwnerAccount(v string) *ResetAccountPasswordRequest {
	s.OwnerAccount = &v
	return s
}

type ResetAccountPasswordResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAccountPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordResponseBody) SetRequestId(v string) *ResetAccountPasswordResponseBody {
	s.RequestId = &v
	return s
}

type ResetAccountPasswordResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResetAccountPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetAccountPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountPasswordResponse) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordResponse) SetHeaders(v map[string]*string) *ResetAccountPasswordResponse {
	s.Headers = v
	return s
}

func (s *ResetAccountPasswordResponse) SetBody(v *ResetAccountPasswordResponseBody) *ResetAccountPasswordResponse {
	s.Body = v
	return s
}

type RestartDBInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s RestartDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceRequest) SetOwnerId(v int64) *RestartDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *RestartDBInstanceRequest) SetResourceOwnerAccount(v string) *RestartDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RestartDBInstanceRequest) SetResourceOwnerId(v int64) *RestartDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RestartDBInstanceRequest) SetClientToken(v string) *RestartDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RestartDBInstanceRequest) SetDBInstanceId(v string) *RestartDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RestartDBInstanceRequest) SetOwnerAccount(v string) *RestartDBInstanceRequest {
	s.OwnerAccount = &v
	return s
}

type RestartDBInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestartDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceResponseBody) SetRequestId(v string) *RestartDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RestartDBInstanceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestartDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestartDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceResponse) SetHeaders(v map[string]*string) *RestartDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *RestartDBInstanceResponse) SetBody(v *RestartDBInstanceResponseBody) *RestartDBInstanceResponse {
	s.Body = v
	return s
}

type RestartDedicatedHostRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	FailoverMode         *string `json:"FailoverMode,omitempty" xml:"FailoverMode,omitempty"`
}

func (s RestartDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *RestartDedicatedHostRequest) SetOwnerId(v int64) *RestartDedicatedHostRequest {
	s.OwnerId = &v
	return s
}

func (s *RestartDedicatedHostRequest) SetResourceOwnerAccount(v string) *RestartDedicatedHostRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RestartDedicatedHostRequest) SetResourceOwnerId(v int64) *RestartDedicatedHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RestartDedicatedHostRequest) SetRegionId(v string) *RestartDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *RestartDedicatedHostRequest) SetDedicatedHostId(v string) *RestartDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *RestartDedicatedHostRequest) SetFailoverMode(v string) *RestartDedicatedHostRequest {
	s.FailoverMode = &v
	return s
}

type RestartDedicatedHostResponseBody struct {
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	TaskId          *int32  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestartDedicatedHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartDedicatedHostResponseBody) GoString() string {
	return s.String()
}

func (s *RestartDedicatedHostResponseBody) SetDedicatedHostId(v string) *RestartDedicatedHostResponseBody {
	s.DedicatedHostId = &v
	return s
}

func (s *RestartDedicatedHostResponseBody) SetTaskId(v int32) *RestartDedicatedHostResponseBody {
	s.TaskId = &v
	return s
}

func (s *RestartDedicatedHostResponseBody) SetRequestId(v string) *RestartDedicatedHostResponseBody {
	s.RequestId = &v
	return s
}

type RestartDedicatedHostResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestartDedicatedHostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestartDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *RestartDedicatedHostResponse) SetHeaders(v map[string]*string) *RestartDedicatedHostResponse {
	s.Headers = v
	return s
}

func (s *RestartDedicatedHostResponse) SetBody(v *RestartDedicatedHostResponseBody) *RestartDedicatedHostResponse {
	s.Body = v
	return s
}

type RestoreDdrTableRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RestoreType          *string `json:"RestoreType,omitempty" xml:"RestoreType,omitempty"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime          *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	SourceRegion         *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	SourceDBInstanceName *string `json:"SourceDBInstanceName,omitempty" xml:"SourceDBInstanceName,omitempty"`
	TableMeta            *string `json:"TableMeta,omitempty" xml:"TableMeta,omitempty"`
}

func (s RestoreDdrTableRequest) String() string {
	return tea.Prettify(s)
}

func (s RestoreDdrTableRequest) GoString() string {
	return s.String()
}

func (s *RestoreDdrTableRequest) SetOwnerId(v int64) *RestoreDdrTableRequest {
	s.OwnerId = &v
	return s
}

func (s *RestoreDdrTableRequest) SetResourceOwnerAccount(v string) *RestoreDdrTableRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RestoreDdrTableRequest) SetResourceOwnerId(v int64) *RestoreDdrTableRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RestoreDdrTableRequest) SetDBInstanceId(v string) *RestoreDdrTableRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RestoreDdrTableRequest) SetRegionId(v string) *RestoreDdrTableRequest {
	s.RegionId = &v
	return s
}

func (s *RestoreDdrTableRequest) SetClientToken(v string) *RestoreDdrTableRequest {
	s.ClientToken = &v
	return s
}

func (s *RestoreDdrTableRequest) SetRestoreType(v string) *RestoreDdrTableRequest {
	s.RestoreType = &v
	return s
}

func (s *RestoreDdrTableRequest) SetBackupId(v string) *RestoreDdrTableRequest {
	s.BackupId = &v
	return s
}

func (s *RestoreDdrTableRequest) SetRestoreTime(v string) *RestoreDdrTableRequest {
	s.RestoreTime = &v
	return s
}

func (s *RestoreDdrTableRequest) SetSourceRegion(v string) *RestoreDdrTableRequest {
	s.SourceRegion = &v
	return s
}

func (s *RestoreDdrTableRequest) SetSourceDBInstanceName(v string) *RestoreDdrTableRequest {
	s.SourceDBInstanceName = &v
	return s
}

func (s *RestoreDdrTableRequest) SetTableMeta(v string) *RestoreDdrTableRequest {
	s.TableMeta = &v
	return s
}

type RestoreDdrTableResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestoreDdrTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestoreDdrTableResponseBody) GoString() string {
	return s.String()
}

func (s *RestoreDdrTableResponseBody) SetRequestId(v string) *RestoreDdrTableResponseBody {
	s.RequestId = &v
	return s
}

type RestoreDdrTableResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestoreDdrTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestoreDdrTableResponse) String() string {
	return tea.Prettify(s)
}

func (s RestoreDdrTableResponse) GoString() string {
	return s.String()
}

func (s *RestoreDdrTableResponse) SetHeaders(v map[string]*string) *RestoreDdrTableResponse {
	s.Headers = v
	return s
}

func (s *RestoreDdrTableResponse) SetBody(v *RestoreDdrTableResponseBody) *RestoreDdrTableResponse {
	s.Body = v
	return s
}

type RestoreTableRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime          *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	TableMeta            *string `json:"TableMeta,omitempty" xml:"TableMeta,omitempty"`
}

func (s RestoreTableRequest) String() string {
	return tea.Prettify(s)
}

func (s RestoreTableRequest) GoString() string {
	return s.String()
}

func (s *RestoreTableRequest) SetOwnerId(v int64) *RestoreTableRequest {
	s.OwnerId = &v
	return s
}

func (s *RestoreTableRequest) SetResourceOwnerAccount(v string) *RestoreTableRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RestoreTableRequest) SetResourceOwnerId(v int64) *RestoreTableRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RestoreTableRequest) SetClientToken(v string) *RestoreTableRequest {
	s.ClientToken = &v
	return s
}

func (s *RestoreTableRequest) SetDBInstanceId(v string) *RestoreTableRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RestoreTableRequest) SetBackupId(v string) *RestoreTableRequest {
	s.BackupId = &v
	return s
}

func (s *RestoreTableRequest) SetRestoreTime(v string) *RestoreTableRequest {
	s.RestoreTime = &v
	return s
}

func (s *RestoreTableRequest) SetOwnerAccount(v string) *RestoreTableRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RestoreTableRequest) SetTableMeta(v string) *RestoreTableRequest {
	s.TableMeta = &v
	return s
}

type RestoreTableResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RestoreTableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestoreTableResponseBody) GoString() string {
	return s.String()
}

func (s *RestoreTableResponseBody) SetRequestId(v string) *RestoreTableResponseBody {
	s.RequestId = &v
	return s
}

type RestoreTableResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestoreTableResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestoreTableResponse) String() string {
	return tea.Prettify(s)
}

func (s RestoreTableResponse) GoString() string {
	return s.String()
}

func (s *RestoreTableResponse) SetHeaders(v map[string]*string) *RestoreTableResponse {
	s.Headers = v
	return s
}

func (s *RestoreTableResponse) SetBody(v *RestoreTableResponseBody) *RestoreTableResponse {
	s.Body = v
	return s
}

type RevokeAccountPrivilegeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	DBName               *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s RevokeAccountPrivilegeRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeAccountPrivilegeRequest) GoString() string {
	return s.String()
}

func (s *RevokeAccountPrivilegeRequest) SetOwnerId(v int64) *RevokeAccountPrivilegeRequest {
	s.OwnerId = &v
	return s
}

func (s *RevokeAccountPrivilegeRequest) SetResourceOwnerAccount(v string) *RevokeAccountPrivilegeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RevokeAccountPrivilegeRequest) SetResourceOwnerId(v int64) *RevokeAccountPrivilegeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RevokeAccountPrivilegeRequest) SetDBInstanceId(v string) *RevokeAccountPrivilegeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RevokeAccountPrivilegeRequest) SetAccountName(v string) *RevokeAccountPrivilegeRequest {
	s.AccountName = &v
	return s
}

func (s *RevokeAccountPrivilegeRequest) SetDBName(v string) *RevokeAccountPrivilegeRequest {
	s.DBName = &v
	return s
}

func (s *RevokeAccountPrivilegeRequest) SetOwnerAccount(v string) *RevokeAccountPrivilegeRequest {
	s.OwnerAccount = &v
	return s
}

type RevokeAccountPrivilegeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeAccountPrivilegeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeAccountPrivilegeResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeAccountPrivilegeResponseBody) SetRequestId(v string) *RevokeAccountPrivilegeResponseBody {
	s.RequestId = &v
	return s
}

type RevokeAccountPrivilegeResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RevokeAccountPrivilegeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeAccountPrivilegeResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeAccountPrivilegeResponse) GoString() string {
	return s.String()
}

func (s *RevokeAccountPrivilegeResponse) SetHeaders(v map[string]*string) *RevokeAccountPrivilegeResponse {
	s.Headers = v
	return s
}

func (s *RevokeAccountPrivilegeResponse) SetBody(v *RevokeAccountPrivilegeResponseBody) *RevokeAccountPrivilegeResponse {
	s.Body = v
	return s
}

type RevokeOperatorPermissionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s RevokeOperatorPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeOperatorPermissionRequest) GoString() string {
	return s.String()
}

func (s *RevokeOperatorPermissionRequest) SetOwnerId(v int64) *RevokeOperatorPermissionRequest {
	s.OwnerId = &v
	return s
}

func (s *RevokeOperatorPermissionRequest) SetResourceOwnerAccount(v string) *RevokeOperatorPermissionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RevokeOperatorPermissionRequest) SetResourceOwnerId(v int64) *RevokeOperatorPermissionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RevokeOperatorPermissionRequest) SetDBInstanceId(v string) *RevokeOperatorPermissionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RevokeOperatorPermissionRequest) SetOwnerAccount(v string) *RevokeOperatorPermissionRequest {
	s.OwnerAccount = &v
	return s
}

type RevokeOperatorPermissionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeOperatorPermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeOperatorPermissionResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeOperatorPermissionResponseBody) SetRequestId(v string) *RevokeOperatorPermissionResponseBody {
	s.RequestId = &v
	return s
}

type RevokeOperatorPermissionResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RevokeOperatorPermissionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RevokeOperatorPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeOperatorPermissionResponse) GoString() string {
	return s.String()
}

func (s *RevokeOperatorPermissionResponse) SetHeaders(v map[string]*string) *RevokeOperatorPermissionResponse {
	s.Headers = v
	return s
}

func (s *RevokeOperatorPermissionResponse) SetBody(v *RevokeOperatorPermissionResponseBody) *RevokeOperatorPermissionResponse {
	s.Body = v
	return s
}

type StartDBInstanceRequest struct {
	OwnerId                        *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount           *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId                *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId           *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	DBInstanceId                   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TargetDedicatedHostIdForMaster *string `json:"TargetDedicatedHostIdForMaster,omitempty" xml:"TargetDedicatedHostIdForMaster,omitempty"`
	TargetDedicatedHostIdForSlave  *string `json:"TargetDedicatedHostIdForSlave,omitempty" xml:"TargetDedicatedHostIdForSlave,omitempty"`
	TargetDedicatedHostIdForLog    *string `json:"TargetDedicatedHostIdForLog,omitempty" xml:"TargetDedicatedHostIdForLog,omitempty"`
	EffectiveTime                  *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	SpecifiedTime                  *string `json:"SpecifiedTime,omitempty" xml:"SpecifiedTime,omitempty"`
	TargetDBInstanceClass          *string `json:"TargetDBInstanceClass,omitempty" xml:"TargetDBInstanceClass,omitempty"`
	EngineVersion                  *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceTransType            *int32  `json:"DBInstanceTransType,omitempty" xml:"DBInstanceTransType,omitempty"`
	Storage                        *int32  `json:"Storage,omitempty" xml:"Storage,omitempty"`
	VSwitchId                      *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId                         *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s StartDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartDBInstanceRequest) SetOwnerId(v int64) *StartDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *StartDBInstanceRequest) SetResourceOwnerAccount(v string) *StartDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StartDBInstanceRequest) SetResourceOwnerId(v int64) *StartDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StartDBInstanceRequest) SetRegionId(v string) *StartDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *StartDBInstanceRequest) SetDedicatedHostGroupId(v string) *StartDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *StartDBInstanceRequest) SetDBInstanceId(v string) *StartDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *StartDBInstanceRequest) SetTargetDedicatedHostIdForMaster(v string) *StartDBInstanceRequest {
	s.TargetDedicatedHostIdForMaster = &v
	return s
}

func (s *StartDBInstanceRequest) SetTargetDedicatedHostIdForSlave(v string) *StartDBInstanceRequest {
	s.TargetDedicatedHostIdForSlave = &v
	return s
}

func (s *StartDBInstanceRequest) SetTargetDedicatedHostIdForLog(v string) *StartDBInstanceRequest {
	s.TargetDedicatedHostIdForLog = &v
	return s
}

func (s *StartDBInstanceRequest) SetEffectiveTime(v string) *StartDBInstanceRequest {
	s.EffectiveTime = &v
	return s
}

func (s *StartDBInstanceRequest) SetSpecifiedTime(v string) *StartDBInstanceRequest {
	s.SpecifiedTime = &v
	return s
}

func (s *StartDBInstanceRequest) SetTargetDBInstanceClass(v string) *StartDBInstanceRequest {
	s.TargetDBInstanceClass = &v
	return s
}

func (s *StartDBInstanceRequest) SetEngineVersion(v string) *StartDBInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *StartDBInstanceRequest) SetDBInstanceTransType(v int32) *StartDBInstanceRequest {
	s.DBInstanceTransType = &v
	return s
}

func (s *StartDBInstanceRequest) SetStorage(v int32) *StartDBInstanceRequest {
	s.Storage = &v
	return s
}

func (s *StartDBInstanceRequest) SetVSwitchId(v string) *StartDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *StartDBInstanceRequest) SetZoneId(v string) *StartDBInstanceRequest {
	s.ZoneId = &v
	return s
}

type StartDBInstanceResponseBody struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId      *int32  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	MigrationId *int32  `json:"MigrationId,omitempty" xml:"MigrationId,omitempty"`
}

func (s StartDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartDBInstanceResponseBody) SetRequestId(v string) *StartDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartDBInstanceResponseBody) SetTaskId(v int32) *StartDBInstanceResponseBody {
	s.TaskId = &v
	return s
}

func (s *StartDBInstanceResponseBody) SetMigrationId(v int32) *StartDBInstanceResponseBody {
	s.MigrationId = &v
	return s
}

type StartDBInstanceResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartDBInstanceResponse) SetHeaders(v map[string]*string) *StartDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartDBInstanceResponse) SetBody(v *StartDBInstanceResponseBody) *StartDBInstanceResponse {
	s.Body = v
	return s
}

type StopDBInstanceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StopDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopDBInstanceRequest) SetOwnerId(v int64) *StopDBInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *StopDBInstanceRequest) SetResourceOwnerAccount(v string) *StopDBInstanceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StopDBInstanceRequest) SetResourceOwnerId(v int64) *StopDBInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StopDBInstanceRequest) SetDBInstanceId(v string) *StopDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *StopDBInstanceRequest) SetRegionId(v string) *StopDBInstanceRequest {
	s.RegionId = &v
	return s
}

type StopDBInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopDBInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopDBInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopDBInstanceResponseBody) SetRequestId(v string) *StopDBInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StopDBInstanceResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopDBInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopDBInstanceResponse) SetHeaders(v map[string]*string) *StopDBInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopDBInstanceResponse) SetBody(v *StopDBInstanceResponseBody) *StopDBInstanceResponse {
	s.Body = v
	return s
}

type SwitchDBInstanceHARequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	NodeId               *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	Force                *string `json:"Force,omitempty" xml:"Force,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	EffectiveTime        *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
}

func (s SwitchDBInstanceHARequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceHARequest) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceHARequest) SetOwnerId(v int64) *SwitchDBInstanceHARequest {
	s.OwnerId = &v
	return s
}

func (s *SwitchDBInstanceHARequest) SetResourceOwnerAccount(v string) *SwitchDBInstanceHARequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SwitchDBInstanceHARequest) SetResourceOwnerId(v int64) *SwitchDBInstanceHARequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SwitchDBInstanceHARequest) SetDBInstanceId(v string) *SwitchDBInstanceHARequest {
	s.DBInstanceId = &v
	return s
}

func (s *SwitchDBInstanceHARequest) SetNodeId(v string) *SwitchDBInstanceHARequest {
	s.NodeId = &v
	return s
}

func (s *SwitchDBInstanceHARequest) SetForce(v string) *SwitchDBInstanceHARequest {
	s.Force = &v
	return s
}

func (s *SwitchDBInstanceHARequest) SetOwnerAccount(v string) *SwitchDBInstanceHARequest {
	s.OwnerAccount = &v
	return s
}

func (s *SwitchDBInstanceHARequest) SetEffectiveTime(v string) *SwitchDBInstanceHARequest {
	s.EffectiveTime = &v
	return s
}

type SwitchDBInstanceHAResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SwitchDBInstanceHAResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceHAResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceHAResponseBody) SetRequestId(v string) *SwitchDBInstanceHAResponseBody {
	s.RequestId = &v
	return s
}

type SwitchDBInstanceHAResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SwitchDBInstanceHAResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SwitchDBInstanceHAResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceHAResponse) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceHAResponse) SetHeaders(v map[string]*string) *SwitchDBInstanceHAResponse {
	s.Headers = v
	return s
}

func (s *SwitchDBInstanceHAResponse) SetBody(v *SwitchDBInstanceHAResponseBody) *SwitchDBInstanceHAResponse {
	s.Body = v
	return s
}

type SwitchDBInstanceNetTypeRequest struct {
	OwnerId                *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount   *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId        *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken            *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	Port                   *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ConnectionStringType   *string `json:"ConnectionStringType,omitempty" xml:"ConnectionStringType,omitempty"`
	OwnerAccount           *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SwitchDBInstanceNetTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceNetTypeRequest) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeRequest) SetOwnerId(v int64) *SwitchDBInstanceNetTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetResourceOwnerAccount(v string) *SwitchDBInstanceNetTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetResourceOwnerId(v int64) *SwitchDBInstanceNetTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetClientToken(v string) *SwitchDBInstanceNetTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetDBInstanceId(v string) *SwitchDBInstanceNetTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetConnectionStringPrefix(v string) *SwitchDBInstanceNetTypeRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetPort(v string) *SwitchDBInstanceNetTypeRequest {
	s.Port = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetConnectionStringType(v string) *SwitchDBInstanceNetTypeRequest {
	s.ConnectionStringType = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetOwnerAccount(v string) *SwitchDBInstanceNetTypeRequest {
	s.OwnerAccount = &v
	return s
}

type SwitchDBInstanceNetTypeResponseBody struct {
	NewConnectionString *string `json:"NewConnectionString,omitempty" xml:"NewConnectionString,omitempty"`
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OldConnectionString *string `json:"OldConnectionString,omitempty" xml:"OldConnectionString,omitempty"`
}

func (s SwitchDBInstanceNetTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceNetTypeResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeResponseBody) SetNewConnectionString(v string) *SwitchDBInstanceNetTypeResponseBody {
	s.NewConnectionString = &v
	return s
}

func (s *SwitchDBInstanceNetTypeResponseBody) SetRequestId(v string) *SwitchDBInstanceNetTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchDBInstanceNetTypeResponseBody) SetOldConnectionString(v string) *SwitchDBInstanceNetTypeResponseBody {
	s.OldConnectionString = &v
	return s
}

type SwitchDBInstanceNetTypeResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SwitchDBInstanceNetTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SwitchDBInstanceNetTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceNetTypeResponse) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeResponse) SetHeaders(v map[string]*string) *SwitchDBInstanceNetTypeResponse {
	s.Headers = v
	return s
}

func (s *SwitchDBInstanceNetTypeResponse) SetBody(v *SwitchDBInstanceNetTypeResponseBody) *SwitchDBInstanceNetTypeResponse {
	s.Body = v
	return s
}

type SwitchDBInstanceVpcRequest struct {
	ResourceOwnerId  *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	VPCId            *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId        *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s SwitchDBInstanceVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceVpcRequest) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceVpcRequest) SetResourceOwnerId(v int64) *SwitchDBInstanceVpcRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SwitchDBInstanceVpcRequest) SetDBInstanceId(v string) *SwitchDBInstanceVpcRequest {
	s.DBInstanceId = &v
	return s
}

func (s *SwitchDBInstanceVpcRequest) SetVPCId(v string) *SwitchDBInstanceVpcRequest {
	s.VPCId = &v
	return s
}

func (s *SwitchDBInstanceVpcRequest) SetVSwitchId(v string) *SwitchDBInstanceVpcRequest {
	s.VSwitchId = &v
	return s
}

func (s *SwitchDBInstanceVpcRequest) SetPrivateIpAddress(v string) *SwitchDBInstanceVpcRequest {
	s.PrivateIpAddress = &v
	return s
}

type SwitchDBInstanceVpcResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SwitchDBInstanceVpcResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceVpcResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceVpcResponseBody) SetRequestId(v string) *SwitchDBInstanceVpcResponseBody {
	s.RequestId = &v
	return s
}

type SwitchDBInstanceVpcResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SwitchDBInstanceVpcResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SwitchDBInstanceVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceVpcResponse) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceVpcResponse) SetHeaders(v map[string]*string) *SwitchDBInstanceVpcResponse {
	s.Headers = v
	return s
}

func (s *SwitchDBInstanceVpcResponse) SetBody(v *SwitchDBInstanceVpcResponseBody) *SwitchDBInstanceVpcResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	OwnerId              *int64                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string                   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType         *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId           []*string                 `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag                  []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetOwnerId(v int64) *TagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerAccount(v string) *TagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerId(v int64) *TagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type TerminateMigrateTaskRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	MigrateTaskId        *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
}

func (s TerminateMigrateTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminateMigrateTaskRequest) GoString() string {
	return s.String()
}

func (s *TerminateMigrateTaskRequest) SetOwnerId(v int64) *TerminateMigrateTaskRequest {
	s.OwnerId = &v
	return s
}

func (s *TerminateMigrateTaskRequest) SetResourceOwnerAccount(v string) *TerminateMigrateTaskRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TerminateMigrateTaskRequest) SetResourceOwnerId(v int64) *TerminateMigrateTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TerminateMigrateTaskRequest) SetDBInstanceId(v string) *TerminateMigrateTaskRequest {
	s.DBInstanceId = &v
	return s
}

func (s *TerminateMigrateTaskRequest) SetMigrateTaskId(v string) *TerminateMigrateTaskRequest {
	s.MigrateTaskId = &v
	return s
}

type TerminateMigrateTaskResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TerminateMigrateTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TerminateMigrateTaskResponseBody) GoString() string {
	return s.String()
}

func (s *TerminateMigrateTaskResponseBody) SetRequestId(v string) *TerminateMigrateTaskResponseBody {
	s.RequestId = &v
	return s
}

type TerminateMigrateTaskResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TerminateMigrateTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TerminateMigrateTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminateMigrateTaskResponse) GoString() string {
	return s.String()
}

func (s *TerminateMigrateTaskResponse) SetHeaders(v map[string]*string) *TerminateMigrateTaskResponse {
	s.Headers = v
	return s
}

func (s *TerminateMigrateTaskResponse) SetBody(v *TerminateMigrateTaskResponseBody) *TerminateMigrateTaskResponse {
	s.Body = v
	return s
}

type TransformDBInstancePayTypeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	UsedTime             *int32  `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	PayType              *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	Period               *string `json:"Period,omitempty" xml:"Period,omitempty"`
	BusinessInfo         *string `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
}

func (s TransformDBInstancePayTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s TransformDBInstancePayTypeRequest) GoString() string {
	return s.String()
}

func (s *TransformDBInstancePayTypeRequest) SetOwnerId(v int64) *TransformDBInstancePayTypeRequest {
	s.OwnerId = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetResourceOwnerAccount(v string) *TransformDBInstancePayTypeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetResourceOwnerId(v int64) *TransformDBInstancePayTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetClientToken(v string) *TransformDBInstancePayTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetOwnerAccount(v string) *TransformDBInstancePayTypeRequest {
	s.OwnerAccount = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetDBInstanceId(v string) *TransformDBInstancePayTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetUsedTime(v int32) *TransformDBInstancePayTypeRequest {
	s.UsedTime = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetPayType(v string) *TransformDBInstancePayTypeRequest {
	s.PayType = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetPeriod(v string) *TransformDBInstancePayTypeRequest {
	s.Period = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetBusinessInfo(v string) *TransformDBInstancePayTypeRequest {
	s.BusinessInfo = &v
	return s
}

type TransformDBInstancePayTypeResponseBody struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ExpiredTime  *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	OrderId      *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	ChargeType   *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
}

func (s TransformDBInstancePayTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TransformDBInstancePayTypeResponseBody) GoString() string {
	return s.String()
}

func (s *TransformDBInstancePayTypeResponseBody) SetDBInstanceId(v string) *TransformDBInstancePayTypeResponseBody {
	s.DBInstanceId = &v
	return s
}

func (s *TransformDBInstancePayTypeResponseBody) SetRequestId(v string) *TransformDBInstancePayTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *TransformDBInstancePayTypeResponseBody) SetExpiredTime(v string) *TransformDBInstancePayTypeResponseBody {
	s.ExpiredTime = &v
	return s
}

func (s *TransformDBInstancePayTypeResponseBody) SetOrderId(v int64) *TransformDBInstancePayTypeResponseBody {
	s.OrderId = &v
	return s
}

func (s *TransformDBInstancePayTypeResponseBody) SetChargeType(v string) *TransformDBInstancePayTypeResponseBody {
	s.ChargeType = &v
	return s
}

type TransformDBInstancePayTypeResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TransformDBInstancePayTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TransformDBInstancePayTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s TransformDBInstancePayTypeResponse) GoString() string {
	return s.String()
}

func (s *TransformDBInstancePayTypeResponse) SetHeaders(v map[string]*string) *TransformDBInstancePayTypeResponse {
	s.Headers = v
	return s
}

func (s *TransformDBInstancePayTypeResponse) SetBody(v *TransformDBInstancePayTypeResponseBody) *TransformDBInstancePayTypeResponse {
	s.Body = v
	return s
}

type UnlockAccountRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
}

func (s UnlockAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s UnlockAccountRequest) GoString() string {
	return s.String()
}

func (s *UnlockAccountRequest) SetOwnerId(v int64) *UnlockAccountRequest {
	s.OwnerId = &v
	return s
}

func (s *UnlockAccountRequest) SetResourceOwnerAccount(v string) *UnlockAccountRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnlockAccountRequest) SetResourceOwnerId(v int64) *UnlockAccountRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnlockAccountRequest) SetDBInstanceId(v string) *UnlockAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UnlockAccountRequest) SetAccountName(v string) *UnlockAccountRequest {
	s.AccountName = &v
	return s
}

type UnlockAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnlockAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnlockAccountResponseBody) GoString() string {
	return s.String()
}

func (s *UnlockAccountResponseBody) SetRequestId(v string) *UnlockAccountResponseBody {
	s.RequestId = &v
	return s
}

type UnlockAccountResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnlockAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnlockAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s UnlockAccountResponse) GoString() string {
	return s.String()
}

func (s *UnlockAccountResponse) SetHeaders(v map[string]*string) *UnlockAccountResponse {
	s.Headers = v
	return s
}

func (s *UnlockAccountResponse) SetBody(v *UnlockAccountResponseBody) *UnlockAccountResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	OwnerId              *int64    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string   `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType         *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	All                  *bool     `json:"All,omitempty" xml:"All,omitempty"`
	ResourceId           []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	TagKey               []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetOwnerId(v int64) *UntagResourcesRequest {
	s.OwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerAccount(v string) *UntagResourcesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerId(v int64) *UntagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpdateUserBackupFileRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Comment              *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	Retention            *int32  `json:"Retention,omitempty" xml:"Retention,omitempty"`
}

func (s UpdateUserBackupFileRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserBackupFileRequest) GoString() string {
	return s.String()
}

func (s *UpdateUserBackupFileRequest) SetOwnerId(v int64) *UpdateUserBackupFileRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateUserBackupFileRequest) SetResourceOwnerAccount(v string) *UpdateUserBackupFileRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateUserBackupFileRequest) SetResourceOwnerId(v int64) *UpdateUserBackupFileRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateUserBackupFileRequest) SetBackupId(v string) *UpdateUserBackupFileRequest {
	s.BackupId = &v
	return s
}

func (s *UpdateUserBackupFileRequest) SetRegionId(v string) *UpdateUserBackupFileRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateUserBackupFileRequest) SetComment(v string) *UpdateUserBackupFileRequest {
	s.Comment = &v
	return s
}

func (s *UpdateUserBackupFileRequest) SetRetention(v int32) *UpdateUserBackupFileRequest {
	s.Retention = &v
	return s
}

type UpdateUserBackupFileResponseBody struct {
	BackupId  *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateUserBackupFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserBackupFileResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateUserBackupFileResponseBody) SetBackupId(v string) *UpdateUserBackupFileResponseBody {
	s.BackupId = &v
	return s
}

func (s *UpdateUserBackupFileResponseBody) SetRequestId(v string) *UpdateUserBackupFileResponseBody {
	s.RequestId = &v
	return s
}

type UpdateUserBackupFileResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateUserBackupFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateUserBackupFileResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserBackupFileResponse) GoString() string {
	return s.String()
}

func (s *UpdateUserBackupFileResponse) SetHeaders(v map[string]*string) *UpdateUserBackupFileResponse {
	s.Headers = v
	return s
}

func (s *UpdateUserBackupFileResponse) SetBody(v *UpdateUserBackupFileResponseBody) *UpdateUserBackupFileResponse {
	s.Body = v
	return s
}

type UpgradeDBInstanceEngineVersionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	EffectiveTime        *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
}

func (s UpgradeDBInstanceEngineVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceEngineVersionRequest) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetOwnerId(v int64) *UpgradeDBInstanceEngineVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetResourceOwnerAccount(v string) *UpgradeDBInstanceEngineVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetResourceOwnerId(v int64) *UpgradeDBInstanceEngineVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetClientToken(v string) *UpgradeDBInstanceEngineVersionRequest {
	s.ClientToken = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetDBInstanceId(v string) *UpgradeDBInstanceEngineVersionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetEngineVersion(v string) *UpgradeDBInstanceEngineVersionRequest {
	s.EngineVersion = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetOwnerAccount(v string) *UpgradeDBInstanceEngineVersionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetEffectiveTime(v string) *UpgradeDBInstanceEngineVersionRequest {
	s.EffectiveTime = &v
	return s
}

type UpgradeDBInstanceEngineVersionResponseBody struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeDBInstanceEngineVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceEngineVersionResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceEngineVersionResponseBody) SetTaskId(v string) *UpgradeDBInstanceEngineVersionResponseBody {
	s.TaskId = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionResponseBody) SetRequestId(v string) *UpgradeDBInstanceEngineVersionResponseBody {
	s.RequestId = &v
	return s
}

type UpgradeDBInstanceEngineVersionResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpgradeDBInstanceEngineVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpgradeDBInstanceEngineVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceEngineVersionResponse) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceEngineVersionResponse) SetHeaders(v map[string]*string) *UpgradeDBInstanceEngineVersionResponse {
	s.Headers = v
	return s
}

func (s *UpgradeDBInstanceEngineVersionResponse) SetBody(v *UpgradeDBInstanceEngineVersionResponseBody) *UpgradeDBInstanceEngineVersionResponse {
	s.Body = v
	return s
}

type UpgradeDBInstanceKernelVersionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	UpgradeTime          *string `json:"UpgradeTime,omitempty" xml:"UpgradeTime,omitempty"`
	SwitchTime           *string `json:"SwitchTime,omitempty" xml:"SwitchTime,omitempty"`
	TargetMinorVersion   *string `json:"TargetMinorVersion,omitempty" xml:"TargetMinorVersion,omitempty"`
}

func (s UpgradeDBInstanceKernelVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceKernelVersionRequest) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetOwnerId(v int64) *UpgradeDBInstanceKernelVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetResourceOwnerAccount(v string) *UpgradeDBInstanceKernelVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetResourceOwnerId(v int64) *UpgradeDBInstanceKernelVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetDBInstanceId(v string) *UpgradeDBInstanceKernelVersionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetUpgradeTime(v string) *UpgradeDBInstanceKernelVersionRequest {
	s.UpgradeTime = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetSwitchTime(v string) *UpgradeDBInstanceKernelVersionRequest {
	s.SwitchTime = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetTargetMinorVersion(v string) *UpgradeDBInstanceKernelVersionRequest {
	s.TargetMinorVersion = &v
	return s
}

type UpgradeDBInstanceKernelVersionResponseBody struct {
	DBInstanceName     *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	TargetMinorVersion *string `json:"TargetMinorVersion,omitempty" xml:"TargetMinorVersion,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId             *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpgradeDBInstanceKernelVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceKernelVersionResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceKernelVersionResponseBody) SetDBInstanceName(v string) *UpgradeDBInstanceKernelVersionResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionResponseBody) SetTargetMinorVersion(v string) *UpgradeDBInstanceKernelVersionResponseBody {
	s.TargetMinorVersion = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionResponseBody) SetRequestId(v string) *UpgradeDBInstanceKernelVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionResponseBody) SetTaskId(v string) *UpgradeDBInstanceKernelVersionResponseBody {
	s.TaskId = &v
	return s
}

type UpgradeDBInstanceKernelVersionResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpgradeDBInstanceKernelVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpgradeDBInstanceKernelVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceKernelVersionResponse) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceKernelVersionResponse) SetHeaders(v map[string]*string) *UpgradeDBInstanceKernelVersionResponse {
	s.Headers = v
	return s
}

func (s *UpgradeDBInstanceKernelVersionResponse) SetBody(v *UpgradeDBInstanceKernelVersionResponseBody) *UpgradeDBInstanceKernelVersionResponse {
	s.Body = v
	return s
}

type UpgradeDBProxyInstanceKernelVersionRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	UpgradeTime          *string `json:"UpgradeTime,omitempty" xml:"UpgradeTime,omitempty"`
	SwitchTime           *string `json:"SwitchTime,omitempty" xml:"SwitchTime,omitempty"`
}

func (s UpgradeDBProxyInstanceKernelVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBProxyInstanceKernelVersionRequest) GoString() string {
	return s.String()
}

func (s *UpgradeDBProxyInstanceKernelVersionRequest) SetOwnerId(v int64) *UpgradeDBProxyInstanceKernelVersionRequest {
	s.OwnerId = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionRequest) SetResourceOwnerAccount(v string) *UpgradeDBProxyInstanceKernelVersionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionRequest) SetResourceOwnerId(v int64) *UpgradeDBProxyInstanceKernelVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionRequest) SetDBInstanceId(v string) *UpgradeDBProxyInstanceKernelVersionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionRequest) SetUpgradeTime(v string) *UpgradeDBProxyInstanceKernelVersionRequest {
	s.UpgradeTime = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionRequest) SetSwitchTime(v string) *UpgradeDBProxyInstanceKernelVersionRequest {
	s.SwitchTime = &v
	return s
}

type UpgradeDBProxyInstanceKernelVersionResponseBody struct {
	DBInstanceName *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskId         *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpgradeDBProxyInstanceKernelVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBProxyInstanceKernelVersionResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeDBProxyInstanceKernelVersionResponseBody) SetDBInstanceName(v string) *UpgradeDBProxyInstanceKernelVersionResponseBody {
	s.DBInstanceName = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionResponseBody) SetRequestId(v string) *UpgradeDBProxyInstanceKernelVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionResponseBody) SetTaskId(v string) *UpgradeDBProxyInstanceKernelVersionResponseBody {
	s.TaskId = &v
	return s
}

type UpgradeDBProxyInstanceKernelVersionResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpgradeDBProxyInstanceKernelVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpgradeDBProxyInstanceKernelVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBProxyInstanceKernelVersionResponse) GoString() string {
	return s.String()
}

func (s *UpgradeDBProxyInstanceKernelVersionResponse) SetHeaders(v map[string]*string) *UpgradeDBProxyInstanceKernelVersionResponse {
	s.Headers = v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionResponse) SetBody(v *UpgradeDBProxyInstanceKernelVersionResponseBody) *UpgradeDBProxyInstanceKernelVersionResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":                  tea.String("rds.aliyuncs.com"),
		"cn-beijing":                  tea.String("rds.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("rds.aliyuncs.com"),
		"cn-shanghai":                 tea.String("rds.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("rds.aliyuncs.com"),
		"cn-heyuan":                   tea.String("rds.aliyuncs.com"),
		"cn-hongkong":                 tea.String("rds.aliyuncs.com"),
		"ap-southeast-1":              tea.String("rds.aliyuncs.com"),
		"us-west-1":                   tea.String("rds.aliyuncs.com"),
		"us-east-1":                   tea.String("rds.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("rds.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("rds.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("rds.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("rds.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("rds.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("rds.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("rds.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("rds.aliyuncs.com"),
		"cn-edge-1":                   tea.String("rds.aliyuncs.com"),
		"cn-fujian":                   tea.String("rds.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("rds.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("rds.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("rds.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("rds.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("rds.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("rds.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("rds.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("rds.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("rds.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("rds.aliyuncs.com"),
		"cn-wuhan":                    tea.String("rds.aliyuncs.com"),
		"cn-yushanfang":               tea.String("rds.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("rds.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("rds.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("rds.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("rds.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("rds.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("rds.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("rds"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTagsToResourceWithOptions(request *AddTagsToResourceRequest, runtime *util.RuntimeOptions) (_result *AddTagsToResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddTagsToResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddTagsToResource"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTagsToResource(request *AddTagsToResourceRequest) (_result *AddTagsToResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTagsToResourceResponse{}
	_body, _err := client.AddTagsToResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateInstancePublicConnectionWithOptions(request *AllocateInstancePublicConnectionRequest, runtime *util.RuntimeOptions) (_result *AllocateInstancePublicConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AllocateInstancePublicConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AllocateInstancePublicConnection"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateInstancePublicConnection(request *AllocateInstancePublicConnectionRequest) (_result *AllocateInstancePublicConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateInstancePublicConnectionResponse{}
	_body, _err := client.AllocateInstancePublicConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateReadWriteSplittingConnectionWithOptions(request *AllocateReadWriteSplittingConnectionRequest, runtime *util.RuntimeOptions) (_result *AllocateReadWriteSplittingConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AllocateReadWriteSplittingConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AllocateReadWriteSplittingConnection"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateReadWriteSplittingConnection(request *AllocateReadWriteSplittingConnectionRequest) (_result *AllocateReadWriteSplittingConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateReadWriteSplittingConnectionResponse{}
	_body, _err := client.AllocateReadWriteSplittingConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CalculateDBInstanceWeightWithOptions(request *CalculateDBInstanceWeightRequest, runtime *util.RuntimeOptions) (_result *CalculateDBInstanceWeightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CalculateDBInstanceWeightResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CalculateDBInstanceWeight"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CalculateDBInstanceWeight(request *CalculateDBInstanceWeightRequest) (_result *CalculateDBInstanceWeightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CalculateDBInstanceWeightResponse{}
	_body, _err := client.CalculateDBInstanceWeightWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelImportWithOptions(request *CancelImportRequest, runtime *util.RuntimeOptions) (_result *CancelImportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelImportResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelImport"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelImport(request *CancelImportRequest) (_result *CancelImportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelImportResponse{}
	_body, _err := client.CancelImportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckAccountNameAvailableWithOptions(request *CheckAccountNameAvailableRequest, runtime *util.RuntimeOptions) (_result *CheckAccountNameAvailableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CheckAccountNameAvailableResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CheckAccountNameAvailable"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckAccountNameAvailable(request *CheckAccountNameAvailableRequest) (_result *CheckAccountNameAvailableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckAccountNameAvailableResponse{}
	_body, _err := client.CheckAccountNameAvailableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckCloudResourceAuthorizedWithOptions(request *CheckCloudResourceAuthorizedRequest, runtime *util.RuntimeOptions) (_result *CheckCloudResourceAuthorizedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CheckCloudResourceAuthorizedResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CheckCloudResourceAuthorized"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckCloudResourceAuthorized(request *CheckCloudResourceAuthorizedRequest) (_result *CheckCloudResourceAuthorizedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckCloudResourceAuthorizedResponse{}
	_body, _err := client.CheckCloudResourceAuthorizedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckCreateDdrDBInstanceWithOptions(request *CheckCreateDdrDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CheckCreateDdrDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CheckCreateDdrDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CheckCreateDdrDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckCreateDdrDBInstance(request *CheckCreateDdrDBInstanceRequest) (_result *CheckCreateDdrDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckCreateDdrDBInstanceResponse{}
	_body, _err := client.CheckCreateDdrDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckDBNameAvailableWithOptions(request *CheckDBNameAvailableRequest, runtime *util.RuntimeOptions) (_result *CheckDBNameAvailableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CheckDBNameAvailableResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CheckDBNameAvailable"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckDBNameAvailable(request *CheckDBNameAvailableRequest) (_result *CheckDBNameAvailableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckDBNameAvailableResponse{}
	_body, _err := client.CheckDBNameAvailableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckInstanceExistWithOptions(request *CheckInstanceExistRequest, runtime *util.RuntimeOptions) (_result *CheckInstanceExistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CheckInstanceExistResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CheckInstanceExist"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckInstanceExist(request *CheckInstanceExistRequest) (_result *CheckInstanceExistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckInstanceExistResponse{}
	_body, _err := client.CheckInstanceExistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ClearDedicatedHostWithOptions(request *ClearDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *ClearDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ClearDedicatedHostResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ClearDedicatedHost"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ClearDedicatedHost(request *ClearDedicatedHostRequest) (_result *ClearDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClearDedicatedHostResponse{}
	_body, _err := client.ClearDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloneDBInstanceWithOptions(request *CloneDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CloneDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CloneDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CloneDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloneDBInstance(request *CloneDBInstanceRequest) (_result *CloneDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloneDBInstanceResponse{}
	_body, _err := client.CloneDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloneParameterGroupWithOptions(request *CloneParameterGroupRequest, runtime *util.RuntimeOptions) (_result *CloneParameterGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CloneParameterGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CloneParameterGroup"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloneParameterGroup(request *CloneParameterGroupRequest) (_result *CloneParameterGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloneParameterGroupResponse{}
	_body, _err := client.CloneParameterGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyDatabaseWithOptions(request *CopyDatabaseRequest, runtime *util.RuntimeOptions) (_result *CopyDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CopyDatabaseResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CopyDatabase"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyDatabase(request *CopyDatabaseRequest) (_result *CopyDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyDatabaseResponse{}
	_body, _err := client.CopyDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyDatabaseBetweenInstancesWithOptions(request *CopyDatabaseBetweenInstancesRequest, runtime *util.RuntimeOptions) (_result *CopyDatabaseBetweenInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CopyDatabaseBetweenInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CopyDatabaseBetweenInstances"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyDatabaseBetweenInstances(request *CopyDatabaseBetweenInstancesRequest) (_result *CopyDatabaseBetweenInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyDatabaseBetweenInstancesResponse{}
	_body, _err := client.CopyDatabaseBetweenInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAccountWithOptions(request *CreateAccountRequest, runtime *util.RuntimeOptions) (_result *CreateAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateAccountResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateAccount"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAccount(request *CreateAccountRequest) (_result *CreateAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAccountResponse{}
	_body, _err := client.CreateAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBackupWithOptions(request *CreateBackupRequest, runtime *util.RuntimeOptions) (_result *CreateBackupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateBackupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateBackup"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBackup(request *CreateBackupRequest) (_result *CreateBackupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackupResponse{}
	_body, _err := client.CreateBackupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDatabaseWithOptions(request *CreateDatabaseRequest, runtime *util.RuntimeOptions) (_result *CreateDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDatabaseResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDatabase"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDatabase(request *CreateDatabaseRequest) (_result *CreateDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDatabaseResponse{}
	_body, _err := client.CreateDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDBInstanceWithOptions(request *CreateDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDBInstance(request *CreateDBInstanceRequest) (_result *CreateDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDBInstanceResponse{}
	_body, _err := client.CreateDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDBProxyEndpointAddressWithOptions(request *CreateDBProxyEndpointAddressRequest, runtime *util.RuntimeOptions) (_result *CreateDBProxyEndpointAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDBProxyEndpointAddressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDBProxyEndpointAddress"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDBProxyEndpointAddress(request *CreateDBProxyEndpointAddressRequest) (_result *CreateDBProxyEndpointAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDBProxyEndpointAddressResponse{}
	_body, _err := client.CreateDBProxyEndpointAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDdrInstanceWithOptions(request *CreateDdrInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateDdrInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDdrInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDdrInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDdrInstance(request *CreateDdrInstanceRequest) (_result *CreateDdrInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDdrInstanceResponse{}
	_body, _err := client.CreateDdrInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedHostWithOptions(request *CreateDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDedicatedHostResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDedicatedHost"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedHost(request *CreateDedicatedHostRequest) (_result *CreateDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedHostResponse{}
	_body, _err := client.CreateDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedHostAccountWithOptions(request *CreateDedicatedHostAccountRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDedicatedHostAccountResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDedicatedHostAccount"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedHostAccount(request *CreateDedicatedHostAccountRequest) (_result *CreateDedicatedHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedHostAccountResponse{}
	_body, _err := client.CreateDedicatedHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedHostGroupWithOptions(request *CreateDedicatedHostGroupRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDedicatedHostGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDedicatedHostGroup"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedHostGroup(request *CreateDedicatedHostGroupRequest) (_result *CreateDedicatedHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedHostGroupResponse{}
	_body, _err := client.CreateDedicatedHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedHostUserWithOptions(request *CreateDedicatedHostUserRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedHostUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDedicatedHostUserResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDedicatedHostUser"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedHostUser(request *CreateDedicatedHostUserRequest) (_result *CreateDedicatedHostUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedHostUserResponse{}
	_body, _err := client.CreateDedicatedHostUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDiagnosticReportWithOptions(request *CreateDiagnosticReportRequest, runtime *util.RuntimeOptions) (_result *CreateDiagnosticReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDiagnosticReportResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDiagnosticReport"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDiagnosticReport(request *CreateDiagnosticReportRequest) (_result *CreateDiagnosticReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiagnosticReportResponse{}
	_body, _err := client.CreateDiagnosticReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateGdnInstanceWithOptions(request *CreateGdnInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateGdnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateGdnInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateGdnInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateGdnInstance(request *CreateGdnInstanceRequest) (_result *CreateGdnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateGdnInstanceResponse{}
	_body, _err := client.CreateGdnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMigrateTaskWithOptions(request *CreateMigrateTaskRequest, runtime *util.RuntimeOptions) (_result *CreateMigrateTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateMigrateTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateMigrateTask"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMigrateTask(request *CreateMigrateTaskRequest) (_result *CreateMigrateTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMigrateTaskResponse{}
	_body, _err := client.CreateMigrateTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMigrateTaskForSQLServerWithOptions(request *CreateMigrateTaskForSQLServerRequest, runtime *util.RuntimeOptions) (_result *CreateMigrateTaskForSQLServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateMigrateTaskForSQLServerResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateMigrateTaskForSQLServer"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMigrateTaskForSQLServer(request *CreateMigrateTaskForSQLServerRequest) (_result *CreateMigrateTaskForSQLServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMigrateTaskForSQLServerResponse{}
	_body, _err := client.CreateMigrateTaskForSQLServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOnlineDatabaseTaskWithOptions(request *CreateOnlineDatabaseTaskRequest, runtime *util.RuntimeOptions) (_result *CreateOnlineDatabaseTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateOnlineDatabaseTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateOnlineDatabaseTask"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOnlineDatabaseTask(request *CreateOnlineDatabaseTaskRequest) (_result *CreateOnlineDatabaseTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOnlineDatabaseTaskResponse{}
	_body, _err := client.CreateOnlineDatabaseTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateParameterGroupWithOptions(request *CreateParameterGroupRequest, runtime *util.RuntimeOptions) (_result *CreateParameterGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateParameterGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateParameterGroup"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateParameterGroup(request *CreateParameterGroupRequest) (_result *CreateParameterGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateParameterGroupResponse{}
	_body, _err := client.CreateParameterGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateReadOnlyDBInstanceWithOptions(request *CreateReadOnlyDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateReadOnlyDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateReadOnlyDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateReadOnlyDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateReadOnlyDBInstance(request *CreateReadOnlyDBInstanceRequest) (_result *CreateReadOnlyDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateReadOnlyDBInstanceResponse{}
	_body, _err := client.CreateReadOnlyDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTempDBInstanceWithOptions(request *CreateTempDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateTempDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateTempDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateTempDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTempDBInstance(request *CreateTempDBInstanceRequest) (_result *CreateTempDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTempDBInstanceResponse{}
	_body, _err := client.CreateTempDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAccountWithOptions(request *DeleteAccountRequest, runtime *util.RuntimeOptions) (_result *DeleteAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteAccountResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteAccount"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAccount(request *DeleteAccountRequest) (_result *DeleteAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAccountResponse{}
	_body, _err := client.DeleteAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBackupWithOptions(request *DeleteBackupRequest, runtime *util.RuntimeOptions) (_result *DeleteBackupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteBackupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteBackup"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBackup(request *DeleteBackupRequest) (_result *DeleteBackupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackupResponse{}
	_body, _err := client.DeleteBackupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBackupFileWithOptions(request *DeleteBackupFileRequest, runtime *util.RuntimeOptions) (_result *DeleteBackupFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteBackupFileResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteBackupFile"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBackupFile(request *DeleteBackupFileRequest) (_result *DeleteBackupFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackupFileResponse{}
	_body, _err := client.DeleteBackupFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDatabaseWithOptions(request *DeleteDatabaseRequest, runtime *util.RuntimeOptions) (_result *DeleteDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDatabaseResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDatabase"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDatabase(request *DeleteDatabaseRequest) (_result *DeleteDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatabaseResponse{}
	_body, _err := client.DeleteDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDBInstanceWithOptions(request *DeleteDBInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDBInstance(request *DeleteDBInstanceRequest) (_result *DeleteDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDBInstanceResponse{}
	_body, _err := client.DeleteDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDBProxyEndpointAddressWithOptions(request *DeleteDBProxyEndpointAddressRequest, runtime *util.RuntimeOptions) (_result *DeleteDBProxyEndpointAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDBProxyEndpointAddressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDBProxyEndpointAddress"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDBProxyEndpointAddress(request *DeleteDBProxyEndpointAddressRequest) (_result *DeleteDBProxyEndpointAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDBProxyEndpointAddressResponse{}
	_body, _err := client.DeleteDBProxyEndpointAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDedicatedHostAccountWithOptions(request *DeleteDedicatedHostAccountRequest, runtime *util.RuntimeOptions) (_result *DeleteDedicatedHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDedicatedHostAccountResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDedicatedHostAccount"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDedicatedHostAccount(request *DeleteDedicatedHostAccountRequest) (_result *DeleteDedicatedHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDedicatedHostAccountResponse{}
	_body, _err := client.DeleteDedicatedHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDedicatedHostGroupWithOptions(request *DeleteDedicatedHostGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteDedicatedHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteDedicatedHostGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteDedicatedHostGroup"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDedicatedHostGroup(request *DeleteDedicatedHostGroupRequest) (_result *DeleteDedicatedHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDedicatedHostGroupResponse{}
	_body, _err := client.DeleteDedicatedHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteParameterGroupWithOptions(request *DeleteParameterGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteParameterGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteParameterGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteParameterGroup"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteParameterGroup(request *DeleteParameterGroupRequest) (_result *DeleteParameterGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteParameterGroupResponse{}
	_body, _err := client.DeleteParameterGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteUserBackupFileWithOptions(request *DeleteUserBackupFileRequest, runtime *util.RuntimeOptions) (_result *DeleteUserBackupFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteUserBackupFileResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteUserBackupFile"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteUserBackupFile(request *DeleteUserBackupFileRequest) (_result *DeleteUserBackupFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteUserBackupFileResponse{}
	_body, _err := client.DeleteUserBackupFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescibeImportsFromDatabaseWithOptions(request *DescibeImportsFromDatabaseRequest, runtime *util.RuntimeOptions) (_result *DescibeImportsFromDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescibeImportsFromDatabaseResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescibeImportsFromDatabase"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescibeImportsFromDatabase(request *DescibeImportsFromDatabaseRequest) (_result *DescibeImportsFromDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescibeImportsFromDatabaseResponse{}
	_body, _err := client.DescibeImportsFromDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccountsWithOptions(request *DescribeAccountsRequest, runtime *util.RuntimeOptions) (_result *DescribeAccountsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAccountsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAccounts"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccounts(request *DescribeAccountsRequest) (_result *DescribeAccountsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccountsResponse{}
	_body, _err := client.DescribeAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeActionEventPolicyWithOptions(request *DescribeActionEventPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeActionEventPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeActionEventPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeActionEventPolicy"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeActionEventPolicy(request *DescribeActionEventPolicyRequest) (_result *DescribeActionEventPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeActionEventPolicyResponse{}
	_body, _err := client.DescribeActionEventPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableClassesWithOptions(request *DescribeAvailableClassesRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableClassesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAvailableClassesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAvailableClasses"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableClasses(request *DescribeAvailableClassesRequest) (_result *DescribeAvailableClassesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableClassesResponse{}
	_body, _err := client.DescribeAvailableClassesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableCrossRegionWithOptions(request *DescribeAvailableCrossRegionRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableCrossRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAvailableCrossRegionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAvailableCrossRegion"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableCrossRegion(request *DescribeAvailableCrossRegionRequest) (_result *DescribeAvailableCrossRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableCrossRegionResponse{}
	_body, _err := client.DescribeAvailableCrossRegionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableDedicatedHostClassesWithOptions(request *DescribeAvailableDedicatedHostClassesRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableDedicatedHostClassesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAvailableDedicatedHostClassesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAvailableDedicatedHostClasses"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableDedicatedHostClasses(request *DescribeAvailableDedicatedHostClassesRequest) (_result *DescribeAvailableDedicatedHostClassesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableDedicatedHostClassesResponse{}
	_body, _err := client.DescribeAvailableDedicatedHostClassesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableDedicatedHostZonesWithOptions(request *DescribeAvailableDedicatedHostZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableDedicatedHostZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAvailableDedicatedHostZonesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAvailableDedicatedHostZones"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableDedicatedHostZones(request *DescribeAvailableDedicatedHostZonesRequest) (_result *DescribeAvailableDedicatedHostZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableDedicatedHostZonesResponse{}
	_body, _err := client.DescribeAvailableDedicatedHostZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableRecoveryTimeWithOptions(request *DescribeAvailableRecoveryTimeRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableRecoveryTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAvailableRecoveryTimeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAvailableRecoveryTime"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableRecoveryTime(request *DescribeAvailableRecoveryTimeRequest) (_result *DescribeAvailableRecoveryTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableRecoveryTimeResponse{}
	_body, _err := client.DescribeAvailableRecoveryTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableResourceWithOptions(request *DescribeAvailableResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAvailableResource"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableResource(request *DescribeAvailableResourceRequest) (_result *DescribeAvailableResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.DescribeAvailableResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableZonesWithOptions(request *DescribeAvailableZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeAvailableZonesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeAvailableZones"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableZones(request *DescribeAvailableZonesRequest) (_result *DescribeAvailableZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableZonesResponse{}
	_body, _err := client.DescribeAvailableZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupDatabaseWithOptions(request *DescribeBackupDatabaseRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeBackupDatabaseResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeBackupDatabase"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupDatabase(request *DescribeBackupDatabaseRequest) (_result *DescribeBackupDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupDatabaseResponse{}
	_body, _err := client.DescribeBackupDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupPolicyWithOptions(request *DescribeBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeBackupPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeBackupPolicy"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupPolicy(request *DescribeBackupPolicyRequest) (_result *DescribeBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupPolicyResponse{}
	_body, _err := client.DescribeBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupsWithOptions(request *DescribeBackupsRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeBackupsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeBackups"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackups(request *DescribeBackupsRequest) (_result *DescribeBackupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupsResponse{}
	_body, _err := client.DescribeBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupTasksWithOptions(request *DescribeBackupTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeBackupTasksResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeBackupTasks"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupTasks(request *DescribeBackupTasksRequest) (_result *DescribeBackupTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupTasksResponse{}
	_body, _err := client.DescribeBackupTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBinlogFilesWithOptions(request *DescribeBinlogFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeBinlogFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeBinlogFilesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeBinlogFiles"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBinlogFiles(request *DescribeBinlogFilesRequest) (_result *DescribeBinlogFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBinlogFilesResponse{}
	_body, _err := client.DescribeBinlogFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCharacterSetNameWithOptions(request *DescribeCharacterSetNameRequest, runtime *util.RuntimeOptions) (_result *DescribeCharacterSetNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCharacterSetNameResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCharacterSetName"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCharacterSetName(request *DescribeCharacterSetNameRequest) (_result *DescribeCharacterSetNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCharacterSetNameResponse{}
	_body, _err := client.DescribeCharacterSetNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCollationTimeZonesWithOptions(request *DescribeCollationTimeZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeCollationTimeZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCollationTimeZonesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCollationTimeZones"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCollationTimeZones(request *DescribeCollationTimeZonesRequest) (_result *DescribeCollationTimeZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCollationTimeZonesResponse{}
	_body, _err := client.DescribeCollationTimeZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCrossBackupMetaListWithOptions(request *DescribeCrossBackupMetaListRequest, runtime *util.RuntimeOptions) (_result *DescribeCrossBackupMetaListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCrossBackupMetaListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCrossBackupMetaList"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCrossBackupMetaList(request *DescribeCrossBackupMetaListRequest) (_result *DescribeCrossBackupMetaListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCrossBackupMetaListResponse{}
	_body, _err := client.DescribeCrossBackupMetaListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCrossRegionBackupDBInstanceWithOptions(request *DescribeCrossRegionBackupDBInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeCrossRegionBackupDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCrossRegionBackupDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCrossRegionBackupDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCrossRegionBackupDBInstance(request *DescribeCrossRegionBackupDBInstanceRequest) (_result *DescribeCrossRegionBackupDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCrossRegionBackupDBInstanceResponse{}
	_body, _err := client.DescribeCrossRegionBackupDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCrossRegionBackupsWithOptions(request *DescribeCrossRegionBackupsRequest, runtime *util.RuntimeOptions) (_result *DescribeCrossRegionBackupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCrossRegionBackupsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCrossRegionBackups"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCrossRegionBackups(request *DescribeCrossRegionBackupsRequest) (_result *DescribeCrossRegionBackupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCrossRegionBackupsResponse{}
	_body, _err := client.DescribeCrossRegionBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCrossRegionLogBackupFilesWithOptions(request *DescribeCrossRegionLogBackupFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeCrossRegionLogBackupFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeCrossRegionLogBackupFilesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeCrossRegionLogBackupFiles"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCrossRegionLogBackupFiles(request *DescribeCrossRegionLogBackupFilesRequest) (_result *DescribeCrossRegionLogBackupFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCrossRegionLogBackupFilesResponse{}
	_body, _err := client.DescribeCrossRegionLogBackupFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDatabasesWithOptions(request *DescribeDatabasesRequest, runtime *util.RuntimeOptions) (_result *DescribeDatabasesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDatabasesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDatabases"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDatabases(request *DescribeDatabasesRequest) (_result *DescribeDatabasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatabasesResponse{}
	_body, _err := client.DescribeDatabasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceAttributeWithOptions(request *DescribeDBInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceAttribute"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceAttribute(request *DescribeDBInstanceAttributeRequest) (_result *DescribeDBInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceAttributeResponse{}
	_body, _err := client.DescribeDBInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceDetailWithOptions(request *DescribeDBInstanceDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceDetailResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceDetail"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceDetail(request *DescribeDBInstanceDetailRequest) (_result *DescribeDBInstanceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceDetailResponse{}
	_body, _err := client.DescribeDBInstanceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceEncryptionKeyWithOptions(request *DescribeDBInstanceEncryptionKeyRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceEncryptionKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceEncryptionKeyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceEncryptionKey"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceEncryptionKey(request *DescribeDBInstanceEncryptionKeyRequest) (_result *DescribeDBInstanceEncryptionKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceEncryptionKeyResponse{}
	_body, _err := client.DescribeDBInstanceEncryptionKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceHAConfigWithOptions(request *DescribeDBInstanceHAConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceHAConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceHAConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceHAConfig"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceHAConfig(request *DescribeDBInstanceHAConfigRequest) (_result *DescribeDBInstanceHAConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceHAConfigResponse{}
	_body, _err := client.DescribeDBInstanceHAConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceIPArrayListWithOptions(request *DescribeDBInstanceIPArrayListRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceIPArrayListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceIPArrayListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceIPArrayList"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceIPArrayList(request *DescribeDBInstanceIPArrayListRequest) (_result *DescribeDBInstanceIPArrayListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceIPArrayListResponse{}
	_body, _err := client.DescribeDBInstanceIPArrayListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceIpHostnameWithOptions(request *DescribeDBInstanceIpHostnameRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceIpHostnameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceIpHostnameResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceIpHostname"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceIpHostname(request *DescribeDBInstanceIpHostnameRequest) (_result *DescribeDBInstanceIpHostnameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceIpHostnameResponse{}
	_body, _err := client.DescribeDBInstanceIpHostnameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceMonitorWithOptions(request *DescribeDBInstanceMonitorRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceMonitorResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceMonitor"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceMonitor(request *DescribeDBInstanceMonitorRequest) (_result *DescribeDBInstanceMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceMonitorResponse{}
	_body, _err := client.DescribeDBInstanceMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceNetInfoWithOptions(request *DescribeDBInstanceNetInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceNetInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceNetInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceNetInfo"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceNetInfo(request *DescribeDBInstanceNetInfoRequest) (_result *DescribeDBInstanceNetInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceNetInfoResponse{}
	_body, _err := client.DescribeDBInstanceNetInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancePerformanceWithOptions(request *DescribeDBInstancePerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancePerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstancePerformanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstancePerformance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancePerformance(request *DescribeDBInstancePerformanceRequest) (_result *DescribeDBInstancePerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancePerformanceResponse{}
	_body, _err := client.DescribeDBInstancePerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceProxyConfigurationWithOptions(request *DescribeDBInstanceProxyConfigurationRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceProxyConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceProxyConfigurationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceProxyConfiguration"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceProxyConfiguration(request *DescribeDBInstanceProxyConfigurationRequest) (_result *DescribeDBInstanceProxyConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceProxyConfigurationResponse{}
	_body, _err := client.DescribeDBInstanceProxyConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesWithOptions(request *DescribeDBInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstances"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstances(request *DescribeDBInstancesRequest) (_result *DescribeDBInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesResponse{}
	_body, _err := client.DescribeDBInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesAsCsvWithOptions(request *DescribeDBInstancesAsCsvRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesAsCsvResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstancesAsCsvResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstancesAsCsv"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancesAsCsv(request *DescribeDBInstancesAsCsvRequest) (_result *DescribeDBInstancesAsCsvResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesAsCsvResponse{}
	_body, _err := client.DescribeDBInstancesAsCsvWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesByExpireTimeWithOptions(request *DescribeDBInstancesByExpireTimeRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesByExpireTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstancesByExpireTimeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstancesByExpireTime"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancesByExpireTime(request *DescribeDBInstancesByExpireTimeRequest) (_result *DescribeDBInstancesByExpireTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesByExpireTimeResponse{}
	_body, _err := client.DescribeDBInstancesByExpireTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesByPerformanceWithOptions(request *DescribeDBInstancesByPerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesByPerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstancesByPerformanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstancesByPerformance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancesByPerformance(request *DescribeDBInstancesByPerformanceRequest) (_result *DescribeDBInstancesByPerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesByPerformanceResponse{}
	_body, _err := client.DescribeDBInstancesByPerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesForCloneWithOptions(request *DescribeDBInstancesForCloneRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesForCloneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstancesForCloneResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstancesForClone"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancesForClone(request *DescribeDBInstancesForCloneRequest) (_result *DescribeDBInstancesForCloneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesForCloneResponse{}
	_body, _err := client.DescribeDBInstancesForCloneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceSSLWithOptions(request *DescribeDBInstanceSSLRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceSSLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceSSLResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceSSL"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceSSL(request *DescribeDBInstanceSSLRequest) (_result *DescribeDBInstanceSSLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceSSLResponse{}
	_body, _err := client.DescribeDBInstanceSSLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceTDEWithOptions(request *DescribeDBInstanceTDERequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceTDEResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBInstanceTDEResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBInstanceTDE"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceTDE(request *DescribeDBInstanceTDERequest) (_result *DescribeDBInstanceTDEResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceTDEResponse{}
	_body, _err := client.DescribeDBInstanceTDEWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBProxyWithOptions(request *DescribeDBProxyRequest, runtime *util.RuntimeOptions) (_result *DescribeDBProxyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBProxyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBProxy"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBProxy(request *DescribeDBProxyRequest) (_result *DescribeDBProxyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBProxyResponse{}
	_body, _err := client.DescribeDBProxyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBProxyEndpointWithOptions(request *DescribeDBProxyEndpointRequest, runtime *util.RuntimeOptions) (_result *DescribeDBProxyEndpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBProxyEndpointResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBProxyEndpoint"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBProxyEndpoint(request *DescribeDBProxyEndpointRequest) (_result *DescribeDBProxyEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBProxyEndpointResponse{}
	_body, _err := client.DescribeDBProxyEndpointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBProxyPerformanceWithOptions(request *DescribeDBProxyPerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDBProxyPerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDBProxyPerformanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDBProxyPerformance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBProxyPerformance(request *DescribeDBProxyPerformanceRequest) (_result *DescribeDBProxyPerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBProxyPerformanceResponse{}
	_body, _err := client.DescribeDBProxyPerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostAttributeWithOptions(request *DescribeDedicatedHostAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDedicatedHostAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDedicatedHostAttribute"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostAttribute(request *DescribeDedicatedHostAttributeRequest) (_result *DescribeDedicatedHostAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostAttributeResponse{}
	_body, _err := client.DescribeDedicatedHostAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostGroupsWithOptions(request *DescribeDedicatedHostGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDedicatedHostGroupsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDedicatedHostGroups"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostGroups(request *DescribeDedicatedHostGroupsRequest) (_result *DescribeDedicatedHostGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostGroupsResponse{}
	_body, _err := client.DescribeDedicatedHostGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostImageCategoriesWithOptions(request *DescribeDedicatedHostImageCategoriesRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostImageCategoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDedicatedHostImageCategoriesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDedicatedHostImageCategories"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostImageCategories(request *DescribeDedicatedHostImageCategoriesRequest) (_result *DescribeDedicatedHostImageCategoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostImageCategoriesResponse{}
	_body, _err := client.DescribeDedicatedHostImageCategoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostsWithOptions(request *DescribeDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDedicatedHostsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDedicatedHosts"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHosts(request *DescribeDedicatedHostsRequest) (_result *DescribeDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostsResponse{}
	_body, _err := client.DescribeDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDetachedBackupsWithOptions(request *DescribeDetachedBackupsRequest, runtime *util.RuntimeOptions) (_result *DescribeDetachedBackupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDetachedBackupsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDetachedBackups"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDetachedBackups(request *DescribeDetachedBackupsRequest) (_result *DescribeDetachedBackupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDetachedBackupsResponse{}
	_body, _err := client.DescribeDetachedBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDiagnosticReportListWithOptions(request *DescribeDiagnosticReportListRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnosticReportListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDiagnosticReportListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDiagnosticReportList"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDiagnosticReportList(request *DescribeDiagnosticReportListRequest) (_result *DescribeDiagnosticReportListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnosticReportListResponse{}
	_body, _err := client.DescribeDiagnosticReportListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDTCSecurityIpHostsForSQLServerWithOptions(request *DescribeDTCSecurityIpHostsForSQLServerRequest, runtime *util.RuntimeOptions) (_result *DescribeDTCSecurityIpHostsForSQLServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDTCSecurityIpHostsForSQLServerResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDTCSecurityIpHostsForSQLServer"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDTCSecurityIpHostsForSQLServer(request *DescribeDTCSecurityIpHostsForSQLServerRequest) (_result *DescribeDTCSecurityIpHostsForSQLServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDTCSecurityIpHostsForSQLServerResponse{}
	_body, _err := client.DescribeDTCSecurityIpHostsForSQLServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeErrorLogsWithOptions(request *DescribeErrorLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeErrorLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeErrorLogsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeErrorLogs"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeErrorLogs(request *DescribeErrorLogsRequest) (_result *DescribeErrorLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeErrorLogsResponse{}
	_body, _err := client.DescribeErrorLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEventsWithOptions(request *DescribeEventsRequest, runtime *util.RuntimeOptions) (_result *DescribeEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeEventsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeEvents"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEvents(request *DescribeEventsRequest) (_result *DescribeEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventsResponse{}
	_body, _err := client.DescribeEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHADiagnoseConfigWithOptions(request *DescribeHADiagnoseConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeHADiagnoseConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeHADiagnoseConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeHADiagnoseConfig"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHADiagnoseConfig(request *DescribeHADiagnoseConfigRequest) (_result *DescribeHADiagnoseConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHADiagnoseConfigResponse{}
	_body, _err := client.DescribeHADiagnoseConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHASwitchConfigWithOptions(request *DescribeHASwitchConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeHASwitchConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeHASwitchConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeHASwitchConfig"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHASwitchConfig(request *DescribeHASwitchConfigRequest) (_result *DescribeHASwitchConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHASwitchConfigResponse{}
	_body, _err := client.DescribeHASwitchConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewalAttributeWithOptions(request *DescribeInstanceAutoRenewalAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAutoRenewalAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceAutoRenewalAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceAutoRenewalAttribute"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewalAttribute(request *DescribeInstanceAutoRenewalAttributeRequest) (_result *DescribeInstanceAutoRenewalAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAutoRenewalAttributeResponse{}
	_body, _err := client.DescribeInstanceAutoRenewalAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceCrossBackupPolicyWithOptions(request *DescribeInstanceCrossBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceCrossBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceCrossBackupPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceCrossBackupPolicy"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceCrossBackupPolicy(request *DescribeInstanceCrossBackupPolicyRequest) (_result *DescribeInstanceCrossBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceCrossBackupPolicyResponse{}
	_body, _err := client.DescribeInstanceCrossBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceKeywordsWithOptions(request *DescribeInstanceKeywordsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceKeywordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeInstanceKeywordsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeInstanceKeywords"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceKeywords(request *DescribeInstanceKeywordsRequest) (_result *DescribeInstanceKeywordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceKeywordsResponse{}
	_body, _err := client.DescribeInstanceKeywordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLocalAvailableRecoveryTimeWithOptions(request *DescribeLocalAvailableRecoveryTimeRequest, runtime *util.RuntimeOptions) (_result *DescribeLocalAvailableRecoveryTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLocalAvailableRecoveryTimeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLocalAvailableRecoveryTime"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLocalAvailableRecoveryTime(request *DescribeLocalAvailableRecoveryTimeRequest) (_result *DescribeLocalAvailableRecoveryTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLocalAvailableRecoveryTimeResponse{}
	_body, _err := client.DescribeLocalAvailableRecoveryTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLogBackupFilesWithOptions(request *DescribeLogBackupFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeLogBackupFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLogBackupFilesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLogBackupFiles"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLogBackupFiles(request *DescribeLogBackupFilesRequest) (_result *DescribeLogBackupFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLogBackupFilesResponse{}
	_body, _err := client.DescribeLogBackupFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMetaListWithOptions(request *DescribeMetaListRequest, runtime *util.RuntimeOptions) (_result *DescribeMetaListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeMetaListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeMetaList"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMetaList(request *DescribeMetaListRequest) (_result *DescribeMetaListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetaListResponse{}
	_body, _err := client.DescribeMetaListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrateTaskByIdWithOptions(request *DescribeMigrateTaskByIdRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrateTaskByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeMigrateTaskByIdResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeMigrateTaskById"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrateTaskById(request *DescribeMigrateTaskByIdRequest) (_result *DescribeMigrateTaskByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrateTaskByIdResponse{}
	_body, _err := client.DescribeMigrateTaskByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrateTasksWithOptions(request *DescribeMigrateTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrateTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeMigrateTasksResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeMigrateTasks"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrateTasks(request *DescribeMigrateTasksRequest) (_result *DescribeMigrateTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrateTasksResponse{}
	_body, _err := client.DescribeMigrateTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrateTasksForSQLServerWithOptions(request *DescribeMigrateTasksForSQLServerRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrateTasksForSQLServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeMigrateTasksForSQLServerResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeMigrateTasksForSQLServer"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrateTasksForSQLServer(request *DescribeMigrateTasksForSQLServerRequest) (_result *DescribeMigrateTasksForSQLServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrateTasksForSQLServerResponse{}
	_body, _err := client.DescribeMigrateTasksForSQLServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeModifyParameterLogWithOptions(request *DescribeModifyParameterLogRequest, runtime *util.RuntimeOptions) (_result *DescribeModifyParameterLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeModifyParameterLogResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeModifyParameterLog"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeModifyParameterLog(request *DescribeModifyParameterLogRequest) (_result *DescribeModifyParameterLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeModifyParameterLogResponse{}
	_body, _err := client.DescribeModifyParameterLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOssDownloadsWithOptions(request *DescribeOssDownloadsRequest, runtime *util.RuntimeOptions) (_result *DescribeOssDownloadsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeOssDownloadsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeOssDownloads"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOssDownloads(request *DescribeOssDownloadsRequest) (_result *DescribeOssDownloadsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOssDownloadsResponse{}
	_body, _err := client.DescribeOssDownloadsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOssDownloadsForSQLServerWithOptions(request *DescribeOssDownloadsForSQLServerRequest, runtime *util.RuntimeOptions) (_result *DescribeOssDownloadsForSQLServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeOssDownloadsForSQLServerResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeOssDownloadsForSQLServer"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOssDownloadsForSQLServer(request *DescribeOssDownloadsForSQLServerRequest) (_result *DescribeOssDownloadsForSQLServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOssDownloadsForSQLServerResponse{}
	_body, _err := client.DescribeOssDownloadsForSQLServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeParameterGroupWithOptions(request *DescribeParameterGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeParameterGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeParameterGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeParameterGroup"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeParameterGroup(request *DescribeParameterGroupRequest) (_result *DescribeParameterGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParameterGroupResponse{}
	_body, _err := client.DescribeParameterGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeParameterGroupsWithOptions(request *DescribeParameterGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeParameterGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeParameterGroupsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeParameterGroups"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeParameterGroups(request *DescribeParameterGroupsRequest) (_result *DescribeParameterGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParameterGroupsResponse{}
	_body, _err := client.DescribeParameterGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeParametersWithOptions(request *DescribeParametersRequest, runtime *util.RuntimeOptions) (_result *DescribeParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeParametersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeParameters"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeParameters(request *DescribeParametersRequest) (_result *DescribeParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParametersResponse{}
	_body, _err := client.DescribeParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeParameterTemplatesWithOptions(request *DescribeParameterTemplatesRequest, runtime *util.RuntimeOptions) (_result *DescribeParameterTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeParameterTemplatesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeParameterTemplates"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeParameterTemplates(request *DescribeParameterTemplatesRequest) (_result *DescribeParameterTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParameterTemplatesResponse{}
	_body, _err := client.DescribeParameterTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePriceWithOptions(request *DescribePriceRequest, runtime *util.RuntimeOptions) (_result *DescribePriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribePriceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribePrice"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePrice(request *DescribePriceRequest) (_result *DescribePriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceResponse{}
	_body, _err := client.DescribePriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRdsResourceSettingsWithOptions(request *DescribeRdsResourceSettingsRequest, runtime *util.RuntimeOptions) (_result *DescribeRdsResourceSettingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRdsResourceSettingsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRdsResourceSettings"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRdsResourceSettings(request *DescribeRdsResourceSettingsRequest) (_result *DescribeRdsResourceSettingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRdsResourceSettingsResponse{}
	_body, _err := client.DescribeRdsResourceSettingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReadDBInstanceDelayWithOptions(request *DescribeReadDBInstanceDelayRequest, runtime *util.RuntimeOptions) (_result *DescribeReadDBInstanceDelayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeReadDBInstanceDelayResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeReadDBInstanceDelay"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReadDBInstanceDelay(request *DescribeReadDBInstanceDelayRequest) (_result *DescribeReadDBInstanceDelayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReadDBInstanceDelayResponse{}
	_body, _err := client.DescribeReadDBInstanceDelayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRegions"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRenewalPriceWithOptions(request *DescribeRenewalPriceRequest, runtime *util.RuntimeOptions) (_result *DescribeRenewalPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeRenewalPriceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeRenewalPrice"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRenewalPrice(request *DescribeRenewalPriceRequest) (_result *DescribeRenewalPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRenewalPriceResponse{}
	_body, _err := client.DescribeRenewalPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceUsageWithOptions(request *DescribeResourceUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeResourceUsageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeResourceUsage"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceUsage(request *DescribeResourceUsageRequest) (_result *DescribeResourceUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceUsageResponse{}
	_body, _err := client.DescribeResourceUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupConfigurationWithOptions(request *DescribeSecurityGroupConfigurationRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSecurityGroupConfigurationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSecurityGroupConfiguration"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroupConfiguration(request *DescribeSecurityGroupConfigurationRequest) (_result *DescribeSecurityGroupConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupConfigurationResponse{}
	_body, _err := client.DescribeSecurityGroupConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSlowLogRecordsWithOptions(request *DescribeSlowLogRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeSlowLogRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSlowLogRecordsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSlowLogRecords"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSlowLogRecords(request *DescribeSlowLogRecordsRequest) (_result *DescribeSlowLogRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSlowLogRecordsResponse{}
	_body, _err := client.DescribeSlowLogRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSlowLogsWithOptions(request *DescribeSlowLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeSlowLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSlowLogsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSlowLogs"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSlowLogs(request *DescribeSlowLogsRequest) (_result *DescribeSlowLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSlowLogsResponse{}
	_body, _err := client.DescribeSlowLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLCollectorPolicyWithOptions(request *DescribeSQLCollectorPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLCollectorPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSQLCollectorPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSQLCollectorPolicy"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLCollectorPolicy(request *DescribeSQLCollectorPolicyRequest) (_result *DescribeSQLCollectorPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLCollectorPolicyResponse{}
	_body, _err := client.DescribeSQLCollectorPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLCollectorRetentionWithOptions(request *DescribeSQLCollectorRetentionRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLCollectorRetentionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSQLCollectorRetentionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSQLCollectorRetention"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLCollectorRetention(request *DescribeSQLCollectorRetentionRequest) (_result *DescribeSQLCollectorRetentionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLCollectorRetentionResponse{}
	_body, _err := client.DescribeSQLCollectorRetentionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLLogFilesWithOptions(request *DescribeSQLLogFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLLogFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSQLLogFilesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSQLLogFiles"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLLogFiles(request *DescribeSQLLogFilesRequest) (_result *DescribeSQLLogFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogFilesResponse{}
	_body, _err := client.DescribeSQLLogFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLLogRecordsWithOptions(request *DescribeSQLLogRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLLogRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSQLLogRecordsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSQLLogRecords"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLLogRecords(request *DescribeSQLLogRecordsRequest) (_result *DescribeSQLLogRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogRecordsResponse{}
	_body, _err := client.DescribeSQLLogRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLLogReportListWithOptions(request *DescribeSQLLogReportListRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLLogReportListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSQLLogReportListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSQLLogReportList"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLLogReportList(request *DescribeSQLLogReportListRequest) (_result *DescribeSQLLogReportListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogReportListResponse{}
	_body, _err := client.DescribeSQLLogReportListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLLogReportsWithOptions(request *DescribeSQLLogReportsRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLLogReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSQLLogReportsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSQLLogReports"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLLogReports(request *DescribeSQLLogReportsRequest) (_result *DescribeSQLLogReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogReportsResponse{}
	_body, _err := client.DescribeSQLLogReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTagsWithOptions(request *DescribeTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeTags"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTags(request *DescribeTagsRequest) (_result *DescribeTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsResponse{}
	_body, _err := client.DescribeTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTasksWithOptions(request *DescribeTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeTasksResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeTasks"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTasks(request *DescribeTasksRequest) (_result *DescribeTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTasksResponse{}
	_body, _err := client.DescribeTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DestroyDBInstanceWithOptions(request *DestroyDBInstanceRequest, runtime *util.RuntimeOptions) (_result *DestroyDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DestroyDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DestroyDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DestroyDBInstance(request *DestroyDBInstanceRequest) (_result *DestroyDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DestroyDBInstanceResponse{}
	_body, _err := client.DestroyDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DropDedicatedHostUserWithOptions(request *DropDedicatedHostUserRequest, runtime *util.RuntimeOptions) (_result *DropDedicatedHostUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DropDedicatedHostUserResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DropDedicatedHostUser"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DropDedicatedHostUser(request *DropDedicatedHostUserRequest) (_result *DropDedicatedHostUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DropDedicatedHostUserResponse{}
	_body, _err := client.DropDedicatedHostUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EvaluateDedicatedHostInstanceResourceWithOptions(request *EvaluateDedicatedHostInstanceResourceRequest, runtime *util.RuntimeOptions) (_result *EvaluateDedicatedHostInstanceResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &EvaluateDedicatedHostInstanceResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("EvaluateDedicatedHostInstanceResource"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EvaluateDedicatedHostInstanceResource(request *EvaluateDedicatedHostInstanceResourceRequest) (_result *EvaluateDedicatedHostInstanceResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EvaluateDedicatedHostInstanceResourceResponse{}
	_body, _err := client.EvaluateDedicatedHostInstanceResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDbProxyInstanceSslWithOptions(request *GetDbProxyInstanceSslRequest, runtime *util.RuntimeOptions) (_result *GetDbProxyInstanceSslResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetDbProxyInstanceSslResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetDbProxyInstanceSsl"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDbProxyInstanceSsl(request *GetDbProxyInstanceSslRequest) (_result *GetDbProxyInstanceSslResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDbProxyInstanceSslResponse{}
	_body, _err := client.GetDbProxyInstanceSslWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GrantAccountPrivilegeWithOptions(request *GrantAccountPrivilegeRequest, runtime *util.RuntimeOptions) (_result *GrantAccountPrivilegeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GrantAccountPrivilegeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GrantAccountPrivilege"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GrantAccountPrivilege(request *GrantAccountPrivilegeRequest) (_result *GrantAccountPrivilegeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GrantAccountPrivilegeResponse{}
	_body, _err := client.GrantAccountPrivilegeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GrantOperatorPermissionWithOptions(request *GrantOperatorPermissionRequest, runtime *util.RuntimeOptions) (_result *GrantOperatorPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GrantOperatorPermissionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GrantOperatorPermission"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GrantOperatorPermission(request *GrantOperatorPermissionRequest) (_result *GrantOperatorPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GrantOperatorPermissionResponse{}
	_body, _err := client.GrantOperatorPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportDatabaseBetweenInstancesWithOptions(request *ImportDatabaseBetweenInstancesRequest, runtime *util.RuntimeOptions) (_result *ImportDatabaseBetweenInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ImportDatabaseBetweenInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ImportDatabaseBetweenInstances"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportDatabaseBetweenInstances(request *ImportDatabaseBetweenInstancesRequest) (_result *ImportDatabaseBetweenInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportDatabaseBetweenInstancesResponse{}
	_body, _err := client.ImportDatabaseBetweenInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportUserBackupFileWithOptions(request *ImportUserBackupFileRequest, runtime *util.RuntimeOptions) (_result *ImportUserBackupFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ImportUserBackupFileResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ImportUserBackupFile"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportUserBackupFile(request *ImportUserBackupFileRequest) (_result *ImportUserBackupFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportUserBackupFileResponse{}
	_body, _err := client.ImportUserBackupFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClassesWithOptions(request *ListClassesRequest, runtime *util.RuntimeOptions) (_result *ListClassesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClassesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClasses"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClasses(request *ListClassesRequest) (_result *ListClassesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClassesResponse{}
	_body, _err := client.ListClassesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListTagResources"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListUserBackupFilesWithOptions(request *ListUserBackupFilesRequest, runtime *util.RuntimeOptions) (_result *ListUserBackupFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListUserBackupFilesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListUserBackupFiles"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListUserBackupFiles(request *ListUserBackupFilesRequest) (_result *ListUserBackupFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUserBackupFilesResponse{}
	_body, _err := client.ListUserBackupFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LockAccountWithOptions(request *LockAccountRequest, runtime *util.RuntimeOptions) (_result *LockAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &LockAccountResponse{}
	_body, _err := client.DoRPCRequest(tea.String("LockAccount"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LockAccount(request *LockAccountRequest) (_result *LockAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LockAccountResponse{}
	_body, _err := client.LockAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MigrateDBInstanceWithOptions(request *MigrateDBInstanceRequest, runtime *util.RuntimeOptions) (_result *MigrateDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &MigrateDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("MigrateDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MigrateDBInstance(request *MigrateDBInstanceRequest) (_result *MigrateDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MigrateDBInstanceResponse{}
	_body, _err := client.MigrateDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MigrateSecurityIPModeWithOptions(request *MigrateSecurityIPModeRequest, runtime *util.RuntimeOptions) (_result *MigrateSecurityIPModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &MigrateSecurityIPModeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("MigrateSecurityIPMode"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MigrateSecurityIPMode(request *MigrateSecurityIPModeRequest) (_result *MigrateSecurityIPModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MigrateSecurityIPModeResponse{}
	_body, _err := client.MigrateSecurityIPModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MigrateToOtherZoneWithOptions(request *MigrateToOtherZoneRequest, runtime *util.RuntimeOptions) (_result *MigrateToOtherZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &MigrateToOtherZoneResponse{}
	_body, _err := client.DoRPCRequest(tea.String("MigrateToOtherZone"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MigrateToOtherZone(request *MigrateToOtherZoneRequest) (_result *MigrateToOtherZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MigrateToOtherZoneResponse{}
	_body, _err := client.MigrateToOtherZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAccountDescriptionWithOptions(request *ModifyAccountDescriptionRequest, runtime *util.RuntimeOptions) (_result *ModifyAccountDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyAccountDescriptionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyAccountDescription"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAccountDescription(request *ModifyAccountDescriptionRequest) (_result *ModifyAccountDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAccountDescriptionResponse{}
	_body, _err := client.ModifyAccountDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyActionEventPolicyWithOptions(request *ModifyActionEventPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyActionEventPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyActionEventPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyActionEventPolicy"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyActionEventPolicy(request *ModifyActionEventPolicyRequest) (_result *ModifyActionEventPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyActionEventPolicyResponse{}
	_body, _err := client.ModifyActionEventPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBackupPolicyWithOptions(request *ModifyBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyBackupPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyBackupPolicy"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBackupPolicy(request *ModifyBackupPolicyRequest) (_result *ModifyBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBackupPolicyResponse{}
	_body, _err := client.ModifyBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCollationTimeZoneWithOptions(request *ModifyCollationTimeZoneRequest, runtime *util.RuntimeOptions) (_result *ModifyCollationTimeZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyCollationTimeZoneResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyCollationTimeZone"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCollationTimeZone(request *ModifyCollationTimeZoneRequest) (_result *ModifyCollationTimeZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCollationTimeZoneResponse{}
	_body, _err := client.ModifyCollationTimeZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDasInstanceConfigWithOptions(request *ModifyDasInstanceConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyDasInstanceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDasInstanceConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDasInstanceConfig"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDasInstanceConfig(request *ModifyDasInstanceConfigRequest) (_result *ModifyDasInstanceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDasInstanceConfigResponse{}
	_body, _err := client.ModifyDasInstanceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBDescriptionWithOptions(request *ModifyDBDescriptionRequest, runtime *util.RuntimeOptions) (_result *ModifyDBDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBDescriptionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBDescription"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBDescription(request *ModifyDBDescriptionRequest) (_result *ModifyDBDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBDescriptionResponse{}
	_body, _err := client.ModifyDBDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceAutoUpgradeMinorVersionWithOptions(request *ModifyDBInstanceAutoUpgradeMinorVersionRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceAutoUpgradeMinorVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceAutoUpgradeMinorVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceAutoUpgradeMinorVersion"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceAutoUpgradeMinorVersion(request *ModifyDBInstanceAutoUpgradeMinorVersionRequest) (_result *ModifyDBInstanceAutoUpgradeMinorVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceAutoUpgradeMinorVersionResponse{}
	_body, _err := client.ModifyDBInstanceAutoUpgradeMinorVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceConnectionModeWithOptions(request *ModifyDBInstanceConnectionModeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceConnectionModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceConnectionModeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceConnectionMode"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceConnectionMode(request *ModifyDBInstanceConnectionModeRequest) (_result *ModifyDBInstanceConnectionModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceConnectionModeResponse{}
	_body, _err := client.ModifyDBInstanceConnectionModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceConnectionStringWithOptions(request *ModifyDBInstanceConnectionStringRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceConnectionStringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceConnectionStringResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceConnectionString"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceConnectionString(request *ModifyDBInstanceConnectionStringRequest) (_result *ModifyDBInstanceConnectionStringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceConnectionStringResponse{}
	_body, _err := client.ModifyDBInstanceConnectionStringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceDescriptionWithOptions(request *ModifyDBInstanceDescriptionRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceDescriptionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceDescription"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceDescription(request *ModifyDBInstanceDescriptionRequest) (_result *ModifyDBInstanceDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceDescriptionResponse{}
	_body, _err := client.ModifyDBInstanceDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceHAConfigWithOptions(request *ModifyDBInstanceHAConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceHAConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceHAConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceHAConfig"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceHAConfig(request *ModifyDBInstanceHAConfigRequest) (_result *ModifyDBInstanceHAConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceHAConfigResponse{}
	_body, _err := client.ModifyDBInstanceHAConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceMaintainTimeWithOptions(request *ModifyDBInstanceMaintainTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceMaintainTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceMaintainTimeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceMaintainTime"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceMaintainTime(request *ModifyDBInstanceMaintainTimeRequest) (_result *ModifyDBInstanceMaintainTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceMaintainTimeResponse{}
	_body, _err := client.ModifyDBInstanceMaintainTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceMonitorWithOptions(request *ModifyDBInstanceMonitorRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceMonitorResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceMonitor"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceMonitor(request *ModifyDBInstanceMonitorRequest) (_result *ModifyDBInstanceMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceMonitorResponse{}
	_body, _err := client.ModifyDBInstanceMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceNetworkExpireTimeWithOptions(request *ModifyDBInstanceNetworkExpireTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceNetworkExpireTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceNetworkExpireTimeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceNetworkExpireTime"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceNetworkExpireTime(request *ModifyDBInstanceNetworkExpireTimeRequest) (_result *ModifyDBInstanceNetworkExpireTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceNetworkExpireTimeResponse{}
	_body, _err := client.ModifyDBInstanceNetworkExpireTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceNetworkTypeWithOptions(request *ModifyDBInstanceNetworkTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceNetworkTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceNetworkTypeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceNetworkType"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceNetworkType(request *ModifyDBInstanceNetworkTypeRequest) (_result *ModifyDBInstanceNetworkTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceNetworkTypeResponse{}
	_body, _err := client.ModifyDBInstanceNetworkTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstancePayTypeWithOptions(request *ModifyDBInstancePayTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstancePayTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstancePayTypeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstancePayType"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstancePayType(request *ModifyDBInstancePayTypeRequest) (_result *ModifyDBInstancePayTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstancePayTypeResponse{}
	_body, _err := client.ModifyDBInstancePayTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceProxyConfigurationWithOptions(request *ModifyDBInstanceProxyConfigurationRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceProxyConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceProxyConfigurationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceProxyConfiguration"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceProxyConfiguration(request *ModifyDBInstanceProxyConfigurationRequest) (_result *ModifyDBInstanceProxyConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceProxyConfigurationResponse{}
	_body, _err := client.ModifyDBInstanceProxyConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceSpecWithOptions(request *ModifyDBInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceSpecResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceSpec"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceSpec(request *ModifyDBInstanceSpecRequest) (_result *ModifyDBInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceSpecResponse{}
	_body, _err := client.ModifyDBInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceSSLWithOptions(request *ModifyDBInstanceSSLRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceSSLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceSSLResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceSSL"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceSSL(request *ModifyDBInstanceSSLRequest) (_result *ModifyDBInstanceSSLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceSSLResponse{}
	_body, _err := client.ModifyDBInstanceSSLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceTDEWithOptions(request *ModifyDBInstanceTDERequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceTDEResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBInstanceTDEResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBInstanceTDE"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceTDE(request *ModifyDBInstanceTDERequest) (_result *ModifyDBInstanceTDEResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceTDEResponse{}
	_body, _err := client.ModifyDBInstanceTDEWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBProxyWithOptions(request *ModifyDBProxyRequest, runtime *util.RuntimeOptions) (_result *ModifyDBProxyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBProxyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBProxy"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBProxy(request *ModifyDBProxyRequest) (_result *ModifyDBProxyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBProxyResponse{}
	_body, _err := client.ModifyDBProxyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBProxyEndpointWithOptions(request *ModifyDBProxyEndpointRequest, runtime *util.RuntimeOptions) (_result *ModifyDBProxyEndpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBProxyEndpointResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBProxyEndpoint"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBProxyEndpoint(request *ModifyDBProxyEndpointRequest) (_result *ModifyDBProxyEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBProxyEndpointResponse{}
	_body, _err := client.ModifyDBProxyEndpointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBProxyEndpointAddressWithOptions(request *ModifyDBProxyEndpointAddressRequest, runtime *util.RuntimeOptions) (_result *ModifyDBProxyEndpointAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBProxyEndpointAddressResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBProxyEndpointAddress"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBProxyEndpointAddress(request *ModifyDBProxyEndpointAddressRequest) (_result *ModifyDBProxyEndpointAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBProxyEndpointAddressResponse{}
	_body, _err := client.ModifyDBProxyEndpointAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBProxyInstanceWithOptions(request *ModifyDBProxyInstanceRequest, runtime *util.RuntimeOptions) (_result *ModifyDBProxyInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDBProxyInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDBProxyInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBProxyInstance(request *ModifyDBProxyInstanceRequest) (_result *ModifyDBProxyInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBProxyInstanceResponse{}
	_body, _err := client.ModifyDBProxyInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDbProxyInstanceSslWithOptions(request *ModifyDbProxyInstanceSslRequest, runtime *util.RuntimeOptions) (_result *ModifyDbProxyInstanceSslResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDbProxyInstanceSslResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDbProxyInstanceSsl"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDbProxyInstanceSsl(request *ModifyDbProxyInstanceSslRequest) (_result *ModifyDbProxyInstanceSslResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDbProxyInstanceSslResponse{}
	_body, _err := client.ModifyDbProxyInstanceSslWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAccountWithOptions(request *ModifyDedicatedHostAccountRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDedicatedHostAccountResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDedicatedHostAccount"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAccount(request *ModifyDedicatedHostAccountRequest) (_result *ModifyDedicatedHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAccountResponse{}
	_body, _err := client.ModifyDedicatedHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAttributeWithOptions(request *ModifyDedicatedHostAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDedicatedHostAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDedicatedHostAttribute"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAttribute(request *ModifyDedicatedHostAttributeRequest) (_result *ModifyDedicatedHostAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostGroupAttributeWithOptions(request *ModifyDedicatedHostGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDedicatedHostGroupAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDedicatedHostGroupAttribute"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostGroupAttribute(request *ModifyDedicatedHostGroupAttributeRequest) (_result *ModifyDedicatedHostGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostGroupAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostUserWithOptions(request *ModifyDedicatedHostUserRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDedicatedHostUserResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDedicatedHostUser"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostUser(request *ModifyDedicatedHostUserRequest) (_result *ModifyDedicatedHostUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostUserResponse{}
	_body, _err := client.ModifyDedicatedHostUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDTCSecurityIpHostsForSQLServerWithOptions(request *ModifyDTCSecurityIpHostsForSQLServerRequest, runtime *util.RuntimeOptions) (_result *ModifyDTCSecurityIpHostsForSQLServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyDTCSecurityIpHostsForSQLServerResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyDTCSecurityIpHostsForSQLServer"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDTCSecurityIpHostsForSQLServer(request *ModifyDTCSecurityIpHostsForSQLServerRequest) (_result *ModifyDTCSecurityIpHostsForSQLServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDTCSecurityIpHostsForSQLServerResponse{}
	_body, _err := client.ModifyDTCSecurityIpHostsForSQLServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyHADiagnoseConfigWithOptions(request *ModifyHADiagnoseConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyHADiagnoseConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyHADiagnoseConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyHADiagnoseConfig"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyHADiagnoseConfig(request *ModifyHADiagnoseConfigRequest) (_result *ModifyHADiagnoseConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHADiagnoseConfigResponse{}
	_body, _err := client.ModifyHADiagnoseConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyHASwitchConfigWithOptions(request *ModifyHASwitchConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyHASwitchConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyHASwitchConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyHASwitchConfig"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyHASwitchConfig(request *ModifyHASwitchConfigRequest) (_result *ModifyHASwitchConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHASwitchConfigResponse{}
	_body, _err := client.ModifyHASwitchConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewalAttributeWithOptions(request *ModifyInstanceAutoRenewalAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAutoRenewalAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceAutoRenewalAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceAutoRenewalAttribute"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewalAttribute(request *ModifyInstanceAutoRenewalAttributeRequest) (_result *ModifyInstanceAutoRenewalAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAutoRenewalAttributeResponse{}
	_body, _err := client.ModifyInstanceAutoRenewalAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceCrossBackupPolicyWithOptions(request *ModifyInstanceCrossBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceCrossBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyInstanceCrossBackupPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyInstanceCrossBackupPolicy"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceCrossBackupPolicy(request *ModifyInstanceCrossBackupPolicyRequest) (_result *ModifyInstanceCrossBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceCrossBackupPolicyResponse{}
	_body, _err := client.ModifyInstanceCrossBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyParameterWithOptions(request *ModifyParameterRequest, runtime *util.RuntimeOptions) (_result *ModifyParameterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyParameterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyParameter"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyParameter(request *ModifyParameterRequest) (_result *ModifyParameterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyParameterResponse{}
	_body, _err := client.ModifyParameterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyParameterGroupWithOptions(request *ModifyParameterGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyParameterGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyParameterGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyParameterGroup"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyParameterGroup(request *ModifyParameterGroupRequest) (_result *ModifyParameterGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyParameterGroupResponse{}
	_body, _err := client.ModifyParameterGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReadonlyInstanceDelayReplicationTimeWithOptions(request *ModifyReadonlyInstanceDelayReplicationTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyReadonlyInstanceDelayReplicationTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyReadonlyInstanceDelayReplicationTimeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyReadonlyInstanceDelayReplicationTime"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReadonlyInstanceDelayReplicationTime(request *ModifyReadonlyInstanceDelayReplicationTimeRequest) (_result *ModifyReadonlyInstanceDelayReplicationTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReadonlyInstanceDelayReplicationTimeResponse{}
	_body, _err := client.ModifyReadonlyInstanceDelayReplicationTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReadWriteSplittingConnectionWithOptions(request *ModifyReadWriteSplittingConnectionRequest, runtime *util.RuntimeOptions) (_result *ModifyReadWriteSplittingConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyReadWriteSplittingConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyReadWriteSplittingConnection"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReadWriteSplittingConnection(request *ModifyReadWriteSplittingConnectionRequest) (_result *ModifyReadWriteSplittingConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReadWriteSplittingConnectionResponse{}
	_body, _err := client.ModifyReadWriteSplittingConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyResourceGroupWithOptions(request *ModifyResourceGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyResourceGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyResourceGroup"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyResourceGroup(request *ModifyResourceGroupRequest) (_result *ModifyResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyResourceGroupResponse{}
	_body, _err := client.ModifyResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupConfigurationWithOptions(request *ModifySecurityGroupConfigurationRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifySecurityGroupConfigurationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifySecurityGroupConfiguration"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupConfiguration(request *ModifySecurityGroupConfigurationRequest) (_result *ModifySecurityGroupConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupConfigurationResponse{}
	_body, _err := client.ModifySecurityGroupConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityIpsWithOptions(request *ModifySecurityIpsRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityIpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifySecurityIpsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifySecurityIps"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityIps(request *ModifySecurityIpsRequest) (_result *ModifySecurityIpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityIpsResponse{}
	_body, _err := client.ModifySecurityIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySQLCollectorPolicyWithOptions(request *ModifySQLCollectorPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifySQLCollectorPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifySQLCollectorPolicyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifySQLCollectorPolicy"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySQLCollectorPolicy(request *ModifySQLCollectorPolicyRequest) (_result *ModifySQLCollectorPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySQLCollectorPolicyResponse{}
	_body, _err := client.ModifySQLCollectorPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySQLCollectorRetentionWithOptions(request *ModifySQLCollectorRetentionRequest, runtime *util.RuntimeOptions) (_result *ModifySQLCollectorRetentionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifySQLCollectorRetentionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifySQLCollectorRetention"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySQLCollectorRetention(request *ModifySQLCollectorRetentionRequest) (_result *ModifySQLCollectorRetentionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySQLCollectorRetentionResponse{}
	_body, _err := client.ModifySQLCollectorRetentionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PurgeDBInstanceLogWithOptions(request *PurgeDBInstanceLogRequest, runtime *util.RuntimeOptions) (_result *PurgeDBInstanceLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &PurgeDBInstanceLogResponse{}
	_body, _err := client.DoRPCRequest(tea.String("PurgeDBInstanceLog"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PurgeDBInstanceLog(request *PurgeDBInstanceLogRequest) (_result *PurgeDBInstanceLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PurgeDBInstanceLogResponse{}
	_body, _err := client.PurgeDBInstanceLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebuildDBInstanceWithOptions(request *RebuildDBInstanceRequest, runtime *util.RuntimeOptions) (_result *RebuildDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RebuildDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RebuildDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebuildDBInstance(request *RebuildDBInstanceRequest) (_result *RebuildDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebuildDBInstanceResponse{}
	_body, _err := client.RebuildDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RecoveryDBInstanceWithOptions(request *RecoveryDBInstanceRequest, runtime *util.RuntimeOptions) (_result *RecoveryDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RecoveryDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RecoveryDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RecoveryDBInstance(request *RecoveryDBInstanceRequest) (_result *RecoveryDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecoveryDBInstanceResponse{}
	_body, _err := client.RecoveryDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseInstanceConnectionWithOptions(request *ReleaseInstanceConnectionRequest, runtime *util.RuntimeOptions) (_result *ReleaseInstanceConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleaseInstanceConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleaseInstanceConnection"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseInstanceConnection(request *ReleaseInstanceConnectionRequest) (_result *ReleaseInstanceConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseInstanceConnectionResponse{}
	_body, _err := client.ReleaseInstanceConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseInstancePublicConnectionWithOptions(request *ReleaseInstancePublicConnectionRequest, runtime *util.RuntimeOptions) (_result *ReleaseInstancePublicConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleaseInstancePublicConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleaseInstancePublicConnection"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseInstancePublicConnection(request *ReleaseInstancePublicConnectionRequest) (_result *ReleaseInstancePublicConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseInstancePublicConnectionResponse{}
	_body, _err := client.ReleaseInstancePublicConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseReadWriteSplittingConnectionWithOptions(request *ReleaseReadWriteSplittingConnectionRequest, runtime *util.RuntimeOptions) (_result *ReleaseReadWriteSplittingConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleaseReadWriteSplittingConnectionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleaseReadWriteSplittingConnection"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseReadWriteSplittingConnection(request *ReleaseReadWriteSplittingConnectionRequest) (_result *ReleaseReadWriteSplittingConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseReadWriteSplittingConnectionResponse{}
	_body, _err := client.ReleaseReadWriteSplittingConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveTagsFromResourceWithOptions(request *RemoveTagsFromResourceRequest, runtime *util.RuntimeOptions) (_result *RemoveTagsFromResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RemoveTagsFromResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RemoveTagsFromResource"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveTagsFromResource(request *RemoveTagsFromResourceRequest) (_result *RemoveTagsFromResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveTagsFromResourceResponse{}
	_body, _err := client.RemoveTagsFromResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewInstanceWithOptions(request *RenewInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RenewInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RenewInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewInstance(request *RenewInstanceRequest) (_result *RenewInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewInstanceResponse{}
	_body, _err := client.RenewInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReplaceDedicatedHostWithOptions(request *ReplaceDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *ReplaceDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReplaceDedicatedHostResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReplaceDedicatedHost"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReplaceDedicatedHost(request *ReplaceDedicatedHostRequest) (_result *ReplaceDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReplaceDedicatedHostResponse{}
	_body, _err := client.ReplaceDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetAccountWithOptions(request *ResetAccountRequest, runtime *util.RuntimeOptions) (_result *ResetAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ResetAccountResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ResetAccount"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetAccount(request *ResetAccountRequest) (_result *ResetAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAccountResponse{}
	_body, _err := client.ResetAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetAccountPasswordWithOptions(request *ResetAccountPasswordRequest, runtime *util.RuntimeOptions) (_result *ResetAccountPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ResetAccountPasswordResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ResetAccountPassword"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetAccountPassword(request *ResetAccountPasswordRequest) (_result *ResetAccountPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAccountPasswordResponse{}
	_body, _err := client.ResetAccountPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartDBInstanceWithOptions(request *RestartDBInstanceRequest, runtime *util.RuntimeOptions) (_result *RestartDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RestartDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RestartDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartDBInstance(request *RestartDBInstanceRequest) (_result *RestartDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartDBInstanceResponse{}
	_body, _err := client.RestartDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartDedicatedHostWithOptions(request *RestartDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *RestartDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RestartDedicatedHostResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RestartDedicatedHost"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartDedicatedHost(request *RestartDedicatedHostRequest) (_result *RestartDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartDedicatedHostResponse{}
	_body, _err := client.RestartDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestoreDdrTableWithOptions(request *RestoreDdrTableRequest, runtime *util.RuntimeOptions) (_result *RestoreDdrTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RestoreDdrTableResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RestoreDdrTable"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestoreDdrTable(request *RestoreDdrTableRequest) (_result *RestoreDdrTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestoreDdrTableResponse{}
	_body, _err := client.RestoreDdrTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestoreTableWithOptions(request *RestoreTableRequest, runtime *util.RuntimeOptions) (_result *RestoreTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RestoreTableResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RestoreTable"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestoreTable(request *RestoreTableRequest) (_result *RestoreTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestoreTableResponse{}
	_body, _err := client.RestoreTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeAccountPrivilegeWithOptions(request *RevokeAccountPrivilegeRequest, runtime *util.RuntimeOptions) (_result *RevokeAccountPrivilegeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RevokeAccountPrivilegeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RevokeAccountPrivilege"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeAccountPrivilege(request *RevokeAccountPrivilegeRequest) (_result *RevokeAccountPrivilegeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeAccountPrivilegeResponse{}
	_body, _err := client.RevokeAccountPrivilegeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeOperatorPermissionWithOptions(request *RevokeOperatorPermissionRequest, runtime *util.RuntimeOptions) (_result *RevokeOperatorPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RevokeOperatorPermissionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RevokeOperatorPermission"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeOperatorPermission(request *RevokeOperatorPermissionRequest) (_result *RevokeOperatorPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeOperatorPermissionResponse{}
	_body, _err := client.RevokeOperatorPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartDBInstanceWithOptions(request *StartDBInstanceRequest, runtime *util.RuntimeOptions) (_result *StartDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartDBInstance(request *StartDBInstanceRequest) (_result *StartDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartDBInstanceResponse{}
	_body, _err := client.StartDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopDBInstanceWithOptions(request *StopDBInstanceRequest, runtime *util.RuntimeOptions) (_result *StopDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopDBInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopDBInstance"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopDBInstance(request *StopDBInstanceRequest) (_result *StopDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopDBInstanceResponse{}
	_body, _err := client.StopDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchDBInstanceHAWithOptions(request *SwitchDBInstanceHARequest, runtime *util.RuntimeOptions) (_result *SwitchDBInstanceHAResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SwitchDBInstanceHAResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SwitchDBInstanceHA"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchDBInstanceHA(request *SwitchDBInstanceHARequest) (_result *SwitchDBInstanceHAResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchDBInstanceHAResponse{}
	_body, _err := client.SwitchDBInstanceHAWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchDBInstanceNetTypeWithOptions(request *SwitchDBInstanceNetTypeRequest, runtime *util.RuntimeOptions) (_result *SwitchDBInstanceNetTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SwitchDBInstanceNetTypeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SwitchDBInstanceNetType"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchDBInstanceNetType(request *SwitchDBInstanceNetTypeRequest) (_result *SwitchDBInstanceNetTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchDBInstanceNetTypeResponse{}
	_body, _err := client.SwitchDBInstanceNetTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchDBInstanceVpcWithOptions(request *SwitchDBInstanceVpcRequest, runtime *util.RuntimeOptions) (_result *SwitchDBInstanceVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SwitchDBInstanceVpcResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SwitchDBInstanceVpc"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchDBInstanceVpc(request *SwitchDBInstanceVpcRequest) (_result *SwitchDBInstanceVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchDBInstanceVpcResponse{}
	_body, _err := client.SwitchDBInstanceVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TagResources"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TerminateMigrateTaskWithOptions(request *TerminateMigrateTaskRequest, runtime *util.RuntimeOptions) (_result *TerminateMigrateTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TerminateMigrateTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TerminateMigrateTask"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TerminateMigrateTask(request *TerminateMigrateTaskRequest) (_result *TerminateMigrateTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminateMigrateTaskResponse{}
	_body, _err := client.TerminateMigrateTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TransformDBInstancePayTypeWithOptions(request *TransformDBInstancePayTypeRequest, runtime *util.RuntimeOptions) (_result *TransformDBInstancePayTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TransformDBInstancePayTypeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TransformDBInstancePayType"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TransformDBInstancePayType(request *TransformDBInstancePayTypeRequest) (_result *TransformDBInstancePayTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TransformDBInstancePayTypeResponse{}
	_body, _err := client.TransformDBInstancePayTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnlockAccountWithOptions(request *UnlockAccountRequest, runtime *util.RuntimeOptions) (_result *UnlockAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnlockAccountResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnlockAccount"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnlockAccount(request *UnlockAccountRequest) (_result *UnlockAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnlockAccountResponse{}
	_body, _err := client.UnlockAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UntagResources"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateUserBackupFileWithOptions(request *UpdateUserBackupFileRequest, runtime *util.RuntimeOptions) (_result *UpdateUserBackupFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateUserBackupFileResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateUserBackupFile"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateUserBackupFile(request *UpdateUserBackupFileRequest) (_result *UpdateUserBackupFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateUserBackupFileResponse{}
	_body, _err := client.UpdateUserBackupFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeDBInstanceEngineVersionWithOptions(request *UpgradeDBInstanceEngineVersionRequest, runtime *util.RuntimeOptions) (_result *UpgradeDBInstanceEngineVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpgradeDBInstanceEngineVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpgradeDBInstanceEngineVersion"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeDBInstanceEngineVersion(request *UpgradeDBInstanceEngineVersionRequest) (_result *UpgradeDBInstanceEngineVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeDBInstanceEngineVersionResponse{}
	_body, _err := client.UpgradeDBInstanceEngineVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeDBInstanceKernelVersionWithOptions(request *UpgradeDBInstanceKernelVersionRequest, runtime *util.RuntimeOptions) (_result *UpgradeDBInstanceKernelVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpgradeDBInstanceKernelVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpgradeDBInstanceKernelVersion"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeDBInstanceKernelVersion(request *UpgradeDBInstanceKernelVersionRequest) (_result *UpgradeDBInstanceKernelVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeDBInstanceKernelVersionResponse{}
	_body, _err := client.UpgradeDBInstanceKernelVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeDBProxyInstanceKernelVersionWithOptions(request *UpgradeDBProxyInstanceKernelVersionRequest, runtime *util.RuntimeOptions) (_result *UpgradeDBProxyInstanceKernelVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpgradeDBProxyInstanceKernelVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpgradeDBProxyInstanceKernelVersion"), tea.String("2014-08-15"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeDBProxyInstanceKernelVersion(request *UpgradeDBProxyInstanceKernelVersionRequest) (_result *UpgradeDBProxyInstanceKernelVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeDBProxyInstanceKernelVersionResponse{}
	_body, _err := client.UpgradeDBProxyInstanceKernelVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
