// This file is auto-generated, don't edit it. Thanks.
package client

import (
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	rpc "github.com/alibabacloud-go/tea-rpc/client"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type GetDbProxyInstanceSslRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DbInstanceId *string `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty" require:"true"`
}

func (s GetDbProxyInstanceSslRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDbProxyInstanceSslRequest) GoString() string {
	return s.String()
}

func (s *GetDbProxyInstanceSslRequest) SetRegionId(v string) *GetDbProxyInstanceSslRequest {
	s.RegionId = &v
	return s
}

func (s *GetDbProxyInstanceSslRequest) SetDbInstanceId(v string) *GetDbProxyInstanceSslRequest {
	s.DbInstanceId = &v
	return s
}

type GetDbProxyInstanceSslResponse struct {
	RequestId            *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DbProxyCertListItems *GetDbProxyInstanceSslResponseDbProxyCertListItems `json:"DbProxyCertListItems,omitempty" xml:"DbProxyCertListItems,omitempty" require:"true" type:"Struct"`
}

func (s GetDbProxyInstanceSslResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDbProxyInstanceSslResponse) GoString() string {
	return s.String()
}

func (s *GetDbProxyInstanceSslResponse) SetRequestId(v string) *GetDbProxyInstanceSslResponse {
	s.RequestId = &v
	return s
}

func (s *GetDbProxyInstanceSslResponse) SetDbProxyCertListItems(v *GetDbProxyInstanceSslResponseDbProxyCertListItems) *GetDbProxyInstanceSslResponse {
	s.DbProxyCertListItems = v
	return s
}

type GetDbProxyInstanceSslResponseDbProxyCertListItems struct {
	DbProxyCertListItems []*GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems `json:"DbProxyCertListItems,omitempty" xml:"DbProxyCertListItems,omitempty" require:"true" type:"Repeated"`
}

func (s GetDbProxyInstanceSslResponseDbProxyCertListItems) String() string {
	return tea.Prettify(s)
}

func (s GetDbProxyInstanceSslResponseDbProxyCertListItems) GoString() string {
	return s.String()
}

func (s *GetDbProxyInstanceSslResponseDbProxyCertListItems) SetDbProxyCertListItems(v []*GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems) *GetDbProxyInstanceSslResponseDbProxyCertListItems {
	s.DbProxyCertListItems = v
	return s
}

type GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems struct {
	DbInstanceName *string `json:"DbInstanceName,omitempty" xml:"DbInstanceName,omitempty" require:"true"`
	EndpointName   *string `json:"EndpointName,omitempty" xml:"EndpointName,omitempty" require:"true"`
	EndpointType   *string `json:"EndpointType,omitempty" xml:"EndpointType,omitempty" require:"true"`
	CertCommonName *string `json:"CertCommonName,omitempty" xml:"CertCommonName,omitempty" require:"true"`
	SslExpiredTime *string `json:"SslExpiredTime,omitempty" xml:"SslExpiredTime,omitempty" require:"true"`
}

func (s GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems) String() string {
	return tea.Prettify(s)
}

func (s GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems) GoString() string {
	return s.String()
}

func (s *GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems) SetDbInstanceName(v string) *GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems {
	s.DbInstanceName = &v
	return s
}

func (s *GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems) SetEndpointName(v string) *GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems {
	s.EndpointName = &v
	return s
}

func (s *GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems) SetEndpointType(v string) *GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems {
	s.EndpointType = &v
	return s
}

func (s *GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems) SetCertCommonName(v string) *GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems {
	s.CertCommonName = &v
	return s
}

func (s *GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems) SetSslExpiredTime(v string) *GetDbProxyInstanceSslResponseDbProxyCertListItemsDbProxyCertListItems {
	s.SslExpiredTime = &v
	return s
}

type ModifyDbProxyInstanceSslRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DbInstanceId         *string `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty" require:"true"`
	DbProxyEndpointId    *string `json:"DbProxyEndpointId,omitempty" xml:"DbProxyEndpointId,omitempty" require:"true"`
	DbProxyConnectString *string `json:"DbProxyConnectString,omitempty" xml:"DbProxyConnectString,omitempty" require:"true"`
	DbProxySslEnabled    *string `json:"DbProxySslEnabled,omitempty" xml:"DbProxySslEnabled,omitempty" require:"true"`
}

func (s ModifyDbProxyInstanceSslRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDbProxyInstanceSslRequest) GoString() string {
	return s.String()
}

func (s *ModifyDbProxyInstanceSslRequest) SetRegionId(v string) *ModifyDbProxyInstanceSslRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDbProxyInstanceSslRequest) SetDbInstanceId(v string) *ModifyDbProxyInstanceSslRequest {
	s.DbInstanceId = &v
	return s
}

func (s *ModifyDbProxyInstanceSslRequest) SetDbProxyEndpointId(v string) *ModifyDbProxyInstanceSslRequest {
	s.DbProxyEndpointId = &v
	return s
}

func (s *ModifyDbProxyInstanceSslRequest) SetDbProxyConnectString(v string) *ModifyDbProxyInstanceSslRequest {
	s.DbProxyConnectString = &v
	return s
}

func (s *ModifyDbProxyInstanceSslRequest) SetDbProxySslEnabled(v string) *ModifyDbProxyInstanceSslRequest {
	s.DbProxySslEnabled = &v
	return s
}

type ModifyDbProxyInstanceSslResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDbProxyInstanceSslResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDbProxyInstanceSslResponse) GoString() string {
	return s.String()
}

func (s *ModifyDbProxyInstanceSslResponse) SetRequestId(v string) *ModifyDbProxyInstanceSslResponse {
	s.RequestId = &v
	return s
}

type MigrateConnectionToOtherZoneRequest struct {
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	ZoneId           *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
}

func (s MigrateConnectionToOtherZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateConnectionToOtherZoneRequest) GoString() string {
	return s.String()
}

func (s *MigrateConnectionToOtherZoneRequest) SetDBInstanceId(v string) *MigrateConnectionToOtherZoneRequest {
	s.DBInstanceId = &v
	return s
}

func (s *MigrateConnectionToOtherZoneRequest) SetConnectionString(v string) *MigrateConnectionToOtherZoneRequest {
	s.ConnectionString = &v
	return s
}

func (s *MigrateConnectionToOtherZoneRequest) SetZoneId(v string) *MigrateConnectionToOtherZoneRequest {
	s.ZoneId = &v
	return s
}

type MigrateConnectionToOtherZoneResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
}

func (s MigrateConnectionToOtherZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateConnectionToOtherZoneResponse) GoString() string {
	return s.String()
}

func (s *MigrateConnectionToOtherZoneResponse) SetRequestId(v string) *MigrateConnectionToOtherZoneResponse {
	s.RequestId = &v
	return s
}

func (s *MigrateConnectionToOtherZoneResponse) SetCode(v string) *MigrateConnectionToOtherZoneResponse {
	s.Code = &v
	return s
}

func (s *MigrateConnectionToOtherZoneResponse) SetMessage(v string) *MigrateConnectionToOtherZoneResponse {
	s.Message = &v
	return s
}

type GetDBInstanceTopologyRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s GetDBInstanceTopologyRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceTopologyRequest) GoString() string {
	return s.String()
}

func (s *GetDBInstanceTopologyRequest) SetDBInstanceId(v string) *GetDBInstanceTopologyRequest {
	s.DBInstanceId = &v
	return s
}

type GetDBInstanceTopologyResponse struct {
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Code      *string                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                            `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Data      *GetDBInstanceTopologyResponseData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetDBInstanceTopologyResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceTopologyResponse) GoString() string {
	return s.String()
}

func (s *GetDBInstanceTopologyResponse) SetRequestId(v string) *GetDBInstanceTopologyResponse {
	s.RequestId = &v
	return s
}

func (s *GetDBInstanceTopologyResponse) SetCode(v string) *GetDBInstanceTopologyResponse {
	s.Code = &v
	return s
}

func (s *GetDBInstanceTopologyResponse) SetMessage(v string) *GetDBInstanceTopologyResponse {
	s.Message = &v
	return s
}

func (s *GetDBInstanceTopologyResponse) SetData(v *GetDBInstanceTopologyResponseData) *GetDBInstanceTopologyResponse {
	s.Data = v
	return s
}

type GetDBInstanceTopologyResponseData struct {
	DBInstanceName *string                                         `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty" require:"true"`
	Connections    []*GetDBInstanceTopologyResponseDataConnections `json:"Connections,omitempty" xml:"Connections,omitempty" require:"true" type:"Repeated"`
	Nodes          []*GetDBInstanceTopologyResponseDataNodes       `json:"Nodes,omitempty" xml:"Nodes,omitempty" require:"true" type:"Repeated"`
}

func (s GetDBInstanceTopologyResponseData) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceTopologyResponseData) GoString() string {
	return s.String()
}

func (s *GetDBInstanceTopologyResponseData) SetDBInstanceName(v string) *GetDBInstanceTopologyResponseData {
	s.DBInstanceName = &v
	return s
}

func (s *GetDBInstanceTopologyResponseData) SetConnections(v []*GetDBInstanceTopologyResponseDataConnections) *GetDBInstanceTopologyResponseData {
	s.Connections = v
	return s
}

func (s *GetDBInstanceTopologyResponseData) SetNodes(v []*GetDBInstanceTopologyResponseDataNodes) *GetDBInstanceTopologyResponseData {
	s.Nodes = v
	return s
}

type GetDBInstanceTopologyResponseDataConnections struct {
	NetType          *string `json:"NetType,omitempty" xml:"NetType,omitempty" require:"true"`
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	ZoneId           *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
}

func (s GetDBInstanceTopologyResponseDataConnections) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceTopologyResponseDataConnections) GoString() string {
	return s.String()
}

func (s *GetDBInstanceTopologyResponseDataConnections) SetNetType(v string) *GetDBInstanceTopologyResponseDataConnections {
	s.NetType = &v
	return s
}

func (s *GetDBInstanceTopologyResponseDataConnections) SetConnectionString(v string) *GetDBInstanceTopologyResponseDataConnections {
	s.ConnectionString = &v
	return s
}

func (s *GetDBInstanceTopologyResponseDataConnections) SetZoneId(v string) *GetDBInstanceTopologyResponseDataConnections {
	s.ZoneId = &v
	return s
}

type GetDBInstanceTopologyResponseDataNodes struct {
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty" require:"true"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
}

func (s GetDBInstanceTopologyResponseDataNodes) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceTopologyResponseDataNodes) GoString() string {
	return s.String()
}

func (s *GetDBInstanceTopologyResponseDataNodes) SetRole(v string) *GetDBInstanceTopologyResponseDataNodes {
	s.Role = &v
	return s
}

func (s *GetDBInstanceTopologyResponseDataNodes) SetDedicatedHostId(v string) *GetDBInstanceTopologyResponseDataNodes {
	s.DedicatedHostId = &v
	return s
}

func (s *GetDBInstanceTopologyResponseDataNodes) SetZoneId(v string) *GetDBInstanceTopologyResponseDataNodes {
	s.ZoneId = &v
	return s
}

func (s *GetDBInstanceTopologyResponseDataNodes) SetDedicatedHostGroupId(v string) *GetDBInstanceTopologyResponseDataNodes {
	s.DedicatedHostGroupId = &v
	return s
}

type CheckRegionSupportBackupEncryptionRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DBInstanceID *string `json:"DBInstanceID,omitempty" xml:"DBInstanceID,omitempty"`
}

func (s CheckRegionSupportBackupEncryptionRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckRegionSupportBackupEncryptionRequest) GoString() string {
	return s.String()
}

func (s *CheckRegionSupportBackupEncryptionRequest) SetRegionId(v string) *CheckRegionSupportBackupEncryptionRequest {
	s.RegionId = &v
	return s
}

func (s *CheckRegionSupportBackupEncryptionRequest) SetDBInstanceID(v string) *CheckRegionSupportBackupEncryptionRequest {
	s.DBInstanceID = &v
	return s
}

type CheckRegionSupportBackupEncryptionResponse struct {
	RequestId               *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	SupportBackupEncryption *bool   `json:"SupportBackupEncryption,omitempty" xml:"SupportBackupEncryption,omitempty" require:"true"`
}

func (s CheckRegionSupportBackupEncryptionResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckRegionSupportBackupEncryptionResponse) GoString() string {
	return s.String()
}

func (s *CheckRegionSupportBackupEncryptionResponse) SetRequestId(v string) *CheckRegionSupportBackupEncryptionResponse {
	s.RequestId = &v
	return s
}

func (s *CheckRegionSupportBackupEncryptionResponse) SetSupportBackupEncryption(v bool) *CheckRegionSupportBackupEncryptionResponse {
	s.SupportBackupEncryption = &v
	return s
}

type DescribeDBInstanceDetailRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDBInstanceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDetailRequest) SetClientToken(v string) *DescribeDBInstanceDetailRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstanceDetailRequest) SetDBInstanceId(v string) *DescribeDBInstanceDetailRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceDetailResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	LicenseType     *string `json:"LicenseType,omitempty" xml:"LicenseType,omitempty" require:"true"`
	ActivationState *string `json:"ActivationState,omitempty" xml:"ActivationState,omitempty" require:"true"`
}

func (s DescribeDBInstanceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceDetailResponse) SetRequestId(v string) *DescribeDBInstanceDetailResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceDetailResponse) SetDBInstanceId(v string) *DescribeDBInstanceDetailResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceDetailResponse) SetRegionId(v string) *DescribeDBInstanceDetailResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstanceDetailResponse) SetLicenseType(v string) *DescribeDBInstanceDetailResponse {
	s.LicenseType = &v
	return s
}

func (s *DescribeDBInstanceDetailResponse) SetActivationState(v string) *DescribeDBInstanceDetailResponse {
	s.ActivationState = &v
	return s
}

type ModifyLicenseInfoRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	License      *string `json:"License,omitempty" xml:"License,omitempty" require:"true"`
}

func (s ModifyLicenseInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLicenseInfoRequest) GoString() string {
	return s.String()
}

func (s *ModifyLicenseInfoRequest) SetClientToken(v string) *ModifyLicenseInfoRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyLicenseInfoRequest) SetDBInstanceId(v string) *ModifyLicenseInfoRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyLicenseInfoRequest) SetLicense(v string) *ModifyLicenseInfoRequest {
	s.License = &v
	return s
}

type ModifyLicenseInfoResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyLicenseInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLicenseInfoResponse) GoString() string {
	return s.String()
}

func (s *ModifyLicenseInfoResponse) SetRequestId(v string) *ModifyLicenseInfoResponse {
	s.RequestId = &v
	return s
}

type DeleteDBProxyEndpointAddressRequest struct {
	RegionId                    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId                *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBProxyEndpointId           *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty" require:"true"`
	DBProxyConnectStringNetType *string `json:"DBProxyConnectStringNetType,omitempty" xml:"DBProxyConnectStringNetType,omitempty" require:"true"`
}

func (s DeleteDBProxyEndpointAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBProxyEndpointAddressRequest) GoString() string {
	return s.String()
}

func (s *DeleteDBProxyEndpointAddressRequest) SetRegionId(v string) *DeleteDBProxyEndpointAddressRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDBProxyEndpointAddressRequest) SetDBInstanceId(v string) *DeleteDBProxyEndpointAddressRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBProxyEndpointAddressRequest) SetDBProxyEndpointId(v string) *DeleteDBProxyEndpointAddressRequest {
	s.DBProxyEndpointId = &v
	return s
}

func (s *DeleteDBProxyEndpointAddressRequest) SetDBProxyConnectStringNetType(v string) *DeleteDBProxyEndpointAddressRequest {
	s.DBProxyConnectStringNetType = &v
	return s
}

type DeleteDBProxyEndpointAddressResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteDBProxyEndpointAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBProxyEndpointAddressResponse) GoString() string {
	return s.String()
}

func (s *DeleteDBProxyEndpointAddressResponse) SetRequestId(v string) *DeleteDBProxyEndpointAddressResponse {
	s.RequestId = &v
	return s
}

type CreateDBProxyEndpointAddressRequest struct {
	RegionId                    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId                *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBProxyEndpointId           *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty" require:"true"`
	ConnectionStringPrefix      *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty" require:"true"`
	DBProxyNewConnectStringPort *string `json:"DBProxyNewConnectStringPort,omitempty" xml:"DBProxyNewConnectStringPort,omitempty"`
	DBProxyConnectStringNetType *string `json:"DBProxyConnectStringNetType,omitempty" xml:"DBProxyConnectStringNetType,omitempty" require:"true"`
	VPCId                       *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId                   *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateDBProxyEndpointAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDBProxyEndpointAddressRequest) GoString() string {
	return s.String()
}

func (s *CreateDBProxyEndpointAddressRequest) SetRegionId(v string) *CreateDBProxyEndpointAddressRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetDBInstanceId(v string) *CreateDBProxyEndpointAddressRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetDBProxyEndpointId(v string) *CreateDBProxyEndpointAddressRequest {
	s.DBProxyEndpointId = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetConnectionStringPrefix(v string) *CreateDBProxyEndpointAddressRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetDBProxyNewConnectStringPort(v string) *CreateDBProxyEndpointAddressRequest {
	s.DBProxyNewConnectStringPort = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetDBProxyConnectStringNetType(v string) *CreateDBProxyEndpointAddressRequest {
	s.DBProxyConnectStringNetType = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetVPCId(v string) *CreateDBProxyEndpointAddressRequest {
	s.VPCId = &v
	return s
}

func (s *CreateDBProxyEndpointAddressRequest) SetVSwitchId(v string) *CreateDBProxyEndpointAddressRequest {
	s.VSwitchId = &v
	return s
}

type CreateDBProxyEndpointAddressResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateDBProxyEndpointAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDBProxyEndpointAddressResponse) GoString() string {
	return s.String()
}

func (s *CreateDBProxyEndpointAddressResponse) SetRequestId(v string) *CreateDBProxyEndpointAddressResponse {
	s.RequestId = &v
	return s
}

type DescribeDasInstanceConfigRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDasInstanceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDasInstanceConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeDasInstanceConfigRequest) SetClientToken(v string) *DescribeDasInstanceConfigRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDasInstanceConfigRequest) SetDBInstanceId(v string) *DescribeDasInstanceConfigRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDasInstanceConfigResponse struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data                 *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	StorageUpperBound    *int    `json:"StorageUpperBound,omitempty" xml:"StorageUpperBound,omitempty" require:"true"`
	MaxStorageUpperBound *int    `json:"MaxStorageUpperBound,omitempty" xml:"MaxStorageUpperBound,omitempty" require:"true"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StorageThreshold     *int    `json:"StorageThreshold,omitempty" xml:"StorageThreshold,omitempty" require:"true"`
	StorageAutoScale     *bool   `json:"StorageAutoScale,omitempty" xml:"StorageAutoScale,omitempty" require:"true"`
	DBType               *string `json:"DBType,omitempty" xml:"DBType,omitempty" require:"true"`
}

func (s DescribeDasInstanceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDasInstanceConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeDasInstanceConfigResponse) SetRequestId(v string) *DescribeDasInstanceConfigResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDasInstanceConfigResponse) SetData(v string) *DescribeDasInstanceConfigResponse {
	s.Data = &v
	return s
}

func (s *DescribeDasInstanceConfigResponse) SetStorageUpperBound(v int) *DescribeDasInstanceConfigResponse {
	s.StorageUpperBound = &v
	return s
}

func (s *DescribeDasInstanceConfigResponse) SetMaxStorageUpperBound(v int) *DescribeDasInstanceConfigResponse {
	s.MaxStorageUpperBound = &v
	return s
}

func (s *DescribeDasInstanceConfigResponse) SetDBInstanceId(v string) *DescribeDasInstanceConfigResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDasInstanceConfigResponse) SetStorageThreshold(v int) *DescribeDasInstanceConfigResponse {
	s.StorageThreshold = &v
	return s
}

func (s *DescribeDasInstanceConfigResponse) SetStorageAutoScale(v bool) *DescribeDasInstanceConfigResponse {
	s.StorageAutoScale = &v
	return s
}

func (s *DescribeDasInstanceConfigResponse) SetDBType(v string) *DescribeDasInstanceConfigResponse {
	s.DBType = &v
	return s
}

type ModifyDasInstanceConfigRequest struct {
	ClientToken       *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId      *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StorageAutoScale  *string `json:"StorageAutoScale,omitempty" xml:"StorageAutoScale,omitempty" require:"true"`
	StorageThreshold  *int    `json:"StorageThreshold,omitempty" xml:"StorageThreshold,omitempty"`
	StorageUpperBound *int    `json:"StorageUpperBound,omitempty" xml:"StorageUpperBound,omitempty"`
}

func (s ModifyDasInstanceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDasInstanceConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyDasInstanceConfigRequest) SetClientToken(v string) *ModifyDasInstanceConfigRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetDBInstanceId(v string) *ModifyDasInstanceConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetStorageAutoScale(v string) *ModifyDasInstanceConfigRequest {
	s.StorageAutoScale = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetStorageThreshold(v int) *ModifyDasInstanceConfigRequest {
	s.StorageThreshold = &v
	return s
}

func (s *ModifyDasInstanceConfigRequest) SetStorageUpperBound(v int) *ModifyDasInstanceConfigRequest {
	s.StorageUpperBound = &v
	return s
}

type ModifyDasInstanceConfigResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDasInstanceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDasInstanceConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyDasInstanceConfigResponse) SetRequestId(v string) *ModifyDasInstanceConfigResponse {
	s.RequestId = &v
	return s
}

type DescribeRdsResourceSettingsRequest struct {
	ResourceNiche *string `json:"ResourceNiche,omitempty" xml:"ResourceNiche,omitempty" require:"true"`
}

func (s DescribeRdsResourceSettingsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsResourceSettingsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRdsResourceSettingsRequest) SetResourceNiche(v string) *DescribeRdsResourceSettingsRequest {
	s.ResourceNiche = &v
	return s
}

type DescribeRdsResourceSettingsResponse struct {
	RequestId                   *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RdsInstanceResourceSettings *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettings `json:"RdsInstanceResourceSettings,omitempty" xml:"RdsInstanceResourceSettings,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRdsResourceSettingsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsResourceSettingsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRdsResourceSettingsResponse) SetRequestId(v string) *DescribeRdsResourceSettingsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponse) SetRdsInstanceResourceSettings(v *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettings) *DescribeRdsResourceSettingsResponse {
	s.RdsInstanceResourceSettings = v
	return s
}

type DescribeRdsResourceSettingsResponseRdsInstanceResourceSettings struct {
	RdsInstanceResourceSetting []*DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting `json:"RdsInstanceResourceSetting,omitempty" xml:"RdsInstanceResourceSetting,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRdsResourceSettingsResponseRdsInstanceResourceSettings) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsResourceSettingsResponseRdsInstanceResourceSettings) GoString() string {
	return s.String()
}

func (s *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettings) SetRdsInstanceResourceSetting(v []*DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettings {
	s.RdsInstanceResourceSetting = v
	return s
}

type DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting struct {
	StartDate          *string `json:"StartDate,omitempty" xml:"StartDate,omitempty" require:"true"`
	EndDate            *string `json:"EndDate,omitempty" xml:"EndDate,omitempty" require:"true"`
	ResourceNiche      *string `json:"ResourceNiche,omitempty" xml:"ResourceNiche,omitempty" require:"true"`
	NoticeBarContent   *string `json:"NoticeBarContent,omitempty" xml:"NoticeBarContent,omitempty" require:"true"`
	PoppedUpButtonText *string `json:"PoppedUpButtonText,omitempty" xml:"PoppedUpButtonText,omitempty" require:"true"`
	PoppedUpButtonType *string `json:"PoppedUpButtonType,omitempty" xml:"PoppedUpButtonType,omitempty" require:"true"`
	PoppedUpButtonUrl  *string `json:"PoppedUpButtonUrl,omitempty" xml:"PoppedUpButtonUrl,omitempty" require:"true"`
	PoppedUpContent    *string `json:"PoppedUpContent,omitempty" xml:"PoppedUpContent,omitempty" require:"true"`
	IsTop              *string `json:"IsTop,omitempty" xml:"IsTop,omitempty" require:"true"`
}

func (s DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) String() string {
	return tea.Prettify(s)
}

func (s DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) GoString() string {
	return s.String()
}

func (s *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetStartDate(v string) *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.StartDate = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetEndDate(v string) *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.EndDate = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetResourceNiche(v string) *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.ResourceNiche = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetNoticeBarContent(v string) *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.NoticeBarContent = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetPoppedUpButtonText(v string) *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.PoppedUpButtonText = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetPoppedUpButtonType(v string) *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.PoppedUpButtonType = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetPoppedUpButtonUrl(v string) *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.PoppedUpButtonUrl = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetPoppedUpContent(v string) *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.PoppedUpContent = &v
	return s
}

func (s *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting) SetIsTop(v string) *DescribeRdsResourceSettingsResponseRdsInstanceResourceSettingsRdsInstanceResourceSetting {
	s.IsTop = &v
	return s
}

type DeleteHostAccountRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName  *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
}

func (s DeleteHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostAccountRequest) GoString() string {
	return s.String()
}

func (s *DeleteHostAccountRequest) SetClientToken(v string) *DeleteHostAccountRequest {
	s.ClientToken = &v
	return s
}

func (s *DeleteHostAccountRequest) SetDBInstanceId(v string) *DeleteHostAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteHostAccountRequest) SetAccountName(v string) *DeleteHostAccountRequest {
	s.AccountName = &v
	return s
}

type DeleteHostAccountResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostAccountResponse) GoString() string {
	return s.String()
}

func (s *DeleteHostAccountResponse) SetRequestId(v string) *DeleteHostAccountResponse {
	s.RequestId = &v
	return s
}

type DescribeHostAccountsRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeHostAccountsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAccountsRequest) GoString() string {
	return s.String()
}

func (s *DescribeHostAccountsRequest) SetClientToken(v string) *DescribeHostAccountsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeHostAccountsRequest) SetDBInstanceId(v string) *DescribeHostAccountsRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeHostAccountsResponse struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Accounts  *DescribeHostAccountsResponseAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" require:"true" type:"Struct"`
}

func (s DescribeHostAccountsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAccountsResponse) GoString() string {
	return s.String()
}

func (s *DescribeHostAccountsResponse) SetRequestId(v string) *DescribeHostAccountsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeHostAccountsResponse) SetAccounts(v *DescribeHostAccountsResponseAccounts) *DescribeHostAccountsResponse {
	s.Accounts = v
	return s
}

type DescribeHostAccountsResponseAccounts struct {
	Accounts []*DescribeHostAccountsResponseAccountsAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeHostAccountsResponseAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAccountsResponseAccounts) GoString() string {
	return s.String()
}

func (s *DescribeHostAccountsResponseAccounts) SetAccounts(v []*DescribeHostAccountsResponseAccountsAccounts) *DescribeHostAccountsResponseAccounts {
	s.Accounts = v
	return s
}

type DescribeHostAccountsResponseAccountsAccounts struct {
	AccountName        *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountType        *string `json:"AccountType,omitempty" xml:"AccountType,omitempty" require:"true"`
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty" require:"true"`
	AccountStatus      *string `json:"AccountStatus,omitempty" xml:"AccountStatus,omitempty" require:"true"`
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeHostAccountsResponseAccountsAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAccountsResponseAccountsAccounts) GoString() string {
	return s.String()
}

func (s *DescribeHostAccountsResponseAccountsAccounts) SetAccountName(v string) *DescribeHostAccountsResponseAccountsAccounts {
	s.AccountName = &v
	return s
}

func (s *DescribeHostAccountsResponseAccountsAccounts) SetAccountType(v string) *DescribeHostAccountsResponseAccountsAccounts {
	s.AccountType = &v
	return s
}

func (s *DescribeHostAccountsResponseAccountsAccounts) SetAccountDescription(v string) *DescribeHostAccountsResponseAccountsAccounts {
	s.AccountDescription = &v
	return s
}

func (s *DescribeHostAccountsResponseAccountsAccounts) SetAccountStatus(v string) *DescribeHostAccountsResponseAccountsAccounts {
	s.AccountStatus = &v
	return s
}

func (s *DescribeHostAccountsResponseAccountsAccounts) SetDBInstanceId(v string) *DescribeHostAccountsResponseAccountsAccounts {
	s.DBInstanceId = &v
	return s
}

type ResetHostAccountPasswordRequest struct {
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName     *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty" require:"true"`
}

func (s ResetHostAccountPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetHostAccountPasswordRequest) GoString() string {
	return s.String()
}

func (s *ResetHostAccountPasswordRequest) SetClientToken(v string) *ResetHostAccountPasswordRequest {
	s.ClientToken = &v
	return s
}

func (s *ResetHostAccountPasswordRequest) SetDBInstanceId(v string) *ResetHostAccountPasswordRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResetHostAccountPasswordRequest) SetAccountName(v string) *ResetHostAccountPasswordRequest {
	s.AccountName = &v
	return s
}

func (s *ResetHostAccountPasswordRequest) SetAccountPassword(v string) *ResetHostAccountPasswordRequest {
	s.AccountPassword = &v
	return s
}

type ResetHostAccountPasswordResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ResetHostAccountPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetHostAccountPasswordResponse) GoString() string {
	return s.String()
}

func (s *ResetHostAccountPasswordResponse) SetRequestId(v string) *ResetHostAccountPasswordResponse {
	s.RequestId = &v
	return s
}

type CreateHostAccountRequest struct {
	ClientToken        *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName        *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountType        *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
	AccountPassword    *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty" require:"true"`
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
}

func (s CreateHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateHostAccountRequest) SetClientToken(v string) *CreateHostAccountRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateHostAccountRequest) SetDBInstanceId(v string) *CreateHostAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateHostAccountRequest) SetAccountName(v string) *CreateHostAccountRequest {
	s.AccountName = &v
	return s
}

func (s *CreateHostAccountRequest) SetAccountType(v string) *CreateHostAccountRequest {
	s.AccountType = &v
	return s
}

func (s *CreateHostAccountRequest) SetAccountPassword(v string) *CreateHostAccountRequest {
	s.AccountPassword = &v
	return s
}

func (s *CreateHostAccountRequest) SetAccountDescription(v string) *CreateHostAccountRequest {
	s.AccountDescription = &v
	return s
}

type CreateHostAccountResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateHostAccountResponse) SetRequestId(v string) *CreateHostAccountResponse {
	s.RequestId = &v
	return s
}

type DescribeDedicatedHostImageCategoriesRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	HostGroup *string `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" require:"true"`
}

func (s DescribeDedicatedHostImageCategoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostImageCategoriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostImageCategoriesRequest) SetRegionId(v string) *DescribeDedicatedHostImageCategoriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostImageCategoriesRequest) SetHostGroup(v string) *DescribeDedicatedHostImageCategoriesRequest {
	s.HostGroup = &v
	return s
}

type DescribeDedicatedHostImageCategoriesResponse struct {
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Images    *DescribeDedicatedHostImageCategoriesResponseImages `json:"Images,omitempty" xml:"Images,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDedicatedHostImageCategoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostImageCategoriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostImageCategoriesResponse) SetRequestId(v string) *DescribeDedicatedHostImageCategoriesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostImageCategoriesResponse) SetImages(v *DescribeDedicatedHostImageCategoriesResponseImages) *DescribeDedicatedHostImageCategoriesResponse {
	s.Images = v
	return s
}

type DescribeDedicatedHostImageCategoriesResponseImages struct {
	Images []*DescribeDedicatedHostImageCategoriesResponseImagesImages `json:"Images,omitempty" xml:"Images,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostImageCategoriesResponseImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostImageCategoriesResponseImages) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostImageCategoriesResponseImages) SetImages(v []*DescribeDedicatedHostImageCategoriesResponseImagesImages) *DescribeDedicatedHostImageCategoriesResponseImages {
	s.Images = v
	return s
}

type DescribeDedicatedHostImageCategoriesResponseImagesImages struct {
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty" require:"true"`
	ImageCode *string `json:"ImageCode,omitempty" xml:"ImageCode,omitempty" require:"true"`
}

func (s DescribeDedicatedHostImageCategoriesResponseImagesImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostImageCategoriesResponseImagesImages) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostImageCategoriesResponseImagesImages) SetImageName(v string) *DescribeDedicatedHostImageCategoriesResponseImagesImages {
	s.ImageName = &v
	return s
}

func (s *DescribeDedicatedHostImageCategoriesResponseImagesImages) SetImageCode(v string) *DescribeDedicatedHostImageCategoriesResponseImagesImages {
	s.ImageCode = &v
	return s
}

type DescribeCrossBackupMetaListRequest struct {
	BackupSetId *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty" require:"true"`
	GetDbName   *string `json:"GetDbName,omitempty" xml:"GetDbName,omitempty"`
	Pattern     *string `json:"Pattern,omitempty" xml:"Pattern,omitempty"`
	PageSize    *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageIndex   *string `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	Region      *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DescribeCrossBackupMetaListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossBackupMetaListRequest) GoString() string {
	return s.String()
}

func (s *DescribeCrossBackupMetaListRequest) SetBackupSetId(v string) *DescribeCrossBackupMetaListRequest {
	s.BackupSetId = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetGetDbName(v string) *DescribeCrossBackupMetaListRequest {
	s.GetDbName = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetPattern(v string) *DescribeCrossBackupMetaListRequest {
	s.Pattern = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetPageSize(v string) *DescribeCrossBackupMetaListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetPageIndex(v string) *DescribeCrossBackupMetaListRequest {
	s.PageIndex = &v
	return s
}

func (s *DescribeCrossBackupMetaListRequest) SetRegion(v string) *DescribeCrossBackupMetaListRequest {
	s.Region = &v
	return s
}

type DescribeCrossBackupMetaListResponse struct {
	RequestId        *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceName   *string                                   `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty" require:"true"`
	PageNumber       *int                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                                      `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	TotalRecordCount *int                                      `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	TotalPageCount   *int                                      `json:"TotalPageCount,omitempty" xml:"TotalPageCount,omitempty" require:"true"`
	Items            *DescribeCrossBackupMetaListResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeCrossBackupMetaListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossBackupMetaListResponse) GoString() string {
	return s.String()
}

func (s *DescribeCrossBackupMetaListResponse) SetRequestId(v string) *DescribeCrossBackupMetaListResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponse) SetDBInstanceName(v string) *DescribeCrossBackupMetaListResponse {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponse) SetPageNumber(v int) *DescribeCrossBackupMetaListResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponse) SetPageRecordCount(v int) *DescribeCrossBackupMetaListResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponse) SetTotalRecordCount(v int) *DescribeCrossBackupMetaListResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponse) SetTotalPageCount(v int) *DescribeCrossBackupMetaListResponse {
	s.TotalPageCount = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponse) SetItems(v *DescribeCrossBackupMetaListResponseItems) *DescribeCrossBackupMetaListResponse {
	s.Items = v
	return s
}

type DescribeCrossBackupMetaListResponseItems struct {
	Meta []*DescribeCrossBackupMetaListResponseItemsMeta `json:"Meta,omitempty" xml:"Meta,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeCrossBackupMetaListResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossBackupMetaListResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeCrossBackupMetaListResponseItems) SetMeta(v []*DescribeCrossBackupMetaListResponseItemsMeta) *DescribeCrossBackupMetaListResponseItems {
	s.Meta = v
	return s
}

type DescribeCrossBackupMetaListResponseItemsMeta struct {
	Database *string `json:"Database,omitempty" xml:"Database,omitempty" require:"true"`
	Tables   *string `json:"Tables,omitempty" xml:"Tables,omitempty" require:"true"`
	Size     *string `json:"Size,omitempty" xml:"Size,omitempty" require:"true"`
}

func (s DescribeCrossBackupMetaListResponseItemsMeta) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossBackupMetaListResponseItemsMeta) GoString() string {
	return s.String()
}

func (s *DescribeCrossBackupMetaListResponseItemsMeta) SetDatabase(v string) *DescribeCrossBackupMetaListResponseItemsMeta {
	s.Database = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponseItemsMeta) SetTables(v string) *DescribeCrossBackupMetaListResponseItemsMeta {
	s.Tables = &v
	return s
}

func (s *DescribeCrossBackupMetaListResponseItemsMeta) SetSize(v string) *DescribeCrossBackupMetaListResponseItemsMeta {
	s.Size = &v
	return s
}

type RestoreDdrTableRequest struct {
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RestoreType          *string `json:"RestoreType,omitempty" xml:"RestoreType,omitempty" require:"true"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime          *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	SourceRegion         *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	SourceDBInstanceName *string `json:"SourceDBInstanceName,omitempty" xml:"SourceDBInstanceName,omitempty"`
	TableMeta            *string `json:"TableMeta,omitempty" xml:"TableMeta,omitempty"`
}

func (s RestoreDdrTableRequest) String() string {
	return tea.Prettify(s)
}

func (s RestoreDdrTableRequest) GoString() string {
	return s.String()
}

func (s *RestoreDdrTableRequest) SetDBInstanceId(v string) *RestoreDdrTableRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RestoreDdrTableRequest) SetRegionId(v string) *RestoreDdrTableRequest {
	s.RegionId = &v
	return s
}

func (s *RestoreDdrTableRequest) SetClientToken(v string) *RestoreDdrTableRequest {
	s.ClientToken = &v
	return s
}

func (s *RestoreDdrTableRequest) SetRestoreType(v string) *RestoreDdrTableRequest {
	s.RestoreType = &v
	return s
}

func (s *RestoreDdrTableRequest) SetBackupId(v string) *RestoreDdrTableRequest {
	s.BackupId = &v
	return s
}

func (s *RestoreDdrTableRequest) SetRestoreTime(v string) *RestoreDdrTableRequest {
	s.RestoreTime = &v
	return s
}

func (s *RestoreDdrTableRequest) SetSourceRegion(v string) *RestoreDdrTableRequest {
	s.SourceRegion = &v
	return s
}

func (s *RestoreDdrTableRequest) SetSourceDBInstanceName(v string) *RestoreDdrTableRequest {
	s.SourceDBInstanceName = &v
	return s
}

func (s *RestoreDdrTableRequest) SetTableMeta(v string) *RestoreDdrTableRequest {
	s.TableMeta = &v
	return s
}

type RestoreDdrTableResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RestoreDdrTableResponse) String() string {
	return tea.Prettify(s)
}

func (s RestoreDdrTableResponse) GoString() string {
	return s.String()
}

func (s *RestoreDdrTableResponse) SetRequestId(v string) *RestoreDdrTableResponse {
	s.RequestId = &v
	return s
}

type ModifyDBProxyEndpointAddressRequest struct {
	DBInstanceId                *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBProxyEndpointId           *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty" require:"true"`
	DBProxyNewConnectString     *string `json:"DBProxyNewConnectString,omitempty" xml:"DBProxyNewConnectString,omitempty"`
	DBProxyNewConnectStringPort *string `json:"DBProxyNewConnectStringPort,omitempty" xml:"DBProxyNewConnectStringPort,omitempty"`
	DBProxyConnectStringNetType *string `json:"DBProxyConnectStringNetType,omitempty" xml:"DBProxyConnectStringNetType,omitempty"`
}

func (s ModifyDBProxyEndpointAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyEndpointAddressRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyEndpointAddressRequest) SetDBInstanceId(v string) *ModifyDBProxyEndpointAddressRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetDBProxyEndpointId(v string) *ModifyDBProxyEndpointAddressRequest {
	s.DBProxyEndpointId = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetDBProxyNewConnectString(v string) *ModifyDBProxyEndpointAddressRequest {
	s.DBProxyNewConnectString = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetDBProxyNewConnectStringPort(v string) *ModifyDBProxyEndpointAddressRequest {
	s.DBProxyNewConnectStringPort = &v
	return s
}

func (s *ModifyDBProxyEndpointAddressRequest) SetDBProxyConnectStringNetType(v string) *ModifyDBProxyEndpointAddressRequest {
	s.DBProxyConnectStringNetType = &v
	return s
}

type ModifyDBProxyEndpointAddressResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBProxyEndpointAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyEndpointAddressResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyEndpointAddressResponse) SetRequestId(v string) *ModifyDBProxyEndpointAddressResponse {
	s.RequestId = &v
	return s
}

type TerminateMigrateTaskRequest struct {
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	MigrateTaskId *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty" require:"true"`
}

func (s TerminateMigrateTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminateMigrateTaskRequest) GoString() string {
	return s.String()
}

func (s *TerminateMigrateTaskRequest) SetDBInstanceId(v string) *TerminateMigrateTaskRequest {
	s.DBInstanceId = &v
	return s
}

func (s *TerminateMigrateTaskRequest) SetMigrateTaskId(v string) *TerminateMigrateTaskRequest {
	s.MigrateTaskId = &v
	return s
}

type TerminateMigrateTaskResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s TerminateMigrateTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminateMigrateTaskResponse) GoString() string {
	return s.String()
}

func (s *TerminateMigrateTaskResponse) SetRequestId(v string) *TerminateMigrateTaskResponse {
	s.RequestId = &v
	return s
}

type DescribeLocalAvailableRecoveryTimeRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Region       *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DescribeLocalAvailableRecoveryTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalAvailableRecoveryTimeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLocalAvailableRecoveryTimeRequest) SetDBInstanceId(v string) *DescribeLocalAvailableRecoveryTimeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeRequest) SetRegion(v string) *DescribeLocalAvailableRecoveryTimeRequest {
	s.Region = &v
	return s
}

type DescribeLocalAvailableRecoveryTimeResponse struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId      *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	RecoveryBeginTime *string `json:"RecoveryBeginTime,omitempty" xml:"RecoveryBeginTime,omitempty" require:"true"`
	RecoveryEndTime   *string `json:"RecoveryEndTime,omitempty" xml:"RecoveryEndTime,omitempty" require:"true"`
}

func (s DescribeLocalAvailableRecoveryTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalAvailableRecoveryTimeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLocalAvailableRecoveryTimeResponse) SetRequestId(v string) *DescribeLocalAvailableRecoveryTimeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeResponse) SetDBInstanceId(v string) *DescribeLocalAvailableRecoveryTimeResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeResponse) SetRecoveryBeginTime(v string) *DescribeLocalAvailableRecoveryTimeResponse {
	s.RecoveryBeginTime = &v
	return s
}

func (s *DescribeLocalAvailableRecoveryTimeResponse) SetRecoveryEndTime(v string) *DescribeLocalAvailableRecoveryTimeResponse {
	s.RecoveryEndTime = &v
	return s
}

type DescribeAvailableZonesRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Engine             *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	ZoneId             *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	EngineVersion      *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	CommodityCode      *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	DispenseMode       *string `json:"DispenseMode,omitempty" xml:"DispenseMode,omitempty"`
}

func (s DescribeAvailableZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesRequest) SetRegionId(v string) *DescribeAvailableZonesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetEngine(v string) *DescribeAvailableZonesRequest {
	s.Engine = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetZoneId(v string) *DescribeAvailableZonesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetEngineVersion(v string) *DescribeAvailableZonesRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetInstanceChargeType(v string) *DescribeAvailableZonesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetCommodityCode(v string) *DescribeAvailableZonesRequest {
	s.CommodityCode = &v
	return s
}

func (s *DescribeAvailableZonesRequest) SetDispenseMode(v string) *DescribeAvailableZonesRequest {
	s.DispenseMode = &v
	return s
}

type DescribeAvailableZonesResponse struct {
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AvailableZones []*DescribeAvailableZonesResponseAvailableZones `json:"AvailableZones,omitempty" xml:"AvailableZones,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponse) SetRequestId(v string) *DescribeAvailableZonesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableZonesResponse) SetAvailableZones(v []*DescribeAvailableZonesResponseAvailableZones) *DescribeAvailableZonesResponse {
	s.AvailableZones = v
	return s
}

type DescribeAvailableZonesResponseAvailableZones struct {
	RegionId         *string                                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ZoneId           *string                                                         `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	SupportedEngines []*DescribeAvailableZonesResponseAvailableZonesSupportedEngines `json:"SupportedEngines,omitempty" xml:"SupportedEngines,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableZonesResponseAvailableZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseAvailableZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseAvailableZones) SetRegionId(v string) *DescribeAvailableZonesResponseAvailableZones {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableZonesResponseAvailableZones) SetZoneId(v string) *DescribeAvailableZonesResponseAvailableZones {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableZonesResponseAvailableZones) SetSupportedEngines(v []*DescribeAvailableZonesResponseAvailableZonesSupportedEngines) *DescribeAvailableZonesResponseAvailableZones {
	s.SupportedEngines = v
	return s
}

type DescribeAvailableZonesResponseAvailableZonesSupportedEngines struct {
	Engine                  *string                                                                                `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	SupportedEngineVersions []*DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersions `json:"SupportedEngineVersions,omitempty" xml:"SupportedEngineVersions,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableZonesResponseAvailableZonesSupportedEngines) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseAvailableZonesSupportedEngines) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseAvailableZonesSupportedEngines) SetEngine(v string) *DescribeAvailableZonesResponseAvailableZonesSupportedEngines {
	s.Engine = &v
	return s
}

func (s *DescribeAvailableZonesResponseAvailableZonesSupportedEngines) SetSupportedEngineVersions(v []*DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersions) *DescribeAvailableZonesResponseAvailableZonesSupportedEngines {
	s.SupportedEngineVersions = v
	return s
}

type DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersions struct {
	Version            *string                                                                                                  `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	SupportedCategorys []*DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys `json:"SupportedCategorys,omitempty" xml:"SupportedCategorys,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersions) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersions) SetVersion(v string) *DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersions {
	s.Version = &v
	return s
}

func (s *DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersions) SetSupportedCategorys(v []*DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys) *DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersions {
	s.SupportedCategorys = v
	return s
}

type DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys struct {
	Category              *string                                                                                                                       `json:"Category,omitempty" xml:"Category,omitempty" require:"true"`
	SupportedStorageTypes []*DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes `json:"SupportedStorageTypes,omitempty" xml:"SupportedStorageTypes,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys) SetCategory(v string) *DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys {
	s.Category = &v
	return s
}

func (s *DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys) SetSupportedStorageTypes(v []*DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes) *DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorys {
	s.SupportedStorageTypes = v
	return s
}

type DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes struct {
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty" require:"true"`
}

func (s DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes) GoString() string {
	return s.String()
}

func (s *DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes) SetStorageType(v string) *DescribeAvailableZonesResponseAvailableZonesSupportedEnginesSupportedEngineVersionsSupportedCategorysSupportedStorageTypes {
	s.StorageType = &v
	return s
}

type DescribeAvailableClassesRequest struct {
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	InstanceChargeType    *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	Engine                *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	OrderType             *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty" require:"true"`
	Category              *string `json:"Category,omitempty" xml:"Category,omitempty" require:"true"`
	CommodityCode         *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	DispenseMode          *string `json:"DispenseMode,omitempty" xml:"DispenseMode,omitempty"`
}

func (s DescribeAvailableClassesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableClassesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableClassesRequest) SetRegionId(v string) *DescribeAvailableClassesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetZoneId(v string) *DescribeAvailableClassesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetInstanceChargeType(v string) *DescribeAvailableClassesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetEngine(v string) *DescribeAvailableClassesRequest {
	s.Engine = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetEngineVersion(v string) *DescribeAvailableClassesRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetDBInstanceId(v string) *DescribeAvailableClassesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetOrderType(v string) *DescribeAvailableClassesRequest {
	s.OrderType = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetDBInstanceStorageType(v string) *DescribeAvailableClassesRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetCategory(v string) *DescribeAvailableClassesRequest {
	s.Category = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetCommodityCode(v string) *DescribeAvailableClassesRequest {
	s.CommodityCode = &v
	return s
}

func (s *DescribeAvailableClassesRequest) SetDispenseMode(v string) *DescribeAvailableClassesRequest {
	s.DispenseMode = &v
	return s
}

type DescribeAvailableClassesResponse struct {
	RequestId         *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceClasses []*DescribeAvailableClassesResponseDBInstanceClasses `json:"DBInstanceClasses,omitempty" xml:"DBInstanceClasses,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableClassesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableClassesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableClassesResponse) SetRequestId(v string) *DescribeAvailableClassesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableClassesResponse) SetDBInstanceClasses(v []*DescribeAvailableClassesResponseDBInstanceClasses) *DescribeAvailableClassesResponse {
	s.DBInstanceClasses = v
	return s
}

type DescribeAvailableClassesResponseDBInstanceClasses struct {
	DBInstanceClass        *string                                                                  `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	StorageRange           *string                                                                  `json:"StorageRange,omitempty" xml:"StorageRange,omitempty" require:"true"`
	DBInstanceStorageRange *DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange `json:"DBInstanceStorageRange,omitempty" xml:"DBInstanceStorageRange,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableClassesResponseDBInstanceClasses) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableClassesResponseDBInstanceClasses) GoString() string {
	return s.String()
}

func (s *DescribeAvailableClassesResponseDBInstanceClasses) SetDBInstanceClass(v string) *DescribeAvailableClassesResponseDBInstanceClasses {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeAvailableClassesResponseDBInstanceClasses) SetStorageRange(v string) *DescribeAvailableClassesResponseDBInstanceClasses {
	s.StorageRange = &v
	return s
}

func (s *DescribeAvailableClassesResponseDBInstanceClasses) SetDBInstanceStorageRange(v *DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange) *DescribeAvailableClassesResponseDBInstanceClasses {
	s.DBInstanceStorageRange = v
	return s
}

type DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange struct {
	MaxValue *int `json:"MaxValue,omitempty" xml:"MaxValue,omitempty" require:"true"`
	MinValue *int `json:"MinValue,omitempty" xml:"MinValue,omitempty" require:"true"`
	Step     *int `json:"Step,omitempty" xml:"Step,omitempty" require:"true"`
}

func (s DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange) GoString() string {
	return s.String()
}

func (s *DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange) SetMaxValue(v int) *DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange {
	s.MaxValue = &v
	return s
}

func (s *DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange) SetMinValue(v int) *DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange {
	s.MinValue = &v
	return s
}

func (s *DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange) SetStep(v int) *DescribeAvailableClassesResponseDBInstanceClassesDBInstanceStorageRange {
	s.Step = &v
	return s
}

type CreateDedicatedHostAccountRequest struct {
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	AccountName     *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty" require:"true"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateDedicatedHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostAccountRequest) SetDedicatedHostId(v string) *CreateDedicatedHostAccountRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *CreateDedicatedHostAccountRequest) SetAccountName(v string) *CreateDedicatedHostAccountRequest {
	s.AccountName = &v
	return s
}

func (s *CreateDedicatedHostAccountRequest) SetAccountPassword(v string) *CreateDedicatedHostAccountRequest {
	s.AccountPassword = &v
	return s
}

func (s *CreateDedicatedHostAccountRequest) SetRegionId(v string) *CreateDedicatedHostAccountRequest {
	s.RegionId = &v
	return s
}

type CreateDedicatedHostAccountResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateDedicatedHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostAccountResponse) SetRequestId(v string) *CreateDedicatedHostAccountResponse {
	s.RequestId = &v
	return s
}

type DeleteDedicatedHostAccountRequest struct {
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	AccountName     *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDedicatedHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostAccountRequest) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostAccountRequest) SetDedicatedHostId(v string) *DeleteDedicatedHostAccountRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *DeleteDedicatedHostAccountRequest) SetAccountName(v string) *DeleteDedicatedHostAccountRequest {
	s.AccountName = &v
	return s
}

func (s *DeleteDedicatedHostAccountRequest) SetRegionId(v string) *DeleteDedicatedHostAccountRequest {
	s.RegionId = &v
	return s
}

type DeleteDedicatedHostAccountResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteDedicatedHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostAccountResponse) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostAccountResponse) SetRequestId(v string) *DeleteDedicatedHostAccountResponse {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostAccountRequest struct {
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	AccountName     *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty" require:"true"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDedicatedHostAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAccountRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAccountRequest) SetDedicatedHostId(v string) *ModifyDedicatedHostAccountRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyDedicatedHostAccountRequest) SetAccountName(v string) *ModifyDedicatedHostAccountRequest {
	s.AccountName = &v
	return s
}

func (s *ModifyDedicatedHostAccountRequest) SetAccountPassword(v string) *ModifyDedicatedHostAccountRequest {
	s.AccountPassword = &v
	return s
}

func (s *ModifyDedicatedHostAccountRequest) SetRegionId(v string) *ModifyDedicatedHostAccountRequest {
	s.RegionId = &v
	return s
}

type ModifyDedicatedHostAccountResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDedicatedHostAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAccountResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAccountResponse) SetRequestId(v string) *ModifyDedicatedHostAccountResponse {
	s.RequestId = &v
	return s
}

type TransformDBInstancePayTypeRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	UsedTime     *int    `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	PayType      *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	Period       *string `json:"Period,omitempty" xml:"Period,omitempty"`
	BusinessInfo *string `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
}

func (s TransformDBInstancePayTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s TransformDBInstancePayTypeRequest) GoString() string {
	return s.String()
}

func (s *TransformDBInstancePayTypeRequest) SetClientToken(v string) *TransformDBInstancePayTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetDBInstanceId(v string) *TransformDBInstancePayTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetUsedTime(v int) *TransformDBInstancePayTypeRequest {
	s.UsedTime = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetPayType(v string) *TransformDBInstancePayTypeRequest {
	s.PayType = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetPeriod(v string) *TransformDBInstancePayTypeRequest {
	s.Period = &v
	return s
}

func (s *TransformDBInstancePayTypeRequest) SetBusinessInfo(v string) *TransformDBInstancePayTypeRequest {
	s.BusinessInfo = &v
	return s
}

type TransformDBInstancePayTypeResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	OrderId      *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
	ChargeType   *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty" require:"true"`
	ExpiredTime  *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty" require:"true"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s TransformDBInstancePayTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s TransformDBInstancePayTypeResponse) GoString() string {
	return s.String()
}

func (s *TransformDBInstancePayTypeResponse) SetRequestId(v string) *TransformDBInstancePayTypeResponse {
	s.RequestId = &v
	return s
}

func (s *TransformDBInstancePayTypeResponse) SetOrderId(v int64) *TransformDBInstancePayTypeResponse {
	s.OrderId = &v
	return s
}

func (s *TransformDBInstancePayTypeResponse) SetChargeType(v string) *TransformDBInstancePayTypeResponse {
	s.ChargeType = &v
	return s
}

func (s *TransformDBInstancePayTypeResponse) SetExpiredTime(v string) *TransformDBInstancePayTypeResponse {
	s.ExpiredTime = &v
	return s
}

func (s *TransformDBInstancePayTypeResponse) SetDBInstanceId(v string) *TransformDBInstancePayTypeResponse {
	s.DBInstanceId = &v
	return s
}

type CreateDedicatedHostUserRequest struct {
	DedicatedHostName *string `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty" require:"true"`
	UserName          *string `json:"UserName,omitempty" xml:"UserName,omitempty" require:"true"`
	UserPassword      *string `json:"UserPassword,omitempty" xml:"UserPassword,omitempty" require:"true"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateDedicatedHostUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostUserRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostUserRequest) SetDedicatedHostName(v string) *CreateDedicatedHostUserRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *CreateDedicatedHostUserRequest) SetUserName(v string) *CreateDedicatedHostUserRequest {
	s.UserName = &v
	return s
}

func (s *CreateDedicatedHostUserRequest) SetUserPassword(v string) *CreateDedicatedHostUserRequest {
	s.UserPassword = &v
	return s
}

func (s *CreateDedicatedHostUserRequest) SetRegionId(v string) *CreateDedicatedHostUserRequest {
	s.RegionId = &v
	return s
}

type CreateDedicatedHostUserResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateDedicatedHostUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostUserResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostUserResponse) SetRequestId(v string) *CreateDedicatedHostUserResponse {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostUserRequest struct {
	DedicatedHostName *string `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty" require:"true"`
	UserName          *string `json:"UserName,omitempty" xml:"UserName,omitempty" require:"true"`
	OldPassword       *string `json:"OldPassword,omitempty" xml:"OldPassword,omitempty" require:"true"`
	NewPassword       *string `json:"NewPassword,omitempty" xml:"NewPassword,omitempty" require:"true"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDedicatedHostUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostUserRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostUserRequest) SetDedicatedHostName(v string) *ModifyDedicatedHostUserRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetUserName(v string) *ModifyDedicatedHostUserRequest {
	s.UserName = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetOldPassword(v string) *ModifyDedicatedHostUserRequest {
	s.OldPassword = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetNewPassword(v string) *ModifyDedicatedHostUserRequest {
	s.NewPassword = &v
	return s
}

func (s *ModifyDedicatedHostUserRequest) SetRegionId(v string) *ModifyDedicatedHostUserRequest {
	s.RegionId = &v
	return s
}

type ModifyDedicatedHostUserResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDedicatedHostUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostUserResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostUserResponse) SetRequestId(v string) *ModifyDedicatedHostUserResponse {
	s.RequestId = &v
	return s
}

type DropDedicatedHostUserRequest struct {
	DedicatedHostName *string `json:"DedicatedHostName,omitempty" xml:"DedicatedHostName,omitempty" require:"true"`
	UserName          *string `json:"UserName,omitempty" xml:"UserName,omitempty" require:"true"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DropDedicatedHostUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DropDedicatedHostUserRequest) GoString() string {
	return s.String()
}

func (s *DropDedicatedHostUserRequest) SetDedicatedHostName(v string) *DropDedicatedHostUserRequest {
	s.DedicatedHostName = &v
	return s
}

func (s *DropDedicatedHostUserRequest) SetUserName(v string) *DropDedicatedHostUserRequest {
	s.UserName = &v
	return s
}

func (s *DropDedicatedHostUserRequest) SetRegionId(v string) *DropDedicatedHostUserRequest {
	s.RegionId = &v
	return s
}

type DropDedicatedHostUserResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DropDedicatedHostUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DropDedicatedHostUserResponse) GoString() string {
	return s.String()
}

func (s *DropDedicatedHostUserResponse) SetRequestId(v string) *DropDedicatedHostUserResponse {
	s.RequestId = &v
	return s
}

type UpgradeDBProxyInstanceKernelVersionRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	UpgradeTime  *string `json:"UpgradeTime,omitempty" xml:"UpgradeTime,omitempty"`
	SwitchTime   *string `json:"SwitchTime,omitempty" xml:"SwitchTime,omitempty"`
}

func (s UpgradeDBProxyInstanceKernelVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBProxyInstanceKernelVersionRequest) GoString() string {
	return s.String()
}

func (s *UpgradeDBProxyInstanceKernelVersionRequest) SetDBInstanceId(v string) *UpgradeDBProxyInstanceKernelVersionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionRequest) SetUpgradeTime(v string) *UpgradeDBProxyInstanceKernelVersionRequest {
	s.UpgradeTime = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionRequest) SetSwitchTime(v string) *UpgradeDBProxyInstanceKernelVersionRequest {
	s.SwitchTime = &v
	return s
}

type UpgradeDBProxyInstanceKernelVersionResponse struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceName     *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty" require:"true"`
	TaskId             *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	TargetMinorVersion *string `json:"TargetMinorVersion,omitempty" xml:"TargetMinorVersion,omitempty" require:"true"`
}

func (s UpgradeDBProxyInstanceKernelVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBProxyInstanceKernelVersionResponse) GoString() string {
	return s.String()
}

func (s *UpgradeDBProxyInstanceKernelVersionResponse) SetRequestId(v string) *UpgradeDBProxyInstanceKernelVersionResponse {
	s.RequestId = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionResponse) SetDBInstanceName(v string) *UpgradeDBProxyInstanceKernelVersionResponse {
	s.DBInstanceName = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionResponse) SetTaskId(v string) *UpgradeDBProxyInstanceKernelVersionResponse {
	s.TaskId = &v
	return s
}

func (s *UpgradeDBProxyInstanceKernelVersionResponse) SetTargetMinorVersion(v string) *UpgradeDBProxyInstanceKernelVersionResponse {
	s.TargetMinorVersion = &v
	return s
}

type StopDBInstanceRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s StopDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopDBInstanceRequest) SetDBInstanceId(v string) *StopDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *StopDBInstanceRequest) SetRegionId(v string) *StopDBInstanceRequest {
	s.RegionId = &v
	return s
}

type StopDBInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s StopDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopDBInstanceResponse) SetRequestId(v string) *StopDBInstanceResponse {
	s.RequestId = &v
	return s
}

type StartDBInstanceRequest struct {
	RegionId                       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId           *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	DBInstanceId                   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	TargetDedicatedHostIdForMaster *string `json:"TargetDedicatedHostIdForMaster,omitempty" xml:"TargetDedicatedHostIdForMaster,omitempty"`
	TargetDedicatedHostIdForSlave  *string `json:"TargetDedicatedHostIdForSlave,omitempty" xml:"TargetDedicatedHostIdForSlave,omitempty"`
	TargetDedicatedHostIdForLog    *string `json:"TargetDedicatedHostIdForLog,omitempty" xml:"TargetDedicatedHostIdForLog,omitempty"`
	EffectiveTime                  *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	SpecifiedTime                  *string `json:"SpecifiedTime,omitempty" xml:"SpecifiedTime,omitempty"`
	TargetDBInstanceClass          *string `json:"TargetDBInstanceClass,omitempty" xml:"TargetDBInstanceClass,omitempty"`
	EngineVersion                  *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceTransType            *int    `json:"DBInstanceTransType,omitempty" xml:"DBInstanceTransType,omitempty"`
	Storage                        *int    `json:"Storage,omitempty" xml:"Storage,omitempty"`
	VSwitchId                      *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ZoneId                         *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s StartDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartDBInstanceRequest) SetRegionId(v string) *StartDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *StartDBInstanceRequest) SetDedicatedHostGroupId(v string) *StartDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *StartDBInstanceRequest) SetDBInstanceId(v string) *StartDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *StartDBInstanceRequest) SetTargetDedicatedHostIdForMaster(v string) *StartDBInstanceRequest {
	s.TargetDedicatedHostIdForMaster = &v
	return s
}

func (s *StartDBInstanceRequest) SetTargetDedicatedHostIdForSlave(v string) *StartDBInstanceRequest {
	s.TargetDedicatedHostIdForSlave = &v
	return s
}

func (s *StartDBInstanceRequest) SetTargetDedicatedHostIdForLog(v string) *StartDBInstanceRequest {
	s.TargetDedicatedHostIdForLog = &v
	return s
}

func (s *StartDBInstanceRequest) SetEffectiveTime(v string) *StartDBInstanceRequest {
	s.EffectiveTime = &v
	return s
}

func (s *StartDBInstanceRequest) SetSpecifiedTime(v string) *StartDBInstanceRequest {
	s.SpecifiedTime = &v
	return s
}

func (s *StartDBInstanceRequest) SetTargetDBInstanceClass(v string) *StartDBInstanceRequest {
	s.TargetDBInstanceClass = &v
	return s
}

func (s *StartDBInstanceRequest) SetEngineVersion(v string) *StartDBInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *StartDBInstanceRequest) SetDBInstanceTransType(v int) *StartDBInstanceRequest {
	s.DBInstanceTransType = &v
	return s
}

func (s *StartDBInstanceRequest) SetStorage(v int) *StartDBInstanceRequest {
	s.Storage = &v
	return s
}

func (s *StartDBInstanceRequest) SetVSwitchId(v string) *StartDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *StartDBInstanceRequest) SetZoneId(v string) *StartDBInstanceRequest {
	s.ZoneId = &v
	return s
}

type StartDBInstanceResponse struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TaskId      *int    `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	MigrationId *int    `json:"MigrationId,omitempty" xml:"MigrationId,omitempty" require:"true"`
}

func (s StartDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartDBInstanceResponse) SetRequestId(v string) *StartDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *StartDBInstanceResponse) SetTaskId(v int) *StartDBInstanceResponse {
	s.TaskId = &v
	return s
}

func (s *StartDBInstanceResponse) SetMigrationId(v int) *StartDBInstanceResponse {
	s.MigrationId = &v
	return s
}

type DescribeSignedEventActionsRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	BeginEventId *int    `json:"BeginEventId,omitempty" xml:"BeginEventId,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeSignedEventActionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignedEventActionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSignedEventActionsRequest) SetRegionId(v string) *DescribeSignedEventActionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSignedEventActionsRequest) SetBeginEventId(v int) *DescribeSignedEventActionsRequest {
	s.BeginEventId = &v
	return s
}

func (s *DescribeSignedEventActionsRequest) SetPageSize(v int) *DescribeSignedEventActionsRequest {
	s.PageSize = &v
	return s
}

type DescribeSignedEventActionsResponse struct {
	RequestId       *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	NextPageEventId *int                                          `json:"NextPageEventId,omitempty" xml:"NextPageEventId,omitempty" require:"true"`
	PageRecordCount *int                                          `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	FromBegin       *bool                                         `json:"FromBegin,omitempty" xml:"FromBegin,omitempty" require:"true"`
	ToEnd           *bool                                         `json:"ToEnd,omitempty" xml:"ToEnd,omitempty" require:"true"`
	EventItems      *DescribeSignedEventActionsResponseEventItems `json:"EventItems,omitempty" xml:"EventItems,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSignedEventActionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignedEventActionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSignedEventActionsResponse) SetRequestId(v string) *DescribeSignedEventActionsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSignedEventActionsResponse) SetNextPageEventId(v int) *DescribeSignedEventActionsResponse {
	s.NextPageEventId = &v
	return s
}

func (s *DescribeSignedEventActionsResponse) SetPageRecordCount(v int) *DescribeSignedEventActionsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSignedEventActionsResponse) SetFromBegin(v bool) *DescribeSignedEventActionsResponse {
	s.FromBegin = &v
	return s
}

func (s *DescribeSignedEventActionsResponse) SetToEnd(v bool) *DescribeSignedEventActionsResponse {
	s.ToEnd = &v
	return s
}

func (s *DescribeSignedEventActionsResponse) SetEventItems(v *DescribeSignedEventActionsResponseEventItems) *DescribeSignedEventActionsResponse {
	s.EventItems = v
	return s
}

type DescribeSignedEventActionsResponseEventItems struct {
	EventItems []*DescribeSignedEventActionsResponseEventItemsEventItems `json:"EventItems,omitempty" xml:"EventItems,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSignedEventActionsResponseEventItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignedEventActionsResponseEventItems) GoString() string {
	return s.String()
}

func (s *DescribeSignedEventActionsResponseEventItems) SetEventItems(v []*DescribeSignedEventActionsResponseEventItemsEventItems) *DescribeSignedEventActionsResponseEventItems {
	s.EventItems = v
	return s
}

type DescribeSignedEventActionsResponseEventItemsEventItems struct {
	EventId      *int    `json:"EventId,omitempty" xml:"EventId,omitempty" require:"true"`
	EventContent *string `json:"EventContent,omitempty" xml:"EventContent,omitempty" require:"true"`
	EventSig     *string `json:"EventSig,omitempty" xml:"EventSig,omitempty" require:"true"`
	EventRcpt    *string `json:"EventRcpt,omitempty" xml:"EventRcpt,omitempty" require:"true"`
}

func (s DescribeSignedEventActionsResponseEventItemsEventItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSignedEventActionsResponseEventItemsEventItems) GoString() string {
	return s.String()
}

func (s *DescribeSignedEventActionsResponseEventItemsEventItems) SetEventId(v int) *DescribeSignedEventActionsResponseEventItemsEventItems {
	s.EventId = &v
	return s
}

func (s *DescribeSignedEventActionsResponseEventItemsEventItems) SetEventContent(v string) *DescribeSignedEventActionsResponseEventItemsEventItems {
	s.EventContent = &v
	return s
}

func (s *DescribeSignedEventActionsResponseEventItemsEventItems) SetEventSig(v string) *DescribeSignedEventActionsResponseEventItemsEventItems {
	s.EventSig = &v
	return s
}

func (s *DescribeSignedEventActionsResponseEventItemsEventItems) SetEventRcpt(v string) *DescribeSignedEventActionsResponseEventItemsEventItems {
	s.EventRcpt = &v
	return s
}

type SignEventActionRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	EventId  *int    `json:"EventId,omitempty" xml:"EventId,omitempty" require:"true"`
	EventSig *string `json:"EventSig,omitempty" xml:"EventSig,omitempty" require:"true"`
}

func (s SignEventActionRequest) String() string {
	return tea.Prettify(s)
}

func (s SignEventActionRequest) GoString() string {
	return s.String()
}

func (s *SignEventActionRequest) SetRegionId(v string) *SignEventActionRequest {
	s.RegionId = &v
	return s
}

func (s *SignEventActionRequest) SetEventId(v int) *SignEventActionRequest {
	s.EventId = &v
	return s
}

func (s *SignEventActionRequest) SetEventSig(v string) *SignEventActionRequest {
	s.EventSig = &v
	return s
}

type SignEventActionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EventId   *string `json:"EventId,omitempty" xml:"EventId,omitempty" require:"true"`
	EventRcpt *string `json:"EventRcpt,omitempty" xml:"EventRcpt,omitempty" require:"true"`
}

func (s SignEventActionResponse) String() string {
	return tea.Prettify(s)
}

func (s SignEventActionResponse) GoString() string {
	return s.String()
}

func (s *SignEventActionResponse) SetRequestId(v string) *SignEventActionResponse {
	s.RequestId = &v
	return s
}

func (s *SignEventActionResponse) SetEventId(v string) *SignEventActionResponse {
	s.EventId = &v
	return s
}

func (s *SignEventActionResponse) SetEventRcpt(v string) *SignEventActionResponse {
	s.EventRcpt = &v
	return s
}

type DescribeNextEventForSignRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeNextEventForSignRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNextEventForSignRequest) GoString() string {
	return s.String()
}

func (s *DescribeNextEventForSignRequest) SetRegionId(v string) *DescribeNextEventForSignRequest {
	s.RegionId = &v
	return s
}

type DescribeNextEventForSignResponse struct {
	RequestId  *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EventItems *DescribeNextEventForSignResponseEventItems `json:"EventItems,omitempty" xml:"EventItems,omitempty" require:"true" type:"Struct"`
}

func (s DescribeNextEventForSignResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNextEventForSignResponse) GoString() string {
	return s.String()
}

func (s *DescribeNextEventForSignResponse) SetRequestId(v string) *DescribeNextEventForSignResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeNextEventForSignResponse) SetEventItems(v *DescribeNextEventForSignResponseEventItems) *DescribeNextEventForSignResponse {
	s.EventItems = v
	return s
}

type DescribeNextEventForSignResponseEventItems struct {
	EventItems []*DescribeNextEventForSignResponseEventItemsEventItems `json:"EventItems,omitempty" xml:"EventItems,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeNextEventForSignResponseEventItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeNextEventForSignResponseEventItems) GoString() string {
	return s.String()
}

func (s *DescribeNextEventForSignResponseEventItems) SetEventItems(v []*DescribeNextEventForSignResponseEventItemsEventItems) *DescribeNextEventForSignResponseEventItems {
	s.EventItems = v
	return s
}

type DescribeNextEventForSignResponseEventItemsEventItems struct {
	EventId      *int    `json:"EventId,omitempty" xml:"EventId,omitempty" require:"true"`
	EventContent *string `json:"EventContent,omitempty" xml:"EventContent,omitempty" require:"true"`
}

func (s DescribeNextEventForSignResponseEventItemsEventItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeNextEventForSignResponseEventItemsEventItems) GoString() string {
	return s.String()
}

func (s *DescribeNextEventForSignResponseEventItemsEventItems) SetEventId(v int) *DescribeNextEventForSignResponseEventItemsEventItems {
	s.EventId = &v
	return s
}

func (s *DescribeNextEventForSignResponseEventItemsEventItems) SetEventContent(v string) *DescribeNextEventForSignResponseEventItemsEventItems {
	s.EventContent = &v
	return s
}

type ModifyActionEventVerifyPolicyRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UserPublicKey *string `json:"UserPublicKey,omitempty" xml:"UserPublicKey,omitempty" require:"true"`
}

func (s ModifyActionEventVerifyPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyActionEventVerifyPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyActionEventVerifyPolicyRequest) SetRegionId(v string) *ModifyActionEventVerifyPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyActionEventVerifyPolicyRequest) SetUserPublicKey(v string) *ModifyActionEventVerifyPolicyRequest {
	s.UserPublicKey = &v
	return s
}

type ModifyActionEventVerifyPolicyResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ServerPublicKey *string `json:"ServerPublicKey,omitempty" xml:"ServerPublicKey,omitempty" require:"true"`
}

func (s ModifyActionEventVerifyPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyActionEventVerifyPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyActionEventVerifyPolicyResponse) SetRequestId(v string) *ModifyActionEventVerifyPolicyResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyActionEventVerifyPolicyResponse) SetRegionId(v string) *ModifyActionEventVerifyPolicyResponse {
	s.RegionId = &v
	return s
}

func (s *ModifyActionEventVerifyPolicyResponse) SetServerPublicKey(v string) *ModifyActionEventVerifyPolicyResponse {
	s.ServerPublicKey = &v
	return s
}

type DescribeDBInstancesOverviewRequest struct {
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId         *string `json:"ProxyId,omitempty" xml:"ProxyId,omitempty"`
	Engine          *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ZoneId          *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	Expired         *string `json:"Expired,omitempty" xml:"Expired,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeDBInstancesOverviewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesOverviewRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesOverviewRequest) SetClientToken(v string) *DescribeDBInstancesOverviewRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstancesOverviewRequest) SetProxyId(v string) *DescribeDBInstancesOverviewRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeDBInstancesOverviewRequest) SetEngine(v string) *DescribeDBInstancesOverviewRequest {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesOverviewRequest) SetZoneId(v string) *DescribeDBInstancesOverviewRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesOverviewRequest) SetExpired(v string) *DescribeDBInstancesOverviewRequest {
	s.Expired = &v
	return s
}

func (s *DescribeDBInstancesOverviewRequest) SetDBInstanceId(v string) *DescribeDBInstancesOverviewRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesOverviewRequest) SetRegionId(v string) *DescribeDBInstancesOverviewRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesOverviewRequest) SetResourceGroupId(v string) *DescribeDBInstancesOverviewRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeDBInstancesOverviewResponse struct {
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Regions   *DescribeDBInstancesOverviewResponseRegions `json:"Regions,omitempty" xml:"Regions,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancesOverviewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesOverviewResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesOverviewResponse) SetRequestId(v string) *DescribeDBInstancesOverviewResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponse) SetRegions(v *DescribeDBInstancesOverviewResponseRegions) *DescribeDBInstancesOverviewResponse {
	s.Regions = v
	return s
}

type DescribeDBInstancesOverviewResponseRegions struct {
	RegionModel []*DescribeDBInstancesOverviewResponseRegionsRegionModel `json:"RegionModel,omitempty" xml:"RegionModel,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancesOverviewResponseRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesOverviewResponseRegions) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesOverviewResponseRegions) SetRegionModel(v []*DescribeDBInstancesOverviewResponseRegionsRegionModel) *DescribeDBInstancesOverviewResponseRegions {
	s.RegionModel = v
	return s
}

type DescribeDBInstancesOverviewResponseRegionsRegionModel struct {
	Region      *string                                                          `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	EngineCount *string                                                          `json:"EngineCount,omitempty" xml:"EngineCount,omitempty" require:"true"`
	TotalCount  *int                                                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty" require:"true"`
	TypeModels  *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModels `json:"TypeModels,omitempty" xml:"TypeModels,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancesOverviewResponseRegionsRegionModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesOverviewResponseRegionsRegionModel) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModel) SetRegion(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModel {
	s.Region = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModel) SetEngineCount(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModel {
	s.EngineCount = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModel) SetTotalCount(v int) *DescribeDBInstancesOverviewResponseRegionsRegionModel {
	s.TotalCount = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModel) SetTypeModels(v *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModels) *DescribeDBInstancesOverviewResponseRegionsRegionModel {
	s.TypeModels = v
	return s
}

type DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModels struct {
	TypeModel []*DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel `json:"TypeModel,omitempty" xml:"TypeModel,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModels) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModels) SetTypeModel(v []*DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModels {
	s.TypeModel = v
	return s
}

type DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel struct {
	InstanceDateType *string                                                                                 `json:"InstanceDateType,omitempty" xml:"InstanceDateType,omitempty" require:"true"`
	Count            *int                                                                                    `json:"Count,omitempty" xml:"Count,omitempty" require:"true"`
	InstanceModels   *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModels `json:"InstanceModels,omitempty" xml:"InstanceModels,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel) SetInstanceDateType(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel {
	s.InstanceDateType = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel) SetCount(v int) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel {
	s.Count = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel) SetInstanceModels(v *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModels) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModel {
	s.InstanceModels = v
	return s
}

type DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModels struct {
	InstanceModel []*DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel `json:"InstanceModel,omitempty" xml:"InstanceModel,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModels) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModels) SetInstanceModel(v []*DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModels {
	s.InstanceModel = v
	return s
}

type DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel struct {
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Region           *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ZoneId           *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	Engine           *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	PayType          *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	CreatedTime      *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty" require:"true"`
	ExpireTime       *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty" require:"true"`
	LockMode         *string `json:"LockMode,omitempty" xml:"LockMode,omitempty" require:"true"`
	DBInstanceStatus *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty" require:"true"`
}

func (s DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) SetDBInstanceId(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) SetRegion(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel {
	s.Region = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) SetZoneId(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) SetEngine(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) SetPayType(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) SetCreatedTime(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) SetExpireTime(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) SetLockMode(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel) SetDBInstanceStatus(v string) *DescribeDBInstancesOverviewResponseRegionsRegionModelTypeModelsTypeModelInstanceModelsInstanceModel {
	s.DBInstanceStatus = &v
	return s
}

type DescribeMigrateTaskByIdRequest struct {
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	MigrateTaskId *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty" require:"true"`
}

func (s DescribeMigrateTaskByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTaskByIdRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTaskByIdRequest) SetDBInstanceId(v string) *DescribeMigrateTaskByIdRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeMigrateTaskByIdRequest) SetMigrateTaskId(v string) *DescribeMigrateTaskByIdRequest {
	s.MigrateTaskId = &v
	return s
}

type DescribeMigrateTaskByIdResponse struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceName *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty" require:"true"`
	DBName         *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	MigrateTaskId  *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty" require:"true"`
	CreateTime     *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	BackupMode     *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty" require:"true"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IsDBReplaced   *string `json:"IsDBReplaced,omitempty" xml:"IsDBReplaced,omitempty" require:"true"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribeMigrateTaskByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTaskByIdResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTaskByIdResponse) SetRequestId(v string) *DescribeMigrateTaskByIdResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponse) SetDBInstanceName(v string) *DescribeMigrateTaskByIdResponse {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponse) SetDBName(v string) *DescribeMigrateTaskByIdResponse {
	s.DBName = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponse) SetMigrateTaskId(v string) *DescribeMigrateTaskByIdResponse {
	s.MigrateTaskId = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponse) SetCreateTime(v string) *DescribeMigrateTaskByIdResponse {
	s.CreateTime = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponse) SetEndTime(v string) *DescribeMigrateTaskByIdResponse {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponse) SetBackupMode(v string) *DescribeMigrateTaskByIdResponse {
	s.BackupMode = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponse) SetStatus(v string) *DescribeMigrateTaskByIdResponse {
	s.Status = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponse) SetIsDBReplaced(v string) *DescribeMigrateTaskByIdResponse {
	s.IsDBReplaced = &v
	return s
}

func (s *DescribeMigrateTaskByIdResponse) SetDescription(v string) *DescribeMigrateTaskByIdResponse {
	s.Description = &v
	return s
}

type DeleteBackupFileRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupId     *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	DBName       *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	BackupTime   *string `json:"BackupTime,omitempty" xml:"BackupTime,omitempty"`
}

func (s DeleteBackupFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackupFileRequest) SetRegionId(v string) *DeleteBackupFileRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteBackupFileRequest) SetDBInstanceId(v string) *DeleteBackupFileRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteBackupFileRequest) SetBackupId(v string) *DeleteBackupFileRequest {
	s.BackupId = &v
	return s
}

func (s *DeleteBackupFileRequest) SetDBName(v string) *DeleteBackupFileRequest {
	s.DBName = &v
	return s
}

func (s *DeleteBackupFileRequest) SetBackupTime(v string) *DeleteBackupFileRequest {
	s.BackupTime = &v
	return s
}

type DeleteBackupFileResponse struct {
	RequestId        *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DeletedBaksetIds *DeleteBackupFileResponseDeletedBaksetIds `json:"DeletedBaksetIds,omitempty" xml:"DeletedBaksetIds,omitempty" require:"true" type:"Struct"`
}

func (s DeleteBackupFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackupFileResponse) SetRequestId(v string) *DeleteBackupFileResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteBackupFileResponse) SetDeletedBaksetIds(v *DeleteBackupFileResponseDeletedBaksetIds) *DeleteBackupFileResponse {
	s.DeletedBaksetIds = v
	return s
}

type DeleteBackupFileResponseDeletedBaksetIds struct {
	DeletedBaksetIds []*int `json:"DeletedBaksetIds,omitempty" xml:"DeletedBaksetIds,omitempty" require:"true" type:"Repeated"`
}

func (s DeleteBackupFileResponseDeletedBaksetIds) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupFileResponseDeletedBaksetIds) GoString() string {
	return s.String()
}

func (s *DeleteBackupFileResponseDeletedBaksetIds) SetDeletedBaksetIds(v []*int) *DeleteBackupFileResponseDeletedBaksetIds {
	s.DeletedBaksetIds = v
	return s
}

type DescribeDetachedBackupsRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	BackupId     *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	BackupStatus *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	BackupMode   *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Region       *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
}

func (s DescribeDetachedBackupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetachedBackupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDetachedBackupsRequest) SetDBInstanceId(v string) *DescribeDetachedBackupsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetBackupId(v string) *DescribeDetachedBackupsRequest {
	s.BackupId = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetBackupStatus(v string) *DescribeDetachedBackupsRequest {
	s.BackupStatus = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetBackupMode(v string) *DescribeDetachedBackupsRequest {
	s.BackupMode = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetStartTime(v string) *DescribeDetachedBackupsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetEndTime(v string) *DescribeDetachedBackupsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetPageSize(v int) *DescribeDetachedBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetPageNumber(v int) *DescribeDetachedBackupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDetachedBackupsRequest) SetRegion(v string) *DescribeDetachedBackupsRequest {
	s.Region = &v
	return s
}

type DescribeDetachedBackupsResponse struct {
	RequestId        *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *string                               `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *string                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *string                               `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeDetachedBackupsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDetachedBackupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetachedBackupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDetachedBackupsResponse) SetRequestId(v string) *DescribeDetachedBackupsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDetachedBackupsResponse) SetTotalRecordCount(v string) *DescribeDetachedBackupsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDetachedBackupsResponse) SetPageNumber(v string) *DescribeDetachedBackupsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDetachedBackupsResponse) SetPageRecordCount(v string) *DescribeDetachedBackupsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDetachedBackupsResponse) SetItems(v *DescribeDetachedBackupsResponseItems) *DescribeDetachedBackupsResponse {
	s.Items = v
	return s
}

type DescribeDetachedBackupsResponseItems struct {
	Backup []*DescribeDetachedBackupsResponseItemsBackup `json:"Backup,omitempty" xml:"Backup,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDetachedBackupsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetachedBackupsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeDetachedBackupsResponseItems) SetBackup(v []*DescribeDetachedBackupsResponseItemsBackup) *DescribeDetachedBackupsResponseItems {
	s.Backup = v
	return s
}

type DescribeDetachedBackupsResponseItemsBackup struct {
	BackupId                  *string `json:"BackupId,omitempty" xml:"BackupId,omitempty" require:"true"`
	DBInstanceId              *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupStatus              *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty" require:"true"`
	BackupStartTime           *string `json:"BackupStartTime,omitempty" xml:"BackupStartTime,omitempty" require:"true"`
	BackupEndTime             *string `json:"BackupEndTime,omitempty" xml:"BackupEndTime,omitempty" require:"true"`
	BackupType                *string `json:"BackupType,omitempty" xml:"BackupType,omitempty" require:"true"`
	BackupMode                *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty" require:"true"`
	BackupMethod              *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty" require:"true"`
	BackupDownloadURL         *string `json:"BackupDownloadURL,omitempty" xml:"BackupDownloadURL,omitempty" require:"true"`
	BackupIntranetDownloadURL *string `json:"BackupIntranetDownloadURL,omitempty" xml:"BackupIntranetDownloadURL,omitempty" require:"true"`
	BackupSize                *int64  `json:"BackupSize,omitempty" xml:"BackupSize,omitempty" require:"true"`
	HostInstanceID            *string `json:"HostInstanceID,omitempty" xml:"HostInstanceID,omitempty" require:"true"`
	StoreStatus               *string `json:"StoreStatus,omitempty" xml:"StoreStatus,omitempty" require:"true"`
	MetaStatus                *string `json:"MetaStatus,omitempty" xml:"MetaStatus,omitempty" require:"true"`
	ConsistentTime            *int64  `json:"ConsistentTime,omitempty" xml:"ConsistentTime,omitempty" require:"true"`
	IsAvail                   *int    `json:"IsAvail,omitempty" xml:"IsAvail,omitempty" require:"true"`
}

func (s DescribeDetachedBackupsResponseItemsBackup) String() string {
	return tea.Prettify(s)
}

func (s DescribeDetachedBackupsResponseItemsBackup) GoString() string {
	return s.String()
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetBackupId(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.BackupId = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetDBInstanceId(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetBackupStatus(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.BackupStatus = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetBackupStartTime(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.BackupStartTime = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetBackupEndTime(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.BackupEndTime = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetBackupType(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.BackupType = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetBackupMode(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.BackupMode = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetBackupMethod(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.BackupMethod = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetBackupDownloadURL(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.BackupDownloadURL = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetBackupIntranetDownloadURL(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.BackupIntranetDownloadURL = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetBackupSize(v int64) *DescribeDetachedBackupsResponseItemsBackup {
	s.BackupSize = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetHostInstanceID(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.HostInstanceID = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetStoreStatus(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.StoreStatus = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetMetaStatus(v string) *DescribeDetachedBackupsResponseItemsBackup {
	s.MetaStatus = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetConsistentTime(v int64) *DescribeDetachedBackupsResponseItemsBackup {
	s.ConsistentTime = &v
	return s
}

func (s *DescribeDetachedBackupsResponseItemsBackup) SetIsAvail(v int) *DescribeDetachedBackupsResponseItemsBackup {
	s.IsAvail = &v
	return s
}

type EvaluateDedicatedHostInstanceResourceRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	DiskType             *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	DiskSize             *string `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	InstanceClassNames   *string `json:"InstanceClassNames,omitempty" xml:"InstanceClassNames,omitempty" require:"true"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
}

func (s EvaluateDedicatedHostInstanceResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s EvaluateDedicatedHostInstanceResourceRequest) GoString() string {
	return s.String()
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetRegionId(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.RegionId = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetDedicatedHostGroupId(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetDiskType(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.DiskType = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetDiskSize(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.DiskSize = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetInstanceClassNames(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.InstanceClassNames = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetEngine(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.Engine = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceRequest) SetEngineVersion(v string) *EvaluateDedicatedHostInstanceResourceRequest {
	s.EngineVersion = &v
	return s
}

type EvaluateDedicatedHostInstanceResourceResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	Available       *int    `json:"Available,omitempty" xml:"Available,omitempty" require:"true"`
}

func (s EvaluateDedicatedHostInstanceResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s EvaluateDedicatedHostInstanceResourceResponse) GoString() string {
	return s.String()
}

func (s *EvaluateDedicatedHostInstanceResourceResponse) SetRequestId(v string) *EvaluateDedicatedHostInstanceResourceResponse {
	s.RequestId = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceResponse) SetDBInstanceClass(v string) *EvaluateDedicatedHostInstanceResourceResponse {
	s.DBInstanceClass = &v
	return s
}

func (s *EvaluateDedicatedHostInstanceResourceResponse) SetAvailable(v int) *EvaluateDedicatedHostInstanceResourceResponse {
	s.Available = &v
	return s
}

type DescribeAvailableDedicatedHostClassesRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ZoneId      *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s DescribeAvailableDedicatedHostClassesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostClassesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostClassesRequest) SetRegionId(v string) *DescribeAvailableDedicatedHostClassesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesRequest) SetZoneId(v string) *DescribeAvailableDedicatedHostClassesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesRequest) SetStorageType(v string) *DescribeAvailableDedicatedHostClassesRequest {
	s.StorageType = &v
	return s
}

type DescribeAvailableDedicatedHostClassesResponse struct {
	RequestId   *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	HostClasses *DescribeAvailableDedicatedHostClassesResponseHostClasses `json:"HostClasses,omitempty" xml:"HostClasses,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableDedicatedHostClassesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostClassesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostClassesResponse) SetRequestId(v string) *DescribeAvailableDedicatedHostClassesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesResponse) SetHostClasses(v *DescribeAvailableDedicatedHostClassesResponseHostClasses) *DescribeAvailableDedicatedHostClassesResponse {
	s.HostClasses = v
	return s
}

type DescribeAvailableDedicatedHostClassesResponseHostClasses struct {
	HostClasses []*DescribeAvailableDedicatedHostClassesResponseHostClassesHostClasses `json:"HostClasses,omitempty" xml:"HostClasses,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableDedicatedHostClassesResponseHostClasses) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostClassesResponseHostClasses) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostClassesResponseHostClasses) SetHostClasses(v []*DescribeAvailableDedicatedHostClassesResponseHostClassesHostClasses) *DescribeAvailableDedicatedHostClassesResponseHostClasses {
	s.HostClasses = v
	return s
}

type DescribeAvailableDedicatedHostClassesResponseHostClassesHostClasses struct {
	HostClassName *string `json:"HostClassName,omitempty" xml:"HostClassName,omitempty" require:"true"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribeAvailableDedicatedHostClassesResponseHostClassesHostClasses) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostClassesResponseHostClassesHostClasses) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostClassesResponseHostClassesHostClasses) SetHostClassName(v string) *DescribeAvailableDedicatedHostClassesResponseHostClassesHostClasses {
	s.HostClassName = &v
	return s
}

func (s *DescribeAvailableDedicatedHostClassesResponseHostClassesHostClasses) SetDescription(v string) *DescribeAvailableDedicatedHostClassesResponseHostClassesHostClasses {
	s.Description = &v
	return s
}

type DescribeAvailableDedicatedHostZonesRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeAvailableDedicatedHostZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostZonesRequest) SetRegionId(v string) *DescribeAvailableDedicatedHostZonesRequest {
	s.RegionId = &v
	return s
}

type DescribeAvailableDedicatedHostZonesResponse struct {
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Zones     *DescribeAvailableDedicatedHostZonesResponseZones `json:"Zones,omitempty" xml:"Zones,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableDedicatedHostZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostZonesResponse) SetRequestId(v string) *DescribeAvailableDedicatedHostZonesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostZonesResponse) SetZones(v *DescribeAvailableDedicatedHostZonesResponseZones) *DescribeAvailableDedicatedHostZonesResponse {
	s.Zones = v
	return s
}

type DescribeAvailableDedicatedHostZonesResponseZones struct {
	DedicatedHostZones []*DescribeAvailableDedicatedHostZonesResponseZonesDedicatedHostZones `json:"DedicatedHostZones,omitempty" xml:"DedicatedHostZones,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableDedicatedHostZonesResponseZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostZonesResponseZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostZonesResponseZones) SetDedicatedHostZones(v []*DescribeAvailableDedicatedHostZonesResponseZonesDedicatedHostZones) *DescribeAvailableDedicatedHostZonesResponseZones {
	s.DedicatedHostZones = v
	return s
}

type DescribeAvailableDedicatedHostZonesResponseZonesDedicatedHostZones struct {
	ZoneId      *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribeAvailableDedicatedHostZonesResponseZonesDedicatedHostZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableDedicatedHostZonesResponseZonesDedicatedHostZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableDedicatedHostZonesResponseZonesDedicatedHostZones) SetZoneId(v string) *DescribeAvailableDedicatedHostZonesResponseZonesDedicatedHostZones {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableDedicatedHostZonesResponseZonesDedicatedHostZones) SetDescription(v string) *DescribeAvailableDedicatedHostZonesResponseZonesDedicatedHostZones {
	s.Description = &v
	return s
}

type ReleaseInstanceConnectionRequest struct {
	DBInstanceId            *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	CurrentConnectionString *string `json:"CurrentConnectionString,omitempty" xml:"CurrentConnectionString,omitempty" require:"true"`
	InstanceNetworkType     *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty" require:"true"`
}

func (s ReleaseInstanceConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceConnectionRequest) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceConnectionRequest) SetDBInstanceId(v string) *ReleaseInstanceConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ReleaseInstanceConnectionRequest) SetCurrentConnectionString(v string) *ReleaseInstanceConnectionRequest {
	s.CurrentConnectionString = &v
	return s
}

func (s *ReleaseInstanceConnectionRequest) SetInstanceNetworkType(v string) *ReleaseInstanceConnectionRequest {
	s.InstanceNetworkType = &v
	return s
}

type ReleaseInstanceConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ReleaseInstanceConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceConnectionResponse) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceConnectionResponse) SetRequestId(v string) *ReleaseInstanceConnectionResponse {
	s.RequestId = &v
	return s
}

type UnlockAccountRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName  *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
}

func (s UnlockAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s UnlockAccountRequest) GoString() string {
	return s.String()
}

func (s *UnlockAccountRequest) SetDBInstanceId(v string) *UnlockAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UnlockAccountRequest) SetAccountName(v string) *UnlockAccountRequest {
	s.AccountName = &v
	return s
}

type UnlockAccountResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnlockAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s UnlockAccountResponse) GoString() string {
	return s.String()
}

func (s *UnlockAccountResponse) SetRequestId(v string) *UnlockAccountResponse {
	s.RequestId = &v
	return s
}

type LockAccountRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName  *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
}

func (s LockAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s LockAccountRequest) GoString() string {
	return s.String()
}

func (s *LockAccountRequest) SetDBInstanceId(v string) *LockAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *LockAccountRequest) SetAccountName(v string) *LockAccountRequest {
	s.AccountName = &v
	return s
}

type LockAccountResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s LockAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s LockAccountResponse) GoString() string {
	return s.String()
}

func (s *LockAccountResponse) SetRequestId(v string) *LockAccountResponse {
	s.RequestId = &v
	return s
}

type ListTagResourcesRequest struct {
	RegionId     *string                       `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ResourceType *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	NextToken    *string                       `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ResourceId   []*string                     `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag          []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponse struct {
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	NextToken    *string                               `json:"NextToken,omitempty" xml:"NextToken,omitempty" require:"true"`
	TagResources *ListTagResourcesResponseTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" require:"true" type:"Struct"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetRequestId(v string) *ListTagResourcesResponse {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponse) SetNextToken(v string) *ListTagResourcesResponse {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponse) SetTagResources(v *ListTagResourcesResponseTagResources) *ListTagResourcesResponse {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseTagResources struct {
	TagResource []*ListTagResourcesResponseTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" require:"true" type:"Repeated"`
}

func (s ListTagResourcesResponseTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseTagResources) SetTagResource(v []*ListTagResourcesResponseTagResourcesTagResource) *ListTagResourcesResponseTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseTagResourcesTagResource struct {
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
}

func (s ListTagResourcesResponseTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.TagValue = &v
	return s
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

type TagResourcesRequest struct {
	RegionId     *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ResourceType *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceId   []*string                 `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true" type:"Repeated"`
	Tag          []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetRequestId(v string) *TagResourcesResponse {
	s.RequestId = &v
	return s
}

type UntagResourcesRequest struct {
	RegionId     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ResourceType *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	All          *bool     `json:"All,omitempty" xml:"All,omitempty"`
	ResourceId   []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true" type:"Repeated"`
	TagKey       []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetRequestId(v string) *UntagResourcesResponse {
	s.RequestId = &v
	return s
}

type DescribeDedicatedHostGroupsRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	ImageCategory        *string `json:"ImageCategory,omitempty" xml:"ImageCategory,omitempty"`
}

func (s DescribeDedicatedHostGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsRequest) SetRegionId(v string) *DescribeDedicatedHostGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsRequest) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostGroupsRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsRequest) SetImageCategory(v string) *DescribeDedicatedHostGroupsRequest {
	s.ImageCategory = &v
	return s
}

type DescribeDedicatedHostGroupsResponse struct {
	RequestId           *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DedicatedHostGroups *DescribeDedicatedHostGroupsResponseDedicatedHostGroups `json:"DedicatedHostGroups,omitempty" xml:"DedicatedHostGroups,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDedicatedHostGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsResponse) SetRequestId(v string) *DescribeDedicatedHostGroupsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponse) SetDedicatedHostGroups(v *DescribeDedicatedHostGroupsResponseDedicatedHostGroups) *DescribeDedicatedHostGroupsResponse {
	s.DedicatedHostGroups = v
	return s
}

type DescribeDedicatedHostGroupsResponseDedicatedHostGroups struct {
	DedicatedHostGroups []*DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups `json:"DedicatedHostGroups,omitempty" xml:"DedicatedHostGroups,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostGroupsResponseDedicatedHostGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsResponseDedicatedHostGroups) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroups) SetDedicatedHostGroups(v []*DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) *DescribeDedicatedHostGroupsResponseDedicatedHostGroups {
	s.DedicatedHostGroups = v
	return s
}

type DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups struct {
	DedicatedHostGroupId              *string                                                                              `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	DedicatedHostGroupDesc            *string                                                                              `json:"DedicatedHostGroupDesc,omitempty" xml:"DedicatedHostGroupDesc,omitempty" require:"true"`
	CpuAllocationRatio                *int                                                                                 `json:"CpuAllocationRatio,omitempty" xml:"CpuAllocationRatio,omitempty" require:"true"`
	MemAllocationRatio                *int                                                                                 `json:"MemAllocationRatio,omitempty" xml:"MemAllocationRatio,omitempty" require:"true"`
	DiskAllocationRatio               *int                                                                                 `json:"DiskAllocationRatio,omitempty" xml:"DiskAllocationRatio,omitempty" require:"true"`
	AllocationPolicy                  *string                                                                              `json:"AllocationPolicy,omitempty" xml:"AllocationPolicy,omitempty" require:"true"`
	HostReplacePolicy                 *string                                                                              `json:"HostReplacePolicy,omitempty" xml:"HostReplacePolicy,omitempty" require:"true"`
	CreateTime                        *string                                                                              `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	VPCId                             *string                                                                              `json:"VPCId,omitempty" xml:"VPCId,omitempty" require:"true"`
	HostNumber                        *int                                                                                 `json:"HostNumber,omitempty" xml:"HostNumber,omitempty" require:"true"`
	InstanceNumber                    *int                                                                                 `json:"InstanceNumber,omitempty" xml:"InstanceNumber,omitempty" require:"true"`
	Engine                            *string                                                                              `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	Text                              *string                                                                              `json:"Text,omitempty" xml:"Text,omitempty" require:"true"`
	DedicatedHostCountGroupByHostType map[string]interface{}                                                               `json:"DedicatedHostCountGroupByHostType,omitempty" xml:"DedicatedHostCountGroupByHostType,omitempty" require:"true"`
	BastionInstanceId                 *string                                                                              `json:"BastionInstanceId,omitempty" xml:"BastionInstanceId,omitempty" require:"true"`
	OpenPermission                    *string                                                                              `json:"OpenPermission,omitempty" xml:"OpenPermission,omitempty" require:"true"`
	MemUtility                        *float32                                                                             `json:"MemUtility,omitempty" xml:"MemUtility,omitempty" require:"true"`
	MemUsedAmount                     *float32                                                                             `json:"MemUsedAmount,omitempty" xml:"MemUsedAmount,omitempty" require:"true"`
	DiskUtility                       *float32                                                                             `json:"DiskUtility,omitempty" xml:"DiskUtility,omitempty" require:"true"`
	DiskUsedAmount                    *float32                                                                             `json:"DiskUsedAmount,omitempty" xml:"DiskUsedAmount,omitempty" require:"true"`
	CpuAllocateRation                 *float32                                                                             `json:"CpuAllocateRation,omitempty" xml:"CpuAllocateRation,omitempty" require:"true"`
	CpuAllocatedAmount                *float32                                                                             `json:"CpuAllocatedAmount,omitempty" xml:"CpuAllocatedAmount,omitempty" require:"true"`
	MemAllocateRation                 *float32                                                                             `json:"MemAllocateRation,omitempty" xml:"MemAllocateRation,omitempty" require:"true"`
	MemAllocatedAmount                *float32                                                                             `json:"MemAllocatedAmount,omitempty" xml:"MemAllocatedAmount,omitempty" require:"true"`
	DiskAllocateRation                *float32                                                                             `json:"DiskAllocateRation,omitempty" xml:"DiskAllocateRation,omitempty" require:"true"`
	DiskAllocatedAmount               *float32                                                                             `json:"DiskAllocatedAmount,omitempty" xml:"DiskAllocatedAmount,omitempty" require:"true"`
	ZoneIDList                        *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroupsZoneIDList `json:"ZoneIDList,omitempty" xml:"ZoneIDList,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetDedicatedHostGroupDesc(v string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.DedicatedHostGroupDesc = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetCpuAllocationRatio(v int) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.CpuAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetMemAllocationRatio(v int) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.MemAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetDiskAllocationRatio(v int) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.DiskAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetAllocationPolicy(v string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.AllocationPolicy = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetHostReplacePolicy(v string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.HostReplacePolicy = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetCreateTime(v string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.CreateTime = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetVPCId(v string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.VPCId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetHostNumber(v int) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.HostNumber = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetInstanceNumber(v int) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.InstanceNumber = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetEngine(v string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.Engine = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetText(v string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.Text = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetDedicatedHostCountGroupByHostType(v map[string]interface{}) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.DedicatedHostCountGroupByHostType = v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetBastionInstanceId(v string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.BastionInstanceId = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetOpenPermission(v string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.OpenPermission = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetMemUtility(v float32) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.MemUtility = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetMemUsedAmount(v float32) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.MemUsedAmount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetDiskUtility(v float32) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.DiskUtility = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetDiskUsedAmount(v float32) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.DiskUsedAmount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetCpuAllocateRation(v float32) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.CpuAllocateRation = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetCpuAllocatedAmount(v float32) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.CpuAllocatedAmount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetMemAllocateRation(v float32) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.MemAllocateRation = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetMemAllocatedAmount(v float32) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.MemAllocatedAmount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetDiskAllocateRation(v float32) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.DiskAllocateRation = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetDiskAllocatedAmount(v float32) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.DiskAllocatedAmount = &v
	return s
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups) SetZoneIDList(v *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroupsZoneIDList) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroups {
	s.ZoneIDList = v
	return s
}

type DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroupsZoneIDList struct {
	// ZoneIDList
	ZoneIDList []*string `json:"ZoneIDList,omitempty" xml:"ZoneIDList,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroupsZoneIDList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroupsZoneIDList) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroupsZoneIDList) SetZoneIDList(v []*string) *DescribeDedicatedHostGroupsResponseDedicatedHostGroupsDedicatedHostGroupsZoneIDList {
	s.ZoneIDList = v
	return s
}

type CreateDedicatedHostGroupRequest struct {
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Engine              *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	CpuAllocationRatio  *int    `json:"CpuAllocationRatio,omitempty" xml:"CpuAllocationRatio,omitempty"`
	MemAllocationRatio  *int    `json:"MemAllocationRatio,omitempty" xml:"MemAllocationRatio,omitempty"`
	DiskAllocationRatio *int    `json:"DiskAllocationRatio,omitempty" xml:"DiskAllocationRatio,omitempty"`
	AllocationPolicy    *string `json:"AllocationPolicy,omitempty" xml:"AllocationPolicy,omitempty"`
	VPCId               *string `json:"VPCId,omitempty" xml:"VPCId,omitempty" require:"true"`
	HostReplacePolicy   *string `json:"HostReplacePolicy,omitempty" xml:"HostReplacePolicy,omitempty"`
	ClientToken         *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty" require:"true"`
	OpenPermission      *int    `json:"OpenPermission,omitempty" xml:"OpenPermission,omitempty"`
}

func (s CreateDedicatedHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostGroupRequest) SetRegionId(v string) *CreateDedicatedHostGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetEngine(v string) *CreateDedicatedHostGroupRequest {
	s.Engine = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetCpuAllocationRatio(v int) *CreateDedicatedHostGroupRequest {
	s.CpuAllocationRatio = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetMemAllocationRatio(v int) *CreateDedicatedHostGroupRequest {
	s.MemAllocationRatio = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetDiskAllocationRatio(v int) *CreateDedicatedHostGroupRequest {
	s.DiskAllocationRatio = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetAllocationPolicy(v string) *CreateDedicatedHostGroupRequest {
	s.AllocationPolicy = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetVPCId(v string) *CreateDedicatedHostGroupRequest {
	s.VPCId = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetHostReplacePolicy(v string) *CreateDedicatedHostGroupRequest {
	s.HostReplacePolicy = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetClientToken(v string) *CreateDedicatedHostGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDedicatedHostGroupRequest) SetOpenPermission(v int) *CreateDedicatedHostGroupRequest {
	s.OpenPermission = &v
	return s
}

type CreateDedicatedHostGroupResponse struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
}

func (s CreateDedicatedHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostGroupResponse) SetRequestId(v string) *CreateDedicatedHostGroupResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDedicatedHostGroupResponse) SetDedicatedHostGroupId(v string) *CreateDedicatedHostGroupResponse {
	s.DedicatedHostGroupId = &v
	return s
}

type DeleteDedicatedHostGroupRequest struct {
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDedicatedHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostGroupRequest) SetDedicatedHostGroupId(v string) *DeleteDedicatedHostGroupRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DeleteDedicatedHostGroupRequest) SetRegionId(v string) *DeleteDedicatedHostGroupRequest {
	s.RegionId = &v
	return s
}

type DeleteDedicatedHostGroupResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteDedicatedHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDedicatedHostGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDedicatedHostGroupResponse) SetRequestId(v string) *DeleteDedicatedHostGroupResponse {
	s.RequestId = &v
	return s
}

type ModifyDedicatedHostGroupAttributeRequest struct {
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId   *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	DedicatedHostGroupDesc *string `json:"DedicatedHostGroupDesc,omitempty" xml:"DedicatedHostGroupDesc,omitempty"`
	CpuAllocationRatio     *int    `json:"CpuAllocationRatio,omitempty" xml:"CpuAllocationRatio,omitempty"`
	MemAllocationRatio     *int    `json:"MemAllocationRatio,omitempty" xml:"MemAllocationRatio,omitempty"`
	DiskAllocationRatio    *int    `json:"DiskAllocationRatio,omitempty" xml:"DiskAllocationRatio,omitempty"`
	AllocationPolicy       *string `json:"AllocationPolicy,omitempty" xml:"AllocationPolicy,omitempty"`
	HostReplacePolicy      *string `json:"HostReplacePolicy,omitempty" xml:"HostReplacePolicy,omitempty"`
}

func (s ModifyDedicatedHostGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetDedicatedHostGroupId(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetDedicatedHostGroupDesc(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.DedicatedHostGroupDesc = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetCpuAllocationRatio(v int) *ModifyDedicatedHostGroupAttributeRequest {
	s.CpuAllocationRatio = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetMemAllocationRatio(v int) *ModifyDedicatedHostGroupAttributeRequest {
	s.MemAllocationRatio = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetDiskAllocationRatio(v int) *ModifyDedicatedHostGroupAttributeRequest {
	s.DiskAllocationRatio = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetAllocationPolicy(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.AllocationPolicy = &v
	return s
}

func (s *ModifyDedicatedHostGroupAttributeRequest) SetHostReplacePolicy(v string) *ModifyDedicatedHostGroupAttributeRequest {
	s.HostReplacePolicy = &v
	return s
}

type ModifyDedicatedHostGroupAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDedicatedHostGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostGroupAttributeResponse) SetRequestId(v string) *ModifyDedicatedHostGroupAttributeResponse {
	s.RequestId = &v
	return s
}

type RestartDedicatedHostRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	FailoverMode    *string `json:"FailoverMode,omitempty" xml:"FailoverMode,omitempty" require:"true"`
}

func (s RestartDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *RestartDedicatedHostRequest) SetRegionId(v string) *RestartDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *RestartDedicatedHostRequest) SetDedicatedHostId(v string) *RestartDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *RestartDedicatedHostRequest) SetFailoverMode(v string) *RestartDedicatedHostRequest {
	s.FailoverMode = &v
	return s
}

type RestartDedicatedHostResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TaskId          *int    `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
}

func (s RestartDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *RestartDedicatedHostResponse) SetRequestId(v string) *RestartDedicatedHostResponse {
	s.RequestId = &v
	return s
}

func (s *RestartDedicatedHostResponse) SetTaskId(v int) *RestartDedicatedHostResponse {
	s.TaskId = &v
	return s
}

func (s *RestartDedicatedHostResponse) SetDedicatedHostId(v string) *RestartDedicatedHostResponse {
	s.DedicatedHostId = &v
	return s
}

type ReplaceDedicatedHostRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	FailoverMode    *string `json:"FailoverMode,omitempty" xml:"FailoverMode,omitempty" require:"true"`
}

func (s ReplaceDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ReplaceDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *ReplaceDedicatedHostRequest) SetRegionId(v string) *ReplaceDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *ReplaceDedicatedHostRequest) SetDedicatedHostId(v string) *ReplaceDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ReplaceDedicatedHostRequest) SetFailoverMode(v string) *ReplaceDedicatedHostRequest {
	s.FailoverMode = &v
	return s
}

type ReplaceDedicatedHostResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TaskId          *int    `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
}

func (s ReplaceDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ReplaceDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *ReplaceDedicatedHostResponse) SetRequestId(v string) *ReplaceDedicatedHostResponse {
	s.RequestId = &v
	return s
}

func (s *ReplaceDedicatedHostResponse) SetTaskId(v int) *ReplaceDedicatedHostResponse {
	s.TaskId = &v
	return s
}

func (s *ReplaceDedicatedHostResponse) SetDedicatedHostId(v string) *ReplaceDedicatedHostResponse {
	s.DedicatedHostId = &v
	return s
}

type DescribeDedicatedHostsRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	OrderId              *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	HostType             *string `json:"HostType,omitempty" xml:"HostType,omitempty"`
	HostStatus           *string `json:"HostStatus,omitempty" xml:"HostStatus,omitempty"`
	AllocationStatus     *string `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
}

func (s DescribeDedicatedHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsRequest) SetRegionId(v string) *DescribeDedicatedHostsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetOrderId(v int64) *DescribeDedicatedHostsRequest {
	s.OrderId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetHostType(v string) *DescribeDedicatedHostsRequest {
	s.HostType = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetHostStatus(v string) *DescribeDedicatedHostsRequest {
	s.HostStatus = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetAllocationStatus(v string) *DescribeDedicatedHostsRequest {
	s.AllocationStatus = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetZoneId(v string) *DescribeDedicatedHostsRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostsRequest) SetDedicatedHostId(v string) *DescribeDedicatedHostsRequest {
	s.DedicatedHostId = &v
	return s
}

type DescribeDedicatedHostsResponse struct {
	RequestId            *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DedicatedHostGroupId *string                                       `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	DedicatedHosts       *DescribeDedicatedHostsResponseDedicatedHosts `json:"DedicatedHosts,omitempty" xml:"DedicatedHosts,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDedicatedHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponse) SetRequestId(v string) *DescribeDedicatedHostsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostsResponse) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostsResponse {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsResponse) SetDedicatedHosts(v *DescribeDedicatedHostsResponseDedicatedHosts) *DescribeDedicatedHostsResponse {
	s.DedicatedHosts = v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHosts struct {
	DedicatedHosts []*DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts `json:"DedicatedHosts,omitempty" xml:"DedicatedHosts,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDedicatedHostsResponseDedicatedHosts) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHosts) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHosts) SetDedicatedHosts(v []*DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) *DescribeDedicatedHostsResponseDedicatedHosts {
	s.DedicatedHosts = v
	return s
}

type DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts struct {
	HostName             *string `json:"HostName,omitempty" xml:"HostName,omitempty" require:"true"`
	HostStatus           *string `json:"HostStatus,omitempty" xml:"HostStatus,omitempty" require:"true"`
	InstanceNumber       *string `json:"InstanceNumber,omitempty" xml:"InstanceNumber,omitempty" require:"true"`
	CPUAllocationRatio   *string `json:"CPUAllocationRatio,omitempty" xml:"CPUAllocationRatio,omitempty" require:"true"`
	MemAllocationRatio   *string `json:"MemAllocationRatio,omitempty" xml:"MemAllocationRatio,omitempty" require:"true"`
	DiskAllocationRatio  *string `json:"DiskAllocationRatio,omitempty" xml:"DiskAllocationRatio,omitempty" require:"true"`
	VPCId                *string `json:"VPCId,omitempty" xml:"VPCId,omitempty" require:"true"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	IPAddress            *string `json:"IPAddress,omitempty" xml:"IPAddress,omitempty" require:"true"`
	HostClass            *string `json:"HostClass,omitempty" xml:"HostClass,omitempty" require:"true"`
	CreatedTime          *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty" require:"true"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	AllocationStatus     *string `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty" require:"true"`
	EndTime              *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	HostType             *string `json:"HostType,omitempty" xml:"HostType,omitempty" require:"true"`
	BastionInstanceId    *string `json:"BastionInstanceId,omitempty" xml:"BastionInstanceId,omitempty" require:"true"`
	OpenPermission       *string `json:"OpenPermission,omitempty" xml:"OpenPermission,omitempty" require:"true"`
	AccountName          *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	HostCPU              *string `json:"HostCPU,omitempty" xml:"HostCPU,omitempty" require:"true"`
	HostMem              *string `json:"HostMem,omitempty" xml:"HostMem,omitempty" require:"true"`
	HostStorage          *string `json:"HostStorage,omitempty" xml:"HostStorage,omitempty" require:"true"`
	CpuUsed              *string `json:"CpuUsed,omitempty" xml:"CpuUsed,omitempty" require:"true"`
	MemoryUsed           *string `json:"MemoryUsed,omitempty" xml:"MemoryUsed,omitempty" require:"true"`
	StorageUsed          *string `json:"StorageUsed,omitempty" xml:"StorageUsed,omitempty" require:"true"`
	ImageCategory        *string `json:"ImageCategory,omitempty" xml:"ImageCategory,omitempty" require:"true"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetHostName(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.HostName = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetHostStatus(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.HostStatus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetInstanceNumber(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.InstanceNumber = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetCPUAllocationRatio(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.CPUAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetMemAllocationRatio(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.MemAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetDiskAllocationRatio(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.DiskAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetVPCId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.VPCId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetVSwitchId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetZoneId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetIPAddress(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.IPAddress = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetHostClass(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.HostClass = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetCreatedTime(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetDedicatedHostId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetAllocationStatus(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.AllocationStatus = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetEndTime(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.EndTime = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetHostType(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.HostType = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetBastionInstanceId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.BastionInstanceId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetOpenPermission(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.OpenPermission = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetAccountName(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.AccountName = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetHostCPU(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.HostCPU = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetHostMem(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.HostMem = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetHostStorage(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.HostStorage = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetCpuUsed(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.CpuUsed = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetMemoryUsed(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.MemoryUsed = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetStorageUsed(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.StorageUsed = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetImageCategory(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.ImageCategory = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts) SetEngine(v string) *DescribeDedicatedHostsResponseDedicatedHostsDedicatedHosts {
	s.Engine = &v
	return s
}

type DescribeDedicatedHostAttributeRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
}

func (s DescribeDedicatedHostAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAttributeRequest) SetRegionId(v string) *DescribeDedicatedHostAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeRequest) SetDedicatedHostId(v string) *DescribeDedicatedHostAttributeRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeRequest) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostAttributeRequest {
	s.DedicatedHostGroupId = &v
	return s
}

type DescribeDedicatedHostAttributeResponse struct {
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DedicatedHostGroupId   *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	DedicatedHostId        *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	RegionId               *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ZoneId                 *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	VPCId                  *string `json:"VPCId,omitempty" xml:"VPCId,omitempty" require:"true"`
	VSwitchId              *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	IPAddress              *string `json:"IPAddress,omitempty" xml:"IPAddress,omitempty" require:"true"`
	HostName               *string `json:"HostName,omitempty" xml:"HostName,omitempty" require:"true"`
	HostStatus             *string `json:"HostStatus,omitempty" xml:"HostStatus,omitempty" require:"true"`
	HostClass              *string `json:"HostClass,omitempty" xml:"HostClass,omitempty" require:"true"`
	HostCPU                *int    `json:"HostCPU,omitempty" xml:"HostCPU,omitempty" require:"true"`
	HostMem                *int    `json:"HostMem,omitempty" xml:"HostMem,omitempty" require:"true"`
	HostStorage            *int    `json:"HostStorage,omitempty" xml:"HostStorage,omitempty" require:"true"`
	CPUAllocationRatio     *string `json:"CPUAllocationRatio,omitempty" xml:"CPUAllocationRatio,omitempty" require:"true"`
	MemAllocationRatio     *string `json:"MemAllocationRatio,omitempty" xml:"MemAllocationRatio,omitempty" require:"true"`
	DiskAllocationRatio    *string `json:"DiskAllocationRatio,omitempty" xml:"DiskAllocationRatio,omitempty" require:"true"`
	InstanceNumber         *int    `json:"InstanceNumber,omitempty" xml:"InstanceNumber,omitempty" require:"true"`
	InstanceNumberMaster   *int    `json:"InstanceNumberMaster,omitempty" xml:"InstanceNumberMaster,omitempty" require:"true"`
	InstanceNumberSlave    *int    `json:"InstanceNumberSlave,omitempty" xml:"InstanceNumberSlave,omitempty" require:"true"`
	InstanceNumberROMaster *int    `json:"InstanceNumberROMaster,omitempty" xml:"InstanceNumberROMaster,omitempty" require:"true"`
	InstanceNumberROSlave  *int    `json:"InstanceNumberROSlave,omitempty" xml:"InstanceNumberROSlave,omitempty" require:"true"`
	CreatedTime            *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty" require:"true"`
	ExpiredTime            *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty" require:"true"`
	AutoRenew              *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty" require:"true"`
	AllocationStatus       *string `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty" require:"true"`
	CpuUsed                *string `json:"CpuUsed,omitempty" xml:"CpuUsed,omitempty" require:"true"`
	MemoryUsed             *string `json:"MemoryUsed,omitempty" xml:"MemoryUsed,omitempty" require:"true"`
	StorageUsed            *string `json:"StorageUsed,omitempty" xml:"StorageUsed,omitempty" require:"true"`
	HostType               *string `json:"HostType,omitempty" xml:"HostType,omitempty" require:"true"`
	AccountName            *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	OpenPermission         *string `json:"OpenPermission,omitempty" xml:"OpenPermission,omitempty" require:"true"`
	ImageCategory          *string `json:"ImageCategory,omitempty" xml:"ImageCategory,omitempty" require:"true"`
}

func (s DescribeDedicatedHostAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedHostAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedHostAttributeResponse) SetRequestId(v string) *DescribeDedicatedHostAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetDedicatedHostGroupId(v string) *DescribeDedicatedHostAttributeResponse {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetDedicatedHostId(v string) *DescribeDedicatedHostAttributeResponse {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetRegionId(v string) *DescribeDedicatedHostAttributeResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetZoneId(v string) *DescribeDedicatedHostAttributeResponse {
	s.ZoneId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetVPCId(v string) *DescribeDedicatedHostAttributeResponse {
	s.VPCId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetVSwitchId(v string) *DescribeDedicatedHostAttributeResponse {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetIPAddress(v string) *DescribeDedicatedHostAttributeResponse {
	s.IPAddress = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetHostName(v string) *DescribeDedicatedHostAttributeResponse {
	s.HostName = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetHostStatus(v string) *DescribeDedicatedHostAttributeResponse {
	s.HostStatus = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetHostClass(v string) *DescribeDedicatedHostAttributeResponse {
	s.HostClass = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetHostCPU(v int) *DescribeDedicatedHostAttributeResponse {
	s.HostCPU = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetHostMem(v int) *DescribeDedicatedHostAttributeResponse {
	s.HostMem = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetHostStorage(v int) *DescribeDedicatedHostAttributeResponse {
	s.HostStorage = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetCPUAllocationRatio(v string) *DescribeDedicatedHostAttributeResponse {
	s.CPUAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetMemAllocationRatio(v string) *DescribeDedicatedHostAttributeResponse {
	s.MemAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetDiskAllocationRatio(v string) *DescribeDedicatedHostAttributeResponse {
	s.DiskAllocationRatio = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetInstanceNumber(v int) *DescribeDedicatedHostAttributeResponse {
	s.InstanceNumber = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetInstanceNumberMaster(v int) *DescribeDedicatedHostAttributeResponse {
	s.InstanceNumberMaster = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetInstanceNumberSlave(v int) *DescribeDedicatedHostAttributeResponse {
	s.InstanceNumberSlave = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetInstanceNumberROMaster(v int) *DescribeDedicatedHostAttributeResponse {
	s.InstanceNumberROMaster = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetInstanceNumberROSlave(v int) *DescribeDedicatedHostAttributeResponse {
	s.InstanceNumberROSlave = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetCreatedTime(v string) *DescribeDedicatedHostAttributeResponse {
	s.CreatedTime = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetExpiredTime(v string) *DescribeDedicatedHostAttributeResponse {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetAutoRenew(v string) *DescribeDedicatedHostAttributeResponse {
	s.AutoRenew = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetAllocationStatus(v string) *DescribeDedicatedHostAttributeResponse {
	s.AllocationStatus = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetCpuUsed(v string) *DescribeDedicatedHostAttributeResponse {
	s.CpuUsed = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetMemoryUsed(v string) *DescribeDedicatedHostAttributeResponse {
	s.MemoryUsed = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetStorageUsed(v string) *DescribeDedicatedHostAttributeResponse {
	s.StorageUsed = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetHostType(v string) *DescribeDedicatedHostAttributeResponse {
	s.HostType = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetAccountName(v string) *DescribeDedicatedHostAttributeResponse {
	s.AccountName = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetOpenPermission(v string) *DescribeDedicatedHostAttributeResponse {
	s.OpenPermission = &v
	return s
}

func (s *DescribeDedicatedHostAttributeResponse) SetImageCategory(v string) *DescribeDedicatedHostAttributeResponse {
	s.ImageCategory = &v
	return s
}

type ClearDedicatedHostRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	FailoverMode    *string `json:"FailoverMode,omitempty" xml:"FailoverMode,omitempty" require:"true"`
}

func (s ClearDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *ClearDedicatedHostRequest) SetRegionId(v string) *ClearDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *ClearDedicatedHostRequest) SetDedicatedHostId(v string) *ClearDedicatedHostRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ClearDedicatedHostRequest) SetFailoverMode(v string) *ClearDedicatedHostRequest {
	s.FailoverMode = &v
	return s
}

type ClearDedicatedHostResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TaskId          *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
}

func (s ClearDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ClearDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *ClearDedicatedHostResponse) SetRequestId(v string) *ClearDedicatedHostResponse {
	s.RequestId = &v
	return s
}

func (s *ClearDedicatedHostResponse) SetTaskId(v string) *ClearDedicatedHostResponse {
	s.TaskId = &v
	return s
}

func (s *ClearDedicatedHostResponse) SetDedicatedHostId(v string) *ClearDedicatedHostResponse {
	s.DedicatedHostId = &v
	return s
}

type ModifyDedicatedHostAttributeRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostId  *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
	HostName         *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	AllocationStatus *string `json:"AllocationStatus,omitempty" xml:"AllocationStatus,omitempty"`
}

func (s ModifyDedicatedHostAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeRequest) SetRegionId(v string) *ModifyDedicatedHostAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetDedicatedHostId(v string) *ModifyDedicatedHostAttributeRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetHostName(v string) *ModifyDedicatedHostAttributeRequest {
	s.HostName = &v
	return s
}

func (s *ModifyDedicatedHostAttributeRequest) SetAllocationStatus(v string) *ModifyDedicatedHostAttributeRequest {
	s.AllocationStatus = &v
	return s
}

type ModifyDedicatedHostAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDedicatedHostAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedHostAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedHostAttributeResponse) SetRequestId(v string) *ModifyDedicatedHostAttributeResponse {
	s.RequestId = &v
	return s
}

type MigrateDBInstanceRequest struct {
	RegionId                       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId           *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	DBInstanceId                   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	TargetDedicatedHostIdForMaster *string `json:"TargetDedicatedHostIdForMaster,omitempty" xml:"TargetDedicatedHostIdForMaster,omitempty"`
	TargetDedicatedHostIdForSlave  *string `json:"TargetDedicatedHostIdForSlave,omitempty" xml:"TargetDedicatedHostIdForSlave,omitempty"`
	EffectiveTime                  *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	SpecifiedTime                  *string `json:"SpecifiedTime,omitempty" xml:"SpecifiedTime,omitempty"`
	ZoneIdForLog                   *string `json:"ZoneIdForLog,omitempty" xml:"ZoneIdForLog,omitempty"`
	ZoneIdForFollower              *string `json:"ZoneIdForFollower,omitempty" xml:"ZoneIdForFollower,omitempty"`
}

func (s MigrateDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *MigrateDBInstanceRequest) SetRegionId(v string) *MigrateDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetDedicatedHostGroupId(v string) *MigrateDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetDBInstanceId(v string) *MigrateDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetTargetDedicatedHostIdForMaster(v string) *MigrateDBInstanceRequest {
	s.TargetDedicatedHostIdForMaster = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetTargetDedicatedHostIdForSlave(v string) *MigrateDBInstanceRequest {
	s.TargetDedicatedHostIdForSlave = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetEffectiveTime(v string) *MigrateDBInstanceRequest {
	s.EffectiveTime = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetSpecifiedTime(v string) *MigrateDBInstanceRequest {
	s.SpecifiedTime = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetZoneIdForLog(v string) *MigrateDBInstanceRequest {
	s.ZoneIdForLog = &v
	return s
}

func (s *MigrateDBInstanceRequest) SetZoneIdForFollower(v string) *MigrateDBInstanceRequest {
	s.ZoneIdForFollower = &v
	return s
}

type MigrateDBInstanceResponse struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TaskId      *int    `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	MigrationId *int    `json:"MigrationId,omitempty" xml:"MigrationId,omitempty" require:"true"`
}

func (s MigrateDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *MigrateDBInstanceResponse) SetRequestId(v string) *MigrateDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *MigrateDBInstanceResponse) SetTaskId(v int) *MigrateDBInstanceResponse {
	s.TaskId = &v
	return s
}

func (s *MigrateDBInstanceResponse) SetMigrationId(v int) *MigrateDBInstanceResponse {
	s.MigrationId = &v
	return s
}

type CreateDedicatedHostRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	HostName             *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	HostClass            *string `json:"HostClass,omitempty" xml:"HostClass,omitempty" require:"true"`
	PayType              *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	Period               *string `json:"Period,omitempty" xml:"Period,omitempty"`
	UsedTime             *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty" require:"true"`
	AutoRenew            *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty" require:"true"`
}

func (s CreateDedicatedHostRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostRequest) SetRegionId(v string) *CreateDedicatedHostRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetDedicatedHostGroupId(v string) *CreateDedicatedHostRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetHostName(v string) *CreateDedicatedHostRequest {
	s.HostName = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetZoneId(v string) *CreateDedicatedHostRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetVSwitchId(v string) *CreateDedicatedHostRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetHostClass(v string) *CreateDedicatedHostRequest {
	s.HostClass = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetPayType(v string) *CreateDedicatedHostRequest {
	s.PayType = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetPeriod(v string) *CreateDedicatedHostRequest {
	s.Period = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetUsedTime(v string) *CreateDedicatedHostRequest {
	s.UsedTime = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetClientToken(v string) *CreateDedicatedHostRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDedicatedHostRequest) SetAutoRenew(v string) *CreateDedicatedHostRequest {
	s.AutoRenew = &v
	return s
}

type CreateDedicatedHostResponse struct {
	RequestId        *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	OrderId          *int64                                       `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
	DedicateHostList *CreateDedicatedHostResponseDedicateHostList `json:"DedicateHostList,omitempty" xml:"DedicateHostList,omitempty" require:"true" type:"Struct"`
}

func (s CreateDedicatedHostResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostResponse) SetRequestId(v string) *CreateDedicatedHostResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDedicatedHostResponse) SetOrderId(v int64) *CreateDedicatedHostResponse {
	s.OrderId = &v
	return s
}

func (s *CreateDedicatedHostResponse) SetDedicateHostList(v *CreateDedicatedHostResponseDedicateHostList) *CreateDedicatedHostResponse {
	s.DedicateHostList = v
	return s
}

type CreateDedicatedHostResponseDedicateHostList struct {
	DedicateHostList []*CreateDedicatedHostResponseDedicateHostListDedicateHostList `json:"DedicateHostList,omitempty" xml:"DedicateHostList,omitempty" require:"true" type:"Repeated"`
}

func (s CreateDedicatedHostResponseDedicateHostList) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostResponseDedicateHostList) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostResponseDedicateHostList) SetDedicateHostList(v []*CreateDedicatedHostResponseDedicateHostListDedicateHostList) *CreateDedicatedHostResponseDedicateHostList {
	s.DedicateHostList = v
	return s
}

type CreateDedicatedHostResponseDedicateHostListDedicateHostList struct {
	DedicatedHostId *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty" require:"true"`
}

func (s CreateDedicatedHostResponseDedicateHostListDedicateHostList) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedHostResponseDedicateHostListDedicateHostList) GoString() string {
	return s.String()
}

func (s *CreateDedicatedHostResponseDedicateHostListDedicateHostList) SetDedicatedHostId(v string) *CreateDedicatedHostResponseDedicateHostListDedicateHostList {
	s.DedicatedHostId = &v
	return s
}

type RebuildDBInstanceRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	RebuildNodeType      *string `json:"RebuildNodeType,omitempty" xml:"RebuildNodeType,omitempty"`
}

func (s RebuildDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebuildDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebuildDBInstanceRequest) SetRegionId(v string) *RebuildDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetDedicatedHostGroupId(v string) *RebuildDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetDBInstanceId(v string) *RebuildDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetDedicatedHostId(v string) *RebuildDBInstanceRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *RebuildDBInstanceRequest) SetRebuildNodeType(v string) *RebuildDBInstanceRequest {
	s.RebuildNodeType = &v
	return s
}

type RebuildDBInstanceResponse struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TaskId      *int    `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	MigrationId *int    `json:"MigrationId,omitempty" xml:"MigrationId,omitempty" require:"true"`
}

func (s RebuildDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebuildDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebuildDBInstanceResponse) SetRequestId(v string) *RebuildDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *RebuildDBInstanceResponse) SetTaskId(v int) *RebuildDBInstanceResponse {
	s.TaskId = &v
	return s
}

func (s *RebuildDBInstanceResponse) SetMigrationId(v int) *RebuildDBInstanceResponse {
	s.MigrationId = &v
	return s
}

type DescribeDBProxyEndpointRequest struct {
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBProxyEndpointId    *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty"`
	DBProxyConnectString *string `json:"DBProxyConnectString,omitempty" xml:"DBProxyConnectString,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeDBProxyEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyEndpointRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyEndpointRequest) SetDBInstanceId(v string) *DescribeDBProxyEndpointRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBProxyEndpointRequest) SetDBProxyEndpointId(v string) *DescribeDBProxyEndpointRequest {
	s.DBProxyEndpointId = &v
	return s
}

func (s *DescribeDBProxyEndpointRequest) SetDBProxyConnectString(v string) *DescribeDBProxyEndpointRequest {
	s.DBProxyConnectString = &v
	return s
}

func (s *DescribeDBProxyEndpointRequest) SetRegionId(v string) *DescribeDBProxyEndpointRequest {
	s.RegionId = &v
	return s
}

type DescribeDBProxyEndpointResponse struct {
	RequestId                        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBProxyEndpointId                *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty" require:"true"`
	DBProxyConnectString             *string `json:"DBProxyConnectString,omitempty" xml:"DBProxyConnectString,omitempty" require:"true"`
	DBProxyConnectStringPort         *string `json:"DBProxyConnectStringPort,omitempty" xml:"DBProxyConnectStringPort,omitempty" require:"true"`
	DBProxyConnectStringNetType      *string `json:"DBProxyConnectStringNetType,omitempty" xml:"DBProxyConnectStringNetType,omitempty" require:"true"`
	DBProxyFeatures                  *string `json:"DBProxyFeatures,omitempty" xml:"DBProxyFeatures,omitempty" require:"true"`
	ReadOnlyInstanceMaxDelayTime     *string `json:"ReadOnlyInstanceMaxDelayTime,omitempty" xml:"ReadOnlyInstanceMaxDelayTime,omitempty" require:"true"`
	ReadOnlyInstanceDistributionType *string `json:"ReadOnlyInstanceDistributionType,omitempty" xml:"ReadOnlyInstanceDistributionType,omitempty" require:"true"`
	ReadOnlyInstanceWeight           *string `json:"ReadOnlyInstanceWeight,omitempty" xml:"ReadOnlyInstanceWeight,omitempty" require:"true"`
}

func (s DescribeDBProxyEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyEndpointResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyEndpointResponse) SetRequestId(v string) *DescribeDBProxyEndpointResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBProxyEndpointResponse) SetDBProxyEndpointId(v string) *DescribeDBProxyEndpointResponse {
	s.DBProxyEndpointId = &v
	return s
}

func (s *DescribeDBProxyEndpointResponse) SetDBProxyConnectString(v string) *DescribeDBProxyEndpointResponse {
	s.DBProxyConnectString = &v
	return s
}

func (s *DescribeDBProxyEndpointResponse) SetDBProxyConnectStringPort(v string) *DescribeDBProxyEndpointResponse {
	s.DBProxyConnectStringPort = &v
	return s
}

func (s *DescribeDBProxyEndpointResponse) SetDBProxyConnectStringNetType(v string) *DescribeDBProxyEndpointResponse {
	s.DBProxyConnectStringNetType = &v
	return s
}

func (s *DescribeDBProxyEndpointResponse) SetDBProxyFeatures(v string) *DescribeDBProxyEndpointResponse {
	s.DBProxyFeatures = &v
	return s
}

func (s *DescribeDBProxyEndpointResponse) SetReadOnlyInstanceMaxDelayTime(v string) *DescribeDBProxyEndpointResponse {
	s.ReadOnlyInstanceMaxDelayTime = &v
	return s
}

func (s *DescribeDBProxyEndpointResponse) SetReadOnlyInstanceDistributionType(v string) *DescribeDBProxyEndpointResponse {
	s.ReadOnlyInstanceDistributionType = &v
	return s
}

func (s *DescribeDBProxyEndpointResponse) SetReadOnlyInstanceWeight(v string) *DescribeDBProxyEndpointResponse {
	s.ReadOnlyInstanceWeight = &v
	return s
}

type DescribeDBProxyPerformanceRequest struct {
	DBInstanceId        *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBProxyInstanceType *string `json:"DBProxyInstanceType,omitempty" xml:"DBProxyInstanceType,omitempty"`
	StartTime           *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime             *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	MetricsName         *string `json:"MetricsName,omitempty" xml:"MetricsName,omitempty" require:"true"`
}

func (s DescribeDBProxyPerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceRequest) SetDBInstanceId(v string) *DescribeDBProxyPerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetDBProxyInstanceType(v string) *DescribeDBProxyPerformanceRequest {
	s.DBProxyInstanceType = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetStartTime(v string) *DescribeDBProxyPerformanceRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetEndTime(v string) *DescribeDBProxyPerformanceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetRegionId(v string) *DescribeDBProxyPerformanceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBProxyPerformanceRequest) SetMetricsName(v string) *DescribeDBProxyPerformanceRequest {
	s.MetricsName = &v
	return s
}

type DescribeDBProxyPerformanceResponse struct {
	RequestId       *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId    *string                                            `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime       *string                                            `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime         *string                                            `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PerformanceKeys *DescribeDBProxyPerformanceResponsePerformanceKeys `json:"PerformanceKeys,omitempty" xml:"PerformanceKeys,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBProxyPerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponse) SetRequestId(v string) *DescribeDBProxyPerformanceResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponse) SetDBInstanceId(v string) *DescribeDBProxyPerformanceResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponse) SetStartTime(v string) *DescribeDBProxyPerformanceResponse {
	s.StartTime = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponse) SetEndTime(v string) *DescribeDBProxyPerformanceResponse {
	s.EndTime = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponse) SetPerformanceKeys(v *DescribeDBProxyPerformanceResponsePerformanceKeys) *DescribeDBProxyPerformanceResponse {
	s.PerformanceKeys = v
	return s
}

type DescribeDBProxyPerformanceResponsePerformanceKeys struct {
	PerformanceKey []*DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey `json:"PerformanceKey,omitempty" xml:"PerformanceKey,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBProxyPerformanceResponsePerformanceKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponsePerformanceKeys) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponsePerformanceKeys) SetPerformanceKey(v []*DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey) *DescribeDBProxyPerformanceResponsePerformanceKeys {
	s.PerformanceKey = v
	return s
}

type DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey struct {
	Key         *string                                                                `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	ValueFormat *string                                                                `json:"ValueFormat,omitempty" xml:"ValueFormat,omitempty" require:"true"`
	Values      *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValues `json:"Values,omitempty" xml:"Values,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey) SetKey(v string) *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey {
	s.Key = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey) SetValueFormat(v string) *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey {
	s.ValueFormat = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey) SetValues(v *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValues) *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKey {
	s.Values = v
	return s
}

type DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValues struct {
	PerformanceValue []*DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue `json:"PerformanceValue,omitempty" xml:"PerformanceValue,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValues) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValues) SetPerformanceValue(v []*DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue) *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValues {
	s.PerformanceValue = v
	return s
}

type DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue struct {
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
	Date  *string `json:"Date,omitempty" xml:"Date,omitempty" require:"true"`
}

func (s DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue) SetValue(v string) *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue {
	s.Value = &v
	return s
}

func (s *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue) SetDate(v string) *DescribeDBProxyPerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue {
	s.Date = &v
	return s
}

type DescribeDBProxyRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDBProxyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyRequest) SetDBInstanceId(v string) *DescribeDBProxyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBProxyRequest) SetRegionId(v string) *DescribeDBProxyRequest {
	s.RegionId = &v
	return s
}

type DescribeDBProxyResponse struct {
	RequestId                          *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBProxyServiceStatus               *string                                           `json:"DBProxyServiceStatus,omitempty" xml:"DBProxyServiceStatus,omitempty" require:"true"`
	DBProxyInstanceType                *string                                           `json:"DBProxyInstanceType,omitempty" xml:"DBProxyInstanceType,omitempty" require:"true"`
	DBProxyInstanceNum                 *int                                              `json:"DBProxyInstanceNum,omitempty" xml:"DBProxyInstanceNum,omitempty" require:"true"`
	DBProxyInstanceStatus              *string                                           `json:"DBProxyInstanceStatus,omitempty" xml:"DBProxyInstanceStatus,omitempty" require:"true"`
	DBProxyInstanceCurrentMinorVersion *string                                           `json:"DBProxyInstanceCurrentMinorVersion,omitempty" xml:"DBProxyInstanceCurrentMinorVersion,omitempty" require:"true"`
	DBProxyInstanceLatestMinorVersion  *string                                           `json:"DBProxyInstanceLatestMinorVersion,omitempty" xml:"DBProxyInstanceLatestMinorVersion,omitempty" require:"true"`
	DBProxyInstanceName                *string                                           `json:"DBProxyInstanceName,omitempty" xml:"DBProxyInstanceName,omitempty" require:"true"`
	DBProxyConnectStringItems          *DescribeDBProxyResponseDBProxyConnectStringItems `json:"DBProxyConnectStringItems,omitempty" xml:"DBProxyConnectStringItems,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBProxyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyResponse) SetRequestId(v string) *DescribeDBProxyResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBProxyResponse) SetDBProxyServiceStatus(v string) *DescribeDBProxyResponse {
	s.DBProxyServiceStatus = &v
	return s
}

func (s *DescribeDBProxyResponse) SetDBProxyInstanceType(v string) *DescribeDBProxyResponse {
	s.DBProxyInstanceType = &v
	return s
}

func (s *DescribeDBProxyResponse) SetDBProxyInstanceNum(v int) *DescribeDBProxyResponse {
	s.DBProxyInstanceNum = &v
	return s
}

func (s *DescribeDBProxyResponse) SetDBProxyInstanceStatus(v string) *DescribeDBProxyResponse {
	s.DBProxyInstanceStatus = &v
	return s
}

func (s *DescribeDBProxyResponse) SetDBProxyInstanceCurrentMinorVersion(v string) *DescribeDBProxyResponse {
	s.DBProxyInstanceCurrentMinorVersion = &v
	return s
}

func (s *DescribeDBProxyResponse) SetDBProxyInstanceLatestMinorVersion(v string) *DescribeDBProxyResponse {
	s.DBProxyInstanceLatestMinorVersion = &v
	return s
}

func (s *DescribeDBProxyResponse) SetDBProxyInstanceName(v string) *DescribeDBProxyResponse {
	s.DBProxyInstanceName = &v
	return s
}

func (s *DescribeDBProxyResponse) SetDBProxyConnectStringItems(v *DescribeDBProxyResponseDBProxyConnectStringItems) *DescribeDBProxyResponse {
	s.DBProxyConnectStringItems = v
	return s
}

type DescribeDBProxyResponseDBProxyConnectStringItems struct {
	DBProxyConnectStringItems []*DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems `json:"DBProxyConnectStringItems,omitempty" xml:"DBProxyConnectStringItems,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBProxyResponseDBProxyConnectStringItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyResponseDBProxyConnectStringItems) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyResponseDBProxyConnectStringItems) SetDBProxyConnectStringItems(v []*DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems) *DescribeDBProxyResponseDBProxyConnectStringItems {
	s.DBProxyConnectStringItems = v
	return s
}

type DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems struct {
	DBProxyEndpointId               *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty" require:"true"`
	DBProxyConnectString            *string `json:"DBProxyConnectString,omitempty" xml:"DBProxyConnectString,omitempty" require:"true"`
	DBProxyConnectStringPort        *string `json:"DBProxyConnectStringPort,omitempty" xml:"DBProxyConnectStringPort,omitempty" require:"true"`
	DBProxyConnectStringNetType     *string `json:"DBProxyConnectStringNetType,omitempty" xml:"DBProxyConnectStringNetType,omitempty" require:"true"`
	DBProxyVpcInstanceId            *string `json:"DBProxyVpcInstanceId,omitempty" xml:"DBProxyVpcInstanceId,omitempty" require:"true"`
	DBProxyEndpointName             *string `json:"DBProxyEndpointName,omitempty" xml:"DBProxyEndpointName,omitempty" require:"true"`
	DBProxyConnectStringNetWorkType *string `json:"DBProxyConnectStringNetWorkType,omitempty" xml:"DBProxyConnectStringNetWorkType,omitempty" require:"true"`
}

func (s DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems) GoString() string {
	return s.String()
}

func (s *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyEndpointId(v string) *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyEndpointId = &v
	return s
}

func (s *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyConnectString(v string) *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyConnectString = &v
	return s
}

func (s *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyConnectStringPort(v string) *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyConnectStringPort = &v
	return s
}

func (s *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyConnectStringNetType(v string) *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyConnectStringNetType = &v
	return s
}

func (s *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyVpcInstanceId(v string) *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyVpcInstanceId = &v
	return s
}

func (s *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyEndpointName(v string) *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyEndpointName = &v
	return s
}

func (s *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems) SetDBProxyConnectStringNetWorkType(v string) *DescribeDBProxyResponseDBProxyConnectStringItemsDBProxyConnectStringItems {
	s.DBProxyConnectStringNetWorkType = &v
	return s
}

type ModifyDBProxyEndpointRequest struct {
	DBInstanceId                     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBProxyEndpointId                *string `json:"DBProxyEndpointId,omitempty" xml:"DBProxyEndpointId,omitempty" require:"true"`
	ConfigDBProxyFeatures            *string `json:"ConfigDBProxyFeatures,omitempty" xml:"ConfigDBProxyFeatures,omitempty"`
	RegionId                         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReadOnlyInstanceMaxDelayTime     *string `json:"ReadOnlyInstanceMaxDelayTime,omitempty" xml:"ReadOnlyInstanceMaxDelayTime,omitempty"`
	ReadOnlyInstanceDistributionType *string `json:"ReadOnlyInstanceDistributionType,omitempty" xml:"ReadOnlyInstanceDistributionType,omitempty"`
	ReadOnlyInstanceWeight           *string `json:"ReadOnlyInstanceWeight,omitempty" xml:"ReadOnlyInstanceWeight,omitempty"`
}

func (s ModifyDBProxyEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyEndpointRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyEndpointRequest) SetDBInstanceId(v string) *ModifyDBProxyEndpointRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetDBProxyEndpointId(v string) *ModifyDBProxyEndpointRequest {
	s.DBProxyEndpointId = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetConfigDBProxyFeatures(v string) *ModifyDBProxyEndpointRequest {
	s.ConfigDBProxyFeatures = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetRegionId(v string) *ModifyDBProxyEndpointRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetReadOnlyInstanceMaxDelayTime(v string) *ModifyDBProxyEndpointRequest {
	s.ReadOnlyInstanceMaxDelayTime = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetReadOnlyInstanceDistributionType(v string) *ModifyDBProxyEndpointRequest {
	s.ReadOnlyInstanceDistributionType = &v
	return s
}

func (s *ModifyDBProxyEndpointRequest) SetReadOnlyInstanceWeight(v string) *ModifyDBProxyEndpointRequest {
	s.ReadOnlyInstanceWeight = &v
	return s
}

type ModifyDBProxyEndpointResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBProxyEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyEndpointResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyEndpointResponse) SetRequestId(v string) *ModifyDBProxyEndpointResponse {
	s.RequestId = &v
	return s
}

type ModifyDBProxyInstanceRequest struct {
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBProxyInstanceType   *string `json:"DBProxyInstanceType,omitempty" xml:"DBProxyInstanceType,omitempty" require:"true"`
	DBProxyInstanceNum    *string `json:"DBProxyInstanceNum,omitempty" xml:"DBProxyInstanceNum,omitempty" require:"true"`
	EffectiveTime         *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	EffectiveSpecificTime *string `json:"EffectiveSpecificTime,omitempty" xml:"EffectiveSpecificTime,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDBProxyInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyInstanceRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyInstanceRequest) SetDBInstanceId(v string) *ModifyDBProxyInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetDBProxyInstanceType(v string) *ModifyDBProxyInstanceRequest {
	s.DBProxyInstanceType = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetDBProxyInstanceNum(v string) *ModifyDBProxyInstanceRequest {
	s.DBProxyInstanceNum = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetEffectiveTime(v string) *ModifyDBProxyInstanceRequest {
	s.EffectiveTime = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetEffectiveSpecificTime(v string) *ModifyDBProxyInstanceRequest {
	s.EffectiveSpecificTime = &v
	return s
}

func (s *ModifyDBProxyInstanceRequest) SetRegionId(v string) *ModifyDBProxyInstanceRequest {
	s.RegionId = &v
	return s
}

type ModifyDBProxyInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBProxyInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyInstanceResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyInstanceResponse) SetRequestId(v string) *ModifyDBProxyInstanceResponse {
	s.RequestId = &v
	return s
}

type ModifyDBProxyRequest struct {
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ConfigDBProxyService *string `json:"ConfigDBProxyService,omitempty" xml:"ConfigDBProxyService,omitempty" require:"true"`
	DBProxyInstanceNum   *string `json:"DBProxyInstanceNum,omitempty" xml:"DBProxyInstanceNum,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	InstanceNetworkType  *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	VPCId                *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s ModifyDBProxyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyRequest) SetDBInstanceId(v string) *ModifyDBProxyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBProxyRequest) SetConfigDBProxyService(v string) *ModifyDBProxyRequest {
	s.ConfigDBProxyService = &v
	return s
}

func (s *ModifyDBProxyRequest) SetDBProxyInstanceNum(v string) *ModifyDBProxyRequest {
	s.DBProxyInstanceNum = &v
	return s
}

func (s *ModifyDBProxyRequest) SetRegionId(v string) *ModifyDBProxyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDBProxyRequest) SetInstanceNetworkType(v string) *ModifyDBProxyRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *ModifyDBProxyRequest) SetVPCId(v string) *ModifyDBProxyRequest {
	s.VPCId = &v
	return s
}

func (s *ModifyDBProxyRequest) SetVSwitchId(v string) *ModifyDBProxyRequest {
	s.VSwitchId = &v
	return s
}

type ModifyDBProxyResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBProxyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBProxyResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBProxyResponse) SetRequestId(v string) *ModifyDBProxyResponse {
	s.RequestId = &v
	return s
}

type ModifyHASwitchConfigRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	HAConfig     *string `json:"HAConfig,omitempty" xml:"HAConfig,omitempty"`
	ManualHATime *string `json:"ManualHATime,omitempty" xml:"ManualHATime,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s ModifyHASwitchConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHASwitchConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyHASwitchConfigRequest) SetDBInstanceId(v string) *ModifyHASwitchConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyHASwitchConfigRequest) SetHAConfig(v string) *ModifyHASwitchConfigRequest {
	s.HAConfig = &v
	return s
}

func (s *ModifyHASwitchConfigRequest) SetManualHATime(v string) *ModifyHASwitchConfigRequest {
	s.ManualHATime = &v
	return s
}

func (s *ModifyHASwitchConfigRequest) SetRegionId(v string) *ModifyHASwitchConfigRequest {
	s.RegionId = &v
	return s
}

type ModifyHASwitchConfigResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyHASwitchConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHASwitchConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyHASwitchConfigResponse) SetRequestId(v string) *ModifyHASwitchConfigResponse {
	s.RequestId = &v
	return s
}

type DescribeHASwitchConfigRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeHASwitchConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHASwitchConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeHASwitchConfigRequest) SetDBInstanceId(v string) *DescribeHASwitchConfigRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeHASwitchConfigRequest) SetRegionId(v string) *DescribeHASwitchConfigRequest {
	s.RegionId = &v
	return s
}

type DescribeHASwitchConfigResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	HAConfig     *string `json:"HAConfig,omitempty" xml:"HAConfig,omitempty" require:"true"`
	ManualHATime *string `json:"ManualHATime,omitempty" xml:"ManualHATime,omitempty" require:"true"`
}

func (s DescribeHASwitchConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHASwitchConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeHASwitchConfigResponse) SetRequestId(v string) *DescribeHASwitchConfigResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeHASwitchConfigResponse) SetHAConfig(v string) *DescribeHASwitchConfigResponse {
	s.HAConfig = &v
	return s
}

func (s *DescribeHASwitchConfigResponse) SetManualHATime(v string) *DescribeHASwitchConfigResponse {
	s.ManualHATime = &v
	return s
}

type ModifyActionEventPolicyRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	EnableEventLog *string `json:"EnableEventLog,omitempty" xml:"EnableEventLog,omitempty" require:"true"`
}

func (s ModifyActionEventPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyActionEventPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyActionEventPolicyRequest) SetRegionId(v string) *ModifyActionEventPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyActionEventPolicyRequest) SetEnableEventLog(v string) *ModifyActionEventPolicyRequest {
	s.EnableEventLog = &v
	return s
}

type ModifyActionEventPolicyResponse struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	EnableEventLog *string `json:"EnableEventLog,omitempty" xml:"EnableEventLog,omitempty" require:"true"`
}

func (s ModifyActionEventPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyActionEventPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyActionEventPolicyResponse) SetRequestId(v string) *ModifyActionEventPolicyResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyActionEventPolicyResponse) SetRegionId(v string) *ModifyActionEventPolicyResponse {
	s.RegionId = &v
	return s
}

func (s *ModifyActionEventPolicyResponse) SetEnableEventLog(v string) *ModifyActionEventPolicyResponse {
	s.EnableEventLog = &v
	return s
}

type DescribeActionEventPolicyRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeActionEventPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeActionEventPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeActionEventPolicyRequest) SetRegionId(v string) *DescribeActionEventPolicyRequest {
	s.RegionId = &v
	return s
}

type DescribeActionEventPolicyResponse struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	EnableEventLog *string `json:"EnableEventLog,omitempty" xml:"EnableEventLog,omitempty" require:"true"`
}

func (s DescribeActionEventPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeActionEventPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeActionEventPolicyResponse) SetRequestId(v string) *DescribeActionEventPolicyResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeActionEventPolicyResponse) SetRegionId(v string) *DescribeActionEventPolicyResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeActionEventPolicyResponse) SetEnableEventLog(v string) *DescribeActionEventPolicyResponse {
	s.EnableEventLog = &v
	return s
}

type DescribeEventsRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize   *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventsRequest) SetRegionId(v string) *DescribeEventsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEventsRequest) SetStartTime(v string) *DescribeEventsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeEventsRequest) SetEndTime(v string) *DescribeEventsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEventsRequest) SetPageSize(v int) *DescribeEventsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEventsRequest) SetPageNumber(v int) *DescribeEventsRequest {
	s.PageNumber = &v
	return s
}

type DescribeEventsResponse struct {
	RequestId        *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int                              `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageSize         *int                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageNumber       *int                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	EventItems       *DescribeEventsResponseEventItems `json:"EventItems,omitempty" xml:"EventItems,omitempty" require:"true" type:"Struct"`
}

func (s DescribeEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventsResponse) SetRequestId(v string) *DescribeEventsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeEventsResponse) SetTotalRecordCount(v int) *DescribeEventsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeEventsResponse) SetPageSize(v int) *DescribeEventsResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeEventsResponse) SetPageNumber(v int) *DescribeEventsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeEventsResponse) SetEventItems(v *DescribeEventsResponseEventItems) *DescribeEventsResponse {
	s.EventItems = v
	return s
}

type DescribeEventsResponseEventItems struct {
	EventItems []*DescribeEventsResponseEventItemsEventItems `json:"EventItems,omitempty" xml:"EventItems,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeEventsResponseEventItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsResponseEventItems) GoString() string {
	return s.String()
}

func (s *DescribeEventsResponseEventItems) SetEventItems(v []*DescribeEventsResponseEventItemsEventItems) *DescribeEventsResponseEventItems {
	s.EventItems = v
	return s
}

type DescribeEventsResponseEventItemsEventItems struct {
	EventId         *int    `json:"EventId,omitempty" xml:"EventId,omitempty" require:"true"`
	EventType       *string `json:"EventType,omitempty" xml:"EventType,omitempty" require:"true"`
	EventName       *string `json:"EventName,omitempty" xml:"EventName,omitempty" require:"true"`
	EventTime       *string `json:"EventTime,omitempty" xml:"EventTime,omitempty" require:"true"`
	ResourceType    *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	ResourceName    *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty" require:"true"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	EventUserType   *string `json:"EventUserType,omitempty" xml:"EventUserType,omitempty" require:"true"`
	EventReason     *string `json:"EventReason,omitempty" xml:"EventReason,omitempty" require:"true"`
	EventPayload    *string `json:"EventPayload,omitempty" xml:"EventPayload,omitempty" require:"true"`
	EventRecordTime *string `json:"EventRecordTime,omitempty" xml:"EventRecordTime,omitempty" require:"true"`
}

func (s DescribeEventsResponseEventItemsEventItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventsResponseEventItemsEventItems) GoString() string {
	return s.String()
}

func (s *DescribeEventsResponseEventItemsEventItems) SetEventId(v int) *DescribeEventsResponseEventItemsEventItems {
	s.EventId = &v
	return s
}

func (s *DescribeEventsResponseEventItemsEventItems) SetEventType(v string) *DescribeEventsResponseEventItemsEventItems {
	s.EventType = &v
	return s
}

func (s *DescribeEventsResponseEventItemsEventItems) SetEventName(v string) *DescribeEventsResponseEventItemsEventItems {
	s.EventName = &v
	return s
}

func (s *DescribeEventsResponseEventItemsEventItems) SetEventTime(v string) *DescribeEventsResponseEventItemsEventItems {
	s.EventTime = &v
	return s
}

func (s *DescribeEventsResponseEventItemsEventItems) SetResourceType(v string) *DescribeEventsResponseEventItemsEventItems {
	s.ResourceType = &v
	return s
}

func (s *DescribeEventsResponseEventItemsEventItems) SetResourceName(v string) *DescribeEventsResponseEventItemsEventItems {
	s.ResourceName = &v
	return s
}

func (s *DescribeEventsResponseEventItemsEventItems) SetRegionId(v string) *DescribeEventsResponseEventItemsEventItems {
	s.RegionId = &v
	return s
}

func (s *DescribeEventsResponseEventItemsEventItems) SetEventUserType(v string) *DescribeEventsResponseEventItemsEventItems {
	s.EventUserType = &v
	return s
}

func (s *DescribeEventsResponseEventItemsEventItems) SetEventReason(v string) *DescribeEventsResponseEventItemsEventItems {
	s.EventReason = &v
	return s
}

func (s *DescribeEventsResponseEventItemsEventItems) SetEventPayload(v string) *DescribeEventsResponseEventItemsEventItems {
	s.EventPayload = &v
	return s
}

func (s *DescribeEventsResponseEventItemsEventItems) SetEventRecordTime(v string) *DescribeEventsResponseEventItemsEventItems {
	s.EventRecordTime = &v
	return s
}

type DescribeDBInstancesForCloneRequest struct {
	ClientToken         *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId             *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	Engine              *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ZoneId              *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DBInstanceStatus    *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	Expired             *string `json:"Expired,omitempty" xml:"Expired,omitempty"`
	SearchKey           *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	DBInstanceId        *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBInstanceType      *string `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PageSize            *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber          *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	VpcId               *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId           *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	DBInstanceClass     *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	EngineVersion       *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	NodeType            *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	PayType             *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	ConnectionMode      *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	CurrentInstanceId   *string `json:"CurrentInstanceId,omitempty" xml:"CurrentInstanceId,omitempty"`
}

func (s DescribeDBInstancesForCloneRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneRequest) SetClientToken(v string) *DescribeDBInstancesForCloneRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetProxyId(v string) *DescribeDBInstancesForCloneRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetEngine(v string) *DescribeDBInstancesForCloneRequest {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetZoneId(v string) *DescribeDBInstancesForCloneRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetDBInstanceStatus(v string) *DescribeDBInstancesForCloneRequest {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetExpired(v string) *DescribeDBInstancesForCloneRequest {
	s.Expired = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetSearchKey(v string) *DescribeDBInstancesForCloneRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetDBInstanceId(v string) *DescribeDBInstancesForCloneRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetDBInstanceType(v string) *DescribeDBInstancesForCloneRequest {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetRegionId(v string) *DescribeDBInstancesForCloneRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetPageSize(v int) *DescribeDBInstancesForCloneRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetPageNumber(v int) *DescribeDBInstancesForCloneRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetInstanceNetworkType(v string) *DescribeDBInstancesForCloneRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetVpcId(v string) *DescribeDBInstancesForCloneRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetVSwitchId(v string) *DescribeDBInstancesForCloneRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetDBInstanceClass(v string) *DescribeDBInstancesForCloneRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetEngineVersion(v string) *DescribeDBInstancesForCloneRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetNodeType(v string) *DescribeDBInstancesForCloneRequest {
	s.NodeType = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetPayType(v string) *DescribeDBInstancesForCloneRequest {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetConnectionMode(v string) *DescribeDBInstancesForCloneRequest {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesForCloneRequest) SetCurrentInstanceId(v string) *DescribeDBInstancesForCloneRequest {
	s.CurrentInstanceId = &v
	return s
}

type DescribeDBInstancesForCloneResponse struct {
	RequestId        *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber       *int                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	TotalRecordCount *int                                      `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageRecordCount  *int                                      `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeDBInstancesForCloneResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancesForCloneResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponse) SetRequestId(v string) *DescribeDBInstancesForCloneResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponse) SetPageNumber(v int) *DescribeDBInstancesForCloneResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponse) SetTotalRecordCount(v int) *DescribeDBInstancesForCloneResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponse) SetPageRecordCount(v int) *DescribeDBInstancesForCloneResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponse) SetItems(v *DescribeDBInstancesForCloneResponseItems) *DescribeDBInstancesForCloneResponse {
	s.Items = v
	return s
}

type DescribeDBInstancesForCloneResponseItems struct {
	DBInstance []*DescribeDBInstancesForCloneResponseItemsDBInstance `json:"DBInstance,omitempty" xml:"DBInstance,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancesForCloneResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponseItems) SetDBInstance(v []*DescribeDBInstancesForCloneResponseItemsDBInstance) *DescribeDBInstancesForCloneResponseItems {
	s.DBInstance = v
	return s
}

type DescribeDBInstancesForCloneResponseItemsDBInstance struct {
	InsId                 *int                                                                     `json:"InsId,omitempty" xml:"InsId,omitempty" require:"true"`
	DBInstanceId          *string                                                                  `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceDescription *string                                                                  `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty" require:"true"`
	PayType               *string                                                                  `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	DBInstanceType        *string                                                                  `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty" require:"true"`
	RegionId              *string                                                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ExpireTime            *string                                                                  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty" require:"true"`
	DestroyTime           *string                                                                  `json:"DestroyTime,omitempty" xml:"DestroyTime,omitempty" require:"true"`
	DBInstanceStatus      *string                                                                  `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty" require:"true"`
	Engine                *string                                                                  `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	DBInstanceNetType     *string                                                                  `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty" require:"true"`
	ConnectionMode        *string                                                                  `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty" require:"true"`
	LockMode              *string                                                                  `json:"LockMode,omitempty" xml:"LockMode,omitempty" require:"true"`
	Category              *string                                                                  `json:"Category,omitempty" xml:"Category,omitempty" require:"true"`
	DBInstanceStorageType *string                                                                  `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty" require:"true"`
	DBInstanceClass       *string                                                                  `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	InstanceNetworkType   *string                                                                  `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty" require:"true"`
	VpcCloudInstanceId    *string                                                                  `json:"VpcCloudInstanceId,omitempty" xml:"VpcCloudInstanceId,omitempty" require:"true"`
	LockReason            *string                                                                  `json:"LockReason,omitempty" xml:"LockReason,omitempty" require:"true"`
	ZoneId                *string                                                                  `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	MutriORsignle         *bool                                                                    `json:"MutriORsignle,omitempty" xml:"MutriORsignle,omitempty" require:"true"`
	CreateTime            *string                                                                  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EngineVersion         *string                                                                  `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	GuardDBInstanceId     *string                                                                  `json:"GuardDBInstanceId,omitempty" xml:"GuardDBInstanceId,omitempty" require:"true"`
	TempDBInstanceId      *string                                                                  `json:"TempDBInstanceId,omitempty" xml:"TempDBInstanceId,omitempty" require:"true"`
	MasterInstanceId      *string                                                                  `json:"MasterInstanceId,omitempty" xml:"MasterInstanceId,omitempty" require:"true"`
	VpcId                 *string                                                                  `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VSwitchId             *string                                                                  `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	ReplicateId           *string                                                                  `json:"ReplicateId,omitempty" xml:"ReplicateId,omitempty" require:"true"`
	ResourceGroupId       *string                                                                  `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	ReadOnlyDBInstanceIds *DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIds `json:"ReadOnlyDBInstanceIds,omitempty" xml:"ReadOnlyDBInstanceIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancesForCloneResponseItemsDBInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponseItemsDBInstance) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetInsId(v int) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.InsId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetDBInstanceId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetDBInstanceDescription(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetPayType(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetDBInstanceType(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetRegionId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetExpireTime(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetDestroyTime(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.DestroyTime = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetDBInstanceStatus(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetEngine(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetDBInstanceNetType(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetConnectionMode(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetLockMode(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetCategory(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.Category = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetDBInstanceStorageType(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetDBInstanceClass(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetInstanceNetworkType(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetVpcCloudInstanceId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.VpcCloudInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetLockReason(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetZoneId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetMutriORsignle(v bool) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.MutriORsignle = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetCreateTime(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.CreateTime = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetEngineVersion(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetGuardDBInstanceId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.GuardDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetTempDBInstanceId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.TempDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetMasterInstanceId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetVpcId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetVSwitchId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetReplicateId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.ReplicateId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetResourceGroupId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstance) SetReadOnlyDBInstanceIds(v *DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIds) *DescribeDBInstancesForCloneResponseItemsDBInstance {
	s.ReadOnlyDBInstanceIds = v
	return s
}

type DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIds struct {
	ReadOnlyDBInstanceId []*DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId `json:"ReadOnlyDBInstanceId,omitempty" xml:"ReadOnlyDBInstanceId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIds) SetReadOnlyDBInstanceId(v []*DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) *DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIds {
	s.ReadOnlyDBInstanceId = v
	return s
}

type DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) SetDBInstanceId(v string) *DescribeDBInstancesForCloneResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId {
	s.DBInstanceId = &v
	return s
}

type DescribeDTCSecurityIpHostsForSQLServerRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 地域ID，可以通过接口[DescribeRegions](~~26243~~)查看。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeDTCSecurityIpHostsForSQLServerRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTCSecurityIpHostsForSQLServerRequest) GoString() string {
	return s.String()
}

func (s *DescribeDTCSecurityIpHostsForSQLServerRequest) SetSecurityToken(v string) *DescribeDTCSecurityIpHostsForSQLServerRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerRequest) SetDBInstanceId(v string) *DescribeDTCSecurityIpHostsForSQLServerRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerRequest) SetRegionId(v string) *DescribeDTCSecurityIpHostsForSQLServerRequest {
	s.RegionId = &v
	return s
}

type DescribeDTCSecurityIpHostsForSQLServerResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 分布式事务白名单条目数。;
	IpHostPairNum *string `json:"IpHostPairNum,omitempty" xml:"IpHostPairNum,omitempty" require:"true"`
	// description: 分布式事务白名单分组列表。
	Items *DescribeDTCSecurityIpHostsForSQLServerResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponse) GoString() string {
	return s.String()
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponse) SetRequestId(v string) *DescribeDTCSecurityIpHostsForSQLServerResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponse) SetDBInstanceId(v string) *DescribeDTCSecurityIpHostsForSQLServerResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponse) SetIpHostPairNum(v string) *DescribeDTCSecurityIpHostsForSQLServerResponse {
	s.IpHostPairNum = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponse) SetItems(v *DescribeDTCSecurityIpHostsForSQLServerResponseItems) *DescribeDTCSecurityIpHostsForSQLServerResponse {
	s.Items = v
	return s
}

type DescribeDTCSecurityIpHostsForSQLServerResponseItems struct {
	WhiteListGroups []*DescribeDTCSecurityIpHostsForSQLServerResponseItemsWhiteListGroups `json:"WhiteListGroups,omitempty" xml:"WhiteListGroups,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponseItems) SetWhiteListGroups(v []*DescribeDTCSecurityIpHostsForSQLServerResponseItemsWhiteListGroups) *DescribeDTCSecurityIpHostsForSQLServerResponseItems {
	s.WhiteListGroups = v
	return s
}

type DescribeDTCSecurityIpHostsForSQLServerResponseItemsWhiteListGroups struct {
	// description: ECS实例的IP地址和Windows系统的计算机名。格式：ip,hostname。多个实例之间以英文分号（;）隔开。;
	SecurityIpHosts *string `json:"SecurityIpHosts,omitempty" xml:"SecurityIpHosts,omitempty" require:"true"`
	// description: 分布式事务白名单分组名称。;
	WhitelistGroupName *string `json:"WhitelistGroupName,omitempty" xml:"WhitelistGroupName,omitempty" require:"true"`
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponseItemsWhiteListGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTCSecurityIpHostsForSQLServerResponseItemsWhiteListGroups) GoString() string {
	return s.String()
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponseItemsWhiteListGroups) SetSecurityIpHosts(v string) *DescribeDTCSecurityIpHostsForSQLServerResponseItemsWhiteListGroups {
	s.SecurityIpHosts = &v
	return s
}

func (s *DescribeDTCSecurityIpHostsForSQLServerResponseItemsWhiteListGroups) SetWhitelistGroupName(v string) *DescribeDTCSecurityIpHostsForSQLServerResponseItemsWhiteListGroups {
	s.WhitelistGroupName = &v
	return s
}

type ModifyDTCSecurityIpHostsForSQLServerRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// description: RDS实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: ECS实例的IP地址和Windows系统的计算机名。格式：ip,hostname。多个实例之间以英文分号（;）隔开。>计算机名查看方式请参见[设置分布式事务白名单](~~124321~~)。;
	SecurityIpHosts *string `json:"SecurityIpHosts,omitempty" xml:"SecurityIpHosts,omitempty" require:"true"`
	// description: 白名单分组名称。;
	WhiteListGroupName *string `json:"WhiteListGroupName,omitempty" xml:"WhiteListGroupName,omitempty" require:"true"`
	// description: RDS实例的地域ID，可以通过接口[DescribeRegions](~~26243~~)查看。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s ModifyDTCSecurityIpHostsForSQLServerRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDTCSecurityIpHostsForSQLServerRequest) GoString() string {
	return s.String()
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetSecurityToken(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetDBInstanceId(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetSecurityIpHosts(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.SecurityIpHosts = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetWhiteListGroupName(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.WhiteListGroupName = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerRequest) SetRegionId(v string) *ModifyDTCSecurityIpHostsForSQLServerRequest {
	s.RegionId = &v
	return s
}

type ModifyDTCSecurityIpHostsForSQLServerResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: RDS实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 设置白名单的结果，取值：* **Success**：设置成功；* **Fail**：设置失败。;
	DTCSetResult *string `json:"DTCSetResult,omitempty" xml:"DTCSetResult,omitempty" require:"true"`
	// description: 设置任务ID。;
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s ModifyDTCSecurityIpHostsForSQLServerResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDTCSecurityIpHostsForSQLServerResponse) GoString() string {
	return s.String()
}

func (s *ModifyDTCSecurityIpHostsForSQLServerResponse) SetRequestId(v string) *ModifyDTCSecurityIpHostsForSQLServerResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerResponse) SetDBInstanceId(v string) *ModifyDTCSecurityIpHostsForSQLServerResponse {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerResponse) SetDTCSetResult(v string) *ModifyDTCSecurityIpHostsForSQLServerResponse {
	s.DTCSetResult = &v
	return s
}

func (s *ModifyDTCSecurityIpHostsForSQLServerResponse) SetTaskId(v string) *ModifyDTCSecurityIpHostsForSQLServerResponse {
	s.TaskId = &v
	return s
}

type DescribeDBInstanceIpHostnameRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	// description: RDS实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: RDS实例的地域ID，可以通过接口[DescribeRegions](~~26243~~)查看。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeDBInstanceIpHostnameRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIpHostnameRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIpHostnameRequest) SetSecurityToken(v string) *DescribeDBInstanceIpHostnameRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameRequest) SetDBInstanceId(v string) *DescribeDBInstanceIpHostnameRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameRequest) SetRegionId(v string) *DescribeDBInstanceIpHostnameRequest {
	s.RegionId = &v
	return s
}

type DescribeDBInstanceIpHostnameResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: RDS实例所在ECS实例的内网IP和ECS主机名，包含主备实例。格式：ip1,hostname1;ip2,hostname2。;
	IpHostnameInfos *string `json:"IpHostnameInfos,omitempty" xml:"IpHostnameInfos,omitempty" require:"true"`
}

func (s DescribeDBInstanceIpHostnameResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIpHostnameResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIpHostnameResponse) SetRequestId(v string) *DescribeDBInstanceIpHostnameResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameResponse) SetDBInstanceId(v string) *DescribeDBInstanceIpHostnameResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceIpHostnameResponse) SetIpHostnameInfos(v string) *DescribeDBInstanceIpHostnameResponse {
	s.IpHostnameInfos = &v
	return s
}

type ModifyDBInstanceAutoUpgradeMinorVersionRequest struct {
	ClientToken             *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId            *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AutoUpgradeMinorVersion *string `json:"AutoUpgradeMinorVersion,omitempty" xml:"AutoUpgradeMinorVersion,omitempty" require:"true"`
}

func (s ModifyDBInstanceAutoUpgradeMinorVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceAutoUpgradeMinorVersionRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionRequest) SetClientToken(v string) *ModifyDBInstanceAutoUpgradeMinorVersionRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionRequest) SetDBInstanceId(v string) *ModifyDBInstanceAutoUpgradeMinorVersionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionRequest) SetAutoUpgradeMinorVersion(v string) *ModifyDBInstanceAutoUpgradeMinorVersionRequest {
	s.AutoUpgradeMinorVersion = &v
	return s
}

type ModifyDBInstanceAutoUpgradeMinorVersionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceAutoUpgradeMinorVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceAutoUpgradeMinorVersionResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceAutoUpgradeMinorVersionResponse) SetRequestId(v string) *ModifyDBInstanceAutoUpgradeMinorVersionResponse {
	s.RequestId = &v
	return s
}

type DescribeAvailableCrossRegionRequest struct {
	// description: 地域ID。可以通过接口[DescribeRegions](~~26243~~)查看地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeAvailableCrossRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCrossRegionRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCrossRegionRequest) SetRegionId(v string) *DescribeAvailableCrossRegionRequest {
	s.RegionId = &v
	return s
}

type DescribeAvailableCrossRegionResponse struct {
	// description: 请求ID。;
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Regions   *DescribeAvailableCrossRegionResponseRegions `json:"Regions,omitempty" xml:"Regions,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableCrossRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCrossRegionResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCrossRegionResponse) SetRequestId(v string) *DescribeAvailableCrossRegionResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableCrossRegionResponse) SetRegions(v *DescribeAvailableCrossRegionResponseRegions) *DescribeAvailableCrossRegionResponse {
	s.Regions = v
	return s
}

type DescribeAvailableCrossRegionResponseRegions struct {
	Region []*string `json:"Region,omitempty" xml:"Region,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableCrossRegionResponseRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableCrossRegionResponseRegions) GoString() string {
	return s.String()
}

func (s *DescribeAvailableCrossRegionResponseRegions) SetRegion(v []*string) *DescribeAvailableCrossRegionResponseRegions {
	s.Region = v
	return s
}

type CheckCreateDdrDBInstanceRequest struct {
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	DBInstanceClass      *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	DBInstanceStorage    *int    `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty" require:"true"`
	RestoreType          *string `json:"RestoreType,omitempty" xml:"RestoreType,omitempty" require:"true"`
	BackupSetId          *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	RestoreTime          *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	SourceRegion         *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	SourceDBInstanceName *string `json:"SourceDBInstanceName,omitempty" xml:"SourceDBInstanceName,omitempty"`
	BinlogName           *string `json:"BinlogName,omitempty" xml:"BinlogName,omitempty"`
	BinlogPosition       *string `json:"BinlogPosition,omitempty" xml:"BinlogPosition,omitempty"`
	BinlogRole           *string `json:"BinlogRole,omitempty" xml:"BinlogRole,omitempty"`
}

func (s CheckCreateDdrDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCreateDdrDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CheckCreateDdrDBInstanceRequest) SetRegionId(v string) *CheckCreateDdrDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetEngine(v string) *CheckCreateDdrDBInstanceRequest {
	s.Engine = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetEngineVersion(v string) *CheckCreateDdrDBInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetDBInstanceClass(v string) *CheckCreateDdrDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetDBInstanceStorage(v int) *CheckCreateDdrDBInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetRestoreType(v string) *CheckCreateDdrDBInstanceRequest {
	s.RestoreType = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetBackupSetId(v string) *CheckCreateDdrDBInstanceRequest {
	s.BackupSetId = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetRestoreTime(v string) *CheckCreateDdrDBInstanceRequest {
	s.RestoreTime = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetSourceRegion(v string) *CheckCreateDdrDBInstanceRequest {
	s.SourceRegion = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetSourceDBInstanceName(v string) *CheckCreateDdrDBInstanceRequest {
	s.SourceDBInstanceName = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetBinlogName(v string) *CheckCreateDdrDBInstanceRequest {
	s.BinlogName = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetBinlogPosition(v string) *CheckCreateDdrDBInstanceRequest {
	s.BinlogPosition = &v
	return s
}

func (s *CheckCreateDdrDBInstanceRequest) SetBinlogRole(v string) *CheckCreateDdrDBInstanceRequest {
	s.BinlogRole = &v
	return s
}

type CheckCreateDdrDBInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	IsValid   *string `json:"IsValid,omitempty" xml:"IsValid,omitempty" require:"true"`
}

func (s CheckCreateDdrDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCreateDdrDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CheckCreateDdrDBInstanceResponse) SetRequestId(v string) *CheckCreateDdrDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *CheckCreateDdrDBInstanceResponse) SetIsValid(v string) *CheckCreateDdrDBInstanceResponse {
	s.IsValid = &v
	return s
}

type DescribeAvailableRecoveryTimeRequest struct {
	// description: 跨地域备份文件ID。可以通过接口[DescribeCrossRegionBackups](~~121733~~)查看备份集ID。;
	CrossBackupId *int `json:"CrossBackupId,omitempty" xml:"CrossBackupId,omitempty" require:"true"`
	// description: 地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeAvailableRecoveryTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableRecoveryTimeRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableRecoveryTimeRequest) SetCrossBackupId(v int) *DescribeAvailableRecoveryTimeRequest {
	s.CrossBackupId = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeRequest) SetRegionId(v string) *DescribeAvailableRecoveryTimeRequest {
	s.RegionId = &v
	return s
}

type DescribeAvailableRecoveryTimeResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: 跨地域备份文件可恢复的起始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。;
	RecoveryBeginTime *string `json:"RecoveryBeginTime,omitempty" xml:"RecoveryBeginTime,omitempty" require:"true"`
	// description: 跨地域备份文件可恢复的结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。;
	RecoveryEndTime *string `json:"RecoveryEndTime,omitempty" xml:"RecoveryEndTime,omitempty" require:"true"`
	// description: 源实例所在地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 跨地域备份文件ID。;
	CrossBackupId *int `json:"CrossBackupId,omitempty" xml:"CrossBackupId,omitempty" require:"true"`
}

func (s DescribeAvailableRecoveryTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableRecoveryTimeResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableRecoveryTimeResponse) SetRequestId(v string) *DescribeAvailableRecoveryTimeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeResponse) SetRecoveryBeginTime(v string) *DescribeAvailableRecoveryTimeResponse {
	s.RecoveryBeginTime = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeResponse) SetRecoveryEndTime(v string) *DescribeAvailableRecoveryTimeResponse {
	s.RecoveryEndTime = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeResponse) SetRegionId(v string) *DescribeAvailableRecoveryTimeResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableRecoveryTimeResponse) SetCrossBackupId(v int) *DescribeAvailableRecoveryTimeResponse {
	s.CrossBackupId = &v
	return s
}

type DescribeCrossRegionLogBackupFilesRequest struct {
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 实例所在地域ID。可以通过接口[DescribeRegions](~~26243~~)查看地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 跨地域备份目的地域ID。可以通过接口[DescribeCrossRegionBackupDBInstance](~~121737~~)查看地域ID。;
	CrossBackupRegion *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	// description: 查询开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	// description: 查询结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	// description: 每页记录数，取值：* **30**；* **50**；* **100**。默认值：30。;
	PageSize *int `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// description: 页码，取值：大于0且不超过Integer的最大值。默认值：**1**。;
	PageNumber *int `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeCrossRegionLogBackupFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionLogBackupFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetDBInstanceId(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetRegionId(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetCrossBackupRegion(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetStartTime(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetEndTime(v string) *DescribeCrossRegionLogBackupFilesRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetPageSize(v int) *DescribeCrossRegionLogBackupFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesRequest) SetPageNumber(v int) *DescribeCrossRegionLogBackupFilesRequest {
	s.PageNumber = &v
	return s
}

type DescribeCrossRegionLogBackupFilesResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: 实例所在地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 查询开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	// description: 查询结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	// description: 总记录数。;
	TotalRecordCount *int `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	// description: 本页备份文件个数。;
	PageRecordCount *int `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	// description: 页码，取值：大于0且不超过Integer的最大值。默认值：**1**。;
	PageNumber *int `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	// description: 跨地域日志备份列表。
	Items *DescribeCrossRegionLogBackupFilesResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeCrossRegionLogBackupFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionLogBackupFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetRequestId(v string) *DescribeCrossRegionLogBackupFilesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetRegionId(v string) *DescribeCrossRegionLogBackupFilesResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetDBInstanceId(v string) *DescribeCrossRegionLogBackupFilesResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetStartTime(v string) *DescribeCrossRegionLogBackupFilesResponse {
	s.StartTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetEndTime(v string) *DescribeCrossRegionLogBackupFilesResponse {
	s.EndTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetTotalRecordCount(v int) *DescribeCrossRegionLogBackupFilesResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetPageRecordCount(v int) *DescribeCrossRegionLogBackupFilesResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetPageNumber(v int) *DescribeCrossRegionLogBackupFilesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponse) SetItems(v *DescribeCrossRegionLogBackupFilesResponseItems) *DescribeCrossRegionLogBackupFilesResponse {
	s.Items = v
	return s
}

type DescribeCrossRegionLogBackupFilesResponseItems struct {
	Item []*DescribeCrossRegionLogBackupFilesResponseItemsItem `json:"Item,omitempty" xml:"Item,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeCrossRegionLogBackupFilesResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionLogBackupFilesResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionLogBackupFilesResponseItems) SetItem(v []*DescribeCrossRegionLogBackupFilesResponseItemsItem) *DescribeCrossRegionLogBackupFilesResponseItems {
	s.Item = v
	return s
}

type DescribeCrossRegionLogBackupFilesResponseItemsItem struct {
	// description: 跨地域日志备份文件ID。;
	CrossLogBackupId *int `json:"CrossLogBackupId,omitempty" xml:"CrossLogBackupId,omitempty" require:"true"`
	// description: 跨地域备份目的地域ID。;
	CrossBackupRegion *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty" require:"true"`
	// description: 跨地域日志备份文件大小，单位：Byte。;
	CrossLogBackupSize *int64 `json:"CrossLogBackupSize,omitempty" xml:"CrossLogBackupSize,omitempty" require:"true"`
	// description: 跨地域日志备份文件记录的开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	LogBeginTime *string `json:"LogBeginTime,omitempty" xml:"LogBeginTime,omitempty" require:"true"`
	// description: 跨地域日志备份文件记录的结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	LogEndTime *string `json:"LogEndTime,omitempty" xml:"LogEndTime,omitempty" require:"true"`
	// description: 跨地域日志备份外网下载链接。;
	CrossDownloadLink *string `json:"CrossDownloadLink,omitempty" xml:"CrossDownloadLink,omitempty" require:"true"`
	// description: 跨地域日志备份内网下载链接。;
	CrossIntranetDownloadLink *string `json:"CrossIntranetDownloadLink,omitempty" xml:"CrossIntranetDownloadLink,omitempty" require:"true"`
	// description: 下载链接过期时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。;
	LinkExpiredTime *string `json:"LinkExpiredTime,omitempty" xml:"LinkExpiredTime,omitempty" require:"true"`
	// description: 跨地域日志备份文件名称。;
	LogFileName *string `json:"LogFileName,omitempty" xml:"LogFileName,omitempty" require:"true"`
	// description: 实例编号。;
	InstanceId *int `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
}

func (s DescribeCrossRegionLogBackupFilesResponseItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionLogBackupFilesResponseItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionLogBackupFilesResponseItemsItem) SetCrossLogBackupId(v int) *DescribeCrossRegionLogBackupFilesResponseItemsItem {
	s.CrossLogBackupId = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseItemsItem) SetCrossBackupRegion(v string) *DescribeCrossRegionLogBackupFilesResponseItemsItem {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseItemsItem) SetCrossLogBackupSize(v int64) *DescribeCrossRegionLogBackupFilesResponseItemsItem {
	s.CrossLogBackupSize = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseItemsItem) SetLogBeginTime(v string) *DescribeCrossRegionLogBackupFilesResponseItemsItem {
	s.LogBeginTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseItemsItem) SetLogEndTime(v string) *DescribeCrossRegionLogBackupFilesResponseItemsItem {
	s.LogEndTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseItemsItem) SetCrossDownloadLink(v string) *DescribeCrossRegionLogBackupFilesResponseItemsItem {
	s.CrossDownloadLink = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseItemsItem) SetCrossIntranetDownloadLink(v string) *DescribeCrossRegionLogBackupFilesResponseItemsItem {
	s.CrossIntranetDownloadLink = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseItemsItem) SetLinkExpiredTime(v string) *DescribeCrossRegionLogBackupFilesResponseItemsItem {
	s.LinkExpiredTime = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseItemsItem) SetLogFileName(v string) *DescribeCrossRegionLogBackupFilesResponseItemsItem {
	s.LogFileName = &v
	return s
}

func (s *DescribeCrossRegionLogBackupFilesResponseItemsItem) SetInstanceId(v int) *DescribeCrossRegionLogBackupFilesResponseItemsItem {
	s.InstanceId = &v
	return s
}

type ModifyInstanceCrossBackupPolicyRequest struct {
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 源实例地域ID，可以通过接口[DescribeRegions](~~26243~~)查看地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 跨地域备份保存类型。默认值：**1**，表示每个备份都保存。;
	CrossBackupType *string `json:"CrossBackupType,omitempty" xml:"CrossBackupType,omitempty"`
	// description: 跨地域日志备份开关，取值：* **0**：关闭；* **1**：开启。;
	LogBackupEnabled *string `json:"LogBackupEnabled,omitempty" xml:"LogBackupEnabled,omitempty"`
	// description: 跨地域备份总开关（数据备份+日志备份），取值：* **0**：关闭；* **1**：开启。;
	BackupEnabled *string `json:"BackupEnabled,omitempty" xml:"BackupEnabled,omitempty"`
	// description: 跨地域备份的目的地域ID。;
	CrossBackupRegion *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	// description: 跨地域备份保留方式。默认值：**1**，表示按时长保留。;
	RetentType *int `json:"RetentType,omitempty" xml:"RetentType,omitempty"`
	// description: 跨地域备份保留天数，取值：**7~1825**。;
	Retention *int `json:"Retention,omitempty" xml:"Retention,omitempty"`
}

func (s ModifyInstanceCrossBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceCrossBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetDBInstanceId(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetRegionId(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetCrossBackupType(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.CrossBackupType = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetLogBackupEnabled(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.LogBackupEnabled = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetBackupEnabled(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.BackupEnabled = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetCrossBackupRegion(v string) *ModifyInstanceCrossBackupPolicyRequest {
	s.CrossBackupRegion = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetRetentType(v int) *ModifyInstanceCrossBackupPolicyRequest {
	s.RetentType = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyRequest) SetRetention(v int) *ModifyInstanceCrossBackupPolicyRequest {
	s.Retention = &v
	return s
}

type ModifyInstanceCrossBackupPolicyResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 源实例地域ID，可以通过接口[DescribeRegions](~~26243~~)查看地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 跨地域备份的目的地域ID。;
	CrossBackupRegion *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty" require:"true"`
	// description: 跨地域备份保存类型。默认值：**1**，表示每个备份都保存。;
	CrossBackupType *string `json:"CrossBackupType,omitempty" xml:"CrossBackupType,omitempty" require:"true"`
	// description: 跨地域备份总开关，取值：* **0**：关闭；* **1**：开启。;
	BackupEnabled *string `json:"BackupEnabled,omitempty" xml:"BackupEnabled,omitempty" require:"true"`
	// description: 跨地域日志备份开关，取值：* **0**：关闭；* **1**：开启。;
	LogBackupEnabled *string `json:"LogBackupEnabled,omitempty" xml:"LogBackupEnabled,omitempty" require:"true"`
	// description: 跨地域备份保留方式。默认值：**1**，表示按时长保留。;
	RetentType *int `json:"RetentType,omitempty" xml:"RetentType,omitempty" require:"true"`
	// description: 跨地域备份保留天数，取值：**7~1825**。;
	Retention *int `json:"Retention,omitempty" xml:"Retention,omitempty" require:"true"`
}

func (s ModifyInstanceCrossBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceCrossBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetRequestId(v string) *ModifyInstanceCrossBackupPolicyResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetDBInstanceId(v string) *ModifyInstanceCrossBackupPolicyResponse {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetRegionId(v string) *ModifyInstanceCrossBackupPolicyResponse {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetCrossBackupRegion(v string) *ModifyInstanceCrossBackupPolicyResponse {
	s.CrossBackupRegion = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetCrossBackupType(v string) *ModifyInstanceCrossBackupPolicyResponse {
	s.CrossBackupType = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetBackupEnabled(v string) *ModifyInstanceCrossBackupPolicyResponse {
	s.BackupEnabled = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetLogBackupEnabled(v string) *ModifyInstanceCrossBackupPolicyResponse {
	s.LogBackupEnabled = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetRetentType(v int) *ModifyInstanceCrossBackupPolicyResponse {
	s.RetentType = &v
	return s
}

func (s *ModifyInstanceCrossBackupPolicyResponse) SetRetention(v int) *ModifyInstanceCrossBackupPolicyResponse {
	s.Retention = &v
	return s
}

type CreateDdrInstanceRequest struct {
	// description: 目的地域ID，可以通过接口[DescribeRegions](~~26243~~)查看地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 目的数据库类型，取值：**MySQL**。;
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	// description: 目的数据库版本，取值：* **5.6**；* **5.7**。;
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	// description: 目的实例规格，详见[实例规格表](~~26312~~)。;
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	// description: 目的实例存储空间，取值： **5~2000**。每5G进行递增，单位：GB。详见[实例规格表](~~26312~~)。;
	DBInstanceStorage *int `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty" require:"true"`
	// description: 目的实例的字符集，取值：* **utf8**；* **gbk**；* **latin1**；* **utf8mb4**。;
	SystemDBCharset *string `json:"SystemDBCharset,omitempty" xml:"SystemDBCharset,omitempty"`
	// description: 目的实例的网络连接类型，取值：* **Internet**：公网连接；* **Intranet**：内网连接。;
	DBInstanceNetType *string `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty" require:"true"`
	// description: 目的实例名称，长度为2~256个字符。以中文、英文字母开头，可以包含数字、中文、英文、下划线（_）、短横线（-）。>不能以 http:// 和 https:// 开头。;
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// description: 目的实例的[IP白名单](~~43185~~)，多个IP地址请以英文逗号（,）隔开，不可重复，最多1000个。支持如下两种格式：* IP地址形式，例如：10.23.12.24；* CIDR形式，例如：10.23.12.24/24（无类域间路由，24表示了地址中前缀的长度，范围为1~32）。;
	SecurityIPList *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty" require:"true"`
	// description: 用于保证请求的幂等性，防止重复提交请求。由客户端生成该参数值，要保证在不同请求间唯一，最大值不超过64个ASCII字符，且该参数值中不能包含非ASCII字符。;
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// description: 目的实例的付费类型，取值：* **Postpaid**：后付费（按量付费）；* **Prepaid**：预付费（包年包月）。;
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	// description: 目的实例的可用区ID。多可用区用英文冒号（:）分隔。> 指定了VPC和交换机时，为匹配交换机对应的可用区，该参数必填。;
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	// description: 目的实例的网络类型，取值：* **VPC**：VPC网络；* **Classic**：经典网络。默认创建经典网络类型的实例。>当本参数值为 **VPC**时，还需要传入参数**VpcId**、**VSwitchId**。;
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// description: 目的实例的访问模式，取值：* **Standard**：标准访问模式；* **Safe**：数据库代理模式。默认值：**Standard**。;
	ConnectionMode *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	// description: 目的实例的VPC ID。当**InstanceNetworkType**=**VPC**时，本参数可用。>如果传入此参数，您还需要传入参数**ZoneId**。;
	VPCId *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	// description: 目的实例的VSwitch ID，多个值用英文逗号（,）隔开。当**InstanceNetworkType**=**VPC**时，本参数可用。>如果传入此参数，您还需要传入参数**ZoneId**。;
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// description: 设置目的实例的内网IP，需要在指定交换机的IP地址范围内。系统默认通过**VPCId**和**VSwitchId**自动分配。;
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	// description: 指定购买时长，取值：* 当参数**Period**为**Year**时，UsedTime取值为**1~3**；* 当参数**Period**为**Month**时，UsedTime取值为**1~9**。> 若付费类型为**Prepaid**则该参数必须传入。;
	UsedTime *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	// description: 指定预付费目的实例为包年或者包月类型，取值：* **Year**：包年；* **Month**：包月。> 若付费类型为**Prepaid**则该参数必须传入。;
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// description: 资源组ID。;
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// description: 恢复方式，取值：* **0**：基于备份集恢复，您还需要传入参数**BackupSetID**；* **1**：基于时间点恢复，您还需要传入参数**RestoreTime**、**SourceRegion**、**SourceDBInstanceName**。;
	RestoreType *string `json:"RestoreType,omitempty" xml:"RestoreType,omitempty" require:"true"`
	// description: 基于备份集恢复时，使用的备份集的ID。可以通过接口[DescribeCrossRegionBackups](~~121733~~)查看备份集ID。>**RestoreTyp**e=**0**时必传。;
	BackupSetId *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	// description: 基于时间点恢复时，要恢复的时间节点，需要早于当前时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。>**RestoreType**=**1**时必传 。;
	RestoreTime *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	// description: 基于时间点恢复时，源地域的ID。>**RestoreType**=**1**时必传。;
	SourceRegion *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	// description: 基于时间点恢复时，源实例的ID。>**RestoreType**=**1**时必传。;
	SourceDBInstanceName *string `json:"SourceDBInstanceName,omitempty" xml:"SourceDBInstanceName,omitempty"`
	// description: 目的实例存储类型，当前仅支持SSD本地盘，默认值：**local_ssd**。;
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	BinlogName            *string `json:"BinlogName,omitempty" xml:"BinlogName,omitempty"`
	BinlogPosition        *string `json:"BinlogPosition,omitempty" xml:"BinlogPosition,omitempty"`
	BinlogRole            *string `json:"BinlogRole,omitempty" xml:"BinlogRole,omitempty"`
}

func (s CreateDdrInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDdrInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateDdrInstanceRequest) SetRegionId(v string) *CreateDdrInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetEngine(v string) *CreateDdrInstanceRequest {
	s.Engine = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetEngineVersion(v string) *CreateDdrInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetDBInstanceClass(v string) *CreateDdrInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetDBInstanceStorage(v int) *CreateDdrInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetSystemDBCharset(v string) *CreateDdrInstanceRequest {
	s.SystemDBCharset = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetDBInstanceNetType(v string) *CreateDdrInstanceRequest {
	s.DBInstanceNetType = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetDBInstanceDescription(v string) *CreateDdrInstanceRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetSecurityIPList(v string) *CreateDdrInstanceRequest {
	s.SecurityIPList = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetClientToken(v string) *CreateDdrInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetPayType(v string) *CreateDdrInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetZoneId(v string) *CreateDdrInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetInstanceNetworkType(v string) *CreateDdrInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetConnectionMode(v string) *CreateDdrInstanceRequest {
	s.ConnectionMode = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetVPCId(v string) *CreateDdrInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetVSwitchId(v string) *CreateDdrInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetPrivateIpAddress(v string) *CreateDdrInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetUsedTime(v string) *CreateDdrInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetPeriod(v string) *CreateDdrInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetResourceGroupId(v string) *CreateDdrInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetRestoreType(v string) *CreateDdrInstanceRequest {
	s.RestoreType = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetBackupSetId(v string) *CreateDdrInstanceRequest {
	s.BackupSetId = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetRestoreTime(v string) *CreateDdrInstanceRequest {
	s.RestoreTime = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetSourceRegion(v string) *CreateDdrInstanceRequest {
	s.SourceRegion = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetSourceDBInstanceName(v string) *CreateDdrInstanceRequest {
	s.SourceDBInstanceName = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetDBInstanceStorageType(v string) *CreateDdrInstanceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetBinlogName(v string) *CreateDdrInstanceRequest {
	s.BinlogName = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetBinlogPosition(v string) *CreateDdrInstanceRequest {
	s.BinlogPosition = &v
	return s
}

func (s *CreateDdrInstanceRequest) SetBinlogRole(v string) *CreateDdrInstanceRequest {
	s.BinlogRole = &v
	return s
}

type CreateDdrInstanceResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: 新实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 订单ID。;
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
	// description: 新实例连接地址。>参数**DBInstanceNetType**决定该地址为内网或外网。;
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	// description: 新实例连接端口。>参数**DBInstanceNetType**决定该端口为内网端口或外网端口。;
	Port *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
}

func (s CreateDdrInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDdrInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateDdrInstanceResponse) SetRequestId(v string) *CreateDdrInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDdrInstanceResponse) SetDBInstanceId(v string) *CreateDdrInstanceResponse {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDdrInstanceResponse) SetOrderId(v string) *CreateDdrInstanceResponse {
	s.OrderId = &v
	return s
}

func (s *CreateDdrInstanceResponse) SetConnectionString(v string) *CreateDdrInstanceResponse {
	s.ConnectionString = &v
	return s
}

func (s *CreateDdrInstanceResponse) SetPort(v string) *CreateDdrInstanceResponse {
	s.Port = &v
	return s
}

type DescribeCrossRegionBackupDBInstanceRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeCrossRegionBackupDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetRegionId(v string) *DescribeCrossRegionBackupDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetDBInstanceId(v string) *DescribeCrossRegionBackupDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetPageSize(v int) *DescribeCrossRegionBackupDBInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceRequest) SetPageNumber(v int) *DescribeCrossRegionBackupDBInstanceRequest {
	s.PageNumber = &v
	return s
}

type DescribeCrossRegionBackupDBInstanceResponse struct {
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionId     *string                                           `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	TotalRecords *int                                              `json:"TotalRecords,omitempty" xml:"TotalRecords,omitempty" require:"true"`
	PageSize     *int                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	PageNumber   *int                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	ItemsNumbers *int                                              `json:"ItemsNumbers,omitempty" xml:"ItemsNumbers,omitempty" require:"true"`
	Items        *DescribeCrossRegionBackupDBInstanceResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeCrossRegionBackupDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupDBInstanceResponse) SetRequestId(v string) *DescribeCrossRegionBackupDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponse) SetRegionId(v string) *DescribeCrossRegionBackupDBInstanceResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponse) SetTotalRecords(v int) *DescribeCrossRegionBackupDBInstanceResponse {
	s.TotalRecords = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponse) SetPageSize(v int) *DescribeCrossRegionBackupDBInstanceResponse {
	s.PageSize = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponse) SetPageNumber(v int) *DescribeCrossRegionBackupDBInstanceResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponse) SetItemsNumbers(v int) *DescribeCrossRegionBackupDBInstanceResponse {
	s.ItemsNumbers = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponse) SetItems(v *DescribeCrossRegionBackupDBInstanceResponseItems) *DescribeCrossRegionBackupDBInstanceResponse {
	s.Items = v
	return s
}

type DescribeCrossRegionBackupDBInstanceResponseItems struct {
	Item []*DescribeCrossRegionBackupDBInstanceResponseItemsItem `json:"Item,omitempty" xml:"Item,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeCrossRegionBackupDBInstanceResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupDBInstanceResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItems) SetItem(v []*DescribeCrossRegionBackupDBInstanceResponseItemsItem) *DescribeCrossRegionBackupDBInstanceResponseItems {
	s.Item = v
	return s
}

type DescribeCrossRegionBackupDBInstanceResponseItemsItem struct {
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty" require:"true"`
	DBInstanceStatus      *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty" require:"true"`
	Engine                *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	CrossBackupRegion     *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty" require:"true"`
	CrossBackupType       *string `json:"CrossBackupType,omitempty" xml:"CrossBackupType,omitempty" require:"true"`
	BackupEnabled         *string `json:"BackupEnabled,omitempty" xml:"BackupEnabled,omitempty" require:"true"`
	LogBackupEnabled      *string `json:"LogBackupEnabled,omitempty" xml:"LogBackupEnabled,omitempty" require:"true"`
	LogBackupEnabledTime  *string `json:"LogBackupEnabledTime,omitempty" xml:"LogBackupEnabledTime,omitempty" require:"true"`
	BackupEnabledTime     *string `json:"BackupEnabledTime,omitempty" xml:"BackupEnabledTime,omitempty" require:"true"`
	RetentType            *int    `json:"RetentType,omitempty" xml:"RetentType,omitempty" require:"true"`
	Retention             *int    `json:"Retention,omitempty" xml:"Retention,omitempty" require:"true"`
	LockMode              *string `json:"LockMode,omitempty" xml:"LockMode,omitempty" require:"true"`
}

func (s DescribeCrossRegionBackupDBInstanceResponseItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupDBInstanceResponseItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetDBInstanceId(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetDBInstanceDescription(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetDBInstanceStatus(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetEngine(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.Engine = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetEngineVersion(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.EngineVersion = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetCrossBackupRegion(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetCrossBackupType(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.CrossBackupType = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetBackupEnabled(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.BackupEnabled = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetLogBackupEnabled(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.LogBackupEnabled = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetLogBackupEnabledTime(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.LogBackupEnabledTime = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetBackupEnabledTime(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.BackupEnabledTime = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetRetentType(v int) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.RetentType = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetRetention(v int) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.Retention = &v
	return s
}

func (s *DescribeCrossRegionBackupDBInstanceResponseItemsItem) SetLockMode(v string) *DescribeCrossRegionBackupDBInstanceResponseItemsItem {
	s.LockMode = &v
	return s
}

type DescribeInstanceCrossBackupPolicyRequest struct {
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 地域ID，可以通过接口[DescribeRegions](~~26243~~)查看地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeInstanceCrossBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceCrossBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceCrossBackupPolicyRequest) SetDBInstanceId(v string) *DescribeInstanceCrossBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyRequest) SetRegionId(v string) *DescribeInstanceCrossBackupPolicyRequest {
	s.RegionId = &v
	return s
}

type DescribeInstanceCrossBackupPolicyResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 实例名称，长度为2~256个字符。以中文、英文字母开头，可以包含数字、中文、英文、下划线（_）、短横线（-）。>不能以 http:// 和 https:// 开头。;
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty" require:"true"`
	// description: 实例状态。详情请参见[实例状态表](~~26315~~)。;
	DBInstanceStatus *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty" require:"true"`
	// description: 数据库类型。;
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	// description: 数据库版本。;
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	// description: 实例所在地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 跨地域备份的目的地域ID。;
	CrossBackupRegion *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty" require:"true"`
	// description: 跨地域备份保存类型。默认值：**1**，表示每个备份都保存。;
	CrossBackupType *string `json:"CrossBackupType,omitempty" xml:"CrossBackupType,omitempty" require:"true"`
	// description: 跨地域备份开启时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。;
	BackupEnabledTime *string `json:"BackupEnabledTime,omitempty" xml:"BackupEnabledTime,omitempty" require:"true"`
	// description: 跨地域备份总开关，取值：* **Disable**：关闭；* **Enable**：开启。;
	BackupEnabled *string `json:"BackupEnabled,omitempty" xml:"BackupEnabled,omitempty" require:"true"`
	// description: 跨地域日志备份开关，取值：* **Disable**：关闭；* **Enable**：开启。;
	LogBackupEnabled *string `json:"LogBackupEnabled,omitempty" xml:"LogBackupEnabled,omitempty" require:"true"`
	// description: 跨地域日志备份开启时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm:ss</i>Z（UTC时间）。;
	LogBackupEnabledTime *string `json:"LogBackupEnabledTime,omitempty" xml:"LogBackupEnabledTime,omitempty" require:"true"`
	// description: 跨地域备份保留方式。默认值：**1**，表示按时长保留。;
	RetentType *int `json:"RetentType,omitempty" xml:"RetentType,omitempty" require:"true"`
	// description: 跨地域备份保留天数，取值：**7~1825**。;
	Retention *int `json:"Retention,omitempty" xml:"Retention,omitempty" require:"true"`
	// description: 实例锁定状态，取值：* **Unlock**：正常，没有锁定；* **ManualLock**：手动触发锁定；* **LockByExpiration**：实例过期自动锁定；* **LockByRestoration**：实例回滚前的自动锁定；* **LockByDiskQuota**：实例空间满自动锁定，不可访问实例。;
	LockMode *string `json:"LockMode,omitempty" xml:"LockMode,omitempty" require:"true"`
}

func (s DescribeInstanceCrossBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceCrossBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetRequestId(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetDBInstanceId(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetDBInstanceDescription(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetDBInstanceStatus(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetEngine(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.Engine = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetEngineVersion(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.EngineVersion = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetRegionId(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetCrossBackupRegion(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetCrossBackupType(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.CrossBackupType = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetBackupEnabledTime(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.BackupEnabledTime = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetBackupEnabled(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.BackupEnabled = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetLogBackupEnabled(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.LogBackupEnabled = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetLogBackupEnabledTime(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.LogBackupEnabledTime = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetRetentType(v int) *DescribeInstanceCrossBackupPolicyResponse {
	s.RetentType = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetRetention(v int) *DescribeInstanceCrossBackupPolicyResponse {
	s.Retention = &v
	return s
}

func (s *DescribeInstanceCrossBackupPolicyResponse) SetLockMode(v string) *DescribeInstanceCrossBackupPolicyResponse {
	s.LockMode = &v
	return s
}

type DescribeCrossRegionBackupsRequest struct {
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 实例所在地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 跨地域备份目的地域ID。;
	CrossBackupRegion *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty"`
	// description: 跨地域备份文件ID。>**CrossBackupId**和起止时间参数（**StartTime**、**EndTime**）必须传入其中一组。;
	CrossBackupId *int `json:"CrossBackupId,omitempty" xml:"CrossBackupId,omitempty"`
	// description: 查询开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// description: 查询结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// description: 每页记录数，取值：* **30**；* **50**；* **100**。默认值：30。;
	PageSize *int `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// description: 页码，取值：大于0且不超过Integer的最大值。默认值：**1**。;
	PageNumber *int `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	BackupId   *int `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
}

func (s DescribeCrossRegionBackupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsRequest) SetDBInstanceId(v string) *DescribeCrossRegionBackupsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetRegionId(v string) *DescribeCrossRegionBackupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetCrossBackupRegion(v string) *DescribeCrossRegionBackupsRequest {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetCrossBackupId(v int) *DescribeCrossRegionBackupsRequest {
	s.CrossBackupId = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetStartTime(v string) *DescribeCrossRegionBackupsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetEndTime(v string) *DescribeCrossRegionBackupsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetPageSize(v int) *DescribeCrossRegionBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetPageNumber(v int) *DescribeCrossRegionBackupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCrossRegionBackupsRequest) SetBackupId(v int) *DescribeCrossRegionBackupsRequest {
	s.BackupId = &v
	return s
}

type DescribeCrossRegionBackupsResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: 实例所在地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 查询开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	// description: 查询结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	// description: 总记录数。;
	TotalRecordCount *int `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	// description: 本页备份文件个数。;
	PageRecordCount *int `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	// description: 页码，取值：大于0且不超过Integer的最大值。默认值：**1**。;
	PageNumber *int `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	// description: 跨地域备份列表。
	Items *DescribeCrossRegionBackupsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeCrossRegionBackupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsResponse) SetRequestId(v string) *DescribeCrossRegionBackupsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponse) SetRegionId(v string) *DescribeCrossRegionBackupsResponse {
	s.RegionId = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponse) SetStartTime(v string) *DescribeCrossRegionBackupsResponse {
	s.StartTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponse) SetEndTime(v string) *DescribeCrossRegionBackupsResponse {
	s.EndTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponse) SetTotalRecordCount(v int) *DescribeCrossRegionBackupsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponse) SetPageRecordCount(v int) *DescribeCrossRegionBackupsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponse) SetPageNumber(v int) *DescribeCrossRegionBackupsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponse) SetItems(v *DescribeCrossRegionBackupsResponseItems) *DescribeCrossRegionBackupsResponse {
	s.Items = v
	return s
}

type DescribeCrossRegionBackupsResponseItems struct {
	Item []*DescribeCrossRegionBackupsResponseItemsItem `json:"Item,omitempty" xml:"Item,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeCrossRegionBackupsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsResponseItems) SetItem(v []*DescribeCrossRegionBackupsResponseItemsItem) *DescribeCrossRegionBackupsResponseItems {
	s.Item = v
	return s
}

type DescribeCrossRegionBackupsResponseItemsItem struct {
	// description: 跨地域备份文件ID。;
	CrossBackupId *int `json:"CrossBackupId,omitempty" xml:"CrossBackupId,omitempty" require:"true"`
	// description: 跨地域备份的目的地域ID。;
	CrossBackupRegion *string `json:"CrossBackupRegion,omitempty" xml:"CrossBackupRegion,omitempty" require:"true"`
	// description: 备份文件状态，取值：* **0**：完成备份；* **1**：备份失败。;
	BackupSetStatus *int `json:"BackupSetStatus,omitempty" xml:"BackupSetStatus,omitempty" require:"true"`
	// description: 跨地域备份开始时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	BackupStartTime *string `json:"BackupStartTime,omitempty" xml:"BackupStartTime,omitempty" require:"true"`
	// description: 跨地域备份结束时间。格式：<i>yyyy-MM-dd</i>T<i>HH:mm</i>Z（UTC时间）。;
	BackupEndTime *string `json:"BackupEndTime,omitempty" xml:"BackupEndTime,omitempty" require:"true"`
	// description: 跨地域备份类型，取值：* **F**：全量；* **I**：增量。;
	BackupType *string `json:"BackupType,omitempty" xml:"BackupType,omitempty" require:"true"`
	// description: 跨地域备份方式，取值：* **L**：逻辑备份；* **P**：物理备份。;
	BackupMethod *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty" require:"true"`
	// description: 跨地域备份文件大小，单位：Byte。;
	CrossBackupSetSize *int64 `json:"CrossBackupSetSize,omitempty" xml:"CrossBackupSetSize,omitempty" require:"true"`
	// description: 跨地域备份文件压缩包名称。;
	CrossBackupSetFile *string `json:"CrossBackupSetFile,omitempty" xml:"CrossBackupSetFile,omitempty" require:"true"`
	// description: 跨地域备份文件外网下载链接。;
	CrossBackupDownloadLink *string `json:"CrossBackupDownloadLink,omitempty" xml:"CrossBackupDownloadLink,omitempty" require:"true"`
	// description: 数据库类型。;
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	// description: 数据库版本。;
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	// description: 备份文件存储位置。;
	CrossBackupSetLocation *string `json:"CrossBackupSetLocation,omitempty" xml:"CrossBackupSetLocation,omitempty" require:"true"`
	// description: 备份文件的备份策略，取值：* **0**：实例备份；* **1**：单库备份。;
	BackupSetScale *int `json:"BackupSetScale,omitempty" xml:"BackupSetScale,omitempty" require:"true"`
	// description: 实例编号。用于区分该备份集产生于主实例或备实例。;
	InstanceId *int `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	// description: 存储类型。;
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty" require:"true"`
	// description: 实例系列，取值：* **Basic**：基础版；* **HighAvailability**：高可用版；* **Finance**：金融版（仅中国站支持）。;
	Category *string `json:"Category,omitempty" xml:"Category,omitempty" require:"true"`
	// description: 备份文件里数据的时间点。;
	ConsistentTime *string                                                    `json:"ConsistentTime,omitempty" xml:"ConsistentTime,omitempty" require:"true"`
	RestoreRegions *DescribeCrossRegionBackupsResponseItemsItemRestoreRegions `json:"RestoreRegions,omitempty" xml:"RestoreRegions,omitempty" require:"true" type:"Struct"`
}

func (s DescribeCrossRegionBackupsResponseItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsResponseItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetCrossBackupId(v int) *DescribeCrossRegionBackupsResponseItemsItem {
	s.CrossBackupId = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetCrossBackupRegion(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.CrossBackupRegion = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetBackupSetStatus(v int) *DescribeCrossRegionBackupsResponseItemsItem {
	s.BackupSetStatus = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetBackupStartTime(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.BackupStartTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetBackupEndTime(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.BackupEndTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetBackupType(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.BackupType = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetBackupMethod(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.BackupMethod = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetCrossBackupSetSize(v int64) *DescribeCrossRegionBackupsResponseItemsItem {
	s.CrossBackupSetSize = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetCrossBackupSetFile(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.CrossBackupSetFile = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetCrossBackupDownloadLink(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.CrossBackupDownloadLink = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetEngine(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.Engine = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetEngineVersion(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.EngineVersion = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetCrossBackupSetLocation(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.CrossBackupSetLocation = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetBackupSetScale(v int) *DescribeCrossRegionBackupsResponseItemsItem {
	s.BackupSetScale = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetInstanceId(v int) *DescribeCrossRegionBackupsResponseItemsItem {
	s.InstanceId = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetDBInstanceStorageType(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetCategory(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.Category = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetConsistentTime(v string) *DescribeCrossRegionBackupsResponseItemsItem {
	s.ConsistentTime = &v
	return s
}

func (s *DescribeCrossRegionBackupsResponseItemsItem) SetRestoreRegions(v *DescribeCrossRegionBackupsResponseItemsItemRestoreRegions) *DescribeCrossRegionBackupsResponseItemsItem {
	s.RestoreRegions = v
	return s
}

type DescribeCrossRegionBackupsResponseItemsItemRestoreRegions struct {
	// RestoreRegion
	RestoreRegion []*string `json:"RestoreRegion,omitempty" xml:"RestoreRegion,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeCrossRegionBackupsResponseItemsItemRestoreRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeCrossRegionBackupsResponseItemsItemRestoreRegions) GoString() string {
	return s.String()
}

func (s *DescribeCrossRegionBackupsResponseItemsItemRestoreRegions) SetRestoreRegion(v []*string) *DescribeCrossRegionBackupsResponseItemsItemRestoreRegions {
	s.RestoreRegion = v
	return s
}

type CheckCloudResourceAuthorizedRequest struct {
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TargetRegionId *string `json:"TargetRegionId,omitempty" xml:"TargetRegionId,omitempty"`
}

func (s CheckCloudResourceAuthorizedRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudResourceAuthorizedRequest) GoString() string {
	return s.String()
}

func (s *CheckCloudResourceAuthorizedRequest) SetSecurityToken(v string) *CheckCloudResourceAuthorizedRequest {
	s.SecurityToken = &v
	return s
}

func (s *CheckCloudResourceAuthorizedRequest) SetRegionId(v string) *CheckCloudResourceAuthorizedRequest {
	s.RegionId = &v
	return s
}

func (s *CheckCloudResourceAuthorizedRequest) SetDBInstanceId(v string) *CheckCloudResourceAuthorizedRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckCloudResourceAuthorizedRequest) SetTargetRegionId(v string) *CheckCloudResourceAuthorizedRequest {
	s.TargetRegionId = &v
	return s
}

type CheckCloudResourceAuthorizedResponse struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AuthorizationState *int    `json:"AuthorizationState,omitempty" xml:"AuthorizationState,omitempty" require:"true"`
	RoleArn            *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty" require:"true"`
}

func (s CheckCloudResourceAuthorizedResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckCloudResourceAuthorizedResponse) GoString() string {
	return s.String()
}

func (s *CheckCloudResourceAuthorizedResponse) SetRequestId(v string) *CheckCloudResourceAuthorizedResponse {
	s.RequestId = &v
	return s
}

func (s *CheckCloudResourceAuthorizedResponse) SetAuthorizationState(v int) *CheckCloudResourceAuthorizedResponse {
	s.AuthorizationState = &v
	return s
}

func (s *CheckCloudResourceAuthorizedResponse) SetRoleArn(v string) *CheckCloudResourceAuthorizedResponse {
	s.RoleArn = &v
	return s
}

type DescribeReadDBInstanceDelayRequest struct {
	SecurityToken  *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DBInstanceId   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ReadInstanceId *string `json:"ReadInstanceId,omitempty" xml:"ReadInstanceId,omitempty" require:"true"`
}

func (s DescribeReadDBInstanceDelayRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayRequest) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayRequest) SetSecurityToken(v string) *DescribeReadDBInstanceDelayRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeReadDBInstanceDelayRequest) SetDBInstanceId(v string) *DescribeReadDBInstanceDelayRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayRequest) SetReadInstanceId(v string) *DescribeReadDBInstanceDelayRequest {
	s.ReadInstanceId = &v
	return s
}

type DescribeReadDBInstanceDelayResponse struct {
	RequestId        *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId     *string                                   `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ReadDBInstanceId *string                                   `json:"ReadDBInstanceId,omitempty" xml:"ReadDBInstanceId,omitempty" require:"true"`
	DelayTime        *int                                      `json:"DelayTime,omitempty" xml:"DelayTime,omitempty" require:"true"`
	Items            *DescribeReadDBInstanceDelayResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeReadDBInstanceDelayResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponse) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponse) SetRequestId(v string) *DescribeReadDBInstanceDelayResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponse) SetDBInstanceId(v string) *DescribeReadDBInstanceDelayResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponse) SetReadDBInstanceId(v string) *DescribeReadDBInstanceDelayResponse {
	s.ReadDBInstanceId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponse) SetDelayTime(v int) *DescribeReadDBInstanceDelayResponse {
	s.DelayTime = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponse) SetItems(v *DescribeReadDBInstanceDelayResponseItems) *DescribeReadDBInstanceDelayResponse {
	s.Items = v
	return s
}

type DescribeReadDBInstanceDelayResponseItems struct {
	Items []*DescribeReadDBInstanceDelayResponseItemsItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeReadDBInstanceDelayResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseItems) SetItems(v []*DescribeReadDBInstanceDelayResponseItemsItems) *DescribeReadDBInstanceDelayResponseItems {
	s.Items = v
	return s
}

type DescribeReadDBInstanceDelayResponseItemsItems struct {
	DBInstanceId          *string                                                             `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ReadonlyInstanceDelay *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelay `json:"ReadonlyInstanceDelay,omitempty" xml:"ReadonlyInstanceDelay,omitempty" require:"true" type:"Struct"`
	ReadDBInstanceNames   *DescribeReadDBInstanceDelayResponseItemsItemsReadDBInstanceNames   `json:"ReadDBInstanceNames,omitempty" xml:"ReadDBInstanceNames,omitempty" require:"true" type:"Struct"`
	ReadDelayTimes        *DescribeReadDBInstanceDelayResponseItemsItemsReadDelayTimes        `json:"ReadDelayTimes,omitempty" xml:"ReadDelayTimes,omitempty" require:"true" type:"Struct"`
}

func (s DescribeReadDBInstanceDelayResponseItemsItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseItemsItems) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseItemsItems) SetDBInstanceId(v string) *DescribeReadDBInstanceDelayResponseItemsItems {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseItemsItems) SetReadonlyInstanceDelay(v *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelay) *DescribeReadDBInstanceDelayResponseItemsItems {
	s.ReadonlyInstanceDelay = v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseItemsItems) SetReadDBInstanceNames(v *DescribeReadDBInstanceDelayResponseItemsItemsReadDBInstanceNames) *DescribeReadDBInstanceDelayResponseItemsItems {
	s.ReadDBInstanceNames = v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseItemsItems) SetReadDelayTimes(v *DescribeReadDBInstanceDelayResponseItemsItemsReadDelayTimes) *DescribeReadDBInstanceDelayResponseItemsItems {
	s.ReadDelayTimes = v
	return s
}

type DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelay struct {
	ReadonlyInstanceDelay []*DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay `json:"ReadonlyInstanceDelay,omitempty" xml:"ReadonlyInstanceDelay,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelay) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelay) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelay) SetReadonlyInstanceDelay(v []*DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelay {
	s.ReadonlyInstanceDelay = v
	return s
}

type DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay struct {
	ReplayLatency      *string `json:"ReplayLatency,omitempty" xml:"ReplayLatency,omitempty" require:"true"`
	FlushLag           *string `json:"FlushLag,omitempty" xml:"FlushLag,omitempty" require:"true"`
	FlushLatency       *string `json:"FlushLatency,omitempty" xml:"FlushLatency,omitempty" require:"true"`
	SendLatency        *string `json:"SendLatency,omitempty" xml:"SendLatency,omitempty" require:"true"`
	WriteLag           *string `json:"WriteLag,omitempty" xml:"WriteLag,omitempty" require:"true"`
	ReplayLag          *string `json:"ReplayLag,omitempty" xml:"ReplayLag,omitempty" require:"true"`
	WriteLatency       *string `json:"WriteLatency,omitempty" xml:"WriteLatency,omitempty" require:"true"`
	ReadDBInstanceName *string `json:"ReadDBInstanceName,omitempty" xml:"ReadDBInstanceName,omitempty" require:"true"`
}

func (s DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetReplayLatency(v string) *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.ReplayLatency = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetFlushLag(v string) *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.FlushLag = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetFlushLatency(v string) *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.FlushLatency = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetSendLatency(v string) *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.SendLatency = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetWriteLag(v string) *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.WriteLag = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetReplayLag(v string) *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.ReplayLag = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetWriteLatency(v string) *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.WriteLatency = &v
	return s
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay) SetReadDBInstanceName(v string) *DescribeReadDBInstanceDelayResponseItemsItemsReadonlyInstanceDelayReadonlyInstanceDelay {
	s.ReadDBInstanceName = &v
	return s
}

type DescribeReadDBInstanceDelayResponseItemsItemsReadDBInstanceNames struct {
	// ReadDBInstanceName
	ReadDBInstanceName []*string `json:"ReadDBInstanceName,omitempty" xml:"ReadDBInstanceName,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeReadDBInstanceDelayResponseItemsItemsReadDBInstanceNames) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseItemsItemsReadDBInstanceNames) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadDBInstanceNames) SetReadDBInstanceName(v []*string) *DescribeReadDBInstanceDelayResponseItemsItemsReadDBInstanceNames {
	s.ReadDBInstanceName = v
	return s
}

type DescribeReadDBInstanceDelayResponseItemsItemsReadDelayTimes struct {
	// ReadDelayTime
	ReadDelayTime []*string `json:"ReadDelayTime,omitempty" xml:"ReadDelayTime,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeReadDBInstanceDelayResponseItemsItemsReadDelayTimes) String() string {
	return tea.Prettify(s)
}

func (s DescribeReadDBInstanceDelayResponseItemsItemsReadDelayTimes) GoString() string {
	return s.String()
}

func (s *DescribeReadDBInstanceDelayResponseItemsItemsReadDelayTimes) SetReadDelayTime(v []*string) *DescribeReadDBInstanceDelayResponseItemsItemsReadDelayTimes {
	s.ReadDelayTime = v
	return s
}

type RestoreTableRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupId     *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime  *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	TableMeta    *string `json:"TableMeta,omitempty" xml:"TableMeta,omitempty" require:"true"`
}

func (s RestoreTableRequest) String() string {
	return tea.Prettify(s)
}

func (s RestoreTableRequest) GoString() string {
	return s.String()
}

func (s *RestoreTableRequest) SetClientToken(v string) *RestoreTableRequest {
	s.ClientToken = &v
	return s
}

func (s *RestoreTableRequest) SetDBInstanceId(v string) *RestoreTableRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RestoreTableRequest) SetBackupId(v string) *RestoreTableRequest {
	s.BackupId = &v
	return s
}

func (s *RestoreTableRequest) SetRestoreTime(v string) *RestoreTableRequest {
	s.RestoreTime = &v
	return s
}

func (s *RestoreTableRequest) SetTableMeta(v string) *RestoreTableRequest {
	s.TableMeta = &v
	return s
}

type RestoreTableResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RestoreTableResponse) String() string {
	return tea.Prettify(s)
}

func (s RestoreTableResponse) GoString() string {
	return s.String()
}

func (s *RestoreTableResponse) SetRequestId(v string) *RestoreTableResponse {
	s.RequestId = &v
	return s
}

type CreateParameterGroupRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ParameterGroupName *string `json:"ParameterGroupName,omitempty" xml:"ParameterGroupName,omitempty" require:"true"`
	Engine             *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion      *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	Parameters         *string `json:"Parameters,omitempty" xml:"Parameters,omitempty" require:"true"`
	ParameterGroupDesc *string `json:"ParameterGroupDesc,omitempty" xml:"ParameterGroupDesc,omitempty"`
}

func (s CreateParameterGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateParameterGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateParameterGroupRequest) SetRegionId(v string) *CreateParameterGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateParameterGroupRequest) SetParameterGroupName(v string) *CreateParameterGroupRequest {
	s.ParameterGroupName = &v
	return s
}

func (s *CreateParameterGroupRequest) SetEngine(v string) *CreateParameterGroupRequest {
	s.Engine = &v
	return s
}

func (s *CreateParameterGroupRequest) SetEngineVersion(v string) *CreateParameterGroupRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateParameterGroupRequest) SetParameters(v string) *CreateParameterGroupRequest {
	s.Parameters = &v
	return s
}

func (s *CreateParameterGroupRequest) SetParameterGroupDesc(v string) *CreateParameterGroupRequest {
	s.ParameterGroupDesc = &v
	return s
}

type CreateParameterGroupResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateParameterGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateParameterGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateParameterGroupResponse) SetRequestId(v string) *CreateParameterGroupResponse {
	s.RequestId = &v
	return s
}

type DescribeParameterGroupsRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeParameterGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupsRequest) SetRegionId(v string) *DescribeParameterGroupsRequest {
	s.RegionId = &v
	return s
}

type DescribeParameterGroupsResponse struct {
	RequestId               *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	SignalForOptimizeParams *bool                                           `json:"SignalForOptimizeParams,omitempty" xml:"SignalForOptimizeParams,omitempty" require:"true"`
	ParameterGroups         *DescribeParameterGroupsResponseParameterGroups `json:"ParameterGroups,omitempty" xml:"ParameterGroups,omitempty" require:"true" type:"Struct"`
}

func (s DescribeParameterGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupsResponse) SetRequestId(v string) *DescribeParameterGroupsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeParameterGroupsResponse) SetSignalForOptimizeParams(v bool) *DescribeParameterGroupsResponse {
	s.SignalForOptimizeParams = &v
	return s
}

func (s *DescribeParameterGroupsResponse) SetParameterGroups(v *DescribeParameterGroupsResponseParameterGroups) *DescribeParameterGroupsResponse {
	s.ParameterGroups = v
	return s
}

type DescribeParameterGroupsResponseParameterGroups struct {
	ParameterGroup []*DescribeParameterGroupsResponseParameterGroupsParameterGroup `json:"ParameterGroup,omitempty" xml:"ParameterGroup,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeParameterGroupsResponseParameterGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupsResponseParameterGroups) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupsResponseParameterGroups) SetParameterGroup(v []*DescribeParameterGroupsResponseParameterGroupsParameterGroup) *DescribeParameterGroupsResponseParameterGroups {
	s.ParameterGroup = v
	return s
}

type DescribeParameterGroupsResponseParameterGroupsParameterGroup struct {
	ParameterGroupType *int    `json:"ParameterGroupType,omitempty" xml:"ParameterGroupType,omitempty" require:"true"`
	ParameterGroupName *string `json:"ParameterGroupName,omitempty" xml:"ParameterGroupName,omitempty" require:"true"`
	ParamCounts        *int    `json:"ParamCounts,omitempty" xml:"ParamCounts,omitempty" require:"true"`
	ParameterGroupDesc *string `json:"ParameterGroupDesc,omitempty" xml:"ParameterGroupDesc,omitempty" require:"true"`
	ForceRestart       *int    `json:"ForceRestart,omitempty" xml:"ForceRestart,omitempty" require:"true"`
	Engine             *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion      *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	CreateTime         *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	UpdateTime         *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	ParameterGroupId   *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty" require:"true"`
}

func (s DescribeParameterGroupsResponseParameterGroupsParameterGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupsResponseParameterGroupsParameterGroup) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupsResponseParameterGroupsParameterGroup) SetParameterGroupType(v int) *DescribeParameterGroupsResponseParameterGroupsParameterGroup {
	s.ParameterGroupType = &v
	return s
}

func (s *DescribeParameterGroupsResponseParameterGroupsParameterGroup) SetParameterGroupName(v string) *DescribeParameterGroupsResponseParameterGroupsParameterGroup {
	s.ParameterGroupName = &v
	return s
}

func (s *DescribeParameterGroupsResponseParameterGroupsParameterGroup) SetParamCounts(v int) *DescribeParameterGroupsResponseParameterGroupsParameterGroup {
	s.ParamCounts = &v
	return s
}

func (s *DescribeParameterGroupsResponseParameterGroupsParameterGroup) SetParameterGroupDesc(v string) *DescribeParameterGroupsResponseParameterGroupsParameterGroup {
	s.ParameterGroupDesc = &v
	return s
}

func (s *DescribeParameterGroupsResponseParameterGroupsParameterGroup) SetForceRestart(v int) *DescribeParameterGroupsResponseParameterGroupsParameterGroup {
	s.ForceRestart = &v
	return s
}

func (s *DescribeParameterGroupsResponseParameterGroupsParameterGroup) SetEngine(v string) *DescribeParameterGroupsResponseParameterGroupsParameterGroup {
	s.Engine = &v
	return s
}

func (s *DescribeParameterGroupsResponseParameterGroupsParameterGroup) SetEngineVersion(v string) *DescribeParameterGroupsResponseParameterGroupsParameterGroup {
	s.EngineVersion = &v
	return s
}

func (s *DescribeParameterGroupsResponseParameterGroupsParameterGroup) SetCreateTime(v string) *DescribeParameterGroupsResponseParameterGroupsParameterGroup {
	s.CreateTime = &v
	return s
}

func (s *DescribeParameterGroupsResponseParameterGroupsParameterGroup) SetUpdateTime(v string) *DescribeParameterGroupsResponseParameterGroupsParameterGroup {
	s.UpdateTime = &v
	return s
}

func (s *DescribeParameterGroupsResponseParameterGroupsParameterGroup) SetParameterGroupId(v string) *DescribeParameterGroupsResponseParameterGroupsParameterGroup {
	s.ParameterGroupId = &v
	return s
}

type CloneParameterGroupRequest struct {
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	TargetRegionId     *string `json:"TargetRegionId,omitempty" xml:"TargetRegionId,omitempty" require:"true"`
	ParameterGroupId   *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty" require:"true"`
	ParameterGroupName *string `json:"ParameterGroupName,omitempty" xml:"ParameterGroupName,omitempty" require:"true"`
	ParameterGroupDesc *string `json:"ParameterGroupDesc,omitempty" xml:"ParameterGroupDesc,omitempty"`
}

func (s CloneParameterGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneParameterGroupRequest) GoString() string {
	return s.String()
}

func (s *CloneParameterGroupRequest) SetRegionId(v string) *CloneParameterGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CloneParameterGroupRequest) SetTargetRegionId(v string) *CloneParameterGroupRequest {
	s.TargetRegionId = &v
	return s
}

func (s *CloneParameterGroupRequest) SetParameterGroupId(v string) *CloneParameterGroupRequest {
	s.ParameterGroupId = &v
	return s
}

func (s *CloneParameterGroupRequest) SetParameterGroupName(v string) *CloneParameterGroupRequest {
	s.ParameterGroupName = &v
	return s
}

func (s *CloneParameterGroupRequest) SetParameterGroupDesc(v string) *CloneParameterGroupRequest {
	s.ParameterGroupDesc = &v
	return s
}

type CloneParameterGroupResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CloneParameterGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneParameterGroupResponse) GoString() string {
	return s.String()
}

func (s *CloneParameterGroupResponse) SetRequestId(v string) *CloneParameterGroupResponse {
	s.RequestId = &v
	return s
}

type DescribeParameterGroupRequest struct {
	ParameterGroupId *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty" require:"true"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeParameterGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupRequest) SetParameterGroupId(v string) *DescribeParameterGroupRequest {
	s.ParameterGroupId = &v
	return s
}

func (s *DescribeParameterGroupRequest) SetRegionId(v string) *DescribeParameterGroupRequest {
	s.RegionId = &v
	return s
}

type DescribeParameterGroupResponse struct {
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ParamGroup *DescribeParameterGroupResponseParamGroup `json:"ParamGroup,omitempty" xml:"ParamGroup,omitempty" require:"true" type:"Struct"`
}

func (s DescribeParameterGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponse) SetRequestId(v string) *DescribeParameterGroupResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeParameterGroupResponse) SetParamGroup(v *DescribeParameterGroupResponseParamGroup) *DescribeParameterGroupResponse {
	s.ParamGroup = v
	return s
}

type DescribeParameterGroupResponseParamGroup struct {
	ParameterGroup []*DescribeParameterGroupResponseParamGroupParameterGroup `json:"ParameterGroup,omitempty" xml:"ParameterGroup,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeParameterGroupResponseParamGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponseParamGroup) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponseParamGroup) SetParameterGroup(v []*DescribeParameterGroupResponseParamGroupParameterGroup) *DescribeParameterGroupResponseParamGroup {
	s.ParameterGroup = v
	return s
}

type DescribeParameterGroupResponseParamGroupParameterGroup struct {
	ParameterGroupType *int                                                               `json:"ParameterGroupType,omitempty" xml:"ParameterGroupType,omitempty" require:"true"`
	ParameterGroupName *string                                                            `json:"ParameterGroupName,omitempty" xml:"ParameterGroupName,omitempty" require:"true"`
	ParamCounts        *int                                                               `json:"ParamCounts,omitempty" xml:"ParamCounts,omitempty" require:"true"`
	ParameterGroupDesc *string                                                            `json:"ParameterGroupDesc,omitempty" xml:"ParameterGroupDesc,omitempty" require:"true"`
	ForceRestart       *int                                                               `json:"ForceRestart,omitempty" xml:"ForceRestart,omitempty" require:"true"`
	Engine             *string                                                            `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion      *string                                                            `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	ParameterGroupId   *string                                                            `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty" require:"true"`
	CreateTime         *string                                                            `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	UpdateTime         *string                                                            `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	ParamDetail        *DescribeParameterGroupResponseParamGroupParameterGroupParamDetail `json:"ParamDetail,omitempty" xml:"ParamDetail,omitempty" require:"true" type:"Struct"`
}

func (s DescribeParameterGroupResponseParamGroupParameterGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponseParamGroupParameterGroup) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetParameterGroupType(v int) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.ParameterGroupType = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetParameterGroupName(v string) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.ParameterGroupName = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetParamCounts(v int) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.ParamCounts = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetParameterGroupDesc(v string) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.ParameterGroupDesc = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetForceRestart(v int) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.ForceRestart = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetEngine(v string) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.Engine = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetEngineVersion(v string) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.EngineVersion = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetParameterGroupId(v string) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.ParameterGroupId = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetCreateTime(v string) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.CreateTime = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetUpdateTime(v string) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.UpdateTime = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroup) SetParamDetail(v *DescribeParameterGroupResponseParamGroupParameterGroupParamDetail) *DescribeParameterGroupResponseParamGroupParameterGroup {
	s.ParamDetail = v
	return s
}

type DescribeParameterGroupResponseParamGroupParameterGroupParamDetail struct {
	ParameterDetail []*DescribeParameterGroupResponseParamGroupParameterGroupParamDetailParameterDetail `json:"ParameterDetail,omitempty" xml:"ParameterDetail,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeParameterGroupResponseParamGroupParameterGroupParamDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponseParamGroupParameterGroupParamDetail) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroupParamDetail) SetParameterDetail(v []*DescribeParameterGroupResponseParamGroupParameterGroupParamDetailParameterDetail) *DescribeParameterGroupResponseParamGroupParameterGroupParamDetail {
	s.ParameterDetail = v
	return s
}

type DescribeParameterGroupResponseParamGroupParameterGroupParamDetailParameterDetail struct {
	ParamName  *string `json:"ParamName,omitempty" xml:"ParamName,omitempty" require:"true"`
	ParamValue *string `json:"ParamValue,omitempty" xml:"ParamValue,omitempty" require:"true"`
}

func (s DescribeParameterGroupResponseParamGroupParameterGroupParamDetailParameterDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterGroupResponseParamGroupParameterGroupParamDetailParameterDetail) GoString() string {
	return s.String()
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroupParamDetailParameterDetail) SetParamName(v string) *DescribeParameterGroupResponseParamGroupParameterGroupParamDetailParameterDetail {
	s.ParamName = &v
	return s
}

func (s *DescribeParameterGroupResponseParamGroupParameterGroupParamDetailParameterDetail) SetParamValue(v string) *DescribeParameterGroupResponseParamGroupParameterGroupParamDetailParameterDetail {
	s.ParamValue = &v
	return s
}

type ModifyParameterGroupRequest struct {
	ParameterGroupId   *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty" require:"true"`
	ParameterGroupName *string `json:"ParameterGroupName,omitempty" xml:"ParameterGroupName,omitempty"`
	ParameterGroupDesc *string `json:"ParameterGroupDesc,omitempty" xml:"ParameterGroupDesc,omitempty"`
	Parameters         *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s ModifyParameterGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyParameterGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyParameterGroupRequest) SetParameterGroupId(v string) *ModifyParameterGroupRequest {
	s.ParameterGroupId = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetParameterGroupName(v string) *ModifyParameterGroupRequest {
	s.ParameterGroupName = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetParameterGroupDesc(v string) *ModifyParameterGroupRequest {
	s.ParameterGroupDesc = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetParameters(v string) *ModifyParameterGroupRequest {
	s.Parameters = &v
	return s
}

func (s *ModifyParameterGroupRequest) SetRegionId(v string) *ModifyParameterGroupRequest {
	s.RegionId = &v
	return s
}

type ModifyParameterGroupResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyParameterGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyParameterGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyParameterGroupResponse) SetRequestId(v string) *ModifyParameterGroupResponse {
	s.RequestId = &v
	return s
}

type DeleteParameterGroupRequest struct {
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ParameterGroupId *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty" require:"true"`
}

func (s DeleteParameterGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteParameterGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteParameterGroupRequest) SetRegionId(v string) *DeleteParameterGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteParameterGroupRequest) SetParameterGroupId(v string) *DeleteParameterGroupRequest {
	s.ParameterGroupId = &v
	return s
}

type DeleteParameterGroupResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteParameterGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteParameterGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteParameterGroupResponse) SetRequestId(v string) *DeleteParameterGroupResponse {
	s.RequestId = &v
	return s
}

type ModifySQLCollectorRetentionRequest struct {
	SecurityToken   *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ConfigValue     *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ModifySQLCollectorRetentionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorRetentionRequest) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorRetentionRequest) SetSecurityToken(v string) *ModifySQLCollectorRetentionRequest {
	s.SecurityToken = &v
	return s
}

func (s *ModifySQLCollectorRetentionRequest) SetDBInstanceId(v string) *ModifySQLCollectorRetentionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySQLCollectorRetentionRequest) SetConfigValue(v string) *ModifySQLCollectorRetentionRequest {
	s.ConfigValue = &v
	return s
}

func (s *ModifySQLCollectorRetentionRequest) SetResourceGroupId(v string) *ModifySQLCollectorRetentionRequest {
	s.ResourceGroupId = &v
	return s
}

type ModifySQLCollectorRetentionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifySQLCollectorRetentionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorRetentionResponse) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorRetentionResponse) SetRequestId(v string) *ModifySQLCollectorRetentionResponse {
	s.RequestId = &v
	return s
}

type DescribeSQLCollectorRetentionRequest struct {
	SecurityToken   *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeSQLCollectorRetentionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLCollectorRetentionRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLCollectorRetentionRequest) SetSecurityToken(v string) *DescribeSQLCollectorRetentionRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeSQLCollectorRetentionRequest) SetDBInstanceId(v string) *DescribeSQLCollectorRetentionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLCollectorRetentionRequest) SetResourceGroupId(v string) *DescribeSQLCollectorRetentionRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeSQLCollectorRetentionResponse struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty" require:"true"`
}

func (s DescribeSQLCollectorRetentionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLCollectorRetentionResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLCollectorRetentionResponse) SetRequestId(v string) *DescribeSQLCollectorRetentionResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLCollectorRetentionResponse) SetConfigValue(v string) *DescribeSQLCollectorRetentionResponse {
	s.ConfigValue = &v
	return s
}

type CheckInstanceExistRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s CheckInstanceExistRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckInstanceExistRequest) GoString() string {
	return s.String()
}

func (s *CheckInstanceExistRequest) SetDBInstanceId(v string) *CheckInstanceExistRequest {
	s.DBInstanceId = &v
	return s
}

type CheckInstanceExistResponse struct {
	RequestId       *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	IsExistInstance *bool   `json:"IsExistInstance,omitempty" xml:"IsExistInstance,omitempty" require:"true"`
}

func (s CheckInstanceExistResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckInstanceExistResponse) GoString() string {
	return s.String()
}

func (s *CheckInstanceExistResponse) SetRequestId(v string) *CheckInstanceExistResponse {
	s.RequestId = &v
	return s
}

func (s *CheckInstanceExistResponse) SetIsExistInstance(v bool) *CheckInstanceExistResponse {
	s.IsExistInstance = &v
	return s
}

type DescribeLogBackupFilesRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeLogBackupFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupFilesRequest) SetDBInstanceId(v string) *DescribeLogBackupFilesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetStartTime(v string) *DescribeLogBackupFilesRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetEndTime(v string) *DescribeLogBackupFilesRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetPageSize(v int) *DescribeLogBackupFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLogBackupFilesRequest) SetPageNumber(v int) *DescribeLogBackupFilesRequest {
	s.PageNumber = &v
	return s
}

type DescribeLogBackupFilesResponse struct {
	RequestId        *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int                                 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                                 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	TotalFileSize    *int64                               `json:"TotalFileSize,omitempty" xml:"TotalFileSize,omitempty" require:"true"`
	Items            *DescribeLogBackupFilesResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeLogBackupFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupFilesResponse) SetRequestId(v string) *DescribeLogBackupFilesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeLogBackupFilesResponse) SetTotalRecordCount(v int) *DescribeLogBackupFilesResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeLogBackupFilesResponse) SetPageNumber(v int) *DescribeLogBackupFilesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeLogBackupFilesResponse) SetPageRecordCount(v int) *DescribeLogBackupFilesResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeLogBackupFilesResponse) SetTotalFileSize(v int64) *DescribeLogBackupFilesResponse {
	s.TotalFileSize = &v
	return s
}

func (s *DescribeLogBackupFilesResponse) SetItems(v *DescribeLogBackupFilesResponseItems) *DescribeLogBackupFilesResponse {
	s.Items = v
	return s
}

type DescribeLogBackupFilesResponseItems struct {
	BinLogFile []*DescribeLogBackupFilesResponseItemsBinLogFile `json:"BinLogFile,omitempty" xml:"BinLogFile,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeLogBackupFilesResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupFilesResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupFilesResponseItems) SetBinLogFile(v []*DescribeLogBackupFilesResponseItemsBinLogFile) *DescribeLogBackupFilesResponseItems {
	s.BinLogFile = v
	return s
}

type DescribeLogBackupFilesResponseItemsBinLogFile struct {
	FileSize             *int64  `json:"FileSize,omitempty" xml:"FileSize,omitempty" require:"true"`
	LogBeginTime         *string `json:"LogBeginTime,omitempty" xml:"LogBeginTime,omitempty" require:"true"`
	LogEndTime           *string `json:"LogEndTime,omitempty" xml:"LogEndTime,omitempty" require:"true"`
	DownloadLink         *string `json:"DownloadLink,omitempty" xml:"DownloadLink,omitempty" require:"true"`
	IntranetDownloadLink *string `json:"IntranetDownloadLink,omitempty" xml:"IntranetDownloadLink,omitempty" require:"true"`
	LinkExpiredTime      *string `json:"LinkExpiredTime,omitempty" xml:"LinkExpiredTime,omitempty" require:"true"`
}

func (s DescribeLogBackupFilesResponseItemsBinLogFile) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogBackupFilesResponseItemsBinLogFile) GoString() string {
	return s.String()
}

func (s *DescribeLogBackupFilesResponseItemsBinLogFile) SetFileSize(v int64) *DescribeLogBackupFilesResponseItemsBinLogFile {
	s.FileSize = &v
	return s
}

func (s *DescribeLogBackupFilesResponseItemsBinLogFile) SetLogBeginTime(v string) *DescribeLogBackupFilesResponseItemsBinLogFile {
	s.LogBeginTime = &v
	return s
}

func (s *DescribeLogBackupFilesResponseItemsBinLogFile) SetLogEndTime(v string) *DescribeLogBackupFilesResponseItemsBinLogFile {
	s.LogEndTime = &v
	return s
}

func (s *DescribeLogBackupFilesResponseItemsBinLogFile) SetDownloadLink(v string) *DescribeLogBackupFilesResponseItemsBinLogFile {
	s.DownloadLink = &v
	return s
}

func (s *DescribeLogBackupFilesResponseItemsBinLogFile) SetIntranetDownloadLink(v string) *DescribeLogBackupFilesResponseItemsBinLogFile {
	s.IntranetDownloadLink = &v
	return s
}

func (s *DescribeLogBackupFilesResponseItemsBinLogFile) SetLinkExpiredTime(v string) *DescribeLogBackupFilesResponseItemsBinLogFile {
	s.LinkExpiredTime = &v
	return s
}

type MigrateSecurityIPModeRequest struct {
	// description: The ID of the instance. ;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s MigrateSecurityIPModeRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateSecurityIPModeRequest) GoString() string {
	return s.String()
}

func (s *MigrateSecurityIPModeRequest) SetDBInstanceId(v string) *MigrateSecurityIPModeRequest {
	s.DBInstanceId = &v
	return s
}

type MigrateSecurityIPModeResponse struct {
	// description: The ID of the request. ;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: The ID of the instance. ;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: The mode of the whitelist after the switch. Valid values:**safety**.;
	SecurityIPMode *string `json:"SecurityIPMode,omitempty" xml:"SecurityIPMode,omitempty" require:"true"`
}

func (s MigrateSecurityIPModeResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateSecurityIPModeResponse) GoString() string {
	return s.String()
}

func (s *MigrateSecurityIPModeResponse) SetRequestId(v string) *MigrateSecurityIPModeResponse {
	s.RequestId = &v
	return s
}

func (s *MigrateSecurityIPModeResponse) SetDBInstanceId(v string) *MigrateSecurityIPModeResponse {
	s.DBInstanceId = &v
	return s
}

func (s *MigrateSecurityIPModeResponse) SetSecurityIPMode(v string) *MigrateSecurityIPModeResponse {
	s.SecurityIPMode = &v
	return s
}

type SwitchDBInstanceVpcRequest struct {
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	VPCId            *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId        *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s SwitchDBInstanceVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceVpcRequest) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceVpcRequest) SetDBInstanceId(v string) *SwitchDBInstanceVpcRequest {
	s.DBInstanceId = &v
	return s
}

func (s *SwitchDBInstanceVpcRequest) SetVPCId(v string) *SwitchDBInstanceVpcRequest {
	s.VPCId = &v
	return s
}

func (s *SwitchDBInstanceVpcRequest) SetVSwitchId(v string) *SwitchDBInstanceVpcRequest {
	s.VSwitchId = &v
	return s
}

func (s *SwitchDBInstanceVpcRequest) SetPrivateIpAddress(v string) *SwitchDBInstanceVpcRequest {
	s.PrivateIpAddress = &v
	return s
}

type SwitchDBInstanceVpcResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s SwitchDBInstanceVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceVpcResponse) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceVpcResponse) SetRequestId(v string) *SwitchDBInstanceVpcResponse {
	s.RequestId = &v
	return s
}

type DescribeCollationTimeZonesRequest struct {
}

func (s DescribeCollationTimeZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollationTimeZonesRequest) GoString() string {
	return s.String()
}

type DescribeCollationTimeZonesResponse struct {
	RequestId          *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	CollationTimeZones *DescribeCollationTimeZonesResponseCollationTimeZones `json:"CollationTimeZones,omitempty" xml:"CollationTimeZones,omitempty" require:"true" type:"Struct"`
}

func (s DescribeCollationTimeZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollationTimeZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCollationTimeZonesResponse) SetRequestId(v string) *DescribeCollationTimeZonesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCollationTimeZonesResponse) SetCollationTimeZones(v *DescribeCollationTimeZonesResponseCollationTimeZones) *DescribeCollationTimeZonesResponse {
	s.CollationTimeZones = v
	return s
}

type DescribeCollationTimeZonesResponseCollationTimeZones struct {
	CollationTimeZone []*DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone `json:"CollationTimeZone,omitempty" xml:"CollationTimeZone,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeCollationTimeZonesResponseCollationTimeZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollationTimeZonesResponseCollationTimeZones) GoString() string {
	return s.String()
}

func (s *DescribeCollationTimeZonesResponseCollationTimeZones) SetCollationTimeZone(v []*DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone) *DescribeCollationTimeZonesResponseCollationTimeZones {
	s.CollationTimeZone = v
	return s
}

type DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone struct {
	TimeZone           *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty" require:"true"`
	StandardTimeOffset *string `json:"StandardTimeOffset,omitempty" xml:"StandardTimeOffset,omitempty" require:"true"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone) GoString() string {
	return s.String()
}

func (s *DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone) SetTimeZone(v string) *DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone {
	s.TimeZone = &v
	return s
}

func (s *DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone) SetStandardTimeOffset(v string) *DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone {
	s.StandardTimeOffset = &v
	return s
}

func (s *DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone) SetDescription(v string) *DescribeCollationTimeZonesResponseCollationTimeZonesCollationTimeZone {
	s.Description = &v
	return s
}

type DescribeInstanceKeywordsRequest struct {
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s DescribeInstanceKeywordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceKeywordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceKeywordsRequest) SetKey(v string) *DescribeInstanceKeywordsRequest {
	s.Key = &v
	return s
}

type DescribeInstanceKeywordsResponse struct {
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Key       *string                                `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Words     *DescribeInstanceKeywordsResponseWords `json:"Words,omitempty" xml:"Words,omitempty" require:"true" type:"Struct"`
}

func (s DescribeInstanceKeywordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceKeywordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceKeywordsResponse) SetRequestId(v string) *DescribeInstanceKeywordsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceKeywordsResponse) SetKey(v string) *DescribeInstanceKeywordsResponse {
	s.Key = &v
	return s
}

func (s *DescribeInstanceKeywordsResponse) SetWords(v *DescribeInstanceKeywordsResponseWords) *DescribeInstanceKeywordsResponse {
	s.Words = v
	return s
}

type DescribeInstanceKeywordsResponseWords struct {
	Word []*string `json:"word,omitempty" xml:"word,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeInstanceKeywordsResponseWords) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceKeywordsResponseWords) GoString() string {
	return s.String()
}

func (s *DescribeInstanceKeywordsResponseWords) SetWord(v []*string) *DescribeInstanceKeywordsResponseWords {
	s.Word = v
	return s
}

type ModifyCollationTimeZoneRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Collation    *string `json:"Collation,omitempty" xml:"Collation,omitempty"`
	Timezone     *string `json:"Timezone,omitempty" xml:"Timezone,omitempty"`
}

func (s ModifyCollationTimeZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCollationTimeZoneRequest) GoString() string {
	return s.String()
}

func (s *ModifyCollationTimeZoneRequest) SetDBInstanceId(v string) *ModifyCollationTimeZoneRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyCollationTimeZoneRequest) SetCollation(v string) *ModifyCollationTimeZoneRequest {
	s.Collation = &v
	return s
}

func (s *ModifyCollationTimeZoneRequest) SetTimezone(v string) *ModifyCollationTimeZoneRequest {
	s.Timezone = &v
	return s
}

type ModifyCollationTimeZoneResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	Timezone     *string `json:"Timezone,omitempty" xml:"Timezone,omitempty" require:"true"`
	Collation    *string `json:"Collation,omitempty" xml:"Collation,omitempty" require:"true"`
}

func (s ModifyCollationTimeZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCollationTimeZoneResponse) GoString() string {
	return s.String()
}

func (s *ModifyCollationTimeZoneResponse) SetRequestId(v string) *ModifyCollationTimeZoneResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyCollationTimeZoneResponse) SetDBInstanceId(v string) *ModifyCollationTimeZoneResponse {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyCollationTimeZoneResponse) SetTaskId(v string) *ModifyCollationTimeZoneResponse {
	s.TaskId = &v
	return s
}

func (s *ModifyCollationTimeZoneResponse) SetTimezone(v string) *ModifyCollationTimeZoneResponse {
	s.Timezone = &v
	return s
}

func (s *ModifyCollationTimeZoneResponse) SetCollation(v string) *ModifyCollationTimeZoneResponse {
	s.Collation = &v
	return s
}

type DescribeBackupDatabaseRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupId     *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
}

func (s DescribeBackupDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupDatabaseRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupDatabaseRequest) SetDBInstanceId(v string) *DescribeBackupDatabaseRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupDatabaseRequest) SetBackupId(v string) *DescribeBackupDatabaseRequest {
	s.BackupId = &v
	return s
}

type DescribeBackupDatabaseResponse struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DatabaseNames *string `json:"DatabaseNames,omitempty" xml:"DatabaseNames,omitempty" require:"true"`
}

func (s DescribeBackupDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupDatabaseResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupDatabaseResponse) SetRequestId(v string) *DescribeBackupDatabaseResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBackupDatabaseResponse) SetDatabaseNames(v string) *DescribeBackupDatabaseResponse {
	s.DatabaseNames = &v
	return s
}

type CopyDatabaseBetweenInstancesRequest struct {
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	TargetDBInstanceId *string `json:"TargetDBInstanceId,omitempty" xml:"TargetDBInstanceId,omitempty" require:"true"`
	DbNames            *string `json:"DbNames,omitempty" xml:"DbNames,omitempty" require:"true"`
	BackupId           *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime        *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	SyncUserPrivilege  *string `json:"SyncUserPrivilege,omitempty" xml:"SyncUserPrivilege,omitempty"`
}

func (s CopyDatabaseBetweenInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyDatabaseBetweenInstancesRequest) GoString() string {
	return s.String()
}

func (s *CopyDatabaseBetweenInstancesRequest) SetDBInstanceId(v string) *CopyDatabaseBetweenInstancesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetTargetDBInstanceId(v string) *CopyDatabaseBetweenInstancesRequest {
	s.TargetDBInstanceId = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetDbNames(v string) *CopyDatabaseBetweenInstancesRequest {
	s.DbNames = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetBackupId(v string) *CopyDatabaseBetweenInstancesRequest {
	s.BackupId = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetRestoreTime(v string) *CopyDatabaseBetweenInstancesRequest {
	s.RestoreTime = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesRequest) SetSyncUserPrivilege(v string) *CopyDatabaseBetweenInstancesRequest {
	s.SyncUserPrivilege = &v
	return s
}

type CopyDatabaseBetweenInstancesResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s CopyDatabaseBetweenInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyDatabaseBetweenInstancesResponse) GoString() string {
	return s.String()
}

func (s *CopyDatabaseBetweenInstancesResponse) SetRequestId(v string) *CopyDatabaseBetweenInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *CopyDatabaseBetweenInstancesResponse) SetDBInstanceId(v string) *CopyDatabaseBetweenInstancesResponse {
	s.DBInstanceId = &v
	return s
}

type RecoveryDBInstanceRequest struct {
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage     *int    `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	InstanceNetworkType   *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	TargetDBInstanceId    *string `json:"TargetDBInstanceId,omitempty" xml:"TargetDBInstanceId,omitempty"`
	DbNames               *string `json:"DbNames,omitempty" xml:"DbNames,omitempty" require:"true"`
	BackupId              *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime           *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	VPCId                 *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId             *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress      *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	UsedTime              *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	Period                *string `json:"Period,omitempty" xml:"Period,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
}

func (s RecoveryDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RecoveryDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *RecoveryDBInstanceRequest) SetDBInstanceClass(v string) *RecoveryDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetDBInstanceStorage(v int) *RecoveryDBInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetPayType(v string) *RecoveryDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetInstanceNetworkType(v string) *RecoveryDBInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetDBInstanceId(v string) *RecoveryDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetTargetDBInstanceId(v string) *RecoveryDBInstanceRequest {
	s.TargetDBInstanceId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetDbNames(v string) *RecoveryDBInstanceRequest {
	s.DbNames = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetBackupId(v string) *RecoveryDBInstanceRequest {
	s.BackupId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetRestoreTime(v string) *RecoveryDBInstanceRequest {
	s.RestoreTime = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetVPCId(v string) *RecoveryDBInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetVSwitchId(v string) *RecoveryDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetPrivateIpAddress(v string) *RecoveryDBInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetUsedTime(v string) *RecoveryDBInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetPeriod(v string) *RecoveryDBInstanceRequest {
	s.Period = &v
	return s
}

func (s *RecoveryDBInstanceRequest) SetDBInstanceStorageType(v string) *RecoveryDBInstanceRequest {
	s.DBInstanceStorageType = &v
	return s
}

type RecoveryDBInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	OrderId      *string `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s RecoveryDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RecoveryDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *RecoveryDBInstanceResponse) SetRequestId(v string) *RecoveryDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *RecoveryDBInstanceResponse) SetDBInstanceId(v string) *RecoveryDBInstanceResponse {
	s.DBInstanceId = &v
	return s
}

func (s *RecoveryDBInstanceResponse) SetOrderId(v string) *RecoveryDBInstanceResponse {
	s.OrderId = &v
	return s
}

type DescribeAvailableResourceRequest struct {
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceChargeType    *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty" require:"true"`
	Engine                *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	OrderType             *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	Category              *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DispenseMode          *int    `json:"DispenseMode,omitempty" xml:"DispenseMode,omitempty"`
}

func (s DescribeAvailableResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceRequest) SetRegionId(v string) *DescribeAvailableResourceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetZoneId(v string) *DescribeAvailableResourceRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetInstanceChargeType(v string) *DescribeAvailableResourceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetEngine(v string) *DescribeAvailableResourceRequest {
	s.Engine = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetEngineVersion(v string) *DescribeAvailableResourceRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDBInstanceClass(v string) *DescribeAvailableResourceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetOrderType(v string) *DescribeAvailableResourceRequest {
	s.OrderType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDBInstanceStorageType(v string) *DescribeAvailableResourceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetCategory(v string) *DescribeAvailableResourceRequest {
	s.Category = &v
	return s
}

func (s *DescribeAvailableResourceRequest) SetDispenseMode(v int) *DescribeAvailableResourceRequest {
	s.DispenseMode = &v
	return s
}

type DescribeAvailableResourceResponse struct {
	RequestId      *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AvailableZones *DescribeAvailableResourceResponseAvailableZones `json:"AvailableZones,omitempty" xml:"AvailableZones,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponse) SetRequestId(v string) *DescribeAvailableResourceResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableResourceResponse) SetAvailableZones(v *DescribeAvailableResourceResponseAvailableZones) *DescribeAvailableResourceResponse {
	s.AvailableZones = v
	return s
}

type DescribeAvailableResourceResponseAvailableZones struct {
	AvailableZone []*DescribeAvailableResourceResponseAvailableZonesAvailableZone `json:"AvailableZone,omitempty" xml:"AvailableZone,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseAvailableZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZones) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZones) SetAvailableZone(v []*DescribeAvailableResourceResponseAvailableZonesAvailableZone) *DescribeAvailableResourceResponseAvailableZones {
	s.AvailableZone = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZone struct {
	RegionId         *string                                                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ZoneId           *string                                                                       `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	Status           *string                                                                       `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	SupportedEngines *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEngines `json:"SupportedEngines,omitempty" xml:"SupportedEngines,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZone) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZone) SetRegionId(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZone {
	s.RegionId = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZone) SetZoneId(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZone {
	s.ZoneId = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZone) SetStatus(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZone {
	s.Status = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZone) SetSupportedEngines(v *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEngines) *DescribeAvailableResourceResponseAvailableZonesAvailableZone {
	s.SupportedEngines = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEngines struct {
	SupportedEngine []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngine `json:"SupportedEngine,omitempty" xml:"SupportedEngine,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEngines) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEngines) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEngines) SetSupportedEngine(v []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngine) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEngines {
	s.SupportedEngine = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngine struct {
	Engine                  *string                                                                                                             `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	SupportedEngineVersions *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions `json:"SupportedEngineVersions,omitempty" xml:"SupportedEngineVersions,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngine) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngine) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngine) SetEngine(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngine {
	s.Engine = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngine) SetSupportedEngineVersions(v *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngine {
	s.SupportedEngineVersions = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions struct {
	SupportedEngineVersion []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion `json:"SupportedEngineVersion,omitempty" xml:"SupportedEngineVersion,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions) SetSupportedEngineVersion(v []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersions {
	s.SupportedEngineVersion = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion struct {
	Version            *string                                                                                                                                                     `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	SupportedCategorys *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys `json:"SupportedCategorys,omitempty" xml:"SupportedCategorys,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion) SetVersion(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion {
	s.Version = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion) SetSupportedCategorys(v *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersion {
	s.SupportedCategorys = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys struct {
	SupportedCategory []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory `json:"SupportedCategory,omitempty" xml:"SupportedCategory,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys) SetSupportedCategory(v []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorys {
	s.SupportedCategory = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory struct {
	Category              *string                                                                                                                                                                                           `json:"Category,omitempty" xml:"Category,omitempty" require:"true"`
	SupportedStorageTypes *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes `json:"SupportedStorageTypes,omitempty" xml:"SupportedStorageTypes,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory) SetCategory(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory {
	s.Category = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory) SetSupportedStorageTypes(v *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategory {
	s.SupportedStorageTypes = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes struct {
	SupportedStorageType []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType `json:"SupportedStorageType,omitempty" xml:"SupportedStorageType,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes) SetSupportedStorageType(v []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypes {
	s.SupportedStorageType = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType struct {
	StorageType        *string                                                                                                                                                                                                                                 `json:"StorageType,omitempty" xml:"StorageType,omitempty" require:"true"`
	AvailableResources *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources `json:"AvailableResources,omitempty" xml:"AvailableResources,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType) SetStorageType(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType {
	s.StorageType = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType) SetAvailableResources(v *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageType {
	s.AvailableResources = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources struct {
	AvailableResource []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource `json:"AvailableResource,omitempty" xml:"AvailableResource,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources) SetAvailableResource(v []*DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResources {
	s.AvailableResource = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource struct {
	DBInstanceClass        *string                                                                                                                                                                                                                                                                        `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	StorageRange           *string                                                                                                                                                                                                                                                                        `json:"StorageRange,omitempty" xml:"StorageRange,omitempty" require:"true"`
	DBInstanceStorageRange *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange `json:"DBInstanceStorageRange,omitempty" xml:"DBInstanceStorageRange,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) SetDBInstanceClass(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) SetStorageRange(v string) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource {
	s.StorageRange = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource) SetDBInstanceStorageRange(v *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResource {
	s.DBInstanceStorageRange = v
	return s
}

type DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange struct {
	Max  *int `json:"Max,omitempty" xml:"Max,omitempty" require:"true"`
	Min  *int `json:"Min,omitempty" xml:"Min,omitempty" require:"true"`
	Step *int `json:"Step,omitempty" xml:"Step,omitempty" require:"true"`
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) SetMax(v int) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange {
	s.Max = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) SetMin(v int) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange {
	s.Min = &v
	return s
}

func (s *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange) SetStep(v int) *DescribeAvailableResourceResponseAvailableZonesAvailableZoneSupportedEnginesSupportedEngineSupportedEngineVersionsSupportedEngineVersionSupportedCategorysSupportedCategorySupportedStorageTypesSupportedStorageTypeAvailableResourcesAvailableResourceDBInstanceStorageRange {
	s.Step = &v
	return s
}

type DestroyDBInstanceRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DestroyDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DestroyDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *DestroyDBInstanceRequest) SetClientToken(v string) *DestroyDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *DestroyDBInstanceRequest) SetDBInstanceId(v string) *DestroyDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

type DestroyDBInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DestroyDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DestroyDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *DestroyDBInstanceResponse) SetRequestId(v string) *DestroyDBInstanceResponse {
	s.RequestId = &v
	return s
}

type ModifyReadonlyInstanceDelayReplicationTimeRequest struct {
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ReadSQLReplicationTime *string `json:"ReadSQLReplicationTime,omitempty" xml:"ReadSQLReplicationTime,omitempty" require:"true"`
}

func (s ModifyReadonlyInstanceDelayReplicationTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReadonlyInstanceDelayReplicationTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeRequest) SetDBInstanceId(v string) *ModifyReadonlyInstanceDelayReplicationTimeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeRequest) SetReadSQLReplicationTime(v string) *ModifyReadonlyInstanceDelayReplicationTimeRequest {
	s.ReadSQLReplicationTime = &v
	return s
}

type ModifyReadonlyInstanceDelayReplicationTimeResponse struct {
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ReadSQLReplicationTime *string `json:"ReadSQLReplicationTime,omitempty" xml:"ReadSQLReplicationTime,omitempty" require:"true"`
	TaskId                 *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s ModifyReadonlyInstanceDelayReplicationTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReadonlyInstanceDelayReplicationTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeResponse) SetRequestId(v string) *ModifyReadonlyInstanceDelayReplicationTimeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeResponse) SetDBInstanceId(v string) *ModifyReadonlyInstanceDelayReplicationTimeResponse {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeResponse) SetReadSQLReplicationTime(v string) *ModifyReadonlyInstanceDelayReplicationTimeResponse {
	s.ReadSQLReplicationTime = &v
	return s
}

func (s *ModifyReadonlyInstanceDelayReplicationTimeResponse) SetTaskId(v string) *ModifyReadonlyInstanceDelayReplicationTimeResponse {
	s.TaskId = &v
	return s
}

type DescribeDBInstanceProxyConfigurationRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDBInstanceProxyConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceProxyConfigurationRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceProxyConfigurationRequest) SetDBInstanceId(v string) *DescribeDBInstanceProxyConfigurationRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceProxyConfigurationResponse struct {
	RequestId                          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TransparentSwitchConfiguration     *string `json:"TransparentSwitchConfiguration,omitempty" xml:"TransparentSwitchConfiguration,omitempty" require:"true"`
	PersistentConnectionsConfiguration *string `json:"PersistentConnectionsConfiguration,omitempty" xml:"PersistentConnectionsConfiguration,omitempty" require:"true"`
	AttacksProtectionConfiguration     *string `json:"AttacksProtectionConfiguration,omitempty" xml:"AttacksProtectionConfiguration,omitempty" require:"true"`
}

func (s DescribeDBInstanceProxyConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceProxyConfigurationResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceProxyConfigurationResponse) SetRequestId(v string) *DescribeDBInstanceProxyConfigurationResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceProxyConfigurationResponse) SetTransparentSwitchConfiguration(v string) *DescribeDBInstanceProxyConfigurationResponse {
	s.TransparentSwitchConfiguration = &v
	return s
}

func (s *DescribeDBInstanceProxyConfigurationResponse) SetPersistentConnectionsConfiguration(v string) *DescribeDBInstanceProxyConfigurationResponse {
	s.PersistentConnectionsConfiguration = &v
	return s
}

func (s *DescribeDBInstanceProxyConfigurationResponse) SetAttacksProtectionConfiguration(v string) *DescribeDBInstanceProxyConfigurationResponse {
	s.AttacksProtectionConfiguration = &v
	return s
}

type CreateOnlineDatabaseTaskRequest struct {
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBName        *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	MigrateTaskId *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty" require:"true"`
	CheckDBMode   *string `json:"CheckDBMode,omitempty" xml:"CheckDBMode,omitempty" require:"true"`
}

func (s CreateOnlineDatabaseTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOnlineDatabaseTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateOnlineDatabaseTaskRequest) SetClientToken(v string) *CreateOnlineDatabaseTaskRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetDBInstanceId(v string) *CreateOnlineDatabaseTaskRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetDBName(v string) *CreateOnlineDatabaseTaskRequest {
	s.DBName = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetMigrateTaskId(v string) *CreateOnlineDatabaseTaskRequest {
	s.MigrateTaskId = &v
	return s
}

func (s *CreateOnlineDatabaseTaskRequest) SetCheckDBMode(v string) *CreateOnlineDatabaseTaskRequest {
	s.CheckDBMode = &v
	return s
}

type CreateOnlineDatabaseTaskResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateOnlineDatabaseTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOnlineDatabaseTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateOnlineDatabaseTaskResponse) SetRequestId(v string) *CreateOnlineDatabaseTaskResponse {
	s.RequestId = &v
	return s
}

type UpgradeDBInstanceKernelVersionRequest struct {
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	UpgradeTime        *string `json:"UpgradeTime,omitempty" xml:"UpgradeTime,omitempty"`
	SwitchTime         *string `json:"SwitchTime,omitempty" xml:"SwitchTime,omitempty"`
	TargetMinorVersion *string `json:"TargetMinorVersion,omitempty" xml:"TargetMinorVersion,omitempty"`
}

func (s UpgradeDBInstanceKernelVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceKernelVersionRequest) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetDBInstanceId(v string) *UpgradeDBInstanceKernelVersionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetUpgradeTime(v string) *UpgradeDBInstanceKernelVersionRequest {
	s.UpgradeTime = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetSwitchTime(v string) *UpgradeDBInstanceKernelVersionRequest {
	s.SwitchTime = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionRequest) SetTargetMinorVersion(v string) *UpgradeDBInstanceKernelVersionRequest {
	s.TargetMinorVersion = &v
	return s
}

type UpgradeDBInstanceKernelVersionResponse struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceName     *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty" require:"true"`
	TaskId             *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	TargetMinorVersion *string `json:"TargetMinorVersion,omitempty" xml:"TargetMinorVersion,omitempty" require:"true"`
}

func (s UpgradeDBInstanceKernelVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceKernelVersionResponse) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceKernelVersionResponse) SetRequestId(v string) *UpgradeDBInstanceKernelVersionResponse {
	s.RequestId = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionResponse) SetDBInstanceName(v string) *UpgradeDBInstanceKernelVersionResponse {
	s.DBInstanceName = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionResponse) SetTaskId(v string) *UpgradeDBInstanceKernelVersionResponse {
	s.TaskId = &v
	return s
}

func (s *UpgradeDBInstanceKernelVersionResponse) SetTargetMinorVersion(v string) *UpgradeDBInstanceKernelVersionResponse {
	s.TargetMinorVersion = &v
	return s
}

type ModifyDBInstanceProxyConfigurationRequest struct {
	DBInstanceId            *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ProxyConfigurationKey   *string `json:"ProxyConfigurationKey,omitempty" xml:"ProxyConfigurationKey,omitempty" require:"true"`
	ProxyConfigurationValue *string `json:"ProxyConfigurationValue,omitempty" xml:"ProxyConfigurationValue,omitempty" require:"true"`
}

func (s ModifyDBInstanceProxyConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceProxyConfigurationRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceProxyConfigurationRequest) SetDBInstanceId(v string) *ModifyDBInstanceProxyConfigurationRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceProxyConfigurationRequest) SetProxyConfigurationKey(v string) *ModifyDBInstanceProxyConfigurationRequest {
	s.ProxyConfigurationKey = &v
	return s
}

func (s *ModifyDBInstanceProxyConfigurationRequest) SetProxyConfigurationValue(v string) *ModifyDBInstanceProxyConfigurationRequest {
	s.ProxyConfigurationValue = &v
	return s
}

type ModifyDBInstanceProxyConfigurationResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceProxyConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceProxyConfigurationResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceProxyConfigurationResponse) SetRequestId(v string) *ModifyDBInstanceProxyConfigurationResponse {
	s.RequestId = &v
	return s
}

type DescribeSecurityGroupConfigurationRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeSecurityGroupConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupConfigurationRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupConfigurationRequest) SetDBInstanceId(v string) *DescribeSecurityGroupConfigurationRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeSecurityGroupConfigurationResponse struct {
	RequestId      *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceName *string                                          `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty" require:"true"`
	Items          *DescribeSecurityGroupConfigurationResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSecurityGroupConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupConfigurationResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupConfigurationResponse) SetRequestId(v string) *DescribeSecurityGroupConfigurationResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationResponse) SetDBInstanceName(v string) *DescribeSecurityGroupConfigurationResponse {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationResponse) SetItems(v *DescribeSecurityGroupConfigurationResponseItems) *DescribeSecurityGroupConfigurationResponse {
	s.Items = v
	return s
}

type DescribeSecurityGroupConfigurationResponseItems struct {
	EcsSecurityGroupRelation []*DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation `json:"EcsSecurityGroupRelation,omitempty" xml:"EcsSecurityGroupRelation,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSecurityGroupConfigurationResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupConfigurationResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupConfigurationResponseItems) SetEcsSecurityGroupRelation(v []*DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) *DescribeSecurityGroupConfigurationResponseItems {
	s.EcsSecurityGroupRelation = v
	return s
}

type DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" require:"true"`
	NetworkType     *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty" require:"true"`
}

func (s DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) SetRegionId(v string) *DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) SetSecurityGroupId(v string) *DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) SetNetworkType(v string) *DescribeSecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation {
	s.NetworkType = &v
	return s
}

type ModifySecurityGroupConfigurationRequest struct {
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" require:"true"`
}

func (s ModifySecurityGroupConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupConfigurationRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupConfigurationRequest) SetDBInstanceId(v string) *ModifySecurityGroupConfigurationRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySecurityGroupConfigurationRequest) SetSecurityGroupId(v string) *ModifySecurityGroupConfigurationRequest {
	s.SecurityGroupId = &v
	return s
}

type ModifySecurityGroupConfigurationResponse struct {
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceName *string                                        `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty" require:"true"`
	Items          *ModifySecurityGroupConfigurationResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s ModifySecurityGroupConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupConfigurationResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupConfigurationResponse) SetRequestId(v string) *ModifySecurityGroupConfigurationResponse {
	s.RequestId = &v
	return s
}

func (s *ModifySecurityGroupConfigurationResponse) SetDBInstanceName(v string) *ModifySecurityGroupConfigurationResponse {
	s.DBInstanceName = &v
	return s
}

func (s *ModifySecurityGroupConfigurationResponse) SetItems(v *ModifySecurityGroupConfigurationResponseItems) *ModifySecurityGroupConfigurationResponse {
	s.Items = v
	return s
}

type ModifySecurityGroupConfigurationResponseItems struct {
	EcsSecurityGroupRelation []*ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation `json:"EcsSecurityGroupRelation,omitempty" xml:"EcsSecurityGroupRelation,omitempty" require:"true" type:"Repeated"`
}

func (s ModifySecurityGroupConfigurationResponseItems) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupConfigurationResponseItems) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupConfigurationResponseItems) SetEcsSecurityGroupRelation(v []*ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) *ModifySecurityGroupConfigurationResponseItems {
	s.EcsSecurityGroupRelation = v
	return s
}

type ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" require:"true"`
	NetworkType     *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty" require:"true"`
}

func (s ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) SetRegionId(v string) *ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation {
	s.RegionId = &v
	return s
}

func (s *ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) SetSecurityGroupId(v string) *ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation) SetNetworkType(v string) *ModifySecurityGroupConfigurationResponseItemsEcsSecurityGroupRelation {
	s.NetworkType = &v
	return s
}

type DescribeOssDownloadsForSQLServerRequest struct {
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	MigrateTaskId *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty" require:"true"`
}

func (s DescribeOssDownloadsForSQLServerRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsForSQLServerRequest) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsForSQLServerRequest) SetDBInstanceId(v string) *DescribeOssDownloadsForSQLServerRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerRequest) SetMigrateTaskId(v string) *DescribeOssDownloadsForSQLServerRequest {
	s.MigrateTaskId = &v
	return s
}

type DescribeOssDownloadsForSQLServerResponse struct {
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceName *string                                        `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty" require:"true"`
	MigrateIaskId  *string                                        `json:"MigrateIaskId,omitempty" xml:"MigrateIaskId,omitempty" require:"true"`
	Items          *DescribeOssDownloadsForSQLServerResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeOssDownloadsForSQLServerResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsForSQLServerResponse) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsForSQLServerResponse) SetRequestId(v string) *DescribeOssDownloadsForSQLServerResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponse) SetDBInstanceName(v string) *DescribeOssDownloadsForSQLServerResponse {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponse) SetMigrateIaskId(v string) *DescribeOssDownloadsForSQLServerResponse {
	s.MigrateIaskId = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponse) SetItems(v *DescribeOssDownloadsForSQLServerResponseItems) *DescribeOssDownloadsForSQLServerResponse {
	s.Items = v
	return s
}

type DescribeOssDownloadsForSQLServerResponseItems struct {
	OssDownload []*DescribeOssDownloadsForSQLServerResponseItemsOssDownload `json:"OssDownload,omitempty" xml:"OssDownload,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeOssDownloadsForSQLServerResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsForSQLServerResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsForSQLServerResponseItems) SetOssDownload(v []*DescribeOssDownloadsForSQLServerResponseItemsOssDownload) *DescribeOssDownloadsForSQLServerResponseItems {
	s.OssDownload = v
	return s
}

type DescribeOssDownloadsForSQLServerResponseItemsOssDownload struct {
	FileName   *string `json:"FileName,omitempty" xml:"FileName,omitempty" require:"true"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	BakType    *string `json:"BakType,omitempty" xml:"BakType,omitempty" require:"true"`
	FileSize   *string `json:"FileSize,omitempty" xml:"FileSize,omitempty" require:"true"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IsAvail    *string `json:"IsAvail,omitempty" xml:"IsAvail,omitempty" require:"true"`
	Desc       *string `json:"Desc,omitempty" xml:"Desc,omitempty" require:"true"`
}

func (s DescribeOssDownloadsForSQLServerResponseItemsOssDownload) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsForSQLServerResponseItemsOssDownload) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsForSQLServerResponseItemsOssDownload) SetFileName(v string) *DescribeOssDownloadsForSQLServerResponseItemsOssDownload {
	s.FileName = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseItemsOssDownload) SetCreateTime(v string) *DescribeOssDownloadsForSQLServerResponseItemsOssDownload {
	s.CreateTime = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseItemsOssDownload) SetBakType(v string) *DescribeOssDownloadsForSQLServerResponseItemsOssDownload {
	s.BakType = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseItemsOssDownload) SetFileSize(v string) *DescribeOssDownloadsForSQLServerResponseItemsOssDownload {
	s.FileSize = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseItemsOssDownload) SetStatus(v string) *DescribeOssDownloadsForSQLServerResponseItemsOssDownload {
	s.Status = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseItemsOssDownload) SetIsAvail(v string) *DescribeOssDownloadsForSQLServerResponseItemsOssDownload {
	s.IsAvail = &v
	return s
}

func (s *DescribeOssDownloadsForSQLServerResponseItemsOssDownload) SetDesc(v string) *DescribeOssDownloadsForSQLServerResponseItemsOssDownload {
	s.Desc = &v
	return s
}

type DescribeMigrateTasksForSQLServerRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeMigrateTasksForSQLServerRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksForSQLServerRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetDBInstanceId(v string) *DescribeMigrateTasksForSQLServerRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetStartTime(v string) *DescribeMigrateTasksForSQLServerRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetEndTime(v string) *DescribeMigrateTasksForSQLServerRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetPageSize(v int) *DescribeMigrateTasksForSQLServerRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerRequest) SetPageNumber(v int) *DescribeMigrateTasksForSQLServerRequest {
	s.PageNumber = &v
	return s
}

type DescribeMigrateTasksForSQLServerResponse struct {
	RequestId        *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceID     *string                                        `json:"DBInstanceID,omitempty" xml:"DBInstanceID,omitempty" require:"true"`
	DBInstanceName   *string                                        `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty" require:"true"`
	StartTime        *string                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime          *string                                        `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	TotalRecordCount *int                                           `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                                           `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeMigrateTasksForSQLServerResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeMigrateTasksForSQLServerResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksForSQLServerResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetRequestId(v string) *DescribeMigrateTasksForSQLServerResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetDBInstanceID(v string) *DescribeMigrateTasksForSQLServerResponse {
	s.DBInstanceID = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetDBInstanceName(v string) *DescribeMigrateTasksForSQLServerResponse {
	s.DBInstanceName = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetStartTime(v string) *DescribeMigrateTasksForSQLServerResponse {
	s.StartTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetEndTime(v string) *DescribeMigrateTasksForSQLServerResponse {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetTotalRecordCount(v int) *DescribeMigrateTasksForSQLServerResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetPageNumber(v int) *DescribeMigrateTasksForSQLServerResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetPageRecordCount(v int) *DescribeMigrateTasksForSQLServerResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponse) SetItems(v *DescribeMigrateTasksForSQLServerResponseItems) *DescribeMigrateTasksForSQLServerResponse {
	s.Items = v
	return s
}

type DescribeMigrateTasksForSQLServerResponseItems struct {
	MigrateTask []*DescribeMigrateTasksForSQLServerResponseItemsMigrateTask `json:"MigrateTask,omitempty" xml:"MigrateTask,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeMigrateTasksForSQLServerResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksForSQLServerResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksForSQLServerResponseItems) SetMigrateTask(v []*DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) *DescribeMigrateTasksForSQLServerResponseItems {
	s.MigrateTask = v
	return s
}

type DescribeMigrateTasksForSQLServerResponseItemsMigrateTask struct {
	DBName        *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	MigrateIaskId *string `json:"MigrateIaskId,omitempty" xml:"MigrateIaskId,omitempty" require:"true"`
	CreateTime    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	TaskType      *string `json:"TaskType,omitempty" xml:"TaskType,omitempty" require:"true"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IsDBReplaced  *string `json:"IsDBReplaced,omitempty" xml:"IsDBReplaced,omitempty" require:"true"`
	Desc          *string `json:"Desc,omitempty" xml:"Desc,omitempty" require:"true"`
}

func (s DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) SetDBName(v string) *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask {
	s.DBName = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) SetMigrateIaskId(v string) *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask {
	s.MigrateIaskId = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) SetCreateTime(v string) *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask {
	s.CreateTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) SetEndTime(v string) *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) SetTaskType(v string) *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask {
	s.TaskType = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) SetStatus(v string) *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask {
	s.Status = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) SetIsDBReplaced(v string) *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask {
	s.IsDBReplaced = &v
	return s
}

func (s *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask) SetDesc(v string) *DescribeMigrateTasksForSQLServerResponseItemsMigrateTask {
	s.Desc = &v
	return s
}

type CreateMigrateTaskForSQLServerRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBName       *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	TaskType     *string `json:"TaskType,omitempty" xml:"TaskType,omitempty" require:"true"`
	IsOnlineDB   *string `json:"IsOnlineDB,omitempty" xml:"IsOnlineDB,omitempty" require:"true"`
	OSSUrls      *string `json:"OSSUrls,omitempty" xml:"OSSUrls,omitempty" require:"true"`
}

func (s CreateMigrateTaskForSQLServerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrateTaskForSQLServerRequest) GoString() string {
	return s.String()
}

func (s *CreateMigrateTaskForSQLServerRequest) SetDBInstanceId(v string) *CreateMigrateTaskForSQLServerRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetDBName(v string) *CreateMigrateTaskForSQLServerRequest {
	s.DBName = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetTaskType(v string) *CreateMigrateTaskForSQLServerRequest {
	s.TaskType = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetIsOnlineDB(v string) *CreateMigrateTaskForSQLServerRequest {
	s.IsOnlineDB = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerRequest) SetOSSUrls(v string) *CreateMigrateTaskForSQLServerRequest {
	s.OSSUrls = &v
	return s
}

type CreateMigrateTaskForSQLServerResponse struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceName *string `json:"DBInstanceName,omitempty" xml:"DBInstanceName,omitempty" require:"true"`
	TaskId         *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	DBName         *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	MigrateIaskId  *string `json:"MigrateIaskId,omitempty" xml:"MigrateIaskId,omitempty" require:"true"`
	TaskType       *string `json:"TaskType,omitempty" xml:"TaskType,omitempty" require:"true"`
}

func (s CreateMigrateTaskForSQLServerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrateTaskForSQLServerResponse) GoString() string {
	return s.String()
}

func (s *CreateMigrateTaskForSQLServerResponse) SetRequestId(v string) *CreateMigrateTaskForSQLServerResponse {
	s.RequestId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponse) SetDBInstanceId(v string) *CreateMigrateTaskForSQLServerResponse {
	s.DBInstanceId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponse) SetDBInstanceName(v string) *CreateMigrateTaskForSQLServerResponse {
	s.DBInstanceName = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponse) SetTaskId(v string) *CreateMigrateTaskForSQLServerResponse {
	s.TaskId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponse) SetDBName(v string) *CreateMigrateTaskForSQLServerResponse {
	s.DBName = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponse) SetMigrateIaskId(v string) *CreateMigrateTaskForSQLServerResponse {
	s.MigrateIaskId = &v
	return s
}

func (s *CreateMigrateTaskForSQLServerResponse) SetTaskType(v string) *CreateMigrateTaskForSQLServerResponse {
	s.TaskType = &v
	return s
}

type CreateMigrateTaskRequest struct {
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBName             *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	BackupMode         *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty" require:"true"`
	IsOnlineDB         *string `json:"IsOnlineDB,omitempty" xml:"IsOnlineDB,omitempty" require:"true"`
	CheckDBMode        *string `json:"CheckDBMode,omitempty" xml:"CheckDBMode,omitempty"`
	OssObjectPositions *string `json:"OssObjectPositions,omitempty" xml:"OssObjectPositions,omitempty"`
	OSSUrls            *string `json:"OSSUrls,omitempty" xml:"OSSUrls,omitempty"`
	MigrateTaskId      *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty"`
}

func (s CreateMigrateTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrateTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateMigrateTaskRequest) SetDBInstanceId(v string) *CreateMigrateTaskRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetDBName(v string) *CreateMigrateTaskRequest {
	s.DBName = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetBackupMode(v string) *CreateMigrateTaskRequest {
	s.BackupMode = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetIsOnlineDB(v string) *CreateMigrateTaskRequest {
	s.IsOnlineDB = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetCheckDBMode(v string) *CreateMigrateTaskRequest {
	s.CheckDBMode = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetOssObjectPositions(v string) *CreateMigrateTaskRequest {
	s.OssObjectPositions = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetOSSUrls(v string) *CreateMigrateTaskRequest {
	s.OSSUrls = &v
	return s
}

func (s *CreateMigrateTaskRequest) SetMigrateTaskId(v string) *CreateMigrateTaskRequest {
	s.MigrateTaskId = &v
	return s
}

type CreateMigrateTaskResponse struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	TaskId        *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	DBName        *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	MigrateTaskId *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty" require:"true"`
	BackupMode    *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty" require:"true"`
}

func (s CreateMigrateTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrateTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateMigrateTaskResponse) SetRequestId(v string) *CreateMigrateTaskResponse {
	s.RequestId = &v
	return s
}

func (s *CreateMigrateTaskResponse) SetDBInstanceId(v string) *CreateMigrateTaskResponse {
	s.DBInstanceId = &v
	return s
}

func (s *CreateMigrateTaskResponse) SetTaskId(v string) *CreateMigrateTaskResponse {
	s.TaskId = &v
	return s
}

func (s *CreateMigrateTaskResponse) SetDBName(v string) *CreateMigrateTaskResponse {
	s.DBName = &v
	return s
}

func (s *CreateMigrateTaskResponse) SetMigrateTaskId(v string) *CreateMigrateTaskResponse {
	s.MigrateTaskId = &v
	return s
}

func (s *CreateMigrateTaskResponse) SetBackupMode(v string) *CreateMigrateTaskResponse {
	s.BackupMode = &v
	return s
}

type DescribeOssDownloadsRequest struct {
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	MigrateTaskId *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty" require:"true"`
}

func (s DescribeOssDownloadsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsRequest) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsRequest) SetDBInstanceId(v string) *DescribeOssDownloadsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeOssDownloadsRequest) SetMigrateTaskId(v string) *DescribeOssDownloadsRequest {
	s.MigrateTaskId = &v
	return s
}

type DescribeOssDownloadsResponse struct {
	RequestId     *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId  *string                            `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	MigrateTaskId *string                            `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty" require:"true"`
	Items         *DescribeOssDownloadsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeOssDownloadsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsResponse) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsResponse) SetRequestId(v string) *DescribeOssDownloadsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeOssDownloadsResponse) SetDBInstanceId(v string) *DescribeOssDownloadsResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeOssDownloadsResponse) SetMigrateTaskId(v string) *DescribeOssDownloadsResponse {
	s.MigrateTaskId = &v
	return s
}

func (s *DescribeOssDownloadsResponse) SetItems(v *DescribeOssDownloadsResponseItems) *DescribeOssDownloadsResponse {
	s.Items = v
	return s
}

type DescribeOssDownloadsResponseItems struct {
	OssDownload []*DescribeOssDownloadsResponseItemsOssDownload `json:"OssDownload,omitempty" xml:"OssDownload,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeOssDownloadsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsResponseItems) SetOssDownload(v []*DescribeOssDownloadsResponseItemsOssDownload) *DescribeOssDownloadsResponseItems {
	s.OssDownload = v
	return s
}

type DescribeOssDownloadsResponseItemsOssDownload struct {
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty" require:"true"`
	CreateTime  *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	BackupMode  *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty" require:"true"`
	FileSize    *string `json:"FileSize,omitempty" xml:"FileSize,omitempty" require:"true"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IsAvailable *string `json:"IsAvailable,omitempty" xml:"IsAvailable,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribeOssDownloadsResponseItemsOssDownload) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssDownloadsResponseItemsOssDownload) GoString() string {
	return s.String()
}

func (s *DescribeOssDownloadsResponseItemsOssDownload) SetFileName(v string) *DescribeOssDownloadsResponseItemsOssDownload {
	s.FileName = &v
	return s
}

func (s *DescribeOssDownloadsResponseItemsOssDownload) SetCreateTime(v string) *DescribeOssDownloadsResponseItemsOssDownload {
	s.CreateTime = &v
	return s
}

func (s *DescribeOssDownloadsResponseItemsOssDownload) SetEndTime(v string) *DescribeOssDownloadsResponseItemsOssDownload {
	s.EndTime = &v
	return s
}

func (s *DescribeOssDownloadsResponseItemsOssDownload) SetBackupMode(v string) *DescribeOssDownloadsResponseItemsOssDownload {
	s.BackupMode = &v
	return s
}

func (s *DescribeOssDownloadsResponseItemsOssDownload) SetFileSize(v string) *DescribeOssDownloadsResponseItemsOssDownload {
	s.FileSize = &v
	return s
}

func (s *DescribeOssDownloadsResponseItemsOssDownload) SetStatus(v string) *DescribeOssDownloadsResponseItemsOssDownload {
	s.Status = &v
	return s
}

func (s *DescribeOssDownloadsResponseItemsOssDownload) SetIsAvailable(v string) *DescribeOssDownloadsResponseItemsOssDownload {
	s.IsAvailable = &v
	return s
}

func (s *DescribeOssDownloadsResponseItemsOssDownload) SetDescription(v string) *DescribeOssDownloadsResponseItemsOssDownload {
	s.Description = &v
	return s
}

type DescribeMigrateTasksRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeMigrateTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksRequest) SetDBInstanceId(v string) *DescribeMigrateTasksRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetStartTime(v string) *DescribeMigrateTasksRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetEndTime(v string) *DescribeMigrateTasksRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetPageSize(v int) *DescribeMigrateTasksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMigrateTasksRequest) SetPageNumber(v int) *DescribeMigrateTasksRequest {
	s.PageNumber = &v
	return s
}

type DescribeMigrateTasksResponse struct {
	RequestId        *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId     *string                            `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	TotalRecordCount *int                               `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                               `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeMigrateTasksResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeMigrateTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksResponse) SetRequestId(v string) *DescribeMigrateTasksResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrateTasksResponse) SetDBInstanceId(v string) *DescribeMigrateTasksResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeMigrateTasksResponse) SetTotalRecordCount(v int) *DescribeMigrateTasksResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeMigrateTasksResponse) SetPageNumber(v int) *DescribeMigrateTasksResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeMigrateTasksResponse) SetPageRecordCount(v int) *DescribeMigrateTasksResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeMigrateTasksResponse) SetItems(v *DescribeMigrateTasksResponseItems) *DescribeMigrateTasksResponse {
	s.Items = v
	return s
}

type DescribeMigrateTasksResponseItems struct {
	MigrateTask []*DescribeMigrateTasksResponseItemsMigrateTask `json:"MigrateTask,omitempty" xml:"MigrateTask,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeMigrateTasksResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksResponseItems) SetMigrateTask(v []*DescribeMigrateTasksResponseItemsMigrateTask) *DescribeMigrateTasksResponseItems {
	s.MigrateTask = v
	return s
}

type DescribeMigrateTasksResponseItemsMigrateTask struct {
	DBName        *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	MigrateTaskId *string `json:"MigrateTaskId,omitempty" xml:"MigrateTaskId,omitempty" require:"true"`
	CreateTime    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	BackupMode    *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty" require:"true"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	IsDBReplaced  *string `json:"IsDBReplaced,omitempty" xml:"IsDBReplaced,omitempty" require:"true"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribeMigrateTasksResponseItemsMigrateTask) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrateTasksResponseItemsMigrateTask) GoString() string {
	return s.String()
}

func (s *DescribeMigrateTasksResponseItemsMigrateTask) SetDBName(v string) *DescribeMigrateTasksResponseItemsMigrateTask {
	s.DBName = &v
	return s
}

func (s *DescribeMigrateTasksResponseItemsMigrateTask) SetMigrateTaskId(v string) *DescribeMigrateTasksResponseItemsMigrateTask {
	s.MigrateTaskId = &v
	return s
}

func (s *DescribeMigrateTasksResponseItemsMigrateTask) SetCreateTime(v string) *DescribeMigrateTasksResponseItemsMigrateTask {
	s.CreateTime = &v
	return s
}

func (s *DescribeMigrateTasksResponseItemsMigrateTask) SetEndTime(v string) *DescribeMigrateTasksResponseItemsMigrateTask {
	s.EndTime = &v
	return s
}

func (s *DescribeMigrateTasksResponseItemsMigrateTask) SetBackupMode(v string) *DescribeMigrateTasksResponseItemsMigrateTask {
	s.BackupMode = &v
	return s
}

func (s *DescribeMigrateTasksResponseItemsMigrateTask) SetStatus(v string) *DescribeMigrateTasksResponseItemsMigrateTask {
	s.Status = &v
	return s
}

func (s *DescribeMigrateTasksResponseItemsMigrateTask) SetIsDBReplaced(v string) *DescribeMigrateTasksResponseItemsMigrateTask {
	s.IsDBReplaced = &v
	return s
}

func (s *DescribeMigrateTasksResponseItemsMigrateTask) SetDescription(v string) *DescribeMigrateTasksResponseItemsMigrateTask {
	s.Description = &v
	return s
}

type CopyDatabaseRequest struct {
}

func (s CopyDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyDatabaseRequest) GoString() string {
	return s.String()
}

type CopyDatabaseResponse struct {
	DBName   *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	DBStatus *string `json:"DBStatus,omitempty" xml:"DBStatus,omitempty" require:"true"`
	TaskId   *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s CopyDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyDatabaseResponse) GoString() string {
	return s.String()
}

func (s *CopyDatabaseResponse) SetDBName(v string) *CopyDatabaseResponse {
	s.DBName = &v
	return s
}

func (s *CopyDatabaseResponse) SetDBStatus(v string) *CopyDatabaseResponse {
	s.DBStatus = &v
	return s
}

func (s *CopyDatabaseResponse) SetTaskId(v string) *CopyDatabaseResponse {
	s.TaskId = &v
	return s
}

type ResetAccountRequest struct {
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName     *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty" require:"true"`
}

func (s ResetAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountRequest) GoString() string {
	return s.String()
}

func (s *ResetAccountRequest) SetDBInstanceId(v string) *ResetAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResetAccountRequest) SetAccountName(v string) *ResetAccountRequest {
	s.AccountName = &v
	return s
}

func (s *ResetAccountRequest) SetAccountPassword(v string) *ResetAccountRequest {
	s.AccountPassword = &v
	return s
}

type ResetAccountResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ResetAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountResponse) GoString() string {
	return s.String()
}

func (s *ResetAccountResponse) SetRequestId(v string) *ResetAccountResponse {
	s.RequestId = &v
	return s
}

type DescribeDBInstancesAsCsvRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeDBInstancesAsCsvRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesAsCsvRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesAsCsvRequest) SetRegionId(v string) *DescribeDBInstancesAsCsvRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvRequest) SetDBInstanceId(v string) *DescribeDBInstancesAsCsvRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstancesAsCsvResponse struct {
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Items     *DescribeDBInstancesAsCsvResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancesAsCsvResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesAsCsvResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesAsCsvResponse) SetRequestId(v string) *DescribeDBInstancesAsCsvResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponse) SetItems(v *DescribeDBInstancesAsCsvResponseItems) *DescribeDBInstancesAsCsvResponse {
	s.Items = v
	return s
}

type DescribeDBInstancesAsCsvResponseItems struct {
	DBInstanceAttribute []*DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute `json:"DBInstanceAttribute,omitempty" xml:"DBInstanceAttribute,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancesAsCsvResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesAsCsvResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesAsCsvResponseItems) SetDBInstanceAttribute(v []*DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) *DescribeDBInstancesAsCsvResponseItems {
	s.DBInstanceAttribute = v
	return s
}

type DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute struct {
	DBInstanceId                *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	PayType                     *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	DBInstanceClassType         *string `json:"DBInstanceClassType,omitempty" xml:"DBInstanceClassType,omitempty" require:"true"`
	DBInstanceType              *string `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty" require:"true"`
	RegionId                    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ConnectionString            *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	Port                        *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	Engine                      *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion               *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	DBInstanceClass             *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	DBInstanceMemory            *int64  `json:"DBInstanceMemory,omitempty" xml:"DBInstanceMemory,omitempty" require:"true"`
	DBInstanceStorage           *int    `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty" require:"true"`
	DBInstanceNetType           *string `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty" require:"true"`
	DBInstanceStatus            *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty" require:"true"`
	DBInstanceDescription       *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty" require:"true"`
	LockMode                    *string `json:"LockMode,omitempty" xml:"LockMode,omitempty" require:"true"`
	LockReason                  *string `json:"LockReason,omitempty" xml:"LockReason,omitempty" require:"true"`
	ReadDelayTime               *string `json:"ReadDelayTime,omitempty" xml:"ReadDelayTime,omitempty" require:"true"`
	DBMaxQuantity               *int    `json:"DBMaxQuantity,omitempty" xml:"DBMaxQuantity,omitempty" require:"true"`
	AccountMaxQuantity          *int    `json:"AccountMaxQuantity,omitempty" xml:"AccountMaxQuantity,omitempty" require:"true"`
	CreationTime                *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	ExpireTime                  *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty" require:"true"`
	MaintainTime                *string `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty" require:"true"`
	AvailabilityValue           *string `json:"AvailabilityValue,omitempty" xml:"AvailabilityValue,omitempty" require:"true"`
	MaxIOPS                     *int    `json:"MaxIOPS,omitempty" xml:"MaxIOPS,omitempty" require:"true"`
	MaxConnections              *int    `json:"MaxConnections,omitempty" xml:"MaxConnections,omitempty" require:"true"`
	MasterInstanceId            *string `json:"MasterInstanceId,omitempty" xml:"MasterInstanceId,omitempty" require:"true"`
	DBInstanceCPU               *string `json:"DBInstanceCPU,omitempty" xml:"DBInstanceCPU,omitempty" require:"true"`
	IncrementSourceDBInstanceId *string `json:"IncrementSourceDBInstanceId,omitempty" xml:"IncrementSourceDBInstanceId,omitempty" require:"true"`
	GuardDBInstanceId           *string `json:"GuardDBInstanceId,omitempty" xml:"GuardDBInstanceId,omitempty" require:"true"`
	TempDBInstanceId            *string `json:"TempDBInstanceId,omitempty" xml:"TempDBInstanceId,omitempty" require:"true"`
	SecurityIPList              *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty" require:"true"`
	ZoneId                      *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	InstanceNetworkType         *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty" require:"true"`
	Category                    *string `json:"Category,omitempty" xml:"Category,omitempty" require:"true"`
	AccountType                 *string `json:"AccountType,omitempty" xml:"AccountType,omitempty" require:"true"`
	SupportUpgradeAccountType   *string `json:"SupportUpgradeAccountType,omitempty" xml:"SupportUpgradeAccountType,omitempty" require:"true"`
	VpcId                       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VSwitchId                   *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	ConnectionMode              *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty" require:"true"`
	Tags                        *string `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true"`
}

func (s DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBInstanceId(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetPayType(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBInstanceClassType(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBInstanceClassType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBInstanceType(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetRegionId(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetConnectionString(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetPort(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.Port = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetEngine(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetEngineVersion(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBInstanceClass(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBInstanceMemory(v int64) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBInstanceMemory = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBInstanceStorage(v int) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBInstanceStorage = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBInstanceNetType(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBInstanceStatus(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBInstanceDescription(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetLockMode(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetLockReason(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetReadDelayTime(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.ReadDelayTime = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBMaxQuantity(v int) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBMaxQuantity = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetAccountMaxQuantity(v int) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.AccountMaxQuantity = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetCreationTime(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.CreationTime = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetExpireTime(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetMaintainTime(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.MaintainTime = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetAvailabilityValue(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.AvailabilityValue = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetMaxIOPS(v int) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.MaxIOPS = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetMaxConnections(v int) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.MaxConnections = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetMasterInstanceId(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetDBInstanceCPU(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.DBInstanceCPU = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetIncrementSourceDBInstanceId(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.IncrementSourceDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetGuardDBInstanceId(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.GuardDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetTempDBInstanceId(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.TempDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetSecurityIPList(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.SecurityIPList = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetZoneId(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetInstanceNetworkType(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetCategory(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.Category = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetAccountType(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.AccountType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetSupportUpgradeAccountType(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.SupportUpgradeAccountType = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetVpcId(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetVSwitchId(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetConnectionMode(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute) SetTags(v string) *DescribeDBInstancesAsCsvResponseItemsDBInstanceAttribute {
	s.Tags = &v
	return s
}

type ModifyDBInstanceNetworkExpireTimeRequest struct {
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ConnectionString   *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	ClassicExpiredDays *int    `json:"ClassicExpiredDays,omitempty" xml:"ClassicExpiredDays,omitempty" require:"true"`
}

func (s ModifyDBInstanceNetworkExpireTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkExpireTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkExpireTimeRequest) SetDBInstanceId(v string) *ModifyDBInstanceNetworkExpireTimeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceNetworkExpireTimeRequest) SetConnectionString(v string) *ModifyDBInstanceNetworkExpireTimeRequest {
	s.ConnectionString = &v
	return s
}

func (s *ModifyDBInstanceNetworkExpireTimeRequest) SetClassicExpiredDays(v int) *ModifyDBInstanceNetworkExpireTimeRequest {
	s.ClassicExpiredDays = &v
	return s
}

type ModifyDBInstanceNetworkExpireTimeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceNetworkExpireTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkExpireTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkExpireTimeResponse) SetRequestId(v string) *ModifyDBInstanceNetworkExpireTimeResponse {
	s.RequestId = &v
	return s
}

type ModifyResourceGroupRequest struct {
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
}

func (s ModifyResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyResourceGroupRequest) SetClientToken(v string) *ModifyResourceGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyResourceGroupRequest) SetDBInstanceId(v string) *ModifyResourceGroupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyResourceGroupRequest) SetResourceGroupId(v string) *ModifyResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

type ModifyResourceGroupResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyResourceGroupResponse) SetRequestId(v string) *ModifyResourceGroupResponse {
	s.RequestId = &v
	return s
}

type DescribeRenewalPriceRequest struct {
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PayType         *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	UsedTime        *int    `json:"UsedTime,omitempty" xml:"UsedTime,omitempty" require:"true"`
	TimeType        *string `json:"TimeType,omitempty" xml:"TimeType,omitempty" require:"true"`
	Quantity        *int    `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	OrderType       *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	BusinessInfo    *string `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
}

func (s DescribeRenewalPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceRequest) SetClientToken(v string) *DescribeRenewalPriceRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetDBInstanceId(v string) *DescribeRenewalPriceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetRegionId(v string) *DescribeRenewalPriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetPayType(v string) *DescribeRenewalPriceRequest {
	s.PayType = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetDBInstanceClass(v string) *DescribeRenewalPriceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetUsedTime(v int) *DescribeRenewalPriceRequest {
	s.UsedTime = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetTimeType(v string) *DescribeRenewalPriceRequest {
	s.TimeType = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetQuantity(v int) *DescribeRenewalPriceRequest {
	s.Quantity = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetOrderType(v string) *DescribeRenewalPriceRequest {
	s.OrderType = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetBusinessInfo(v string) *DescribeRenewalPriceRequest {
	s.BusinessInfo = &v
	return s
}

type DescribeRenewalPriceResponse struct {
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Rules     *DescribeRenewalPriceResponseRules     `json:"Rules,omitempty" xml:"Rules,omitempty" require:"true" type:"Struct"`
	PriceInfo *DescribeRenewalPriceResponsePriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRenewalPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponse) SetRequestId(v string) *DescribeRenewalPriceResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRenewalPriceResponse) SetRules(v *DescribeRenewalPriceResponseRules) *DescribeRenewalPriceResponse {
	s.Rules = v
	return s
}

func (s *DescribeRenewalPriceResponse) SetPriceInfo(v *DescribeRenewalPriceResponsePriceInfo) *DescribeRenewalPriceResponse {
	s.PriceInfo = v
	return s
}

type DescribeRenewalPriceResponseRules struct {
	Rule []*DescribeRenewalPriceResponseRulesRule `json:"Rule,omitempty" xml:"Rule,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRenewalPriceResponseRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseRules) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseRules) SetRule(v []*DescribeRenewalPriceResponseRulesRule) *DescribeRenewalPriceResponseRules {
	s.Rule = v
	return s
}

type DescribeRenewalPriceResponseRulesRule struct {
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribeRenewalPriceResponseRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseRulesRule) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseRulesRule) SetRuleId(v int64) *DescribeRenewalPriceResponseRulesRule {
	s.RuleId = &v
	return s
}

func (s *DescribeRenewalPriceResponseRulesRule) SetName(v string) *DescribeRenewalPriceResponseRulesRule {
	s.Name = &v
	return s
}

func (s *DescribeRenewalPriceResponseRulesRule) SetDescription(v string) *DescribeRenewalPriceResponseRulesRule {
	s.Description = &v
	return s
}

type DescribeRenewalPriceResponsePriceInfo struct {
	Currency      *string                                            `json:"Currency,omitempty" xml:"Currency,omitempty" require:"true"`
	OriginalPrice *float32                                           `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty" require:"true"`
	TradePrice    *float32                                           `json:"TradePrice,omitempty" xml:"TradePrice,omitempty" require:"true"`
	DiscountPrice *float32                                           `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty" require:"true"`
	Coupons       *DescribeRenewalPriceResponsePriceInfoCoupons      `json:"Coupons,omitempty" xml:"Coupons,omitempty" require:"true" type:"Struct"`
	ActivityInfo  *DescribeRenewalPriceResponsePriceInfoActivityInfo `json:"ActivityInfo,omitempty" xml:"ActivityInfo,omitempty" require:"true" type:"Struct"`
	RuleIds       *DescribeRenewalPriceResponsePriceInfoRuleIds      `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRenewalPriceResponsePriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfo) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfo) SetCurrency(v string) *DescribeRenewalPriceResponsePriceInfo {
	s.Currency = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfo) SetOriginalPrice(v float32) *DescribeRenewalPriceResponsePriceInfo {
	s.OriginalPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfo) SetTradePrice(v float32) *DescribeRenewalPriceResponsePriceInfo {
	s.TradePrice = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfo) SetDiscountPrice(v float32) *DescribeRenewalPriceResponsePriceInfo {
	s.DiscountPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfo) SetCoupons(v *DescribeRenewalPriceResponsePriceInfoCoupons) *DescribeRenewalPriceResponsePriceInfo {
	s.Coupons = v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfo) SetActivityInfo(v *DescribeRenewalPriceResponsePriceInfoActivityInfo) *DescribeRenewalPriceResponsePriceInfo {
	s.ActivityInfo = v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfo) SetRuleIds(v *DescribeRenewalPriceResponsePriceInfoRuleIds) *DescribeRenewalPriceResponsePriceInfo {
	s.RuleIds = v
	return s
}

type DescribeRenewalPriceResponsePriceInfoCoupons struct {
	Coupon []*DescribeRenewalPriceResponsePriceInfoCouponsCoupon `json:"Coupon,omitempty" xml:"Coupon,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRenewalPriceResponsePriceInfoCoupons) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoCoupons) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoCoupons) SetCoupon(v []*DescribeRenewalPriceResponsePriceInfoCouponsCoupon) *DescribeRenewalPriceResponsePriceInfoCoupons {
	s.Coupon = v
	return s
}

type DescribeRenewalPriceResponsePriceInfoCouponsCoupon struct {
	CouponNo    *string `json:"CouponNo,omitempty" xml:"CouponNo,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	IsSelected  *string `json:"IsSelected,omitempty" xml:"IsSelected,omitempty" require:"true"`
}

func (s DescribeRenewalPriceResponsePriceInfoCouponsCoupon) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoCouponsCoupon) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoCouponsCoupon) SetCouponNo(v string) *DescribeRenewalPriceResponsePriceInfoCouponsCoupon {
	s.CouponNo = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoCouponsCoupon) SetName(v string) *DescribeRenewalPriceResponsePriceInfoCouponsCoupon {
	s.Name = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoCouponsCoupon) SetDescription(v string) *DescribeRenewalPriceResponsePriceInfoCouponsCoupon {
	s.Description = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoCouponsCoupon) SetIsSelected(v string) *DescribeRenewalPriceResponsePriceInfoCouponsCoupon {
	s.IsSelected = &v
	return s
}

type DescribeRenewalPriceResponsePriceInfoActivityInfo struct {
	CheckErrMsg *string `json:"CheckErrMsg,omitempty" xml:"CheckErrMsg,omitempty" require:"true"`
	ErrorCode   *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty" require:"true"`
	Success     *string `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
}

func (s DescribeRenewalPriceResponsePriceInfoActivityInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoActivityInfo) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoActivityInfo) SetCheckErrMsg(v string) *DescribeRenewalPriceResponsePriceInfoActivityInfo {
	s.CheckErrMsg = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoActivityInfo) SetErrorCode(v string) *DescribeRenewalPriceResponsePriceInfoActivityInfo {
	s.ErrorCode = &v
	return s
}

func (s *DescribeRenewalPriceResponsePriceInfoActivityInfo) SetSuccess(v string) *DescribeRenewalPriceResponsePriceInfoActivityInfo {
	s.Success = &v
	return s
}

type DescribeRenewalPriceResponsePriceInfoRuleIds struct {
	// RuleId
	RuleId []*string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRenewalPriceResponsePriceInfoRuleIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponsePriceInfoRuleIds) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponsePriceInfoRuleIds) SetRuleId(v []*string) *DescribeRenewalPriceResponsePriceInfoRuleIds {
	s.RuleId = v
	return s
}

type DescribePriceRequest struct {
	ClientToken           *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	CommodityCode         *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Engine                *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	DBInstanceStorage     *int    `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty" require:"true"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	UsedTime              *int    `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	TimeType              *string `json:"TimeType,omitempty" xml:"TimeType,omitempty"`
	Quantity              *int    `json:"Quantity,omitempty" xml:"Quantity,omitempty" require:"true"`
	InstanceUsedType      *int    `json:"InstanceUsedType,omitempty" xml:"InstanceUsedType,omitempty"`
	OrderType             *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribePriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceRequest) SetClientToken(v string) *DescribePriceRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribePriceRequest) SetCommodityCode(v string) *DescribePriceRequest {
	s.CommodityCode = &v
	return s
}

func (s *DescribePriceRequest) SetRegionId(v string) *DescribePriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePriceRequest) SetEngine(v string) *DescribePriceRequest {
	s.Engine = &v
	return s
}

func (s *DescribePriceRequest) SetEngineVersion(v string) *DescribePriceRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribePriceRequest) SetDBInstanceClass(v string) *DescribePriceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribePriceRequest) SetDBInstanceStorage(v int) *DescribePriceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *DescribePriceRequest) SetPayType(v string) *DescribePriceRequest {
	s.PayType = &v
	return s
}

func (s *DescribePriceRequest) SetZoneId(v string) *DescribePriceRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribePriceRequest) SetUsedTime(v int) *DescribePriceRequest {
	s.UsedTime = &v
	return s
}

func (s *DescribePriceRequest) SetTimeType(v string) *DescribePriceRequest {
	s.TimeType = &v
	return s
}

func (s *DescribePriceRequest) SetQuantity(v int) *DescribePriceRequest {
	s.Quantity = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceUsedType(v int) *DescribePriceRequest {
	s.InstanceUsedType = &v
	return s
}

func (s *DescribePriceRequest) SetOrderType(v string) *DescribePriceRequest {
	s.OrderType = &v
	return s
}

func (s *DescribePriceRequest) SetDBInstanceStorageType(v string) *DescribePriceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribePriceRequest) SetDBInstanceId(v string) *DescribePriceRequest {
	s.DBInstanceId = &v
	return s
}

type DescribePriceResponse struct {
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Rules     *DescribePriceResponseRules     `json:"Rules,omitempty" xml:"Rules,omitempty" require:"true" type:"Struct"`
	PriceInfo *DescribePriceResponsePriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" require:"true" type:"Struct"`
}

func (s DescribePriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceResponse) SetRequestId(v string) *DescribePriceResponse {
	s.RequestId = &v
	return s
}

func (s *DescribePriceResponse) SetRules(v *DescribePriceResponseRules) *DescribePriceResponse {
	s.Rules = v
	return s
}

func (s *DescribePriceResponse) SetPriceInfo(v *DescribePriceResponsePriceInfo) *DescribePriceResponse {
	s.PriceInfo = v
	return s
}

type DescribePriceResponseRules struct {
	Rule []*DescribePriceResponseRulesRule `json:"Rule,omitempty" xml:"Rule,omitempty" require:"true" type:"Repeated"`
}

func (s DescribePriceResponseRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseRules) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseRules) SetRule(v []*DescribePriceResponseRulesRule) *DescribePriceResponseRules {
	s.Rule = v
	return s
}

type DescribePriceResponseRulesRule struct {
	RuleId      *int64  `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
}

func (s DescribePriceResponseRulesRule) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseRulesRule) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseRulesRule) SetRuleId(v int64) *DescribePriceResponseRulesRule {
	s.RuleId = &v
	return s
}

func (s *DescribePriceResponseRulesRule) SetName(v string) *DescribePriceResponseRulesRule {
	s.Name = &v
	return s
}

func (s *DescribePriceResponseRulesRule) SetDescription(v string) *DescribePriceResponseRulesRule {
	s.Description = &v
	return s
}

type DescribePriceResponsePriceInfo struct {
	Currency      *string                                     `json:"Currency,omitempty" xml:"Currency,omitempty" require:"true"`
	OriginalPrice *float32                                    `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty" require:"true"`
	TradePrice    *float32                                    `json:"TradePrice,omitempty" xml:"TradePrice,omitempty" require:"true"`
	DiscountPrice *float32                                    `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty" require:"true"`
	Coupons       *DescribePriceResponsePriceInfoCoupons      `json:"Coupons,omitempty" xml:"Coupons,omitempty" require:"true" type:"Struct"`
	ActivityInfo  *DescribePriceResponsePriceInfoActivityInfo `json:"ActivityInfo,omitempty" xml:"ActivityInfo,omitempty" require:"true" type:"Struct"`
	RuleIds       *DescribePriceResponsePriceInfoRuleIds      `json:"RuleIds,omitempty" xml:"RuleIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribePriceResponsePriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfo) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfo) SetCurrency(v string) *DescribePriceResponsePriceInfo {
	s.Currency = &v
	return s
}

func (s *DescribePriceResponsePriceInfo) SetOriginalPrice(v float32) *DescribePriceResponsePriceInfo {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponsePriceInfo) SetTradePrice(v float32) *DescribePriceResponsePriceInfo {
	s.TradePrice = &v
	return s
}

func (s *DescribePriceResponsePriceInfo) SetDiscountPrice(v float32) *DescribePriceResponsePriceInfo {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponsePriceInfo) SetCoupons(v *DescribePriceResponsePriceInfoCoupons) *DescribePriceResponsePriceInfo {
	s.Coupons = v
	return s
}

func (s *DescribePriceResponsePriceInfo) SetActivityInfo(v *DescribePriceResponsePriceInfoActivityInfo) *DescribePriceResponsePriceInfo {
	s.ActivityInfo = v
	return s
}

func (s *DescribePriceResponsePriceInfo) SetRuleIds(v *DescribePriceResponsePriceInfoRuleIds) *DescribePriceResponsePriceInfo {
	s.RuleIds = v
	return s
}

type DescribePriceResponsePriceInfoCoupons struct {
	Coupon []*DescribePriceResponsePriceInfoCouponsCoupon `json:"Coupon,omitempty" xml:"Coupon,omitempty" require:"true" type:"Repeated"`
}

func (s DescribePriceResponsePriceInfoCoupons) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoCoupons) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoCoupons) SetCoupon(v []*DescribePriceResponsePriceInfoCouponsCoupon) *DescribePriceResponsePriceInfoCoupons {
	s.Coupon = v
	return s
}

type DescribePriceResponsePriceInfoCouponsCoupon struct {
	CouponNo    *string `json:"CouponNo,omitempty" xml:"CouponNo,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	IsSelected  *string `json:"IsSelected,omitempty" xml:"IsSelected,omitempty" require:"true"`
}

func (s DescribePriceResponsePriceInfoCouponsCoupon) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoCouponsCoupon) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoCouponsCoupon) SetCouponNo(v string) *DescribePriceResponsePriceInfoCouponsCoupon {
	s.CouponNo = &v
	return s
}

func (s *DescribePriceResponsePriceInfoCouponsCoupon) SetName(v string) *DescribePriceResponsePriceInfoCouponsCoupon {
	s.Name = &v
	return s
}

func (s *DescribePriceResponsePriceInfoCouponsCoupon) SetDescription(v string) *DescribePriceResponsePriceInfoCouponsCoupon {
	s.Description = &v
	return s
}

func (s *DescribePriceResponsePriceInfoCouponsCoupon) SetIsSelected(v string) *DescribePriceResponsePriceInfoCouponsCoupon {
	s.IsSelected = &v
	return s
}

type DescribePriceResponsePriceInfoActivityInfo struct {
	CheckErrMsg *string `json:"CheckErrMsg,omitempty" xml:"CheckErrMsg,omitempty" require:"true"`
	ErrorCode   *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty" require:"true"`
	Success     *string `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
}

func (s DescribePriceResponsePriceInfoActivityInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoActivityInfo) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoActivityInfo) SetCheckErrMsg(v string) *DescribePriceResponsePriceInfoActivityInfo {
	s.CheckErrMsg = &v
	return s
}

func (s *DescribePriceResponsePriceInfoActivityInfo) SetErrorCode(v string) *DescribePriceResponsePriceInfoActivityInfo {
	s.ErrorCode = &v
	return s
}

func (s *DescribePriceResponsePriceInfoActivityInfo) SetSuccess(v string) *DescribePriceResponsePriceInfoActivityInfo {
	s.Success = &v
	return s
}

type DescribePriceResponsePriceInfoRuleIds struct {
	// RuleId
	RuleId []*string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribePriceResponsePriceInfoRuleIds) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponsePriceInfoRuleIds) GoString() string {
	return s.String()
}

func (s *DescribePriceResponsePriceInfoRuleIds) SetRuleId(v []*string) *DescribePriceResponsePriceInfoRuleIds {
	s.RuleId = v
	return s
}

type RenewInstanceRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Period       *int    `json:"Period,omitempty" xml:"Period,omitempty" require:"true"`
	AutoPay      *string `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
}

func (s RenewInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewInstanceRequest) SetClientToken(v string) *RenewInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RenewInstanceRequest) SetDBInstanceId(v string) *RenewInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RenewInstanceRequest) SetPeriod(v int) *RenewInstanceRequest {
	s.Period = &v
	return s
}

func (s *RenewInstanceRequest) SetAutoPay(v string) *RenewInstanceRequest {
	s.AutoPay = &v
	return s
}

type RenewInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	OrderId   *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s RenewInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponse) SetRequestId(v string) *RenewInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *RenewInstanceResponse) SetOrderId(v int64) *RenewInstanceResponse {
	s.OrderId = &v
	return s
}

type CheckRecoveryConditionsRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupId     *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	BackupFile   *string `json:"BackupFile,omitempty" xml:"BackupFile,omitempty"`
	RestoreTime  *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
}

func (s CheckRecoveryConditionsRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckRecoveryConditionsRequest) GoString() string {
	return s.String()
}

func (s *CheckRecoveryConditionsRequest) SetDBInstanceId(v string) *CheckRecoveryConditionsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckRecoveryConditionsRequest) SetBackupId(v string) *CheckRecoveryConditionsRequest {
	s.BackupId = &v
	return s
}

func (s *CheckRecoveryConditionsRequest) SetBackupFile(v string) *CheckRecoveryConditionsRequest {
	s.BackupFile = &v
	return s
}

func (s *CheckRecoveryConditionsRequest) SetRestoreTime(v string) *CheckRecoveryConditionsRequest {
	s.RestoreTime = &v
	return s
}

type CheckRecoveryConditionsResponse struct {
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	RecoveryStatus *string `json:"RecoveryStatus,omitempty" xml:"RecoveryStatus,omitempty" require:"true"`
}

func (s CheckRecoveryConditionsResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckRecoveryConditionsResponse) GoString() string {
	return s.String()
}

func (s *CheckRecoveryConditionsResponse) SetRequestId(v string) *CheckRecoveryConditionsResponse {
	s.RequestId = &v
	return s
}

func (s *CheckRecoveryConditionsResponse) SetDBInstanceId(v string) *CheckRecoveryConditionsResponse {
	s.DBInstanceId = &v
	return s
}

func (s *CheckRecoveryConditionsResponse) SetRecoveryStatus(v string) *CheckRecoveryConditionsResponse {
	s.RecoveryStatus = &v
	return s
}

type ModifyInstanceAutoRenewalAttributeRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Duration     *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	AutoRenew    *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
}

func (s ModifyInstanceAutoRenewalAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewalAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetRegionId(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetClientToken(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetDBInstanceId(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetDuration(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyInstanceAutoRenewalAttributeRequest) SetAutoRenew(v string) *ModifyInstanceAutoRenewalAttributeRequest {
	s.AutoRenew = &v
	return s
}

type ModifyInstanceAutoRenewalAttributeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyInstanceAutoRenewalAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewalAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewalAttributeResponse) SetRequestId(v string) *ModifyInstanceAutoRenewalAttributeResponse {
	s.RequestId = &v
	return s
}

type DescribeInstanceAutoRenewalAttributeRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId      *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeInstanceAutoRenewalAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewalAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetClientToken(v string) *DescribeInstanceAutoRenewalAttributeRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetProxyId(v string) *DescribeInstanceAutoRenewalAttributeRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetRegionId(v string) *DescribeInstanceAutoRenewalAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetDBInstanceId(v string) *DescribeInstanceAutoRenewalAttributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetPageSize(v int) *DescribeInstanceAutoRenewalAttributeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeRequest) SetPageNumber(v int) *DescribeInstanceAutoRenewalAttributeRequest {
	s.PageNumber = &v
	return s
}

type DescribeInstanceAutoRenewalAttributeResponse struct {
	RequestId        *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber       *int                                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	TotalRecordCount *int                                               `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageRecordCount  *int                                               `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeInstanceAutoRenewalAttributeResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeInstanceAutoRenewalAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewalAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewalAttributeResponse) SetRequestId(v string) *DescribeInstanceAutoRenewalAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponse) SetPageNumber(v int) *DescribeInstanceAutoRenewalAttributeResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponse) SetTotalRecordCount(v int) *DescribeInstanceAutoRenewalAttributeResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponse) SetPageRecordCount(v int) *DescribeInstanceAutoRenewalAttributeResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponse) SetItems(v *DescribeInstanceAutoRenewalAttributeResponseItems) *DescribeInstanceAutoRenewalAttributeResponse {
	s.Items = v
	return s
}

type DescribeInstanceAutoRenewalAttributeResponseItems struct {
	Item []*DescribeInstanceAutoRenewalAttributeResponseItemsItem `json:"Item,omitempty" xml:"Item,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeInstanceAutoRenewalAttributeResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewalAttributeResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewalAttributeResponseItems) SetItem(v []*DescribeInstanceAutoRenewalAttributeResponseItemsItem) *DescribeInstanceAutoRenewalAttributeResponseItems {
	s.Item = v
	return s
}

type DescribeInstanceAutoRenewalAttributeResponseItemsItem struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Duration     *int    `json:"Duration,omitempty" xml:"Duration,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	AutoRenew    *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty" require:"true"`
}

func (s DescribeInstanceAutoRenewalAttributeResponseItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewalAttributeResponseItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewalAttributeResponseItemsItem) SetDBInstanceId(v string) *DescribeInstanceAutoRenewalAttributeResponseItemsItem {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseItemsItem) SetRegionId(v string) *DescribeInstanceAutoRenewalAttributeResponseItemsItem {
	s.RegionId = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseItemsItem) SetDuration(v int) *DescribeInstanceAutoRenewalAttributeResponseItemsItem {
	s.Duration = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseItemsItem) SetStatus(v string) *DescribeInstanceAutoRenewalAttributeResponseItemsItem {
	s.Status = &v
	return s
}

func (s *DescribeInstanceAutoRenewalAttributeResponseItemsItem) SetAutoRenew(v string) *DescribeInstanceAutoRenewalAttributeResponseItemsItem {
	s.AutoRenew = &v
	return s
}

type ReleaseReadWriteSplittingConnectionRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s ReleaseReadWriteSplittingConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseReadWriteSplittingConnectionRequest) GoString() string {
	return s.String()
}

func (s *ReleaseReadWriteSplittingConnectionRequest) SetDBInstanceId(v string) *ReleaseReadWriteSplittingConnectionRequest {
	s.DBInstanceId = &v
	return s
}

type ReleaseReadWriteSplittingConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ReleaseReadWriteSplittingConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseReadWriteSplittingConnectionResponse) GoString() string {
	return s.String()
}

func (s *ReleaseReadWriteSplittingConnectionResponse) SetRequestId(v string) *ReleaseReadWriteSplittingConnectionResponse {
	s.RequestId = &v
	return s
}

type ModifyReadWriteSplittingConnectionRequest struct {
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	Port                   *string `json:"Port,omitempty" xml:"Port,omitempty"`
	MaxDelayTime           *string `json:"MaxDelayTime,omitempty" xml:"MaxDelayTime,omitempty"`
	DistributionType       *string `json:"DistributionType,omitempty" xml:"DistributionType,omitempty"`
	Weight                 *string `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s ModifyReadWriteSplittingConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyReadWriteSplittingConnectionRequest) GoString() string {
	return s.String()
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetDBInstanceId(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetConnectionStringPrefix(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetPort(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.Port = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetMaxDelayTime(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.MaxDelayTime = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetDistributionType(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.DistributionType = &v
	return s
}

func (s *ModifyReadWriteSplittingConnectionRequest) SetWeight(v string) *ModifyReadWriteSplittingConnectionRequest {
	s.Weight = &v
	return s
}

type ModifyReadWriteSplittingConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyReadWriteSplittingConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyReadWriteSplittingConnectionResponse) GoString() string {
	return s.String()
}

func (s *ModifyReadWriteSplittingConnectionResponse) SetRequestId(v string) *ModifyReadWriteSplittingConnectionResponse {
	s.RequestId = &v
	return s
}

type CalculateDBInstanceWeightRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s CalculateDBInstanceWeightRequest) String() string {
	return tea.Prettify(s)
}

func (s CalculateDBInstanceWeightRequest) GoString() string {
	return s.String()
}

func (s *CalculateDBInstanceWeightRequest) SetDBInstanceId(v string) *CalculateDBInstanceWeightRequest {
	s.DBInstanceId = &v
	return s
}

type CalculateDBInstanceWeightResponse struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Items     *CalculateDBInstanceWeightResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s CalculateDBInstanceWeightResponse) String() string {
	return tea.Prettify(s)
}

func (s CalculateDBInstanceWeightResponse) GoString() string {
	return s.String()
}

func (s *CalculateDBInstanceWeightResponse) SetRequestId(v string) *CalculateDBInstanceWeightResponse {
	s.RequestId = &v
	return s
}

func (s *CalculateDBInstanceWeightResponse) SetItems(v *CalculateDBInstanceWeightResponseItems) *CalculateDBInstanceWeightResponse {
	s.Items = v
	return s
}

type CalculateDBInstanceWeightResponseItems struct {
	DBInstanceWeight []*CalculateDBInstanceWeightResponseItemsDBInstanceWeight `json:"DBInstanceWeight,omitempty" xml:"DBInstanceWeight,omitempty" require:"true" type:"Repeated"`
}

func (s CalculateDBInstanceWeightResponseItems) String() string {
	return tea.Prettify(s)
}

func (s CalculateDBInstanceWeightResponseItems) GoString() string {
	return s.String()
}

func (s *CalculateDBInstanceWeightResponseItems) SetDBInstanceWeight(v []*CalculateDBInstanceWeightResponseItemsDBInstanceWeight) *CalculateDBInstanceWeightResponseItems {
	s.DBInstanceWeight = v
	return s
}

type CalculateDBInstanceWeightResponseItemsDBInstanceWeight struct {
	DBInstanceId                   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceType                 *string `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty" require:"true"`
	ReadonlyInstanceSQLDelayedTime *string `json:"ReadonlyInstanceSQLDelayedTime,omitempty" xml:"ReadonlyInstanceSQLDelayedTime,omitempty" require:"true"`
	Weight                         *string `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
}

func (s CalculateDBInstanceWeightResponseItemsDBInstanceWeight) String() string {
	return tea.Prettify(s)
}

func (s CalculateDBInstanceWeightResponseItemsDBInstanceWeight) GoString() string {
	return s.String()
}

func (s *CalculateDBInstanceWeightResponseItemsDBInstanceWeight) SetDBInstanceId(v string) *CalculateDBInstanceWeightResponseItemsDBInstanceWeight {
	s.DBInstanceId = &v
	return s
}

func (s *CalculateDBInstanceWeightResponseItemsDBInstanceWeight) SetDBInstanceType(v string) *CalculateDBInstanceWeightResponseItemsDBInstanceWeight {
	s.DBInstanceType = &v
	return s
}

func (s *CalculateDBInstanceWeightResponseItemsDBInstanceWeight) SetReadonlyInstanceSQLDelayedTime(v string) *CalculateDBInstanceWeightResponseItemsDBInstanceWeight {
	s.ReadonlyInstanceSQLDelayedTime = &v
	return s
}

func (s *CalculateDBInstanceWeightResponseItemsDBInstanceWeight) SetWeight(v string) *CalculateDBInstanceWeightResponseItemsDBInstanceWeight {
	s.Weight = &v
	return s
}

type AllocateReadWriteSplittingConnectionRequest struct {
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty"`
	Port                   *string `json:"Port,omitempty" xml:"Port,omitempty"`
	MaxDelayTime           *string `json:"MaxDelayTime,omitempty" xml:"MaxDelayTime,omitempty"`
	NetType                *string `json:"NetType,omitempty" xml:"NetType,omitempty"`
	DistributionType       *string `json:"DistributionType,omitempty" xml:"DistributionType,omitempty"`
	Weight                 *string `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s AllocateReadWriteSplittingConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateReadWriteSplittingConnectionRequest) GoString() string {
	return s.String()
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetDBInstanceId(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetConnectionStringPrefix(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetPort(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.Port = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetMaxDelayTime(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.MaxDelayTime = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetNetType(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.NetType = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetDistributionType(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.DistributionType = &v
	return s
}

func (s *AllocateReadWriteSplittingConnectionRequest) SetWeight(v string) *AllocateReadWriteSplittingConnectionRequest {
	s.Weight = &v
	return s
}

type AllocateReadWriteSplittingConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AllocateReadWriteSplittingConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateReadWriteSplittingConnectionResponse) GoString() string {
	return s.String()
}

func (s *AllocateReadWriteSplittingConnectionResponse) SetRequestId(v string) *AllocateReadWriteSplittingConnectionResponse {
	s.RequestId = &v
	return s
}

type ModifyDBInstancePayTypeRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	UsedTime     *int    `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	PayType      *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	Period       *string `json:"Period,omitempty" xml:"Period,omitempty" require:"true"`
}

func (s ModifyDBInstancePayTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstancePayTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeRequest) SetDBInstanceId(v string) *ModifyDBInstancePayTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetUsedTime(v int) *ModifyDBInstancePayTypeRequest {
	s.UsedTime = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetPayType(v string) *ModifyDBInstancePayTypeRequest {
	s.PayType = &v
	return s
}

func (s *ModifyDBInstancePayTypeRequest) SetPeriod(v string) *ModifyDBInstancePayTypeRequest {
	s.Period = &v
	return s
}

type ModifyDBInstancePayTypeResponse struct {
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s ModifyDBInstancePayTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstancePayTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstancePayTypeResponse) SetOrderId(v int64) *ModifyDBInstancePayTypeResponse {
	s.OrderId = &v
	return s
}

type DescribeCharacterSetNameRequest struct {
	Engine   *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DescribeCharacterSetNameRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharacterSetNameRequest) GoString() string {
	return s.String()
}

func (s *DescribeCharacterSetNameRequest) SetEngine(v string) *DescribeCharacterSetNameRequest {
	s.Engine = &v
	return s
}

func (s *DescribeCharacterSetNameRequest) SetRegionId(v string) *DescribeCharacterSetNameRequest {
	s.RegionId = &v
	return s
}

type DescribeCharacterSetNameResponse struct {
	RequestId             *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Engine                *string                                                `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	CharacterSetNameItems *DescribeCharacterSetNameResponseCharacterSetNameItems `json:"CharacterSetNameItems,omitempty" xml:"CharacterSetNameItems,omitempty" require:"true" type:"Struct"`
}

func (s DescribeCharacterSetNameResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharacterSetNameResponse) GoString() string {
	return s.String()
}

func (s *DescribeCharacterSetNameResponse) SetRequestId(v string) *DescribeCharacterSetNameResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeCharacterSetNameResponse) SetEngine(v string) *DescribeCharacterSetNameResponse {
	s.Engine = &v
	return s
}

func (s *DescribeCharacterSetNameResponse) SetCharacterSetNameItems(v *DescribeCharacterSetNameResponseCharacterSetNameItems) *DescribeCharacterSetNameResponse {
	s.CharacterSetNameItems = v
	return s
}

type DescribeCharacterSetNameResponseCharacterSetNameItems struct {
	CharacterSetName []*string `json:"CharacterSetName,omitempty" xml:"CharacterSetName,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeCharacterSetNameResponseCharacterSetNameItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeCharacterSetNameResponseCharacterSetNameItems) GoString() string {
	return s.String()
}

func (s *DescribeCharacterSetNameResponseCharacterSetNameItems) SetCharacterSetName(v []*string) *DescribeCharacterSetNameResponseCharacterSetNameItems {
	s.CharacterSetName = v
	return s
}

type DeleteBackupRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupId     *string `json:"BackupId,omitempty" xml:"BackupId,omitempty" require:"true"`
}

func (s DeleteBackupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupRequest) GoString() string {
	return s.String()
}

func (s *DeleteBackupRequest) SetDBInstanceId(v string) *DeleteBackupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteBackupRequest) SetBackupId(v string) *DeleteBackupRequest {
	s.BackupId = &v
	return s
}

type DeleteBackupResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteBackupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBackupResponse) GoString() string {
	return s.String()
}

func (s *DeleteBackupResponse) SetRequestId(v string) *DeleteBackupResponse {
	s.RequestId = &v
	return s
}

type DescribeDiagnosticReportListRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDiagnosticReportListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListRequest) SetDBInstanceId(v string) *DescribeDiagnosticReportListRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDiagnosticReportListResponse struct {
	RequestId  *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ReportList []*DescribeDiagnosticReportListResponseReportList `json:"ReportList,omitempty" xml:"ReportList,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDiagnosticReportListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListResponse) SetRequestId(v string) *DescribeDiagnosticReportListResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosticReportListResponse) SetReportList(v []*DescribeDiagnosticReportListResponseReportList) *DescribeDiagnosticReportListResponse {
	s.ReportList = v
	return s
}

type DescribeDiagnosticReportListResponseReportList struct {
	DiagnosticTime *string `json:"DiagnosticTime,omitempty" xml:"DiagnosticTime,omitempty" require:"true"`
	Score          *int    `json:"Score,omitempty" xml:"Score,omitempty" require:"true"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime        *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	DownloadURL    *string `json:"DownloadURL,omitempty" xml:"DownloadURL,omitempty" require:"true"`
}

func (s DescribeDiagnosticReportListResponseReportList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListResponseReportList) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListResponseReportList) SetDiagnosticTime(v string) *DescribeDiagnosticReportListResponseReportList {
	s.DiagnosticTime = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseReportList) SetScore(v int) *DescribeDiagnosticReportListResponseReportList {
	s.Score = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseReportList) SetStartTime(v string) *DescribeDiagnosticReportListResponseReportList {
	s.StartTime = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseReportList) SetEndTime(v string) *DescribeDiagnosticReportListResponseReportList {
	s.EndTime = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseReportList) SetDownloadURL(v string) *DescribeDiagnosticReportListResponseReportList {
	s.DownloadURL = &v
	return s
}

type CreateDiagnosticReportRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
}

func (s CreateDiagnosticReportRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportRequest) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportRequest) SetDBInstanceId(v string) *CreateDiagnosticReportRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetStartTime(v string) *CreateDiagnosticReportRequest {
	s.StartTime = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetEndTime(v string) *CreateDiagnosticReportRequest {
	s.EndTime = &v
	return s
}

type CreateDiagnosticReportResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ReportId  *string `json:"ReportId,omitempty" xml:"ReportId,omitempty" require:"true"`
}

func (s CreateDiagnosticReportResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponse) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponse) SetRequestId(v string) *CreateDiagnosticReportResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDiagnosticReportResponse) SetReportId(v string) *CreateDiagnosticReportResponse {
	s.ReportId = &v
	return s
}

type CloneDBInstanceRequest struct {
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage     *int    `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	DbNames               *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	InstanceNetworkType   *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupId              *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime           *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
	VPCId                 *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId             *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress      *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	UsedTime              *int    `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	Period                *string `json:"Period,omitempty" xml:"Period,omitempty"`
	Category              *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	RestoreTable          *string `json:"RestoreTable,omitempty" xml:"RestoreTable,omitempty"`
	TableMeta             *string `json:"TableMeta,omitempty" xml:"TableMeta,omitempty"`
	DedicatedHostGroupId  *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	BackupType            *string `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
}

func (s CloneDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceRequest) SetRegionId(v string) *CloneDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetZoneId(v string) *CloneDBInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDBInstanceClass(v string) *CloneDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDBInstanceStorage(v int) *CloneDBInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDbNames(v string) *CloneDBInstanceRequest {
	s.DbNames = &v
	return s
}

func (s *CloneDBInstanceRequest) SetPayType(v string) *CloneDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CloneDBInstanceRequest) SetInstanceNetworkType(v string) *CloneDBInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDBInstanceId(v string) *CloneDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetBackupId(v string) *CloneDBInstanceRequest {
	s.BackupId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetRestoreTime(v string) *CloneDBInstanceRequest {
	s.RestoreTime = &v
	return s
}

func (s *CloneDBInstanceRequest) SetVPCId(v string) *CloneDBInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetVSwitchId(v string) *CloneDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetPrivateIpAddress(v string) *CloneDBInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CloneDBInstanceRequest) SetUsedTime(v int) *CloneDBInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *CloneDBInstanceRequest) SetPeriod(v string) *CloneDBInstanceRequest {
	s.Period = &v
	return s
}

func (s *CloneDBInstanceRequest) SetCategory(v string) *CloneDBInstanceRequest {
	s.Category = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDBInstanceStorageType(v string) *CloneDBInstanceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *CloneDBInstanceRequest) SetRestoreTable(v string) *CloneDBInstanceRequest {
	s.RestoreTable = &v
	return s
}

func (s *CloneDBInstanceRequest) SetTableMeta(v string) *CloneDBInstanceRequest {
	s.TableMeta = &v
	return s
}

func (s *CloneDBInstanceRequest) SetDedicatedHostGroupId(v string) *CloneDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *CloneDBInstanceRequest) SetBackupType(v string) *CloneDBInstanceRequest {
	s.BackupType = &v
	return s
}

type CloneDBInstanceResponse struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	OrderId      *string `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
}

func (s CloneDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CloneDBInstanceResponse) SetRequestId(v string) *CloneDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *CloneDBInstanceResponse) SetDBInstanceId(v string) *CloneDBInstanceResponse {
	s.DBInstanceId = &v
	return s
}

func (s *CloneDBInstanceResponse) SetOrderId(v string) *CloneDBInstanceResponse {
	s.OrderId = &v
	return s
}

type DescribeTagsRequest struct {
	// description: 用于保证请求的幂等性，防止重复提交请求。由客户端生成该参数值，要保证在不同请求间唯一，最大值不超过64个ASCII字符，且该参数值中不能包含非ASCII字符。;
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// description: 代理模式ID。;
	ProxyId *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	// description: 地域ID，可以通过接口[DescribeRegions](~~26243~~)查看可用的地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 实例ID。>传入该参数，其他过滤条件失效。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// description: 需要查询的标签，包括TagKey和TagValue。格式：{“key1”:”value1”}。;
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s DescribeTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagsRequest) SetClientToken(v string) *DescribeTagsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeTagsRequest) SetProxyId(v string) *DescribeTagsRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeTagsRequest) SetRegionId(v string) *DescribeTagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTagsRequest) SetDBInstanceId(v string) *DescribeTagsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeTagsRequest) SetTags(v string) *DescribeTagsRequest {
	s.Tags = &v
	return s
}

type DescribeTagsResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: 由Tag信息组成的数组。
	Items *DescribeTagsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponse) SetRequestId(v string) *DescribeTagsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeTagsResponse) SetItems(v *DescribeTagsResponseItems) *DescribeTagsResponse {
	s.Items = v
	return s
}

type DescribeTagsResponseItems struct {
	TagInfos []*DescribeTagsResponseItemsTagInfos `json:"TagInfos,omitempty" xml:"TagInfos,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeTagsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseItems) SetTagInfos(v []*DescribeTagsResponseItemsTagInfos) *DescribeTagsResponseItems {
	s.TagInfos = v
	return s
}

type DescribeTagsResponseItemsTagInfos struct {
	// description: 标签键。;
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	// description: 标签值。;
	TagValue      *string                                         `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
	DBInstanceIds *DescribeTagsResponseItemsTagInfosDBInstanceIds `json:"DBInstanceIds,omitempty" xml:"DBInstanceIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribeTagsResponseItemsTagInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseItemsTagInfos) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseItemsTagInfos) SetTagKey(v string) *DescribeTagsResponseItemsTagInfos {
	s.TagKey = &v
	return s
}

func (s *DescribeTagsResponseItemsTagInfos) SetTagValue(v string) *DescribeTagsResponseItemsTagInfos {
	s.TagValue = &v
	return s
}

func (s *DescribeTagsResponseItemsTagInfos) SetDBInstanceIds(v *DescribeTagsResponseItemsTagInfosDBInstanceIds) *DescribeTagsResponseItemsTagInfos {
	s.DBInstanceIds = v
	return s
}

type DescribeTagsResponseItemsTagInfosDBInstanceIds struct {
	// DBInstanceIds
	DBInstanceIds []*string `json:"DBInstanceIds,omitempty" xml:"DBInstanceIds,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeTagsResponseItemsTagInfosDBInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagsResponseItemsTagInfosDBInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeTagsResponseItemsTagInfosDBInstanceIds) SetDBInstanceIds(v []*string) *DescribeTagsResponseItemsTagInfosDBInstanceIds {
	s.DBInstanceIds = v
	return s
}

type DescribeDBInstanceByTagsRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId      *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeDBInstanceByTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceByTagsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceByTagsRequest) SetClientToken(v string) *DescribeDBInstanceByTagsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstanceByTagsRequest) SetProxyId(v string) *DescribeDBInstanceByTagsRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeDBInstanceByTagsRequest) SetRegionId(v string) *DescribeDBInstanceByTagsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstanceByTagsRequest) SetDBInstanceId(v string) *DescribeDBInstanceByTagsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceByTagsRequest) SetPageSize(v int) *DescribeDBInstanceByTagsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstanceByTagsRequest) SetPageNumber(v int) *DescribeDBInstanceByTagsRequest {
	s.PageNumber = &v
	return s
}

type DescribeDBInstanceByTagsResponse struct {
	RequestId        *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber       *int                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                                   `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	TotalRecordCount *int                                   `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	Items            *DescribeDBInstanceByTagsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstanceByTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceByTagsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceByTagsResponse) SetRequestId(v string) *DescribeDBInstanceByTagsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceByTagsResponse) SetPageNumber(v int) *DescribeDBInstanceByTagsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstanceByTagsResponse) SetPageRecordCount(v int) *DescribeDBInstanceByTagsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstanceByTagsResponse) SetTotalRecordCount(v int) *DescribeDBInstanceByTagsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstanceByTagsResponse) SetItems(v *DescribeDBInstanceByTagsResponseItems) *DescribeDBInstanceByTagsResponse {
	s.Items = v
	return s
}

type DescribeDBInstanceByTagsResponseItems struct {
	DBInstanceTag []*DescribeDBInstanceByTagsResponseItemsDBInstanceTag `json:"DBInstanceTag,omitempty" xml:"DBInstanceTag,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceByTagsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceByTagsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceByTagsResponseItems) SetDBInstanceTag(v []*DescribeDBInstanceByTagsResponseItemsDBInstanceTag) *DescribeDBInstanceByTagsResponseItems {
	s.DBInstanceTag = v
	return s
}

type DescribeDBInstanceByTagsResponseItemsDBInstanceTag struct {
	DBInstanceId *string                                                 `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Tags         *DescribeDBInstanceByTagsResponseItemsDBInstanceTagTags `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstanceByTagsResponseItemsDBInstanceTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceByTagsResponseItemsDBInstanceTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceByTagsResponseItemsDBInstanceTag) SetDBInstanceId(v string) *DescribeDBInstanceByTagsResponseItemsDBInstanceTag {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceByTagsResponseItemsDBInstanceTag) SetTags(v *DescribeDBInstanceByTagsResponseItemsDBInstanceTagTags) *DescribeDBInstanceByTagsResponseItemsDBInstanceTag {
	s.Tags = v
	return s
}

type DescribeDBInstanceByTagsResponseItemsDBInstanceTagTags struct {
	Tag []*DescribeDBInstanceByTagsResponseItemsDBInstanceTagTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceByTagsResponseItemsDBInstanceTagTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceByTagsResponseItemsDBInstanceTagTags) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceByTagsResponseItemsDBInstanceTagTags) SetTag(v []*DescribeDBInstanceByTagsResponseItemsDBInstanceTagTagsTag) *DescribeDBInstanceByTagsResponseItemsDBInstanceTagTags {
	s.Tag = v
	return s
}

type DescribeDBInstanceByTagsResponseItemsDBInstanceTagTagsTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
}

func (s DescribeDBInstanceByTagsResponseItemsDBInstanceTagTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceByTagsResponseItemsDBInstanceTagTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceByTagsResponseItemsDBInstanceTagTagsTag) SetTagKey(v string) *DescribeDBInstanceByTagsResponseItemsDBInstanceTagTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeDBInstanceByTagsResponseItemsDBInstanceTagTagsTag) SetTagValue(v string) *DescribeDBInstanceByTagsResponseItemsDBInstanceTagTagsTag {
	s.TagValue = &v
	return s
}

type RevokeOperatorPermissionRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s RevokeOperatorPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeOperatorPermissionRequest) GoString() string {
	return s.String()
}

func (s *RevokeOperatorPermissionRequest) SetDBInstanceId(v string) *RevokeOperatorPermissionRequest {
	s.DBInstanceId = &v
	return s
}

type RevokeOperatorPermissionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RevokeOperatorPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeOperatorPermissionResponse) GoString() string {
	return s.String()
}

func (s *RevokeOperatorPermissionResponse) SetRequestId(v string) *RevokeOperatorPermissionResponse {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceTDERequest struct {
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	TDEStatus     *string `json:"TDEStatus,omitempty" xml:"TDEStatus,omitempty" require:"true"`
	DBName        *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	EncryptionKey *string `json:"EncryptionKey,omitempty" xml:"EncryptionKey,omitempty"`
	RoleArn       *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
}

func (s ModifyDBInstanceTDERequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceTDERequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceTDERequest) SetDBInstanceId(v string) *ModifyDBInstanceTDERequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetTDEStatus(v string) *ModifyDBInstanceTDERequest {
	s.TDEStatus = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetDBName(v string) *ModifyDBInstanceTDERequest {
	s.DBName = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetEncryptionKey(v string) *ModifyDBInstanceTDERequest {
	s.EncryptionKey = &v
	return s
}

func (s *ModifyDBInstanceTDERequest) SetRoleArn(v string) *ModifyDBInstanceTDERequest {
	s.RoleArn = &v
	return s
}

type ModifyDBInstanceTDEResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceTDEResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceTDEResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceTDEResponse) SetRequestId(v string) *ModifyDBInstanceTDEResponse {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceSSLRequest struct {
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	SSLEnabled       *int    `json:"SSLEnabled,omitempty" xml:"SSLEnabled,omitempty"`
}

func (s ModifyDBInstanceSSLRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSSLRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLRequest) SetDBInstanceId(v string) *ModifyDBInstanceSSLRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetConnectionString(v string) *ModifyDBInstanceSSLRequest {
	s.ConnectionString = &v
	return s
}

func (s *ModifyDBInstanceSSLRequest) SetSSLEnabled(v int) *ModifyDBInstanceSSLRequest {
	s.SSLEnabled = &v
	return s
}

type ModifyDBInstanceSSLResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceSSLResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSSLResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSSLResponse) SetRequestId(v string) *ModifyDBInstanceSSLResponse {
	s.RequestId = &v
	return s
}

type GrantOperatorPermissionRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ExpiredTime  *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty" require:"true"`
	Privileges   *string `json:"Privileges,omitempty" xml:"Privileges,omitempty" require:"true"`
}

func (s GrantOperatorPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantOperatorPermissionRequest) GoString() string {
	return s.String()
}

func (s *GrantOperatorPermissionRequest) SetDBInstanceId(v string) *GrantOperatorPermissionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GrantOperatorPermissionRequest) SetExpiredTime(v string) *GrantOperatorPermissionRequest {
	s.ExpiredTime = &v
	return s
}

func (s *GrantOperatorPermissionRequest) SetPrivileges(v string) *GrantOperatorPermissionRequest {
	s.Privileges = &v
	return s
}

type GrantOperatorPermissionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s GrantOperatorPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantOperatorPermissionResponse) GoString() string {
	return s.String()
}

func (s *GrantOperatorPermissionResponse) SetRequestId(v string) *GrantOperatorPermissionResponse {
	s.RequestId = &v
	return s
}

type DescribeDBInstanceTDERequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDBInstanceTDERequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceTDERequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceTDERequest) SetDBInstanceId(v string) *DescribeDBInstanceTDERequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceTDEResponse struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TDEStatus *string                                 `json:"TDEStatus,omitempty" xml:"TDEStatus,omitempty" require:"true"`
	Databases *DescribeDBInstanceTDEResponseDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstanceTDEResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceTDEResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceTDEResponse) SetRequestId(v string) *DescribeDBInstanceTDEResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceTDEResponse) SetTDEStatus(v string) *DescribeDBInstanceTDEResponse {
	s.TDEStatus = &v
	return s
}

func (s *DescribeDBInstanceTDEResponse) SetDatabases(v *DescribeDBInstanceTDEResponseDatabases) *DescribeDBInstanceTDEResponse {
	s.Databases = v
	return s
}

type DescribeDBInstanceTDEResponseDatabases struct {
	Database []*DescribeDBInstanceTDEResponseDatabasesDatabase `json:"Database,omitempty" xml:"Database,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceTDEResponseDatabases) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceTDEResponseDatabases) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceTDEResponseDatabases) SetDatabase(v []*DescribeDBInstanceTDEResponseDatabasesDatabase) *DescribeDBInstanceTDEResponseDatabases {
	s.Database = v
	return s
}

type DescribeDBInstanceTDEResponseDatabasesDatabase struct {
	DBName    *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	TDEStatus *string `json:"TDEStatus,omitempty" xml:"TDEStatus,omitempty" require:"true"`
}

func (s DescribeDBInstanceTDEResponseDatabasesDatabase) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceTDEResponseDatabasesDatabase) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceTDEResponseDatabasesDatabase) SetDBName(v string) *DescribeDBInstanceTDEResponseDatabasesDatabase {
	s.DBName = &v
	return s
}

func (s *DescribeDBInstanceTDEResponseDatabasesDatabase) SetTDEStatus(v string) *DescribeDBInstanceTDEResponseDatabasesDatabase {
	s.TDEStatus = &v
	return s
}

type DescribeDBInstanceSSLRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDBInstanceSSLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSSLRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLRequest) SetDBInstanceId(v string) *DescribeDBInstanceSSLRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceSSLResponse struct {
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ConnectionString    *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	SSLExpireTime       *string `json:"SSLExpireTime,omitempty" xml:"SSLExpireTime,omitempty" require:"true"`
	RequireUpdate       *string `json:"RequireUpdate,omitempty" xml:"RequireUpdate,omitempty" require:"true"`
	RequireUpdateReason *string `json:"RequireUpdateReason,omitempty" xml:"RequireUpdateReason,omitempty" require:"true"`
}

func (s DescribeDBInstanceSSLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceSSLResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceSSLResponse) SetRequestId(v string) *DescribeDBInstanceSSLResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceSSLResponse) SetConnectionString(v string) *DescribeDBInstanceSSLResponse {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceSSLResponse) SetSSLExpireTime(v string) *DescribeDBInstanceSSLResponse {
	s.SSLExpireTime = &v
	return s
}

func (s *DescribeDBInstanceSSLResponse) SetRequireUpdate(v string) *DescribeDBInstanceSSLResponse {
	s.RequireUpdate = &v
	return s
}

func (s *DescribeDBInstanceSSLResponse) SetRequireUpdateReason(v string) *DescribeDBInstanceSSLResponse {
	s.RequireUpdateReason = &v
	return s
}

type DescribeSQLLogFilesRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	FileName     *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeSQLLogFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogFilesRequest) SetDBInstanceId(v string) *DescribeSQLLogFilesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogFilesRequest) SetFileName(v string) *DescribeSQLLogFilesRequest {
	s.FileName = &v
	return s
}

func (s *DescribeSQLLogFilesRequest) SetPageSize(v int) *DescribeSQLLogFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogFilesRequest) SetPageNumber(v int) *DescribeSQLLogFilesRequest {
	s.PageNumber = &v
	return s
}

type DescribeSQLLogFilesResponse struct {
	RequestId        *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int                              `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                              `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeSQLLogFilesResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSQLLogFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogFilesResponse) SetRequestId(v string) *DescribeSQLLogFilesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogFilesResponse) SetTotalRecordCount(v int) *DescribeSQLLogFilesResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSQLLogFilesResponse) SetPageNumber(v int) *DescribeSQLLogFilesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogFilesResponse) SetPageRecordCount(v int) *DescribeSQLLogFilesResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogFilesResponse) SetItems(v *DescribeSQLLogFilesResponseItems) *DescribeSQLLogFilesResponse {
	s.Items = v
	return s
}

type DescribeSQLLogFilesResponseItems struct {
	LogFile []*DescribeSQLLogFilesResponseItemsLogFile `json:"LogFile,omitempty" xml:"LogFile,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLLogFilesResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogFilesResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogFilesResponseItems) SetLogFile(v []*DescribeSQLLogFilesResponseItemsLogFile) *DescribeSQLLogFilesResponseItems {
	s.LogFile = v
	return s
}

type DescribeSQLLogFilesResponseItemsLogFile struct {
	FileID         *string `json:"FileID,omitempty" xml:"FileID,omitempty" require:"true"`
	LogStatus      *string `json:"LogStatus,omitempty" xml:"LogStatus,omitempty" require:"true"`
	LogDownloadURL *string `json:"LogDownloadURL,omitempty" xml:"LogDownloadURL,omitempty" require:"true"`
	LogSize        *string `json:"LogSize,omitempty" xml:"LogSize,omitempty" require:"true"`
	LogStartTime   *string `json:"LogStartTime,omitempty" xml:"LogStartTime,omitempty" require:"true"`
	LogEndTime     *string `json:"LogEndTime,omitempty" xml:"LogEndTime,omitempty" require:"true"`
}

func (s DescribeSQLLogFilesResponseItemsLogFile) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogFilesResponseItemsLogFile) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogFilesResponseItemsLogFile) SetFileID(v string) *DescribeSQLLogFilesResponseItemsLogFile {
	s.FileID = &v
	return s
}

func (s *DescribeSQLLogFilesResponseItemsLogFile) SetLogStatus(v string) *DescribeSQLLogFilesResponseItemsLogFile {
	s.LogStatus = &v
	return s
}

func (s *DescribeSQLLogFilesResponseItemsLogFile) SetLogDownloadURL(v string) *DescribeSQLLogFilesResponseItemsLogFile {
	s.LogDownloadURL = &v
	return s
}

func (s *DescribeSQLLogFilesResponseItemsLogFile) SetLogSize(v string) *DescribeSQLLogFilesResponseItemsLogFile {
	s.LogSize = &v
	return s
}

func (s *DescribeSQLLogFilesResponseItemsLogFile) SetLogStartTime(v string) *DescribeSQLLogFilesResponseItemsLogFile {
	s.LogStartTime = &v
	return s
}

func (s *DescribeSQLLogFilesResponseItemsLogFile) SetLogEndTime(v string) *DescribeSQLLogFilesResponseItemsLogFile {
	s.LogEndTime = &v
	return s
}

type ModifyDBInstanceMonitorRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Period       *string `json:"Period,omitempty" xml:"Period,omitempty" require:"true"`
}

func (s ModifyDBInstanceMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMonitorRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMonitorRequest) SetClientToken(v string) *ModifyDBInstanceMonitorRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDBInstanceMonitorRequest) SetDBInstanceId(v string) *ModifyDBInstanceMonitorRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceMonitorRequest) SetPeriod(v string) *ModifyDBInstanceMonitorRequest {
	s.Period = &v
	return s
}

type ModifyDBInstanceMonitorResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMonitorResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMonitorResponse) SetRequestId(v string) *ModifyDBInstanceMonitorResponse {
	s.RequestId = &v
	return s
}

type SwitchDBInstanceHARequest struct {
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	NodeId        *string `json:"NodeId,omitempty" xml:"NodeId,omitempty" require:"true"`
	Force         *string `json:"Force,omitempty" xml:"Force,omitempty"`
	EffectiveTime *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
}

func (s SwitchDBInstanceHARequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceHARequest) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceHARequest) SetDBInstanceId(v string) *SwitchDBInstanceHARequest {
	s.DBInstanceId = &v
	return s
}

func (s *SwitchDBInstanceHARequest) SetNodeId(v string) *SwitchDBInstanceHARequest {
	s.NodeId = &v
	return s
}

func (s *SwitchDBInstanceHARequest) SetForce(v string) *SwitchDBInstanceHARequest {
	s.Force = &v
	return s
}

func (s *SwitchDBInstanceHARequest) SetEffectiveTime(v string) *SwitchDBInstanceHARequest {
	s.EffectiveTime = &v
	return s
}

type SwitchDBInstanceHAResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s SwitchDBInstanceHAResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceHAResponse) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceHAResponse) SetRequestId(v string) *SwitchDBInstanceHAResponse {
	s.RequestId = &v
	return s
}

type DescribeDBInstanceMonitorRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDBInstanceMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceMonitorRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceMonitorRequest) SetClientToken(v string) *DescribeDBInstanceMonitorRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstanceMonitorRequest) SetDBInstanceId(v string) *DescribeDBInstanceMonitorRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceMonitorResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Period    *string `json:"Period,omitempty" xml:"Period,omitempty" require:"true"`
}

func (s DescribeDBInstanceMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceMonitorResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceMonitorResponse) SetRequestId(v string) *DescribeDBInstanceMonitorResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceMonitorResponse) SetPeriod(v string) *DescribeDBInstanceMonitorResponse {
	s.Period = &v
	return s
}

type DescribeSQLCollectorPolicyRequest struct {
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeSQLCollectorPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLCollectorPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLCollectorPolicyRequest) SetClientToken(v string) *DescribeSQLCollectorPolicyRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSQLCollectorPolicyRequest) SetDBInstanceId(v string) *DescribeSQLCollectorPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLCollectorPolicyRequest) SetResourceGroupId(v string) *DescribeSQLCollectorPolicyRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeSQLCollectorPolicyResponse struct {
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	SQLCollectorStatus *string `json:"SQLCollectorStatus,omitempty" xml:"SQLCollectorStatus,omitempty" require:"true"`
	StoragePeriod      *int    `json:"StoragePeriod,omitempty" xml:"StoragePeriod,omitempty" require:"true"`
}

func (s DescribeSQLCollectorPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLCollectorPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLCollectorPolicyResponse) SetRequestId(v string) *DescribeSQLCollectorPolicyResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLCollectorPolicyResponse) SetSQLCollectorStatus(v string) *DescribeSQLCollectorPolicyResponse {
	s.SQLCollectorStatus = &v
	return s
}

func (s *DescribeSQLCollectorPolicyResponse) SetStoragePeriod(v int) *DescribeSQLCollectorPolicyResponse {
	s.StoragePeriod = &v
	return s
}

type ModifySQLCollectorPolicyRequest struct {
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	SQLCollectorStatus *string `json:"SQLCollectorStatus,omitempty" xml:"SQLCollectorStatus,omitempty" require:"true"`
	ResourceGroupId    *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ModifySQLCollectorPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyRequest) SetDBInstanceId(v string) *ModifySQLCollectorPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) SetSQLCollectorStatus(v string) *ModifySQLCollectorPolicyRequest {
	s.SQLCollectorStatus = &v
	return s
}

func (s *ModifySQLCollectorPolicyRequest) SetResourceGroupId(v string) *ModifySQLCollectorPolicyRequest {
	s.ResourceGroupId = &v
	return s
}

type ModifySQLCollectorPolicyResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifySQLCollectorPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySQLCollectorPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifySQLCollectorPolicyResponse) SetRequestId(v string) *ModifySQLCollectorPolicyResponse {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceHAConfigRequest struct {
	SyncMode     *string `json:"SyncMode,omitempty" xml:"SyncMode,omitempty" require:"true"`
	HAMode       *string `json:"HAMode,omitempty" xml:"HAMode,omitempty" require:"true"`
	DbInstanceId *string `json:"DbInstanceId,omitempty" xml:"DbInstanceId,omitempty" require:"true"`
}

func (s ModifyDBInstanceHAConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceHAConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceHAConfigRequest) SetSyncMode(v string) *ModifyDBInstanceHAConfigRequest {
	s.SyncMode = &v
	return s
}

func (s *ModifyDBInstanceHAConfigRequest) SetHAMode(v string) *ModifyDBInstanceHAConfigRequest {
	s.HAMode = &v
	return s
}

func (s *ModifyDBInstanceHAConfigRequest) SetDbInstanceId(v string) *ModifyDBInstanceHAConfigRequest {
	s.DbInstanceId = &v
	return s
}

type ModifyDBInstanceHAConfigResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceHAConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceHAConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceHAConfigResponse) SetRequestId(v string) *ModifyDBInstanceHAConfigResponse {
	s.RequestId = &v
	return s
}

type DescribeDBInstanceHAConfigRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDBInstanceHAConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceHAConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceHAConfigRequest) SetDBInstanceId(v string) *DescribeDBInstanceHAConfigRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceHAConfigResponse struct {
	RequestId         *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId      *string                                              `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	SyncMode          *string                                              `json:"SyncMode,omitempty" xml:"SyncMode,omitempty" require:"true"`
	HAMode            *string                                              `json:"HAMode,omitempty" xml:"HAMode,omitempty" require:"true"`
	HostInstanceInfos *DescribeDBInstanceHAConfigResponseHostInstanceInfos `json:"HostInstanceInfos,omitempty" xml:"HostInstanceInfos,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstanceHAConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceHAConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceHAConfigResponse) SetRequestId(v string) *DescribeDBInstanceHAConfigResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponse) SetDBInstanceId(v string) *DescribeDBInstanceHAConfigResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponse) SetSyncMode(v string) *DescribeDBInstanceHAConfigResponse {
	s.SyncMode = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponse) SetHAMode(v string) *DescribeDBInstanceHAConfigResponse {
	s.HAMode = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponse) SetHostInstanceInfos(v *DescribeDBInstanceHAConfigResponseHostInstanceInfos) *DescribeDBInstanceHAConfigResponse {
	s.HostInstanceInfos = v
	return s
}

type DescribeDBInstanceHAConfigResponseHostInstanceInfos struct {
	NodeInfo []*DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo `json:"NodeInfo,omitempty" xml:"NodeInfo,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceHAConfigResponseHostInstanceInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceHAConfigResponseHostInstanceInfos) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceHAConfigResponseHostInstanceInfos) SetNodeInfo(v []*DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo) *DescribeDBInstanceHAConfigResponseHostInstanceInfos {
	s.NodeInfo = v
	return s
}

type DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo struct {
	NodeId       *string `json:"NodeId,omitempty" xml:"NodeId,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	LogSyncTime  *string `json:"LogSyncTime,omitempty" xml:"LogSyncTime,omitempty" require:"true"`
	DataSyncTime *string `json:"DataSyncTime,omitempty" xml:"DataSyncTime,omitempty" require:"true"`
	NodeType     *string `json:"NodeType,omitempty" xml:"NodeType,omitempty" require:"true"`
	ZoneId       *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	SyncStatus   *string `json:"SyncStatus,omitempty" xml:"SyncStatus,omitempty" require:"true"`
}

func (s DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo) SetNodeId(v string) *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo) SetRegionId(v string) *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo) SetLogSyncTime(v string) *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo {
	s.LogSyncTime = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo) SetDataSyncTime(v string) *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo {
	s.DataSyncTime = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo) SetNodeType(v string) *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo {
	s.NodeType = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo) SetZoneId(v string) *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo) SetSyncStatus(v string) *DescribeDBInstanceHAConfigResponseHostInstanceInfosNodeInfo {
	s.SyncStatus = &v
	return s
}

type DescribeSQLReportsRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeSQLReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLReportsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLReportsRequest) SetDBInstanceId(v string) *DescribeSQLReportsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLReportsRequest) SetStartTime(v string) *DescribeSQLReportsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLReportsRequest) SetEndTime(v string) *DescribeSQLReportsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLReportsRequest) SetPageSize(v int) *DescribeSQLReportsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLReportsRequest) SetPageNumber(v int) *DescribeSQLReportsRequest {
	s.PageNumber = &v
	return s
}

type DescribeSQLReportsResponse struct {
	RequestId        *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int                             `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                             `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeSQLReportsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSQLReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLReportsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLReportsResponse) SetRequestId(v string) *DescribeSQLReportsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLReportsResponse) SetTotalRecordCount(v int) *DescribeSQLReportsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSQLReportsResponse) SetPageNumber(v int) *DescribeSQLReportsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLReportsResponse) SetPageRecordCount(v int) *DescribeSQLReportsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLReportsResponse) SetItems(v *DescribeSQLReportsResponseItems) *DescribeSQLReportsResponse {
	s.Items = v
	return s
}

type DescribeSQLReportsResponseItems struct {
	Item []*DescribeSQLReportsResponseItemsItem `json:"Item,omitempty" xml:"Item,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLReportsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLReportsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLReportsResponseItems) SetItem(v []*DescribeSQLReportsResponseItemsItem) *DescribeSQLReportsResponseItems {
	s.Item = v
	return s
}

type DescribeSQLReportsResponseItemsItem struct {
	ReportTime       *string                                              `json:"ReportTime,omitempty" xml:"ReportTime,omitempty" require:"true"`
	LatencyTopNItems *DescribeSQLReportsResponseItemsItemLatencyTopNItems `json:"LatencyTopNItems,omitempty" xml:"LatencyTopNItems,omitempty" require:"true" type:"Struct"`
	QPSTopNItems     *DescribeSQLReportsResponseItemsItemQPSTopNItems     `json:"QPSTopNItems,omitempty" xml:"QPSTopNItems,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSQLReportsResponseItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLReportsResponseItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLReportsResponseItemsItem) SetReportTime(v string) *DescribeSQLReportsResponseItemsItem {
	s.ReportTime = &v
	return s
}

func (s *DescribeSQLReportsResponseItemsItem) SetLatencyTopNItems(v *DescribeSQLReportsResponseItemsItemLatencyTopNItems) *DescribeSQLReportsResponseItemsItem {
	s.LatencyTopNItems = v
	return s
}

func (s *DescribeSQLReportsResponseItemsItem) SetQPSTopNItems(v *DescribeSQLReportsResponseItemsItemQPSTopNItems) *DescribeSQLReportsResponseItemsItem {
	s.QPSTopNItems = v
	return s
}

type DescribeSQLReportsResponseItemsItemLatencyTopNItems struct {
	LatencyTopNItem []*DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem `json:"LatencyTopNItem,omitempty" xml:"LatencyTopNItem,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLReportsResponseItemsItemLatencyTopNItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLReportsResponseItemsItemLatencyTopNItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLReportsResponseItemsItemLatencyTopNItems) SetLatencyTopNItem(v []*DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) *DescribeSQLReportsResponseItemsItemLatencyTopNItems {
	s.LatencyTopNItem = v
	return s
}

type DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem struct {
	SQLText         *string `json:"SQLText,omitempty" xml:"SQLText,omitempty" require:"true"`
	AvgLatency      *int64  `json:"AvgLatency,omitempty" xml:"AvgLatency,omitempty" require:"true"`
	SQLExecuteTimes *int64  `json:"SQLExecuteTimes,omitempty" xml:"SQLExecuteTimes,omitempty" require:"true"`
}

func (s DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) SetSQLText(v string) *DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) SetAvgLatency(v int64) *DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem {
	s.AvgLatency = &v
	return s
}

func (s *DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) SetSQLExecuteTimes(v int64) *DescribeSQLReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem {
	s.SQLExecuteTimes = &v
	return s
}

type DescribeSQLReportsResponseItemsItemQPSTopNItems struct {
	QPSTopNItem []*DescribeSQLReportsResponseItemsItemQPSTopNItemsQPSTopNItem `json:"QPSTopNItem,omitempty" xml:"QPSTopNItem,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLReportsResponseItemsItemQPSTopNItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLReportsResponseItemsItemQPSTopNItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLReportsResponseItemsItemQPSTopNItems) SetQPSTopNItem(v []*DescribeSQLReportsResponseItemsItemQPSTopNItemsQPSTopNItem) *DescribeSQLReportsResponseItemsItemQPSTopNItems {
	s.QPSTopNItem = v
	return s
}

type DescribeSQLReportsResponseItemsItemQPSTopNItemsQPSTopNItem struct {
	SQLText         *string `json:"SQLText,omitempty" xml:"SQLText,omitempty" require:"true"`
	SQLExecuteTimes *int64  `json:"SQLExecuteTimes,omitempty" xml:"SQLExecuteTimes,omitempty" require:"true"`
}

func (s DescribeSQLReportsResponseItemsItemQPSTopNItemsQPSTopNItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLReportsResponseItemsItemQPSTopNItemsQPSTopNItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLReportsResponseItemsItemQPSTopNItemsQPSTopNItem) SetSQLText(v string) *DescribeSQLReportsResponseItemsItemQPSTopNItemsQPSTopNItem {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLReportsResponseItemsItemQPSTopNItemsQPSTopNItem) SetSQLExecuteTimes(v int64) *DescribeSQLReportsResponseItemsItemQPSTopNItemsQPSTopNItem {
	s.SQLExecuteTimes = &v
	return s
}

type DescribeDBInstanceIPArrayListRequest struct {
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	WhitelistNetworkType *string `json:"WhitelistNetworkType,omitempty" xml:"WhitelistNetworkType,omitempty"`
}

func (s DescribeDBInstanceIPArrayListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListRequest) SetDBInstanceId(v string) *DescribeDBInstanceIPArrayListRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListRequest) SetWhitelistNetworkType(v string) *DescribeDBInstanceIPArrayListRequest {
	s.WhitelistNetworkType = &v
	return s
}

type DescribeDBInstanceIPArrayListResponse struct {
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Items     *DescribeDBInstanceIPArrayListResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstanceIPArrayListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponse) SetRequestId(v string) *DescribeDBInstanceIPArrayListResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponse) SetItems(v *DescribeDBInstanceIPArrayListResponseItems) *DescribeDBInstanceIPArrayListResponse {
	s.Items = v
	return s
}

type DescribeDBInstanceIPArrayListResponseItems struct {
	DBInstanceIPArray []*DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray `json:"DBInstanceIPArray,omitempty" xml:"DBInstanceIPArray,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceIPArrayListResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseItems) SetDBInstanceIPArray(v []*DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray) *DescribeDBInstanceIPArrayListResponseItems {
	s.DBInstanceIPArray = v
	return s
}

type DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray struct {
	DBInstanceIPArrayName      *string `json:"DBInstanceIPArrayName,omitempty" xml:"DBInstanceIPArrayName,omitempty" require:"true"`
	DBInstanceIPArrayAttribute *string `json:"DBInstanceIPArrayAttribute,omitempty" xml:"DBInstanceIPArrayAttribute,omitempty" require:"true"`
	SecurityIPType             *string `json:"SecurityIPType,omitempty" xml:"SecurityIPType,omitempty" require:"true"`
	SecurityIPList             *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty" require:"true"`
}

func (s DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray) SetDBInstanceIPArrayName(v string) *DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray {
	s.DBInstanceIPArrayName = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray) SetDBInstanceIPArrayAttribute(v string) *DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray {
	s.DBInstanceIPArrayAttribute = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray) SetSecurityIPType(v string) *DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray {
	s.SecurityIPType = &v
	return s
}

func (s *DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray) SetSecurityIPList(v string) *DescribeDBInstanceIPArrayListResponseItemsDBInstanceIPArray {
	s.SecurityIPList = &v
	return s
}

type DescribeSQLLogReportListRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeSQLLogReportListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListRequest) SetDBInstanceId(v string) *DescribeSQLLogReportListRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetStartTime(v string) *DescribeSQLLogReportListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetEndTime(v string) *DescribeSQLLogReportListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetPageSize(v int) *DescribeSQLLogReportListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogReportListRequest) SetPageNumber(v int) *DescribeSQLLogReportListRequest {
	s.PageNumber = &v
	return s
}

type DescribeSQLLogReportListResponse struct {
	RequestId        *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int                                   `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                                   `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeSQLLogReportListResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSQLLogReportListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponse) SetRequestId(v string) *DescribeSQLLogReportListResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogReportListResponse) SetTotalRecordCount(v int) *DescribeSQLLogReportListResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSQLLogReportListResponse) SetPageNumber(v int) *DescribeSQLLogReportListResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogReportListResponse) SetPageRecordCount(v int) *DescribeSQLLogReportListResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogReportListResponse) SetItems(v *DescribeSQLLogReportListResponseItems) *DescribeSQLLogReportListResponse {
	s.Items = v
	return s
}

type DescribeSQLLogReportListResponseItems struct {
	Item []*DescribeSQLLogReportListResponseItemsItem `json:"Item,omitempty" xml:"Item,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLLogReportListResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseItems) SetItem(v []*DescribeSQLLogReportListResponseItemsItem) *DescribeSQLLogReportListResponseItems {
	s.Item = v
	return s
}

type DescribeSQLLogReportListResponseItemsItem struct {
	ReportTime       *string                                                    `json:"ReportTime,omitempty" xml:"ReportTime,omitempty" require:"true"`
	LatencyTopNItems *DescribeSQLLogReportListResponseItemsItemLatencyTopNItems `json:"LatencyTopNItems,omitempty" xml:"LatencyTopNItems,omitempty" require:"true" type:"Struct"`
	QPSTopNItems     *DescribeSQLLogReportListResponseItemsItemQPSTopNItems     `json:"QPSTopNItems,omitempty" xml:"QPSTopNItems,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSQLLogReportListResponseItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseItemsItem) SetReportTime(v string) *DescribeSQLLogReportListResponseItemsItem {
	s.ReportTime = &v
	return s
}

func (s *DescribeSQLLogReportListResponseItemsItem) SetLatencyTopNItems(v *DescribeSQLLogReportListResponseItemsItemLatencyTopNItems) *DescribeSQLLogReportListResponseItemsItem {
	s.LatencyTopNItems = v
	return s
}

func (s *DescribeSQLLogReportListResponseItemsItem) SetQPSTopNItems(v *DescribeSQLLogReportListResponseItemsItemQPSTopNItems) *DescribeSQLLogReportListResponseItemsItem {
	s.QPSTopNItems = v
	return s
}

type DescribeSQLLogReportListResponseItemsItemLatencyTopNItems struct {
	LatencyTopNItem []*DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem `json:"LatencyTopNItem,omitempty" xml:"LatencyTopNItem,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLLogReportListResponseItemsItemLatencyTopNItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseItemsItemLatencyTopNItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseItemsItemLatencyTopNItems) SetLatencyTopNItem(v []*DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem) *DescribeSQLLogReportListResponseItemsItemLatencyTopNItems {
	s.LatencyTopNItem = v
	return s
}

type DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem struct {
	SQLText         *string `json:"SQLText,omitempty" xml:"SQLText,omitempty" require:"true"`
	AvgLatency      *int64  `json:"AvgLatency,omitempty" xml:"AvgLatency,omitempty" require:"true"`
	SQLExecuteTimes *int64  `json:"SQLExecuteTimes,omitempty" xml:"SQLExecuteTimes,omitempty" require:"true"`
}

func (s DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem) SetSQLText(v string) *DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem) SetAvgLatency(v int64) *DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem {
	s.AvgLatency = &v
	return s
}

func (s *DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem) SetSQLExecuteTimes(v int64) *DescribeSQLLogReportListResponseItemsItemLatencyTopNItemsLatencyTopNItem {
	s.SQLExecuteTimes = &v
	return s
}

type DescribeSQLLogReportListResponseItemsItemQPSTopNItems struct {
	QPSTopNItem []*DescribeSQLLogReportListResponseItemsItemQPSTopNItemsQPSTopNItem `json:"QPSTopNItem,omitempty" xml:"QPSTopNItem,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLLogReportListResponseItemsItemQPSTopNItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseItemsItemQPSTopNItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseItemsItemQPSTopNItems) SetQPSTopNItem(v []*DescribeSQLLogReportListResponseItemsItemQPSTopNItemsQPSTopNItem) *DescribeSQLLogReportListResponseItemsItemQPSTopNItems {
	s.QPSTopNItem = v
	return s
}

type DescribeSQLLogReportListResponseItemsItemQPSTopNItemsQPSTopNItem struct {
	SQLText         *string `json:"SQLText,omitempty" xml:"SQLText,omitempty" require:"true"`
	SQLExecuteTimes *int64  `json:"SQLExecuteTimes,omitempty" xml:"SQLExecuteTimes,omitempty" require:"true"`
}

func (s DescribeSQLLogReportListResponseItemsItemQPSTopNItemsQPSTopNItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportListResponseItemsItemQPSTopNItemsQPSTopNItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportListResponseItemsItemQPSTopNItemsQPSTopNItem) SetSQLText(v string) *DescribeSQLLogReportListResponseItemsItemQPSTopNItemsQPSTopNItem {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogReportListResponseItemsItemQPSTopNItemsQPSTopNItem) SetSQLExecuteTimes(v int64) *DescribeSQLLogReportListResponseItemsItemQPSTopNItemsQPSTopNItem {
	s.SQLExecuteTimes = &v
	return s
}

type ResetAccountForPGRequest struct {
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName     *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty" require:"true"`
}

func (s ResetAccountForPGRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountForPGRequest) GoString() string {
	return s.String()
}

func (s *ResetAccountForPGRequest) SetDBInstanceId(v string) *ResetAccountForPGRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResetAccountForPGRequest) SetAccountName(v string) *ResetAccountForPGRequest {
	s.AccountName = &v
	return s
}

func (s *ResetAccountForPGRequest) SetAccountPassword(v string) *ResetAccountForPGRequest {
	s.AccountPassword = &v
	return s
}

type ResetAccountForPGResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ResetAccountForPGResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountForPGResponse) GoString() string {
	return s.String()
}

func (s *ResetAccountForPGResponse) SetRequestId(v string) *ResetAccountForPGResponse {
	s.RequestId = &v
	return s
}

type UpgradeDBInstanceEngineVersionRequest struct {
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	EffectiveTime *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
}

func (s UpgradeDBInstanceEngineVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceEngineVersionRequest) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetClientToken(v string) *UpgradeDBInstanceEngineVersionRequest {
	s.ClientToken = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetDBInstanceId(v string) *UpgradeDBInstanceEngineVersionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetEngineVersion(v string) *UpgradeDBInstanceEngineVersionRequest {
	s.EngineVersion = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionRequest) SetEffectiveTime(v string) *UpgradeDBInstanceEngineVersionRequest {
	s.EffectiveTime = &v
	return s
}

type UpgradeDBInstanceEngineVersionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s UpgradeDBInstanceEngineVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeDBInstanceEngineVersionResponse) GoString() string {
	return s.String()
}

func (s *UpgradeDBInstanceEngineVersionResponse) SetRequestId(v string) *UpgradeDBInstanceEngineVersionResponse {
	s.RequestId = &v
	return s
}

func (s *UpgradeDBInstanceEngineVersionResponse) SetTaskId(v string) *UpgradeDBInstanceEngineVersionResponse {
	s.TaskId = &v
	return s
}

type RevokeAccountPrivilegeRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName  *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	DBName       *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
}

func (s RevokeAccountPrivilegeRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeAccountPrivilegeRequest) GoString() string {
	return s.String()
}

func (s *RevokeAccountPrivilegeRequest) SetDBInstanceId(v string) *RevokeAccountPrivilegeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RevokeAccountPrivilegeRequest) SetAccountName(v string) *RevokeAccountPrivilegeRequest {
	s.AccountName = &v
	return s
}

func (s *RevokeAccountPrivilegeRequest) SetDBName(v string) *RevokeAccountPrivilegeRequest {
	s.DBName = &v
	return s
}

type RevokeAccountPrivilegeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RevokeAccountPrivilegeResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeAccountPrivilegeResponse) GoString() string {
	return s.String()
}

func (s *RevokeAccountPrivilegeResponse) SetRequestId(v string) *RevokeAccountPrivilegeResponse {
	s.RequestId = &v
	return s
}

type RestartDBInstanceRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s RestartDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceRequest) SetClientToken(v string) *RestartDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *RestartDBInstanceRequest) SetDBInstanceId(v string) *RestartDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

type RestartDBInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RestartDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *RestartDBInstanceResponse) SetRequestId(v string) *RestartDBInstanceResponse {
	s.RequestId = &v
	return s
}

type ResetAccountPasswordRequest struct {
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName     *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty" require:"true"`
}

func (s ResetAccountPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountPasswordRequest) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordRequest) SetDBInstanceId(v string) *ResetAccountPasswordRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetAccountName(v string) *ResetAccountPasswordRequest {
	s.AccountName = &v
	return s
}

func (s *ResetAccountPasswordRequest) SetAccountPassword(v string) *ResetAccountPasswordRequest {
	s.AccountPassword = &v
	return s
}

type ResetAccountPasswordResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ResetAccountPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAccountPasswordResponse) GoString() string {
	return s.String()
}

func (s *ResetAccountPasswordResponse) SetRequestId(v string) *ResetAccountPasswordResponse {
	s.RequestId = &v
	return s
}

type RemoveTagsFromResourceRequest struct {
	// description: 用于保证请求的幂等性，防止重复提交请求。由客户端生成该参数值，要保证在不同请求间唯一，最大值不超过64个ASCII字符，且该参数值中不能包含非ASCII字符。;
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// description: 代理模式ID。;
	ProxyId *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	// description: 地域ID，可以通过接口[DescribeRegions](~~26243~~)查看可用的地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 需要解绑的一组标签，包括TagKey和TagValue。格式：{"key1":"value1"}。>TagKey不能为空，TagValue可以为空。;
	Tags *string                             `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Tag  []*RemoveTagsFromResourceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s RemoveTagsFromResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsFromResourceRequest) GoString() string {
	return s.String()
}

func (s *RemoveTagsFromResourceRequest) SetClientToken(v string) *RemoveTagsFromResourceRequest {
	s.ClientToken = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetProxyId(v string) *RemoveTagsFromResourceRequest {
	s.ProxyId = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetRegionId(v string) *RemoveTagsFromResourceRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetDBInstanceId(v string) *RemoveTagsFromResourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetTags(v string) *RemoveTagsFromResourceRequest {
	s.Tags = &v
	return s
}

func (s *RemoveTagsFromResourceRequest) SetTag(v []*RemoveTagsFromResourceRequestTag) *RemoveTagsFromResourceRequest {
	s.Tag = v
	return s
}

type RemoveTagsFromResourceRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s RemoveTagsFromResourceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsFromResourceRequestTag) GoString() string {
	return s.String()
}

func (s *RemoveTagsFromResourceRequestTag) SetKey(v string) *RemoveTagsFromResourceRequestTag {
	s.Key = &v
	return s
}

func (s *RemoveTagsFromResourceRequestTag) SetValue(v string) *RemoveTagsFromResourceRequestTag {
	s.Value = &v
	return s
}

type RemoveTagsFromResourceResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RemoveTagsFromResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsFromResourceResponse) GoString() string {
	return s.String()
}

func (s *RemoveTagsFromResourceResponse) SetRequestId(v string) *RemoveTagsFromResourceResponse {
	s.RequestId = &v
	return s
}

type PurgeDBInstanceLogRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s PurgeDBInstanceLogRequest) String() string {
	return tea.Prettify(s)
}

func (s PurgeDBInstanceLogRequest) GoString() string {
	return s.String()
}

func (s *PurgeDBInstanceLogRequest) SetClientToken(v string) *PurgeDBInstanceLogRequest {
	s.ClientToken = &v
	return s
}

func (s *PurgeDBInstanceLogRequest) SetDBInstanceId(v string) *PurgeDBInstanceLogRequest {
	s.DBInstanceId = &v
	return s
}

type PurgeDBInstanceLogResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s PurgeDBInstanceLogResponse) String() string {
	return tea.Prettify(s)
}

func (s PurgeDBInstanceLogResponse) GoString() string {
	return s.String()
}

func (s *PurgeDBInstanceLogResponse) SetRequestId(v string) *PurgeDBInstanceLogResponse {
	s.RequestId = &v
	return s
}

type ModifySecurityIpsRequest struct {
	DBInstanceId               *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	SecurityIps                *string `json:"SecurityIps,omitempty" xml:"SecurityIps,omitempty" require:"true"`
	DBInstanceIPArrayName      *string `json:"DBInstanceIPArrayName,omitempty" xml:"DBInstanceIPArrayName,omitempty"`
	DBInstanceIPArrayAttribute *string `json:"DBInstanceIPArrayAttribute,omitempty" xml:"DBInstanceIPArrayAttribute,omitempty"`
	SecurityIPType             *string `json:"SecurityIPType,omitempty" xml:"SecurityIPType,omitempty"`
	WhitelistNetworkType       *string `json:"WhitelistNetworkType,omitempty" xml:"WhitelistNetworkType,omitempty"`
	ModifyMode                 *string `json:"ModifyMode,omitempty" xml:"ModifyMode,omitempty"`
}

func (s ModifySecurityIpsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsRequest) SetDBInstanceId(v string) *ModifySecurityIpsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetSecurityIps(v string) *ModifySecurityIpsRequest {
	s.SecurityIps = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetDBInstanceIPArrayName(v string) *ModifySecurityIpsRequest {
	s.DBInstanceIPArrayName = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetDBInstanceIPArrayAttribute(v string) *ModifySecurityIpsRequest {
	s.DBInstanceIPArrayAttribute = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetSecurityIPType(v string) *ModifySecurityIpsRequest {
	s.SecurityIPType = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetWhitelistNetworkType(v string) *ModifySecurityIpsRequest {
	s.WhitelistNetworkType = &v
	return s
}

func (s *ModifySecurityIpsRequest) SetModifyMode(v string) *ModifySecurityIpsRequest {
	s.ModifyMode = &v
	return s
}

type ModifySecurityIpsResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s ModifySecurityIpsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityIpsResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityIpsResponse) SetRequestId(v string) *ModifySecurityIpsResponse {
	s.RequestId = &v
	return s
}

func (s *ModifySecurityIpsResponse) SetTaskId(v string) *ModifySecurityIpsResponse {
	s.TaskId = &v
	return s
}

type ModifyParameterRequest struct {
	ClientToken      *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Parameters       *string `json:"Parameters,omitempty" xml:"Parameters,omitempty"`
	Forcerestart     *bool   `json:"Forcerestart,omitempty" xml:"Forcerestart,omitempty"`
	ParameterGroupId *string `json:"ParameterGroupId,omitempty" xml:"ParameterGroupId,omitempty"`
}

func (s ModifyParameterRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyParameterRequest) GoString() string {
	return s.String()
}

func (s *ModifyParameterRequest) SetClientToken(v string) *ModifyParameterRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyParameterRequest) SetDBInstanceId(v string) *ModifyParameterRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyParameterRequest) SetParameters(v string) *ModifyParameterRequest {
	s.Parameters = &v
	return s
}

func (s *ModifyParameterRequest) SetForcerestart(v bool) *ModifyParameterRequest {
	s.Forcerestart = &v
	return s
}

func (s *ModifyParameterRequest) SetParameterGroupId(v string) *ModifyParameterRequest {
	s.ParameterGroupId = &v
	return s
}

type ModifyParameterResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyParameterResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyParameterResponse) GoString() string {
	return s.String()
}

func (s *ModifyParameterResponse) SetRequestId(v string) *ModifyParameterResponse {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceSpecRequest struct {
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceClass       *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	DBInstanceStorage     *int    `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	EffectiveTime         *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	EngineVersion         *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	Direction             *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	SourceBiz             *string `json:"SourceBiz,omitempty" xml:"SourceBiz,omitempty"`
	DedicatedHostGroupId  *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	ZoneId                *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ModifyDBInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSpecRequest) SetDBInstanceId(v string) *ModifyDBInstanceSpecRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDBInstanceClass(v string) *ModifyDBInstanceSpecRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDBInstanceStorage(v int) *ModifyDBInstanceSpecRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetPayType(v string) *ModifyDBInstanceSpecRequest {
	s.PayType = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetEffectiveTime(v string) *ModifyDBInstanceSpecRequest {
	s.EffectiveTime = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetEngineVersion(v string) *ModifyDBInstanceSpecRequest {
	s.EngineVersion = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDBInstanceStorageType(v string) *ModifyDBInstanceSpecRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDirection(v string) *ModifyDBInstanceSpecRequest {
	s.Direction = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetSourceBiz(v string) *ModifyDBInstanceSpecRequest {
	s.SourceBiz = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetDedicatedHostGroupId(v string) *ModifyDBInstanceSpecRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *ModifyDBInstanceSpecRequest) SetZoneId(v string) *ModifyDBInstanceSpecRequest {
	s.ZoneId = &v
	return s
}

type ModifyDBInstanceSpecResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceSpecResponse) SetRequestId(v string) *ModifyDBInstanceSpecResponse {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceMaintainTimeRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	MaintainTime *string `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty" require:"true"`
}

func (s ModifyDBInstanceMaintainTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetClientToken(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetDBInstanceId(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceMaintainTimeRequest) SetMaintainTime(v string) *ModifyDBInstanceMaintainTimeRequest {
	s.MaintainTime = &v
	return s
}

type ModifyDBInstanceMaintainTimeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceMaintainTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceMaintainTimeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceMaintainTimeResponse) SetRequestId(v string) *ModifyDBInstanceMaintainTimeResponse {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceDescriptionRequest struct {
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty" require:"true"`
}

func (s ModifyDBInstanceDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionRequest) SetDBInstanceId(v string) *ModifyDBInstanceDescriptionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceDescriptionRequest) SetDBInstanceDescription(v string) *ModifyDBInstanceDescriptionRequest {
	s.DBInstanceDescription = &v
	return s
}

type ModifyDBInstanceDescriptionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceDescriptionResponse) SetRequestId(v string) *ModifyDBInstanceDescriptionResponse {
	s.RequestId = &v
	return s
}

type ModifyDBDescriptionRequest struct {
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBName        *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	DBDescription *string `json:"DBDescription,omitempty" xml:"DBDescription,omitempty" require:"true"`
}

func (s ModifyDBDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBDescriptionRequest) SetDBInstanceId(v string) *ModifyDBDescriptionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBDescriptionRequest) SetDBName(v string) *ModifyDBDescriptionRequest {
	s.DBName = &v
	return s
}

func (s *ModifyDBDescriptionRequest) SetDBDescription(v string) *ModifyDBDescriptionRequest {
	s.DBDescription = &v
	return s
}

type ModifyDBDescriptionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBDescriptionResponse) SetRequestId(v string) *ModifyDBDescriptionResponse {
	s.RequestId = &v
	return s
}

type ModifyBackupPolicyRequest struct {
	DBInstanceId                  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupPolicyMode              *string `json:"BackupPolicyMode,omitempty" xml:"BackupPolicyMode,omitempty"`
	PreferredBackupTime           *string `json:"PreferredBackupTime,omitempty" xml:"PreferredBackupTime,omitempty"`
	PreferredBackupPeriod         *string `json:"PreferredBackupPeriod,omitempty" xml:"PreferredBackupPeriod,omitempty"`
	BackupRetentionPeriod         *string `json:"BackupRetentionPeriod,omitempty" xml:"BackupRetentionPeriod,omitempty"`
	BackupLog                     *string `json:"BackupLog,omitempty" xml:"BackupLog,omitempty"`
	LogBackupRetentionPeriod      *string `json:"LogBackupRetentionPeriod,omitempty" xml:"LogBackupRetentionPeriod,omitempty"`
	EnableBackupLog               *string `json:"EnableBackupLog,omitempty" xml:"EnableBackupLog,omitempty"`
	LocalLogRetentionHours        *string `json:"LocalLogRetentionHours,omitempty" xml:"LocalLogRetentionHours,omitempty"`
	LocalLogRetentionSpace        *string `json:"LocalLogRetentionSpace,omitempty" xml:"LocalLogRetentionSpace,omitempty"`
	HighSpaceUsageProtection      *string `json:"HighSpaceUsageProtection,omitempty" xml:"HighSpaceUsageProtection,omitempty"`
	LogBackupFrequency            *string `json:"LogBackupFrequency,omitempty" xml:"LogBackupFrequency,omitempty"`
	CompressType                  *string `json:"CompressType,omitempty" xml:"CompressType,omitempty"`
	ArchiveBackupRetentionPeriod  *string `json:"ArchiveBackupRetentionPeriod,omitempty" xml:"ArchiveBackupRetentionPeriod,omitempty"`
	ArchiveBackupKeepPolicy       *string `json:"ArchiveBackupKeepPolicy,omitempty" xml:"ArchiveBackupKeepPolicy,omitempty"`
	ArchiveBackupKeepCount        *string `json:"ArchiveBackupKeepCount,omitempty" xml:"ArchiveBackupKeepCount,omitempty"`
	ReleasedKeepPolicy            *string `json:"ReleasedKeepPolicy,omitempty" xml:"ReleasedKeepPolicy,omitempty"`
	LogBackupLocalRetentionNumber *int    `json:"LogBackupLocalRetentionNumber,omitempty" xml:"LogBackupLocalRetentionNumber,omitempty"`
	Category                      *string `json:"Category,omitempty" xml:"Category,omitempty"`
	BackupInterval                *string `json:"BackupInterval,omitempty" xml:"BackupInterval,omitempty"`
}

func (s ModifyBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyRequest) SetDBInstanceId(v string) *ModifyBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetBackupPolicyMode(v string) *ModifyBackupPolicyRequest {
	s.BackupPolicyMode = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPreferredBackupTime(v string) *ModifyBackupPolicyRequest {
	s.PreferredBackupTime = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetPreferredBackupPeriod(v string) *ModifyBackupPolicyRequest {
	s.PreferredBackupPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetBackupRetentionPeriod(v string) *ModifyBackupPolicyRequest {
	s.BackupRetentionPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetBackupLog(v string) *ModifyBackupPolicyRequest {
	s.BackupLog = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetLogBackupRetentionPeriod(v string) *ModifyBackupPolicyRequest {
	s.LogBackupRetentionPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetEnableBackupLog(v string) *ModifyBackupPolicyRequest {
	s.EnableBackupLog = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetLocalLogRetentionHours(v string) *ModifyBackupPolicyRequest {
	s.LocalLogRetentionHours = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetLocalLogRetentionSpace(v string) *ModifyBackupPolicyRequest {
	s.LocalLogRetentionSpace = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetHighSpaceUsageProtection(v string) *ModifyBackupPolicyRequest {
	s.HighSpaceUsageProtection = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetLogBackupFrequency(v string) *ModifyBackupPolicyRequest {
	s.LogBackupFrequency = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetCompressType(v string) *ModifyBackupPolicyRequest {
	s.CompressType = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetArchiveBackupRetentionPeriod(v string) *ModifyBackupPolicyRequest {
	s.ArchiveBackupRetentionPeriod = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetArchiveBackupKeepPolicy(v string) *ModifyBackupPolicyRequest {
	s.ArchiveBackupKeepPolicy = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetArchiveBackupKeepCount(v string) *ModifyBackupPolicyRequest {
	s.ArchiveBackupKeepCount = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetReleasedKeepPolicy(v string) *ModifyBackupPolicyRequest {
	s.ReleasedKeepPolicy = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetLogBackupLocalRetentionNumber(v int) *ModifyBackupPolicyRequest {
	s.LogBackupLocalRetentionNumber = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetCategory(v string) *ModifyBackupPolicyRequest {
	s.Category = &v
	return s
}

func (s *ModifyBackupPolicyRequest) SetBackupInterval(v string) *ModifyBackupPolicyRequest {
	s.BackupInterval = &v
	return s
}

type ModifyBackupPolicyResponse struct {
	RequestId                     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceID                  *string `json:"DBInstanceID,omitempty" xml:"DBInstanceID,omitempty" require:"true"`
	EnableBackupLog               *string `json:"EnableBackupLog,omitempty" xml:"EnableBackupLog,omitempty" require:"true"`
	LocalLogRetentionHours        *int    `json:"LocalLogRetentionHours,omitempty" xml:"LocalLogRetentionHours,omitempty" require:"true"`
	LocalLogRetentionSpace        *string `json:"LocalLogRetentionSpace,omitempty" xml:"LocalLogRetentionSpace,omitempty" require:"true"`
	HighSpaceUsageProtection      *string `json:"HighSpaceUsageProtection,omitempty" xml:"HighSpaceUsageProtection,omitempty" require:"true"`
	CompressType                  *string `json:"CompressType,omitempty" xml:"CompressType,omitempty" require:"true"`
	LogBackupLocalRetentionNumber *int    `json:"LogBackupLocalRetentionNumber,omitempty" xml:"LogBackupLocalRetentionNumber,omitempty" require:"true"`
}

func (s ModifyBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyBackupPolicyResponse) SetRequestId(v string) *ModifyBackupPolicyResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyBackupPolicyResponse) SetDBInstanceID(v string) *ModifyBackupPolicyResponse {
	s.DBInstanceID = &v
	return s
}

func (s *ModifyBackupPolicyResponse) SetEnableBackupLog(v string) *ModifyBackupPolicyResponse {
	s.EnableBackupLog = &v
	return s
}

func (s *ModifyBackupPolicyResponse) SetLocalLogRetentionHours(v int) *ModifyBackupPolicyResponse {
	s.LocalLogRetentionHours = &v
	return s
}

func (s *ModifyBackupPolicyResponse) SetLocalLogRetentionSpace(v string) *ModifyBackupPolicyResponse {
	s.LocalLogRetentionSpace = &v
	return s
}

func (s *ModifyBackupPolicyResponse) SetHighSpaceUsageProtection(v string) *ModifyBackupPolicyResponse {
	s.HighSpaceUsageProtection = &v
	return s
}

func (s *ModifyBackupPolicyResponse) SetCompressType(v string) *ModifyBackupPolicyResponse {
	s.CompressType = &v
	return s
}

func (s *ModifyBackupPolicyResponse) SetLogBackupLocalRetentionNumber(v int) *ModifyBackupPolicyResponse {
	s.LogBackupLocalRetentionNumber = &v
	return s
}

type ModifyAccountDescriptionRequest struct {
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName        *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty" require:"true"`
}

func (s ModifyAccountDescriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountDescriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionRequest) SetDBInstanceId(v string) *ModifyAccountDescriptionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetAccountName(v string) *ModifyAccountDescriptionRequest {
	s.AccountName = &v
	return s
}

func (s *ModifyAccountDescriptionRequest) SetAccountDescription(v string) *ModifyAccountDescriptionRequest {
	s.AccountDescription = &v
	return s
}

type ModifyAccountDescriptionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyAccountDescriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAccountDescriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifyAccountDescriptionResponse) SetRequestId(v string) *ModifyAccountDescriptionResponse {
	s.RequestId = &v
	return s
}

type MigrateToOtherZoneRequest struct {
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	VPCId         *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	EffectiveTime *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	VSwitchId     *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Category      *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ZoneIdSlave1  *string `json:"ZoneIdSlave1,omitempty" xml:"ZoneIdSlave1,omitempty"`
	ZoneIdSlave2  *string `json:"ZoneIdSlave2,omitempty" xml:"ZoneIdSlave2,omitempty"`
}

func (s MigrateToOtherZoneRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateToOtherZoneRequest) GoString() string {
	return s.String()
}

func (s *MigrateToOtherZoneRequest) SetDBInstanceId(v string) *MigrateToOtherZoneRequest {
	s.DBInstanceId = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetVPCId(v string) *MigrateToOtherZoneRequest {
	s.VPCId = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetZoneId(v string) *MigrateToOtherZoneRequest {
	s.ZoneId = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetEffectiveTime(v string) *MigrateToOtherZoneRequest {
	s.EffectiveTime = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetVSwitchId(v string) *MigrateToOtherZoneRequest {
	s.VSwitchId = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetCategory(v string) *MigrateToOtherZoneRequest {
	s.Category = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetZoneIdSlave1(v string) *MigrateToOtherZoneRequest {
	s.ZoneIdSlave1 = &v
	return s
}

func (s *MigrateToOtherZoneRequest) SetZoneIdSlave2(v string) *MigrateToOtherZoneRequest {
	s.ZoneIdSlave2 = &v
	return s
}

type MigrateToOtherZoneResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s MigrateToOtherZoneResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateToOtherZoneResponse) GoString() string {
	return s.String()
}

func (s *MigrateToOtherZoneResponse) SetRequestId(v string) *MigrateToOtherZoneResponse {
	s.RequestId = &v
	return s
}

type ImportDatabaseBetweenInstancesRequest struct {
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	SourceDBInstanceId *string `json:"SourceDBInstanceId,omitempty" xml:"SourceDBInstanceId,omitempty" require:"true"`
	DBInfo             *string `json:"DBInfo,omitempty" xml:"DBInfo,omitempty" require:"true"`
}

func (s ImportDatabaseBetweenInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportDatabaseBetweenInstancesRequest) GoString() string {
	return s.String()
}

func (s *ImportDatabaseBetweenInstancesRequest) SetDBInstanceId(v string) *ImportDatabaseBetweenInstancesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ImportDatabaseBetweenInstancesRequest) SetSourceDBInstanceId(v string) *ImportDatabaseBetweenInstancesRequest {
	s.SourceDBInstanceId = &v
	return s
}

func (s *ImportDatabaseBetweenInstancesRequest) SetDBInfo(v string) *ImportDatabaseBetweenInstancesRequest {
	s.DBInfo = &v
	return s
}

type ImportDatabaseBetweenInstancesResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ImportId  *string `json:"ImportId,omitempty" xml:"ImportId,omitempty" require:"true"`
}

func (s ImportDatabaseBetweenInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportDatabaseBetweenInstancesResponse) GoString() string {
	return s.String()
}

func (s *ImportDatabaseBetweenInstancesResponse) SetRequestId(v string) *ImportDatabaseBetweenInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *ImportDatabaseBetweenInstancesResponse) SetImportId(v string) *ImportDatabaseBetweenInstancesResponse {
	s.ImportId = &v
	return s
}

type GrantAccountPrivilegeRequest struct {
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName      *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	DBName           *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	AccountPrivilege *string `json:"AccountPrivilege,omitempty" xml:"AccountPrivilege,omitempty" require:"true"`
}

func (s GrantAccountPrivilegeRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantAccountPrivilegeRequest) GoString() string {
	return s.String()
}

func (s *GrantAccountPrivilegeRequest) SetDBInstanceId(v string) *GrantAccountPrivilegeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *GrantAccountPrivilegeRequest) SetAccountName(v string) *GrantAccountPrivilegeRequest {
	s.AccountName = &v
	return s
}

func (s *GrantAccountPrivilegeRequest) SetDBName(v string) *GrantAccountPrivilegeRequest {
	s.DBName = &v
	return s
}

func (s *GrantAccountPrivilegeRequest) SetAccountPrivilege(v string) *GrantAccountPrivilegeRequest {
	s.AccountPrivilege = &v
	return s
}

type GrantAccountPrivilegeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s GrantAccountPrivilegeResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantAccountPrivilegeResponse) GoString() string {
	return s.String()
}

func (s *GrantAccountPrivilegeResponse) SetRequestId(v string) *GrantAccountPrivilegeResponse {
	s.RequestId = &v
	return s
}

type DescribeTasksRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskAction   *string `json:"TaskAction,omitempty" xml:"TaskAction,omitempty"`
}

func (s DescribeTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeTasksRequest) SetDBInstanceId(v string) *DescribeTasksRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeTasksRequest) SetStartTime(v string) *DescribeTasksRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeTasksRequest) SetEndTime(v string) *DescribeTasksRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTasksRequest) SetPageSize(v int) *DescribeTasksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTasksRequest) SetPageNumber(v int) *DescribeTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTasksRequest) SetStatus(v string) *DescribeTasksRequest {
	s.Status = &v
	return s
}

func (s *DescribeTasksRequest) SetTaskAction(v string) *DescribeTasksRequest {
	s.TaskAction = &v
	return s
}

type DescribeTasksResponse struct {
	RequestId        *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int                        `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                        `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeTasksResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponse) SetRequestId(v string) *DescribeTasksResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeTasksResponse) SetTotalRecordCount(v int) *DescribeTasksResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeTasksResponse) SetPageNumber(v int) *DescribeTasksResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeTasksResponse) SetPageRecordCount(v int) *DescribeTasksResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeTasksResponse) SetItems(v *DescribeTasksResponseItems) *DescribeTasksResponse {
	s.Items = v
	return s
}

type DescribeTasksResponseItems struct {
	TaskProgressInfo []*DescribeTasksResponseItemsTaskProgressInfo `json:"TaskProgressInfo,omitempty" xml:"TaskProgressInfo,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeTasksResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseItems) SetTaskProgressInfo(v []*DescribeTasksResponseItemsTaskProgressInfo) *DescribeTasksResponseItems {
	s.TaskProgressInfo = v
	return s
}

type DescribeTasksResponseItemsTaskProgressInfo struct {
	DBName             *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	BeginTime          *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty" require:"true"`
	ProgressInfo       *string `json:"ProgressInfo,omitempty" xml:"ProgressInfo,omitempty" require:"true"`
	FinishTime         *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty" require:"true"`
	TaskAction         *string `json:"TaskAction,omitempty" xml:"TaskAction,omitempty" require:"true"`
	TaskId             *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	Progress           *string `json:"Progress,omitempty" xml:"Progress,omitempty" require:"true"`
	ExpectedFinishTime *string `json:"ExpectedFinishTime,omitempty" xml:"ExpectedFinishTime,omitempty" require:"true"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	TaskErrorCode      *string `json:"TaskErrorCode,omitempty" xml:"TaskErrorCode,omitempty" require:"true"`
	TaskErrorMessage   *string `json:"TaskErrorMessage,omitempty" xml:"TaskErrorMessage,omitempty" require:"true"`
	StepsInfo          *string `json:"StepsInfo,omitempty" xml:"StepsInfo,omitempty" require:"true"`
	Remain             *int    `json:"Remain,omitempty" xml:"Remain,omitempty" require:"true"`
	StepProgressInfo   *string `json:"StepProgressInfo,omitempty" xml:"StepProgressInfo,omitempty" require:"true"`
	CurrentStepName    *string `json:"CurrentStepName,omitempty" xml:"CurrentStepName,omitempty" require:"true"`
}

func (s DescribeTasksResponseItemsTaskProgressInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseItemsTaskProgressInfo) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetDBName(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.DBName = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetBeginTime(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.BeginTime = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetProgressInfo(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.ProgressInfo = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetFinishTime(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.FinishTime = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetTaskAction(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.TaskAction = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetTaskId(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.TaskId = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetProgress(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.Progress = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetExpectedFinishTime(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.ExpectedFinishTime = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetStatus(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.Status = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetTaskErrorCode(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.TaskErrorCode = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetTaskErrorMessage(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.TaskErrorMessage = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetStepsInfo(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.StepsInfo = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetRemain(v int) *DescribeTasksResponseItemsTaskProgressInfo {
	s.Remain = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetStepProgressInfo(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.StepProgressInfo = &v
	return s
}

func (s *DescribeTasksResponseItemsTaskProgressInfo) SetCurrentStepName(v string) *DescribeTasksResponseItemsTaskProgressInfo {
	s.CurrentStepName = &v
	return s
}

type DescribeSQLLogReportsRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeSQLLogReportsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsRequest) SetDBInstanceId(v string) *DescribeSQLLogReportsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetStartTime(v string) *DescribeSQLLogReportsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetEndTime(v string) *DescribeSQLLogReportsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetPageSize(v int) *DescribeSQLLogReportsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogReportsRequest) SetPageNumber(v int) *DescribeSQLLogReportsRequest {
	s.PageNumber = &v
	return s
}

type DescribeSQLLogReportsResponse struct {
	RequestId        *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int                                `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                                `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeSQLLogReportsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSQLLogReportsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponse) SetRequestId(v string) *DescribeSQLLogReportsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogReportsResponse) SetTotalRecordCount(v int) *DescribeSQLLogReportsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSQLLogReportsResponse) SetPageNumber(v int) *DescribeSQLLogReportsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogReportsResponse) SetPageRecordCount(v int) *DescribeSQLLogReportsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogReportsResponse) SetItems(v *DescribeSQLLogReportsResponseItems) *DescribeSQLLogReportsResponse {
	s.Items = v
	return s
}

type DescribeSQLLogReportsResponseItems struct {
	Item []*DescribeSQLLogReportsResponseItemsItem `json:"Item,omitempty" xml:"Item,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLLogReportsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseItems) SetItem(v []*DescribeSQLLogReportsResponseItemsItem) *DescribeSQLLogReportsResponseItems {
	s.Item = v
	return s
}

type DescribeSQLLogReportsResponseItemsItem struct {
	ReportTime       *string                                                 `json:"ReportTime,omitempty" xml:"ReportTime,omitempty" require:"true"`
	LatencyTopNItems *DescribeSQLLogReportsResponseItemsItemLatencyTopNItems `json:"LatencyTopNItems,omitempty" xml:"LatencyTopNItems,omitempty" require:"true" type:"Struct"`
	QPSTopNItems     *DescribeSQLLogReportsResponseItemsItemQPSTopNItems     `json:"QPSTopNItems,omitempty" xml:"QPSTopNItems,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSQLLogReportsResponseItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseItemsItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseItemsItem) SetReportTime(v string) *DescribeSQLLogReportsResponseItemsItem {
	s.ReportTime = &v
	return s
}

func (s *DescribeSQLLogReportsResponseItemsItem) SetLatencyTopNItems(v *DescribeSQLLogReportsResponseItemsItemLatencyTopNItems) *DescribeSQLLogReportsResponseItemsItem {
	s.LatencyTopNItems = v
	return s
}

func (s *DescribeSQLLogReportsResponseItemsItem) SetQPSTopNItems(v *DescribeSQLLogReportsResponseItemsItemQPSTopNItems) *DescribeSQLLogReportsResponseItemsItem {
	s.QPSTopNItems = v
	return s
}

type DescribeSQLLogReportsResponseItemsItemLatencyTopNItems struct {
	LatencyTopNItem []*DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem `json:"LatencyTopNItem,omitempty" xml:"LatencyTopNItem,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLLogReportsResponseItemsItemLatencyTopNItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseItemsItemLatencyTopNItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseItemsItemLatencyTopNItems) SetLatencyTopNItem(v []*DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) *DescribeSQLLogReportsResponseItemsItemLatencyTopNItems {
	s.LatencyTopNItem = v
	return s
}

type DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem struct {
	SQLText         *string `json:"SQLText,omitempty" xml:"SQLText,omitempty" require:"true"`
	AvgLatency      *int64  `json:"AvgLatency,omitempty" xml:"AvgLatency,omitempty" require:"true"`
	SQLExecuteTimes *int64  `json:"SQLExecuteTimes,omitempty" xml:"SQLExecuteTimes,omitempty" require:"true"`
}

func (s DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) SetSQLText(v string) *DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) SetAvgLatency(v int64) *DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem {
	s.AvgLatency = &v
	return s
}

func (s *DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem) SetSQLExecuteTimes(v int64) *DescribeSQLLogReportsResponseItemsItemLatencyTopNItemsLatencyTopNItem {
	s.SQLExecuteTimes = &v
	return s
}

type DescribeSQLLogReportsResponseItemsItemQPSTopNItems struct {
	QPSTopNItem []*DescribeSQLLogReportsResponseItemsItemQPSTopNItemsQPSTopNItem `json:"QPSTopNItem,omitempty" xml:"QPSTopNItem,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLLogReportsResponseItemsItemQPSTopNItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseItemsItemQPSTopNItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseItemsItemQPSTopNItems) SetQPSTopNItem(v []*DescribeSQLLogReportsResponseItemsItemQPSTopNItemsQPSTopNItem) *DescribeSQLLogReportsResponseItemsItemQPSTopNItems {
	s.QPSTopNItem = v
	return s
}

type DescribeSQLLogReportsResponseItemsItemQPSTopNItemsQPSTopNItem struct {
	SQLText         *string `json:"SQLText,omitempty" xml:"SQLText,omitempty" require:"true"`
	SQLExecuteTimes *int64  `json:"SQLExecuteTimes,omitempty" xml:"SQLExecuteTimes,omitempty" require:"true"`
}

func (s DescribeSQLLogReportsResponseItemsItemQPSTopNItemsQPSTopNItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogReportsResponseItemsItemQPSTopNItemsQPSTopNItem) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogReportsResponseItemsItemQPSTopNItemsQPSTopNItem) SetSQLText(v string) *DescribeSQLLogReportsResponseItemsItemQPSTopNItemsQPSTopNItem {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogReportsResponseItemsItemQPSTopNItemsQPSTopNItem) SetSQLExecuteTimes(v int64) *DescribeSQLLogReportsResponseItemsItemQPSTopNItemsQPSTopNItem {
	s.SQLExecuteTimes = &v
	return s
}

type DescribeSQLLogRecordsRequest struct {
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	SQLId         *int64  `json:"SQLId,omitempty" xml:"SQLId,omitempty"`
	QueryKeywords *string `json:"QueryKeywords,omitempty" xml:"QueryKeywords,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	Database      *string `json:"Database,omitempty" xml:"Database,omitempty"`
	User          *string `json:"User,omitempty" xml:"User,omitempty"`
	Form          *string `json:"Form,omitempty" xml:"Form,omitempty"`
	EndTime       *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize      *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber    *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeSQLLogRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogRecordsRequest) SetClientToken(v string) *DescribeSQLLogRecordsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetDBInstanceId(v string) *DescribeSQLLogRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetSQLId(v int64) *DescribeSQLLogRecordsRequest {
	s.SQLId = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetQueryKeywords(v string) *DescribeSQLLogRecordsRequest {
	s.QueryKeywords = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetStartTime(v string) *DescribeSQLLogRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetDatabase(v string) *DescribeSQLLogRecordsRequest {
	s.Database = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetUser(v string) *DescribeSQLLogRecordsRequest {
	s.User = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetForm(v string) *DescribeSQLLogRecordsRequest {
	s.Form = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetEndTime(v string) *DescribeSQLLogRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetPageSize(v int) *DescribeSQLLogRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSQLLogRecordsRequest) SetPageNumber(v int) *DescribeSQLLogRecordsRequest {
	s.PageNumber = &v
	return s
}

type DescribeSQLLogRecordsResponse struct {
	RequestId        *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int64                              `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                                `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeSQLLogRecordsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSQLLogRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogRecordsResponse) SetRequestId(v string) *DescribeSQLLogRecordsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSQLLogRecordsResponse) SetTotalRecordCount(v int64) *DescribeSQLLogRecordsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSQLLogRecordsResponse) SetPageNumber(v int) *DescribeSQLLogRecordsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSQLLogRecordsResponse) SetPageRecordCount(v int) *DescribeSQLLogRecordsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSQLLogRecordsResponse) SetItems(v *DescribeSQLLogRecordsResponseItems) *DescribeSQLLogRecordsResponse {
	s.Items = v
	return s
}

type DescribeSQLLogRecordsResponseItems struct {
	SQLRecord []*DescribeSQLLogRecordsResponseItemsSQLRecord `json:"SQLRecord,omitempty" xml:"SQLRecord,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSQLLogRecordsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogRecordsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogRecordsResponseItems) SetSQLRecord(v []*DescribeSQLLogRecordsResponseItemsSQLRecord) *DescribeSQLLogRecordsResponseItems {
	s.SQLRecord = v
	return s
}

type DescribeSQLLogRecordsResponseItemsSQLRecord struct {
	DBName              *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	AccountName         *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	HostAddress         *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty" require:"true"`
	SQLText             *string `json:"SQLText,omitempty" xml:"SQLText,omitempty" require:"true"`
	TotalExecutionTimes *int64  `json:"TotalExecutionTimes,omitempty" xml:"TotalExecutionTimes,omitempty" require:"true"`
	ReturnRowCounts     *int64  `json:"ReturnRowCounts,omitempty" xml:"ReturnRowCounts,omitempty" require:"true"`
	ExecuteTime         *string `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty" require:"true"`
	ThreadID            *string `json:"ThreadID,omitempty" xml:"ThreadID,omitempty" require:"true"`
}

func (s DescribeSQLLogRecordsResponseItemsSQLRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeSQLLogRecordsResponseItemsSQLRecord) GoString() string {
	return s.String()
}

func (s *DescribeSQLLogRecordsResponseItemsSQLRecord) SetDBName(v string) *DescribeSQLLogRecordsResponseItemsSQLRecord {
	s.DBName = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseItemsSQLRecord) SetAccountName(v string) *DescribeSQLLogRecordsResponseItemsSQLRecord {
	s.AccountName = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseItemsSQLRecord) SetHostAddress(v string) *DescribeSQLLogRecordsResponseItemsSQLRecord {
	s.HostAddress = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseItemsSQLRecord) SetSQLText(v string) *DescribeSQLLogRecordsResponseItemsSQLRecord {
	s.SQLText = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseItemsSQLRecord) SetTotalExecutionTimes(v int64) *DescribeSQLLogRecordsResponseItemsSQLRecord {
	s.TotalExecutionTimes = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseItemsSQLRecord) SetReturnRowCounts(v int64) *DescribeSQLLogRecordsResponseItemsSQLRecord {
	s.ReturnRowCounts = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseItemsSQLRecord) SetExecuteTime(v string) *DescribeSQLLogRecordsResponseItemsSQLRecord {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeSQLLogRecordsResponseItemsSQLRecord) SetThreadID(v string) *DescribeSQLLogRecordsResponseItemsSQLRecord {
	s.ThreadID = &v
	return s
}

type DescribeSlowLogsRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	DBName       *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	SortKey      *string `json:"SortKey,omitempty" xml:"SortKey,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeSlowLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogsRequest) SetDBInstanceId(v string) *DescribeSlowLogsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetStartTime(v string) *DescribeSlowLogsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetEndTime(v string) *DescribeSlowLogsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetDBName(v string) *DescribeSlowLogsRequest {
	s.DBName = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetSortKey(v string) *DescribeSlowLogsRequest {
	s.SortKey = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetPageSize(v int) *DescribeSlowLogsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSlowLogsRequest) SetPageNumber(v int) *DescribeSlowLogsRequest {
	s.PageNumber = &v
	return s
}

type DescribeSlowLogsResponse struct {
	RequestId        *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId     *string                        `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Engine           *string                        `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	StartTime        *string                        `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime          *string                        `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	TotalRecordCount *int                           `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                           `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeSlowLogsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSlowLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogsResponse) SetRequestId(v string) *DescribeSlowLogsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSlowLogsResponse) SetDBInstanceId(v string) *DescribeSlowLogsResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSlowLogsResponse) SetEngine(v string) *DescribeSlowLogsResponse {
	s.Engine = &v
	return s
}

func (s *DescribeSlowLogsResponse) SetStartTime(v string) *DescribeSlowLogsResponse {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowLogsResponse) SetEndTime(v string) *DescribeSlowLogsResponse {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowLogsResponse) SetTotalRecordCount(v int) *DescribeSlowLogsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSlowLogsResponse) SetPageNumber(v int) *DescribeSlowLogsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSlowLogsResponse) SetPageRecordCount(v int) *DescribeSlowLogsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSlowLogsResponse) SetItems(v *DescribeSlowLogsResponseItems) *DescribeSlowLogsResponse {
	s.Items = v
	return s
}

type DescribeSlowLogsResponseItems struct {
	SQLSlowLog []*DescribeSlowLogsResponseItemsSQLSlowLog `json:"SQLSlowLog,omitempty" xml:"SQLSlowLog,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSlowLogsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogsResponseItems) SetSQLSlowLog(v []*DescribeSlowLogsResponseItemsSQLSlowLog) *DescribeSlowLogsResponseItems {
	s.SQLSlowLog = v
	return s
}

type DescribeSlowLogsResponseItemsSQLSlowLog struct {
	SlowLogId                     *int64  `json:"SlowLogId,omitempty" xml:"SlowLogId,omitempty" require:"true"`
	SQLHASH                       *string `json:"SQLHASH,omitempty" xml:"SQLHASH,omitempty" require:"true"`
	SQLIdStr                      *string `json:"SQLIdStr,omitempty" xml:"SQLIdStr,omitempty" require:"true"`
	DBName                        *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	SQLText                       *string `json:"SQLText,omitempty" xml:"SQLText,omitempty" require:"true"`
	MySQLTotalExecutionCounts     *int64  `json:"MySQLTotalExecutionCounts,omitempty" xml:"MySQLTotalExecutionCounts,omitempty" require:"true"`
	MySQLTotalExecutionTimes      *int64  `json:"MySQLTotalExecutionTimes,omitempty" xml:"MySQLTotalExecutionTimes,omitempty" require:"true"`
	TotalLockTimes                *int64  `json:"TotalLockTimes,omitempty" xml:"TotalLockTimes,omitempty" require:"true"`
	MaxLockTime                   *int64  `json:"MaxLockTime,omitempty" xml:"MaxLockTime,omitempty" require:"true"`
	ParseTotalRowCounts           *int64  `json:"ParseTotalRowCounts,omitempty" xml:"ParseTotalRowCounts,omitempty" require:"true"`
	ParseMaxRowCount              *int64  `json:"ParseMaxRowCount,omitempty" xml:"ParseMaxRowCount,omitempty" require:"true"`
	ReturnTotalRowCounts          *int64  `json:"ReturnTotalRowCounts,omitempty" xml:"ReturnTotalRowCounts,omitempty" require:"true"`
	ReturnMaxRowCount             *int64  `json:"ReturnMaxRowCount,omitempty" xml:"ReturnMaxRowCount,omitempty" require:"true"`
	CreateTime                    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	SQLServerTotalExecutionCounts *int64  `json:"SQLServerTotalExecutionCounts,omitempty" xml:"SQLServerTotalExecutionCounts,omitempty" require:"true"`
	SQLServerTotalExecutionTimes  *int64  `json:"SQLServerTotalExecutionTimes,omitempty" xml:"SQLServerTotalExecutionTimes,omitempty" require:"true"`
	TotalLogicalReadCounts        *int64  `json:"TotalLogicalReadCounts,omitempty" xml:"TotalLogicalReadCounts,omitempty" require:"true"`
	TotalPhysicalReadCounts       *int64  `json:"TotalPhysicalReadCounts,omitempty" xml:"TotalPhysicalReadCounts,omitempty" require:"true"`
	ReportTime                    *string `json:"ReportTime,omitempty" xml:"ReportTime,omitempty" require:"true"`
	MaxExecutionTime              *int64  `json:"MaxExecutionTime,omitempty" xml:"MaxExecutionTime,omitempty" require:"true"`
	AvgExecutionTime              *int64  `json:"AvgExecutionTime,omitempty" xml:"AvgExecutionTime,omitempty" require:"true"`
	AvgPhysicalReadCounts         *int64  `json:"AvgPhysicalReadCounts,omitempty" xml:"AvgPhysicalReadCounts,omitempty" require:"true"`
	MaxPhysicalReadCounts         *int64  `json:"MaxPhysicalReadCounts,omitempty" xml:"MaxPhysicalReadCounts,omitempty" require:"true"`
	MinPhysicalReadCounts         *int64  `json:"MinPhysicalReadCounts,omitempty" xml:"MinPhysicalReadCounts,omitempty" require:"true"`
	AvgLogicalReadCounts          *int64  `json:"AvgLogicalReadCounts,omitempty" xml:"AvgLogicalReadCounts,omitempty" require:"true"`
	MaxLogicalReadCounts          *int64  `json:"MaxLogicalReadCounts,omitempty" xml:"MaxLogicalReadCounts,omitempty" require:"true"`
	MinLogicalReadCounts          *int64  `json:"MinLogicalReadCounts,omitempty" xml:"MinLogicalReadCounts,omitempty" require:"true"`
	TotalIOWriteCounts            *int64  `json:"TotalIOWriteCounts,omitempty" xml:"TotalIOWriteCounts,omitempty" require:"true"`
	AvgIOWriteCounts              *int64  `json:"AvgIOWriteCounts,omitempty" xml:"AvgIOWriteCounts,omitempty" require:"true"`
	MaxIOWriteCounts              *int64  `json:"MaxIOWriteCounts,omitempty" xml:"MaxIOWriteCounts,omitempty" require:"true"`
	MinIOWriteCounts              *int64  `json:"MinIOWriteCounts,omitempty" xml:"MinIOWriteCounts,omitempty" require:"true"`
	TotalRowsAffectedCounts       *int64  `json:"TotalRowsAffectedCounts,omitempty" xml:"TotalRowsAffectedCounts,omitempty" require:"true"`
	AvgRowsAffectedCounts         *int64  `json:"AvgRowsAffectedCounts,omitempty" xml:"AvgRowsAffectedCounts,omitempty" require:"true"`
	MaxRowsAffectedCounts         *int64  `json:"MaxRowsAffectedCounts,omitempty" xml:"MaxRowsAffectedCounts,omitempty" require:"true"`
	MinRowsAffectedCounts         *int64  `json:"MinRowsAffectedCounts,omitempty" xml:"MinRowsAffectedCounts,omitempty" require:"true"`
	TotalLastRowsAffectedCounts   *int64  `json:"TotalLastRowsAffectedCounts,omitempty" xml:"TotalLastRowsAffectedCounts,omitempty" require:"true"`
	AvgLastRowsAffectedCounts     *int64  `json:"AvgLastRowsAffectedCounts,omitempty" xml:"AvgLastRowsAffectedCounts,omitempty" require:"true"`
	MaxLastRowsAffectedCounts     *int64  `json:"MaxLastRowsAffectedCounts,omitempty" xml:"MaxLastRowsAffectedCounts,omitempty" require:"true"`
	MinLastRowsAffectedCounts     *int64  `json:"MinLastRowsAffectedCounts,omitempty" xml:"MinLastRowsAffectedCounts,omitempty" require:"true"`
	SQLServerMinExecutionTime     *int64  `json:"SQLServerMinExecutionTime,omitempty" xml:"SQLServerMinExecutionTime,omitempty" require:"true"`
	SQLServerAvgExecutionTime     *int64  `json:"SQLServerAvgExecutionTime,omitempty" xml:"SQLServerAvgExecutionTime,omitempty" require:"true"`
	SQLServerTotalCpuTime         *int64  `json:"SQLServerTotalCpuTime,omitempty" xml:"SQLServerTotalCpuTime,omitempty" require:"true"`
	SQLServerAvgCpuTime           *int64  `json:"SQLServerAvgCpuTime,omitempty" xml:"SQLServerAvgCpuTime,omitempty" require:"true"`
	SQLServerMaxCpuTime           *int64  `json:"SQLServerMaxCpuTime,omitempty" xml:"SQLServerMaxCpuTime,omitempty" require:"true"`
	SQLServerMinCpuTime           *int64  `json:"SQLServerMinCpuTime,omitempty" xml:"SQLServerMinCpuTime,omitempty" require:"true"`
}

func (s DescribeSlowLogsResponseItemsSQLSlowLog) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogsResponseItemsSQLSlowLog) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSlowLogId(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SlowLogId = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLHASH(v string) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLHASH = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLIdStr(v string) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLIdStr = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetDBName(v string) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.DBName = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLText(v string) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLText = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMySQLTotalExecutionCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MySQLTotalExecutionCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMySQLTotalExecutionTimes(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MySQLTotalExecutionTimes = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetTotalLockTimes(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.TotalLockTimes = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMaxLockTime(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MaxLockTime = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetParseTotalRowCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.ParseTotalRowCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetParseMaxRowCount(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.ParseMaxRowCount = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetReturnTotalRowCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.ReturnTotalRowCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetReturnMaxRowCount(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.ReturnMaxRowCount = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetCreateTime(v string) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.CreateTime = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLServerTotalExecutionCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLServerTotalExecutionCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLServerTotalExecutionTimes(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLServerTotalExecutionTimes = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetTotalLogicalReadCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.TotalLogicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetTotalPhysicalReadCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.TotalPhysicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetReportTime(v string) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.ReportTime = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMaxExecutionTime(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MaxExecutionTime = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetAvgExecutionTime(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.AvgExecutionTime = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetAvgPhysicalReadCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.AvgPhysicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMaxPhysicalReadCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MaxPhysicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMinPhysicalReadCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MinPhysicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetAvgLogicalReadCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.AvgLogicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMaxLogicalReadCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MaxLogicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMinLogicalReadCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MinLogicalReadCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetTotalIOWriteCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.TotalIOWriteCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetAvgIOWriteCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.AvgIOWriteCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMaxIOWriteCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MaxIOWriteCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMinIOWriteCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MinIOWriteCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetTotalRowsAffectedCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.TotalRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetAvgRowsAffectedCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.AvgRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMaxRowsAffectedCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MaxRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMinRowsAffectedCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MinRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetTotalLastRowsAffectedCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.TotalLastRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetAvgLastRowsAffectedCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.AvgLastRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMaxLastRowsAffectedCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MaxLastRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetMinLastRowsAffectedCounts(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.MinLastRowsAffectedCounts = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLServerMinExecutionTime(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLServerMinExecutionTime = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLServerAvgExecutionTime(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLServerAvgExecutionTime = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLServerTotalCpuTime(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLServerTotalCpuTime = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLServerAvgCpuTime(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLServerAvgCpuTime = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLServerMaxCpuTime(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLServerMaxCpuTime = &v
	return s
}

func (s *DescribeSlowLogsResponseItemsSQLSlowLog) SetSQLServerMinCpuTime(v int64) *DescribeSlowLogsResponseItemsSQLSlowLog {
	s.SQLServerMinCpuTime = &v
	return s
}

type DescribeSlowLogRecordsRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	SQLHASH      *string `json:"SQLHASH,omitempty" xml:"SQLHASH,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	DBName       *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeSlowLogRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogRecordsRequest) SetDBInstanceId(v string) *DescribeSlowLogRecordsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetSQLHASH(v string) *DescribeSlowLogRecordsRequest {
	s.SQLHASH = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetStartTime(v string) *DescribeSlowLogRecordsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetEndTime(v string) *DescribeSlowLogRecordsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetDBName(v string) *DescribeSlowLogRecordsRequest {
	s.DBName = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetPageSize(v int) *DescribeSlowLogRecordsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSlowLogRecordsRequest) SetPageNumber(v int) *DescribeSlowLogRecordsRequest {
	s.PageNumber = &v
	return s
}

type DescribeSlowLogRecordsResponse struct {
	RequestId             *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId          *string                              `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Engine                *string                              `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	TotalRecordCount      *int                                 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber            *int                                 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount       *int                                 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	SQLHash               *string                              `json:"SQLHash,omitempty" xml:"SQLHash,omitempty" require:"true"`
	CPUTime               *int64                               `json:"CPUTime,omitempty" xml:"CPUTime,omitempty" require:"true"`
	LogicalIORead         *int64                               `json:"LogicalIORead,omitempty" xml:"LogicalIORead,omitempty" require:"true"`
	PhysicalIORead        *int64                               `json:"PhysicalIORead,omitempty" xml:"PhysicalIORead,omitempty" require:"true"`
	WritesIOCount         *int64                               `json:"WritesIOCount,omitempty" xml:"WritesIOCount,omitempty" require:"true"`
	RowsAffectedCount     *int64                               `json:"RowsAffectedCount,omitempty" xml:"RowsAffectedCount,omitempty" require:"true"`
	LastRowsAffectedCount *int64                               `json:"LastRowsAffectedCount,omitempty" xml:"LastRowsAffectedCount,omitempty" require:"true"`
	UserName              *string                              `json:"UserName,omitempty" xml:"UserName,omitempty" require:"true"`
	Items                 *DescribeSlowLogRecordsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeSlowLogRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogRecordsResponse) SetRequestId(v string) *DescribeSlowLogRecordsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetDBInstanceId(v string) *DescribeSlowLogRecordsResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetEngine(v string) *DescribeSlowLogRecordsResponse {
	s.Engine = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetTotalRecordCount(v int) *DescribeSlowLogRecordsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetPageNumber(v int) *DescribeSlowLogRecordsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetPageRecordCount(v int) *DescribeSlowLogRecordsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetSQLHash(v string) *DescribeSlowLogRecordsResponse {
	s.SQLHash = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetCPUTime(v int64) *DescribeSlowLogRecordsResponse {
	s.CPUTime = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetLogicalIORead(v int64) *DescribeSlowLogRecordsResponse {
	s.LogicalIORead = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetPhysicalIORead(v int64) *DescribeSlowLogRecordsResponse {
	s.PhysicalIORead = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetWritesIOCount(v int64) *DescribeSlowLogRecordsResponse {
	s.WritesIOCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetRowsAffectedCount(v int64) *DescribeSlowLogRecordsResponse {
	s.RowsAffectedCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetLastRowsAffectedCount(v int64) *DescribeSlowLogRecordsResponse {
	s.LastRowsAffectedCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetUserName(v string) *DescribeSlowLogRecordsResponse {
	s.UserName = &v
	return s
}

func (s *DescribeSlowLogRecordsResponse) SetItems(v *DescribeSlowLogRecordsResponseItems) *DescribeSlowLogRecordsResponse {
	s.Items = v
	return s
}

type DescribeSlowLogRecordsResponseItems struct {
	SQLSlowRecord []*DescribeSlowLogRecordsResponseItemsSQLSlowRecord `json:"SQLSlowRecord,omitempty" xml:"SQLSlowRecord,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeSlowLogRecordsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogRecordsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogRecordsResponseItems) SetSQLSlowRecord(v []*DescribeSlowLogRecordsResponseItemsSQLSlowRecord) *DescribeSlowLogRecordsResponseItems {
	s.SQLSlowRecord = v
	return s
}

type DescribeSlowLogRecordsResponseItemsSQLSlowRecord struct {
	HostAddress           *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty" require:"true"`
	DBName                *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	SQLText               *string `json:"SQLText,omitempty" xml:"SQLText,omitempty" require:"true"`
	QueryTimes            *int64  `json:"QueryTimes,omitempty" xml:"QueryTimes,omitempty" require:"true"`
	LockTimes             *int64  `json:"LockTimes,omitempty" xml:"LockTimes,omitempty" require:"true"`
	ParseRowCounts        *int64  `json:"ParseRowCounts,omitempty" xml:"ParseRowCounts,omitempty" require:"true"`
	ReturnRowCounts       *int64  `json:"ReturnRowCounts,omitempty" xml:"ReturnRowCounts,omitempty" require:"true"`
	ExecutionStartTime    *string `json:"ExecutionStartTime,omitempty" xml:"ExecutionStartTime,omitempty" require:"true"`
	QueryTimeMS           *int64  `json:"QueryTimeMS,omitempty" xml:"QueryTimeMS,omitempty" require:"true"`
	CpuTime               *int64  `json:"CpuTime,omitempty" xml:"CpuTime,omitempty" require:"true"`
	LogicalIORead         *int64  `json:"LogicalIORead,omitempty" xml:"LogicalIORead,omitempty" require:"true"`
	PhysicalIORead        *int64  `json:"PhysicalIORead,omitempty" xml:"PhysicalIORead,omitempty" require:"true"`
	WriteIOCount          *int64  `json:"WriteIOCount,omitempty" xml:"WriteIOCount,omitempty" require:"true"`
	RowsAffectedCount     *int64  `json:"RowsAffectedCount,omitempty" xml:"RowsAffectedCount,omitempty" require:"true"`
	LastRowsAffectedCount *int64  `json:"LastRowsAffectedCount,omitempty" xml:"LastRowsAffectedCount,omitempty" require:"true"`
	UserName              *string `json:"UserName,omitempty" xml:"UserName,omitempty" require:"true"`
	ApplicationName       *string `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty" require:"true"`
	ClientHostName        *string `json:"ClientHostName,omitempty" xml:"ClientHostName,omitempty" require:"true"`
}

func (s DescribeSlowLogRecordsResponseItemsSQLSlowRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeSlowLogRecordsResponseItemsSQLSlowRecord) GoString() string {
	return s.String()
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetHostAddress(v string) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.HostAddress = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetDBName(v string) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.DBName = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetSQLText(v string) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.SQLText = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetQueryTimes(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.QueryTimes = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetLockTimes(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.LockTimes = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetParseRowCounts(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.ParseRowCounts = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetReturnRowCounts(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.ReturnRowCounts = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetExecutionStartTime(v string) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.ExecutionStartTime = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetQueryTimeMS(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.QueryTimeMS = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetCpuTime(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.CpuTime = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetLogicalIORead(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.LogicalIORead = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetPhysicalIORead(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.PhysicalIORead = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetWriteIOCount(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.WriteIOCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetRowsAffectedCount(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.RowsAffectedCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetLastRowsAffectedCount(v int64) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.LastRowsAffectedCount = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetUserName(v string) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.UserName = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetApplicationName(v string) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.ApplicationName = &v
	return s
}

func (s *DescribeSlowLogRecordsResponseItemsSQLSlowRecord) SetClientHostName(v string) *DescribeSlowLogRecordsResponseItemsSQLSlowRecord {
	s.ClientHostName = &v
	return s
}

type DescribeResourceUsageRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeResourceUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageRequest) SetDBInstanceId(v string) *DescribeResourceUsageRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeResourceUsageResponse struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId      *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Engine            *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	DiskUsed          *int64  `json:"DiskUsed,omitempty" xml:"DiskUsed,omitempty" require:"true"`
	DataSize          *int64  `json:"DataSize,omitempty" xml:"DataSize,omitempty" require:"true"`
	LogSize           *int64  `json:"LogSize,omitempty" xml:"LogSize,omitempty" require:"true"`
	BackupSize        *int64  `json:"BackupSize,omitempty" xml:"BackupSize,omitempty" require:"true"`
	BackupOssDataSize *int64  `json:"BackupOssDataSize,omitempty" xml:"BackupOssDataSize,omitempty" require:"true"`
	BackupOssLogSize  *int64  `json:"BackupOssLogSize,omitempty" xml:"BackupOssLogSize,omitempty" require:"true"`
	SQLSize           *int64  `json:"SQLSize,omitempty" xml:"SQLSize,omitempty" require:"true"`
	ColdBackupSize    *int64  `json:"ColdBackupSize,omitempty" xml:"ColdBackupSize,omitempty" require:"true"`
	BackupDataSize    *int64  `json:"BackupDataSize,omitempty" xml:"BackupDataSize,omitempty" require:"true"`
	BackupLogSize     *int64  `json:"BackupLogSize,omitempty" xml:"BackupLogSize,omitempty" require:"true"`
	PaidBackupSize    *int64  `json:"PaidBackupSize,omitempty" xml:"PaidBackupSize,omitempty" require:"true"`
	ArchiveBackupSize *int64  `json:"ArchiveBackupSize,omitempty" xml:"ArchiveBackupSize,omitempty" require:"true"`
}

func (s DescribeResourceUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceUsageResponse) SetRequestId(v string) *DescribeResourceUsageResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetDBInstanceId(v string) *DescribeResourceUsageResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetEngine(v string) *DescribeResourceUsageResponse {
	s.Engine = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetDiskUsed(v int64) *DescribeResourceUsageResponse {
	s.DiskUsed = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetDataSize(v int64) *DescribeResourceUsageResponse {
	s.DataSize = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetLogSize(v int64) *DescribeResourceUsageResponse {
	s.LogSize = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetBackupSize(v int64) *DescribeResourceUsageResponse {
	s.BackupSize = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetBackupOssDataSize(v int64) *DescribeResourceUsageResponse {
	s.BackupOssDataSize = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetBackupOssLogSize(v int64) *DescribeResourceUsageResponse {
	s.BackupOssLogSize = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetSQLSize(v int64) *DescribeResourceUsageResponse {
	s.SQLSize = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetColdBackupSize(v int64) *DescribeResourceUsageResponse {
	s.ColdBackupSize = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetBackupDataSize(v int64) *DescribeResourceUsageResponse {
	s.BackupDataSize = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetBackupLogSize(v int64) *DescribeResourceUsageResponse {
	s.BackupLogSize = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetPaidBackupSize(v int64) *DescribeResourceUsageResponse {
	s.PaidBackupSize = &v
	return s
}

func (s *DescribeResourceUsageResponse) SetArchiveBackupSize(v int64) *DescribeResourceUsageResponse {
	s.ArchiveBackupSize = &v
	return s
}

type DescribeRegionsRequest struct {
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

type DescribeRegionsResponse struct {
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Regions   *DescribeRegionsResponseRegions `json:"Regions,omitempty" xml:"Regions,omitempty" require:"true" type:"Struct"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetRequestId(v string) *DescribeRegionsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeRegionsResponse) SetRegions(v *DescribeRegionsResponseRegions) *DescribeRegionsResponse {
	s.Regions = v
	return s
}

type DescribeRegionsResponseRegions struct {
	RDSRegion []*DescribeRegionsResponseRegionsRDSRegion `json:"RDSRegion,omitempty" xml:"RDSRegion,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeRegionsResponseRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseRegions) SetRDSRegion(v []*DescribeRegionsResponseRegionsRDSRegion) *DescribeRegionsResponseRegions {
	s.RDSRegion = v
	return s
}

type DescribeRegionsResponseRegionsRDSRegion struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ZoneId   *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
}

func (s DescribeRegionsResponseRegionsRDSRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseRegionsRDSRegion) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseRegionsRDSRegion) SetRegionId(v string) *DescribeRegionsResponseRegionsRDSRegion {
	s.RegionId = &v
	return s
}

func (s *DescribeRegionsResponseRegionsRDSRegion) SetZoneId(v string) *DescribeRegionsResponseRegionsRDSRegion {
	s.ZoneId = &v
	return s
}

type DescribeParameterTemplatesRequest struct {
	ClientToken   *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Engine        *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	Category      *string `json:"Category,omitempty" xml:"Category,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DBInstanceId  *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
}

func (s DescribeParameterTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterTemplatesRequest) GoString() string {
	return s.String()
}

func (s *DescribeParameterTemplatesRequest) SetClientToken(v string) *DescribeParameterTemplatesRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetEngine(v string) *DescribeParameterTemplatesRequest {
	s.Engine = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetEngineVersion(v string) *DescribeParameterTemplatesRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetCategory(v string) *DescribeParameterTemplatesRequest {
	s.Category = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetRegionId(v string) *DescribeParameterTemplatesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeParameterTemplatesRequest) SetDBInstanceId(v string) *DescribeParameterTemplatesRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeParameterTemplatesResponse struct {
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Engine         *string                                       `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion  *string                                       `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	ParameterCount *string                                       `json:"ParameterCount,omitempty" xml:"ParameterCount,omitempty" require:"true"`
	Parameters     *DescribeParameterTemplatesResponseParameters `json:"Parameters,omitempty" xml:"Parameters,omitempty" require:"true" type:"Struct"`
}

func (s DescribeParameterTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DescribeParameterTemplatesResponse) SetRequestId(v string) *DescribeParameterTemplatesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeParameterTemplatesResponse) SetEngine(v string) *DescribeParameterTemplatesResponse {
	s.Engine = &v
	return s
}

func (s *DescribeParameterTemplatesResponse) SetEngineVersion(v string) *DescribeParameterTemplatesResponse {
	s.EngineVersion = &v
	return s
}

func (s *DescribeParameterTemplatesResponse) SetParameterCount(v string) *DescribeParameterTemplatesResponse {
	s.ParameterCount = &v
	return s
}

func (s *DescribeParameterTemplatesResponse) SetParameters(v *DescribeParameterTemplatesResponseParameters) *DescribeParameterTemplatesResponse {
	s.Parameters = v
	return s
}

type DescribeParameterTemplatesResponseParameters struct {
	TemplateRecord []*DescribeParameterTemplatesResponseParametersTemplateRecord `json:"TemplateRecord,omitempty" xml:"TemplateRecord,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeParameterTemplatesResponseParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterTemplatesResponseParameters) GoString() string {
	return s.String()
}

func (s *DescribeParameterTemplatesResponseParameters) SetTemplateRecord(v []*DescribeParameterTemplatesResponseParametersTemplateRecord) *DescribeParameterTemplatesResponseParameters {
	s.TemplateRecord = v
	return s
}

type DescribeParameterTemplatesResponseParametersTemplateRecord struct {
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty" require:"true"`
	ParameterValue       *string `json:"ParameterValue,omitempty" xml:"ParameterValue,omitempty" require:"true"`
	ForceModify          *string `json:"ForceModify,omitempty" xml:"ForceModify,omitempty" require:"true"`
	ForceRestart         *string `json:"ForceRestart,omitempty" xml:"ForceRestart,omitempty" require:"true"`
	CheckingCode         *string `json:"CheckingCode,omitempty" xml:"CheckingCode,omitempty" require:"true"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty" require:"true"`
}

func (s DescribeParameterTemplatesResponseParametersTemplateRecord) String() string {
	return tea.Prettify(s)
}

func (s DescribeParameterTemplatesResponseParametersTemplateRecord) GoString() string {
	return s.String()
}

func (s *DescribeParameterTemplatesResponseParametersTemplateRecord) SetParameterName(v string) *DescribeParameterTemplatesResponseParametersTemplateRecord {
	s.ParameterName = &v
	return s
}

func (s *DescribeParameterTemplatesResponseParametersTemplateRecord) SetParameterValue(v string) *DescribeParameterTemplatesResponseParametersTemplateRecord {
	s.ParameterValue = &v
	return s
}

func (s *DescribeParameterTemplatesResponseParametersTemplateRecord) SetForceModify(v string) *DescribeParameterTemplatesResponseParametersTemplateRecord {
	s.ForceModify = &v
	return s
}

func (s *DescribeParameterTemplatesResponseParametersTemplateRecord) SetForceRestart(v string) *DescribeParameterTemplatesResponseParametersTemplateRecord {
	s.ForceRestart = &v
	return s
}

func (s *DescribeParameterTemplatesResponseParametersTemplateRecord) SetCheckingCode(v string) *DescribeParameterTemplatesResponseParametersTemplateRecord {
	s.CheckingCode = &v
	return s
}

func (s *DescribeParameterTemplatesResponseParametersTemplateRecord) SetParameterDescription(v string) *DescribeParameterTemplatesResponseParametersTemplateRecord {
	s.ParameterDescription = &v
	return s
}

type DescribeParametersRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeParametersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersRequest) GoString() string {
	return s.String()
}

func (s *DescribeParametersRequest) SetClientToken(v string) *DescribeParametersRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeParametersRequest) SetDBInstanceId(v string) *DescribeParametersRequest {
	s.DBInstanceId = &v
	return s
}

type DescribeParametersResponse struct {
	RequestId         *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Engine            *string                                      `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion     *string                                      `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	ConfigParameters  *DescribeParametersResponseConfigParameters  `json:"ConfigParameters,omitempty" xml:"ConfigParameters,omitempty" require:"true" type:"Struct"`
	RunningParameters *DescribeParametersResponseRunningParameters `json:"RunningParameters,omitempty" xml:"RunningParameters,omitempty" require:"true" type:"Struct"`
}

func (s DescribeParametersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponse) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponse) SetRequestId(v string) *DescribeParametersResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeParametersResponse) SetEngine(v string) *DescribeParametersResponse {
	s.Engine = &v
	return s
}

func (s *DescribeParametersResponse) SetEngineVersion(v string) *DescribeParametersResponse {
	s.EngineVersion = &v
	return s
}

func (s *DescribeParametersResponse) SetConfigParameters(v *DescribeParametersResponseConfigParameters) *DescribeParametersResponse {
	s.ConfigParameters = v
	return s
}

func (s *DescribeParametersResponse) SetRunningParameters(v *DescribeParametersResponseRunningParameters) *DescribeParametersResponse {
	s.RunningParameters = v
	return s
}

type DescribeParametersResponseConfigParameters struct {
	DBInstanceParameter []*DescribeParametersResponseConfigParametersDBInstanceParameter `json:"DBInstanceParameter,omitempty" xml:"DBInstanceParameter,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeParametersResponseConfigParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseConfigParameters) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseConfigParameters) SetDBInstanceParameter(v []*DescribeParametersResponseConfigParametersDBInstanceParameter) *DescribeParametersResponseConfigParameters {
	s.DBInstanceParameter = v
	return s
}

type DescribeParametersResponseConfigParametersDBInstanceParameter struct {
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty" require:"true"`
	ParameterValue       *string `json:"ParameterValue,omitempty" xml:"ParameterValue,omitempty" require:"true"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty" require:"true"`
}

func (s DescribeParametersResponseConfigParametersDBInstanceParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseConfigParametersDBInstanceParameter) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseConfigParametersDBInstanceParameter) SetParameterName(v string) *DescribeParametersResponseConfigParametersDBInstanceParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeParametersResponseConfigParametersDBInstanceParameter) SetParameterValue(v string) *DescribeParametersResponseConfigParametersDBInstanceParameter {
	s.ParameterValue = &v
	return s
}

func (s *DescribeParametersResponseConfigParametersDBInstanceParameter) SetParameterDescription(v string) *DescribeParametersResponseConfigParametersDBInstanceParameter {
	s.ParameterDescription = &v
	return s
}

type DescribeParametersResponseRunningParameters struct {
	DBInstanceParameter []*DescribeParametersResponseRunningParametersDBInstanceParameter `json:"DBInstanceParameter,omitempty" xml:"DBInstanceParameter,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeParametersResponseRunningParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseRunningParameters) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseRunningParameters) SetDBInstanceParameter(v []*DescribeParametersResponseRunningParametersDBInstanceParameter) *DescribeParametersResponseRunningParameters {
	s.DBInstanceParameter = v
	return s
}

type DescribeParametersResponseRunningParametersDBInstanceParameter struct {
	ParameterName        *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty" require:"true"`
	ParameterValue       *string `json:"ParameterValue,omitempty" xml:"ParameterValue,omitempty" require:"true"`
	ParameterDescription *string `json:"ParameterDescription,omitempty" xml:"ParameterDescription,omitempty" require:"true"`
}

func (s DescribeParametersResponseRunningParametersDBInstanceParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeParametersResponseRunningParametersDBInstanceParameter) GoString() string {
	return s.String()
}

func (s *DescribeParametersResponseRunningParametersDBInstanceParameter) SetParameterName(v string) *DescribeParametersResponseRunningParametersDBInstanceParameter {
	s.ParameterName = &v
	return s
}

func (s *DescribeParametersResponseRunningParametersDBInstanceParameter) SetParameterValue(v string) *DescribeParametersResponseRunningParametersDBInstanceParameter {
	s.ParameterValue = &v
	return s
}

func (s *DescribeParametersResponseRunningParametersDBInstanceParameter) SetParameterDescription(v string) *DescribeParametersResponseRunningParametersDBInstanceParameter {
	s.ParameterDescription = &v
	return s
}

type DescribeModifyParameterLogRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeModifyParameterLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogRequest) SetDBInstanceId(v string) *DescribeModifyParameterLogRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetStartTime(v string) *DescribeModifyParameterLogRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetEndTime(v string) *DescribeModifyParameterLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetPageSize(v int) *DescribeModifyParameterLogRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeModifyParameterLogRequest) SetPageNumber(v int) *DescribeModifyParameterLogRequest {
	s.PageNumber = &v
	return s
}

type DescribeModifyParameterLogResponse struct {
	RequestId        *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Engine           *string                                  `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	DBInstanceId     *string                                  `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	EngineVersion    *string                                  `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	TotalRecordCount *int                                     `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                                     `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeModifyParameterLogResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeModifyParameterLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponse) SetRequestId(v string) *DescribeModifyParameterLogResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetEngine(v string) *DescribeModifyParameterLogResponse {
	s.Engine = &v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetDBInstanceId(v string) *DescribeModifyParameterLogResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetEngineVersion(v string) *DescribeModifyParameterLogResponse {
	s.EngineVersion = &v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetTotalRecordCount(v int) *DescribeModifyParameterLogResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetPageNumber(v int) *DescribeModifyParameterLogResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetPageRecordCount(v int) *DescribeModifyParameterLogResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeModifyParameterLogResponse) SetItems(v *DescribeModifyParameterLogResponseItems) *DescribeModifyParameterLogResponse {
	s.Items = v
	return s
}

type DescribeModifyParameterLogResponseItems struct {
	ParameterChangeLog []*DescribeModifyParameterLogResponseItemsParameterChangeLog `json:"ParameterChangeLog,omitempty" xml:"ParameterChangeLog,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeModifyParameterLogResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponseItems) SetParameterChangeLog(v []*DescribeModifyParameterLogResponseItemsParameterChangeLog) *DescribeModifyParameterLogResponseItems {
	s.ParameterChangeLog = v
	return s
}

type DescribeModifyParameterLogResponseItemsParameterChangeLog struct {
	ModifyTime        *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty" require:"true"`
	OldParameterValue *string `json:"OldParameterValue,omitempty" xml:"OldParameterValue,omitempty" require:"true"`
	NewParameterValue *string `json:"NewParameterValue,omitempty" xml:"NewParameterValue,omitempty" require:"true"`
	ParameterName     *string `json:"ParameterName,omitempty" xml:"ParameterName,omitempty" require:"true"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s DescribeModifyParameterLogResponseItemsParameterChangeLog) String() string {
	return tea.Prettify(s)
}

func (s DescribeModifyParameterLogResponseItemsParameterChangeLog) GoString() string {
	return s.String()
}

func (s *DescribeModifyParameterLogResponseItemsParameterChangeLog) SetModifyTime(v string) *DescribeModifyParameterLogResponseItemsParameterChangeLog {
	s.ModifyTime = &v
	return s
}

func (s *DescribeModifyParameterLogResponseItemsParameterChangeLog) SetOldParameterValue(v string) *DescribeModifyParameterLogResponseItemsParameterChangeLog {
	s.OldParameterValue = &v
	return s
}

func (s *DescribeModifyParameterLogResponseItemsParameterChangeLog) SetNewParameterValue(v string) *DescribeModifyParameterLogResponseItemsParameterChangeLog {
	s.NewParameterValue = &v
	return s
}

func (s *DescribeModifyParameterLogResponseItemsParameterChangeLog) SetParameterName(v string) *DescribeModifyParameterLogResponseItemsParameterChangeLog {
	s.ParameterName = &v
	return s
}

func (s *DescribeModifyParameterLogResponseItemsParameterChangeLog) SetStatus(v string) *DescribeModifyParameterLogResponseItemsParameterChangeLog {
	s.Status = &v
	return s
}

type DescribeErrorLogsRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeErrorLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeErrorLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeErrorLogsRequest) SetDBInstanceId(v string) *DescribeErrorLogsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetStartTime(v string) *DescribeErrorLogsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetEndTime(v string) *DescribeErrorLogsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetPageSize(v int) *DescribeErrorLogsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeErrorLogsRequest) SetPageNumber(v int) *DescribeErrorLogsRequest {
	s.PageNumber = &v
	return s
}

type DescribeErrorLogsResponse struct {
	PageNumber       *int                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                            `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	RequestId        *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int                            `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	Items            *DescribeErrorLogsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeErrorLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeErrorLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeErrorLogsResponse) SetPageNumber(v int) *DescribeErrorLogsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeErrorLogsResponse) SetPageRecordCount(v int) *DescribeErrorLogsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeErrorLogsResponse) SetRequestId(v string) *DescribeErrorLogsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeErrorLogsResponse) SetTotalRecordCount(v int) *DescribeErrorLogsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeErrorLogsResponse) SetItems(v *DescribeErrorLogsResponseItems) *DescribeErrorLogsResponse {
	s.Items = v
	return s
}

type DescribeErrorLogsResponseItems struct {
	ErrorLog []*DescribeErrorLogsResponseItemsErrorLog `json:"ErrorLog,omitempty" xml:"ErrorLog,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeErrorLogsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeErrorLogsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeErrorLogsResponseItems) SetErrorLog(v []*DescribeErrorLogsResponseItemsErrorLog) *DescribeErrorLogsResponseItems {
	s.ErrorLog = v
	return s
}

type DescribeErrorLogsResponseItemsErrorLog struct {
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	ErrorInfo  *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty" require:"true"`
}

func (s DescribeErrorLogsResponseItemsErrorLog) String() string {
	return tea.Prettify(s)
}

func (s DescribeErrorLogsResponseItemsErrorLog) GoString() string {
	return s.String()
}

func (s *DescribeErrorLogsResponseItemsErrorLog) SetCreateTime(v string) *DescribeErrorLogsResponseItemsErrorLog {
	s.CreateTime = &v
	return s
}

func (s *DescribeErrorLogsResponseItemsErrorLog) SetErrorInfo(v string) *DescribeErrorLogsResponseItemsErrorLog {
	s.ErrorInfo = &v
	return s
}

type DescribeDBInstancePerformanceRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Key          *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
}

func (s DescribeDBInstancePerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceRequest) SetDBInstanceId(v string) *DescribeDBInstancePerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetKey(v string) *DescribeDBInstancePerformanceRequest {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetStartTime(v string) *DescribeDBInstancePerformanceRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceRequest) SetEndTime(v string) *DescribeDBInstancePerformanceRequest {
	s.EndTime = &v
	return s
}

type DescribeDBInstancePerformanceResponse struct {
	RequestId       *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId    *string                                               `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Engine          *string                                               `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	StartTime       *string                                               `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime         *string                                               `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PerformanceKeys *DescribeDBInstancePerformanceResponsePerformanceKeys `json:"PerformanceKeys,omitempty" xml:"PerformanceKeys,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancePerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponse) SetRequestId(v string) *DescribeDBInstancePerformanceResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) SetDBInstanceId(v string) *DescribeDBInstancePerformanceResponse {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) SetEngine(v string) *DescribeDBInstancePerformanceResponse {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) SetStartTime(v string) *DescribeDBInstancePerformanceResponse {
	s.StartTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) SetEndTime(v string) *DescribeDBInstancePerformanceResponse {
	s.EndTime = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponse) SetPerformanceKeys(v *DescribeDBInstancePerformanceResponsePerformanceKeys) *DescribeDBInstancePerformanceResponse {
	s.PerformanceKeys = v
	return s
}

type DescribeDBInstancePerformanceResponsePerformanceKeys struct {
	PerformanceKey []*DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey `json:"PerformanceKey,omitempty" xml:"PerformanceKey,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancePerformanceResponsePerformanceKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponsePerformanceKeys) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponsePerformanceKeys) SetPerformanceKey(v []*DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey) *DescribeDBInstancePerformanceResponsePerformanceKeys {
	s.PerformanceKey = v
	return s
}

type DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey struct {
	Key         *string                                                                   `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Unit        *string                                                                   `json:"Unit,omitempty" xml:"Unit,omitempty" require:"true"`
	ValueFormat *string                                                                   `json:"ValueFormat,omitempty" xml:"ValueFormat,omitempty" require:"true"`
	Values      *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValues `json:"Values,omitempty" xml:"Values,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey) SetKey(v string) *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey) SetUnit(v string) *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey {
	s.Unit = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey) SetValueFormat(v string) *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey {
	s.ValueFormat = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey) SetValues(v *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValues) *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKey {
	s.Values = v
	return s
}

type DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValues struct {
	PerformanceValue []*DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue `json:"PerformanceValue,omitempty" xml:"PerformanceValue,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValues) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValues) SetPerformanceValue(v []*DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue) *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValues {
	s.PerformanceValue = v
	return s
}

type DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue struct {
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
	Date  *string `json:"Date,omitempty" xml:"Date,omitempty" require:"true"`
}

func (s DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue) SetValue(v string) *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue {
	s.Value = &v
	return s
}

func (s *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue) SetDate(v string) *DescribeDBInstancePerformanceResponsePerformanceKeysPerformanceKeyValuesPerformanceValue {
	s.Date = &v
	return s
}

type DescribeDatabasesRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBName       *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	DBStatus     *string `json:"DBStatus,omitempty" xml:"DBStatus,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeDatabasesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesRequest) SetDBInstanceId(v string) *DescribeDatabasesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDatabasesRequest) SetDBName(v string) *DescribeDatabasesRequest {
	s.DBName = &v
	return s
}

func (s *DescribeDatabasesRequest) SetDBStatus(v string) *DescribeDatabasesRequest {
	s.DBStatus = &v
	return s
}

func (s *DescribeDatabasesRequest) SetPageSize(v int) *DescribeDatabasesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDatabasesRequest) SetPageNumber(v int) *DescribeDatabasesRequest {
	s.PageNumber = &v
	return s
}

type DescribeDatabasesResponse struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Databases *DescribeDatabasesResponseDatabases `json:"Databases,omitempty" xml:"Databases,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDatabasesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponse) SetRequestId(v string) *DescribeDatabasesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDatabasesResponse) SetDatabases(v *DescribeDatabasesResponseDatabases) *DescribeDatabasesResponse {
	s.Databases = v
	return s
}

type DescribeDatabasesResponseDatabases struct {
	Database []*DescribeDatabasesResponseDatabasesDatabase `json:"Database,omitempty" xml:"Database,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDatabasesResponseDatabases) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseDatabases) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseDatabases) SetDatabase(v []*DescribeDatabasesResponseDatabasesDatabase) *DescribeDatabasesResponseDatabases {
	s.Database = v
	return s
}

type DescribeDatabasesResponseDatabasesDatabase struct {
	DBName           *string                                             `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	DBInstanceId     *string                                             `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Engine           *string                                             `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	DBStatus         *string                                             `json:"DBStatus,omitempty" xml:"DBStatus,omitempty" require:"true"`
	CharacterSetName *string                                             `json:"CharacterSetName,omitempty" xml:"CharacterSetName,omitempty" require:"true"`
	DBDescription    *string                                             `json:"DBDescription,omitempty" xml:"DBDescription,omitempty" require:"true"`
	Accounts         *DescribeDatabasesResponseDatabasesDatabaseAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDatabasesResponseDatabasesDatabase) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseDatabasesDatabase) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseDatabasesDatabase) SetDBName(v string) *DescribeDatabasesResponseDatabasesDatabase {
	s.DBName = &v
	return s
}

func (s *DescribeDatabasesResponseDatabasesDatabase) SetDBInstanceId(v string) *DescribeDatabasesResponseDatabasesDatabase {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDatabasesResponseDatabasesDatabase) SetEngine(v string) *DescribeDatabasesResponseDatabasesDatabase {
	s.Engine = &v
	return s
}

func (s *DescribeDatabasesResponseDatabasesDatabase) SetDBStatus(v string) *DescribeDatabasesResponseDatabasesDatabase {
	s.DBStatus = &v
	return s
}

func (s *DescribeDatabasesResponseDatabasesDatabase) SetCharacterSetName(v string) *DescribeDatabasesResponseDatabasesDatabase {
	s.CharacterSetName = &v
	return s
}

func (s *DescribeDatabasesResponseDatabasesDatabase) SetDBDescription(v string) *DescribeDatabasesResponseDatabasesDatabase {
	s.DBDescription = &v
	return s
}

func (s *DescribeDatabasesResponseDatabasesDatabase) SetAccounts(v *DescribeDatabasesResponseDatabasesDatabaseAccounts) *DescribeDatabasesResponseDatabasesDatabase {
	s.Accounts = v
	return s
}

type DescribeDatabasesResponseDatabasesDatabaseAccounts struct {
	AccountPrivilegeInfo []*DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo `json:"AccountPrivilegeInfo,omitempty" xml:"AccountPrivilegeInfo,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDatabasesResponseDatabasesDatabaseAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseDatabasesDatabaseAccounts) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseDatabasesDatabaseAccounts) SetAccountPrivilegeInfo(v []*DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo) *DescribeDatabasesResponseDatabasesDatabaseAccounts {
	s.AccountPrivilegeInfo = v
	return s
}

type DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo struct {
	Account                *string `json:"Account,omitempty" xml:"Account,omitempty" require:"true"`
	AccountPrivilege       *string `json:"AccountPrivilege,omitempty" xml:"AccountPrivilege,omitempty" require:"true"`
	AccountPrivilegeDetail *string `json:"AccountPrivilegeDetail,omitempty" xml:"AccountPrivilegeDetail,omitempty" require:"true"`
}

func (s DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo) GoString() string {
	return s.String()
}

func (s *DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo) SetAccount(v string) *DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo {
	s.Account = &v
	return s
}

func (s *DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo) SetAccountPrivilege(v string) *DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo {
	s.AccountPrivilege = &v
	return s
}

func (s *DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo) SetAccountPrivilegeDetail(v string) *DescribeDatabasesResponseDatabasesDatabaseAccountsAccountPrivilegeInfo {
	s.AccountPrivilegeDetail = &v
	return s
}

type DescribeBinlogFilesRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeBinlogFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBinlogFilesRequest) GoString() string {
	return s.String()
}

func (s *DescribeBinlogFilesRequest) SetDBInstanceId(v string) *DescribeBinlogFilesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetStartTime(v string) *DescribeBinlogFilesRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetEndTime(v string) *DescribeBinlogFilesRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetPageSize(v int) *DescribeBinlogFilesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBinlogFilesRequest) SetPageNumber(v int) *DescribeBinlogFilesRequest {
	s.PageNumber = &v
	return s
}

type DescribeBinlogFilesResponse struct {
	RequestId        *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int                              `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                              `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	TotalFileSize    *int64                            `json:"TotalFileSize,omitempty" xml:"TotalFileSize,omitempty" require:"true"`
	Items            *DescribeBinlogFilesResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeBinlogFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBinlogFilesResponse) GoString() string {
	return s.String()
}

func (s *DescribeBinlogFilesResponse) SetRequestId(v string) *DescribeBinlogFilesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBinlogFilesResponse) SetTotalRecordCount(v int) *DescribeBinlogFilesResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeBinlogFilesResponse) SetPageNumber(v int) *DescribeBinlogFilesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeBinlogFilesResponse) SetPageRecordCount(v int) *DescribeBinlogFilesResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeBinlogFilesResponse) SetTotalFileSize(v int64) *DescribeBinlogFilesResponse {
	s.TotalFileSize = &v
	return s
}

func (s *DescribeBinlogFilesResponse) SetItems(v *DescribeBinlogFilesResponseItems) *DescribeBinlogFilesResponse {
	s.Items = v
	return s
}

type DescribeBinlogFilesResponseItems struct {
	BinLogFile []*DescribeBinlogFilesResponseItemsBinLogFile `json:"BinLogFile,omitempty" xml:"BinLogFile,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeBinlogFilesResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeBinlogFilesResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeBinlogFilesResponseItems) SetBinLogFile(v []*DescribeBinlogFilesResponseItemsBinLogFile) *DescribeBinlogFilesResponseItems {
	s.BinLogFile = v
	return s
}

type DescribeBinlogFilesResponseItemsBinLogFile struct {
	FileSize             *int64  `json:"FileSize,omitempty" xml:"FileSize,omitempty" require:"true"`
	LogBeginTime         *string `json:"LogBeginTime,omitempty" xml:"LogBeginTime,omitempty" require:"true"`
	LogEndTime           *string `json:"LogEndTime,omitempty" xml:"LogEndTime,omitempty" require:"true"`
	DownloadLink         *string `json:"DownloadLink,omitempty" xml:"DownloadLink,omitempty" require:"true"`
	IntranetDownloadLink *string `json:"IntranetDownloadLink,omitempty" xml:"IntranetDownloadLink,omitempty" require:"true"`
	LinkExpiredTime      *string `json:"LinkExpiredTime,omitempty" xml:"LinkExpiredTime,omitempty" require:"true"`
	Checksum             *string `json:"Checksum,omitempty" xml:"Checksum,omitempty" require:"true"`
	HostInstanceID       *string `json:"HostInstanceID,omitempty" xml:"HostInstanceID,omitempty" require:"true"`
	LogFileName          *string `json:"LogFileName,omitempty" xml:"LogFileName,omitempty" require:"true"`
}

func (s DescribeBinlogFilesResponseItemsBinLogFile) String() string {
	return tea.Prettify(s)
}

func (s DescribeBinlogFilesResponseItemsBinLogFile) GoString() string {
	return s.String()
}

func (s *DescribeBinlogFilesResponseItemsBinLogFile) SetFileSize(v int64) *DescribeBinlogFilesResponseItemsBinLogFile {
	s.FileSize = &v
	return s
}

func (s *DescribeBinlogFilesResponseItemsBinLogFile) SetLogBeginTime(v string) *DescribeBinlogFilesResponseItemsBinLogFile {
	s.LogBeginTime = &v
	return s
}

func (s *DescribeBinlogFilesResponseItemsBinLogFile) SetLogEndTime(v string) *DescribeBinlogFilesResponseItemsBinLogFile {
	s.LogEndTime = &v
	return s
}

func (s *DescribeBinlogFilesResponseItemsBinLogFile) SetDownloadLink(v string) *DescribeBinlogFilesResponseItemsBinLogFile {
	s.DownloadLink = &v
	return s
}

func (s *DescribeBinlogFilesResponseItemsBinLogFile) SetIntranetDownloadLink(v string) *DescribeBinlogFilesResponseItemsBinLogFile {
	s.IntranetDownloadLink = &v
	return s
}

func (s *DescribeBinlogFilesResponseItemsBinLogFile) SetLinkExpiredTime(v string) *DescribeBinlogFilesResponseItemsBinLogFile {
	s.LinkExpiredTime = &v
	return s
}

func (s *DescribeBinlogFilesResponseItemsBinLogFile) SetChecksum(v string) *DescribeBinlogFilesResponseItemsBinLogFile {
	s.Checksum = &v
	return s
}

func (s *DescribeBinlogFilesResponseItemsBinLogFile) SetHostInstanceID(v string) *DescribeBinlogFilesResponseItemsBinLogFile {
	s.HostInstanceID = &v
	return s
}

func (s *DescribeBinlogFilesResponseItemsBinLogFile) SetLogFileName(v string) *DescribeBinlogFilesResponseItemsBinLogFile {
	s.LogFileName = &v
	return s
}

type DescribeBackupTasksRequest struct {
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	Flag            *string `json:"Flag,omitempty" xml:"Flag,omitempty"`
	DBInstanceId    *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupJobId     *int    `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty"`
	BackupMode      *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	BackupJobStatus *string `json:"BackupJobStatus,omitempty" xml:"BackupJobStatus,omitempty"`
}

func (s DescribeBackupTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupTasksRequest) SetClientToken(v string) *DescribeBackupTasksRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetFlag(v string) *DescribeBackupTasksRequest {
	s.Flag = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetDBInstanceId(v string) *DescribeBackupTasksRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetBackupJobId(v int) *DescribeBackupTasksRequest {
	s.BackupJobId = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetBackupMode(v string) *DescribeBackupTasksRequest {
	s.BackupMode = &v
	return s
}

func (s *DescribeBackupTasksRequest) SetBackupJobStatus(v string) *DescribeBackupTasksRequest {
	s.BackupJobStatus = &v
	return s
}

type DescribeBackupTasksResponse struct {
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Items     *DescribeBackupTasksResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeBackupTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupTasksResponse) SetRequestId(v string) *DescribeBackupTasksResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBackupTasksResponse) SetItems(v *DescribeBackupTasksResponseItems) *DescribeBackupTasksResponse {
	s.Items = v
	return s
}

type DescribeBackupTasksResponseItems struct {
	BackupJob []*DescribeBackupTasksResponseItemsBackupJob `json:"BackupJob,omitempty" xml:"BackupJob,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeBackupTasksResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupTasksResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeBackupTasksResponseItems) SetBackupJob(v []*DescribeBackupTasksResponseItemsBackupJob) *DescribeBackupTasksResponseItems {
	s.BackupJob = v
	return s
}

type DescribeBackupTasksResponseItemsBackupJob struct {
	BackupProgressStatus *string `json:"BackupProgressStatus,omitempty" xml:"BackupProgressStatus,omitempty" require:"true"`
	BackupStatus         *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty" require:"true"`
	JobMode              *string `json:"JobMode,omitempty" xml:"JobMode,omitempty" require:"true"`
	Process              *string `json:"Process,omitempty" xml:"Process,omitempty" require:"true"`
	TaskAction           *string `json:"TaskAction,omitempty" xml:"TaskAction,omitempty" require:"true"`
	BackupJobId          *string `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty" require:"true"`
	BackupId             *string `json:"BackupId,omitempty" xml:"BackupId,omitempty" require:"true"`
}

func (s DescribeBackupTasksResponseItemsBackupJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupTasksResponseItemsBackupJob) GoString() string {
	return s.String()
}

func (s *DescribeBackupTasksResponseItemsBackupJob) SetBackupProgressStatus(v string) *DescribeBackupTasksResponseItemsBackupJob {
	s.BackupProgressStatus = &v
	return s
}

func (s *DescribeBackupTasksResponseItemsBackupJob) SetBackupStatus(v string) *DescribeBackupTasksResponseItemsBackupJob {
	s.BackupStatus = &v
	return s
}

func (s *DescribeBackupTasksResponseItemsBackupJob) SetJobMode(v string) *DescribeBackupTasksResponseItemsBackupJob {
	s.JobMode = &v
	return s
}

func (s *DescribeBackupTasksResponseItemsBackupJob) SetProcess(v string) *DescribeBackupTasksResponseItemsBackupJob {
	s.Process = &v
	return s
}

func (s *DescribeBackupTasksResponseItemsBackupJob) SetTaskAction(v string) *DescribeBackupTasksResponseItemsBackupJob {
	s.TaskAction = &v
	return s
}

func (s *DescribeBackupTasksResponseItemsBackupJob) SetBackupJobId(v string) *DescribeBackupTasksResponseItemsBackupJob {
	s.BackupJobId = &v
	return s
}

func (s *DescribeBackupTasksResponseItemsBackupJob) SetBackupId(v string) *DescribeBackupTasksResponseItemsBackupJob {
	s.BackupId = &v
	return s
}

type DescribeBackupsRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupId     *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	BackupStatus *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty"`
	BackupMode   *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeBackupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupsRequest) SetDBInstanceId(v string) *DescribeBackupsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupsRequest) SetBackupId(v string) *DescribeBackupsRequest {
	s.BackupId = &v
	return s
}

func (s *DescribeBackupsRequest) SetBackupStatus(v string) *DescribeBackupsRequest {
	s.BackupStatus = &v
	return s
}

func (s *DescribeBackupsRequest) SetBackupMode(v string) *DescribeBackupsRequest {
	s.BackupMode = &v
	return s
}

func (s *DescribeBackupsRequest) SetStartTime(v string) *DescribeBackupsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeBackupsRequest) SetEndTime(v string) *DescribeBackupsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeBackupsRequest) SetPageSize(v int) *DescribeBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBackupsRequest) SetPageNumber(v int) *DescribeBackupsRequest {
	s.PageNumber = &v
	return s
}

type DescribeBackupsResponse struct {
	RequestId            *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount     *string                       `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber           *string                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount      *string                       `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	TotalEcsSnapshotSize *int64                        `json:"TotalEcsSnapshotSize,omitempty" xml:"TotalEcsSnapshotSize,omitempty" require:"true"`
	Items                *DescribeBackupsResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeBackupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupsResponse) SetRequestId(v string) *DescribeBackupsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBackupsResponse) SetTotalRecordCount(v string) *DescribeBackupsResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeBackupsResponse) SetPageNumber(v string) *DescribeBackupsResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeBackupsResponse) SetPageRecordCount(v string) *DescribeBackupsResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeBackupsResponse) SetTotalEcsSnapshotSize(v int64) *DescribeBackupsResponse {
	s.TotalEcsSnapshotSize = &v
	return s
}

func (s *DescribeBackupsResponse) SetItems(v *DescribeBackupsResponseItems) *DescribeBackupsResponse {
	s.Items = v
	return s
}

type DescribeBackupsResponseItems struct {
	Backup []*DescribeBackupsResponseItemsBackup `json:"Backup,omitempty" xml:"Backup,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeBackupsResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupsResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeBackupsResponseItems) SetBackup(v []*DescribeBackupsResponseItemsBackup) *DescribeBackupsResponseItems {
	s.Backup = v
	return s
}

type DescribeBackupsResponseItemsBackup struct {
	BackupId                  *string `json:"BackupId,omitempty" xml:"BackupId,omitempty" require:"true"`
	DBInstanceId              *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupStatus              *string `json:"BackupStatus,omitempty" xml:"BackupStatus,omitempty" require:"true"`
	BackupStartTime           *string `json:"BackupStartTime,omitempty" xml:"BackupStartTime,omitempty" require:"true"`
	BackupEndTime             *string `json:"BackupEndTime,omitempty" xml:"BackupEndTime,omitempty" require:"true"`
	BackupType                *string `json:"BackupType,omitempty" xml:"BackupType,omitempty" require:"true"`
	BackupMode                *string `json:"BackupMode,omitempty" xml:"BackupMode,omitempty" require:"true"`
	BackupMethod              *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty" require:"true"`
	BackupDownloadURL         *string `json:"BackupDownloadURL,omitempty" xml:"BackupDownloadURL,omitempty" require:"true"`
	BackupIntranetDownloadURL *string `json:"BackupIntranetDownloadURL,omitempty" xml:"BackupIntranetDownloadURL,omitempty" require:"true"`
	BackupSize                *int64  `json:"BackupSize,omitempty" xml:"BackupSize,omitempty" require:"true"`
	HostInstanceID            *string `json:"HostInstanceID,omitempty" xml:"HostInstanceID,omitempty" require:"true"`
	StoreStatus               *string `json:"StoreStatus,omitempty" xml:"StoreStatus,omitempty" require:"true"`
	MetaStatus                *string `json:"MetaStatus,omitempty" xml:"MetaStatus,omitempty" require:"true"`
	ConsistentTime            *int64  `json:"ConsistentTime,omitempty" xml:"ConsistentTime,omitempty" require:"true"`
	BackupInitiator           *string `json:"BackupInitiator,omitempty" xml:"BackupInitiator,omitempty" require:"true"`
	CopyOnlyBackup            *string `json:"CopyOnlyBackup,omitempty" xml:"CopyOnlyBackup,omitempty" require:"true"`
	StorageClass              *string `json:"StorageClass,omitempty" xml:"StorageClass,omitempty" require:"true"`
	IsAvail                   *int    `json:"IsAvail,omitempty" xml:"IsAvail,omitempty" require:"true"`
	Encryption                *string `json:"Encryption,omitempty" xml:"Encryption,omitempty" require:"true"`
}

func (s DescribeBackupsResponseItemsBackup) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupsResponseItemsBackup) GoString() string {
	return s.String()
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupId(v string) *DescribeBackupsResponseItemsBackup {
	s.BackupId = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetDBInstanceId(v string) *DescribeBackupsResponseItemsBackup {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupStatus(v string) *DescribeBackupsResponseItemsBackup {
	s.BackupStatus = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupStartTime(v string) *DescribeBackupsResponseItemsBackup {
	s.BackupStartTime = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupEndTime(v string) *DescribeBackupsResponseItemsBackup {
	s.BackupEndTime = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupType(v string) *DescribeBackupsResponseItemsBackup {
	s.BackupType = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupMode(v string) *DescribeBackupsResponseItemsBackup {
	s.BackupMode = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupMethod(v string) *DescribeBackupsResponseItemsBackup {
	s.BackupMethod = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupDownloadURL(v string) *DescribeBackupsResponseItemsBackup {
	s.BackupDownloadURL = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupIntranetDownloadURL(v string) *DescribeBackupsResponseItemsBackup {
	s.BackupIntranetDownloadURL = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupSize(v int64) *DescribeBackupsResponseItemsBackup {
	s.BackupSize = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetHostInstanceID(v string) *DescribeBackupsResponseItemsBackup {
	s.HostInstanceID = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetStoreStatus(v string) *DescribeBackupsResponseItemsBackup {
	s.StoreStatus = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetMetaStatus(v string) *DescribeBackupsResponseItemsBackup {
	s.MetaStatus = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetConsistentTime(v int64) *DescribeBackupsResponseItemsBackup {
	s.ConsistentTime = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetBackupInitiator(v string) *DescribeBackupsResponseItemsBackup {
	s.BackupInitiator = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetCopyOnlyBackup(v string) *DescribeBackupsResponseItemsBackup {
	s.CopyOnlyBackup = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetStorageClass(v string) *DescribeBackupsResponseItemsBackup {
	s.StorageClass = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetIsAvail(v int) *DescribeBackupsResponseItemsBackup {
	s.IsAvail = &v
	return s
}

func (s *DescribeBackupsResponseItemsBackup) SetEncryption(v string) *DescribeBackupsResponseItemsBackup {
	s.Encryption = &v
	return s
}

type DescribeBackupPolicyRequest struct {
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupPolicyMode   *string `json:"BackupPolicyMode,omitempty" xml:"BackupPolicyMode,omitempty"`
	CompressType       *string `json:"CompressType,omitempty" xml:"CompressType,omitempty"`
	ReleasedKeepPolicy *string `json:"ReleasedKeepPolicy,omitempty" xml:"ReleasedKeepPolicy,omitempty"`
}

func (s DescribeBackupPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyRequest) SetDBInstanceId(v string) *DescribeBackupPolicyRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeBackupPolicyRequest) SetBackupPolicyMode(v string) *DescribeBackupPolicyRequest {
	s.BackupPolicyMode = &v
	return s
}

func (s *DescribeBackupPolicyRequest) SetCompressType(v string) *DescribeBackupPolicyRequest {
	s.CompressType = &v
	return s
}

func (s *DescribeBackupPolicyRequest) SetReleasedKeepPolicy(v string) *DescribeBackupPolicyRequest {
	s.ReleasedKeepPolicy = &v
	return s
}

type DescribeBackupPolicyResponse struct {
	RequestId                     *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	BackupRetentionPeriod         *int                                             `json:"BackupRetentionPeriod,omitempty" xml:"BackupRetentionPeriod,omitempty" require:"true"`
	PreferredNextBackupTime       *string                                          `json:"PreferredNextBackupTime,omitempty" xml:"PreferredNextBackupTime,omitempty" require:"true"`
	PreferredBackupTime           *string                                          `json:"PreferredBackupTime,omitempty" xml:"PreferredBackupTime,omitempty" require:"true"`
	PreferredBackupPeriod         *string                                          `json:"PreferredBackupPeriod,omitempty" xml:"PreferredBackupPeriod,omitempty" require:"true"`
	BackupLog                     *string                                          `json:"BackupLog,omitempty" xml:"BackupLog,omitempty" require:"true"`
	LogBackupRetentionPeriod      *int                                             `json:"LogBackupRetentionPeriod,omitempty" xml:"LogBackupRetentionPeriod,omitempty" require:"true"`
	EnableBackupLog               *string                                          `json:"EnableBackupLog,omitempty" xml:"EnableBackupLog,omitempty" require:"true"`
	LocalLogRetentionHours        *int                                             `json:"LocalLogRetentionHours,omitempty" xml:"LocalLogRetentionHours,omitempty" require:"true"`
	LocalLogRetentionSpace        *string                                          `json:"LocalLogRetentionSpace,omitempty" xml:"LocalLogRetentionSpace,omitempty" require:"true"`
	Duplication                   *string                                          `json:"Duplication,omitempty" xml:"Duplication,omitempty" require:"true"`
	DuplicationContent            *string                                          `json:"DuplicationContent,omitempty" xml:"DuplicationContent,omitempty" require:"true"`
	HighSpaceUsageProtection      *string                                          `json:"HighSpaceUsageProtection,omitempty" xml:"HighSpaceUsageProtection,omitempty" require:"true"`
	LogBackupFrequency            *string                                          `json:"LogBackupFrequency,omitempty" xml:"LogBackupFrequency,omitempty" require:"true"`
	CompressType                  *string                                          `json:"CompressType,omitempty" xml:"CompressType,omitempty" require:"true"`
	ArchiveBackupRetentionPeriod  *string                                          `json:"ArchiveBackupRetentionPeriod,omitempty" xml:"ArchiveBackupRetentionPeriod,omitempty" require:"true"`
	ArchiveBackupKeepPolicy       *string                                          `json:"ArchiveBackupKeepPolicy,omitempty" xml:"ArchiveBackupKeepPolicy,omitempty" require:"true"`
	ArchiveBackupKeepCount        *string                                          `json:"ArchiveBackupKeepCount,omitempty" xml:"ArchiveBackupKeepCount,omitempty" require:"true"`
	ReleasedKeepPolicy            *string                                          `json:"ReleasedKeepPolicy,omitempty" xml:"ReleasedKeepPolicy,omitempty" require:"true"`
	LogBackupLocalRetentionNumber *int                                             `json:"LogBackupLocalRetentionNumber,omitempty" xml:"LogBackupLocalRetentionNumber,omitempty" require:"true"`
	Category                      *string                                          `json:"Category,omitempty" xml:"Category,omitempty" require:"true"`
	SupportReleasedKeep           *int                                             `json:"SupportReleasedKeep,omitempty" xml:"SupportReleasedKeep,omitempty" require:"true"`
	BackupInterval                *string                                          `json:"BackupInterval,omitempty" xml:"BackupInterval,omitempty" require:"true"`
	DuplicationLocation           *DescribeBackupPolicyResponseDuplicationLocation `json:"DuplicationLocation,omitempty" xml:"DuplicationLocation,omitempty" require:"true" type:"Struct"`
}

func (s DescribeBackupPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponse) SetRequestId(v string) *DescribeBackupPolicyResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetBackupRetentionPeriod(v int) *DescribeBackupPolicyResponse {
	s.BackupRetentionPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetPreferredNextBackupTime(v string) *DescribeBackupPolicyResponse {
	s.PreferredNextBackupTime = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetPreferredBackupTime(v string) *DescribeBackupPolicyResponse {
	s.PreferredBackupTime = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetPreferredBackupPeriod(v string) *DescribeBackupPolicyResponse {
	s.PreferredBackupPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetBackupLog(v string) *DescribeBackupPolicyResponse {
	s.BackupLog = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetLogBackupRetentionPeriod(v int) *DescribeBackupPolicyResponse {
	s.LogBackupRetentionPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetEnableBackupLog(v string) *DescribeBackupPolicyResponse {
	s.EnableBackupLog = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetLocalLogRetentionHours(v int) *DescribeBackupPolicyResponse {
	s.LocalLogRetentionHours = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetLocalLogRetentionSpace(v string) *DescribeBackupPolicyResponse {
	s.LocalLogRetentionSpace = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetDuplication(v string) *DescribeBackupPolicyResponse {
	s.Duplication = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetDuplicationContent(v string) *DescribeBackupPolicyResponse {
	s.DuplicationContent = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetHighSpaceUsageProtection(v string) *DescribeBackupPolicyResponse {
	s.HighSpaceUsageProtection = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetLogBackupFrequency(v string) *DescribeBackupPolicyResponse {
	s.LogBackupFrequency = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetCompressType(v string) *DescribeBackupPolicyResponse {
	s.CompressType = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetArchiveBackupRetentionPeriod(v string) *DescribeBackupPolicyResponse {
	s.ArchiveBackupRetentionPeriod = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetArchiveBackupKeepPolicy(v string) *DescribeBackupPolicyResponse {
	s.ArchiveBackupKeepPolicy = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetArchiveBackupKeepCount(v string) *DescribeBackupPolicyResponse {
	s.ArchiveBackupKeepCount = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetReleasedKeepPolicy(v string) *DescribeBackupPolicyResponse {
	s.ReleasedKeepPolicy = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetLogBackupLocalRetentionNumber(v int) *DescribeBackupPolicyResponse {
	s.LogBackupLocalRetentionNumber = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetCategory(v string) *DescribeBackupPolicyResponse {
	s.Category = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetSupportReleasedKeep(v int) *DescribeBackupPolicyResponse {
	s.SupportReleasedKeep = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetBackupInterval(v string) *DescribeBackupPolicyResponse {
	s.BackupInterval = &v
	return s
}

func (s *DescribeBackupPolicyResponse) SetDuplicationLocation(v *DescribeBackupPolicyResponseDuplicationLocation) *DescribeBackupPolicyResponse {
	s.DuplicationLocation = v
	return s
}

type DescribeBackupPolicyResponseDuplicationLocation struct {
	Sotrage  *string                                                  `json:"Sotrage,omitempty" xml:"Sotrage,omitempty" require:"true"`
	Location *DescribeBackupPolicyResponseDuplicationLocationLocation `json:"Location,omitempty" xml:"Location,omitempty" require:"true" type:"Struct"`
}

func (s DescribeBackupPolicyResponseDuplicationLocation) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyResponseDuplicationLocation) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponseDuplicationLocation) SetSotrage(v string) *DescribeBackupPolicyResponseDuplicationLocation {
	s.Sotrage = &v
	return s
}

func (s *DescribeBackupPolicyResponseDuplicationLocation) SetLocation(v *DescribeBackupPolicyResponseDuplicationLocationLocation) *DescribeBackupPolicyResponseDuplicationLocation {
	s.Location = v
	return s
}

type DescribeBackupPolicyResponseDuplicationLocationLocation struct {
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty" require:"true"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty" require:"true"`
}

func (s DescribeBackupPolicyResponseDuplicationLocationLocation) String() string {
	return tea.Prettify(s)
}

func (s DescribeBackupPolicyResponseDuplicationLocationLocation) GoString() string {
	return s.String()
}

func (s *DescribeBackupPolicyResponseDuplicationLocationLocation) SetEndpoint(v string) *DescribeBackupPolicyResponseDuplicationLocationLocation {
	s.Endpoint = &v
	return s
}

func (s *DescribeBackupPolicyResponseDuplicationLocationLocation) SetBucket(v string) *DescribeBackupPolicyResponseDuplicationLocationLocation {
	s.Bucket = &v
	return s
}

type DescribeAccountsRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName  *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescribeAccountsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAccountsRequest) SetDBInstanceId(v string) *DescribeAccountsRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeAccountsRequest) SetAccountName(v string) *DescribeAccountsRequest {
	s.AccountName = &v
	return s
}

func (s *DescribeAccountsRequest) SetPageSize(v int) *DescribeAccountsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAccountsRequest) SetPageNumber(v int) *DescribeAccountsRequest {
	s.PageNumber = &v
	return s
}

type DescribeAccountsResponse struct {
	RequestId                             *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	SystemAdminAccountStatus              *string                           `json:"SystemAdminAccountStatus,omitempty" xml:"SystemAdminAccountStatus,omitempty" require:"true"`
	SystemAdminAccountFirstActivationTime *string                           `json:"SystemAdminAccountFirstActivationTime,omitempty" xml:"SystemAdminAccountFirstActivationTime,omitempty" require:"true"`
	Accounts                              *DescribeAccountsResponseAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAccountsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponse) SetRequestId(v string) *DescribeAccountsResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeAccountsResponse) SetSystemAdminAccountStatus(v string) *DescribeAccountsResponse {
	s.SystemAdminAccountStatus = &v
	return s
}

func (s *DescribeAccountsResponse) SetSystemAdminAccountFirstActivationTime(v string) *DescribeAccountsResponse {
	s.SystemAdminAccountFirstActivationTime = &v
	return s
}

func (s *DescribeAccountsResponse) SetAccounts(v *DescribeAccountsResponseAccounts) *DescribeAccountsResponse {
	s.Accounts = v
	return s
}

type DescribeAccountsResponseAccounts struct {
	DBInstanceAccount []*DescribeAccountsResponseAccountsDBInstanceAccount `json:"DBInstanceAccount,omitempty" xml:"DBInstanceAccount,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAccountsResponseAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseAccounts) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseAccounts) SetDBInstanceAccount(v []*DescribeAccountsResponseAccountsDBInstanceAccount) *DescribeAccountsResponseAccounts {
	s.DBInstanceAccount = v
	return s
}

type DescribeAccountsResponseAccountsDBInstanceAccount struct {
	DBInstanceId       *string                                                              `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName        *string                                                              `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountStatus      *string                                                              `json:"AccountStatus,omitempty" xml:"AccountStatus,omitempty" require:"true"`
	AccountType        *string                                                              `json:"AccountType,omitempty" xml:"AccountType,omitempty" require:"true"`
	AccountDescription *string                                                              `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty" require:"true"`
	PrivExceeded       *string                                                              `json:"PrivExceeded,omitempty" xml:"PrivExceeded,omitempty" require:"true"`
	DatabasePrivileges *DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivileges `json:"DatabasePrivileges,omitempty" xml:"DatabasePrivileges,omitempty" require:"true" type:"Struct"`
}

func (s DescribeAccountsResponseAccountsDBInstanceAccount) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseAccountsDBInstanceAccount) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccount) SetDBInstanceId(v string) *DescribeAccountsResponseAccountsDBInstanceAccount {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccount) SetAccountName(v string) *DescribeAccountsResponseAccountsDBInstanceAccount {
	s.AccountName = &v
	return s
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccount) SetAccountStatus(v string) *DescribeAccountsResponseAccountsDBInstanceAccount {
	s.AccountStatus = &v
	return s
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccount) SetAccountType(v string) *DescribeAccountsResponseAccountsDBInstanceAccount {
	s.AccountType = &v
	return s
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccount) SetAccountDescription(v string) *DescribeAccountsResponseAccountsDBInstanceAccount {
	s.AccountDescription = &v
	return s
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccount) SetPrivExceeded(v string) *DescribeAccountsResponseAccountsDBInstanceAccount {
	s.PrivExceeded = &v
	return s
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccount) SetDatabasePrivileges(v *DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivileges) *DescribeAccountsResponseAccountsDBInstanceAccount {
	s.DatabasePrivileges = v
	return s
}

type DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivileges struct {
	DatabasePrivilege []*DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege `json:"DatabasePrivilege,omitempty" xml:"DatabasePrivilege,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivileges) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivileges) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivileges) SetDatabasePrivilege(v []*DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) *DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivileges {
	s.DatabasePrivilege = v
	return s
}

type DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege struct {
	DBName                 *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	AccountPrivilege       *string `json:"AccountPrivilege,omitempty" xml:"AccountPrivilege,omitempty" require:"true"`
	AccountPrivilegeDetail *string `json:"AccountPrivilegeDetail,omitempty" xml:"AccountPrivilegeDetail,omitempty" require:"true"`
}

func (s DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) String() string {
	return tea.Prettify(s)
}

func (s DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) GoString() string {
	return s.String()
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) SetDBName(v string) *DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege {
	s.DBName = &v
	return s
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) SetAccountPrivilege(v string) *DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege {
	s.AccountPrivilege = &v
	return s
}

func (s *DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege) SetAccountPrivilegeDetail(v string) *DescribeAccountsResponseAccountsDBInstanceAccountDatabasePrivilegesDatabasePrivilege {
	s.AccountPrivilegeDetail = &v
	return s
}

type DescibeImportsFromDatabaseRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Engine       *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	ImportId     *int    `json:"ImportId,omitempty" xml:"ImportId,omitempty"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	EndTime      *string `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s DescibeImportsFromDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DescibeImportsFromDatabaseRequest) GoString() string {
	return s.String()
}

func (s *DescibeImportsFromDatabaseRequest) SetClientToken(v string) *DescibeImportsFromDatabaseRequest {
	s.ClientToken = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetDBInstanceId(v string) *DescibeImportsFromDatabaseRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetEngine(v string) *DescibeImportsFromDatabaseRequest {
	s.Engine = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetImportId(v int) *DescibeImportsFromDatabaseRequest {
	s.ImportId = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetStartTime(v string) *DescibeImportsFromDatabaseRequest {
	s.StartTime = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetEndTime(v string) *DescibeImportsFromDatabaseRequest {
	s.EndTime = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetPageSize(v int) *DescibeImportsFromDatabaseRequest {
	s.PageSize = &v
	return s
}

func (s *DescibeImportsFromDatabaseRequest) SetPageNumber(v int) *DescibeImportsFromDatabaseRequest {
	s.PageNumber = &v
	return s
}

type DescibeImportsFromDatabaseResponse struct {
	RequestId        *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalRecordCount *int                                     `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageNumber       *int                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageRecordCount  *int                                     `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescibeImportsFromDatabaseResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescibeImportsFromDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DescibeImportsFromDatabaseResponse) GoString() string {
	return s.String()
}

func (s *DescibeImportsFromDatabaseResponse) SetRequestId(v string) *DescibeImportsFromDatabaseResponse {
	s.RequestId = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponse) SetTotalRecordCount(v int) *DescibeImportsFromDatabaseResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponse) SetPageNumber(v int) *DescibeImportsFromDatabaseResponse {
	s.PageNumber = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponse) SetPageRecordCount(v int) *DescibeImportsFromDatabaseResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponse) SetItems(v *DescibeImportsFromDatabaseResponseItems) *DescibeImportsFromDatabaseResponse {
	s.Items = v
	return s
}

type DescibeImportsFromDatabaseResponseItems struct {
	ImportResultFromDB []*DescibeImportsFromDatabaseResponseItemsImportResultFromDB `json:"ImportResultFromDB,omitempty" xml:"ImportResultFromDB,omitempty" require:"true" type:"Repeated"`
}

func (s DescibeImportsFromDatabaseResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescibeImportsFromDatabaseResponseItems) GoString() string {
	return s.String()
}

func (s *DescibeImportsFromDatabaseResponseItems) SetImportResultFromDB(v []*DescibeImportsFromDatabaseResponseItemsImportResultFromDB) *DescibeImportsFromDatabaseResponseItems {
	s.ImportResultFromDB = v
	return s
}

type DescibeImportsFromDatabaseResponseItemsImportResultFromDB struct {
	ImportId                    *int    `json:"ImportId,omitempty" xml:"ImportId,omitempty" require:"true"`
	ImportDataType              *string `json:"ImportDataType,omitempty" xml:"ImportDataType,omitempty" require:"true"`
	ImportDataStatus            *string `json:"ImportDataStatus,omitempty" xml:"ImportDataStatus,omitempty" require:"true"`
	ImportDataStatusDescription *string `json:"ImportDataStatusDescription,omitempty" xml:"ImportDataStatusDescription,omitempty" require:"true"`
	IncrementalImportingTime    *string `json:"IncrementalImportingTime,omitempty" xml:"IncrementalImportingTime,omitempty" require:"true"`
}

func (s DescibeImportsFromDatabaseResponseItemsImportResultFromDB) String() string {
	return tea.Prettify(s)
}

func (s DescibeImportsFromDatabaseResponseItemsImportResultFromDB) GoString() string {
	return s.String()
}

func (s *DescibeImportsFromDatabaseResponseItemsImportResultFromDB) SetImportId(v int) *DescibeImportsFromDatabaseResponseItemsImportResultFromDB {
	s.ImportId = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseItemsImportResultFromDB) SetImportDataType(v string) *DescibeImportsFromDatabaseResponseItemsImportResultFromDB {
	s.ImportDataType = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseItemsImportResultFromDB) SetImportDataStatus(v string) *DescibeImportsFromDatabaseResponseItemsImportResultFromDB {
	s.ImportDataStatus = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseItemsImportResultFromDB) SetImportDataStatusDescription(v string) *DescibeImportsFromDatabaseResponseItemsImportResultFromDB {
	s.ImportDataStatusDescription = &v
	return s
}

func (s *DescibeImportsFromDatabaseResponseItemsImportResultFromDB) SetIncrementalImportingTime(v string) *DescibeImportsFromDatabaseResponseItemsImportResultFromDB {
	s.IncrementalImportingTime = &v
	return s
}

type DeleteDBInstanceRequest struct {
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ReleasedKeepPolicy *string `json:"ReleasedKeepPolicy,omitempty" xml:"ReleasedKeepPolicy,omitempty"`
}

func (s DeleteDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceRequest) SetDBInstanceId(v string) *DeleteDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDBInstanceRequest) SetReleasedKeepPolicy(v string) *DeleteDBInstanceRequest {
	s.ReleasedKeepPolicy = &v
	return s
}

type DeleteDBInstanceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s DeleteDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDBInstanceResponse) SetRequestId(v string) *DeleteDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *DeleteDBInstanceResponse) SetRegionId(v string) *DeleteDBInstanceResponse {
	s.RegionId = &v
	return s
}

type DeleteDatabaseRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBName       *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
}

func (s DeleteDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseRequest) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseRequest) SetDBInstanceId(v string) *DeleteDatabaseRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteDatabaseRequest) SetDBName(v string) *DeleteDatabaseRequest {
	s.DBName = &v
	return s
}

type DeleteDatabaseResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDatabaseResponse) GoString() string {
	return s.String()
}

func (s *DeleteDatabaseResponse) SetRequestId(v string) *DeleteDatabaseResponse {
	s.RequestId = &v
	return s
}

type DeleteAccountRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName  *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
}

func (s DeleteAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccountRequest) GoString() string {
	return s.String()
}

func (s *DeleteAccountRequest) SetDBInstanceId(v string) *DeleteAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DeleteAccountRequest) SetAccountName(v string) *DeleteAccountRequest {
	s.AccountName = &v
	return s
}

type DeleteAccountResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAccountResponse) GoString() string {
	return s.String()
}

func (s *DeleteAccountResponse) SetRequestId(v string) *DeleteAccountResponse {
	s.RequestId = &v
	return s
}

type CreateTempDBInstanceRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	BackupId     *int    `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	RestoreTime  *string `json:"RestoreTime,omitempty" xml:"RestoreTime,omitempty"`
}

func (s CreateTempDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTempDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateTempDBInstanceRequest) SetDBInstanceId(v string) *CreateTempDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateTempDBInstanceRequest) SetBackupId(v int) *CreateTempDBInstanceRequest {
	s.BackupId = &v
	return s
}

func (s *CreateTempDBInstanceRequest) SetRestoreTime(v string) *CreateTempDBInstanceRequest {
	s.RestoreTime = &v
	return s
}

type CreateTempDBInstanceResponse struct {
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TempDBInstanceId *string `json:"TempDBInstanceId,omitempty" xml:"TempDBInstanceId,omitempty" require:"true"`
}

func (s CreateTempDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTempDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateTempDBInstanceResponse) SetRequestId(v string) *CreateTempDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateTempDBInstanceResponse) SetTempDBInstanceId(v string) *CreateTempDBInstanceResponse {
	s.TempDBInstanceId = &v
	return s
}

type CreateDatabaseRequest struct {
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBName           *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
	CharacterSetName *string `json:"CharacterSetName,omitempty" xml:"CharacterSetName,omitempty" require:"true"`
	DBDescription    *string `json:"DBDescription,omitempty" xml:"DBDescription,omitempty"`
}

func (s CreateDatabaseRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseRequest) GoString() string {
	return s.String()
}

func (s *CreateDatabaseRequest) SetDBInstanceId(v string) *CreateDatabaseRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDatabaseRequest) SetDBName(v string) *CreateDatabaseRequest {
	s.DBName = &v
	return s
}

func (s *CreateDatabaseRequest) SetCharacterSetName(v string) *CreateDatabaseRequest {
	s.CharacterSetName = &v
	return s
}

func (s *CreateDatabaseRequest) SetDBDescription(v string) *CreateDatabaseRequest {
	s.DBDescription = &v
	return s
}

type CreateDatabaseResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateDatabaseResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDatabaseResponse) GoString() string {
	return s.String()
}

func (s *CreateDatabaseResponse) SetRequestId(v string) *CreateDatabaseResponse {
	s.RequestId = &v
	return s
}

type CreateBackupRequest struct {
	DBInstanceId   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBName         *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	BackupStrategy *string `json:"BackupStrategy,omitempty" xml:"BackupStrategy,omitempty"`
	BackupMethod   *string `json:"BackupMethod,omitempty" xml:"BackupMethod,omitempty"`
	BackupType     *string `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
}

func (s CreateBackupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupRequest) GoString() string {
	return s.String()
}

func (s *CreateBackupRequest) SetDBInstanceId(v string) *CreateBackupRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateBackupRequest) SetDBName(v string) *CreateBackupRequest {
	s.DBName = &v
	return s
}

func (s *CreateBackupRequest) SetBackupStrategy(v string) *CreateBackupRequest {
	s.BackupStrategy = &v
	return s
}

func (s *CreateBackupRequest) SetBackupMethod(v string) *CreateBackupRequest {
	s.BackupMethod = &v
	return s
}

func (s *CreateBackupRequest) SetBackupType(v string) *CreateBackupRequest {
	s.BackupType = &v
	return s
}

type CreateBackupResponse struct {
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	BackupJobId *string `json:"BackupJobId,omitempty" xml:"BackupJobId,omitempty" require:"true"`
}

func (s CreateBackupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupResponse) GoString() string {
	return s.String()
}

func (s *CreateBackupResponse) SetRequestId(v string) *CreateBackupResponse {
	s.RequestId = &v
	return s
}

func (s *CreateBackupResponse) SetBackupJobId(v string) *CreateBackupResponse {
	s.BackupJobId = &v
	return s
}

type CreateAccountRequest struct {
	DBInstanceId       *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName        *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
	AccountPassword    *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty" require:"true"`
	AccountDescription *string `json:"AccountDescription,omitempty" xml:"AccountDescription,omitempty"`
	AccountType        *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
}

func (s CreateAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateAccountRequest) SetDBInstanceId(v string) *CreateAccountRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateAccountRequest) SetAccountName(v string) *CreateAccountRequest {
	s.AccountName = &v
	return s
}

func (s *CreateAccountRequest) SetAccountPassword(v string) *CreateAccountRequest {
	s.AccountPassword = &v
	return s
}

func (s *CreateAccountRequest) SetAccountDescription(v string) *CreateAccountRequest {
	s.AccountDescription = &v
	return s
}

func (s *CreateAccountRequest) SetAccountType(v string) *CreateAccountRequest {
	s.AccountType = &v
	return s
}

type CreateAccountResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateAccountResponse) SetRequestId(v string) *CreateAccountResponse {
	s.RequestId = &v
	return s
}

type CheckDBNameAvailableRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBName       *string `json:"DBName,omitempty" xml:"DBName,omitempty" require:"true"`
}

func (s CheckDBNameAvailableRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckDBNameAvailableRequest) GoString() string {
	return s.String()
}

func (s *CheckDBNameAvailableRequest) SetClientToken(v string) *CheckDBNameAvailableRequest {
	s.ClientToken = &v
	return s
}

func (s *CheckDBNameAvailableRequest) SetDBInstanceId(v string) *CheckDBNameAvailableRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckDBNameAvailableRequest) SetDBName(v string) *CheckDBNameAvailableRequest {
	s.DBName = &v
	return s
}

type CheckDBNameAvailableResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CheckDBNameAvailableResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckDBNameAvailableResponse) GoString() string {
	return s.String()
}

func (s *CheckDBNameAvailableResponse) SetRequestId(v string) *CheckDBNameAvailableResponse {
	s.RequestId = &v
	return s
}

type CheckAccountNameAvailableRequest struct {
	ClientToken  *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	AccountName  *string `json:"AccountName,omitempty" xml:"AccountName,omitempty" require:"true"`
}

func (s CheckAccountNameAvailableRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckAccountNameAvailableRequest) GoString() string {
	return s.String()
}

func (s *CheckAccountNameAvailableRequest) SetClientToken(v string) *CheckAccountNameAvailableRequest {
	s.ClientToken = &v
	return s
}

func (s *CheckAccountNameAvailableRequest) SetDBInstanceId(v string) *CheckAccountNameAvailableRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CheckAccountNameAvailableRequest) SetAccountName(v string) *CheckAccountNameAvailableRequest {
	s.AccountName = &v
	return s
}

type CheckAccountNameAvailableResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CheckAccountNameAvailableResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckAccountNameAvailableResponse) GoString() string {
	return s.String()
}

func (s *CheckAccountNameAvailableResponse) SetRequestId(v string) *CheckAccountNameAvailableResponse {
	s.RequestId = &v
	return s
}

type CancelImportRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ImportId     *int    `json:"ImportId,omitempty" xml:"ImportId,omitempty" require:"true"`
}

func (s CancelImportRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelImportRequest) GoString() string {
	return s.String()
}

func (s *CancelImportRequest) SetDBInstanceId(v string) *CancelImportRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CancelImportRequest) SetImportId(v int) *CancelImportRequest {
	s.ImportId = &v
	return s
}

type CancelImportResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CancelImportResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelImportResponse) GoString() string {
	return s.String()
}

func (s *CancelImportResponse) SetRequestId(v string) *CancelImportResponse {
	s.RequestId = &v
	return s
}

type AddTagsToResourceRequest struct {
	ClientToken  *string                        `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId      *string                        `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	RegionId     *string                        `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	DBInstanceId *string                        `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Tags         *string                        `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Tag          []*AddTagsToResourceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s AddTagsToResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTagsToResourceRequest) GoString() string {
	return s.String()
}

func (s *AddTagsToResourceRequest) SetClientToken(v string) *AddTagsToResourceRequest {
	s.ClientToken = &v
	return s
}

func (s *AddTagsToResourceRequest) SetProxyId(v string) *AddTagsToResourceRequest {
	s.ProxyId = &v
	return s
}

func (s *AddTagsToResourceRequest) SetRegionId(v string) *AddTagsToResourceRequest {
	s.RegionId = &v
	return s
}

func (s *AddTagsToResourceRequest) SetDBInstanceId(v string) *AddTagsToResourceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *AddTagsToResourceRequest) SetTags(v string) *AddTagsToResourceRequest {
	s.Tags = &v
	return s
}

func (s *AddTagsToResourceRequest) SetTag(v []*AddTagsToResourceRequestTag) *AddTagsToResourceRequest {
	s.Tag = v
	return s
}

type AddTagsToResourceRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s AddTagsToResourceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s AddTagsToResourceRequestTag) GoString() string {
	return s.String()
}

func (s *AddTagsToResourceRequestTag) SetKey(v string) *AddTagsToResourceRequestTag {
	s.Key = &v
	return s
}

func (s *AddTagsToResourceRequestTag) SetValue(v string) *AddTagsToResourceRequestTag {
	s.Value = &v
	return s
}

type AddTagsToResourceResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AddTagsToResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTagsToResourceResponse) GoString() string {
	return s.String()
}

func (s *AddTagsToResourceResponse) SetRequestId(v string) *AddTagsToResourceResponse {
	s.RequestId = &v
	return s
}

type SwitchDBInstanceNetTypeRequest struct {
	ClientToken            *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty" require:"true"`
	Port                   *string `json:"Port,omitempty" xml:"Port,omitempty"`
	ConnectionStringType   *string `json:"ConnectionStringType,omitempty" xml:"ConnectionStringType,omitempty"`
}

func (s SwitchDBInstanceNetTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceNetTypeRequest) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeRequest) SetClientToken(v string) *SwitchDBInstanceNetTypeRequest {
	s.ClientToken = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetDBInstanceId(v string) *SwitchDBInstanceNetTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetConnectionStringPrefix(v string) *SwitchDBInstanceNetTypeRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetPort(v string) *SwitchDBInstanceNetTypeRequest {
	s.Port = &v
	return s
}

func (s *SwitchDBInstanceNetTypeRequest) SetConnectionStringType(v string) *SwitchDBInstanceNetTypeRequest {
	s.ConnectionStringType = &v
	return s
}

type SwitchDBInstanceNetTypeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s SwitchDBInstanceNetTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchDBInstanceNetTypeResponse) GoString() string {
	return s.String()
}

func (s *SwitchDBInstanceNetTypeResponse) SetRequestId(v string) *SwitchDBInstanceNetTypeResponse {
	s.RequestId = &v
	return s
}

type ReleaseInstancePublicConnectionRequest struct {
	DBInstanceId            *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	CurrentConnectionString *string `json:"CurrentConnectionString,omitempty" xml:"CurrentConnectionString,omitempty" require:"true"`
}

func (s ReleaseInstancePublicConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstancePublicConnectionRequest) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionRequest) SetDBInstanceId(v string) *ReleaseInstancePublicConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ReleaseInstancePublicConnectionRequest) SetCurrentConnectionString(v string) *ReleaseInstancePublicConnectionRequest {
	s.CurrentConnectionString = &v
	return s
}

type ReleaseInstancePublicConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ReleaseInstancePublicConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstancePublicConnectionResponse) GoString() string {
	return s.String()
}

func (s *ReleaseInstancePublicConnectionResponse) SetRequestId(v string) *ReleaseInstancePublicConnectionResponse {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceNetworkTypeRequest struct {
	DBInstanceId                         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	RetainClassic                        *string `json:"RetainClassic,omitempty" xml:"RetainClassic,omitempty"`
	ClassicExpiredDays                   *string `json:"ClassicExpiredDays,omitempty" xml:"ClassicExpiredDays,omitempty"`
	InstanceNetworkType                  *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty" require:"true"`
	ReadWriteSplittingClassicExpiredDays *int    `json:"ReadWriteSplittingClassicExpiredDays,omitempty" xml:"ReadWriteSplittingClassicExpiredDays,omitempty"`
	VPCId                                *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId                            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress                     *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	ReadWriteSplittingPrivateIpAddress   *string `json:"ReadWriteSplittingPrivateIpAddress,omitempty" xml:"ReadWriteSplittingPrivateIpAddress,omitempty"`
}

func (s ModifyDBInstanceNetworkTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetDBInstanceId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetRetainClassic(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.RetainClassic = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetClassicExpiredDays(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.ClassicExpiredDays = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetInstanceNetworkType(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetReadWriteSplittingClassicExpiredDays(v int) *ModifyDBInstanceNetworkTypeRequest {
	s.ReadWriteSplittingClassicExpiredDays = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetVPCId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.VPCId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetVSwitchId(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetPrivateIpAddress(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeRequest) SetReadWriteSplittingPrivateIpAddress(v string) *ModifyDBInstanceNetworkTypeRequest {
	s.ReadWriteSplittingPrivateIpAddress = &v
	return s
}

type ModifyDBInstanceNetworkTypeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s ModifyDBInstanceNetworkTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceNetworkTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceNetworkTypeResponse) SetRequestId(v string) *ModifyDBInstanceNetworkTypeResponse {
	s.RequestId = &v
	return s
}

func (s *ModifyDBInstanceNetworkTypeResponse) SetTaskId(v string) *ModifyDBInstanceNetworkTypeResponse {
	s.TaskId = &v
	return s
}

type ModifyDBInstanceConnectionStringRequest struct {
	DBInstanceId            *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	CurrentConnectionString *string `json:"CurrentConnectionString,omitempty" xml:"CurrentConnectionString,omitempty" require:"true"`
	ConnectionStringPrefix  *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty" require:"true"`
	Port                    *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
}

func (s ModifyDBInstanceConnectionStringRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringRequest) SetDBInstanceId(v string) *ModifyDBInstanceConnectionStringRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetCurrentConnectionString(v string) *ModifyDBInstanceConnectionStringRequest {
	s.CurrentConnectionString = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetConnectionStringPrefix(v string) *ModifyDBInstanceConnectionStringRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *ModifyDBInstanceConnectionStringRequest) SetPort(v string) *ModifyDBInstanceConnectionStringRequest {
	s.Port = &v
	return s
}

type ModifyDBInstanceConnectionStringResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceConnectionStringResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionStringResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionStringResponse) SetRequestId(v string) *ModifyDBInstanceConnectionStringResponse {
	s.RequestId = &v
	return s
}

type ModifyDBInstanceConnectionModeRequest struct {
	DBInstanceId   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ConnectionMode *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty" require:"true"`
}

func (s ModifyDBInstanceConnectionModeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionModeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionModeRequest) SetDBInstanceId(v string) *ModifyDBInstanceConnectionModeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *ModifyDBInstanceConnectionModeRequest) SetConnectionMode(v string) *ModifyDBInstanceConnectionModeRequest {
	s.ConnectionMode = &v
	return s
}

type ModifyDBInstanceConnectionModeResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyDBInstanceConnectionModeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDBInstanceConnectionModeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDBInstanceConnectionModeResponse) SetRequestId(v string) *ModifyDBInstanceConnectionModeResponse {
	s.RequestId = &v
	return s
}

type DescribeDBInstanceNetInfoRequest struct {
	ClientToken              *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DBInstanceId             *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Flag                     *int    `json:"Flag,omitempty" xml:"Flag,omitempty"`
	DBInstanceNetRWSplitType *string `json:"DBInstanceNetRWSplitType,omitempty" xml:"DBInstanceNetRWSplitType,omitempty"`
}

func (s DescribeDBInstanceNetInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoRequest) SetClientToken(v string) *DescribeDBInstanceNetInfoRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetDBInstanceId(v string) *DescribeDBInstanceNetInfoRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetFlag(v int) *DescribeDBInstanceNetInfoRequest {
	s.Flag = &v
	return s
}

func (s *DescribeDBInstanceNetInfoRequest) SetDBInstanceNetRWSplitType(v string) *DescribeDBInstanceNetInfoRequest {
	s.DBInstanceNetRWSplitType = &v
	return s
}

type DescribeDBInstanceNetInfoResponse struct {
	RequestId           *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	InstanceNetworkType *string                                              `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty" require:"true"`
	SecurityIPMode      *string                                              `json:"SecurityIPMode,omitempty" xml:"SecurityIPMode,omitempty" require:"true"`
	DBInstanceNetInfos  *DescribeDBInstanceNetInfoResponseDBInstanceNetInfos `json:"DBInstanceNetInfos,omitempty" xml:"DBInstanceNetInfos,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstanceNetInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponse) SetRequestId(v string) *DescribeDBInstanceNetInfoResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponse) SetInstanceNetworkType(v string) *DescribeDBInstanceNetInfoResponse {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponse) SetSecurityIPMode(v string) *DescribeDBInstanceNetInfoResponse {
	s.SecurityIPMode = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponse) SetDBInstanceNetInfos(v *DescribeDBInstanceNetInfoResponseDBInstanceNetInfos) *DescribeDBInstanceNetInfoResponse {
	s.DBInstanceNetInfos = v
	return s
}

type DescribeDBInstanceNetInfoResponseDBInstanceNetInfos struct {
	DBInstanceNetInfo []*DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo `json:"DBInstanceNetInfo,omitempty" xml:"DBInstanceNetInfo,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfos) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfos) SetDBInstanceNetInfo(v []*DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfos {
	s.DBInstanceNetInfo = v
	return s
}

type DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo struct {
	Upgradeable          *string                                                                                `json:"Upgradeable,omitempty" xml:"Upgradeable,omitempty" require:"true"`
	ExpiredTime          *string                                                                                `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty" require:"true"`
	ConnectionString     *string                                                                                `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	IPAddress            *string                                                                                `json:"IPAddress,omitempty" xml:"IPAddress,omitempty" require:"true"`
	IPType               *string                                                                                `json:"IPType,omitempty" xml:"IPType,omitempty" require:"true"`
	Port                 *string                                                                                `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	VPCId                *string                                                                                `json:"VPCId,omitempty" xml:"VPCId,omitempty" require:"true"`
	VSwitchId            *string                                                                                `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	ConnectionStringType *string                                                                                `json:"ConnectionStringType,omitempty" xml:"ConnectionStringType,omitempty" require:"true"`
	MaxDelayTime         *string                                                                                `json:"MaxDelayTime,omitempty" xml:"MaxDelayTime,omitempty" require:"true"`
	DistributionType     *string                                                                                `json:"DistributionType,omitempty" xml:"DistributionType,omitempty" require:"true"`
	SecurityIPGroups     *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups  `json:"SecurityIPGroups,omitempty" xml:"SecurityIPGroups,omitempty" require:"true" type:"Struct"`
	DBInstanceWeights    *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights `json:"DBInstanceWeights,omitempty" xml:"DBInstanceWeights,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetUpgradeable(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.Upgradeable = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetExpiredTime(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetConnectionString(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetIPAddress(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.IPAddress = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetIPType(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.IPType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetPort(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.Port = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetVPCId(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.VPCId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetVSwitchId(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetConnectionStringType(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.ConnectionStringType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetMaxDelayTime(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.MaxDelayTime = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetDistributionType(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.DistributionType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetSecurityIPGroups(v *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.SecurityIPGroups = v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo) SetDBInstanceWeights(v *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfo {
	s.DBInstanceWeights = v
	return s
}

type DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups struct {
	SecurityIPGroup []*DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup `json:"securityIPGroup,omitempty" xml:"securityIPGroup,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups) SetSecurityIPGroup(v []*DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroups {
	s.SecurityIPGroup = v
	return s
}

type DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup struct {
	SecurityIPGroupName *string `json:"SecurityIPGroupName,omitempty" xml:"SecurityIPGroupName,omitempty" require:"true"`
	SecurityIPs         *string `json:"SecurityIPs,omitempty" xml:"SecurityIPs,omitempty" require:"true"`
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup) SetSecurityIPGroupName(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup {
	s.SecurityIPGroupName = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup) SetSecurityIPs(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoSecurityIPGroupsSecurityIPGroup {
	s.SecurityIPs = &v
	return s
}

type DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights struct {
	DBInstanceWeight []*DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight `json:"DBInstanceWeight,omitempty" xml:"DBInstanceWeight,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights) SetDBInstanceWeight(v []*DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeights {
	s.DBInstanceWeight = v
	return s
}

type DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight struct {
	DBInstanceId   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceType *string `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty" require:"true"`
	Availability   *string `json:"Availability,omitempty" xml:"Availability,omitempty" require:"true"`
	Weight         *string `json:"Weight,omitempty" xml:"Weight,omitempty" require:"true"`
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) SetDBInstanceId(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) SetDBInstanceType(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) SetAvailability(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight {
	s.Availability = &v
	return s
}

func (s *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight) SetWeight(v string) *DescribeDBInstanceNetInfoResponseDBInstanceNetInfosDBInstanceNetInfoDBInstanceWeightsDBInstanceWeight {
	s.Weight = &v
	return s
}

type CreateReadOnlyDBInstanceRequest struct {
	ClientToken                    *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	RegionId                       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ZoneId                         *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	DBInstanceId                   *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceClass                *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	DBInstanceStorage              *int    `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty" require:"true"`
	EngineVersion                  *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	PayType                        *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	DBInstanceDescription          *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	InstanceNetworkType            *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	VPCId                          *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	VSwitchId                      *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	PrivateIpAddress               *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	ResourceGroupId                *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Category                       *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DBInstanceStorageType          *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	DedicatedHostGroupId           *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	TargetDedicatedHostIdForMaster *string `json:"TargetDedicatedHostIdForMaster,omitempty" xml:"TargetDedicatedHostIdForMaster,omitempty"`
	GdnInstanceName                *string `json:"GdnInstanceName,omitempty" xml:"GdnInstanceName,omitempty"`
	TddlBizType                    *string `json:"TddlBizType,omitempty" xml:"TddlBizType,omitempty"`
	TddlRegionConfig               *string `json:"TddlRegionConfig,omitempty" xml:"TddlRegionConfig,omitempty"`
	InstructionSetArch             *string `json:"InstructionSetArch,omitempty" xml:"InstructionSetArch,omitempty"`
}

func (s CreateReadOnlyDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateReadOnlyDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateReadOnlyDBInstanceRequest) SetClientToken(v string) *CreateReadOnlyDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetRegionId(v string) *CreateReadOnlyDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetZoneId(v string) *CreateReadOnlyDBInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDBInstanceId(v string) *CreateReadOnlyDBInstanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDBInstanceClass(v string) *CreateReadOnlyDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDBInstanceStorage(v int) *CreateReadOnlyDBInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetEngineVersion(v string) *CreateReadOnlyDBInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetPayType(v string) *CreateReadOnlyDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDBInstanceDescription(v string) *CreateReadOnlyDBInstanceRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetInstanceNetworkType(v string) *CreateReadOnlyDBInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetVPCId(v string) *CreateReadOnlyDBInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetVSwitchId(v string) *CreateReadOnlyDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetPrivateIpAddress(v string) *CreateReadOnlyDBInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetResourceGroupId(v string) *CreateReadOnlyDBInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetCategory(v string) *CreateReadOnlyDBInstanceRequest {
	s.Category = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDBInstanceStorageType(v string) *CreateReadOnlyDBInstanceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetDedicatedHostGroupId(v string) *CreateReadOnlyDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetTargetDedicatedHostIdForMaster(v string) *CreateReadOnlyDBInstanceRequest {
	s.TargetDedicatedHostIdForMaster = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetGdnInstanceName(v string) *CreateReadOnlyDBInstanceRequest {
	s.GdnInstanceName = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetTddlBizType(v string) *CreateReadOnlyDBInstanceRequest {
	s.TddlBizType = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetTddlRegionConfig(v string) *CreateReadOnlyDBInstanceRequest {
	s.TddlRegionConfig = &v
	return s
}

func (s *CreateReadOnlyDBInstanceRequest) SetInstructionSetArch(v string) *CreateReadOnlyDBInstanceRequest {
	s.InstructionSetArch = &v
	return s
}

type CreateReadOnlyDBInstanceResponse struct {
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DBInstanceId     *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	OrderId          *string `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	Port             *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
}

func (s CreateReadOnlyDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateReadOnlyDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateReadOnlyDBInstanceResponse) SetRequestId(v string) *CreateReadOnlyDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceResponse) SetDBInstanceId(v string) *CreateReadOnlyDBInstanceResponse {
	s.DBInstanceId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceResponse) SetOrderId(v string) *CreateReadOnlyDBInstanceResponse {
	s.OrderId = &v
	return s
}

func (s *CreateReadOnlyDBInstanceResponse) SetConnectionString(v string) *CreateReadOnlyDBInstanceResponse {
	s.ConnectionString = &v
	return s
}

func (s *CreateReadOnlyDBInstanceResponse) SetPort(v string) *CreateReadOnlyDBInstanceResponse {
	s.Port = &v
	return s
}

type CreateDBInstanceRequest struct {
	// description: 地域ID，可以通过接口[DescribeRegions](~~26243~~)查看可用的地域ID。;
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	// description: 数据库类型，取值：* **MySQL**；* **SQLServer**；* **PostgreSQL**；* **PPAS**；* **MariaDB**。;
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	// description: 数据库版本，取值：* MySQL：**5.5/5.6/5.7/8.0**；* SQL Server：**2008r2/2012/2012_ent_ha/2012_std_ha/2012_web/2016_ent_ha/2016_std_ha/2016_web/2017_ent**；* PostgreSQL：**9.4/10.0**；* PPAS：**9.3/10.0**；* MariaDB：**10.3**。;
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	// description: 实例规格，详见[实例规格表](~~26312~~)。;
	DBInstanceClass *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	// description: 实例存储空间，单位：GB。每5GB进行递增，详见[实例规格表](~~26312~~)。;
	DBInstanceStorage *int `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty" require:"true"`
	// description: 字符集，取值：* MySQL/MariaDB实例：**utf8、gbk、latin1、utf8mb4**；* SQL Server实例：**Chinese_PRC_CI_AS、Chinese_PRC_CS_AS、SQL_Latin1_General_CP1_CI_AS、SQL_Latin1_General_CP1_CS_AS、Chinese_PRC_BIN**。;
	SystemDBCharset *string `json:"SystemDBCharset,omitempty" xml:"SystemDBCharset,omitempty"`
	// description: 实例的网络连接类型，取值：* **Internet**：公网连接；* **Intranet**：内网连接。;
	DBInstanceNetType *string `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty" require:"true"`
	// description: 实例名称，长度为2~256个字符。以中文、英文字母开头，可以包含数字、中文、英文、下划线（_）、短横线（-）。>不能以 http:// 和 https:// 开头。;
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty"`
	// description: 该实例的[IP白名单](~~43185~~)，多个IP地址请以英文逗号（,）隔开，不可重复，最多1000个。支持如下两种格式：* IP地址形式，例如：10.23.12.24；* CIDR形式，例如：10.23.12.24/24（无类域间路由，24表示了地址中前缀的长度，范围为1~32）。;
	SecurityIPList *string `json:"SecurityIPList,omitempty" xml:"SecurityIPList,omitempty" require:"true"`
	// description: 用于保证请求的幂等性，防止重复提交请求。由客户端生成该参数值，要保证在不同请求间唯一，最大值不超过64个ASCII字符，且该参数值中不能包含非ASCII字符。;
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// description: 实例的付费类型，取值：* **Postpaid**：后付费（按量付费）；* **Prepaid**：预付费（包年包月）。;
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	// description: 可用区ID。多可用区用英文冒号（:）分隔。> 指定了VPC和交换机时，为匹配交换机对应的可用区，该参数必填。;
	ZoneId       *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ZoneIdSlave1 *string `json:"ZoneIdSlave1,omitempty" xml:"ZoneIdSlave1,omitempty"`
	ZoneIdSlave2 *string `json:"ZoneIdSlave2,omitempty" xml:"ZoneIdSlave2,omitempty"`
	// description: 实例的网络类型，取值：* **VPC**：VPC网络；* **Classic**：经典网络。默认创建经典网络类型的实例。> * SQL Server2017集群版只支持VPC网络；* 如果数据库类型为MariaDB，该参数必填。;
	InstanceNetworkType *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	// description: 实例的访问模式，取值：* **Standard**：标准访问模式；* **Safe**：数据库代理模式。默认为RDS系统分配。> SQL Server 2012/2016/2017只支持标准访问模式。;
	ConnectionMode *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	// description: VPC ID。>如果数据库类型为MariaDB，该参数必填。;
	VPCId *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	// description: VSwitch ID，多个值用英文逗号（,）隔开。>如果数据库类型为MariaDB，该参数必填。;
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// description: 设置实例的内网IP，需要在指定交换机的IP地址范围内。系统默认通过**VPCId**和**VSwitchId**自动分配。;
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	// description: 指定购买时长，取值：* 当参数**Period**为**Year**时，UsedTime取值为**1~3**；* 当参数**Period**为**Month**时，UsedTime取值为**1~9**。> 若付费类型为**Prepaid**则该参数必须传入。;
	UsedTime *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	// description: 指定预付费实例为包年或者包月类型，取值：* **Year**：包年；* **Month**：包月。> 若付费类型为**Prepaid**则该参数必须传入。;
	Period          *string `json:"Period,omitempty" xml:"Period,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// description: 实例存储类型，取值：* **local_ssd**/**ephemeral_ssd**：本地SSD盘（推荐）；* **cloud_ssd**：SSD云盘；* **cloud_essd**：ESSD云盘。;
	DBInstanceStorageType *string `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty"`
	// description: 业务扩展参数。;
	BusinessInfo  *string `json:"BusinessInfo,omitempty" xml:"BusinessInfo,omitempty"`
	EncryptionKey *string `json:"EncryptionKey,omitempty" xml:"EncryptionKey,omitempty"`
	RoleARN       *string `json:"RoleARN,omitempty" xml:"RoleARN,omitempty"`
	// description: 实例是否自动续费，取值：**true | false**>* 按月购买，则自动续费周期为1个月；* 按年购买，则自动续费周期为1年。;
	AutoRenew                      *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	Category                       *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DedicatedHostGroupId           *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	TargetDedicatedHostIdForMaster *string `json:"TargetDedicatedHostIdForMaster,omitempty" xml:"TargetDedicatedHostIdForMaster,omitempty"`
	TargetDedicatedHostIdForSlave  *string `json:"TargetDedicatedHostIdForSlave,omitempty" xml:"TargetDedicatedHostIdForSlave,omitempty"`
	TargetDedicatedHostIdForLog    *string `json:"TargetDedicatedHostIdForLog,omitempty" xml:"TargetDedicatedHostIdForLog,omitempty"`
	DBParamGroupId                 *string `json:"DBParamGroupId,omitempty" xml:"DBParamGroupId,omitempty"`
	DBTimeZone                     *string `json:"DBTimeZone,omitempty" xml:"DBTimeZone,omitempty"`
	DBIsIgnoreCase                 *string `json:"DBIsIgnoreCase,omitempty" xml:"DBIsIgnoreCase,omitempty"`
	TargetMinorVersion             *string `json:"TargetMinorVersion,omitempty" xml:"TargetMinorVersion,omitempty"`
	StorageAutoScale               *string `json:"StorageAutoScale,omitempty" xml:"StorageAutoScale,omitempty"`
	StorageThreshold               *int    `json:"StorageThreshold,omitempty" xml:"StorageThreshold,omitempty"`
	StorageUpperBound              *int    `json:"StorageUpperBound,omitempty" xml:"StorageUpperBound,omitempty"`
}

func (s CreateDBInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceRequest) SetRegionId(v string) *CreateDBInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEngine(v string) *CreateDBInstanceRequest {
	s.Engine = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEngineVersion(v string) *CreateDBInstanceRequest {
	s.EngineVersion = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceClass(v string) *CreateDBInstanceRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceStorage(v int) *CreateDBInstanceRequest {
	s.DBInstanceStorage = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSystemDBCharset(v string) *CreateDBInstanceRequest {
	s.SystemDBCharset = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceNetType(v string) *CreateDBInstanceRequest {
	s.DBInstanceNetType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceDescription(v string) *CreateDBInstanceRequest {
	s.DBInstanceDescription = &v
	return s
}

func (s *CreateDBInstanceRequest) SetSecurityIPList(v string) *CreateDBInstanceRequest {
	s.SecurityIPList = &v
	return s
}

func (s *CreateDBInstanceRequest) SetClientToken(v string) *CreateDBInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPayType(v string) *CreateDBInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetZoneId(v string) *CreateDBInstanceRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetZoneIdSlave1(v string) *CreateDBInstanceRequest {
	s.ZoneIdSlave1 = &v
	return s
}

func (s *CreateDBInstanceRequest) SetZoneIdSlave2(v string) *CreateDBInstanceRequest {
	s.ZoneIdSlave2 = &v
	return s
}

func (s *CreateDBInstanceRequest) SetInstanceNetworkType(v string) *CreateDBInstanceRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetConnectionMode(v string) *CreateDBInstanceRequest {
	s.ConnectionMode = &v
	return s
}

func (s *CreateDBInstanceRequest) SetVPCId(v string) *CreateDBInstanceRequest {
	s.VPCId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetVSwitchId(v string) *CreateDBInstanceRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPrivateIpAddress(v string) *CreateDBInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateDBInstanceRequest) SetUsedTime(v string) *CreateDBInstanceRequest {
	s.UsedTime = &v
	return s
}

func (s *CreateDBInstanceRequest) SetPeriod(v string) *CreateDBInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateDBInstanceRequest) SetResourceGroupId(v string) *CreateDBInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBInstanceStorageType(v string) *CreateDBInstanceRequest {
	s.DBInstanceStorageType = &v
	return s
}

func (s *CreateDBInstanceRequest) SetBusinessInfo(v string) *CreateDBInstanceRequest {
	s.BusinessInfo = &v
	return s
}

func (s *CreateDBInstanceRequest) SetEncryptionKey(v string) *CreateDBInstanceRequest {
	s.EncryptionKey = &v
	return s
}

func (s *CreateDBInstanceRequest) SetRoleARN(v string) *CreateDBInstanceRequest {
	s.RoleARN = &v
	return s
}

func (s *CreateDBInstanceRequest) SetAutoRenew(v string) *CreateDBInstanceRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateDBInstanceRequest) SetCategory(v string) *CreateDBInstanceRequest {
	s.Category = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDedicatedHostGroupId(v string) *CreateDBInstanceRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetTargetDedicatedHostIdForMaster(v string) *CreateDBInstanceRequest {
	s.TargetDedicatedHostIdForMaster = &v
	return s
}

func (s *CreateDBInstanceRequest) SetTargetDedicatedHostIdForSlave(v string) *CreateDBInstanceRequest {
	s.TargetDedicatedHostIdForSlave = &v
	return s
}

func (s *CreateDBInstanceRequest) SetTargetDedicatedHostIdForLog(v string) *CreateDBInstanceRequest {
	s.TargetDedicatedHostIdForLog = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBParamGroupId(v string) *CreateDBInstanceRequest {
	s.DBParamGroupId = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBTimeZone(v string) *CreateDBInstanceRequest {
	s.DBTimeZone = &v
	return s
}

func (s *CreateDBInstanceRequest) SetDBIsIgnoreCase(v string) *CreateDBInstanceRequest {
	s.DBIsIgnoreCase = &v
	return s
}

func (s *CreateDBInstanceRequest) SetTargetMinorVersion(v string) *CreateDBInstanceRequest {
	s.TargetMinorVersion = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStorageAutoScale(v string) *CreateDBInstanceRequest {
	s.StorageAutoScale = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStorageThreshold(v int) *CreateDBInstanceRequest {
	s.StorageThreshold = &v
	return s
}

func (s *CreateDBInstanceRequest) SetStorageUpperBound(v int) *CreateDBInstanceRequest {
	s.StorageUpperBound = &v
	return s
}

type CreateDBInstanceResponse struct {
	// description: 请求ID。;
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	// description: 实例ID。;
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	// description: 订单ID。;
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty" require:"true"`
	// description: 数据库连接地址。>参数**DBInstanceNetType**决定该地址为内网或外网。;
	ConnectionString *string `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	// description: 数据库连接端口。>参数**DBInstanceNetType**决定该端口为内网或外网。;
	Port *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
}

func (s CreateDBInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDBInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateDBInstanceResponse) SetRequestId(v string) *CreateDBInstanceResponse {
	s.RequestId = &v
	return s
}

func (s *CreateDBInstanceResponse) SetDBInstanceId(v string) *CreateDBInstanceResponse {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDBInstanceResponse) SetOrderId(v string) *CreateDBInstanceResponse {
	s.OrderId = &v
	return s
}

func (s *CreateDBInstanceResponse) SetConnectionString(v string) *CreateDBInstanceResponse {
	s.ConnectionString = &v
	return s
}

func (s *CreateDBInstanceResponse) SetPort(v string) *CreateDBInstanceResponse {
	s.Port = &v
	return s
}

type AllocateInstancePublicConnectionRequest struct {
	DBInstanceId           *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	ConnectionStringPrefix *string `json:"ConnectionStringPrefix,omitempty" xml:"ConnectionStringPrefix,omitempty" require:"true"`
	Port                   *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
}

func (s AllocateInstancePublicConnectionRequest) String() string {
	return tea.Prettify(s)
}

func (s AllocateInstancePublicConnectionRequest) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionRequest) SetDBInstanceId(v string) *AllocateInstancePublicConnectionRequest {
	s.DBInstanceId = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetConnectionStringPrefix(v string) *AllocateInstancePublicConnectionRequest {
	s.ConnectionStringPrefix = &v
	return s
}

func (s *AllocateInstancePublicConnectionRequest) SetPort(v string) *AllocateInstancePublicConnectionRequest {
	s.Port = &v
	return s
}

type AllocateInstancePublicConnectionResponse struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AllocateInstancePublicConnectionResponse) String() string {
	return tea.Prettify(s)
}

func (s AllocateInstancePublicConnectionResponse) GoString() string {
	return s.String()
}

func (s *AllocateInstancePublicConnectionResponse) SetRequestId(v string) *AllocateInstancePublicConnectionResponse {
	s.RequestId = &v
	return s
}

type DescribeDBInstancesByPerformanceRequest struct {
	ClientToken  *string                                       `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId      *string                                       `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	DBInstanceId *string                                       `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	PageSize     *int                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	SortMethod   *string                                       `json:"SortMethod,omitempty" xml:"SortMethod,omitempty"`
	SortKey      *string                                       `json:"SortKey,omitempty" xml:"SortKey,omitempty"`
	Tags         *string                                       `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Tag          []*DescribeDBInstancesByPerformanceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	RegionId     *string                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDBInstancesByPerformanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceRequest) SetClientToken(v string) *DescribeDBInstancesByPerformanceRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetProxyId(v string) *DescribeDBInstancesByPerformanceRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetDBInstanceId(v string) *DescribeDBInstancesByPerformanceRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetPageSize(v int) *DescribeDBInstancesByPerformanceRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetPageNumber(v int) *DescribeDBInstancesByPerformanceRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetSortMethod(v string) *DescribeDBInstancesByPerformanceRequest {
	s.SortMethod = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetSortKey(v string) *DescribeDBInstancesByPerformanceRequest {
	s.SortKey = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetTags(v string) *DescribeDBInstancesByPerformanceRequest {
	s.Tags = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetTag(v []*DescribeDBInstancesByPerformanceRequestTag) *DescribeDBInstancesByPerformanceRequest {
	s.Tag = v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequest) SetRegionId(v string) *DescribeDBInstancesByPerformanceRequest {
	s.RegionId = &v
	return s
}

type DescribeDBInstancesByPerformanceRequestTag struct {
	Key   *string `json:"key,omitempty" xml:"key,omitempty"`
	Value *string `json:"value,omitempty" xml:"value,omitempty"`
}

func (s DescribeDBInstancesByPerformanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceRequestTag) SetKey(v string) *DescribeDBInstancesByPerformanceRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceRequestTag) SetValue(v string) *DescribeDBInstancesByPerformanceRequestTag {
	s.Value = &v
	return s
}

type DescribeDBInstancesByPerformanceResponse struct {
	RequestId        *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber       *int                                           `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	TotalRecordCount *int                                           `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageRecordCount  *int                                           `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeDBInstancesByPerformanceResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancesByPerformanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceResponse) SetRequestId(v string) *DescribeDBInstancesByPerformanceResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponse) SetPageNumber(v int) *DescribeDBInstancesByPerformanceResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponse) SetTotalRecordCount(v int) *DescribeDBInstancesByPerformanceResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponse) SetPageRecordCount(v int) *DescribeDBInstancesByPerformanceResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponse) SetItems(v *DescribeDBInstancesByPerformanceResponseItems) *DescribeDBInstancesByPerformanceResponse {
	s.Items = v
	return s
}

type DescribeDBInstancesByPerformanceResponseItems struct {
	DBInstancePerformance []*DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance `json:"DBInstancePerformance,omitempty" xml:"DBInstancePerformance,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancesByPerformanceResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceResponseItems) SetDBInstancePerformance(v []*DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance) *DescribeDBInstancesByPerformanceResponseItems {
	s.DBInstancePerformance = v
	return s
}

type DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance struct {
	CPUUsage              *string `json:"CPUUsage,omitempty" xml:"CPUUsage,omitempty" require:"true"`
	IOPSUsage             *string `json:"IOPSUsage,omitempty" xml:"IOPSUsage,omitempty" require:"true"`
	DiskUsage             *string `json:"DiskUsage,omitempty" xml:"DiskUsage,omitempty" require:"true"`
	SessionUsage          *string `json:"SessionUsage,omitempty" xml:"SessionUsage,omitempty" require:"true"`
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty" require:"true"`
}

func (s DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance) SetCPUUsage(v string) *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance {
	s.CPUUsage = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance) SetIOPSUsage(v string) *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance {
	s.IOPSUsage = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance) SetDiskUsage(v string) *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance {
	s.DiskUsage = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance) SetSessionUsage(v string) *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance {
	s.SessionUsage = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance) SetDBInstanceId(v string) *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance) SetDBInstanceDescription(v string) *DescribeDBInstancesByPerformanceResponseItemsDBInstancePerformance {
	s.DBInstanceDescription = &v
	return s
}

type DescribeDBInstancesByExpireTimeRequest struct {
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProxyId      *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	ExpirePeriod *int    `json:"ExpirePeriod,omitempty" xml:"ExpirePeriod,omitempty"`
	Expired      *bool   `json:"Expired,omitempty" xml:"Expired,omitempty"`
	PageSize     *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Tags         *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s DescribeDBInstancesByExpireTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByExpireTimeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetRegionId(v string) *DescribeDBInstancesByExpireTimeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetProxyId(v string) *DescribeDBInstancesByExpireTimeRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetExpirePeriod(v int) *DescribeDBInstancesByExpireTimeRequest {
	s.ExpirePeriod = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetExpired(v bool) *DescribeDBInstancesByExpireTimeRequest {
	s.Expired = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetPageSize(v int) *DescribeDBInstancesByExpireTimeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetPageNumber(v int) *DescribeDBInstancesByExpireTimeRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeRequest) SetTags(v string) *DescribeDBInstancesByExpireTimeRequest {
	s.Tags = &v
	return s
}

type DescribeDBInstancesByExpireTimeResponse struct {
	RequestId        *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber       *int                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	TotalRecordCount *int                                          `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageRecordCount  *int                                          `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeDBInstancesByExpireTimeResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancesByExpireTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByExpireTimeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByExpireTimeResponse) SetRequestId(v string) *DescribeDBInstancesByExpireTimeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponse) SetPageNumber(v int) *DescribeDBInstancesByExpireTimeResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponse) SetTotalRecordCount(v int) *DescribeDBInstancesByExpireTimeResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponse) SetPageRecordCount(v int) *DescribeDBInstancesByExpireTimeResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponse) SetItems(v *DescribeDBInstancesByExpireTimeResponseItems) *DescribeDBInstancesByExpireTimeResponse {
	s.Items = v
	return s
}

type DescribeDBInstancesByExpireTimeResponseItems struct {
	DBInstanceExpireTime []*DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime `json:"DBInstanceExpireTime,omitempty" xml:"DBInstanceExpireTime,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancesByExpireTimeResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByExpireTimeResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByExpireTimeResponseItems) SetDBInstanceExpireTime(v []*DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime) *DescribeDBInstancesByExpireTimeResponseItems {
	s.DBInstanceExpireTime = v
	return s
}

type DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime struct {
	DBInstanceId          *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceDescription *string `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty" require:"true"`
	ExpireTime            *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty" require:"true"`
	DBInstanceStatus      *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty" require:"true"`
	LockMode              *string `json:"LockMode,omitempty" xml:"LockMode,omitempty" require:"true"`
	PayType               *string `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
}

func (s DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime) SetDBInstanceId(v string) *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime) SetDBInstanceDescription(v string) *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime) SetExpireTime(v string) *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime) SetDBInstanceStatus(v string) *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime) SetLockMode(v string) *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime) SetPayType(v string) *DescribeDBInstancesByExpireTimeResponseItemsDBInstanceExpireTime {
	s.PayType = &v
	return s
}

type DescribeDBInstancesRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ProxyId              *string `json:"proxyId,omitempty" xml:"proxyId,omitempty"`
	Engine               *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	ZoneId               *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	DBInstanceStatus     *string `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty"`
	Expired              *string `json:"Expired,omitempty" xml:"Expired,omitempty"`
	SearchKey            *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	DBInstanceId         *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	DBInstanceType       *string `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	PageSize             *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	InstanceNetworkType  *string `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId            *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	DBInstanceClass      *string `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty"`
	EngineVersion        *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	PayType              *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	ConnectionMode       *string `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty"`
	Tags                 *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	DedicatedHostGroupId *string `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty"`
	DedicatedHostId      *string `json:"DedicatedHostId,omitempty" xml:"DedicatedHostId,omitempty"`
	InstanceLevel        *int    `json:"InstanceLevel,omitempty" xml:"InstanceLevel,omitempty"`
	NeedVpcName          *bool   `json:"NeedVpcName,omitempty" xml:"NeedVpcName,omitempty"`
}

func (s DescribeDBInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesRequest) SetClientToken(v string) *DescribeDBInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetProxyId(v string) *DescribeDBInstancesRequest {
	s.ProxyId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetEngine(v string) *DescribeDBInstancesRequest {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetZoneId(v string) *DescribeDBInstancesRequest {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetResourceGroupId(v string) *DescribeDBInstancesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceStatus(v string) *DescribeDBInstancesRequest {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetExpired(v string) *DescribeDBInstancesRequest {
	s.Expired = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetSearchKey(v string) *DescribeDBInstancesRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceId(v string) *DescribeDBInstancesRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceType(v string) *DescribeDBInstancesRequest {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetRegionId(v string) *DescribeDBInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetPageSize(v int) *DescribeDBInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetPageNumber(v int) *DescribeDBInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetInstanceNetworkType(v string) *DescribeDBInstancesRequest {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetVpcId(v string) *DescribeDBInstancesRequest {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetVSwitchId(v string) *DescribeDBInstancesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDBInstanceClass(v string) *DescribeDBInstancesRequest {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetEngineVersion(v string) *DescribeDBInstancesRequest {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetPayType(v string) *DescribeDBInstancesRequest {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetConnectionMode(v string) *DescribeDBInstancesRequest {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetTags(v string) *DescribeDBInstancesRequest {
	s.Tags = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDedicatedHostGroupId(v string) *DescribeDBInstancesRequest {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetDedicatedHostId(v string) *DescribeDBInstancesRequest {
	s.DedicatedHostId = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetInstanceLevel(v int) *DescribeDBInstancesRequest {
	s.InstanceLevel = &v
	return s
}

func (s *DescribeDBInstancesRequest) SetNeedVpcName(v bool) *DescribeDBInstancesRequest {
	s.NeedVpcName = &v
	return s
}

type DescribeDBInstancesResponse struct {
	RequestId        *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PageNumber       *int                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	TotalRecordCount *int                              `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty" require:"true"`
	PageRecordCount  *int                              `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty" require:"true"`
	Items            *DescribeDBInstancesResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponse) SetRequestId(v string) *DescribeDBInstancesResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstancesResponse) SetPageNumber(v int) *DescribeDBInstancesResponse {
	s.PageNumber = &v
	return s
}

func (s *DescribeDBInstancesResponse) SetTotalRecordCount(v int) *DescribeDBInstancesResponse {
	s.TotalRecordCount = &v
	return s
}

func (s *DescribeDBInstancesResponse) SetPageRecordCount(v int) *DescribeDBInstancesResponse {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDBInstancesResponse) SetItems(v *DescribeDBInstancesResponseItems) *DescribeDBInstancesResponse {
	s.Items = v
	return s
}

type DescribeDBInstancesResponseItems struct {
	DBInstance []*DescribeDBInstancesResponseItemsDBInstance `json:"DBInstance,omitempty" xml:"DBInstance,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancesResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseItems) SetDBInstance(v []*DescribeDBInstancesResponseItemsDBInstance) *DescribeDBInstancesResponseItems {
	s.DBInstance = v
	return s
}

type DescribeDBInstancesResponseItemsDBInstance struct {
	DBInstanceId                 *string                                                          `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	DBInstanceDescription        *string                                                          `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty" require:"true"`
	PayType                      *string                                                          `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	DBInstanceType               *string                                                          `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty" require:"true"`
	RegionId                     *string                                                          `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ExpireTime                   *string                                                          `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty" require:"true"`
	DestroyTime                  *string                                                          `json:"DestroyTime,omitempty" xml:"DestroyTime,omitempty" require:"true"`
	DBInstanceStatus             *string                                                          `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty" require:"true"`
	Engine                       *string                                                          `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	DBInstanceNetType            *string                                                          `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty" require:"true"`
	ConnectionMode               *string                                                          `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty" require:"true"`
	LockMode                     *string                                                          `json:"LockMode,omitempty" xml:"LockMode,omitempty" require:"true"`
	Category                     *string                                                          `json:"Category,omitempty" xml:"Category,omitempty" require:"true"`
	DBInstanceStorageType        *string                                                          `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty" require:"true"`
	DBInstanceClass              *string                                                          `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	InstanceNetworkType          *string                                                          `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty" require:"true"`
	VpcCloudInstanceId           *string                                                          `json:"VpcCloudInstanceId,omitempty" xml:"VpcCloudInstanceId,omitempty" require:"true"`
	LockReason                   *string                                                          `json:"LockReason,omitempty" xml:"LockReason,omitempty" require:"true"`
	ZoneId                       *string                                                          `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	MutriORsignle                *bool                                                            `json:"MutriORsignle,omitempty" xml:"MutriORsignle,omitempty" require:"true"`
	CreateTime                   *string                                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EngineVersion                *string                                                          `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	GuardDBInstanceId            *string                                                          `json:"GuardDBInstanceId,omitempty" xml:"GuardDBInstanceId,omitempty" require:"true"`
	TempDBInstanceId             *string                                                          `json:"TempDBInstanceId,omitempty" xml:"TempDBInstanceId,omitempty" require:"true"`
	MasterInstanceId             *string                                                          `json:"MasterInstanceId,omitempty" xml:"MasterInstanceId,omitempty" require:"true"`
	VpcId                        *string                                                          `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VSwitchId                    *string                                                          `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	ResourceGroupId              *string                                                          `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	AutoUpgradeMinorVersion      *string                                                          `json:"AutoUpgradeMinorVersion,omitempty" xml:"AutoUpgradeMinorVersion,omitempty" require:"true"`
	DedicatedHostGroupId         *string                                                          `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	DedicatedHostIdForMaster     *string                                                          `json:"DedicatedHostIdForMaster,omitempty" xml:"DedicatedHostIdForMaster,omitempty" require:"true"`
	DedicatedHostIdForSlave      *string                                                          `json:"DedicatedHostIdForSlave,omitempty" xml:"DedicatedHostIdForSlave,omitempty" require:"true"`
	DedicatedHostIdForLog        *string                                                          `json:"DedicatedHostIdForLog,omitempty" xml:"DedicatedHostIdForLog,omitempty" require:"true"`
	DedicatedHostNameForMaster   *string                                                          `json:"DedicatedHostNameForMaster,omitempty" xml:"DedicatedHostNameForMaster,omitempty" require:"true"`
	DedicatedHostNameForSlave    *string                                                          `json:"DedicatedHostNameForSlave,omitempty" xml:"DedicatedHostNameForSlave,omitempty" require:"true"`
	DedicatedHostNameForLog      *string                                                          `json:"DedicatedHostNameForLog,omitempty" xml:"DedicatedHostNameForLog,omitempty" require:"true"`
	DedicatedHostZoneIdForMaster *string                                                          `json:"DedicatedHostZoneIdForMaster,omitempty" xml:"DedicatedHostZoneIdForMaster,omitempty" require:"true"`
	DedicatedHostZoneIdForSlave  *string                                                          `json:"DedicatedHostZoneIdForSlave,omitempty" xml:"DedicatedHostZoneIdForSlave,omitempty" require:"true"`
	DedicatedHostZoneIdForLog    *string                                                          `json:"DedicatedHostZoneIdForLog,omitempty" xml:"DedicatedHostZoneIdForLog,omitempty" require:"true"`
	VpcName                      *string                                                          `json:"VpcName,omitempty" xml:"VpcName,omitempty" require:"true"`
	DedicatedHostGroupName       *string                                                          `json:"DedicatedHostGroupName,omitempty" xml:"DedicatedHostGroupName,omitempty" require:"true"`
	ReadOnlyDBInstanceIds        *DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIds `json:"ReadOnlyDBInstanceIds,omitempty" xml:"ReadOnlyDBInstanceIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstancesResponseItemsDBInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseItemsDBInstance) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDBInstanceId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDBInstanceDescription(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetPayType(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDBInstanceType(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetRegionId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetExpireTime(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDestroyTime(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DestroyTime = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDBInstanceStatus(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetEngine(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDBInstanceNetType(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetConnectionMode(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetLockMode(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetCategory(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.Category = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDBInstanceStorageType(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDBInstanceClass(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetInstanceNetworkType(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetVpcCloudInstanceId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.VpcCloudInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetLockReason(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetZoneId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetMutriORsignle(v bool) *DescribeDBInstancesResponseItemsDBInstance {
	s.MutriORsignle = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetCreateTime(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.CreateTime = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetEngineVersion(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetGuardDBInstanceId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.GuardDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetTempDBInstanceId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.TempDBInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetMasterInstanceId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetVpcId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetVSwitchId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetResourceGroupId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetAutoUpgradeMinorVersion(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.AutoUpgradeMinorVersion = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostGroupId(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostIdForMaster(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostIdForMaster = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostIdForSlave(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostIdForSlave = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostIdForLog(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostIdForLog = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostNameForMaster(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostNameForMaster = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostNameForSlave(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostNameForSlave = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostNameForLog(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostNameForLog = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostZoneIdForMaster(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostZoneIdForMaster = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostZoneIdForSlave(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostZoneIdForSlave = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostZoneIdForLog(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostZoneIdForLog = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetVpcName(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.VpcName = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetDedicatedHostGroupName(v string) *DescribeDBInstancesResponseItemsDBInstance {
	s.DedicatedHostGroupName = &v
	return s
}

func (s *DescribeDBInstancesResponseItemsDBInstance) SetReadOnlyDBInstanceIds(v *DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIds) *DescribeDBInstancesResponseItemsDBInstance {
	s.ReadOnlyDBInstanceIds = v
	return s
}

type DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIds struct {
	ReadOnlyDBInstanceId []*DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId `json:"ReadOnlyDBInstanceId,omitempty" xml:"ReadOnlyDBInstanceId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIds) SetReadOnlyDBInstanceId(v []*DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) *DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIds {
	s.ReadOnlyDBInstanceId = v
	return s
}

type DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) GoString() string {
	return s.String()
}

func (s *DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId) SetDBInstanceId(v string) *DescribeDBInstancesResponseItemsDBInstanceReadOnlyDBInstanceIdsReadOnlyDBInstanceId {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceAttributeRequest struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	Expired      *string `json:"Expired,omitempty" xml:"Expired,omitempty"`
}

func (s DescribeDBInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeRequest) SetDBInstanceId(v string) *DescribeDBInstanceAttributeRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeRequest) SetExpired(v string) *DescribeDBInstanceAttributeRequest {
	s.Expired = &v
	return s
}

type DescribeDBInstanceAttributeResponse struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Items     *DescribeDBInstanceAttributeResponseItems `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponse) SetRequestId(v string) *DescribeDBInstanceAttributeResponse {
	s.RequestId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponse) SetItems(v *DescribeDBInstanceAttributeResponseItems) *DescribeDBInstanceAttributeResponse {
	s.Items = v
	return s
}

type DescribeDBInstanceAttributeResponseItems struct {
	DBInstanceAttribute []*DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute `json:"DBInstanceAttribute,omitempty" xml:"DBInstanceAttribute,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseItems) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseItems) SetDBInstanceAttribute(v []*DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) *DescribeDBInstanceAttributeResponseItems {
	s.DBInstanceAttribute = v
	return s
}

type DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute struct {
	DBInstanceId                   *string                                                                           `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
	PayType                        *string                                                                           `json:"PayType,omitempty" xml:"PayType,omitempty" require:"true"`
	DBInstanceClassType            *string                                                                           `json:"DBInstanceClassType,omitempty" xml:"DBInstanceClassType,omitempty" require:"true"`
	DBInstanceType                 *string                                                                           `json:"DBInstanceType,omitempty" xml:"DBInstanceType,omitempty" require:"true"`
	RegionId                       *string                                                                           `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ConnectionString               *string                                                                           `json:"ConnectionString,omitempty" xml:"ConnectionString,omitempty" require:"true"`
	Port                           *string                                                                           `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	Engine                         *string                                                                           `json:"Engine,omitempty" xml:"Engine,omitempty" require:"true"`
	EngineVersion                  *string                                                                           `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty" require:"true"`
	DBInstanceClass                *string                                                                           `json:"DBInstanceClass,omitempty" xml:"DBInstanceClass,omitempty" require:"true"`
	DBInstanceMemory               *int64                                                                            `json:"DBInstanceMemory,omitempty" xml:"DBInstanceMemory,omitempty" require:"true"`
	DBInstanceStorage              *int                                                                              `json:"DBInstanceStorage,omitempty" xml:"DBInstanceStorage,omitempty" require:"true"`
	VpcCloudInstanceId             *string                                                                           `json:"VpcCloudInstanceId,omitempty" xml:"VpcCloudInstanceId,omitempty" require:"true"`
	DBInstanceNetType              *string                                                                           `json:"DBInstanceNetType,omitempty" xml:"DBInstanceNetType,omitempty" require:"true"`
	DBInstanceStatus               *string                                                                           `json:"DBInstanceStatus,omitempty" xml:"DBInstanceStatus,omitempty" require:"true"`
	DBInstanceDescription          *string                                                                           `json:"DBInstanceDescription,omitempty" xml:"DBInstanceDescription,omitempty" require:"true"`
	LockMode                       *string                                                                           `json:"LockMode,omitempty" xml:"LockMode,omitempty" require:"true"`
	LockReason                     *string                                                                           `json:"LockReason,omitempty" xml:"LockReason,omitempty" require:"true"`
	DBMaxQuantity                  *int                                                                              `json:"DBMaxQuantity,omitempty" xml:"DBMaxQuantity,omitempty" require:"true"`
	AccountMaxQuantity             *int                                                                              `json:"AccountMaxQuantity,omitempty" xml:"AccountMaxQuantity,omitempty" require:"true"`
	CreationTime                   *string                                                                           `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	ExpireTime                     *string                                                                           `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty" require:"true"`
	MaintainTime                   *string                                                                           `json:"MaintainTime,omitempty" xml:"MaintainTime,omitempty" require:"true"`
	AvailabilityValue              *string                                                                           `json:"AvailabilityValue,omitempty" xml:"AvailabilityValue,omitempty" require:"true"`
	MaxIOPS                        *int                                                                              `json:"MaxIOPS,omitempty" xml:"MaxIOPS,omitempty" require:"true"`
	MaxConnections                 *int                                                                              `json:"MaxConnections,omitempty" xml:"MaxConnections,omitempty" require:"true"`
	MasterInstanceId               *string                                                                           `json:"MasterInstanceId,omitempty" xml:"MasterInstanceId,omitempty" require:"true"`
	DBInstanceCPU                  *string                                                                           `json:"DBInstanceCPU,omitempty" xml:"DBInstanceCPU,omitempty" require:"true"`
	IncrementSourceDBInstanceId    *string                                                                           `json:"IncrementSourceDBInstanceId,omitempty" xml:"IncrementSourceDBInstanceId,omitempty" require:"true"`
	GuardDBInstanceId              *string                                                                           `json:"GuardDBInstanceId,omitempty" xml:"GuardDBInstanceId,omitempty" require:"true"`
	TempDBInstanceId               *string                                                                           `json:"TempDBInstanceId,omitempty" xml:"TempDBInstanceId,omitempty" require:"true"`
	ZoneId                         *string                                                                           `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	InstanceNetworkType            *string                                                                           `json:"InstanceNetworkType,omitempty" xml:"InstanceNetworkType,omitempty" require:"true"`
	DBInstanceStorageType          *string                                                                           `json:"DBInstanceStorageType,omitempty" xml:"DBInstanceStorageType,omitempty" require:"true"`
	AdvancedFeatures               *string                                                                           `json:"AdvancedFeatures,omitempty" xml:"AdvancedFeatures,omitempty" require:"true"`
	Category                       *string                                                                           `json:"Category,omitempty" xml:"Category,omitempty" require:"true"`
	VpcId                          *string                                                                           `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VSwitchId                      *string                                                                           `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" require:"true"`
	ConnectionMode                 *string                                                                           `json:"ConnectionMode,omitempty" xml:"ConnectionMode,omitempty" require:"true"`
	CurrentKernelVersion           *string                                                                           `json:"CurrentKernelVersion,omitempty" xml:"CurrentKernelVersion,omitempty" require:"true"`
	ResourceGroupId                *string                                                                           `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	ReadonlyInstanceSQLDelayedTime *string                                                                           `json:"ReadonlyInstanceSQLDelayedTime,omitempty" xml:"ReadonlyInstanceSQLDelayedTime,omitempty" require:"true"`
	SecurityIPMode                 *string                                                                           `json:"SecurityIPMode,omitempty" xml:"SecurityIPMode,omitempty" require:"true"`
	TimeZone                       *string                                                                           `json:"TimeZone,omitempty" xml:"TimeZone,omitempty" require:"true"`
	Collation                      *string                                                                           `json:"Collation,omitempty" xml:"Collation,omitempty" require:"true"`
	MasterZone                     *string                                                                           `json:"MasterZone,omitempty" xml:"MasterZone,omitempty" require:"true"`
	AutoUpgradeMinorVersion        *string                                                                           `json:"AutoUpgradeMinorVersion,omitempty" xml:"AutoUpgradeMinorVersion,omitempty" require:"true"`
	ProxyType                      *int                                                                              `json:"ProxyType,omitempty" xml:"ProxyType,omitempty" require:"true"`
	ConsoleVersion                 *string                                                                           `json:"ConsoleVersion,omitempty" xml:"ConsoleVersion,omitempty" require:"true"`
	DedicatedHostGroupId           *string                                                                           `json:"DedicatedHostGroupId,omitempty" xml:"DedicatedHostGroupId,omitempty" require:"true"`
	SuperPermissionMode            *string                                                                           `json:"SuperPermissionMode,omitempty" xml:"SuperPermissionMode,omitempty" require:"true"`
	SlaveZones                     *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZones            `json:"SlaveZones,omitempty" xml:"SlaveZones,omitempty" require:"true" type:"Struct"`
	ReadOnlyDBInstanceIds          *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIds `json:"ReadOnlyDBInstanceIds,omitempty" xml:"ReadOnlyDBInstanceIds,omitempty" require:"true" type:"Struct"`
	Extra                          *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtra                 `json:"Extra,omitempty" xml:"Extra,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetPayType(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.PayType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceClassType(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceClassType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceType(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetRegionId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.RegionId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetConnectionString(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.ConnectionString = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetPort(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.Port = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetEngine(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.Engine = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetEngineVersion(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.EngineVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceClass(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceClass = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceMemory(v int64) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceMemory = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceStorage(v int) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceStorage = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetVpcCloudInstanceId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.VpcCloudInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceNetType(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceNetType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceStatus(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceStatus = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceDescription(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceDescription = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetLockMode(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.LockMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetLockReason(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.LockReason = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBMaxQuantity(v int) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBMaxQuantity = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetAccountMaxQuantity(v int) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.AccountMaxQuantity = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetCreationTime(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.CreationTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetExpireTime(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetMaintainTime(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.MaintainTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetAvailabilityValue(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.AvailabilityValue = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetMaxIOPS(v int) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.MaxIOPS = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetMaxConnections(v int) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.MaxConnections = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetMasterInstanceId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.MasterInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceCPU(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceCPU = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetIncrementSourceDBInstanceId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.IncrementSourceDBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetGuardDBInstanceId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.GuardDBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetTempDBInstanceId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.TempDBInstanceId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetZoneId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.ZoneId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetInstanceNetworkType(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.InstanceNetworkType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDBInstanceStorageType(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DBInstanceStorageType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetAdvancedFeatures(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.AdvancedFeatures = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetCategory(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.Category = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetVpcId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.VpcId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetVSwitchId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.VSwitchId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetConnectionMode(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.ConnectionMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetCurrentKernelVersion(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.CurrentKernelVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetResourceGroupId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetReadonlyInstanceSQLDelayedTime(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.ReadonlyInstanceSQLDelayedTime = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetSecurityIPMode(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.SecurityIPMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetTimeZone(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.TimeZone = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetCollation(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.Collation = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetMasterZone(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.MasterZone = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetAutoUpgradeMinorVersion(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.AutoUpgradeMinorVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetProxyType(v int) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.ProxyType = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetConsoleVersion(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.ConsoleVersion = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetDedicatedHostGroupId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.DedicatedHostGroupId = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetSuperPermissionMode(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.SuperPermissionMode = &v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetSlaveZones(v *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZones) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.SlaveZones = v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetReadOnlyDBInstanceIds(v *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIds) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.ReadOnlyDBInstanceIds = v
	return s
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute) SetExtra(v *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtra) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttribute {
	s.Extra = v
	return s
}

type DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZones struct {
	SlaveZone []*DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZonesSlaveZone `json:"SlaveZone,omitempty" xml:"SlaveZone,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZones) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZones) SetSlaveZone(v []*DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZonesSlaveZone) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZones {
	s.SlaveZone = v
	return s
}

type DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZonesSlaveZone struct {
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZonesSlaveZone) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZonesSlaveZone) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZonesSlaveZone) SetZoneId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeSlaveZonesSlaveZone {
	s.ZoneId = &v
	return s
}

type DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIds struct {
	ReadOnlyDBInstanceId []*DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId `json:"ReadOnlyDBInstanceId,omitempty" xml:"ReadOnlyDBInstanceId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIds) SetReadOnlyDBInstanceId(v []*DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIds {
	s.ReadOnlyDBInstanceId = v
	return s
}

type DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId struct {
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true"`
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId) SetDBInstanceId(v string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeReadOnlyDBInstanceIdsReadOnlyDBInstanceId {
	s.DBInstanceId = &v
	return s
}

type DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtra struct {
	DBInstanceIds *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtraDBInstanceIds `json:"DBInstanceIds,omitempty" xml:"DBInstanceIds,omitempty" require:"true" type:"Struct"`
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtra) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtra) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtra) SetDBInstanceIds(v *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtraDBInstanceIds) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtra {
	s.DBInstanceIds = v
	return s
}

type DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtraDBInstanceIds struct {
	// DBInstanceId
	DBInstanceId []*string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtraDBInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtraDBInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtraDBInstanceIds) SetDBInstanceId(v []*string) *DescribeDBInstanceAttributeResponseItemsDBInstanceAttributeExtraDBInstanceIds {
	s.DBInstanceId = v
	return s
}

type Client struct {
	rpc.Client
}

func NewClient(config *rpc.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *rpc.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":                  tea.String("rds.aliyuncs.com"),
		"cn-beijing":                  tea.String("rds.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("rds.aliyuncs.com"),
		"cn-shanghai":                 tea.String("rds.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("rds.aliyuncs.com"),
		"cn-hongkong":                 tea.String("rds.aliyuncs.com"),
		"ap-southeast-1":              tea.String("rds.aliyuncs.com"),
		"us-west-1":                   tea.String("rds.aliyuncs.com"),
		"us-east-1":                   tea.String("rds.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("rds.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("rds.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("rds.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("rds.ap-northeast-1.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("rds.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("rds.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("rds.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("rds.aliyuncs.com"),
		"cn-edge-1":                   tea.String("rds.aliyuncs.com"),
		"cn-fujian":                   tea.String("rds.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("rds.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("rds.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("rds.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("rds.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("rds.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("rds.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("rds.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("rds.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("rds.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("rds.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("rds.aliyuncs.com"),
		"cn-wuhan":                    tea.String("rds.aliyuncs.com"),
		"cn-yushanfang":               tea.String("rds.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("rds.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("rds.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("rds.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("rds.ap-northeast-1.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("rds.ap-northeast-1.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("rds"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetDbProxyInstanceSslWithOptions(request *GetDbProxyInstanceSslRequest, runtime *util.RuntimeOptions) (_result *GetDbProxyInstanceSslResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDbProxyInstanceSslResponse{}
	_body, _err := client.DoRequest(tea.String("GetDbProxyInstanceSsl"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDbProxyInstanceSsl(request *GetDbProxyInstanceSslRequest) (_result *GetDbProxyInstanceSslResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDbProxyInstanceSslResponse{}
	_body, _err := client.GetDbProxyInstanceSslWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDbProxyInstanceSslWithOptions(request *ModifyDbProxyInstanceSslRequest, runtime *util.RuntimeOptions) (_result *ModifyDbProxyInstanceSslResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDbProxyInstanceSslResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDbProxyInstanceSsl"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDbProxyInstanceSsl(request *ModifyDbProxyInstanceSslRequest) (_result *ModifyDbProxyInstanceSslResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDbProxyInstanceSslResponse{}
	_body, _err := client.ModifyDbProxyInstanceSslWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MigrateConnectionToOtherZoneWithOptions(request *MigrateConnectionToOtherZoneRequest, runtime *util.RuntimeOptions) (_result *MigrateConnectionToOtherZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &MigrateConnectionToOtherZoneResponse{}
	_body, _err := client.DoRequest(tea.String("MigrateConnectionToOtherZone"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MigrateConnectionToOtherZone(request *MigrateConnectionToOtherZoneRequest) (_result *MigrateConnectionToOtherZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MigrateConnectionToOtherZoneResponse{}
	_body, _err := client.MigrateConnectionToOtherZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDBInstanceTopologyWithOptions(request *GetDBInstanceTopologyRequest, runtime *util.RuntimeOptions) (_result *GetDBInstanceTopologyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetDBInstanceTopologyResponse{}
	_body, _err := client.DoRequest(tea.String("GetDBInstanceTopology"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDBInstanceTopology(request *GetDBInstanceTopologyRequest) (_result *GetDBInstanceTopologyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDBInstanceTopologyResponse{}
	_body, _err := client.GetDBInstanceTopologyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckRegionSupportBackupEncryptionWithOptions(request *CheckRegionSupportBackupEncryptionRequest, runtime *util.RuntimeOptions) (_result *CheckRegionSupportBackupEncryptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckRegionSupportBackupEncryptionResponse{}
	_body, _err := client.DoRequest(tea.String("CheckRegionSupportBackupEncryption"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckRegionSupportBackupEncryption(request *CheckRegionSupportBackupEncryptionRequest) (_result *CheckRegionSupportBackupEncryptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckRegionSupportBackupEncryptionResponse{}
	_body, _err := client.CheckRegionSupportBackupEncryptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceDetailWithOptions(request *DescribeDBInstanceDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceDetailResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceDetail"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceDetail(request *DescribeDBInstanceDetailRequest) (_result *DescribeDBInstanceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceDetailResponse{}
	_body, _err := client.DescribeDBInstanceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyLicenseInfoWithOptions(request *ModifyLicenseInfoRequest, runtime *util.RuntimeOptions) (_result *ModifyLicenseInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyLicenseInfoResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyLicenseInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyLicenseInfo(request *ModifyLicenseInfoRequest) (_result *ModifyLicenseInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLicenseInfoResponse{}
	_body, _err := client.ModifyLicenseInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDBProxyEndpointAddressWithOptions(request *DeleteDBProxyEndpointAddressRequest, runtime *util.RuntimeOptions) (_result *DeleteDBProxyEndpointAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDBProxyEndpointAddressResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDBProxyEndpointAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDBProxyEndpointAddress(request *DeleteDBProxyEndpointAddressRequest) (_result *DeleteDBProxyEndpointAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDBProxyEndpointAddressResponse{}
	_body, _err := client.DeleteDBProxyEndpointAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDBProxyEndpointAddressWithOptions(request *CreateDBProxyEndpointAddressRequest, runtime *util.RuntimeOptions) (_result *CreateDBProxyEndpointAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDBProxyEndpointAddressResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDBProxyEndpointAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDBProxyEndpointAddress(request *CreateDBProxyEndpointAddressRequest) (_result *CreateDBProxyEndpointAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDBProxyEndpointAddressResponse{}
	_body, _err := client.CreateDBProxyEndpointAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDasInstanceConfigWithOptions(request *DescribeDasInstanceConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeDasInstanceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDasInstanceConfigResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDasInstanceConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDasInstanceConfig(request *DescribeDasInstanceConfigRequest) (_result *DescribeDasInstanceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDasInstanceConfigResponse{}
	_body, _err := client.DescribeDasInstanceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDasInstanceConfigWithOptions(request *ModifyDasInstanceConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyDasInstanceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDasInstanceConfigResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDasInstanceConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDasInstanceConfig(request *ModifyDasInstanceConfigRequest) (_result *ModifyDasInstanceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDasInstanceConfigResponse{}
	_body, _err := client.ModifyDasInstanceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRdsResourceSettingsWithOptions(request *DescribeRdsResourceSettingsRequest, runtime *util.RuntimeOptions) (_result *DescribeRdsResourceSettingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRdsResourceSettingsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRdsResourceSettings"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRdsResourceSettings(request *DescribeRdsResourceSettingsRequest) (_result *DescribeRdsResourceSettingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRdsResourceSettingsResponse{}
	_body, _err := client.DescribeRdsResourceSettingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteHostAccountWithOptions(request *DeleteHostAccountRequest, runtime *util.RuntimeOptions) (_result *DeleteHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteHostAccountResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteHostAccount"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteHostAccount(request *DeleteHostAccountRequest) (_result *DeleteHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHostAccountResponse{}
	_body, _err := client.DeleteHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHostAccountsWithOptions(request *DescribeHostAccountsRequest, runtime *util.RuntimeOptions) (_result *DescribeHostAccountsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeHostAccountsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeHostAccounts"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHostAccounts(request *DescribeHostAccountsRequest) (_result *DescribeHostAccountsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHostAccountsResponse{}
	_body, _err := client.DescribeHostAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetHostAccountPasswordWithOptions(request *ResetHostAccountPasswordRequest, runtime *util.RuntimeOptions) (_result *ResetHostAccountPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResetHostAccountPasswordResponse{}
	_body, _err := client.DoRequest(tea.String("ResetHostAccountPassword"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetHostAccountPassword(request *ResetHostAccountPasswordRequest) (_result *ResetHostAccountPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetHostAccountPasswordResponse{}
	_body, _err := client.ResetHostAccountPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateHostAccountWithOptions(request *CreateHostAccountRequest, runtime *util.RuntimeOptions) (_result *CreateHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateHostAccountResponse{}
	_body, _err := client.DoRequest(tea.String("CreateHostAccount"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateHostAccount(request *CreateHostAccountRequest) (_result *CreateHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHostAccountResponse{}
	_body, _err := client.CreateHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostImageCategoriesWithOptions(request *DescribeDedicatedHostImageCategoriesRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostImageCategoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDedicatedHostImageCategoriesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDedicatedHostImageCategories"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostImageCategories(request *DescribeDedicatedHostImageCategoriesRequest) (_result *DescribeDedicatedHostImageCategoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostImageCategoriesResponse{}
	_body, _err := client.DescribeDedicatedHostImageCategoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCrossBackupMetaListWithOptions(request *DescribeCrossBackupMetaListRequest, runtime *util.RuntimeOptions) (_result *DescribeCrossBackupMetaListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCrossBackupMetaListResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCrossBackupMetaList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCrossBackupMetaList(request *DescribeCrossBackupMetaListRequest) (_result *DescribeCrossBackupMetaListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCrossBackupMetaListResponse{}
	_body, _err := client.DescribeCrossBackupMetaListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestoreDdrTableWithOptions(request *RestoreDdrTableRequest, runtime *util.RuntimeOptions) (_result *RestoreDdrTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RestoreDdrTableResponse{}
	_body, _err := client.DoRequest(tea.String("RestoreDdrTable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestoreDdrTable(request *RestoreDdrTableRequest) (_result *RestoreDdrTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestoreDdrTableResponse{}
	_body, _err := client.RestoreDdrTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBProxyEndpointAddressWithOptions(request *ModifyDBProxyEndpointAddressRequest, runtime *util.RuntimeOptions) (_result *ModifyDBProxyEndpointAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBProxyEndpointAddressResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBProxyEndpointAddress"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBProxyEndpointAddress(request *ModifyDBProxyEndpointAddressRequest) (_result *ModifyDBProxyEndpointAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBProxyEndpointAddressResponse{}
	_body, _err := client.ModifyDBProxyEndpointAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TerminateMigrateTaskWithOptions(request *TerminateMigrateTaskRequest, runtime *util.RuntimeOptions) (_result *TerminateMigrateTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TerminateMigrateTaskResponse{}
	_body, _err := client.DoRequest(tea.String("TerminateMigrateTask"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TerminateMigrateTask(request *TerminateMigrateTaskRequest) (_result *TerminateMigrateTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TerminateMigrateTaskResponse{}
	_body, _err := client.TerminateMigrateTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLocalAvailableRecoveryTimeWithOptions(request *DescribeLocalAvailableRecoveryTimeRequest, runtime *util.RuntimeOptions) (_result *DescribeLocalAvailableRecoveryTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeLocalAvailableRecoveryTimeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeLocalAvailableRecoveryTime"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLocalAvailableRecoveryTime(request *DescribeLocalAvailableRecoveryTimeRequest) (_result *DescribeLocalAvailableRecoveryTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLocalAvailableRecoveryTimeResponse{}
	_body, _err := client.DescribeLocalAvailableRecoveryTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableZonesWithOptions(request *DescribeAvailableZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAvailableZonesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAvailableZones"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableZones(request *DescribeAvailableZonesRequest) (_result *DescribeAvailableZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableZonesResponse{}
	_body, _err := client.DescribeAvailableZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableClassesWithOptions(request *DescribeAvailableClassesRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableClassesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAvailableClassesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAvailableClasses"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableClasses(request *DescribeAvailableClassesRequest) (_result *DescribeAvailableClassesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableClassesResponse{}
	_body, _err := client.DescribeAvailableClassesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedHostAccountWithOptions(request *CreateDedicatedHostAccountRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDedicatedHostAccountResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDedicatedHostAccount"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedHostAccount(request *CreateDedicatedHostAccountRequest) (_result *CreateDedicatedHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedHostAccountResponse{}
	_body, _err := client.CreateDedicatedHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDedicatedHostAccountWithOptions(request *DeleteDedicatedHostAccountRequest, runtime *util.RuntimeOptions) (_result *DeleteDedicatedHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDedicatedHostAccountResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDedicatedHostAccount"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDedicatedHostAccount(request *DeleteDedicatedHostAccountRequest) (_result *DeleteDedicatedHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDedicatedHostAccountResponse{}
	_body, _err := client.DeleteDedicatedHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAccountWithOptions(request *ModifyDedicatedHostAccountRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDedicatedHostAccountResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDedicatedHostAccount"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAccount(request *ModifyDedicatedHostAccountRequest) (_result *ModifyDedicatedHostAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAccountResponse{}
	_body, _err := client.ModifyDedicatedHostAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TransformDBInstancePayTypeWithOptions(request *TransformDBInstancePayTypeRequest, runtime *util.RuntimeOptions) (_result *TransformDBInstancePayTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TransformDBInstancePayTypeResponse{}
	_body, _err := client.DoRequest(tea.String("TransformDBInstancePayType"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TransformDBInstancePayType(request *TransformDBInstancePayTypeRequest) (_result *TransformDBInstancePayTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TransformDBInstancePayTypeResponse{}
	_body, _err := client.TransformDBInstancePayTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedHostUserWithOptions(request *CreateDedicatedHostUserRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedHostUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDedicatedHostUserResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDedicatedHostUser"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedHostUser(request *CreateDedicatedHostUserRequest) (_result *CreateDedicatedHostUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedHostUserResponse{}
	_body, _err := client.CreateDedicatedHostUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostUserWithOptions(request *ModifyDedicatedHostUserRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDedicatedHostUserResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDedicatedHostUser"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostUser(request *ModifyDedicatedHostUserRequest) (_result *ModifyDedicatedHostUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostUserResponse{}
	_body, _err := client.ModifyDedicatedHostUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DropDedicatedHostUserWithOptions(request *DropDedicatedHostUserRequest, runtime *util.RuntimeOptions) (_result *DropDedicatedHostUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DropDedicatedHostUserResponse{}
	_body, _err := client.DoRequest(tea.String("DropDedicatedHostUser"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DropDedicatedHostUser(request *DropDedicatedHostUserRequest) (_result *DropDedicatedHostUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DropDedicatedHostUserResponse{}
	_body, _err := client.DropDedicatedHostUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeDBProxyInstanceKernelVersionWithOptions(request *UpgradeDBProxyInstanceKernelVersionRequest, runtime *util.RuntimeOptions) (_result *UpgradeDBProxyInstanceKernelVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpgradeDBProxyInstanceKernelVersionResponse{}
	_body, _err := client.DoRequest(tea.String("UpgradeDBProxyInstanceKernelVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeDBProxyInstanceKernelVersion(request *UpgradeDBProxyInstanceKernelVersionRequest) (_result *UpgradeDBProxyInstanceKernelVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeDBProxyInstanceKernelVersionResponse{}
	_body, _err := client.UpgradeDBProxyInstanceKernelVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopDBInstanceWithOptions(request *StopDBInstanceRequest, runtime *util.RuntimeOptions) (_result *StopDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("StopDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopDBInstance(request *StopDBInstanceRequest) (_result *StopDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopDBInstanceResponse{}
	_body, _err := client.StopDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartDBInstanceWithOptions(request *StartDBInstanceRequest, runtime *util.RuntimeOptions) (_result *StartDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("StartDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartDBInstance(request *StartDBInstanceRequest) (_result *StartDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartDBInstanceResponse{}
	_body, _err := client.StartDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSignedEventActionsWithOptions(request *DescribeSignedEventActionsRequest, runtime *util.RuntimeOptions) (_result *DescribeSignedEventActionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSignedEventActionsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSignedEventActions"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSignedEventActions(request *DescribeSignedEventActionsRequest) (_result *DescribeSignedEventActionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSignedEventActionsResponse{}
	_body, _err := client.DescribeSignedEventActionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SignEventActionWithOptions(request *SignEventActionRequest, runtime *util.RuntimeOptions) (_result *SignEventActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SignEventActionResponse{}
	_body, _err := client.DoRequest(tea.String("SignEventAction"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SignEventAction(request *SignEventActionRequest) (_result *SignEventActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SignEventActionResponse{}
	_body, _err := client.SignEventActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeNextEventForSignWithOptions(request *DescribeNextEventForSignRequest, runtime *util.RuntimeOptions) (_result *DescribeNextEventForSignResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeNextEventForSignResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeNextEventForSign"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeNextEventForSign(request *DescribeNextEventForSignRequest) (_result *DescribeNextEventForSignResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNextEventForSignResponse{}
	_body, _err := client.DescribeNextEventForSignWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyActionEventVerifyPolicyWithOptions(request *ModifyActionEventVerifyPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyActionEventVerifyPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyActionEventVerifyPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyActionEventVerifyPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyActionEventVerifyPolicy(request *ModifyActionEventVerifyPolicyRequest) (_result *ModifyActionEventVerifyPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyActionEventVerifyPolicyResponse{}
	_body, _err := client.ModifyActionEventVerifyPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesOverviewWithOptions(request *DescribeDBInstancesOverviewRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesOverviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstancesOverviewResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstancesOverview"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancesOverview(request *DescribeDBInstancesOverviewRequest) (_result *DescribeDBInstancesOverviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesOverviewResponse{}
	_body, _err := client.DescribeDBInstancesOverviewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrateTaskByIdWithOptions(request *DescribeMigrateTaskByIdRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrateTaskByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeMigrateTaskByIdResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeMigrateTaskById"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrateTaskById(request *DescribeMigrateTaskByIdRequest) (_result *DescribeMigrateTaskByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrateTaskByIdResponse{}
	_body, _err := client.DescribeMigrateTaskByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBackupFileWithOptions(request *DeleteBackupFileRequest, runtime *util.RuntimeOptions) (_result *DeleteBackupFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteBackupFileResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteBackupFile"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBackupFile(request *DeleteBackupFileRequest) (_result *DeleteBackupFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackupFileResponse{}
	_body, _err := client.DeleteBackupFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDetachedBackupsWithOptions(request *DescribeDetachedBackupsRequest, runtime *util.RuntimeOptions) (_result *DescribeDetachedBackupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDetachedBackupsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDetachedBackups"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDetachedBackups(request *DescribeDetachedBackupsRequest) (_result *DescribeDetachedBackupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDetachedBackupsResponse{}
	_body, _err := client.DescribeDetachedBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EvaluateDedicatedHostInstanceResourceWithOptions(request *EvaluateDedicatedHostInstanceResourceRequest, runtime *util.RuntimeOptions) (_result *EvaluateDedicatedHostInstanceResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EvaluateDedicatedHostInstanceResourceResponse{}
	_body, _err := client.DoRequest(tea.String("EvaluateDedicatedHostInstanceResource"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EvaluateDedicatedHostInstanceResource(request *EvaluateDedicatedHostInstanceResourceRequest) (_result *EvaluateDedicatedHostInstanceResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EvaluateDedicatedHostInstanceResourceResponse{}
	_body, _err := client.EvaluateDedicatedHostInstanceResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableDedicatedHostClassesWithOptions(request *DescribeAvailableDedicatedHostClassesRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableDedicatedHostClassesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAvailableDedicatedHostClassesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAvailableDedicatedHostClasses"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableDedicatedHostClasses(request *DescribeAvailableDedicatedHostClassesRequest) (_result *DescribeAvailableDedicatedHostClassesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableDedicatedHostClassesResponse{}
	_body, _err := client.DescribeAvailableDedicatedHostClassesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableDedicatedHostZonesWithOptions(request *DescribeAvailableDedicatedHostZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableDedicatedHostZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAvailableDedicatedHostZonesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAvailableDedicatedHostZones"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableDedicatedHostZones(request *DescribeAvailableDedicatedHostZonesRequest) (_result *DescribeAvailableDedicatedHostZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableDedicatedHostZonesResponse{}
	_body, _err := client.DescribeAvailableDedicatedHostZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseInstanceConnectionWithOptions(request *ReleaseInstanceConnectionRequest, runtime *util.RuntimeOptions) (_result *ReleaseInstanceConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseInstanceConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("ReleaseInstanceConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseInstanceConnection(request *ReleaseInstanceConnectionRequest) (_result *ReleaseInstanceConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseInstanceConnectionResponse{}
	_body, _err := client.ReleaseInstanceConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnlockAccountWithOptions(request *UnlockAccountRequest, runtime *util.RuntimeOptions) (_result *UnlockAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnlockAccountResponse{}
	_body, _err := client.DoRequest(tea.String("UnlockAccount"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnlockAccount(request *UnlockAccountRequest) (_result *UnlockAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnlockAccountResponse{}
	_body, _err := client.UnlockAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LockAccountWithOptions(request *LockAccountRequest, runtime *util.RuntimeOptions) (_result *LockAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &LockAccountResponse{}
	_body, _err := client.DoRequest(tea.String("LockAccount"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LockAccount(request *LockAccountRequest) (_result *LockAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LockAccountResponse{}
	_body, _err := client.LockAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.DoRequest(tea.String("ListTagResources"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.DoRequest(tea.String("TagResources"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.DoRequest(tea.String("UntagResources"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostGroupsWithOptions(request *DescribeDedicatedHostGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDedicatedHostGroupsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDedicatedHostGroups"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostGroups(request *DescribeDedicatedHostGroupsRequest) (_result *DescribeDedicatedHostGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostGroupsResponse{}
	_body, _err := client.DescribeDedicatedHostGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedHostGroupWithOptions(request *CreateDedicatedHostGroupRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDedicatedHostGroupResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDedicatedHostGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedHostGroup(request *CreateDedicatedHostGroupRequest) (_result *CreateDedicatedHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedHostGroupResponse{}
	_body, _err := client.CreateDedicatedHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDedicatedHostGroupWithOptions(request *DeleteDedicatedHostGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteDedicatedHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDedicatedHostGroupResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDedicatedHostGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDedicatedHostGroup(request *DeleteDedicatedHostGroupRequest) (_result *DeleteDedicatedHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDedicatedHostGroupResponse{}
	_body, _err := client.DeleteDedicatedHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostGroupAttributeWithOptions(request *ModifyDedicatedHostGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDedicatedHostGroupAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDedicatedHostGroupAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostGroupAttribute(request *ModifyDedicatedHostGroupAttributeRequest) (_result *ModifyDedicatedHostGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostGroupAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartDedicatedHostWithOptions(request *RestartDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *RestartDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RestartDedicatedHostResponse{}
	_body, _err := client.DoRequest(tea.String("RestartDedicatedHost"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartDedicatedHost(request *RestartDedicatedHostRequest) (_result *RestartDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartDedicatedHostResponse{}
	_body, _err := client.RestartDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReplaceDedicatedHostWithOptions(request *ReplaceDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *ReplaceDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReplaceDedicatedHostResponse{}
	_body, _err := client.DoRequest(tea.String("ReplaceDedicatedHost"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReplaceDedicatedHost(request *ReplaceDedicatedHostRequest) (_result *ReplaceDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReplaceDedicatedHostResponse{}
	_body, _err := client.ReplaceDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostsWithOptions(request *DescribeDedicatedHostsRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDedicatedHostsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDedicatedHosts"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHosts(request *DescribeDedicatedHostsRequest) (_result *DescribeDedicatedHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostsResponse{}
	_body, _err := client.DescribeDedicatedHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedHostAttributeWithOptions(request *DescribeDedicatedHostAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedHostAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDedicatedHostAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDedicatedHostAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedHostAttribute(request *DescribeDedicatedHostAttributeRequest) (_result *DescribeDedicatedHostAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedHostAttributeResponse{}
	_body, _err := client.DescribeDedicatedHostAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ClearDedicatedHostWithOptions(request *ClearDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *ClearDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ClearDedicatedHostResponse{}
	_body, _err := client.DoRequest(tea.String("ClearDedicatedHost"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ClearDedicatedHost(request *ClearDedicatedHostRequest) (_result *ClearDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClearDedicatedHostResponse{}
	_body, _err := client.ClearDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAttributeWithOptions(request *ModifyDedicatedHostAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedHostAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDedicatedHostAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDedicatedHostAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDedicatedHostAttribute(request *ModifyDedicatedHostAttributeRequest) (_result *ModifyDedicatedHostAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedHostAttributeResponse{}
	_body, _err := client.ModifyDedicatedHostAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MigrateDBInstanceWithOptions(request *MigrateDBInstanceRequest, runtime *util.RuntimeOptions) (_result *MigrateDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &MigrateDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("MigrateDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MigrateDBInstance(request *MigrateDBInstanceRequest) (_result *MigrateDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MigrateDBInstanceResponse{}
	_body, _err := client.MigrateDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedHostWithOptions(request *CreateDedicatedHostRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDedicatedHostResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDedicatedHost"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedHost(request *CreateDedicatedHostRequest) (_result *CreateDedicatedHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedHostResponse{}
	_body, _err := client.CreateDedicatedHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RebuildDBInstanceWithOptions(request *RebuildDBInstanceRequest, runtime *util.RuntimeOptions) (_result *RebuildDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RebuildDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("RebuildDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RebuildDBInstance(request *RebuildDBInstanceRequest) (_result *RebuildDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebuildDBInstanceResponse{}
	_body, _err := client.RebuildDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBProxyEndpointWithOptions(request *DescribeDBProxyEndpointRequest, runtime *util.RuntimeOptions) (_result *DescribeDBProxyEndpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBProxyEndpointResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBProxyEndpoint"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBProxyEndpoint(request *DescribeDBProxyEndpointRequest) (_result *DescribeDBProxyEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBProxyEndpointResponse{}
	_body, _err := client.DescribeDBProxyEndpointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBProxyPerformanceWithOptions(request *DescribeDBProxyPerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDBProxyPerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBProxyPerformanceResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBProxyPerformance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBProxyPerformance(request *DescribeDBProxyPerformanceRequest) (_result *DescribeDBProxyPerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBProxyPerformanceResponse{}
	_body, _err := client.DescribeDBProxyPerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBProxyWithOptions(request *DescribeDBProxyRequest, runtime *util.RuntimeOptions) (_result *DescribeDBProxyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBProxyResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBProxy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBProxy(request *DescribeDBProxyRequest) (_result *DescribeDBProxyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBProxyResponse{}
	_body, _err := client.DescribeDBProxyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBProxyEndpointWithOptions(request *ModifyDBProxyEndpointRequest, runtime *util.RuntimeOptions) (_result *ModifyDBProxyEndpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBProxyEndpointResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBProxyEndpoint"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBProxyEndpoint(request *ModifyDBProxyEndpointRequest) (_result *ModifyDBProxyEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBProxyEndpointResponse{}
	_body, _err := client.ModifyDBProxyEndpointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBProxyInstanceWithOptions(request *ModifyDBProxyInstanceRequest, runtime *util.RuntimeOptions) (_result *ModifyDBProxyInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBProxyInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBProxyInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBProxyInstance(request *ModifyDBProxyInstanceRequest) (_result *ModifyDBProxyInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBProxyInstanceResponse{}
	_body, _err := client.ModifyDBProxyInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBProxyWithOptions(request *ModifyDBProxyRequest, runtime *util.RuntimeOptions) (_result *ModifyDBProxyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBProxyResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBProxy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBProxy(request *ModifyDBProxyRequest) (_result *ModifyDBProxyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBProxyResponse{}
	_body, _err := client.ModifyDBProxyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyHASwitchConfigWithOptions(request *ModifyHASwitchConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyHASwitchConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyHASwitchConfigResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyHASwitchConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyHASwitchConfig(request *ModifyHASwitchConfigRequest) (_result *ModifyHASwitchConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHASwitchConfigResponse{}
	_body, _err := client.ModifyHASwitchConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeHASwitchConfigWithOptions(request *DescribeHASwitchConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeHASwitchConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeHASwitchConfigResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeHASwitchConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeHASwitchConfig(request *DescribeHASwitchConfigRequest) (_result *DescribeHASwitchConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHASwitchConfigResponse{}
	_body, _err := client.DescribeHASwitchConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyActionEventPolicyWithOptions(request *ModifyActionEventPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyActionEventPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyActionEventPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyActionEventPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyActionEventPolicy(request *ModifyActionEventPolicyRequest) (_result *ModifyActionEventPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyActionEventPolicyResponse{}
	_body, _err := client.ModifyActionEventPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeActionEventPolicyWithOptions(request *DescribeActionEventPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeActionEventPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeActionEventPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeActionEventPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeActionEventPolicy(request *DescribeActionEventPolicyRequest) (_result *DescribeActionEventPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeActionEventPolicyResponse{}
	_body, _err := client.DescribeActionEventPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEventsWithOptions(request *DescribeEventsRequest, runtime *util.RuntimeOptions) (_result *DescribeEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeEventsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeEvents"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEvents(request *DescribeEventsRequest) (_result *DescribeEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventsResponse{}
	_body, _err := client.DescribeEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesForCloneWithOptions(request *DescribeDBInstancesForCloneRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesForCloneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstancesForCloneResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstancesForClone"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancesForClone(request *DescribeDBInstancesForCloneRequest) (_result *DescribeDBInstancesForCloneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesForCloneResponse{}
	_body, _err := client.DescribeDBInstancesForCloneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* DescribeDTCSecurityIpHostsForSQLServer 调用DescribeDTCSecurityIpHostsForSQLServer接口查询RDS实例的分布式事务白名单信息。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeDTCSecurityIpHostsForSQLServer
 * &DBInstanceId=rm-uf6wjk5xxxxxxx
 * &RegionId=cn-hangzhou
 * &<公共请求参数>
 * ```
 * description:   * 关于分布式事务白名单请参见[设置分布式事务白名单](~~124321~~)。
 * 仅适用于如下版本实例：
 * * SQL Server 2012/2016企业版高可用版
 * * SQL Server 2012/2016标准版

*/
func (client *Client) DescribeDTCSecurityIpHostsForSQLServerWithOptions(request *DescribeDTCSecurityIpHostsForSQLServerRequest, runtime *util.RuntimeOptions) (_result *DescribeDTCSecurityIpHostsForSQLServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDTCSecurityIpHostsForSQLServerResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDTCSecurityIpHostsForSQLServer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* DescribeDTCSecurityIpHostsForSQLServer 调用DescribeDTCSecurityIpHostsForSQLServer接口查询RDS实例的分布式事务白名单信息。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeDTCSecurityIpHostsForSQLServer
 * &DBInstanceId=rm-uf6wjk5xxxxxxx
 * &RegionId=cn-hangzhou
 * &<公共请求参数>
 * ```
 * description:   * 关于分布式事务白名单请参见[设置分布式事务白名单](~~124321~~)。
 * 仅适用于如下版本实例：
 * * SQL Server 2012/2016企业版高可用版
 * * SQL Server 2012/2016标准版

*/
func (client *Client) DescribeDTCSecurityIpHostsForSQLServer(request *DescribeDTCSecurityIpHostsForSQLServerRequest) (_result *DescribeDTCSecurityIpHostsForSQLServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDTCSecurityIpHostsForSQLServerResponse{}
	_body, _err := client.DescribeDTCSecurityIpHostsForSQLServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* ModifyDTCSecurityIpHostsForSQLServer 调用ModifyDTCSecurityIpHostsForSQLServer接口设置分布式事务白名单。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=ModifyDTCSecurityIpHostsForSQLServer
 * &DBInstanceId=rm-uf6wjk5xxxxxxx
 * &RegionId=cn-hangzhou
 * &SecurityIpHosts=192.168.1.100,k3ecstest
 * &WhiteListGroupName=test1
 * &<公共请求参数>
 * ```
 * description:   * 分布式事务白名单可以让ECS实例和RDS实例之间支持分布式事务。详情请参见[设置分布式事务白名单](~~124321~~)。
 * 仅适用于如下版本实例：
 * * SQL Server 2012/2016企业版高可用版
 * * SQL Server 2012/2016标准版

*/
func (client *Client) ModifyDTCSecurityIpHostsForSQLServerWithOptions(request *ModifyDTCSecurityIpHostsForSQLServerRequest, runtime *util.RuntimeOptions) (_result *ModifyDTCSecurityIpHostsForSQLServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDTCSecurityIpHostsForSQLServerResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDTCSecurityIpHostsForSQLServer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* ModifyDTCSecurityIpHostsForSQLServer 调用ModifyDTCSecurityIpHostsForSQLServer接口设置分布式事务白名单。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=ModifyDTCSecurityIpHostsForSQLServer
 * &DBInstanceId=rm-uf6wjk5xxxxxxx
 * &RegionId=cn-hangzhou
 * &SecurityIpHosts=192.168.1.100,k3ecstest
 * &WhiteListGroupName=test1
 * &<公共请求参数>
 * ```
 * description:   * 分布式事务白名单可以让ECS实例和RDS实例之间支持分布式事务。详情请参见[设置分布式事务白名单](~~124321~~)。
 * 仅适用于如下版本实例：
 * * SQL Server 2012/2016企业版高可用版
 * * SQL Server 2012/2016标准版

*/
func (client *Client) ModifyDTCSecurityIpHostsForSQLServer(request *ModifyDTCSecurityIpHostsForSQLServerRequest) (_result *ModifyDTCSecurityIpHostsForSQLServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDTCSecurityIpHostsForSQLServerResponse{}
	_body, _err := client.ModifyDTCSecurityIpHostsForSQLServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* DescribeDBInstanceIpHostname 调用DescribeDBInstanceIpHostname接口查询RDS实例的底层ECS实例的hostname。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeDBInstanceIpHostname
 * &DBInstanceId=rm-uf6wjk5xxxxxxx
 * &RegionId=cn-hangzhou
 * &<公共请求参数>
 * ```
 * description:   * RDS实例是基于ECS实例搭建的，本接口用于[设置分布式事务白名单](~~124321~~)时查询RDS实例的底层ECS实例的hostname。
 * 仅适用于如下版本实例：
 * * SQL Server 2012/2016企业版高可用版
 * * SQL Server 2012/2016标准版

*/
func (client *Client) DescribeDBInstanceIpHostnameWithOptions(request *DescribeDBInstanceIpHostnameRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceIpHostnameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceIpHostnameResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceIpHostname"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* DescribeDBInstanceIpHostname 调用DescribeDBInstanceIpHostname接口查询RDS实例的底层ECS实例的hostname。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeDBInstanceIpHostname
 * &DBInstanceId=rm-uf6wjk5xxxxxxx
 * &RegionId=cn-hangzhou
 * &<公共请求参数>
 * ```
 * description:   * RDS实例是基于ECS实例搭建的，本接口用于[设置分布式事务白名单](~~124321~~)时查询RDS实例的底层ECS实例的hostname。
 * 仅适用于如下版本实例：
 * * SQL Server 2012/2016企业版高可用版
 * * SQL Server 2012/2016标准版

*/
func (client *Client) DescribeDBInstanceIpHostname(request *DescribeDBInstanceIpHostnameRequest) (_result *DescribeDBInstanceIpHostnameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceIpHostnameResponse{}
	_body, _err := client.DescribeDBInstanceIpHostnameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceAutoUpgradeMinorVersionWithOptions(request *ModifyDBInstanceAutoUpgradeMinorVersionRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceAutoUpgradeMinorVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceAutoUpgradeMinorVersionResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceAutoUpgradeMinorVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceAutoUpgradeMinorVersion(request *ModifyDBInstanceAutoUpgradeMinorVersionRequest) (_result *ModifyDBInstanceAutoUpgradeMinorVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceAutoUpgradeMinorVersionResponse{}
	_body, _err := client.ModifyDBInstanceAutoUpgradeMinorVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* DescribeAvailableCrossRegion 调用DescribeAvailableCrossRegion接口查询所选地域当前可以进行跨地域备份的目的地域。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeAvailableCrossRegion
 * &RegionId=cn-hangzhou
 * &<公共请求参数>
 * ```
 * description:
*/
func (client *Client) DescribeAvailableCrossRegionWithOptions(request *DescribeAvailableCrossRegionRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableCrossRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAvailableCrossRegionResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAvailableCrossRegion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* DescribeAvailableCrossRegion 调用DescribeAvailableCrossRegion接口查询所选地域当前可以进行跨地域备份的目的地域。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeAvailableCrossRegion
 * &RegionId=cn-hangzhou
 * &<公共请求参数>
 * ```
 * description:
*/
func (client *Client) DescribeAvailableCrossRegion(request *DescribeAvailableCrossRegionRequest) (_result *DescribeAvailableCrossRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableCrossRegionResponse{}
	_body, _err := client.DescribeAvailableCrossRegionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckCreateDdrDBInstanceWithOptions(request *CheckCreateDdrDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CheckCreateDdrDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckCreateDdrDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("CheckCreateDdrDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckCreateDdrDBInstance(request *CheckCreateDdrDBInstanceRequest) (_result *CheckCreateDdrDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckCreateDdrDBInstanceResponse{}
	_body, _err := client.CheckCreateDdrDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* DescribeAvailableRecoveryTime 调用DescribeAvailableRecoveryTime接口查询某跨地域备份文件可恢复哪个时间段的数据。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeAvailableRecoveryTime
 * &CrossBackupId=14377
 * &<公共请求参数>
 * ```
 * description:   * 查看普通备份文件可恢复哪个时间段的数据请参见[DescribeBackups](~~26273~~)。
 * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) DescribeAvailableRecoveryTimeWithOptions(request *DescribeAvailableRecoveryTimeRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableRecoveryTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAvailableRecoveryTimeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAvailableRecoveryTime"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* DescribeAvailableRecoveryTime 调用DescribeAvailableRecoveryTime接口查询某跨地域备份文件可恢复哪个时间段的数据。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeAvailableRecoveryTime
 * &CrossBackupId=14377
 * &<公共请求参数>
 * ```
 * description:   * 查看普通备份文件可恢复哪个时间段的数据请参见[DescribeBackups](~~26273~~)。
 * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) DescribeAvailableRecoveryTime(request *DescribeAvailableRecoveryTimeRequest) (_result *DescribeAvailableRecoveryTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableRecoveryTimeResponse{}
	_body, _err := client.DescribeAvailableRecoveryTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* DescribeCrossRegionLogBackupFiles 调用DescribeCrossRegionLogBackupFiles接口查看跨地域日志备份文件列表。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeCrossRegionLogBackupFiles
 * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
 * &StartTime=2019-05-30T12:10Z
 * &EndTime=2019-06-15T12:10Z
 * &<公共请求参数>
 * ```
 * description:   * 查看数据备份文件请参见[DescribeCrossRegionBackups](~~121733~~)。
 * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) DescribeCrossRegionLogBackupFilesWithOptions(request *DescribeCrossRegionLogBackupFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeCrossRegionLogBackupFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCrossRegionLogBackupFilesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCrossRegionLogBackupFiles"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* DescribeCrossRegionLogBackupFiles 调用DescribeCrossRegionLogBackupFiles接口查看跨地域日志备份文件列表。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeCrossRegionLogBackupFiles
 * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
 * &StartTime=2019-05-30T12:10Z
 * &EndTime=2019-06-15T12:10Z
 * &<公共请求参数>
 * ```
 * description:   * 查看数据备份文件请参见[DescribeCrossRegionBackups](~~121733~~)。
 * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) DescribeCrossRegionLogBackupFiles(request *DescribeCrossRegionLogBackupFilesRequest) (_result *DescribeCrossRegionLogBackupFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCrossRegionLogBackupFilesResponse{}
	_body, _err := client.DescribeCrossRegionLogBackupFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* ModifyInstanceCrossBackupPolicy 调用ModifyInstanceCrossBackupPolicy接口修改RDS跨地域备份设置。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=ModifyInstanceCrossBackupPolicy
 * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
 * &RegionId=cn-hangzhou
 * &<公共请求参数>
 * ```
 * description:   * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) ModifyInstanceCrossBackupPolicyWithOptions(request *ModifyInstanceCrossBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceCrossBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceCrossBackupPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceCrossBackupPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* ModifyInstanceCrossBackupPolicy 调用ModifyInstanceCrossBackupPolicy接口修改RDS跨地域备份设置。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=ModifyInstanceCrossBackupPolicy
 * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
 * &RegionId=cn-hangzhou
 * &<公共请求参数>
 * ```
 * description:   * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) ModifyInstanceCrossBackupPolicy(request *ModifyInstanceCrossBackupPolicyRequest) (_result *ModifyInstanceCrossBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceCrossBackupPolicyResponse{}
	_body, _err := client.ModifyInstanceCrossBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* CreateDdrInstance 调用CreateDdrInstance接口跨地域恢复数据到新实例。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action==CreateDdrInstance
 * &RegionId=cn-hangzhou
 * &Engine=MySQL
 * &EngineVersion=5.6
 * &DBInstanceClass=rds.mysql.s1.small
 * &DBInstanceStorage=20
 * &DBInstanceNetType=Intranet
 * &PayType=Prepaid
 * &RestoreType=0
 * &SecurityIPList=127.0.0.1
 * &BackupSetId=14358
 * &<公共请求参数>
 * ```
 * description:   * 恢复前可以调用[CheckCreateDdrDBInstance](~~121721~~)接口预检查某RDS实例是否可以用跨地域备份集进行跨地域恢复。
 * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) CreateDdrInstanceWithOptions(request *CreateDdrInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateDdrInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDdrInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDdrInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* CreateDdrInstance 调用CreateDdrInstance接口跨地域恢复数据到新实例。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action==CreateDdrInstance
 * &RegionId=cn-hangzhou
 * &Engine=MySQL
 * &EngineVersion=5.6
 * &DBInstanceClass=rds.mysql.s1.small
 * &DBInstanceStorage=20
 * &DBInstanceNetType=Intranet
 * &PayType=Prepaid
 * &RestoreType=0
 * &SecurityIPList=127.0.0.1
 * &BackupSetId=14358
 * &<公共请求参数>
 * ```
 * description:   * 恢复前可以调用[CheckCreateDdrDBInstance](~~121721~~)接口预检查某RDS实例是否可以用跨地域备份集进行跨地域恢复。
 * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) CreateDdrInstance(request *CreateDdrInstanceRequest) (_result *CreateDdrInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDdrInstanceResponse{}
	_body, _err := client.CreateDdrInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCrossRegionBackupDBInstanceWithOptions(request *DescribeCrossRegionBackupDBInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeCrossRegionBackupDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCrossRegionBackupDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCrossRegionBackupDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCrossRegionBackupDBInstance(request *DescribeCrossRegionBackupDBInstanceRequest) (_result *DescribeCrossRegionBackupDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCrossRegionBackupDBInstanceResponse{}
	_body, _err := client.DescribeCrossRegionBackupDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* DescribeInstanceCrossBackupPolicy 调用DescribeInstanceCrossBackupPolicy接口查询跨地域备份设置。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeInstanceCrossBackupPolicy
 * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
 * &<公共请求参数>
 * ```
 * description:   * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) DescribeInstanceCrossBackupPolicyWithOptions(request *DescribeInstanceCrossBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceCrossBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceCrossBackupPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceCrossBackupPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* DescribeInstanceCrossBackupPolicy 调用DescribeInstanceCrossBackupPolicy接口查询跨地域备份设置。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeInstanceCrossBackupPolicy
 * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
 * &<公共请求参数>
 * ```
 * description:   * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) DescribeInstanceCrossBackupPolicy(request *DescribeInstanceCrossBackupPolicyRequest) (_result *DescribeInstanceCrossBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceCrossBackupPolicyResponse{}
	_body, _err := client.DescribeInstanceCrossBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* DescribeCrossRegionBackups 调用DescribeCrossRegionBackups接口查看某RDS实例跨地域数据备份文件列表。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeCrossRegionBackups
 * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
 * &CrossBackupId=14562
 * &<公共请求参数>
 * ```
 * description:   * 查看日志备份文件请参见[DescribeCrossRegionLogBackupFiles](~~121734~~)。
 * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) DescribeCrossRegionBackupsWithOptions(request *DescribeCrossRegionBackupsRequest, runtime *util.RuntimeOptions) (_result *DescribeCrossRegionBackupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCrossRegionBackupsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCrossRegionBackups"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* DescribeCrossRegionBackups 调用DescribeCrossRegionBackups接口查看某RDS实例跨地域数据备份文件列表。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeCrossRegionBackups
 * &DBInstanceId=rm-uf6wjk5xxxxxxxxxx
 * &CrossBackupId=14562
 * &<公共请求参数>
 * ```
 * description:   * 查看日志备份文件请参见[DescribeCrossRegionLogBackupFiles](~~121734~~)。
 * 仅适用于如下实例：
 * * MySQL 5.7高可用本地SSD盘版
 * * MySQL 5.6

*/
func (client *Client) DescribeCrossRegionBackups(request *DescribeCrossRegionBackupsRequest) (_result *DescribeCrossRegionBackupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCrossRegionBackupsResponse{}
	_body, _err := client.DescribeCrossRegionBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckCloudResourceAuthorizedWithOptions(request *CheckCloudResourceAuthorizedRequest, runtime *util.RuntimeOptions) (_result *CheckCloudResourceAuthorizedResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckCloudResourceAuthorizedResponse{}
	_body, _err := client.DoRequest(tea.String("CheckCloudResourceAuthorized"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckCloudResourceAuthorized(request *CheckCloudResourceAuthorizedRequest) (_result *CheckCloudResourceAuthorizedResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckCloudResourceAuthorizedResponse{}
	_body, _err := client.CheckCloudResourceAuthorizedWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeReadDBInstanceDelayWithOptions(request *DescribeReadDBInstanceDelayRequest, runtime *util.RuntimeOptions) (_result *DescribeReadDBInstanceDelayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeReadDBInstanceDelayResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeReadDBInstanceDelay"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeReadDBInstanceDelay(request *DescribeReadDBInstanceDelayRequest) (_result *DescribeReadDBInstanceDelayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReadDBInstanceDelayResponse{}
	_body, _err := client.DescribeReadDBInstanceDelayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestoreTableWithOptions(request *RestoreTableRequest, runtime *util.RuntimeOptions) (_result *RestoreTableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RestoreTableResponse{}
	_body, _err := client.DoRequest(tea.String("RestoreTable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestoreTable(request *RestoreTableRequest) (_result *RestoreTableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestoreTableResponse{}
	_body, _err := client.RestoreTableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateParameterGroupWithOptions(request *CreateParameterGroupRequest, runtime *util.RuntimeOptions) (_result *CreateParameterGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateParameterGroupResponse{}
	_body, _err := client.DoRequest(tea.String("CreateParameterGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateParameterGroup(request *CreateParameterGroupRequest) (_result *CreateParameterGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateParameterGroupResponse{}
	_body, _err := client.CreateParameterGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeParameterGroupsWithOptions(request *DescribeParameterGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeParameterGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeParameterGroupsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeParameterGroups"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeParameterGroups(request *DescribeParameterGroupsRequest) (_result *DescribeParameterGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParameterGroupsResponse{}
	_body, _err := client.DescribeParameterGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloneParameterGroupWithOptions(request *CloneParameterGroupRequest, runtime *util.RuntimeOptions) (_result *CloneParameterGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CloneParameterGroupResponse{}
	_body, _err := client.DoRequest(tea.String("CloneParameterGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloneParameterGroup(request *CloneParameterGroupRequest) (_result *CloneParameterGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloneParameterGroupResponse{}
	_body, _err := client.CloneParameterGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeParameterGroupWithOptions(request *DescribeParameterGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeParameterGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeParameterGroupResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeParameterGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeParameterGroup(request *DescribeParameterGroupRequest) (_result *DescribeParameterGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParameterGroupResponse{}
	_body, _err := client.DescribeParameterGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyParameterGroupWithOptions(request *ModifyParameterGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyParameterGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyParameterGroupResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyParameterGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyParameterGroup(request *ModifyParameterGroupRequest) (_result *ModifyParameterGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyParameterGroupResponse{}
	_body, _err := client.ModifyParameterGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteParameterGroupWithOptions(request *DeleteParameterGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteParameterGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteParameterGroupResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteParameterGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteParameterGroup(request *DeleteParameterGroupRequest) (_result *DeleteParameterGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteParameterGroupResponse{}
	_body, _err := client.DeleteParameterGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySQLCollectorRetentionWithOptions(request *ModifySQLCollectorRetentionRequest, runtime *util.RuntimeOptions) (_result *ModifySQLCollectorRetentionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySQLCollectorRetentionResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySQLCollectorRetention"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySQLCollectorRetention(request *ModifySQLCollectorRetentionRequest) (_result *ModifySQLCollectorRetentionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySQLCollectorRetentionResponse{}
	_body, _err := client.ModifySQLCollectorRetentionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLCollectorRetentionWithOptions(request *DescribeSQLCollectorRetentionRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLCollectorRetentionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSQLCollectorRetentionResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSQLCollectorRetention"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLCollectorRetention(request *DescribeSQLCollectorRetentionRequest) (_result *DescribeSQLCollectorRetentionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLCollectorRetentionResponse{}
	_body, _err := client.DescribeSQLCollectorRetentionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckInstanceExistWithOptions(request *CheckInstanceExistRequest, runtime *util.RuntimeOptions) (_result *CheckInstanceExistResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckInstanceExistResponse{}
	_body, _err := client.DoRequest(tea.String("CheckInstanceExist"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckInstanceExist(request *CheckInstanceExistRequest) (_result *CheckInstanceExistResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckInstanceExistResponse{}
	_body, _err := client.CheckInstanceExistWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLogBackupFilesWithOptions(request *DescribeLogBackupFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeLogBackupFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeLogBackupFilesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeLogBackupFiles"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLogBackupFiles(request *DescribeLogBackupFilesRequest) (_result *DescribeLogBackupFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLogBackupFilesResponse{}
	_body, _err := client.DescribeLogBackupFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* MigrateSecurityIPMode You can call this operation to switch a whitelist from normal mode to safe mode.
 * request demo:   * http(s)://rds.aliyuncs.com/? Action=MigrateSecurityIPMode
 * &DBInstanceId=rm-uf6wjk5xxxxxxx
 * &<Common request parameters>
 * description:   * * In normal mode, IP addresses in the whitelist apply to both classic networks and VPCs. In case of security risks, we recommend that you switch to safe mode.
 * * In safe mode, IP addresses in the whitelist are divided into VPC IP addresses and the IP addresses of classic networks and public networks.
 * >
 * * Safe mode cannot be switched to normal mode.
 * * This operation is not applicable to SQL Server and MariaDB instances.

*/
func (client *Client) MigrateSecurityIPModeWithOptions(request *MigrateSecurityIPModeRequest, runtime *util.RuntimeOptions) (_result *MigrateSecurityIPModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &MigrateSecurityIPModeResponse{}
	_body, _err := client.DoRequest(tea.String("MigrateSecurityIPMode"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* MigrateSecurityIPMode You can call this operation to switch a whitelist from normal mode to safe mode.
 * request demo:   * http(s)://rds.aliyuncs.com/? Action=MigrateSecurityIPMode
 * &DBInstanceId=rm-uf6wjk5xxxxxxx
 * &<Common request parameters>
 * description:   * * In normal mode, IP addresses in the whitelist apply to both classic networks and VPCs. In case of security risks, we recommend that you switch to safe mode.
 * * In safe mode, IP addresses in the whitelist are divided into VPC IP addresses and the IP addresses of classic networks and public networks.
 * >
 * * Safe mode cannot be switched to normal mode.
 * * This operation is not applicable to SQL Server and MariaDB instances.

*/
func (client *Client) MigrateSecurityIPMode(request *MigrateSecurityIPModeRequest) (_result *MigrateSecurityIPModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MigrateSecurityIPModeResponse{}
	_body, _err := client.MigrateSecurityIPModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchDBInstanceVpcWithOptions(request *SwitchDBInstanceVpcRequest, runtime *util.RuntimeOptions) (_result *SwitchDBInstanceVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SwitchDBInstanceVpcResponse{}
	_body, _err := client.DoRequest(tea.String("SwitchDBInstanceVpc"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchDBInstanceVpc(request *SwitchDBInstanceVpcRequest) (_result *SwitchDBInstanceVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchDBInstanceVpcResponse{}
	_body, _err := client.SwitchDBInstanceVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCollationTimeZonesWithOptions(request *DescribeCollationTimeZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeCollationTimeZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCollationTimeZonesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCollationTimeZones"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCollationTimeZones(request *DescribeCollationTimeZonesRequest) (_result *DescribeCollationTimeZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCollationTimeZonesResponse{}
	_body, _err := client.DescribeCollationTimeZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceKeywordsWithOptions(request *DescribeInstanceKeywordsRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceKeywordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceKeywordsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceKeywords"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceKeywords(request *DescribeInstanceKeywordsRequest) (_result *DescribeInstanceKeywordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceKeywordsResponse{}
	_body, _err := client.DescribeInstanceKeywordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyCollationTimeZoneWithOptions(request *ModifyCollationTimeZoneRequest, runtime *util.RuntimeOptions) (_result *ModifyCollationTimeZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyCollationTimeZoneResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyCollationTimeZone"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyCollationTimeZone(request *ModifyCollationTimeZoneRequest) (_result *ModifyCollationTimeZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCollationTimeZoneResponse{}
	_body, _err := client.ModifyCollationTimeZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupDatabaseWithOptions(request *DescribeBackupDatabaseRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBackupDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBackupDatabase"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupDatabase(request *DescribeBackupDatabaseRequest) (_result *DescribeBackupDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupDatabaseResponse{}
	_body, _err := client.DescribeBackupDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyDatabaseBetweenInstancesWithOptions(request *CopyDatabaseBetweenInstancesRequest, runtime *util.RuntimeOptions) (_result *CopyDatabaseBetweenInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CopyDatabaseBetweenInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("CopyDatabaseBetweenInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyDatabaseBetweenInstances(request *CopyDatabaseBetweenInstancesRequest) (_result *CopyDatabaseBetweenInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyDatabaseBetweenInstancesResponse{}
	_body, _err := client.CopyDatabaseBetweenInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RecoveryDBInstanceWithOptions(request *RecoveryDBInstanceRequest, runtime *util.RuntimeOptions) (_result *RecoveryDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RecoveryDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("RecoveryDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RecoveryDBInstance(request *RecoveryDBInstanceRequest) (_result *RecoveryDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecoveryDBInstanceResponse{}
	_body, _err := client.RecoveryDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAvailableResourceWithOptions(request *DescribeAvailableResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeAvailableResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAvailableResource"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAvailableResource(request *DescribeAvailableResourceRequest) (_result *DescribeAvailableResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.DescribeAvailableResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DestroyDBInstanceWithOptions(request *DestroyDBInstanceRequest, runtime *util.RuntimeOptions) (_result *DestroyDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DestroyDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("DestroyDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DestroyDBInstance(request *DestroyDBInstanceRequest) (_result *DestroyDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DestroyDBInstanceResponse{}
	_body, _err := client.DestroyDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReadonlyInstanceDelayReplicationTimeWithOptions(request *ModifyReadonlyInstanceDelayReplicationTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyReadonlyInstanceDelayReplicationTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyReadonlyInstanceDelayReplicationTimeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyReadonlyInstanceDelayReplicationTime"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReadonlyInstanceDelayReplicationTime(request *ModifyReadonlyInstanceDelayReplicationTimeRequest) (_result *ModifyReadonlyInstanceDelayReplicationTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReadonlyInstanceDelayReplicationTimeResponse{}
	_body, _err := client.ModifyReadonlyInstanceDelayReplicationTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceProxyConfigurationWithOptions(request *DescribeDBInstanceProxyConfigurationRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceProxyConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceProxyConfigurationResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceProxyConfiguration"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceProxyConfiguration(request *DescribeDBInstanceProxyConfigurationRequest) (_result *DescribeDBInstanceProxyConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceProxyConfigurationResponse{}
	_body, _err := client.DescribeDBInstanceProxyConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateOnlineDatabaseTaskWithOptions(request *CreateOnlineDatabaseTaskRequest, runtime *util.RuntimeOptions) (_result *CreateOnlineDatabaseTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateOnlineDatabaseTaskResponse{}
	_body, _err := client.DoRequest(tea.String("CreateOnlineDatabaseTask"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateOnlineDatabaseTask(request *CreateOnlineDatabaseTaskRequest) (_result *CreateOnlineDatabaseTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOnlineDatabaseTaskResponse{}
	_body, _err := client.CreateOnlineDatabaseTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeDBInstanceKernelVersionWithOptions(request *UpgradeDBInstanceKernelVersionRequest, runtime *util.RuntimeOptions) (_result *UpgradeDBInstanceKernelVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpgradeDBInstanceKernelVersionResponse{}
	_body, _err := client.DoRequest(tea.String("UpgradeDBInstanceKernelVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeDBInstanceKernelVersion(request *UpgradeDBInstanceKernelVersionRequest) (_result *UpgradeDBInstanceKernelVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeDBInstanceKernelVersionResponse{}
	_body, _err := client.UpgradeDBInstanceKernelVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceProxyConfigurationWithOptions(request *ModifyDBInstanceProxyConfigurationRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceProxyConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceProxyConfigurationResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceProxyConfiguration"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceProxyConfiguration(request *ModifyDBInstanceProxyConfigurationRequest) (_result *ModifyDBInstanceProxyConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceProxyConfigurationResponse{}
	_body, _err := client.ModifyDBInstanceProxyConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupConfigurationWithOptions(request *DescribeSecurityGroupConfigurationRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSecurityGroupConfigurationResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSecurityGroupConfiguration"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroupConfiguration(request *DescribeSecurityGroupConfigurationRequest) (_result *DescribeSecurityGroupConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupConfigurationResponse{}
	_body, _err := client.DescribeSecurityGroupConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityGroupConfigurationWithOptions(request *ModifySecurityGroupConfigurationRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySecurityGroupConfigurationResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySecurityGroupConfiguration"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityGroupConfiguration(request *ModifySecurityGroupConfigurationRequest) (_result *ModifySecurityGroupConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupConfigurationResponse{}
	_body, _err := client.ModifySecurityGroupConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOssDownloadsForSQLServerWithOptions(request *DescribeOssDownloadsForSQLServerRequest, runtime *util.RuntimeOptions) (_result *DescribeOssDownloadsForSQLServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeOssDownloadsForSQLServerResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeOssDownloadsForSQLServer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOssDownloadsForSQLServer(request *DescribeOssDownloadsForSQLServerRequest) (_result *DescribeOssDownloadsForSQLServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOssDownloadsForSQLServerResponse{}
	_body, _err := client.DescribeOssDownloadsForSQLServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrateTasksForSQLServerWithOptions(request *DescribeMigrateTasksForSQLServerRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrateTasksForSQLServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeMigrateTasksForSQLServerResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeMigrateTasksForSQLServer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrateTasksForSQLServer(request *DescribeMigrateTasksForSQLServerRequest) (_result *DescribeMigrateTasksForSQLServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrateTasksForSQLServerResponse{}
	_body, _err := client.DescribeMigrateTasksForSQLServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMigrateTaskForSQLServerWithOptions(request *CreateMigrateTaskForSQLServerRequest, runtime *util.RuntimeOptions) (_result *CreateMigrateTaskForSQLServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateMigrateTaskForSQLServerResponse{}
	_body, _err := client.DoRequest(tea.String("CreateMigrateTaskForSQLServer"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMigrateTaskForSQLServer(request *CreateMigrateTaskForSQLServerRequest) (_result *CreateMigrateTaskForSQLServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMigrateTaskForSQLServerResponse{}
	_body, _err := client.CreateMigrateTaskForSQLServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMigrateTaskWithOptions(request *CreateMigrateTaskRequest, runtime *util.RuntimeOptions) (_result *CreateMigrateTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateMigrateTaskResponse{}
	_body, _err := client.DoRequest(tea.String("CreateMigrateTask"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMigrateTask(request *CreateMigrateTaskRequest) (_result *CreateMigrateTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMigrateTaskResponse{}
	_body, _err := client.CreateMigrateTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeOssDownloadsWithOptions(request *DescribeOssDownloadsRequest, runtime *util.RuntimeOptions) (_result *DescribeOssDownloadsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeOssDownloadsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeOssDownloads"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeOssDownloads(request *DescribeOssDownloadsRequest) (_result *DescribeOssDownloadsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOssDownloadsResponse{}
	_body, _err := client.DescribeOssDownloadsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrateTasksWithOptions(request *DescribeMigrateTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrateTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeMigrateTasksResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeMigrateTasks"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrateTasks(request *DescribeMigrateTasksRequest) (_result *DescribeMigrateTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrateTasksResponse{}
	_body, _err := client.DescribeMigrateTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CopyDatabaseWithOptions(request *CopyDatabaseRequest, runtime *util.RuntimeOptions) (_result *CopyDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CopyDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("CopyDatabase"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CopyDatabase(request *CopyDatabaseRequest) (_result *CopyDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyDatabaseResponse{}
	_body, _err := client.CopyDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetAccountWithOptions(request *ResetAccountRequest, runtime *util.RuntimeOptions) (_result *ResetAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResetAccountResponse{}
	_body, _err := client.DoRequest(tea.String("ResetAccount"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetAccount(request *ResetAccountRequest) (_result *ResetAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAccountResponse{}
	_body, _err := client.ResetAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesAsCsvWithOptions(request *DescribeDBInstancesAsCsvRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesAsCsvResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstancesAsCsvResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstancesAsCsv"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancesAsCsv(request *DescribeDBInstancesAsCsvRequest) (_result *DescribeDBInstancesAsCsvResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesAsCsvResponse{}
	_body, _err := client.DescribeDBInstancesAsCsvWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceNetworkExpireTimeWithOptions(request *ModifyDBInstanceNetworkExpireTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceNetworkExpireTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceNetworkExpireTimeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceNetworkExpireTime"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceNetworkExpireTime(request *ModifyDBInstanceNetworkExpireTimeRequest) (_result *ModifyDBInstanceNetworkExpireTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceNetworkExpireTimeResponse{}
	_body, _err := client.ModifyDBInstanceNetworkExpireTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyResourceGroupWithOptions(request *ModifyResourceGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyResourceGroupResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyResourceGroup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyResourceGroup(request *ModifyResourceGroupRequest) (_result *ModifyResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyResourceGroupResponse{}
	_body, _err := client.ModifyResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRenewalPriceWithOptions(request *DescribeRenewalPriceRequest, runtime *util.RuntimeOptions) (_result *DescribeRenewalPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRenewalPriceResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRenewalPrice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRenewalPrice(request *DescribeRenewalPriceRequest) (_result *DescribeRenewalPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRenewalPriceResponse{}
	_body, _err := client.DescribeRenewalPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePriceWithOptions(request *DescribePriceRequest, runtime *util.RuntimeOptions) (_result *DescribePriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribePriceResponse{}
	_body, _err := client.DoRequest(tea.String("DescribePrice"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePrice(request *DescribePriceRequest) (_result *DescribePriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceResponse{}
	_body, _err := client.DescribePriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewInstanceWithOptions(request *RenewInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RenewInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("RenewInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewInstance(request *RenewInstanceRequest) (_result *RenewInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewInstanceResponse{}
	_body, _err := client.RenewInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckRecoveryConditionsWithOptions(request *CheckRecoveryConditionsRequest, runtime *util.RuntimeOptions) (_result *CheckRecoveryConditionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckRecoveryConditionsResponse{}
	_body, _err := client.DoRequest(tea.String("CheckRecoveryConditions"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckRecoveryConditions(request *CheckRecoveryConditionsRequest) (_result *CheckRecoveryConditionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckRecoveryConditionsResponse{}
	_body, _err := client.CheckRecoveryConditionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewalAttributeWithOptions(request *ModifyInstanceAutoRenewalAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAutoRenewalAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyInstanceAutoRenewalAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyInstanceAutoRenewalAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyInstanceAutoRenewalAttribute(request *ModifyInstanceAutoRenewalAttributeRequest) (_result *ModifyInstanceAutoRenewalAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAutoRenewalAttributeResponse{}
	_body, _err := client.ModifyInstanceAutoRenewalAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewalAttributeWithOptions(request *DescribeInstanceAutoRenewalAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAutoRenewalAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeInstanceAutoRenewalAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeInstanceAutoRenewalAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInstanceAutoRenewalAttribute(request *DescribeInstanceAutoRenewalAttributeRequest) (_result *DescribeInstanceAutoRenewalAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAutoRenewalAttributeResponse{}
	_body, _err := client.DescribeInstanceAutoRenewalAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseReadWriteSplittingConnectionWithOptions(request *ReleaseReadWriteSplittingConnectionRequest, runtime *util.RuntimeOptions) (_result *ReleaseReadWriteSplittingConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseReadWriteSplittingConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("ReleaseReadWriteSplittingConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseReadWriteSplittingConnection(request *ReleaseReadWriteSplittingConnectionRequest) (_result *ReleaseReadWriteSplittingConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseReadWriteSplittingConnectionResponse{}
	_body, _err := client.ReleaseReadWriteSplittingConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyReadWriteSplittingConnectionWithOptions(request *ModifyReadWriteSplittingConnectionRequest, runtime *util.RuntimeOptions) (_result *ModifyReadWriteSplittingConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyReadWriteSplittingConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyReadWriteSplittingConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyReadWriteSplittingConnection(request *ModifyReadWriteSplittingConnectionRequest) (_result *ModifyReadWriteSplittingConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyReadWriteSplittingConnectionResponse{}
	_body, _err := client.ModifyReadWriteSplittingConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CalculateDBInstanceWeightWithOptions(request *CalculateDBInstanceWeightRequest, runtime *util.RuntimeOptions) (_result *CalculateDBInstanceWeightResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CalculateDBInstanceWeightResponse{}
	_body, _err := client.DoRequest(tea.String("CalculateDBInstanceWeight"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CalculateDBInstanceWeight(request *CalculateDBInstanceWeightRequest) (_result *CalculateDBInstanceWeightResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CalculateDBInstanceWeightResponse{}
	_body, _err := client.CalculateDBInstanceWeightWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateReadWriteSplittingConnectionWithOptions(request *AllocateReadWriteSplittingConnectionRequest, runtime *util.RuntimeOptions) (_result *AllocateReadWriteSplittingConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllocateReadWriteSplittingConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("AllocateReadWriteSplittingConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateReadWriteSplittingConnection(request *AllocateReadWriteSplittingConnectionRequest) (_result *AllocateReadWriteSplittingConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateReadWriteSplittingConnectionResponse{}
	_body, _err := client.AllocateReadWriteSplittingConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstancePayTypeWithOptions(request *ModifyDBInstancePayTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstancePayTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstancePayTypeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstancePayType"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstancePayType(request *ModifyDBInstancePayTypeRequest) (_result *ModifyDBInstancePayTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstancePayTypeResponse{}
	_body, _err := client.ModifyDBInstancePayTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCharacterSetNameWithOptions(request *DescribeCharacterSetNameRequest, runtime *util.RuntimeOptions) (_result *DescribeCharacterSetNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeCharacterSetNameResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeCharacterSetName"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCharacterSetName(request *DescribeCharacterSetNameRequest) (_result *DescribeCharacterSetNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCharacterSetNameResponse{}
	_body, _err := client.DescribeCharacterSetNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteBackupWithOptions(request *DeleteBackupRequest, runtime *util.RuntimeOptions) (_result *DeleteBackupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteBackupResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteBackup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteBackup(request *DeleteBackupRequest) (_result *DeleteBackupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBackupResponse{}
	_body, _err := client.DeleteBackupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDiagnosticReportListWithOptions(request *DescribeDiagnosticReportListRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnosticReportListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDiagnosticReportListResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDiagnosticReportList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDiagnosticReportList(request *DescribeDiagnosticReportListRequest) (_result *DescribeDiagnosticReportListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnosticReportListResponse{}
	_body, _err := client.DescribeDiagnosticReportListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDiagnosticReportWithOptions(request *CreateDiagnosticReportRequest, runtime *util.RuntimeOptions) (_result *CreateDiagnosticReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDiagnosticReportResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDiagnosticReport"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDiagnosticReport(request *CreateDiagnosticReportRequest) (_result *CreateDiagnosticReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiagnosticReportResponse{}
	_body, _err := client.CreateDiagnosticReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloneDBInstanceWithOptions(request *CloneDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CloneDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CloneDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("CloneDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloneDBInstance(request *CloneDBInstanceRequest) (_result *CloneDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloneDBInstanceResponse{}
	_body, _err := client.CloneDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* DescribeTags 调用DescribeTags接口查询RDS实例的标签。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeTags
 * &RegionId=cn-hangzhou
 * &<公共请求参数>
 * ```
 * description:   * 调用本接口时限制条件如下：
 * * 如果传入指定实例ID，则查询该实例下所有标签，其他过滤条件失效；
 * * 若查询标签时仅传入标签键（TagKey），未传入标签值（TagValue），则返回所有符合标签键条件的结果。若同时传入标签键和标签值，则返回两个条件都符合的结果。

*/
func (client *Client) DescribeTagsWithOptions(request *DescribeTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeTagsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* DescribeTags 调用DescribeTags接口查询RDS实例的标签。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=DescribeTags
 * &RegionId=cn-hangzhou
 * &<公共请求参数>
 * ```
 * description:   * 调用本接口时限制条件如下：
 * * 如果传入指定实例ID，则查询该实例下所有标签，其他过滤条件失效；
 * * 若查询标签时仅传入标签键（TagKey），未传入标签值（TagValue），则返回所有符合标签键条件的结果。若同时传入标签键和标签值，则返回两个条件都符合的结果。

*/
func (client *Client) DescribeTags(request *DescribeTagsRequest) (_result *DescribeTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagsResponse{}
	_body, _err := client.DescribeTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceByTagsWithOptions(request *DescribeDBInstanceByTagsRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceByTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceByTagsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceByTags"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceByTags(request *DescribeDBInstanceByTagsRequest) (_result *DescribeDBInstanceByTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceByTagsResponse{}
	_body, _err := client.DescribeDBInstanceByTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeOperatorPermissionWithOptions(request *RevokeOperatorPermissionRequest, runtime *util.RuntimeOptions) (_result *RevokeOperatorPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RevokeOperatorPermissionResponse{}
	_body, _err := client.DoRequest(tea.String("RevokeOperatorPermission"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeOperatorPermission(request *RevokeOperatorPermissionRequest) (_result *RevokeOperatorPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeOperatorPermissionResponse{}
	_body, _err := client.RevokeOperatorPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceTDEWithOptions(request *ModifyDBInstanceTDERequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceTDEResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceTDEResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceTDE"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceTDE(request *ModifyDBInstanceTDERequest) (_result *ModifyDBInstanceTDEResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceTDEResponse{}
	_body, _err := client.ModifyDBInstanceTDEWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceSSLWithOptions(request *ModifyDBInstanceSSLRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceSSLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceSSLResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceSSL"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceSSL(request *ModifyDBInstanceSSLRequest) (_result *ModifyDBInstanceSSLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceSSLResponse{}
	_body, _err := client.ModifyDBInstanceSSLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GrantOperatorPermissionWithOptions(request *GrantOperatorPermissionRequest, runtime *util.RuntimeOptions) (_result *GrantOperatorPermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GrantOperatorPermissionResponse{}
	_body, _err := client.DoRequest(tea.String("GrantOperatorPermission"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GrantOperatorPermission(request *GrantOperatorPermissionRequest) (_result *GrantOperatorPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GrantOperatorPermissionResponse{}
	_body, _err := client.GrantOperatorPermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceTDEWithOptions(request *DescribeDBInstanceTDERequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceTDEResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceTDEResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceTDE"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceTDE(request *DescribeDBInstanceTDERequest) (_result *DescribeDBInstanceTDEResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceTDEResponse{}
	_body, _err := client.DescribeDBInstanceTDEWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceSSLWithOptions(request *DescribeDBInstanceSSLRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceSSLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceSSLResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceSSL"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceSSL(request *DescribeDBInstanceSSLRequest) (_result *DescribeDBInstanceSSLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceSSLResponse{}
	_body, _err := client.DescribeDBInstanceSSLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLLogFilesWithOptions(request *DescribeSQLLogFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLLogFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSQLLogFilesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSQLLogFiles"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLLogFiles(request *DescribeSQLLogFilesRequest) (_result *DescribeSQLLogFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogFilesResponse{}
	_body, _err := client.DescribeSQLLogFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceMonitorWithOptions(request *ModifyDBInstanceMonitorRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceMonitorResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceMonitor"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceMonitor(request *ModifyDBInstanceMonitorRequest) (_result *ModifyDBInstanceMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceMonitorResponse{}
	_body, _err := client.ModifyDBInstanceMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchDBInstanceHAWithOptions(request *SwitchDBInstanceHARequest, runtime *util.RuntimeOptions) (_result *SwitchDBInstanceHAResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SwitchDBInstanceHAResponse{}
	_body, _err := client.DoRequest(tea.String("SwitchDBInstanceHA"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchDBInstanceHA(request *SwitchDBInstanceHARequest) (_result *SwitchDBInstanceHAResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchDBInstanceHAResponse{}
	_body, _err := client.SwitchDBInstanceHAWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceMonitorWithOptions(request *DescribeDBInstanceMonitorRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceMonitorResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceMonitor"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceMonitor(request *DescribeDBInstanceMonitorRequest) (_result *DescribeDBInstanceMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceMonitorResponse{}
	_body, _err := client.DescribeDBInstanceMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLCollectorPolicyWithOptions(request *DescribeSQLCollectorPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLCollectorPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSQLCollectorPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSQLCollectorPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLCollectorPolicy(request *DescribeSQLCollectorPolicyRequest) (_result *DescribeSQLCollectorPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLCollectorPolicyResponse{}
	_body, _err := client.DescribeSQLCollectorPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySQLCollectorPolicyWithOptions(request *ModifySQLCollectorPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifySQLCollectorPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySQLCollectorPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySQLCollectorPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySQLCollectorPolicy(request *ModifySQLCollectorPolicyRequest) (_result *ModifySQLCollectorPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySQLCollectorPolicyResponse{}
	_body, _err := client.ModifySQLCollectorPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceHAConfigWithOptions(request *ModifyDBInstanceHAConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceHAConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceHAConfigResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceHAConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceHAConfig(request *ModifyDBInstanceHAConfigRequest) (_result *ModifyDBInstanceHAConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceHAConfigResponse{}
	_body, _err := client.ModifyDBInstanceHAConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceHAConfigWithOptions(request *DescribeDBInstanceHAConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceHAConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceHAConfigResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceHAConfig"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceHAConfig(request *DescribeDBInstanceHAConfigRequest) (_result *DescribeDBInstanceHAConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceHAConfigResponse{}
	_body, _err := client.DescribeDBInstanceHAConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLReportsWithOptions(request *DescribeSQLReportsRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSQLReportsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSQLReports"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLReports(request *DescribeSQLReportsRequest) (_result *DescribeSQLReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLReportsResponse{}
	_body, _err := client.DescribeSQLReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceIPArrayListWithOptions(request *DescribeDBInstanceIPArrayListRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceIPArrayListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceIPArrayListResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceIPArrayList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceIPArrayList(request *DescribeDBInstanceIPArrayListRequest) (_result *DescribeDBInstanceIPArrayListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceIPArrayListResponse{}
	_body, _err := client.DescribeDBInstanceIPArrayListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLLogReportListWithOptions(request *DescribeSQLLogReportListRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLLogReportListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSQLLogReportListResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSQLLogReportList"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLLogReportList(request *DescribeSQLLogReportListRequest) (_result *DescribeSQLLogReportListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogReportListResponse{}
	_body, _err := client.DescribeSQLLogReportListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetAccountForPGWithOptions(request *ResetAccountForPGRequest, runtime *util.RuntimeOptions) (_result *ResetAccountForPGResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResetAccountForPGResponse{}
	_body, _err := client.DoRequest(tea.String("ResetAccountForPG"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetAccountForPG(request *ResetAccountForPGRequest) (_result *ResetAccountForPGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAccountForPGResponse{}
	_body, _err := client.ResetAccountForPGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpgradeDBInstanceEngineVersionWithOptions(request *UpgradeDBInstanceEngineVersionRequest, runtime *util.RuntimeOptions) (_result *UpgradeDBInstanceEngineVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpgradeDBInstanceEngineVersionResponse{}
	_body, _err := client.DoRequest(tea.String("UpgradeDBInstanceEngineVersion"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpgradeDBInstanceEngineVersion(request *UpgradeDBInstanceEngineVersionRequest) (_result *UpgradeDBInstanceEngineVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeDBInstanceEngineVersionResponse{}
	_body, _err := client.UpgradeDBInstanceEngineVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RevokeAccountPrivilegeWithOptions(request *RevokeAccountPrivilegeRequest, runtime *util.RuntimeOptions) (_result *RevokeAccountPrivilegeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RevokeAccountPrivilegeResponse{}
	_body, _err := client.DoRequest(tea.String("RevokeAccountPrivilege"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RevokeAccountPrivilege(request *RevokeAccountPrivilegeRequest) (_result *RevokeAccountPrivilegeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeAccountPrivilegeResponse{}
	_body, _err := client.RevokeAccountPrivilegeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartDBInstanceWithOptions(request *RestartDBInstanceRequest, runtime *util.RuntimeOptions) (_result *RestartDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RestartDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("RestartDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartDBInstance(request *RestartDBInstanceRequest) (_result *RestartDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartDBInstanceResponse{}
	_body, _err := client.RestartDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetAccountPasswordWithOptions(request *ResetAccountPasswordRequest, runtime *util.RuntimeOptions) (_result *ResetAccountPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResetAccountPasswordResponse{}
	_body, _err := client.DoRequest(tea.String("ResetAccountPassword"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetAccountPassword(request *ResetAccountPasswordRequest) (_result *ResetAccountPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAccountPasswordResponse{}
	_body, _err := client.ResetAccountPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* RemoveTagsFromResource 调用RemoveTagsFromResource接口解绑标签。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=RemoveTagsFromResource
 * &DBInstanceId=rm-uf6wjk5xxxxxxx
 * &RegionId=cn-hangzhou
 * &Tag.1.key=test
 * &<公共请求参数>
 * ```
 * description:   * 限制条件如下：
 * * 单次最多支持解绑10个标签；
 * * 若一个标签所绑定的实例全都解绑，则该标签自动删除；
 * * 若解绑标签时仅传入标签键（TagKey），未传入标签值（TagValue），则解绑所有符合标签键条件的标签。
 * * 必须传入至少一组标签或者单独的一个标签键。

*/
func (client *Client) RemoveTagsFromResourceWithOptions(request *RemoveTagsFromResourceRequest, runtime *util.RuntimeOptions) (_result *RemoveTagsFromResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveTagsFromResourceResponse{}
	_body, _err := client.DoRequest(tea.String("RemoveTagsFromResource"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* RemoveTagsFromResource 调用RemoveTagsFromResource接口解绑标签。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=RemoveTagsFromResource
 * &DBInstanceId=rm-uf6wjk5xxxxxxx
 * &RegionId=cn-hangzhou
 * &Tag.1.key=test
 * &<公共请求参数>
 * ```
 * description:   * 限制条件如下：
 * * 单次最多支持解绑10个标签；
 * * 若一个标签所绑定的实例全都解绑，则该标签自动删除；
 * * 若解绑标签时仅传入标签键（TagKey），未传入标签值（TagValue），则解绑所有符合标签键条件的标签。
 * * 必须传入至少一组标签或者单独的一个标签键。

*/
func (client *Client) RemoveTagsFromResource(request *RemoveTagsFromResourceRequest) (_result *RemoveTagsFromResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveTagsFromResourceResponse{}
	_body, _err := client.RemoveTagsFromResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PurgeDBInstanceLogWithOptions(request *PurgeDBInstanceLogRequest, runtime *util.RuntimeOptions) (_result *PurgeDBInstanceLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &PurgeDBInstanceLogResponse{}
	_body, _err := client.DoRequest(tea.String("PurgeDBInstanceLog"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PurgeDBInstanceLog(request *PurgeDBInstanceLogRequest) (_result *PurgeDBInstanceLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PurgeDBInstanceLogResponse{}
	_body, _err := client.PurgeDBInstanceLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySecurityIpsWithOptions(request *ModifySecurityIpsRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityIpsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifySecurityIpsResponse{}
	_body, _err := client.DoRequest(tea.String("ModifySecurityIps"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySecurityIps(request *ModifySecurityIpsRequest) (_result *ModifySecurityIpsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityIpsResponse{}
	_body, _err := client.ModifySecurityIpsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyParameterWithOptions(request *ModifyParameterRequest, runtime *util.RuntimeOptions) (_result *ModifyParameterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyParameterResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyParameter"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyParameter(request *ModifyParameterRequest) (_result *ModifyParameterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyParameterResponse{}
	_body, _err := client.ModifyParameterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceSpecWithOptions(request *ModifyDBInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceSpecResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceSpec"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceSpec(request *ModifyDBInstanceSpecRequest) (_result *ModifyDBInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceSpecResponse{}
	_body, _err := client.ModifyDBInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceMaintainTimeWithOptions(request *ModifyDBInstanceMaintainTimeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceMaintainTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceMaintainTimeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceMaintainTime"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceMaintainTime(request *ModifyDBInstanceMaintainTimeRequest) (_result *ModifyDBInstanceMaintainTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceMaintainTimeResponse{}
	_body, _err := client.ModifyDBInstanceMaintainTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceDescriptionWithOptions(request *ModifyDBInstanceDescriptionRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceDescriptionResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceDescription"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceDescription(request *ModifyDBInstanceDescriptionRequest) (_result *ModifyDBInstanceDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceDescriptionResponse{}
	_body, _err := client.ModifyDBInstanceDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBDescriptionWithOptions(request *ModifyDBDescriptionRequest, runtime *util.RuntimeOptions) (_result *ModifyDBDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBDescriptionResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBDescription"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBDescription(request *ModifyDBDescriptionRequest) (_result *ModifyDBDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBDescriptionResponse{}
	_body, _err := client.ModifyDBDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyBackupPolicyWithOptions(request *ModifyBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyBackupPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyBackupPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyBackupPolicy(request *ModifyBackupPolicyRequest) (_result *ModifyBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBackupPolicyResponse{}
	_body, _err := client.ModifyBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyAccountDescriptionWithOptions(request *ModifyAccountDescriptionRequest, runtime *util.RuntimeOptions) (_result *ModifyAccountDescriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyAccountDescriptionResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyAccountDescription"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyAccountDescription(request *ModifyAccountDescriptionRequest) (_result *ModifyAccountDescriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAccountDescriptionResponse{}
	_body, _err := client.ModifyAccountDescriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MigrateToOtherZoneWithOptions(request *MigrateToOtherZoneRequest, runtime *util.RuntimeOptions) (_result *MigrateToOtherZoneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &MigrateToOtherZoneResponse{}
	_body, _err := client.DoRequest(tea.String("MigrateToOtherZone"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MigrateToOtherZone(request *MigrateToOtherZoneRequest) (_result *MigrateToOtherZoneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MigrateToOtherZoneResponse{}
	_body, _err := client.MigrateToOtherZoneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportDatabaseBetweenInstancesWithOptions(request *ImportDatabaseBetweenInstancesRequest, runtime *util.RuntimeOptions) (_result *ImportDatabaseBetweenInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportDatabaseBetweenInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("ImportDatabaseBetweenInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportDatabaseBetweenInstances(request *ImportDatabaseBetweenInstancesRequest) (_result *ImportDatabaseBetweenInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportDatabaseBetweenInstancesResponse{}
	_body, _err := client.ImportDatabaseBetweenInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GrantAccountPrivilegeWithOptions(request *GrantAccountPrivilegeRequest, runtime *util.RuntimeOptions) (_result *GrantAccountPrivilegeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GrantAccountPrivilegeResponse{}
	_body, _err := client.DoRequest(tea.String("GrantAccountPrivilege"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GrantAccountPrivilege(request *GrantAccountPrivilegeRequest) (_result *GrantAccountPrivilegeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GrantAccountPrivilegeResponse{}
	_body, _err := client.GrantAccountPrivilegeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTasksWithOptions(request *DescribeTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeTasksResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeTasks"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTasks(request *DescribeTasksRequest) (_result *DescribeTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTasksResponse{}
	_body, _err := client.DescribeTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLLogReportsWithOptions(request *DescribeSQLLogReportsRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLLogReportsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSQLLogReportsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSQLLogReports"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLLogReports(request *DescribeSQLLogReportsRequest) (_result *DescribeSQLLogReportsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogReportsResponse{}
	_body, _err := client.DescribeSQLLogReportsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSQLLogRecordsWithOptions(request *DescribeSQLLogRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeSQLLogRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSQLLogRecordsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSQLLogRecords"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSQLLogRecords(request *DescribeSQLLogRecordsRequest) (_result *DescribeSQLLogRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSQLLogRecordsResponse{}
	_body, _err := client.DescribeSQLLogRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSlowLogsWithOptions(request *DescribeSlowLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeSlowLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSlowLogsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSlowLogs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSlowLogs(request *DescribeSlowLogsRequest) (_result *DescribeSlowLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSlowLogsResponse{}
	_body, _err := client.DescribeSlowLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSlowLogRecordsWithOptions(request *DescribeSlowLogRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeSlowLogRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeSlowLogRecordsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeSlowLogRecords"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSlowLogRecords(request *DescribeSlowLogRecordsRequest) (_result *DescribeSlowLogRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSlowLogRecordsResponse{}
	_body, _err := client.DescribeSlowLogRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeResourceUsageWithOptions(request *DescribeResourceUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeResourceUsageResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeResourceUsage"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeResourceUsage(request *DescribeResourceUsageRequest) (_result *DescribeResourceUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceUsageResponse{}
	_body, _err := client.DescribeResourceUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeRegions"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeParameterTemplatesWithOptions(request *DescribeParameterTemplatesRequest, runtime *util.RuntimeOptions) (_result *DescribeParameterTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeParameterTemplatesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeParameterTemplates"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeParameterTemplates(request *DescribeParameterTemplatesRequest) (_result *DescribeParameterTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParameterTemplatesResponse{}
	_body, _err := client.DescribeParameterTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeParametersWithOptions(request *DescribeParametersRequest, runtime *util.RuntimeOptions) (_result *DescribeParametersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeParametersResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeParameters"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeParameters(request *DescribeParametersRequest) (_result *DescribeParametersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeParametersResponse{}
	_body, _err := client.DescribeParametersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeModifyParameterLogWithOptions(request *DescribeModifyParameterLogRequest, runtime *util.RuntimeOptions) (_result *DescribeModifyParameterLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeModifyParameterLogResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeModifyParameterLog"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeModifyParameterLog(request *DescribeModifyParameterLogRequest) (_result *DescribeModifyParameterLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeModifyParameterLogResponse{}
	_body, _err := client.DescribeModifyParameterLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeErrorLogsWithOptions(request *DescribeErrorLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeErrorLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeErrorLogsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeErrorLogs"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeErrorLogs(request *DescribeErrorLogsRequest) (_result *DescribeErrorLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeErrorLogsResponse{}
	_body, _err := client.DescribeErrorLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancePerformanceWithOptions(request *DescribeDBInstancePerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancePerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstancePerformanceResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstancePerformance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancePerformance(request *DescribeDBInstancePerformanceRequest) (_result *DescribeDBInstancePerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancePerformanceResponse{}
	_body, _err := client.DescribeDBInstancePerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDatabasesWithOptions(request *DescribeDatabasesRequest, runtime *util.RuntimeOptions) (_result *DescribeDatabasesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDatabasesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDatabases"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDatabases(request *DescribeDatabasesRequest) (_result *DescribeDatabasesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDatabasesResponse{}
	_body, _err := client.DescribeDatabasesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBinlogFilesWithOptions(request *DescribeBinlogFilesRequest, runtime *util.RuntimeOptions) (_result *DescribeBinlogFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBinlogFilesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBinlogFiles"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBinlogFiles(request *DescribeBinlogFilesRequest) (_result *DescribeBinlogFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBinlogFilesResponse{}
	_body, _err := client.DescribeBinlogFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupTasksWithOptions(request *DescribeBackupTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBackupTasksResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBackupTasks"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupTasks(request *DescribeBackupTasksRequest) (_result *DescribeBackupTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupTasksResponse{}
	_body, _err := client.DescribeBackupTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupsWithOptions(request *DescribeBackupsRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBackupsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBackups"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackups(request *DescribeBackupsRequest) (_result *DescribeBackupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupsResponse{}
	_body, _err := client.DescribeBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBackupPolicyWithOptions(request *DescribeBackupPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeBackupPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeBackupPolicyResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeBackupPolicy"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBackupPolicy(request *DescribeBackupPolicyRequest) (_result *DescribeBackupPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBackupPolicyResponse{}
	_body, _err := client.DescribeBackupPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAccountsWithOptions(request *DescribeAccountsRequest, runtime *util.RuntimeOptions) (_result *DescribeAccountsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAccountsResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeAccounts"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAccounts(request *DescribeAccountsRequest) (_result *DescribeAccountsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAccountsResponse{}
	_body, _err := client.DescribeAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescibeImportsFromDatabaseWithOptions(request *DescibeImportsFromDatabaseRequest, runtime *util.RuntimeOptions) (_result *DescibeImportsFromDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescibeImportsFromDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("DescibeImportsFromDatabase"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescibeImportsFromDatabase(request *DescibeImportsFromDatabaseRequest) (_result *DescibeImportsFromDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescibeImportsFromDatabaseResponse{}
	_body, _err := client.DescibeImportsFromDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDBInstanceWithOptions(request *DeleteDBInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDBInstance(request *DeleteDBInstanceRequest) (_result *DeleteDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDBInstanceResponse{}
	_body, _err := client.DeleteDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDatabaseWithOptions(request *DeleteDatabaseRequest, runtime *util.RuntimeOptions) (_result *DeleteDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteDatabase"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDatabase(request *DeleteDatabaseRequest) (_result *DeleteDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDatabaseResponse{}
	_body, _err := client.DeleteDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteAccountWithOptions(request *DeleteAccountRequest, runtime *util.RuntimeOptions) (_result *DeleteAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteAccountResponse{}
	_body, _err := client.DoRequest(tea.String("DeleteAccount"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteAccount(request *DeleteAccountRequest) (_result *DeleteAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAccountResponse{}
	_body, _err := client.DeleteAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTempDBInstanceWithOptions(request *CreateTempDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateTempDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateTempDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateTempDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTempDBInstance(request *CreateTempDBInstanceRequest) (_result *CreateTempDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTempDBInstanceResponse{}
	_body, _err := client.CreateTempDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDatabaseWithOptions(request *CreateDatabaseRequest, runtime *util.RuntimeOptions) (_result *CreateDatabaseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDatabaseResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDatabase"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDatabase(request *CreateDatabaseRequest) (_result *CreateDatabaseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDatabaseResponse{}
	_body, _err := client.CreateDatabaseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBackupWithOptions(request *CreateBackupRequest, runtime *util.RuntimeOptions) (_result *CreateBackupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateBackupResponse{}
	_body, _err := client.DoRequest(tea.String("CreateBackup"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBackup(request *CreateBackupRequest) (_result *CreateBackupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackupResponse{}
	_body, _err := client.CreateBackupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAccountWithOptions(request *CreateAccountRequest, runtime *util.RuntimeOptions) (_result *CreateAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateAccountResponse{}
	_body, _err := client.DoRequest(tea.String("CreateAccount"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAccount(request *CreateAccountRequest) (_result *CreateAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAccountResponse{}
	_body, _err := client.CreateAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckDBNameAvailableWithOptions(request *CheckDBNameAvailableRequest, runtime *util.RuntimeOptions) (_result *CheckDBNameAvailableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckDBNameAvailableResponse{}
	_body, _err := client.DoRequest(tea.String("CheckDBNameAvailable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckDBNameAvailable(request *CheckDBNameAvailableRequest) (_result *CheckDBNameAvailableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckDBNameAvailableResponse{}
	_body, _err := client.CheckDBNameAvailableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckAccountNameAvailableWithOptions(request *CheckAccountNameAvailableRequest, runtime *util.RuntimeOptions) (_result *CheckAccountNameAvailableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CheckAccountNameAvailableResponse{}
	_body, _err := client.DoRequest(tea.String("CheckAccountNameAvailable"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckAccountNameAvailable(request *CheckAccountNameAvailableRequest) (_result *CheckAccountNameAvailableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckAccountNameAvailableResponse{}
	_body, _err := client.CheckAccountNameAvailableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelImportWithOptions(request *CancelImportRequest, runtime *util.RuntimeOptions) (_result *CancelImportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CancelImportResponse{}
	_body, _err := client.DoRequest(tea.String("CancelImport"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelImport(request *CancelImportRequest) (_result *CancelImportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelImportResponse{}
	_body, _err := client.CancelImportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTagsToResourceWithOptions(request *AddTagsToResourceRequest, runtime *util.RuntimeOptions) (_result *AddTagsToResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddTagsToResourceResponse{}
	_body, _err := client.DoRequest(tea.String("AddTagsToResource"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTagsToResource(request *AddTagsToResourceRequest) (_result *AddTagsToResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTagsToResourceResponse{}
	_body, _err := client.AddTagsToResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchDBInstanceNetTypeWithOptions(request *SwitchDBInstanceNetTypeRequest, runtime *util.RuntimeOptions) (_result *SwitchDBInstanceNetTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SwitchDBInstanceNetTypeResponse{}
	_body, _err := client.DoRequest(tea.String("SwitchDBInstanceNetType"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchDBInstanceNetType(request *SwitchDBInstanceNetTypeRequest) (_result *SwitchDBInstanceNetTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchDBInstanceNetTypeResponse{}
	_body, _err := client.SwitchDBInstanceNetTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseInstancePublicConnectionWithOptions(request *ReleaseInstancePublicConnectionRequest, runtime *util.RuntimeOptions) (_result *ReleaseInstancePublicConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ReleaseInstancePublicConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("ReleaseInstancePublicConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseInstancePublicConnection(request *ReleaseInstancePublicConnectionRequest) (_result *ReleaseInstancePublicConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseInstancePublicConnectionResponse{}
	_body, _err := client.ReleaseInstancePublicConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceNetworkTypeWithOptions(request *ModifyDBInstanceNetworkTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceNetworkTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceNetworkTypeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceNetworkType"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceNetworkType(request *ModifyDBInstanceNetworkTypeRequest) (_result *ModifyDBInstanceNetworkTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceNetworkTypeResponse{}
	_body, _err := client.ModifyDBInstanceNetworkTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceConnectionStringWithOptions(request *ModifyDBInstanceConnectionStringRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceConnectionStringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceConnectionStringResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceConnectionString"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceConnectionString(request *ModifyDBInstanceConnectionStringRequest) (_result *ModifyDBInstanceConnectionStringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceConnectionStringResponse{}
	_body, _err := client.ModifyDBInstanceConnectionStringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDBInstanceConnectionModeWithOptions(request *ModifyDBInstanceConnectionModeRequest, runtime *util.RuntimeOptions) (_result *ModifyDBInstanceConnectionModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyDBInstanceConnectionModeResponse{}
	_body, _err := client.DoRequest(tea.String("ModifyDBInstanceConnectionMode"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDBInstanceConnectionMode(request *ModifyDBInstanceConnectionModeRequest) (_result *ModifyDBInstanceConnectionModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDBInstanceConnectionModeResponse{}
	_body, _err := client.ModifyDBInstanceConnectionModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceNetInfoWithOptions(request *DescribeDBInstanceNetInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceNetInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceNetInfoResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceNetInfo"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceNetInfo(request *DescribeDBInstanceNetInfoRequest) (_result *DescribeDBInstanceNetInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceNetInfoResponse{}
	_body, _err := client.DescribeDBInstanceNetInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateReadOnlyDBInstanceWithOptions(request *CreateReadOnlyDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateReadOnlyDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateReadOnlyDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateReadOnlyDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateReadOnlyDBInstance(request *CreateReadOnlyDBInstanceRequest) (_result *CreateReadOnlyDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateReadOnlyDBInstanceResponse{}
	_body, _err := client.CreateReadOnlyDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
* CreateDBInstance 调用CreateDBInstance接口创建一个RDS实例。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=CreateDBInstance
 * &RegionId=cn-hangzhou
 * &Engine=MySQL
 * &EngineVersion=5.6
 * &DBInstanceClass=rds.mysql.s1.small
 * &DBInstanceStorage=20
 * &DBInstanceNetType=Internet
 * &PayType=Postpaid
 * &SecurityIPList=10.23.12.27/24
 * &<公共请求参数>
 * ```
 * description:   * **请确保在使用该接口前，已充分了解RDS产品的收费方式和<xref href="https://www.alibabacloud.com/product/apsaradb-for-rds#pricing" format="html" scope="external" props="intl">价格</xref><xref href="https://www.aliyun.com/price/product#/rds/detail" format="html" scope="external" props="china">价格</xref>。**
 * 关于RDS实例的规格，请参见[实例规格表](~~26312~~)。

*/
func (client *Client) CreateDBInstanceWithOptions(request *CreateDBInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateDBInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateDBInstanceResponse{}
	_body, _err := client.DoRequest(tea.String("CreateDBInstance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
* CreateDBInstance 调用CreateDBInstance接口创建一个RDS实例。
 * request demo:   * ```
 * http(s)://rds.aliyuncs.com/?Action=CreateDBInstance
 * &RegionId=cn-hangzhou
 * &Engine=MySQL
 * &EngineVersion=5.6
 * &DBInstanceClass=rds.mysql.s1.small
 * &DBInstanceStorage=20
 * &DBInstanceNetType=Internet
 * &PayType=Postpaid
 * &SecurityIPList=10.23.12.27/24
 * &<公共请求参数>
 * ```
 * description:   * **请确保在使用该接口前，已充分了解RDS产品的收费方式和<xref href="https://www.alibabacloud.com/product/apsaradb-for-rds#pricing" format="html" scope="external" props="intl">价格</xref><xref href="https://www.aliyun.com/price/product#/rds/detail" format="html" scope="external" props="china">价格</xref>。**
 * 关于RDS实例的规格，请参见[实例规格表](~~26312~~)。

*/
func (client *Client) CreateDBInstance(request *CreateDBInstanceRequest) (_result *CreateDBInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDBInstanceResponse{}
	_body, _err := client.CreateDBInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AllocateInstancePublicConnectionWithOptions(request *AllocateInstancePublicConnectionRequest, runtime *util.RuntimeOptions) (_result *AllocateInstancePublicConnectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AllocateInstancePublicConnectionResponse{}
	_body, _err := client.DoRequest(tea.String("AllocateInstancePublicConnection"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AllocateInstancePublicConnection(request *AllocateInstancePublicConnectionRequest) (_result *AllocateInstancePublicConnectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AllocateInstancePublicConnectionResponse{}
	_body, _err := client.AllocateInstancePublicConnectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesByPerformanceWithOptions(request *DescribeDBInstancesByPerformanceRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesByPerformanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstancesByPerformanceResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstancesByPerformance"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancesByPerformance(request *DescribeDBInstancesByPerformanceRequest) (_result *DescribeDBInstancesByPerformanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesByPerformanceResponse{}
	_body, _err := client.DescribeDBInstancesByPerformanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesByExpireTimeWithOptions(request *DescribeDBInstancesByExpireTimeRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesByExpireTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstancesByExpireTimeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstancesByExpireTime"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstancesByExpireTime(request *DescribeDBInstancesByExpireTimeRequest) (_result *DescribeDBInstancesByExpireTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesByExpireTimeResponse{}
	_body, _err := client.DescribeDBInstancesByExpireTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstancesWithOptions(request *DescribeDBInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstancesResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstances"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstances(request *DescribeDBInstancesRequest) (_result *DescribeDBInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstancesResponse{}
	_body, _err := client.DescribeDBInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDBInstanceAttributeWithOptions(request *DescribeDBInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeDBInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeDBInstanceAttributeResponse{}
	_body, _err := client.DoRequest(tea.String("DescribeDBInstanceAttribute"), tea.String("HTTPS"), tea.String("POST"), tea.String("2014-08-15"), tea.String("AK"), nil, tea.ToMap(request), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDBInstanceAttribute(request *DescribeDBInstanceAttributeRequest) (_result *DescribeDBInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDBInstanceAttributeResponse{}
	_body, _err := client.DescribeDBInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
