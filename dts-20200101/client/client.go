// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	openplatform "github.com/alibabacloud-go/openplatform-20191219/v2/client"
	fileform "github.com/alibabacloud-go/tea-fileform/service"
	oss "github.com/alibabacloud-go/tea-oss-sdk/client"
	ossutil "github.com/alibabacloud-go/tea-oss-utils/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
	"io"
)

type ConfigureDtsJobRequest struct {
	// The type of the task. Valid values:
	//
	// *   **MIGRATION**: data migration task
	// *   **SYNC**: data synchronization task
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The HTTP status code.
	DataCheckConfigure *string `json:"DataCheckConfigure,omitempty" xml:"DataCheckConfigure,omitempty"`
	// The objects that you want to migrate or synchronize. The value is a JSON string. For more information, see [Objects of DTS tasks](~~209545~~).
	DataInitialization *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to add more configurations of the source or destination instance to the DTS task. For example, you can specify the data storage format of the destination Kafka database and the ID of the CEN instance. For more information, see [Reserve](~~273111~~).
	DataSynchronization *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// The start offset of incremental data migration or synchronization. The value is a UNIX timestamp. Unit: seconds.
	DbList *string `json:"DbList,omitempty" xml:"DbList,omitempty"`
	// The data verification task for a data migration or synchronization instance. The value is a JSON string that indicates parameter limits or alert configurations. For more information, see [DataCheckConfigure](~~459023~~).
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// Specifies whether to monitor the task status. Valid values:
	//
	// *   **true**: monitors the task status.
	// *   **false**: does not monitor the task status.
	DelayNotice *bool `json:"DelayNotice,omitempty" xml:"DelayNotice,omitempty"`
	// Specifies whether to monitor the task latency. Valid values:
	//
	// *   **true**: monitors the task latency.
	// *   **false**: does not monitor the task latency.
	DelayPhone *string `json:"DelayPhone,omitempty" xml:"DelayPhone,omitempty"`
	// The mobile numbers that receive status-related alerts. Separate multiple mobile numbers with commas (,).
	//
	// >
	// *   This parameter is available only for China site (aliyun.com) users. Only mobile numbers in the Chinese mainland are supported. Up to 10 mobile numbers can be specified.
	// *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the CloudMonitor console](~~175876~~).
	DelayRuleTime *int64 `json:"DelayRuleTime,omitempty" xml:"DelayRuleTime,omitempty"`
	// The password of the destination database account.
	//
	// >  If the destination database is a MaxCompute project, you must specify the AccessKey secret of your Alibaba Cloud account. For information about how to obtain your AccessKey pair, see [Create an AccessKey pair](~~116401~~).
	DestinationEndpointDataBaseName *string `json:"DestinationEndpointDataBaseName,omitempty" xml:"DestinationEndpointDataBaseName,omitempty"`
	// The IP address of the destination instance.
	//
	// >  If the **DestinationEndpointInstanceType** parameter is set to **OTHER**, **EXPRESS**, **DG**, or **CEN**, this parameter is available and required.
	DestinationEndpointEngineName *string `json:"DestinationEndpointEngineName,omitempty" xml:"DestinationEndpointEngineName,omitempty"`
	// The name of the database to which the objects migrated to the destination instance belong.
	//
	// >
	// *   If the destination instance is a PolarDB for Oracle cluster, an AnalyticDB for PostgreSQL instance, a PostgreSQL database, a MaxCompute project, or a MongoDB database, this parameter is available and required.
	// *   If the destination instance is a MaxCompute project, you must specify the ID of the MaxCompute project.
	DestinationEndpointIP *string `json:"DestinationEndpointIP,omitempty" xml:"DestinationEndpointIP,omitempty"`
	// The ID of the region in which the destination instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  If the destination instance is an Alibaba Cloud database instance, this parameter is required.
	DestinationEndpointInstanceID *string `json:"DestinationEndpointInstanceID,omitempty" xml:"DestinationEndpointInstanceID,omitempty"`
	// The database engine of the destination instance. Valid values:
	//
	// *   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
	// *   **MARIADB**: ApsaraDB RDS for MariaDB instance
	// *   **PolarDB**: PolarDB for MySQL cluster
	// *   **POLARDB_O**: PolarDB for Oracle cluster
	// *   **POLARDBX10**: PolarDB-X 1.0 instance
	// *   **POLARDBX20**: PolarDB-X 2.0 instance
	// *   **ORACLE**: self-managed Oracle database
	// *   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL instance or self-managed PostgreSQL database
	// *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
	// *   **ADS**: AnalyticDB for MySQL V2.0 cluster
	// *   **ADB30**: AnalyticDB for MySQL V3.0 cluster
	// *   **MONGODB**: ApsaraDB for MongoDB instance or self-managed MongoDB database
	// *   **GREENPLUM**: AnalyticDB for PostgreSQL instance
	// *   **KAFKA**: Message Queue for Apache Kafka instance or self-managed Kafka cluster
	// *   **DATAHUB**: DataHub project
	// *   **DB2**: self-managed Db2 for LUW database
	// *   **AS400**: self-managed Db2 for i database
	// *   **ODPS**: MaxCompute project
	// *   **Tablestore**: Tablestore instance
	// *   **ELK**: Elasticsearch cluster
	// *   **REDIS**: ApsaraDB for Redis instance or self-managed Redis database
	//
	// >
	// *   Default value: **MYSQL**.
	// *   If the DestinationEndpointEngineName parameter is set to **KAFKA**, **MONGODB**, or **PolarDB**, you must also specify the database information in the Reserve parameter. For more information, see [Reserve](~~273111~~).
	DestinationEndpointInstanceType *string `json:"DestinationEndpointInstanceType,omitempty" xml:"DestinationEndpointInstanceType,omitempty"`
	// The ID of the data migration or synchronization task.
	//
	// >  You must specify at least one of the DtsJobId and **DtsInstanceId** parameters. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DestinationEndpointOracleSID *string `json:"DestinationEndpointOracleSID,omitempty" xml:"DestinationEndpointOracleSID,omitempty"`
	DestinationEndpointOwnerID   *string `json:"DestinationEndpointOwnerID,omitempty" xml:"DestinationEndpointOwnerID,omitempty"`
	// Specifies whether to perform full data migration or synchronization. Default value: true. Valid values:
	//
	// *   **true**: performs full data migration or synchronization.
	// *   **false**: does not perform full data migration or synchronization.
	DestinationEndpointPassword *string `json:"DestinationEndpointPassword,omitempty" xml:"DestinationEndpointPassword,omitempty"`
	// The database account of the destination database.
	//
	// >
	// *   In most cases, this parameter is required.
	// *   The permissions that are required for the database account vary with the migration or synchronization scenario. For more information, see [Prepare the database accounts for data migration](~~175878~~) or [Prepare the database accounts for data synchronization](~~213152~~).
	// *   If the destination database is a MaxCompute project, you must specify the AccessKey ID of your Alibaba Cloud account. For information about how to obtain your AccessKey pair, see [Create an AccessKey pair](~~116401~~).
	DestinationEndpointPort *string `json:"DestinationEndpointPort,omitempty" xml:"DestinationEndpointPort,omitempty"`
	// The database service port of the destination instance.
	//
	// >  If the destination instance is a self-managed database, this parameter is available and required.
	DestinationEndpointRegion *string `json:"DestinationEndpointRegion,omitempty" xml:"DestinationEndpointRegion,omitempty"`
	DestinationEndpointRole   *string `json:"DestinationEndpointRole,omitempty" xml:"DestinationEndpointRole,omitempty"`
	// Specifies whether to perform schema migration or synchronization. Default value: true. Valid values:
	//
	// *   **true**: performs schema migration or synchronization.
	// *   **false**: does not perform schema migration or synchronization.
	DestinationEndpointUserName *string `json:"DestinationEndpointUserName,omitempty" xml:"DestinationEndpointUserName,omitempty"`
	// The ID of the request.
	DisasterRecoveryJob *bool   `json:"DisasterRecoveryJob,omitempty" xml:"DisasterRecoveryJob,omitempty"`
	DtsBisLabel         *string `json:"DtsBisLabel,omitempty" xml:"DtsBisLabel,omitempty"`
	// The threshold for triggering latency-related alerts. Unit: seconds. The value must be an integer. You can set the threshold based on your business needs. To prevent jitters caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds.
	//
	// >  If the **DelayNotice** parameter is set to **true**, this parameter is required.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The mobile numbers that receive latency-related alerts. Separate multiple mobile numbers with commas (,).
	//
	// >
	// *   This parameter is available only for China site (aliyun.com) users. Only mobile numbers in the Chinese mainland are supported. Up to 10 mobile numbers can be specified.
	// *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the CloudMonitor console](~~175876~~).
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the source instance.
	//
	// If the source instance is an Alibaba Cloud database instance, you must specify the ID of the database instance. For example, if the source instance is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.
	//
	// If the source instance is a self-managed database, the value of this parameter varies with the value of the **SourceEndpointInstanceType** parameter.****
	//
	// *   If the SourceEndpointInstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.
	// *   If the SourceEndpointInstanceType parameter is set to **DG**, you must specify the ID of the database gateway.
	// *   If the SourceEndpointInstanceType parameter is set to **EXPRESS** or **CEN**, you must specify the ID of the VPC that is connected to the source instance.
	//
	// >  If the SourceEndpointInstanceType parameter is set to **CEN**, you must also specify the ID of the CEN instance in the Reserve parameter. For more information, see [Reserve](~~273111~~).
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	ErrorNotice *bool `json:"ErrorNotice,omitempty" xml:"ErrorNotice,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >
	// *   Default value: **Forward**.
	// *   The value **Reverse** takes effect only if the topology of the data synchronization task is two-way synchronization.
	ErrorPhone *string `json:"ErrorPhone,omitempty" xml:"ErrorPhone,omitempty"`
	// Specifies whether the instance is a disaster recovery instance.
	//
	// *   **true**: The instance is a disaster recovery instance.
	// *   **false**: The instance is not a disaster recovery instance.
	FileOssUrl *string `json:"FileOssUrl,omitempty" xml:"FileOssUrl,omitempty"`
	// The ID of the data migration or synchronization instance.
	//
	// >  You must specify at least one of the **DtsJobId** and DtsInstanceId parameters. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	OwnerId *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The URL of the Object Storage Service (OSS) bucket that stores the files related to the DTS task.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The SID of the Oracle database.
	//
	// >  If the **DestinationEndpointEngineName** parameter is set to **ORACLE** and the **Oracle** database is deployed in a non-RAC architecture, this parameter is available and required.
	Reserve *string `json:"Reserve,omitempty" xml:"Reserve,omitempty"`
	// The password of the source database account.
	SourceEndpointDatabaseName *string `json:"SourceEndpointDatabaseName,omitempty" xml:"SourceEndpointDatabaseName,omitempty"`
	// The IP address of the source instance.
	//
	// >  If the **SourceEndpointInstanceType** parameter is set to **OTHER**, **EXPRESS**, **DG**, or **CEN**, this parameter is available and required.
	SourceEndpointEngineName *string `json:"SourceEndpointEngineName,omitempty" xml:"SourceEndpointEngineName,omitempty"`
	// The system ID (SID) of the Oracle database.
	//
	// >  If the **SourceEndpointEngineName** parameter is set to **ORACLE** and the **Oracle** database is deployed in an architecture that is not a Real Application Cluster (RAC), this parameter is available and required.
	SourceEndpointIP *string `json:"SourceEndpointIP,omitempty" xml:"SourceEndpointIP,omitempty"`
	// The ID of the region in which the source instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  If the source instance is an Alibaba Cloud database instance, this parameter is required.
	SourceEndpointInstanceID *string `json:"SourceEndpointInstanceID,omitempty" xml:"SourceEndpointInstanceID,omitempty"`
	// The database engine of the source instance. Valid values:
	//
	// *   **MYSQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
	// *   **MARIADB**: ApsaraDB RDS for MariaDB instance
	// *   **PolarDB**: PolarDB for MySQL cluster
	// *   **POLARDB_O**: PolarDB for Oracle cluster
	// *   **POLARDBX10**: PolarDB-X 1.0 instance
	// *   **POLARDBX20**: PolarDB-X 2.0 instance
	// *   **ORACLE**: self-managed Oracle database
	// *   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL instance or self-managed PostgreSQL database
	// *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
	// *   **MONGODB**: ApsaraDB for MongoDB instance or self-managed MongoDB database
	// *   **DB2**: self-managed Db2 for LUW database
	// *   **AS400**: self-managed Db2 for i database
	// *   **DMSPOLARDB**: DMS logical database
	// *   **HBASE**: self-managed HBase database
	// *   **TERADATA**: Teradata database
	// *   **TiDB**: TiDB database
	// *   **REDIS**: ApsaraDB for Redis instance or self-managed Redis database
	//
	// >
	// *   Default value: **MYSQL**.
	// *   If the SourceEndpointEngineName parameter is set to **MONGODB**, you must also specify the architecture type of the MongoDB database in the Reserve parameter. For more information, see [Reserve](~~273111~~).
	SourceEndpointInstanceType *string `json:"SourceEndpointInstanceType,omitempty" xml:"SourceEndpointInstanceType,omitempty"`
	// The database account of the source database.
	//
	// >
	// *   In most cases, this parameter is required.
	// *   The permissions that are required for the database account vary with the migration or synchronization scenario. For more information, see [Prepare the database accounts for data migration](~~175878~~) or [Prepare the database accounts for data synchronization](~~213152~~).
	SourceEndpointOracleSID *string `json:"SourceEndpointOracleSID,omitempty" xml:"SourceEndpointOracleSID,omitempty"`
	// The type of the destination instance. Valid values:
	//
	// **Alibaba Cloud database instances**
	//
	// *   **RDS**: ApsaraDB RDS for MySQL instance, ApsaraDB RDS for SQL Server instance, ApsaraDB RDS for PostgreSQL instance, or ApsaraDB RDS for MariaDB instance
	// *   **PolarDB**: PolarDB for MySQL cluster
	// *   **POLARDBX10**: PolarDB-X 1.0 instance
	// *   **POLARDBX20**: PolarDB-X 2.0 instance
	// *   **REDIS**: ApsaraDB for Redis instance
	// *   **ADS**: AnalyticDB for MySQL V2.0 cluster or AnalyticDB for MySQL V3.0 cluster
	// *   **MONGODB**: ApsaraDB for MongoDB instance
	// *   **GREENPLUM**: AnalyticDB for PostgreSQL instance
	// *   **DATAHUB**: DataHub project
	// *   **ELK**: Elasticsearch cluster
	// *   **Tablestore**: Tablestore instance
	// *   **ODPS**: MaxCompute project
	//
	// **Self-managed databases**
	//
	// *   **OTHER**: self-managed database with a public IP address
	// *   **ECS**: self-managed database hosted on an ECS instance
	// *   **EXPRESS**: self-managed database connected over Express Connect
	// *   **CEN**: self-managed database connected over CEN
	// *   **DG**: self-managed database connected over Database Gateway
	//
	// >
	// *   If the destination instance is a PolarDB for Oracle cluster, you must set this parameter to **OTHER** or **EXPRESS** because you can use a PolarDB for Oracle cluster only as a self-managed database connected over the Internet or Express Connect.
	// *   If the destination instance is a Message Queue for Apache Kafka instance, you must set this parameter to **ECS** or **EXPRESS** because you can use a Message Queue for Apache Kafka instance only as a self-managed database connected over ECS or Express Connect.
	// *   For more information, see [Supported databases](~~176064~~).
	// *   If the destination instance is a self-managed database, you must deploy the network environment for the database. For more information, see [Preparation overview](~~146958~~).
	SourceEndpointOwnerID *string `json:"SourceEndpointOwnerID,omitempty" xml:"SourceEndpointOwnerID,omitempty"`
	// The name of the RAM role configured for the Alibaba Cloud account that owns the source instance.
	//
	// >  This parameter is required when you migrate or synchronize data across different Alibaba Cloud accounts. For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).
	SourceEndpointPassword *string `json:"SourceEndpointPassword,omitempty" xml:"SourceEndpointPassword,omitempty"`
	// The name of the database to which the objects to be migrated in the source instance belong.
	//
	// >  If the source instance is a PolarDB for Oracle cluster, a PostgreSQL database, or a MongoDB database, this parameter is available and required.
	SourceEndpointPort *string `json:"SourceEndpointPort,omitempty" xml:"SourceEndpointPort,omitempty"`
	// The database service port of the source instance.
	//
	// >  If the source instance is a self-managed database, this parameter is available and required.
	SourceEndpointRegion *string `json:"SourceEndpointRegion,omitempty" xml:"SourceEndpointRegion,omitempty"`
	// The ID of the destination instance.
	//
	// If the destination instance is an Alibaba Cloud database instance, you must specify the ID of the database instance. For example, if the destination instance is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.
	//
	// If the destination instance is a self-managed database, the value of this parameter varies with the value of the **DestinationEndpointInstanceType** parameter.****
	//
	// *   If the DestinationEndpointInstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.
	// *   If the DestinationEndpointInstanceType parameter is set to **DG**, you must specify the ID of the database gateway.
	// *   If the DestinationEndpointInstanceType parameter is set to **EXPRESS** or **CEN**, you must specify the ID of the VPC that is connected to the source instance.
	//
	// >  If the DestinationEndpointInstanceType parameter is set to **CEN**, you must also specify the ID of the CEN instance in the Reserve parameter. For more information, see [Reserve](~~273111~~).
	SourceEndpointRole *string `json:"SourceEndpointRole,omitempty" xml:"SourceEndpointRole,omitempty"`
	// The ID of the Alibaba Cloud account to which the source instance belongs.
	//
	// >  You can specify this parameter to migrate or synchronize data across different Alibaba Cloud accounts. In this case, you must specify the **SourceEndpointRole** parameter.
	SourceEndpointUserName *string `json:"SourceEndpointUserName,omitempty" xml:"SourceEndpointUserName,omitempty"`
	// 数据投递链路交换机实例id
	SourceEndpointVSwitchID *string `json:"SourceEndpointVSwitchID,omitempty" xml:"SourceEndpointVSwitchID,omitempty"`
	// Specifies whether to perform incremental data migration or synchronization. Default value: false. Valid values:
	//
	// *   **false**: does not perform incremental data migration or synchronization.
	// *   **true**: performs incremental data migration or synchronization.
	StructureInitialization *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
	// The ID of the DTS dedicated cluster on which the task runs.
	//
	// >  If this parameter is specified, the task is scheduled to the specified DTS dedicated cluster.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s ConfigureDtsJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureDtsJobRequest) GoString() string {
	return s.String()
}

func (s *ConfigureDtsJobRequest) SetCheckpoint(v string) *ConfigureDtsJobRequest {
	s.Checkpoint = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDataCheckConfigure(v string) *ConfigureDtsJobRequest {
	s.DataCheckConfigure = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDataInitialization(v bool) *ConfigureDtsJobRequest {
	s.DataInitialization = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDataSynchronization(v bool) *ConfigureDtsJobRequest {
	s.DataSynchronization = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDbList(v string) *ConfigureDtsJobRequest {
	s.DbList = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDedicatedClusterId(v string) *ConfigureDtsJobRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDelayNotice(v bool) *ConfigureDtsJobRequest {
	s.DelayNotice = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDelayPhone(v string) *ConfigureDtsJobRequest {
	s.DelayPhone = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDelayRuleTime(v int64) *ConfigureDtsJobRequest {
	s.DelayRuleTime = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointDataBaseName(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointDataBaseName = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointEngineName(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointEngineName = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointIP(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointIP = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointInstanceID(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointInstanceID = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointInstanceType(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointInstanceType = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointOracleSID(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointOracleSID = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointOwnerID(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointOwnerID = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointPassword(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointPassword = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointPort(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointPort = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointRegion(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointRegion = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointRole(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointRole = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDestinationEndpointUserName(v string) *ConfigureDtsJobRequest {
	s.DestinationEndpointUserName = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDisasterRecoveryJob(v bool) *ConfigureDtsJobRequest {
	s.DisasterRecoveryJob = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDtsBisLabel(v string) *ConfigureDtsJobRequest {
	s.DtsBisLabel = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDtsInstanceId(v string) *ConfigureDtsJobRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDtsJobId(v string) *ConfigureDtsJobRequest {
	s.DtsJobId = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetDtsJobName(v string) *ConfigureDtsJobRequest {
	s.DtsJobName = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetErrorNotice(v bool) *ConfigureDtsJobRequest {
	s.ErrorNotice = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetErrorPhone(v string) *ConfigureDtsJobRequest {
	s.ErrorPhone = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetFileOssUrl(v string) *ConfigureDtsJobRequest {
	s.FileOssUrl = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetJobType(v string) *ConfigureDtsJobRequest {
	s.JobType = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetOwnerId(v string) *ConfigureDtsJobRequest {
	s.OwnerId = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetRegionId(v string) *ConfigureDtsJobRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetReserve(v string) *ConfigureDtsJobRequest {
	s.Reserve = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointDatabaseName(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointDatabaseName = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointEngineName(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointEngineName = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointIP(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointIP = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointInstanceID(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointInstanceID = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointInstanceType(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointInstanceType = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointOracleSID(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointOracleSID = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointOwnerID(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointOwnerID = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointPassword(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointPassword = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointPort(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointPort = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointRegion(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointRegion = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointRole(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointRole = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointUserName(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointUserName = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSourceEndpointVSwitchID(v string) *ConfigureDtsJobRequest {
	s.SourceEndpointVSwitchID = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetStructureInitialization(v bool) *ConfigureDtsJobRequest {
	s.StructureInitialization = &v
	return s
}

func (s *ConfigureDtsJobRequest) SetSynchronizationDirection(v string) *ConfigureDtsJobRequest {
	s.SynchronizationDirection = &v
	return s
}

type ConfigureDtsJobAdvanceRequest struct {
	// The type of the task. Valid values:
	//
	// *   **MIGRATION**: data migration task
	// *   **SYNC**: data synchronization task
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The HTTP status code.
	DataCheckConfigure *string `json:"DataCheckConfigure,omitempty" xml:"DataCheckConfigure,omitempty"`
	// The objects that you want to migrate or synchronize. The value is a JSON string. For more information, see [Objects of DTS tasks](~~209545~~).
	DataInitialization *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to add more configurations of the source or destination instance to the DTS task. For example, you can specify the data storage format of the destination Kafka database and the ID of the CEN instance. For more information, see [Reserve](~~273111~~).
	DataSynchronization *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// The start offset of incremental data migration or synchronization. The value is a UNIX timestamp. Unit: seconds.
	DbList *string `json:"DbList,omitempty" xml:"DbList,omitempty"`
	// The data verification task for a data migration or synchronization instance. The value is a JSON string that indicates parameter limits or alert configurations. For more information, see [DataCheckConfigure](~~459023~~).
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// Specifies whether to monitor the task status. Valid values:
	//
	// *   **true**: monitors the task status.
	// *   **false**: does not monitor the task status.
	DelayNotice *bool `json:"DelayNotice,omitempty" xml:"DelayNotice,omitempty"`
	// Specifies whether to monitor the task latency. Valid values:
	//
	// *   **true**: monitors the task latency.
	// *   **false**: does not monitor the task latency.
	DelayPhone *string `json:"DelayPhone,omitempty" xml:"DelayPhone,omitempty"`
	// The mobile numbers that receive status-related alerts. Separate multiple mobile numbers with commas (,).
	//
	// >
	// *   This parameter is available only for China site (aliyun.com) users. Only mobile numbers in the Chinese mainland are supported. Up to 10 mobile numbers can be specified.
	// *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the CloudMonitor console](~~175876~~).
	DelayRuleTime *int64 `json:"DelayRuleTime,omitempty" xml:"DelayRuleTime,omitempty"`
	// The password of the destination database account.
	//
	// >  If the destination database is a MaxCompute project, you must specify the AccessKey secret of your Alibaba Cloud account. For information about how to obtain your AccessKey pair, see [Create an AccessKey pair](~~116401~~).
	DestinationEndpointDataBaseName *string `json:"DestinationEndpointDataBaseName,omitempty" xml:"DestinationEndpointDataBaseName,omitempty"`
	// The IP address of the destination instance.
	//
	// >  If the **DestinationEndpointInstanceType** parameter is set to **OTHER**, **EXPRESS**, **DG**, or **CEN**, this parameter is available and required.
	DestinationEndpointEngineName *string `json:"DestinationEndpointEngineName,omitempty" xml:"DestinationEndpointEngineName,omitempty"`
	// The name of the database to which the objects migrated to the destination instance belong.
	//
	// >
	// *   If the destination instance is a PolarDB for Oracle cluster, an AnalyticDB for PostgreSQL instance, a PostgreSQL database, a MaxCompute project, or a MongoDB database, this parameter is available and required.
	// *   If the destination instance is a MaxCompute project, you must specify the ID of the MaxCompute project.
	DestinationEndpointIP *string `json:"DestinationEndpointIP,omitempty" xml:"DestinationEndpointIP,omitempty"`
	// The ID of the region in which the destination instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  If the destination instance is an Alibaba Cloud database instance, this parameter is required.
	DestinationEndpointInstanceID *string `json:"DestinationEndpointInstanceID,omitempty" xml:"DestinationEndpointInstanceID,omitempty"`
	// The database engine of the destination instance. Valid values:
	//
	// *   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
	// *   **MARIADB**: ApsaraDB RDS for MariaDB instance
	// *   **PolarDB**: PolarDB for MySQL cluster
	// *   **POLARDB_O**: PolarDB for Oracle cluster
	// *   **POLARDBX10**: PolarDB-X 1.0 instance
	// *   **POLARDBX20**: PolarDB-X 2.0 instance
	// *   **ORACLE**: self-managed Oracle database
	// *   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL instance or self-managed PostgreSQL database
	// *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
	// *   **ADS**: AnalyticDB for MySQL V2.0 cluster
	// *   **ADB30**: AnalyticDB for MySQL V3.0 cluster
	// *   **MONGODB**: ApsaraDB for MongoDB instance or self-managed MongoDB database
	// *   **GREENPLUM**: AnalyticDB for PostgreSQL instance
	// *   **KAFKA**: Message Queue for Apache Kafka instance or self-managed Kafka cluster
	// *   **DATAHUB**: DataHub project
	// *   **DB2**: self-managed Db2 for LUW database
	// *   **AS400**: self-managed Db2 for i database
	// *   **ODPS**: MaxCompute project
	// *   **Tablestore**: Tablestore instance
	// *   **ELK**: Elasticsearch cluster
	// *   **REDIS**: ApsaraDB for Redis instance or self-managed Redis database
	//
	// >
	// *   Default value: **MYSQL**.
	// *   If the DestinationEndpointEngineName parameter is set to **KAFKA**, **MONGODB**, or **PolarDB**, you must also specify the database information in the Reserve parameter. For more information, see [Reserve](~~273111~~).
	DestinationEndpointInstanceType *string `json:"DestinationEndpointInstanceType,omitempty" xml:"DestinationEndpointInstanceType,omitempty"`
	// The ID of the data migration or synchronization task.
	//
	// >  You must specify at least one of the DtsJobId and **DtsInstanceId** parameters. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DestinationEndpointOracleSID *string `json:"DestinationEndpointOracleSID,omitempty" xml:"DestinationEndpointOracleSID,omitempty"`
	DestinationEndpointOwnerID   *string `json:"DestinationEndpointOwnerID,omitempty" xml:"DestinationEndpointOwnerID,omitempty"`
	// Specifies whether to perform full data migration or synchronization. Default value: true. Valid values:
	//
	// *   **true**: performs full data migration or synchronization.
	// *   **false**: does not perform full data migration or synchronization.
	DestinationEndpointPassword *string `json:"DestinationEndpointPassword,omitempty" xml:"DestinationEndpointPassword,omitempty"`
	// The database account of the destination database.
	//
	// >
	// *   In most cases, this parameter is required.
	// *   The permissions that are required for the database account vary with the migration or synchronization scenario. For more information, see [Prepare the database accounts for data migration](~~175878~~) or [Prepare the database accounts for data synchronization](~~213152~~).
	// *   If the destination database is a MaxCompute project, you must specify the AccessKey ID of your Alibaba Cloud account. For information about how to obtain your AccessKey pair, see [Create an AccessKey pair](~~116401~~).
	DestinationEndpointPort *string `json:"DestinationEndpointPort,omitempty" xml:"DestinationEndpointPort,omitempty"`
	// The database service port of the destination instance.
	//
	// >  If the destination instance is a self-managed database, this parameter is available and required.
	DestinationEndpointRegion *string `json:"DestinationEndpointRegion,omitempty" xml:"DestinationEndpointRegion,omitempty"`
	DestinationEndpointRole   *string `json:"DestinationEndpointRole,omitempty" xml:"DestinationEndpointRole,omitempty"`
	// Specifies whether to perform schema migration or synchronization. Default value: true. Valid values:
	//
	// *   **true**: performs schema migration or synchronization.
	// *   **false**: does not perform schema migration or synchronization.
	DestinationEndpointUserName *string `json:"DestinationEndpointUserName,omitempty" xml:"DestinationEndpointUserName,omitempty"`
	// The ID of the request.
	DisasterRecoveryJob *bool   `json:"DisasterRecoveryJob,omitempty" xml:"DisasterRecoveryJob,omitempty"`
	DtsBisLabel         *string `json:"DtsBisLabel,omitempty" xml:"DtsBisLabel,omitempty"`
	// The threshold for triggering latency-related alerts. Unit: seconds. The value must be an integer. You can set the threshold based on your business needs. To prevent jitters caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds.
	//
	// >  If the **DelayNotice** parameter is set to **true**, this parameter is required.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The mobile numbers that receive latency-related alerts. Separate multiple mobile numbers with commas (,).
	//
	// >
	// *   This parameter is available only for China site (aliyun.com) users. Only mobile numbers in the Chinese mainland are supported. Up to 10 mobile numbers can be specified.
	// *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the CloudMonitor console](~~175876~~).
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the source instance.
	//
	// If the source instance is an Alibaba Cloud database instance, you must specify the ID of the database instance. For example, if the source instance is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.
	//
	// If the source instance is a self-managed database, the value of this parameter varies with the value of the **SourceEndpointInstanceType** parameter.****
	//
	// *   If the SourceEndpointInstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.
	// *   If the SourceEndpointInstanceType parameter is set to **DG**, you must specify the ID of the database gateway.
	// *   If the SourceEndpointInstanceType parameter is set to **EXPRESS** or **CEN**, you must specify the ID of the VPC that is connected to the source instance.
	//
	// >  If the SourceEndpointInstanceType parameter is set to **CEN**, you must also specify the ID of the CEN instance in the Reserve parameter. For more information, see [Reserve](~~273111~~).
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	ErrorNotice *bool `json:"ErrorNotice,omitempty" xml:"ErrorNotice,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >
	// *   Default value: **Forward**.
	// *   The value **Reverse** takes effect only if the topology of the data synchronization task is two-way synchronization.
	ErrorPhone *string `json:"ErrorPhone,omitempty" xml:"ErrorPhone,omitempty"`
	// Specifies whether the instance is a disaster recovery instance.
	//
	// *   **true**: The instance is a disaster recovery instance.
	// *   **false**: The instance is not a disaster recovery instance.
	FileOssUrlObject io.Reader `json:"FileOssUrl,omitempty" xml:"FileOssUrl,omitempty"`
	// The ID of the data migration or synchronization instance.
	//
	// >  You must specify at least one of the **DtsJobId** and DtsInstanceId parameters. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	OwnerId *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The URL of the Object Storage Service (OSS) bucket that stores the files related to the DTS task.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The SID of the Oracle database.
	//
	// >  If the **DestinationEndpointEngineName** parameter is set to **ORACLE** and the **Oracle** database is deployed in a non-RAC architecture, this parameter is available and required.
	Reserve *string `json:"Reserve,omitempty" xml:"Reserve,omitempty"`
	// The password of the source database account.
	SourceEndpointDatabaseName *string `json:"SourceEndpointDatabaseName,omitempty" xml:"SourceEndpointDatabaseName,omitempty"`
	// The IP address of the source instance.
	//
	// >  If the **SourceEndpointInstanceType** parameter is set to **OTHER**, **EXPRESS**, **DG**, or **CEN**, this parameter is available and required.
	SourceEndpointEngineName *string `json:"SourceEndpointEngineName,omitempty" xml:"SourceEndpointEngineName,omitempty"`
	// The system ID (SID) of the Oracle database.
	//
	// >  If the **SourceEndpointEngineName** parameter is set to **ORACLE** and the **Oracle** database is deployed in an architecture that is not a Real Application Cluster (RAC), this parameter is available and required.
	SourceEndpointIP *string `json:"SourceEndpointIP,omitempty" xml:"SourceEndpointIP,omitempty"`
	// The ID of the region in which the source instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  If the source instance is an Alibaba Cloud database instance, this parameter is required.
	SourceEndpointInstanceID *string `json:"SourceEndpointInstanceID,omitempty" xml:"SourceEndpointInstanceID,omitempty"`
	// The database engine of the source instance. Valid values:
	//
	// *   **MYSQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
	// *   **MARIADB**: ApsaraDB RDS for MariaDB instance
	// *   **PolarDB**: PolarDB for MySQL cluster
	// *   **POLARDB_O**: PolarDB for Oracle cluster
	// *   **POLARDBX10**: PolarDB-X 1.0 instance
	// *   **POLARDBX20**: PolarDB-X 2.0 instance
	// *   **ORACLE**: self-managed Oracle database
	// *   **POSTGRESQL**: ApsaraDB RDS for PostgreSQL instance or self-managed PostgreSQL database
	// *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
	// *   **MONGODB**: ApsaraDB for MongoDB instance or self-managed MongoDB database
	// *   **DB2**: self-managed Db2 for LUW database
	// *   **AS400**: self-managed Db2 for i database
	// *   **DMSPOLARDB**: DMS logical database
	// *   **HBASE**: self-managed HBase database
	// *   **TERADATA**: Teradata database
	// *   **TiDB**: TiDB database
	// *   **REDIS**: ApsaraDB for Redis instance or self-managed Redis database
	//
	// >
	// *   Default value: **MYSQL**.
	// *   If the SourceEndpointEngineName parameter is set to **MONGODB**, you must also specify the architecture type of the MongoDB database in the Reserve parameter. For more information, see [Reserve](~~273111~~).
	SourceEndpointInstanceType *string `json:"SourceEndpointInstanceType,omitempty" xml:"SourceEndpointInstanceType,omitempty"`
	// The database account of the source database.
	//
	// >
	// *   In most cases, this parameter is required.
	// *   The permissions that are required for the database account vary with the migration or synchronization scenario. For more information, see [Prepare the database accounts for data migration](~~175878~~) or [Prepare the database accounts for data synchronization](~~213152~~).
	SourceEndpointOracleSID *string `json:"SourceEndpointOracleSID,omitempty" xml:"SourceEndpointOracleSID,omitempty"`
	// The type of the destination instance. Valid values:
	//
	// **Alibaba Cloud database instances**
	//
	// *   **RDS**: ApsaraDB RDS for MySQL instance, ApsaraDB RDS for SQL Server instance, ApsaraDB RDS for PostgreSQL instance, or ApsaraDB RDS for MariaDB instance
	// *   **PolarDB**: PolarDB for MySQL cluster
	// *   **POLARDBX10**: PolarDB-X 1.0 instance
	// *   **POLARDBX20**: PolarDB-X 2.0 instance
	// *   **REDIS**: ApsaraDB for Redis instance
	// *   **ADS**: AnalyticDB for MySQL V2.0 cluster or AnalyticDB for MySQL V3.0 cluster
	// *   **MONGODB**: ApsaraDB for MongoDB instance
	// *   **GREENPLUM**: AnalyticDB for PostgreSQL instance
	// *   **DATAHUB**: DataHub project
	// *   **ELK**: Elasticsearch cluster
	// *   **Tablestore**: Tablestore instance
	// *   **ODPS**: MaxCompute project
	//
	// **Self-managed databases**
	//
	// *   **OTHER**: self-managed database with a public IP address
	// *   **ECS**: self-managed database hosted on an ECS instance
	// *   **EXPRESS**: self-managed database connected over Express Connect
	// *   **CEN**: self-managed database connected over CEN
	// *   **DG**: self-managed database connected over Database Gateway
	//
	// >
	// *   If the destination instance is a PolarDB for Oracle cluster, you must set this parameter to **OTHER** or **EXPRESS** because you can use a PolarDB for Oracle cluster only as a self-managed database connected over the Internet or Express Connect.
	// *   If the destination instance is a Message Queue for Apache Kafka instance, you must set this parameter to **ECS** or **EXPRESS** because you can use a Message Queue for Apache Kafka instance only as a self-managed database connected over ECS or Express Connect.
	// *   For more information, see [Supported databases](~~176064~~).
	// *   If the destination instance is a self-managed database, you must deploy the network environment for the database. For more information, see [Preparation overview](~~146958~~).
	SourceEndpointOwnerID *string `json:"SourceEndpointOwnerID,omitempty" xml:"SourceEndpointOwnerID,omitempty"`
	// The name of the RAM role configured for the Alibaba Cloud account that owns the source instance.
	//
	// >  This parameter is required when you migrate or synchronize data across different Alibaba Cloud accounts. For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).
	SourceEndpointPassword *string `json:"SourceEndpointPassword,omitempty" xml:"SourceEndpointPassword,omitempty"`
	// The name of the database to which the objects to be migrated in the source instance belong.
	//
	// >  If the source instance is a PolarDB for Oracle cluster, a PostgreSQL database, or a MongoDB database, this parameter is available and required.
	SourceEndpointPort *string `json:"SourceEndpointPort,omitempty" xml:"SourceEndpointPort,omitempty"`
	// The database service port of the source instance.
	//
	// >  If the source instance is a self-managed database, this parameter is available and required.
	SourceEndpointRegion *string `json:"SourceEndpointRegion,omitempty" xml:"SourceEndpointRegion,omitempty"`
	// The ID of the destination instance.
	//
	// If the destination instance is an Alibaba Cloud database instance, you must specify the ID of the database instance. For example, if the destination instance is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.
	//
	// If the destination instance is a self-managed database, the value of this parameter varies with the value of the **DestinationEndpointInstanceType** parameter.****
	//
	// *   If the DestinationEndpointInstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.
	// *   If the DestinationEndpointInstanceType parameter is set to **DG**, you must specify the ID of the database gateway.
	// *   If the DestinationEndpointInstanceType parameter is set to **EXPRESS** or **CEN**, you must specify the ID of the VPC that is connected to the source instance.
	//
	// >  If the DestinationEndpointInstanceType parameter is set to **CEN**, you must also specify the ID of the CEN instance in the Reserve parameter. For more information, see [Reserve](~~273111~~).
	SourceEndpointRole *string `json:"SourceEndpointRole,omitempty" xml:"SourceEndpointRole,omitempty"`
	// The ID of the Alibaba Cloud account to which the source instance belongs.
	//
	// >  You can specify this parameter to migrate or synchronize data across different Alibaba Cloud accounts. In this case, you must specify the **SourceEndpointRole** parameter.
	SourceEndpointUserName *string `json:"SourceEndpointUserName,omitempty" xml:"SourceEndpointUserName,omitempty"`
	// 数据投递链路交换机实例id
	SourceEndpointVSwitchID *string `json:"SourceEndpointVSwitchID,omitempty" xml:"SourceEndpointVSwitchID,omitempty"`
	// Specifies whether to perform incremental data migration or synchronization. Default value: false. Valid values:
	//
	// *   **false**: does not perform incremental data migration or synchronization.
	// *   **true**: performs incremental data migration or synchronization.
	StructureInitialization *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
	// The ID of the DTS dedicated cluster on which the task runs.
	//
	// >  If this parameter is specified, the task is scheduled to the specified DTS dedicated cluster.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s ConfigureDtsJobAdvanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureDtsJobAdvanceRequest) GoString() string {
	return s.String()
}

func (s *ConfigureDtsJobAdvanceRequest) SetCheckpoint(v string) *ConfigureDtsJobAdvanceRequest {
	s.Checkpoint = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDataCheckConfigure(v string) *ConfigureDtsJobAdvanceRequest {
	s.DataCheckConfigure = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDataInitialization(v bool) *ConfigureDtsJobAdvanceRequest {
	s.DataInitialization = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDataSynchronization(v bool) *ConfigureDtsJobAdvanceRequest {
	s.DataSynchronization = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDbList(v string) *ConfigureDtsJobAdvanceRequest {
	s.DbList = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDedicatedClusterId(v string) *ConfigureDtsJobAdvanceRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDelayNotice(v bool) *ConfigureDtsJobAdvanceRequest {
	s.DelayNotice = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDelayPhone(v string) *ConfigureDtsJobAdvanceRequest {
	s.DelayPhone = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDelayRuleTime(v int64) *ConfigureDtsJobAdvanceRequest {
	s.DelayRuleTime = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointDataBaseName(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointDataBaseName = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointEngineName(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointEngineName = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointIP(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointIP = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointInstanceID(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointInstanceID = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointInstanceType(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointInstanceType = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointOracleSID(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointOracleSID = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointOwnerID(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointOwnerID = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointPassword(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointPassword = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointPort(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointPort = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointRegion(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointRegion = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointRole(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointRole = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDestinationEndpointUserName(v string) *ConfigureDtsJobAdvanceRequest {
	s.DestinationEndpointUserName = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDisasterRecoveryJob(v bool) *ConfigureDtsJobAdvanceRequest {
	s.DisasterRecoveryJob = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDtsBisLabel(v string) *ConfigureDtsJobAdvanceRequest {
	s.DtsBisLabel = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDtsInstanceId(v string) *ConfigureDtsJobAdvanceRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDtsJobId(v string) *ConfigureDtsJobAdvanceRequest {
	s.DtsJobId = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetDtsJobName(v string) *ConfigureDtsJobAdvanceRequest {
	s.DtsJobName = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetErrorNotice(v bool) *ConfigureDtsJobAdvanceRequest {
	s.ErrorNotice = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetErrorPhone(v string) *ConfigureDtsJobAdvanceRequest {
	s.ErrorPhone = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetFileOssUrlObject(v io.Reader) *ConfigureDtsJobAdvanceRequest {
	s.FileOssUrlObject = v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetJobType(v string) *ConfigureDtsJobAdvanceRequest {
	s.JobType = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetOwnerId(v string) *ConfigureDtsJobAdvanceRequest {
	s.OwnerId = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetRegionId(v string) *ConfigureDtsJobAdvanceRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetReserve(v string) *ConfigureDtsJobAdvanceRequest {
	s.Reserve = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointDatabaseName(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointDatabaseName = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointEngineName(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointEngineName = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointIP(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointIP = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointInstanceID(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointInstanceID = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointInstanceType(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointInstanceType = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointOracleSID(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointOracleSID = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointOwnerID(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointOwnerID = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointPassword(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointPassword = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointPort(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointPort = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointRegion(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointRegion = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointRole(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointRole = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointUserName(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointUserName = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSourceEndpointVSwitchID(v string) *ConfigureDtsJobAdvanceRequest {
	s.SourceEndpointVSwitchID = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetStructureInitialization(v bool) *ConfigureDtsJobAdvanceRequest {
	s.StructureInitialization = &v
	return s
}

func (s *ConfigureDtsJobAdvanceRequest) SetSynchronizationDirection(v string) *ConfigureDtsJobAdvanceRequest {
	s.SynchronizationDirection = &v
	return s
}

type ConfigureDtsJobResponseBody struct {
	// The error message returned if the call failed.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// Indicates whether the request was successful.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the data migration or synchronization instance.
	ErrCode    *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The error code returned if the call failed.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the data migration or synchronization task.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfigureDtsJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigureDtsJobResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigureDtsJobResponseBody) SetDtsInstanceId(v string) *ConfigureDtsJobResponseBody {
	s.DtsInstanceId = &v
	return s
}

func (s *ConfigureDtsJobResponseBody) SetDtsJobId(v string) *ConfigureDtsJobResponseBody {
	s.DtsJobId = &v
	return s
}

func (s *ConfigureDtsJobResponseBody) SetErrCode(v string) *ConfigureDtsJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ConfigureDtsJobResponseBody) SetErrMessage(v string) *ConfigureDtsJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ConfigureDtsJobResponseBody) SetHttpStatusCode(v string) *ConfigureDtsJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ConfigureDtsJobResponseBody) SetRequestId(v string) *ConfigureDtsJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfigureDtsJobResponseBody) SetSuccess(v string) *ConfigureDtsJobResponseBody {
	s.Success = &v
	return s
}

type ConfigureDtsJobResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfigureDtsJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfigureDtsJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigureDtsJobResponse) GoString() string {
	return s.String()
}

func (s *ConfigureDtsJobResponse) SetHeaders(v map[string]*string) *ConfigureDtsJobResponse {
	s.Headers = v
	return s
}

func (s *ConfigureDtsJobResponse) SetStatusCode(v int32) *ConfigureDtsJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigureDtsJobResponse) SetBody(v *ConfigureDtsJobResponseBody) *ConfigureDtsJobResponse {
	s.Body = v
	return s
}

type ConfigureMigrationJobRequest struct {
	DestinationEndpoint *ConfigureMigrationJobRequestDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	MigrationMode       *ConfigureMigrationJobRequestMigrationMode       `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	SourceEndpoint      *ConfigureMigrationJobRequestSourceEndpoint      `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The start offset of incremental data migration. The value is a UNIX timestamp. Unit: seconds.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	// The name of the data migration task. The name can be up to 32 characters in length. We recommend that you specify an informative name to identify the task. You do not need to use a unique task name.
	MigrationJobName *string `json:"MigrationJobName,omitempty" xml:"MigrationJobName,omitempty"`
	// The objects that you want to migrate. The value is a JSON string and can contain regular expressions.
	//
	// For more information, see [MigrationObject](~~141227~~).
	MigrationObject *string `json:"MigrationObject,omitempty" xml:"MigrationObject,omitempty"`
	// The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet special requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).
	MigrationReserved *string `json:"MigrationReserved,omitempty" xml:"MigrationReserved,omitempty"`
	OwnerId           *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region where the data migration instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  The region ID of the data migration instance is the same as that of the destination database.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ConfigureMigrationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureMigrationJobRequest) GoString() string {
	return s.String()
}

func (s *ConfigureMigrationJobRequest) SetDestinationEndpoint(v *ConfigureMigrationJobRequestDestinationEndpoint) *ConfigureMigrationJobRequest {
	s.DestinationEndpoint = v
	return s
}

func (s *ConfigureMigrationJobRequest) SetMigrationMode(v *ConfigureMigrationJobRequestMigrationMode) *ConfigureMigrationJobRequest {
	s.MigrationMode = v
	return s
}

func (s *ConfigureMigrationJobRequest) SetSourceEndpoint(v *ConfigureMigrationJobRequestSourceEndpoint) *ConfigureMigrationJobRequest {
	s.SourceEndpoint = v
	return s
}

func (s *ConfigureMigrationJobRequest) SetAccountId(v string) *ConfigureMigrationJobRequest {
	s.AccountId = &v
	return s
}

func (s *ConfigureMigrationJobRequest) SetCheckpoint(v string) *ConfigureMigrationJobRequest {
	s.Checkpoint = &v
	return s
}

func (s *ConfigureMigrationJobRequest) SetMigrationJobId(v string) *ConfigureMigrationJobRequest {
	s.MigrationJobId = &v
	return s
}

func (s *ConfigureMigrationJobRequest) SetMigrationJobName(v string) *ConfigureMigrationJobRequest {
	s.MigrationJobName = &v
	return s
}

func (s *ConfigureMigrationJobRequest) SetMigrationObject(v string) *ConfigureMigrationJobRequest {
	s.MigrationObject = &v
	return s
}

func (s *ConfigureMigrationJobRequest) SetMigrationReserved(v string) *ConfigureMigrationJobRequest {
	s.MigrationReserved = &v
	return s
}

func (s *ConfigureMigrationJobRequest) SetOwnerId(v string) *ConfigureMigrationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *ConfigureMigrationJobRequest) SetRegionId(v string) *ConfigureMigrationJobRequest {
	s.RegionId = &v
	return s
}

type ConfigureMigrationJobRequestDestinationEndpoint struct {
	// The name of the destination database or the authentication database.
	//
	// >
	// *   You must specify the database name only if the **DestinationEndpoint.EngineName** parameter is set to **PostgreSQL**, **DRDS**, or **MongoDB**.
	// *   If the **DestinationEndpoint.EngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the destination database. If the DestinationEndpoint.EngineName parameter is set to **MongoDB**, specify the name of the authentication database.
	DataBaseName *string `json:"DataBaseName,omitempty" xml:"DataBaseName,omitempty"`
	// The engine type of the destination database. Valid values: **MySQL**, **DRDS**, **SQLServer**, **PostgreSQL**, **PPAS**, **MongoDB**, **Redis**, **POLARDB**, and **polardb_pg**.
	//
	// >  You must specify the engine type only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **POLARDB**, **ECS**, **LocalInstance**, or **Express**.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The endpoint of the destination database.
	//
	// >  You must specify the endpoint only if the **DestinationEndpoint.InstanceType** parameter is set to **LocalInstance** or **Express**.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the instance that hosts the destination database.
	//
	// >  You must specify the instance ID only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **ECS**, **MongoDB**, **Redis**, **DRDS**, **PetaData**, **OceanBase**, **POLARDB**, **PolarDB_o**, **AnalyticDB**, or **Greenplum**. For example, if the DestinationEndpoint.InstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The instance type of the destination database. Valid values:
	//
	// *   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
	// *   **LocalInstance**: self-managed database with a public IP address
	// *   **RDS**: ApsaraDB RDS instance
	// *   **DRDS**: PolarDB-X instance
	// *   **MongoDB**: ApsaraDB for MongoDB instance
	// *   **Redis**: ApsaraDB for Redis instance
	// *   **PetaData**: HybridDB for MySQL instance
	// *   **POLARDB**: PolarDB for MySQL cluster or PolarDB for PostgreSQL cluster
	// *   **PolarDB_o**: PolarDB O Edition cluster
	// *   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
	// *   **Greenplum**: AnalyticDB for PostgreSQL instance
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The SID of the Oracle database.
	//
	// >  You must specify this parameter only if the **DestinationEndpoint.EngineName** parameter is set to **Oracle** and the **Oracle** database is deployed in a non-RAC architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The password of the destination database account.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The service port number of the destination database.
	//
	// >  You must specify the service port number only if the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The region ID of the destination database.
	//
	// >  If the **DestinationEndpoint.InstanceType** parameter is set to **LocalInstance**, you can enter **cn-hangzhou** or the ID of the region closest to the self-managed database. For more information, see [List of supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The database account of the destination database.
	//
	// >  The permissions that are required for database accounts vary with the migration scenario. For more information, see [Overview of data migration scenarios](~~26618~~).
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ConfigureMigrationJobRequestDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s ConfigureMigrationJobRequestDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *ConfigureMigrationJobRequestDestinationEndpoint) SetDataBaseName(v string) *ConfigureMigrationJobRequestDestinationEndpoint {
	s.DataBaseName = &v
	return s
}

func (s *ConfigureMigrationJobRequestDestinationEndpoint) SetEngineName(v string) *ConfigureMigrationJobRequestDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *ConfigureMigrationJobRequestDestinationEndpoint) SetIP(v string) *ConfigureMigrationJobRequestDestinationEndpoint {
	s.IP = &v
	return s
}

func (s *ConfigureMigrationJobRequestDestinationEndpoint) SetInstanceID(v string) *ConfigureMigrationJobRequestDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *ConfigureMigrationJobRequestDestinationEndpoint) SetInstanceType(v string) *ConfigureMigrationJobRequestDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *ConfigureMigrationJobRequestDestinationEndpoint) SetOracleSID(v string) *ConfigureMigrationJobRequestDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *ConfigureMigrationJobRequestDestinationEndpoint) SetPassword(v string) *ConfigureMigrationJobRequestDestinationEndpoint {
	s.Password = &v
	return s
}

func (s *ConfigureMigrationJobRequestDestinationEndpoint) SetPort(v string) *ConfigureMigrationJobRequestDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *ConfigureMigrationJobRequestDestinationEndpoint) SetRegion(v string) *ConfigureMigrationJobRequestDestinationEndpoint {
	s.Region = &v
	return s
}

func (s *ConfigureMigrationJobRequestDestinationEndpoint) SetUserName(v string) *ConfigureMigrationJobRequestDestinationEndpoint {
	s.UserName = &v
	return s
}

type ConfigureMigrationJobRequestMigrationMode struct {
	// Specifies whether to perform full data migration. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  For more information about databases that support full data migration, see [Supported databases and migration types](~~26618~~).
	DataIntialization *bool `json:"DataIntialization,omitempty" xml:"DataIntialization,omitempty"`
	// Specifies whether to perform incremental data migration. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  For more information about databases that support incremental data migration, see [Supported databases and migration types](~~26618~~).
	DataSynchronization *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// Specifies whether to perform schema migration. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  For more information about databases that support schema migration, see [Supported databases and migration types](~~26618~~).
	StructureIntialization *bool `json:"StructureIntialization,omitempty" xml:"StructureIntialization,omitempty"`
}

func (s ConfigureMigrationJobRequestMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s ConfigureMigrationJobRequestMigrationMode) GoString() string {
	return s.String()
}

func (s *ConfigureMigrationJobRequestMigrationMode) SetDataIntialization(v bool) *ConfigureMigrationJobRequestMigrationMode {
	s.DataIntialization = &v
	return s
}

func (s *ConfigureMigrationJobRequestMigrationMode) SetDataSynchronization(v bool) *ConfigureMigrationJobRequestMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *ConfigureMigrationJobRequestMigrationMode) SetStructureIntialization(v bool) *ConfigureMigrationJobRequestMigrationMode {
	s.StructureIntialization = &v
	return s
}

type ConfigureMigrationJobRequestSourceEndpoint struct {
	// The name of the source database or the authentication database.
	//
	// >
	// *   You must specify the database name only if the **SourceEndpoint.EngineName** parameter is set to **PostgreSQL** or **MongoDB**.
	// *   If the **SourceEndpoint.EngineName** parameter is set to **PostgreSQL**, specify the name of the source database. If the SourceEndpoint.EngineName parameter is set to **MongoDB**, specify the name of the authentication database.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The engine type of the source database. Valid values: **MySQL**, **TiDB**, **SQLServer**, **PostgreSQL**, **Oracle**, **MongoDB**, **Redis**, **POLARDB**, and **polardb_pg**.
	//
	// >  You must specify the engine type only if the **DestinationEndpoint.InstanceType** parameter is set to **RDS**, **POLARDB**, **ECS**, **LocalInstance**, or **Express**.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The endpoint of the source database.
	//
	// >  You must specify the endpoint only if the **SourceEndpoint.InstanceType** parameter is set to **LocalInstance** or **Express**.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the instance that hosts the source database.
	//
	// >
	// *   You must specify the instance ID only if the **SourceEndpoint.InstanceType** parameter is set to **RDS**, **ECS**, **Express**, **MongoDB**, **POLARDB**, or **PolarDB_o**. For example, if the SourceEndpoint.InstanceType parameter is set to **ECS**, you must specify the ID of the ECS instance.
	// *   If the **SourceEndpoint.InstanceType** parameter is set to **Express**, you must specify the ID of the virtual private cloud (VPC).
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The instance type of the source database. Valid values:
	//
	// *   **RDS**: ApsaraDB RDS instance
	// *   **ECS**: self-managed database that is hosted on ECS
	// *   **LocalInstance**: self-managed database with a public IP address
	// *   **Express**: self-managed database that is connected over Express Connect, VPN Gateway, or Smart Access Gateway
	// *   **dg**: self-managed database that is connected over Database Gateway
	// *   **cen**: self-managed database that is connected over Cloud Enterprise Network (CEN)
	// *   **MongoDB**: ApsaraDB for MongoDB instance
	// *   **POLARDB**: PolarDB for MySQL cluster or PolarDB for PostgreSQL cluster
	// *   **PolarDB_o**: PolarDB O Edition cluster
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The system ID (SID) of the Oracle database.
	//
	// >  You must specify this parameter only if the **SourceEndpoint.EngineName** parameter is set to **Oracle** and the **Oracle** database is deployed in a non-RAC architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The ID of the Alibaba Cloud account to which the source instance belongs.
	//
	// >  You must specify this parameter only when you configure data migration across different Alibaba Cloud accounts.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The password of the source database account.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The service port number of the source database.
	//
	// >  You must specify the service port number only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The region ID of the source database.
	//
	// >  If the **SourceEndpoint.InstanceType** parameter is set to **LocalInstance**, you can enter **cn-hangzhou** or the ID of the region closest to the self-managed database. For more information, see [List of supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The authorized RAM role of the source instance. You must specify the RAM role only if the source instance and the destination instance belong to different Alibaba Cloud accounts. You can use the RAM role to allow the Alibaba Cloud account that owns the destination instance to access the source instance.
	//
	// >  For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The database account of the source database.
	//
	// >  The permissions that are required for database accounts vary with the migration scenario. For more information, see [Overview of data migration scenarios](~~26618~~).
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ConfigureMigrationJobRequestSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s ConfigureMigrationJobRequestSourceEndpoint) GoString() string {
	return s.String()
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetDatabaseName(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetEngineName(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetIP(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.IP = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetInstanceID(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetInstanceType(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetOracleSID(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetOwnerID(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.OwnerID = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetPassword(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.Password = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetPort(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.Port = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetRegion(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.Region = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetRole(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.Role = &v
	return s
}

func (s *ConfigureMigrationJobRequestSourceEndpoint) SetUserName(v string) *ConfigureMigrationJobRequestSourceEndpoint {
	s.UserName = &v
	return s
}

type ConfigureMigrationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfigureMigrationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigureMigrationJobResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigureMigrationJobResponseBody) SetErrCode(v string) *ConfigureMigrationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ConfigureMigrationJobResponseBody) SetErrMessage(v string) *ConfigureMigrationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ConfigureMigrationJobResponseBody) SetRequestId(v string) *ConfigureMigrationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfigureMigrationJobResponseBody) SetSuccess(v string) *ConfigureMigrationJobResponseBody {
	s.Success = &v
	return s
}

type ConfigureMigrationJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfigureMigrationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfigureMigrationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigureMigrationJobResponse) GoString() string {
	return s.String()
}

func (s *ConfigureMigrationJobResponse) SetHeaders(v map[string]*string) *ConfigureMigrationJobResponse {
	s.Headers = v
	return s
}

func (s *ConfigureMigrationJobResponse) SetStatusCode(v int32) *ConfigureMigrationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigureMigrationJobResponse) SetBody(v *ConfigureMigrationJobResponseBody) *ConfigureMigrationJobResponse {
	s.Body = v
	return s
}

type ConfigureMigrationJobAlertRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).
	//
	// >
	// *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
	// *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).
	DelayAlertPhone *string `json:"DelayAlertPhone,omitempty" xml:"DelayAlertPhone,omitempty"`
	// Specifies whether to monitor task latency. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	//
	// >
	// *   The default value is **enable**.
	// *   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.
	DelayAlertStatus *string `json:"DelayAlertStatus,omitempty" xml:"DelayAlertStatus,omitempty"`
	// The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.
	//
	// >  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.
	DelayOverSeconds *string `json:"DelayOverSeconds,omitempty" xml:"DelayOverSeconds,omitempty"`
	// The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).
	//
	// >
	// *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
	// *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).
	ErrorAlertPhone *string `json:"ErrorAlertPhone,omitempty" xml:"ErrorAlertPhone,omitempty"`
	// Specifies whether to monitor task status. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	//
	// >
	// *   The default value is **enable**.
	// *   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
	// *   If the task that you monitor enters an abnormal state, an alert is triggered.
	ErrorAlertStatus *string `json:"ErrorAlertStatus,omitempty" xml:"ErrorAlertStatus,omitempty"`
	// The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ConfigureMigrationJobAlertRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureMigrationJobAlertRequest) GoString() string {
	return s.String()
}

func (s *ConfigureMigrationJobAlertRequest) SetAccountId(v string) *ConfigureMigrationJobAlertRequest {
	s.AccountId = &v
	return s
}

func (s *ConfigureMigrationJobAlertRequest) SetDelayAlertPhone(v string) *ConfigureMigrationJobAlertRequest {
	s.DelayAlertPhone = &v
	return s
}

func (s *ConfigureMigrationJobAlertRequest) SetDelayAlertStatus(v string) *ConfigureMigrationJobAlertRequest {
	s.DelayAlertStatus = &v
	return s
}

func (s *ConfigureMigrationJobAlertRequest) SetDelayOverSeconds(v string) *ConfigureMigrationJobAlertRequest {
	s.DelayOverSeconds = &v
	return s
}

func (s *ConfigureMigrationJobAlertRequest) SetErrorAlertPhone(v string) *ConfigureMigrationJobAlertRequest {
	s.ErrorAlertPhone = &v
	return s
}

func (s *ConfigureMigrationJobAlertRequest) SetErrorAlertStatus(v string) *ConfigureMigrationJobAlertRequest {
	s.ErrorAlertStatus = &v
	return s
}

func (s *ConfigureMigrationJobAlertRequest) SetMigrationJobId(v string) *ConfigureMigrationJobAlertRequest {
	s.MigrationJobId = &v
	return s
}

func (s *ConfigureMigrationJobAlertRequest) SetOwnerId(v string) *ConfigureMigrationJobAlertRequest {
	s.OwnerId = &v
	return s
}

func (s *ConfigureMigrationJobAlertRequest) SetRegionId(v string) *ConfigureMigrationJobAlertRequest {
	s.RegionId = &v
	return s
}

type ConfigureMigrationJobAlertResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfigureMigrationJobAlertResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigureMigrationJobAlertResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigureMigrationJobAlertResponseBody) SetErrCode(v string) *ConfigureMigrationJobAlertResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ConfigureMigrationJobAlertResponseBody) SetErrMessage(v string) *ConfigureMigrationJobAlertResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ConfigureMigrationJobAlertResponseBody) SetRequestId(v string) *ConfigureMigrationJobAlertResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfigureMigrationJobAlertResponseBody) SetSuccess(v string) *ConfigureMigrationJobAlertResponseBody {
	s.Success = &v
	return s
}

type ConfigureMigrationJobAlertResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfigureMigrationJobAlertResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfigureMigrationJobAlertResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigureMigrationJobAlertResponse) GoString() string {
	return s.String()
}

func (s *ConfigureMigrationJobAlertResponse) SetHeaders(v map[string]*string) *ConfigureMigrationJobAlertResponse {
	s.Headers = v
	return s
}

func (s *ConfigureMigrationJobAlertResponse) SetStatusCode(v int32) *ConfigureMigrationJobAlertResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigureMigrationJobAlertResponse) SetBody(v *ConfigureMigrationJobAlertResponseBody) *ConfigureMigrationJobAlertResponse {
	s.Body = v
	return s
}

type ConfigureSubscriptionRequest struct {
	// The UNIX timestamp that represents the start time of change tracking. Unit: seconds.
	//
	// >  You can use a search engine to obtain a UNIX timestamp converter.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The objects for which you want to track data changes. The value must be a JSON string. For more information, see [Objects of DTS tasks](~~209545~~).
	DbList *string `json:"DbList,omitempty" xml:"DbList,omitempty"`
	// The ID of the DTS dedicated cluster on which the change tracking task is scheduled to run.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// Specifies whether to monitor the task latency. Valid values:
	//
	// *   **true**: monitors the task latency.
	// *   **false**: does not monitor the task latency.
	DelayNotice *bool `json:"DelayNotice,omitempty" xml:"DelayNotice,omitempty"`
	// The mobile numbers to which latency-related alerts are sent. Separate multiple mobile numbers with commas (,).
	//
	// >
	// *   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
	// *   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phones, but can [configure alert rules for DTS tasks in the CloudMonitor console](~~175876~~).
	DelayPhone *string `json:"DelayPhone,omitempty" xml:"DelayPhone,omitempty"`
	// The threshold for triggering latency-related alerts. Unit: seconds. The value must be an integer. You can set the threshold based on your business needs. To prevent jitters caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds.
	//
	// >  If the **DelayNotice** parameter is set to **true**, this parameter is required.
	DelayRuleTime *int64  `json:"DelayRuleTime,omitempty" xml:"DelayRuleTime,omitempty"`
	DtsBisLabel   *string `json:"DtsBisLabel,omitempty" xml:"DtsBisLabel,omitempty"`
	// The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The name of the change tracking task.
	//
	// >  We recommend that you specify a descriptive name for easy identification. You do not need to use a unique name.
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// Specifies whether to monitor the task status. Valid values:
	//
	// *   **true**: monitors the task status.
	// *   **false**: does not monitor the task status.
	ErrorNotice *bool `json:"ErrorNotice,omitempty" xml:"ErrorNotice,omitempty"`
	// The mobile numbers to which status-related alerts are sent. Separate multiple mobile numbers with commas (,).
	//
	// >
	// *   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
	// *   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phones, but can [configure alert rules for DTS tasks in the CloudMonitor console](~~175876~~).
	ErrorPhone *string `json:"ErrorPhone,omitempty" xml:"ErrorPhone,omitempty"`
	// The ID of the region in which the Data Transmission Service (DTS) instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The reserved parameter of DTS. The value must be a JSON string. You can specify this parameter to add more configurations of the source or destination database to the DTS task. For example, you can specify the data storage format of the destination Kafka database and the ID of the CEN instance. For more information, see [MigrationReserved](~~176470~~).
	Reserve *string `json:"Reserve,omitempty" xml:"Reserve,omitempty"`
	// The name of the source database.
	SourceEndpointDatabaseName *string `json:"SourceEndpointDatabaseName,omitempty" xml:"SourceEndpointDatabaseName,omitempty"`
	// The engine of the source database. Valid values: **MySQL**, **PostgreSQL**, and **Oracle**.
	//
	// >  If the source database is a self-managed database, you must specify this parameter.
	SourceEndpointEngineName *string `json:"SourceEndpointEngineName,omitempty" xml:"SourceEndpointEngineName,omitempty"`
	// The endpoint of the source database.
	//
	// >  This parameter is required only when the source database is a self-managed database.
	SourceEndpointIP *string `json:"SourceEndpointIP,omitempty" xml:"SourceEndpointIP,omitempty"`
	// The ID of the source database.
	//
	// >  This parameter is required only when the source database is an ApsaraDB RDS for MySQL instance, a PolarDB-X 1.0 instance, or a PolarDB for MySQL cluster.
	SourceEndpointInstanceID *string `json:"SourceEndpointInstanceID,omitempty" xml:"SourceEndpointInstanceID,omitempty"`
	// The type of the source database. Valid values:
	//
	// *   **RDS**: ApsaraDB RDS for MySQL instance
	// *   **PolarDB**: PolarDB for MySQL cluster
	// *   **DRDS**: PolarDB-X 1.0 instance
	// *   **LocalInstance**: self-managed database with a public IP address
	// *   **ECS**: self-managed database hosted on an Elastic Compute Service (ECS) instance
	// *   **Express**: self-managed database connected over Express Connect
	// *   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN)
	// *   **dg**: self-managed database connected over Database Gateway
	SourceEndpointInstanceType *string `json:"SourceEndpointInstanceType,omitempty" xml:"SourceEndpointInstanceType,omitempty"`
	// The system ID (SID) of the Oracle database.
	//
	// >  This parameter is required only when the source database is a self-managed Oracle database and is not deployed in the Real Application Clusters (RAC) architecture.
	SourceEndpointOracleSID *string `json:"SourceEndpointOracleSID,omitempty" xml:"SourceEndpointOracleSID,omitempty"`
	// The ID of the Alibaba Cloud account to which the source database belongs.
	//
	// >  This parameter is required only when you track data changes across different Alibaba Cloud accounts.
	SourceEndpointOwnerID *string `json:"SourceEndpointOwnerID,omitempty" xml:"SourceEndpointOwnerID,omitempty"`
	// The password of the account that is used to connect to the source database.
	SourceEndpointPassword *string `json:"SourceEndpointPassword,omitempty" xml:"SourceEndpointPassword,omitempty"`
	// The service port number of the source database.
	//
	// >  This parameter is required only when the source database is a self-managed database.
	SourceEndpointPort *string `json:"SourceEndpointPort,omitempty" xml:"SourceEndpointPort,omitempty"`
	// The ID of the region in which the source database resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  If the source database is a self-managed database with a public IP address, you can set the value of this parameter to **cn-hangzhou** or the ID of the region that is closest to the region in which the self-managed database resides.
	SourceEndpointRegion *string `json:"SourceEndpointRegion,omitempty" xml:"SourceEndpointRegion,omitempty"`
	// The RAM role that is authorized to access the source database. This parameter is required if the source database does not belong to the Alibaba Cloud account that you use to configure the change tracking task. In this case, you must authorize the Alibaba Cloud account to access the source database by using a RAM role.
	//
	// >  For more information about the permissions that are required for the RAM role and how to grant the permissions to the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).
	SourceEndpointRole *string `json:"SourceEndpointRole,omitempty" xml:"SourceEndpointRole,omitempty"`
	// The username of the account that is used to connect to the source database.
	//
	// >  The permissions that are required for the database account vary with the change tracking scenario. For more information, see [Prepare the source database account for change tracking](~~212653~~).
	SourceEndpointUserName *string `json:"SourceEndpointUserName,omitempty" xml:"SourceEndpointUserName,omitempty"`
	// Specifies whether to track DDL statements. Default value: true. Valid values:
	//
	// *   **true**: tracks DDL statements.
	// *   **false**: does not track DDL statements.
	SubscriptionDataTypeDDL *bool `json:"SubscriptionDataTypeDDL,omitempty" xml:"SubscriptionDataTypeDDL,omitempty"`
	// Specifies whether to track DML statements. Default value: true. Valid values:
	//
	// *   **true**: tracks DML statements.
	// *   **false**: does not track DML statements.
	SubscriptionDataTypeDML *bool `json:"SubscriptionDataTypeDML,omitempty" xml:"SubscriptionDataTypeDML,omitempty"`
	// The network type of the change tracking task. Set the value to **vpc**. A value of vpc indicates the Virtual Private Cloud (VPC) network type.
	//
	// >
	// *   To use the new version of the change tracking feature, you must specify the SubscriptionInstanceNetworkType parameter. You must also specify the **SubscriptionInstanceVPCId** and **SubscriptionInstanceVSwitchID** parameters. If you do not specify the SubscriptionInstanceNetworkType parameter, the previous version of the change tracking feature is used.
	// *   The previous version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, and PolarDB-X 1.0 instances. The new version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and Oracle databases.
	SubscriptionInstanceNetworkType *string `json:"SubscriptionInstanceNetworkType,omitempty" xml:"SubscriptionInstanceNetworkType,omitempty"`
	// The ID of the VPC in which the change tracking instance is deployed.
	//
	// >  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.
	SubscriptionInstanceVPCId *string `json:"SubscriptionInstanceVPCId,omitempty" xml:"SubscriptionInstanceVPCId,omitempty"`
	// The ID of the vSwitch in the specified VPC.
	//
	// >  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.
	SubscriptionInstanceVSwitchId *string `json:"SubscriptionInstanceVSwitchId,omitempty" xml:"SubscriptionInstanceVSwitchId,omitempty"`
}

func (s ConfigureSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionRequest) SetCheckpoint(v string) *ConfigureSubscriptionRequest {
	s.Checkpoint = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetDbList(v string) *ConfigureSubscriptionRequest {
	s.DbList = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetDedicatedClusterId(v string) *ConfigureSubscriptionRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetDelayNotice(v bool) *ConfigureSubscriptionRequest {
	s.DelayNotice = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetDelayPhone(v string) *ConfigureSubscriptionRequest {
	s.DelayPhone = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetDelayRuleTime(v int64) *ConfigureSubscriptionRequest {
	s.DelayRuleTime = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetDtsBisLabel(v string) *ConfigureSubscriptionRequest {
	s.DtsBisLabel = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetDtsInstanceId(v string) *ConfigureSubscriptionRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetDtsJobId(v string) *ConfigureSubscriptionRequest {
	s.DtsJobId = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetDtsJobName(v string) *ConfigureSubscriptionRequest {
	s.DtsJobName = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetErrorNotice(v bool) *ConfigureSubscriptionRequest {
	s.ErrorNotice = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetErrorPhone(v string) *ConfigureSubscriptionRequest {
	s.ErrorPhone = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetRegionId(v string) *ConfigureSubscriptionRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetReserve(v string) *ConfigureSubscriptionRequest {
	s.Reserve = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointDatabaseName(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointDatabaseName = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointEngineName(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointEngineName = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointIP(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointIP = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointInstanceID(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointInstanceID = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointInstanceType(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointInstanceType = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointOracleSID(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointOracleSID = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointOwnerID(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointOwnerID = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointPassword(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointPassword = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointPort(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointPort = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointRegion(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointRegion = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointRole(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointRole = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSourceEndpointUserName(v string) *ConfigureSubscriptionRequest {
	s.SourceEndpointUserName = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSubscriptionDataTypeDDL(v bool) *ConfigureSubscriptionRequest {
	s.SubscriptionDataTypeDDL = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSubscriptionDataTypeDML(v bool) *ConfigureSubscriptionRequest {
	s.SubscriptionDataTypeDML = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSubscriptionInstanceNetworkType(v string) *ConfigureSubscriptionRequest {
	s.SubscriptionInstanceNetworkType = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSubscriptionInstanceVPCId(v string) *ConfigureSubscriptionRequest {
	s.SubscriptionInstanceVPCId = &v
	return s
}

func (s *ConfigureSubscriptionRequest) SetSubscriptionInstanceVSwitchId(v string) *ConfigureSubscriptionRequest {
	s.SubscriptionInstanceVSwitchId = &v
	return s
}

type ConfigureSubscriptionResponseBody struct {
	// The ID of the change tracking instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfigureSubscriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionResponseBody) SetDtsInstanceId(v string) *ConfigureSubscriptionResponseBody {
	s.DtsInstanceId = &v
	return s
}

func (s *ConfigureSubscriptionResponseBody) SetDtsJobId(v string) *ConfigureSubscriptionResponseBody {
	s.DtsJobId = &v
	return s
}

func (s *ConfigureSubscriptionResponseBody) SetErrCode(v string) *ConfigureSubscriptionResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ConfigureSubscriptionResponseBody) SetErrMessage(v string) *ConfigureSubscriptionResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ConfigureSubscriptionResponseBody) SetHttpStatusCode(v string) *ConfigureSubscriptionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ConfigureSubscriptionResponseBody) SetRequestId(v string) *ConfigureSubscriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfigureSubscriptionResponseBody) SetSuccess(v string) *ConfigureSubscriptionResponseBody {
	s.Success = &v
	return s
}

type ConfigureSubscriptionResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfigureSubscriptionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfigureSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionResponse) SetHeaders(v map[string]*string) *ConfigureSubscriptionResponse {
	s.Headers = v
	return s
}

func (s *ConfigureSubscriptionResponse) SetStatusCode(v int32) *ConfigureSubscriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigureSubscriptionResponse) SetBody(v *ConfigureSubscriptionResponseBody) *ConfigureSubscriptionResponse {
	s.Body = v
	return s
}

type ConfigureSubscriptionInstanceRequest struct {
	SourceEndpoint       *ConfigureSubscriptionInstanceRequestSourceEndpoint       `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	SubscriptionDataType *ConfigureSubscriptionInstanceRequestSubscriptionDataType `json:"SubscriptionDataType,omitempty" xml:"SubscriptionDataType,omitempty" type:"Struct"`
	SubscriptionInstance *ConfigureSubscriptionInstanceRequestSubscriptionInstance `json:"SubscriptionInstance,omitempty" xml:"SubscriptionInstance,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter is discontinued.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the region in which the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
	// The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](~~49442~~) operation to query the instance ID.
	SubscriptionInstanceName *string `json:"SubscriptionInstanceName,omitempty" xml:"SubscriptionInstanceName,omitempty"`
	// The network type of the change tracking instance. Set the value to **vpc**. A value of vpc indicates the Virtual Private Cloud (VPC) network type.
	//
	// >
	// *   To use the new version of the change tracking feature, you must specify the SubscriptionInstanceNetworkType parameter. You must also specify the **SubscriptionInstance.VPCId** and **SubscriptionInstance.VSwitchID** parameters. If you do not specify the SubscriptionInstanceNetworkType parameter, the previous version of the change tracking feature is used.
	// *   The previous version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, and PolarDB-X 1.0 instances. The new version of the change tracking feature supports self-managed MySQL databases, ApsaraDB RDS for MySQL instances, PolarDB for MySQL clusters, and Oracle databases.
	SubscriptionInstanceNetworkType *string `json:"SubscriptionInstanceNetworkType,omitempty" xml:"SubscriptionInstanceNetworkType,omitempty"`
	// The objects for which you want to track data changes. The value is a JSON string and can contain regular expressions. For more information, see [SubscriptionObjects](~~141902~~).
	SubscriptionObject *string `json:"SubscriptionObject,omitempty" xml:"SubscriptionObject,omitempty"`
}

func (s ConfigureSubscriptionInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionInstanceRequest) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionInstanceRequest) SetSourceEndpoint(v *ConfigureSubscriptionInstanceRequestSourceEndpoint) *ConfigureSubscriptionInstanceRequest {
	s.SourceEndpoint = v
	return s
}

func (s *ConfigureSubscriptionInstanceRequest) SetSubscriptionDataType(v *ConfigureSubscriptionInstanceRequestSubscriptionDataType) *ConfigureSubscriptionInstanceRequest {
	s.SubscriptionDataType = v
	return s
}

func (s *ConfigureSubscriptionInstanceRequest) SetSubscriptionInstance(v *ConfigureSubscriptionInstanceRequestSubscriptionInstance) *ConfigureSubscriptionInstanceRequest {
	s.SubscriptionInstance = v
	return s
}

func (s *ConfigureSubscriptionInstanceRequest) SetAccountId(v string) *ConfigureSubscriptionInstanceRequest {
	s.AccountId = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequest) SetOwnerId(v string) *ConfigureSubscriptionInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequest) SetRegionId(v string) *ConfigureSubscriptionInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequest) SetSubscriptionInstanceId(v string) *ConfigureSubscriptionInstanceRequest {
	s.SubscriptionInstanceId = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequest) SetSubscriptionInstanceName(v string) *ConfigureSubscriptionInstanceRequest {
	s.SubscriptionInstanceName = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequest) SetSubscriptionInstanceNetworkType(v string) *ConfigureSubscriptionInstanceRequest {
	s.SubscriptionInstanceNetworkType = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequest) SetSubscriptionObject(v string) *ConfigureSubscriptionInstanceRequest {
	s.SubscriptionObject = &v
	return s
}

type ConfigureSubscriptionInstanceRequestSourceEndpoint struct {
	// The name of the source database.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The IP address of the source database.
	//
	// >  This parameter is required only when the source database is a self-managed database.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the source database.
	//
	// >  This parameter is required only when the source database is an ApsaraDB RDS for MySQL instance, a PolarDB-X 1.0 instance, or a PolarDB for MySQL cluster.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the source database. Valid values:
	//
	// *   **RDS**: ApsaraDB RDS for MySQL instance
	// *   **PolarDB**: PolarDB for MySQL cluster
	// *   **LocalInstance**: self-managed database with a public IP address
	// *   **ECS**: self-managed database hosted on an Elastic Compute Service (ECS) instance
	// *   **Express**: self-managed database connected over Express Connect
	// *   **CEN**: self-managed database connected over Cloud Enterprise Network (CEN)
	// *   **dg**: self-managed database connected over Database Gateway
	//
	// >  The engine of a self-managed database can be MySQL or Oracle. You must specify the engine type when you call the [CreateSubscriptionInstance](~~49436~~) operation.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The system ID (SID) of the Oracle database.
	//
	// >  This parameter is required only when the source database is a self-managed Oracle database and is not deployed in the Real Application Clusters (RAC) architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The ID of the Alibaba Cloud account to which the source database belongs.
	//
	// >  This parameter is required only when you track data changes across different Alibaba Cloud accounts.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The password of the account that is used to connect to the source database.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The service port number of the source database.
	//
	// >  This parameter is required only when the source database is a self-managed database.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The RAM role that is authorized to access the source database. This parameter is required if the source database does not belong to the Alibaba Cloud account that you use to configure the change tracking instance. In this case, you must authorize the Alibaba Cloud account to access the source database by using a RAM role.
	//
	// >  For more information about the permissions that are required for the RAM role and how to grant permissions to the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The username of the account that is used to connect to the source database.
	//
	// >  The permissions that are required for the database account vary with the change tracking scenario. For more information, see [Overview of change tracking scenarios](~~145715~~).
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ConfigureSubscriptionInstanceRequestSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionInstanceRequestSourceEndpoint) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionInstanceRequestSourceEndpoint) SetDatabaseName(v string) *ConfigureSubscriptionInstanceRequestSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSourceEndpoint) SetIP(v string) *ConfigureSubscriptionInstanceRequestSourceEndpoint {
	s.IP = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSourceEndpoint) SetInstanceID(v string) *ConfigureSubscriptionInstanceRequestSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSourceEndpoint) SetInstanceType(v string) *ConfigureSubscriptionInstanceRequestSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSourceEndpoint) SetOracleSID(v string) *ConfigureSubscriptionInstanceRequestSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSourceEndpoint) SetOwnerID(v string) *ConfigureSubscriptionInstanceRequestSourceEndpoint {
	s.OwnerID = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSourceEndpoint) SetPassword(v string) *ConfigureSubscriptionInstanceRequestSourceEndpoint {
	s.Password = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSourceEndpoint) SetPort(v string) *ConfigureSubscriptionInstanceRequestSourceEndpoint {
	s.Port = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSourceEndpoint) SetRole(v string) *ConfigureSubscriptionInstanceRequestSourceEndpoint {
	s.Role = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSourceEndpoint) SetUserName(v string) *ConfigureSubscriptionInstanceRequestSourceEndpoint {
	s.UserName = &v
	return s
}

type ConfigureSubscriptionInstanceRequestSubscriptionDataType struct {
	// Specifies whether to track DDL statements. Default value: true. Valid values:
	//
	// *   **true**: tracks DDL statements.
	// *   **false**: does not track DDL statements.
	DDL *bool `json:"DDL,omitempty" xml:"DDL,omitempty"`
	// Specifies whether to track DML statements. Default value: true. Valid values:
	//
	// *   **true**: tracks DML statements.
	// *   **false**: does not tack DML statements.
	DML *bool `json:"DML,omitempty" xml:"DML,omitempty"`
}

func (s ConfigureSubscriptionInstanceRequestSubscriptionDataType) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionInstanceRequestSubscriptionDataType) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionInstanceRequestSubscriptionDataType) SetDDL(v bool) *ConfigureSubscriptionInstanceRequestSubscriptionDataType {
	s.DDL = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSubscriptionDataType) SetDML(v bool) *ConfigureSubscriptionInstanceRequestSubscriptionDataType {
	s.DML = &v
	return s
}

type ConfigureSubscriptionInstanceRequestSubscriptionInstance struct {
	// The ID of the VPC in which the change tracking instance is deployed.
	//
	// >  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.
	VPCId *string `json:"VPCId,omitempty" xml:"VPCId,omitempty"`
	// The ID of the vSwitch in the specified VPC.
	//
	// >  This parameter is required only when the **SubscriptionInstanceNetworkType** parameter is set to **vpc**.
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s ConfigureSubscriptionInstanceRequestSubscriptionInstance) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionInstanceRequestSubscriptionInstance) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionInstanceRequestSubscriptionInstance) SetVPCId(v string) *ConfigureSubscriptionInstanceRequestSubscriptionInstance {
	s.VPCId = &v
	return s
}

func (s *ConfigureSubscriptionInstanceRequestSubscriptionInstance) SetVSwitchId(v string) *ConfigureSubscriptionInstanceRequestSubscriptionInstance {
	s.VSwitchId = &v
	return s
}

type ConfigureSubscriptionInstanceResponseBody struct {
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfigureSubscriptionInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionInstanceResponseBody) SetErrCode(v string) *ConfigureSubscriptionInstanceResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ConfigureSubscriptionInstanceResponseBody) SetErrMessage(v string) *ConfigureSubscriptionInstanceResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ConfigureSubscriptionInstanceResponseBody) SetRequestId(v string) *ConfigureSubscriptionInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfigureSubscriptionInstanceResponseBody) SetSuccess(v string) *ConfigureSubscriptionInstanceResponseBody {
	s.Success = &v
	return s
}

type ConfigureSubscriptionInstanceResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfigureSubscriptionInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfigureSubscriptionInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionInstanceResponse) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionInstanceResponse) SetHeaders(v map[string]*string) *ConfigureSubscriptionInstanceResponse {
	s.Headers = v
	return s
}

func (s *ConfigureSubscriptionInstanceResponse) SetStatusCode(v int32) *ConfigureSubscriptionInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigureSubscriptionInstanceResponse) SetBody(v *ConfigureSubscriptionInstanceResponseBody) *ConfigureSubscriptionInstanceResponse {
	s.Body = v
	return s
}

type ConfigureSubscriptionInstanceAlertRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).
	//
	// >
	// *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
	// *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).
	DelayAlertPhone *string `json:"DelayAlertPhone,omitempty" xml:"DelayAlertPhone,omitempty"`
	// Specifies whether to monitor task latency. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	//
	// >
	// *   The default value is **enable**.
	// *   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.
	DelayAlertStatus *string `json:"DelayAlertStatus,omitempty" xml:"DelayAlertStatus,omitempty"`
	// The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.
	//
	// >  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.
	DelayOverSeconds *string `json:"DelayOverSeconds,omitempty" xml:"DelayOverSeconds,omitempty"`
	// The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).
	//
	// >
	// *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
	// *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).
	ErrorAlertPhone *string `json:"ErrorAlertPhone,omitempty" xml:"ErrorAlertPhone,omitempty"`
	// Specifies whether to monitor task status. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	//
	// >
	// *   The default value is **enable**.
	// *   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
	// *   If the task that you monitor enters an abnormal state, an alert is triggered.
	ErrorAlertStatus *string `json:"ErrorAlertStatus,omitempty" xml:"ErrorAlertStatus,omitempty"`
	OwnerId          *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
}

func (s ConfigureSubscriptionInstanceAlertRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionInstanceAlertRequest) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionInstanceAlertRequest) SetAccountId(v string) *ConfigureSubscriptionInstanceAlertRequest {
	s.AccountId = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertRequest) SetDelayAlertPhone(v string) *ConfigureSubscriptionInstanceAlertRequest {
	s.DelayAlertPhone = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertRequest) SetDelayAlertStatus(v string) *ConfigureSubscriptionInstanceAlertRequest {
	s.DelayAlertStatus = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertRequest) SetDelayOverSeconds(v string) *ConfigureSubscriptionInstanceAlertRequest {
	s.DelayOverSeconds = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertRequest) SetErrorAlertPhone(v string) *ConfigureSubscriptionInstanceAlertRequest {
	s.ErrorAlertPhone = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertRequest) SetErrorAlertStatus(v string) *ConfigureSubscriptionInstanceAlertRequest {
	s.ErrorAlertStatus = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertRequest) SetOwnerId(v string) *ConfigureSubscriptionInstanceAlertRequest {
	s.OwnerId = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertRequest) SetRegionId(v string) *ConfigureSubscriptionInstanceAlertRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertRequest) SetSubscriptionInstanceId(v string) *ConfigureSubscriptionInstanceAlertRequest {
	s.SubscriptionInstanceId = &v
	return s
}

type ConfigureSubscriptionInstanceAlertResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfigureSubscriptionInstanceAlertResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionInstanceAlertResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionInstanceAlertResponseBody) SetErrCode(v string) *ConfigureSubscriptionInstanceAlertResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertResponseBody) SetErrMessage(v string) *ConfigureSubscriptionInstanceAlertResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertResponseBody) SetRequestId(v string) *ConfigureSubscriptionInstanceAlertResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertResponseBody) SetSuccess(v string) *ConfigureSubscriptionInstanceAlertResponseBody {
	s.Success = &v
	return s
}

type ConfigureSubscriptionInstanceAlertResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfigureSubscriptionInstanceAlertResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfigureSubscriptionInstanceAlertResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSubscriptionInstanceAlertResponse) GoString() string {
	return s.String()
}

func (s *ConfigureSubscriptionInstanceAlertResponse) SetHeaders(v map[string]*string) *ConfigureSubscriptionInstanceAlertResponse {
	s.Headers = v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertResponse) SetStatusCode(v int32) *ConfigureSubscriptionInstanceAlertResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigureSubscriptionInstanceAlertResponse) SetBody(v *ConfigureSubscriptionInstanceAlertResponseBody) *ConfigureSubscriptionInstanceAlertResponse {
	s.Body = v
	return s
}

type ConfigureSynchronizationJobRequest struct {
	DestinationEndpoint *ConfigureSynchronizationJobRequestDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	PartitionKey        *ConfigureSynchronizationJobRequestPartitionKey        `json:"PartitionKey,omitempty" xml:"PartitionKey,omitempty" type:"Struct"`
	SourceEndpoint      *ConfigureSynchronizationJobRequestSourceEndpoint      `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The synchronization checkpoint.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// Specifies whether to perform initial full data synchronization. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  Default value: **true**.
	DataInitialization *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet special requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).
	//
	// >  This parameter can be used for data synchronization between ApsaraDB for Redis Enterprise Edition instances. For more information, see [Use OpenAPI Explorer to configure one-way or two-way data synchronization between ApsaraDB for Redis Enterprise Edition instances](~~155967~~).
	MigrationReserved *string `json:"MigrationReserved,omitempty" xml:"MigrationReserved,omitempty"`
	OwnerId           *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to perform initial schema synchronization. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  Default value: **true**.
	StructureInitialization *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >
	// *   Default value: **Forward**.
	// *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
	// The name of the data synchronization task.
	//
	// >  We recommend that you specify an informative name for easy identification. You do not need to use a unique task name.
	SynchronizationJobName *string `json:"SynchronizationJobName,omitempty" xml:"SynchronizationJobName,omitempty"`
	// The objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see [SynchronizationObjects](~~141901~~).
	SynchronizationObjects *string `json:"SynchronizationObjects,omitempty" xml:"SynchronizationObjects,omitempty"`
}

func (s ConfigureSynchronizationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobRequest) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobRequest) SetDestinationEndpoint(v *ConfigureSynchronizationJobRequestDestinationEndpoint) *ConfigureSynchronizationJobRequest {
	s.DestinationEndpoint = v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetPartitionKey(v *ConfigureSynchronizationJobRequestPartitionKey) *ConfigureSynchronizationJobRequest {
	s.PartitionKey = v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetSourceEndpoint(v *ConfigureSynchronizationJobRequestSourceEndpoint) *ConfigureSynchronizationJobRequest {
	s.SourceEndpoint = v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetAccountId(v string) *ConfigureSynchronizationJobRequest {
	s.AccountId = &v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetCheckpoint(v string) *ConfigureSynchronizationJobRequest {
	s.Checkpoint = &v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetDataInitialization(v bool) *ConfigureSynchronizationJobRequest {
	s.DataInitialization = &v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetMigrationReserved(v string) *ConfigureSynchronizationJobRequest {
	s.MigrationReserved = &v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetOwnerId(v string) *ConfigureSynchronizationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetRegionId(v string) *ConfigureSynchronizationJobRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetStructureInitialization(v bool) *ConfigureSynchronizationJobRequest {
	s.StructureInitialization = &v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetSynchronizationDirection(v string) *ConfigureSynchronizationJobRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetSynchronizationJobId(v string) *ConfigureSynchronizationJobRequest {
	s.SynchronizationJobId = &v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetSynchronizationJobName(v string) *ConfigureSynchronizationJobRequest {
	s.SynchronizationJobName = &v
	return s
}

func (s *ConfigureSynchronizationJobRequest) SetSynchronizationObjects(v string) *ConfigureSynchronizationJobRequest {
	s.SynchronizationObjects = &v
	return s
}

type ConfigureSynchronizationJobRequestDestinationEndpoint struct {
	// The name of the database to which the synchronization object in the destination instance belongs.
	DataBaseName *string `json:"DataBaseName,omitempty" xml:"DataBaseName,omitempty"`
	// The IP address of the destination database.
	//
	// >  You must specify this parameter only if the **DestinationEndpoint.InstanceType** parameter is set to **Express**, **dg**, or **cen**.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the destination instance.
	//
	// >  If the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute** or **DataHub**, you must specify the name of the MaxCompute project or the DataHub project.
	//
	// If the destination instance is an AnalyticDB for MySQL cluster, specify the ID of the AnalyticDB for MySQL cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the destination instance. Valid values:
	//
	// *   **Redis**: ApsaraDB for Redis instance
	// *   **RDS**: ApsaraDB RDS instance
	// *   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
	// *   **ECS**: self-managed database that is hosted on ECS
	// *   **Express**: self-managed database that is connected over Express Connect
	// *   **DataHub**: DataHub project
	// *   **MaxCompute**: MaxCompute project
	// *   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
	// *   **Greenplum**: AnalyticDB for PostgreSQL instance
	//
	// >  The default value is **RDS**.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The password of the destination database account.
	//
	// >
	// *   If the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**, you must specify the DestinationEndpoint.Password parameter.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The service port number of the destination database.
	//
	// >  You must specify this parameter only if the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The database account of the destination database.
	//
	// >
	// *   The permissions that are required for database accounts vary with the synchronization scenario. For more information, see [Overview of data synchronization scenarios](~~140954~~).
	// *   If the **DestinationEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**, you must specify the DestinationEndpoint.UserName parameter.
	// *   If the **DestinationEndpoint.InstanceType** parameter is set to RDS and the database version is MySQL 5.5 or MySQL 5.6, you do not need to specify the DestinationEndpoint.UserName and **DestinationEndpoint.Password** parameters.
	// *   If the **DestinationEndpoint.InstanceType** parameter is set to **Redis**, you do not need to specify the DestinationEndpoint.UserName parameter.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ConfigureSynchronizationJobRequestDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobRequestDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobRequestDestinationEndpoint) SetDataBaseName(v string) *ConfigureSynchronizationJobRequestDestinationEndpoint {
	s.DataBaseName = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestDestinationEndpoint) SetIP(v string) *ConfigureSynchronizationJobRequestDestinationEndpoint {
	s.IP = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestDestinationEndpoint) SetInstanceId(v string) *ConfigureSynchronizationJobRequestDestinationEndpoint {
	s.InstanceId = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestDestinationEndpoint) SetInstanceType(v string) *ConfigureSynchronizationJobRequestDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestDestinationEndpoint) SetPassword(v string) *ConfigureSynchronizationJobRequestDestinationEndpoint {
	s.Password = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestDestinationEndpoint) SetPort(v string) *ConfigureSynchronizationJobRequestDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestDestinationEndpoint) SetUserName(v string) *ConfigureSynchronizationJobRequestDestinationEndpoint {
	s.UserName = &v
	return s
}

type ConfigureSynchronizationJobRequestPartitionKey struct {
	// Specifies whether the incremental data table contains partitions defined by the modifytime_day field. Valid values: **true** and **false**.
	//
	// >  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.
	ModifyTimeDay *bool `json:"ModifyTime_Day,omitempty" xml:"ModifyTime_Day,omitempty"`
	// Specifies whether the incremental data table contains partitions defined by the modifytime_hour field. Valid values: **true** and **false**.
	//
	// >  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.
	ModifyTimeHour *bool `json:"ModifyTime_Hour,omitempty" xml:"ModifyTime_Hour,omitempty"`
	// Specifies whether the incremental data table contains partitions defined by the modifytime_minute field. Valid values: **true** and **false**.
	//
	// >  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.
	ModifyTimeMinute *bool `json:"ModifyTime_Minute,omitempty" xml:"ModifyTime_Minute,omitempty"`
	// Specifies whether the incremental data table contains partitions defined by the modifytime_month field. Valid values: **true** and **false**.
	//
	// >  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.
	ModifyTimeMonth *bool `json:"ModifyTime_Month,omitempty" xml:"ModifyTime_Month,omitempty"`
	// Specifies whether the incremental data table contains partitions defined by the modifytime_year field. Valid values: **true** and **false**.
	//
	// >  This parameter is available only if the **DestinationEndpoint.InstanceType** parameter is set to **MaxCompute**.
	ModifyTimeYear *bool `json:"ModifyTime_Year,omitempty" xml:"ModifyTime_Year,omitempty"`
}

func (s ConfigureSynchronizationJobRequestPartitionKey) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobRequestPartitionKey) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobRequestPartitionKey) SetModifyTimeDay(v bool) *ConfigureSynchronizationJobRequestPartitionKey {
	s.ModifyTimeDay = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestPartitionKey) SetModifyTimeHour(v bool) *ConfigureSynchronizationJobRequestPartitionKey {
	s.ModifyTimeHour = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestPartitionKey) SetModifyTimeMinute(v bool) *ConfigureSynchronizationJobRequestPartitionKey {
	s.ModifyTimeMinute = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestPartitionKey) SetModifyTimeMonth(v bool) *ConfigureSynchronizationJobRequestPartitionKey {
	s.ModifyTimeMonth = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestPartitionKey) SetModifyTimeYear(v bool) *ConfigureSynchronizationJobRequestPartitionKey {
	s.ModifyTimeYear = &v
	return s
}

type ConfigureSynchronizationJobRequestSourceEndpoint struct {
	// The name of the database to which the synchronization object in the source instance belongs.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The IP address of the source database.
	//
	// >  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the source instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the source instance. Valid values:
	//
	// *   **RDS**: ApsaraDB RDS instance
	// *   **Redis**: ApsaraDB for Redis instance
	// *   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
	// *   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
	// *   **Express**: self-managed database that is connected over Express Connect
	// *   **dg**: self-managed database that is connected over Database Gateway
	// *   **cen**: self-managed database that is connected over Cloud Enterprise Network (CEN)
	//
	// >  The default value is **RDS**.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The ID of the Alibaba Cloud account that owns the source RDS instance.
	//
	// >  You can specify this parameter to synchronize data across different Alibaba Cloud accounts. In this case, you also need to specify the **SourceEndpoint.Role** parameter.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The password of the source database account.
	//
	// >  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The service port number of the source database.
	//
	// >  You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The name of the RAM role configured for the Alibaba Cloud account that owns the source instance.
	//
	// >  You must specify this parameter when you synchronize data across different Alibaba Cloud accounts. For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The database account of the source database.
	//
	// >
	// *   You must specify this parameter only if the **SourceEndpoint.InstanceType** parameter is set to **ECS**, **Express**, **dg**, or **cen**.
	// *   If the **SourceEndpoint.InstanceType** parameter is set to **Redis**, you do not need to specify the database account.
	// *   The permissions that are required for database accounts vary with the synchronization scenario. For more information, see [Overview of data synchronization scenarios](~~140954~~).
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ConfigureSynchronizationJobRequestSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobRequestSourceEndpoint) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobRequestSourceEndpoint) SetDatabaseName(v string) *ConfigureSynchronizationJobRequestSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestSourceEndpoint) SetIP(v string) *ConfigureSynchronizationJobRequestSourceEndpoint {
	s.IP = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestSourceEndpoint) SetInstanceId(v string) *ConfigureSynchronizationJobRequestSourceEndpoint {
	s.InstanceId = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestSourceEndpoint) SetInstanceType(v string) *ConfigureSynchronizationJobRequestSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestSourceEndpoint) SetOwnerID(v string) *ConfigureSynchronizationJobRequestSourceEndpoint {
	s.OwnerID = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestSourceEndpoint) SetPassword(v string) *ConfigureSynchronizationJobRequestSourceEndpoint {
	s.Password = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestSourceEndpoint) SetPort(v string) *ConfigureSynchronizationJobRequestSourceEndpoint {
	s.Port = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestSourceEndpoint) SetRole(v string) *ConfigureSynchronizationJobRequestSourceEndpoint {
	s.Role = &v
	return s
}

func (s *ConfigureSynchronizationJobRequestSourceEndpoint) SetUserName(v string) *ConfigureSynchronizationJobRequestSourceEndpoint {
	s.UserName = &v
	return s
}

type ConfigureSynchronizationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfigureSynchronizationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobResponseBody) SetErrCode(v string) *ConfigureSynchronizationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ConfigureSynchronizationJobResponseBody) SetErrMessage(v string) *ConfigureSynchronizationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ConfigureSynchronizationJobResponseBody) SetRequestId(v string) *ConfigureSynchronizationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfigureSynchronizationJobResponseBody) SetSuccess(v string) *ConfigureSynchronizationJobResponseBody {
	s.Success = &v
	return s
}

type ConfigureSynchronizationJobResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfigureSynchronizationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfigureSynchronizationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobResponse) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobResponse) SetHeaders(v map[string]*string) *ConfigureSynchronizationJobResponse {
	s.Headers = v
	return s
}

func (s *ConfigureSynchronizationJobResponse) SetStatusCode(v int32) *ConfigureSynchronizationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigureSynchronizationJobResponse) SetBody(v *ConfigureSynchronizationJobResponseBody) *ConfigureSynchronizationJobResponse {
	s.Body = v
	return s
}

type ConfigureSynchronizationJobAlertRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The mobile phone numbers that receive latency-related alerts. Separate mobile phone numbers with commas (,).
	//
	// >
	// *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
	// *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).
	DelayAlertPhone *string `json:"DelayAlertPhone,omitempty" xml:"DelayAlertPhone,omitempty"`
	// Specifies whether to monitor task latency. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	//
	// >
	// *   The default value is **enable**.
	// *   You must specify at least one of the DelayAlertStatus and **ErrorAlertStatus** parameters.
	DelayAlertStatus *string `json:"DelayAlertStatus,omitempty" xml:"DelayAlertStatus,omitempty"`
	// The threshold for triggering latency alerts. The unit is seconds and the value must be an integer. You can set the threshold based on your business needs. To avoid delay fluctuations caused by network and database loads, we recommend that you set the threshold to more than 10 seconds.
	//
	// >  If the **DelayAlertStatus** parameter is set to **enable**, this parameter must be specified.
	DelayOverSeconds *string `json:"DelayOverSeconds,omitempty" xml:"DelayOverSeconds,omitempty"`
	// The mobile phone numbers that receive status-related alerts. Separate mobile phone numbers with commas (,).
	//
	// >
	// *   This parameter is available only for China site (aliyun.com) users. Only mobile phone numbers in the Chinese mainland are supported. Up to 10 mobile phone numbers can be specified.
	// *   International site (alibabacloud.com) users cannot receive alerts by using mobile phones, but can [set alert rules for DTS tasks in the Cloud Monitor console](~~175876~~).
	ErrorAlertPhone *string `json:"ErrorAlertPhone,omitempty" xml:"ErrorAlertPhone,omitempty"`
	// Specifies whether to monitor task status. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	//
	// >
	// *   The default value is **enable**.
	// *   You must specify at least one of the **DelayAlertStatus** and ErrorAlertStatus parameters.
	// *   If the task that you monitor enters an abnormal state, an alert is triggered.
	ErrorAlertStatus *string `json:"ErrorAlertStatus,omitempty" xml:"ErrorAlertStatus,omitempty"`
	OwnerId          *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >  Default value: **Forward**.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s ConfigureSynchronizationJobAlertRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobAlertRequest) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobAlertRequest) SetAccountId(v string) *ConfigureSynchronizationJobAlertRequest {
	s.AccountId = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertRequest) SetDelayAlertPhone(v string) *ConfigureSynchronizationJobAlertRequest {
	s.DelayAlertPhone = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertRequest) SetDelayAlertStatus(v string) *ConfigureSynchronizationJobAlertRequest {
	s.DelayAlertStatus = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertRequest) SetDelayOverSeconds(v string) *ConfigureSynchronizationJobAlertRequest {
	s.DelayOverSeconds = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertRequest) SetErrorAlertPhone(v string) *ConfigureSynchronizationJobAlertRequest {
	s.ErrorAlertPhone = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertRequest) SetErrorAlertStatus(v string) *ConfigureSynchronizationJobAlertRequest {
	s.ErrorAlertStatus = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertRequest) SetOwnerId(v string) *ConfigureSynchronizationJobAlertRequest {
	s.OwnerId = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertRequest) SetRegionId(v string) *ConfigureSynchronizationJobAlertRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertRequest) SetSynchronizationDirection(v string) *ConfigureSynchronizationJobAlertRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertRequest) SetSynchronizationJobId(v string) *ConfigureSynchronizationJobAlertRequest {
	s.SynchronizationJobId = &v
	return s
}

type ConfigureSynchronizationJobAlertResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfigureSynchronizationJobAlertResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobAlertResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobAlertResponseBody) SetErrCode(v string) *ConfigureSynchronizationJobAlertResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertResponseBody) SetErrMessage(v string) *ConfigureSynchronizationJobAlertResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertResponseBody) SetRequestId(v string) *ConfigureSynchronizationJobAlertResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertResponseBody) SetSuccess(v string) *ConfigureSynchronizationJobAlertResponseBody {
	s.Success = &v
	return s
}

type ConfigureSynchronizationJobAlertResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfigureSynchronizationJobAlertResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfigureSynchronizationJobAlertResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobAlertResponse) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobAlertResponse) SetHeaders(v map[string]*string) *ConfigureSynchronizationJobAlertResponse {
	s.Headers = v
	return s
}

func (s *ConfigureSynchronizationJobAlertResponse) SetStatusCode(v int32) *ConfigureSynchronizationJobAlertResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigureSynchronizationJobAlertResponse) SetBody(v *ConfigureSynchronizationJobAlertResponseBody) *ConfigureSynchronizationJobAlertResponse {
	s.Body = v
	return s
}

type ConfigureSynchronizationJobReplicatorCompareRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >
	// *   Default value: **Forward**.
	// *   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
	// Specifies whether to enable image matching. Valid values:
	//
	// *   **true**: enables image matching
	// *   **false**: disables image matching
	SynchronizationReplicatorCompareEnable *bool `json:"SynchronizationReplicatorCompareEnable,omitempty" xml:"SynchronizationReplicatorCompareEnable,omitempty"`
}

func (s ConfigureSynchronizationJobReplicatorCompareRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobReplicatorCompareRequest) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobReplicatorCompareRequest) SetAccountId(v string) *ConfigureSynchronizationJobReplicatorCompareRequest {
	s.AccountId = &v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareRequest) SetClientToken(v string) *ConfigureSynchronizationJobReplicatorCompareRequest {
	s.ClientToken = &v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareRequest) SetOwnerId(v string) *ConfigureSynchronizationJobReplicatorCompareRequest {
	s.OwnerId = &v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareRequest) SetRegionId(v string) *ConfigureSynchronizationJobReplicatorCompareRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareRequest) SetSynchronizationDirection(v string) *ConfigureSynchronizationJobReplicatorCompareRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareRequest) SetSynchronizationJobId(v string) *ConfigureSynchronizationJobReplicatorCompareRequest {
	s.SynchronizationJobId = &v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareRequest) SetSynchronizationReplicatorCompareEnable(v bool) *ConfigureSynchronizationJobReplicatorCompareRequest {
	s.SynchronizationReplicatorCompareEnable = &v
	return s
}

type ConfigureSynchronizationJobReplicatorCompareResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfigureSynchronizationJobReplicatorCompareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobReplicatorCompareResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobReplicatorCompareResponseBody) SetErrCode(v string) *ConfigureSynchronizationJobReplicatorCompareResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareResponseBody) SetErrMessage(v string) *ConfigureSynchronizationJobReplicatorCompareResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareResponseBody) SetRequestId(v string) *ConfigureSynchronizationJobReplicatorCompareResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareResponseBody) SetSuccess(v string) *ConfigureSynchronizationJobReplicatorCompareResponseBody {
	s.Success = &v
	return s
}

type ConfigureSynchronizationJobReplicatorCompareResponse struct {
	Headers    map[string]*string                                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ConfigureSynchronizationJobReplicatorCompareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConfigureSynchronizationJobReplicatorCompareResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigureSynchronizationJobReplicatorCompareResponse) GoString() string {
	return s.String()
}

func (s *ConfigureSynchronizationJobReplicatorCompareResponse) SetHeaders(v map[string]*string) *ConfigureSynchronizationJobReplicatorCompareResponse {
	s.Headers = v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareResponse) SetStatusCode(v int32) *ConfigureSynchronizationJobReplicatorCompareResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigureSynchronizationJobReplicatorCompareResponse) SetBody(v *ConfigureSynchronizationJobReplicatorCompareResponseBody) *ConfigureSynchronizationJobReplicatorCompareResponse {
	s.Body = v
	return s
}

type CountJobByConditionRequest struct {
	// The type of the destination database.
	DestDbType *string `json:"DestDbType,omitempty" xml:"DestDbType,omitempty"`
	// The ID of the DTS task.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The type of the DTS task. Valid values:
	//
	// *   **MIGRATION**: data migration task
	// *   **SYNC**: data synchronization task
	// *   **SUBSCRIBE**: change tracking task
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The content of the query condition, which corresponds to the value of the JobType parameter.
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// One of the query conditions. The ID of the region. For more information, see [Supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The ID of the region in which the DTS instance resides. For more information, see [Supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the source database.
	SrcDbType *string `json:"SrcDbType,omitempty" xml:"SrcDbType,omitempty"`
	// The status of the DTS task.
	//
	// Valid values for a data migration task:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is in precheck.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **PreCheckPass**: The task passed the precheck.
	// *   **NotConfigured**: The task is not configured.
	// *   **Migrating**: The task is in progress.
	// *   **Suspending**: The task is paused.
	// *   **MigrationFailed**: The task failed to migrate data.
	// *   **Finished**: The task is complete.
	// *   **Retrying**: The task is being retried.
	// *   **Upgrade**: The task is being upgraded.
	// *   **Locked**: The task is locked.
	// *   **Downgrade**: The task is being downgraded.
	//
	// Valid values for a data synchronization task:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is in precheck.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **PreCheckPass**: The task passed the precheck.
	// *   **NotConfigured**: The task is not configured.
	// *   **Initializing**: The task is performing initial synchronization.
	// *   **InitializeFailed**: Initial synchronization failed.
	// *   **Synchronizing**: The task is in progress.
	// *   **Failed**: The task failed to synchronize data.
	// *   **Suspending**: The task is paused.
	// *   **Modifying**: The objects in the task are being modified.
	// *   **Finished**: The task is complete.
	// *   **Retrying**: The task is being retried.
	// *   **Upgrade**: The task is being upgraded.
	// *   **Locked**: The task is locked.
	// *   **Downgrade**: The task is being downgraded.
	//
	// Valid values for a change tracking task:
	//
	// *   **NotConfigured**: The task is not configured.
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is in precheck.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **PreCheckPass**: The task passed the precheck.
	// *   **Starting**: The task is being started.
	// *   **Normal**: The task is running as expected.
	// *   **Retrying**: The task is being retried.
	// *   **Abnormal**: The task is not running as expected.
	// *   **Upgrade**: The task is being upgraded.
	// *   **Locked**: The task is locked.
	// *   **Downgrade**: The task is being downgraded.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The content of the query condition. Valid values:
	//
	// *   **name**: the name of the task
	// *   **rds**: the ID of the destination instance
	// *   **instance**: the ID of the Data Transmission Service (DTS) instance
	// *   **srcRds**: the ID of the source instance
	//
	// > The value of this parameter corresponds to the value of the **JobType** parameter.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CountJobByConditionRequest) String() string {
	return tea.Prettify(s)
}

func (s CountJobByConditionRequest) GoString() string {
	return s.String()
}

func (s *CountJobByConditionRequest) SetDestDbType(v string) *CountJobByConditionRequest {
	s.DestDbType = &v
	return s
}

func (s *CountJobByConditionRequest) SetGroupId(v string) *CountJobByConditionRequest {
	s.GroupId = &v
	return s
}

func (s *CountJobByConditionRequest) SetJobType(v string) *CountJobByConditionRequest {
	s.JobType = &v
	return s
}

func (s *CountJobByConditionRequest) SetParams(v string) *CountJobByConditionRequest {
	s.Params = &v
	return s
}

func (s *CountJobByConditionRequest) SetRegion(v string) *CountJobByConditionRequest {
	s.Region = &v
	return s
}

func (s *CountJobByConditionRequest) SetRegionId(v string) *CountJobByConditionRequest {
	s.RegionId = &v
	return s
}

func (s *CountJobByConditionRequest) SetSrcDbType(v string) *CountJobByConditionRequest {
	s.SrcDbType = &v
	return s
}

func (s *CountJobByConditionRequest) SetStatus(v string) *CountJobByConditionRequest {
	s.Status = &v
	return s
}

func (s *CountJobByConditionRequest) SetType(v string) *CountJobByConditionRequest {
	s.Type = &v
	return s
}

type CountJobByConditionResponseBody struct {
	// The internal error code. This parameter will be removed soon.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the  **%s** variable in the **ErrMessage** parameter.
	//
	// > If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of data synchronization instances that meet the requirements and belong to your Alibaba Cloud account.
	TotalRecordCount *int64 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s CountJobByConditionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CountJobByConditionResponseBody) GoString() string {
	return s.String()
}

func (s *CountJobByConditionResponseBody) SetDynamicCode(v string) *CountJobByConditionResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *CountJobByConditionResponseBody) SetDynamicMessage(v string) *CountJobByConditionResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *CountJobByConditionResponseBody) SetErrCode(v string) *CountJobByConditionResponseBody {
	s.ErrCode = &v
	return s
}

func (s *CountJobByConditionResponseBody) SetErrMessage(v string) *CountJobByConditionResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *CountJobByConditionResponseBody) SetHttpStatusCode(v int32) *CountJobByConditionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CountJobByConditionResponseBody) SetRequestId(v string) *CountJobByConditionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CountJobByConditionResponseBody) SetSuccess(v bool) *CountJobByConditionResponseBody {
	s.Success = &v
	return s
}

func (s *CountJobByConditionResponseBody) SetTotalRecordCount(v int64) *CountJobByConditionResponseBody {
	s.TotalRecordCount = &v
	return s
}

type CountJobByConditionResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CountJobByConditionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CountJobByConditionResponse) String() string {
	return tea.Prettify(s)
}

func (s CountJobByConditionResponse) GoString() string {
	return s.String()
}

func (s *CountJobByConditionResponse) SetHeaders(v map[string]*string) *CountJobByConditionResponse {
	s.Headers = v
	return s
}

func (s *CountJobByConditionResponse) SetStatusCode(v int32) *CountJobByConditionResponse {
	s.StatusCode = &v
	return s
}

func (s *CountJobByConditionResponse) SetBody(v *CountJobByConditionResponseBody) *CountJobByConditionResponse {
	s.Body = v
	return s
}

type CreateConsumerChannelRequest struct {
	// The name of the consumer group. The name can be up to 128 characters in length. We recommend that you use an informative name for easy identification.
	ConsumerGroupName *string `json:"ConsumerGroupName,omitempty" xml:"ConsumerGroupName,omitempty"`
	// The password of the consumer group.
	//
	// *   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
	// *   A password must be 8 to 32 characters in length.
	ConsumerGroupPassword *string `json:"ConsumerGroupPassword,omitempty" xml:"ConsumerGroupPassword,omitempty"`
	// The username of the consumer group.
	//
	// *   A username must contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (\_).
	// *   A username cannot exceed 16 characters in length.
	ConsumerGroupUserName *string `json:"ConsumerGroupUserName,omitempty" xml:"ConsumerGroupUserName,omitempty"`
	// The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	//
	// >  You must specify at least one of the **DtsInstanceId** and **DtsJobId**. parameters.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	//
	// >  You must specify at least one of the **DtsInstanceId** and **DtsJobId**. parameters.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateConsumerChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerChannelRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumerChannelRequest) SetConsumerGroupName(v string) *CreateConsumerChannelRequest {
	s.ConsumerGroupName = &v
	return s
}

func (s *CreateConsumerChannelRequest) SetConsumerGroupPassword(v string) *CreateConsumerChannelRequest {
	s.ConsumerGroupPassword = &v
	return s
}

func (s *CreateConsumerChannelRequest) SetConsumerGroupUserName(v string) *CreateConsumerChannelRequest {
	s.ConsumerGroupUserName = &v
	return s
}

func (s *CreateConsumerChannelRequest) SetDtsInstanceId(v string) *CreateConsumerChannelRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *CreateConsumerChannelRequest) SetDtsJobId(v string) *CreateConsumerChannelRequest {
	s.DtsJobId = &v
	return s
}

func (s *CreateConsumerChannelRequest) SetRegionId(v string) *CreateConsumerChannelRequest {
	s.RegionId = &v
	return s
}

type CreateConsumerChannelResponseBody struct {
	// The ID of the consumer group. You can specify this parameter on a downstream client when you consume tracked data.
	ConsumerGroupID *string `json:"ConsumerGroupID,omitempty" xml:"ConsumerGroupID,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateConsumerChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerChannelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateConsumerChannelResponseBody) SetConsumerGroupID(v string) *CreateConsumerChannelResponseBody {
	s.ConsumerGroupID = &v
	return s
}

func (s *CreateConsumerChannelResponseBody) SetErrCode(v string) *CreateConsumerChannelResponseBody {
	s.ErrCode = &v
	return s
}

func (s *CreateConsumerChannelResponseBody) SetErrMessage(v string) *CreateConsumerChannelResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *CreateConsumerChannelResponseBody) SetHttpStatusCode(v string) *CreateConsumerChannelResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateConsumerChannelResponseBody) SetRequestId(v string) *CreateConsumerChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateConsumerChannelResponseBody) SetSuccess(v string) *CreateConsumerChannelResponseBody {
	s.Success = &v
	return s
}

type CreateConsumerChannelResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateConsumerChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateConsumerChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerChannelResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumerChannelResponse) SetHeaders(v map[string]*string) *CreateConsumerChannelResponse {
	s.Headers = v
	return s
}

func (s *CreateConsumerChannelResponse) SetStatusCode(v int32) *CreateConsumerChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateConsumerChannelResponse) SetBody(v *CreateConsumerChannelResponseBody) *CreateConsumerChannelResponse {
	s.Body = v
	return s
}

type CreateConsumerGroupRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The name of the consumer group. The name cannot exceed 128 characters in length. We recommend that you use an informative name for easy identification.
	ConsumerGroupName *string `json:"ConsumerGroupName,omitempty" xml:"ConsumerGroupName,omitempty"`
	// The password that corresponds to the username of the consumer group.
	//
	// *   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
	// *   A password must be 8 to 32 characters in length.
	ConsumerGroupPassword *string `json:"ConsumerGroupPassword,omitempty" xml:"ConsumerGroupPassword,omitempty"`
	// The username of the consumer group.
	//
	// *   A username must contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (\_).
	// *   A username cannot exceed 16 characters in length.
	ConsumerGroupUserName *string `json:"ConsumerGroupUserName,omitempty" xml:"ConsumerGroupUserName,omitempty"`
	OwnerId               *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
}

func (s CreateConsumerGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupRequest) SetAccountId(v string) *CreateConsumerGroupRequest {
	s.AccountId = &v
	return s
}

func (s *CreateConsumerGroupRequest) SetConsumerGroupName(v string) *CreateConsumerGroupRequest {
	s.ConsumerGroupName = &v
	return s
}

func (s *CreateConsumerGroupRequest) SetConsumerGroupPassword(v string) *CreateConsumerGroupRequest {
	s.ConsumerGroupPassword = &v
	return s
}

func (s *CreateConsumerGroupRequest) SetConsumerGroupUserName(v string) *CreateConsumerGroupRequest {
	s.ConsumerGroupUserName = &v
	return s
}

func (s *CreateConsumerGroupRequest) SetOwnerId(v string) *CreateConsumerGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateConsumerGroupRequest) SetRegionId(v string) *CreateConsumerGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateConsumerGroupRequest) SetSubscriptionInstanceId(v string) *CreateConsumerGroupRequest {
	s.SubscriptionInstanceId = &v
	return s
}

type CreateConsumerGroupResponseBody struct {
	// The ID of the consumer group.
	ConsumerGroupID *string `json:"ConsumerGroupID,omitempty" xml:"ConsumerGroupID,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateConsumerGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupResponseBody) SetConsumerGroupID(v string) *CreateConsumerGroupResponseBody {
	s.ConsumerGroupID = &v
	return s
}

func (s *CreateConsumerGroupResponseBody) SetErrCode(v string) *CreateConsumerGroupResponseBody {
	s.ErrCode = &v
	return s
}

func (s *CreateConsumerGroupResponseBody) SetErrMessage(v string) *CreateConsumerGroupResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *CreateConsumerGroupResponseBody) SetRequestId(v string) *CreateConsumerGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateConsumerGroupResponseBody) SetSuccess(v string) *CreateConsumerGroupResponseBody {
	s.Success = &v
	return s
}

type CreateConsumerGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateConsumerGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateConsumerGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsumerGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateConsumerGroupResponse) SetHeaders(v map[string]*string) *CreateConsumerGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateConsumerGroupResponse) SetStatusCode(v int32) *CreateConsumerGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateConsumerGroupResponse) SetBody(v *CreateConsumerGroupResponseBody) *CreateConsumerGroupResponse {
	s.Body = v
	return s
}

type CreateDedicatedClusterMonitorRuleRequest struct {
	// The alert threshold for CPU utilization. Unit: percentage.
	CpuAlarmThreshold *int64 `json:"CpuAlarmThreshold,omitempty" xml:"CpuAlarmThreshold,omitempty"`
	// The ID of the cluster.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The alert threshold for disk usage. Unit: percentage.
	DiskAlarmThreshold *int64 `json:"DiskAlarmThreshold,omitempty" xml:"DiskAlarmThreshold,omitempty"`
	// The alert threshold for DTS Unit (DU) usage. Unit: percentage.
	DuAlarmThreshold *int64 `json:"DuAlarmThreshold,omitempty" xml:"DuAlarmThreshold,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The alert threshold for memory usage. Unit: percentage.
	MemAlarmThreshold *int64 `json:"MemAlarmThreshold,omitempty" xml:"MemAlarmThreshold,omitempty"`
	// Specifies whether to enable the alert feature. Valid values:
	//
	// *   **1**: enables the alert feature.
	// *   **0**: disables the alert feature.
	NoticeSwitch *int64  `json:"NoticeSwitch,omitempty" xml:"NoticeSwitch,omitempty"`
	OwnerId      *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The mobile phone number to which alerts are sent. Separate multiple mobile phone numbers with commas (,).
	Phones *string `json:"Phones,omitempty" xml:"Phones,omitempty"`
	// The ID of the region in which the Data Transmission Service (DTS) instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateDedicatedClusterMonitorRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedClusterMonitorRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateDedicatedClusterMonitorRuleRequest) SetCpuAlarmThreshold(v int64) *CreateDedicatedClusterMonitorRuleRequest {
	s.CpuAlarmThreshold = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleRequest) SetDedicatedClusterId(v string) *CreateDedicatedClusterMonitorRuleRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleRequest) SetDiskAlarmThreshold(v int64) *CreateDedicatedClusterMonitorRuleRequest {
	s.DiskAlarmThreshold = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleRequest) SetDuAlarmThreshold(v int64) *CreateDedicatedClusterMonitorRuleRequest {
	s.DuAlarmThreshold = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleRequest) SetInstanceId(v string) *CreateDedicatedClusterMonitorRuleRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleRequest) SetMemAlarmThreshold(v int64) *CreateDedicatedClusterMonitorRuleRequest {
	s.MemAlarmThreshold = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleRequest) SetNoticeSwitch(v int64) *CreateDedicatedClusterMonitorRuleRequest {
	s.NoticeSwitch = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleRequest) SetOwnerId(v string) *CreateDedicatedClusterMonitorRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleRequest) SetPhones(v string) *CreateDedicatedClusterMonitorRuleRequest {
	s.Phones = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleRequest) SetRegionId(v string) *CreateDedicatedClusterMonitorRuleRequest {
	s.RegionId = &v
	return s
}

type CreateDedicatedClusterMonitorRuleResponseBody struct {
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDedicatedClusterMonitorRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedClusterMonitorRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDedicatedClusterMonitorRuleResponseBody) SetErrCode(v string) *CreateDedicatedClusterMonitorRuleResponseBody {
	s.ErrCode = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleResponseBody) SetErrMessage(v string) *CreateDedicatedClusterMonitorRuleResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleResponseBody) SetHttpStatusCode(v string) *CreateDedicatedClusterMonitorRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleResponseBody) SetRequestId(v string) *CreateDedicatedClusterMonitorRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleResponseBody) SetSuccess(v string) *CreateDedicatedClusterMonitorRuleResponseBody {
	s.Success = &v
	return s
}

type CreateDedicatedClusterMonitorRuleResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDedicatedClusterMonitorRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDedicatedClusterMonitorRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDedicatedClusterMonitorRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateDedicatedClusterMonitorRuleResponse) SetHeaders(v map[string]*string) *CreateDedicatedClusterMonitorRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleResponse) SetStatusCode(v int32) *CreateDedicatedClusterMonitorRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDedicatedClusterMonitorRuleResponse) SetBody(v *CreateDedicatedClusterMonitorRuleResponseBody) *CreateDedicatedClusterMonitorRuleResponse {
	s.Body = v
	return s
}

type CreateDtsInstanceRequest struct {
	// Specifies whether to automatically renew the DTS instance when it expires. Valid values:
	//
	// *   **false**: does not automatically renew the DTS instance when it expires. This is the default value.
	// *   **true**: automatically renews the DTS instance when it expires.
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// Specifies whether to automatically start the task after the DTS instance is purchased. Valid values:
	//
	// *   **false**: does not automatically start the task after the DTS instance is purchased. This is the default value.
	// *   **true**: automatically starts the task after the DTS instance is purchased.
	AutoStart *bool `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	// The specifications of the extract, transform, and load (ETL) instance. The unit is compute unit (CU). One CU is equal to 1 vCPU and 4 GB of memory. The value of this parameter must be an integer greater than or equal to 2.
	ComputeUnit *int32 `json:"ComputeUnit,omitempty" xml:"ComputeUnit,omitempty"`
	// The number of private custom ApsaraDB RDS instances in a PolarDB-X instance. Default value: **1**.
	//
	// >  You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **drds**.
	DatabaseCount *int32 `json:"DatabaseCount,omitempty" xml:"DatabaseCount,omitempty"`
	// The database engine of the destination instance.
	//
	// *   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
	// *   **PolarDB**: PolarDB for MySQL cluster
	// *   **polardb_o**: PolarDB for Oracle cluster
	// *   **polardb_pg**: PolarDB for PostgreSQL cluster
	// *   **Redis**: ApsaraDB for Redis instance or self-managed Redis database
	// *   **DRDS**: PolarDB-X 1.0 or PolarDB-X 2.0 instance
	// *   **PostgreSQL**: self-managed PostgreSQL database
	// *   **odps**: MaxCompute project
	// *   **oracle**: self-managed Oracle database
	// *   **mongodb**: ApsaraDB for MongoDB instance or self-managed MongoDB database
	// *   **tidb**: TiDB database
	// *   **ADS**: AnalyticDB for MySQL V2.0 cluster
	// *   **ADB30**: AnalyticDB for MySQL V3.0 cluster
	// *   **Greenplum**: AnalyticDB for PostgreSQL instance
	// *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
	// *   **kafka**: Message Queue for Apache Kafka instance or self-managed Kafka cluster
	// *   **DataHub**: DataHub project
	// *   **DB2**: self-managed Db2 for LUW database
	// *   **as400**: AS/400
	// *   **Tablestore**: Tablestore instance
	//
	// >
	// *   The default value is **MySQL**.
	// *   For more information about the supported source and destination databases, see [Overview of data synchronization scenarios](~~130744~~) and [Overview of data migration scenarios](~~26618~~).
	// *   You must specify one of this parameter and the **JobId** parameter.
	DestinationEndpointEngineName *string `json:"DestinationEndpointEngineName,omitempty" xml:"DestinationEndpointEngineName,omitempty"`
	// The ID of the region in which the destination instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  You must specify one of this parameter and the **JobId** parameter.
	DestinationRegion *string `json:"DestinationRegion,omitempty" xml:"DestinationRegion,omitempty"`
	// The number of DTS units (DUs) that are assigned to a DTS task that is run on a DTS dedicated cluster. Valid values: **1** to **100**.
	//
	// >
	// *   The value of this parameter must be within the range of the number of DUs available for the DTS dedicated cluster.
	Du *int32 `json:"Du,omitempty" xml:"Du,omitempty"`
	// The billing type for a change tracking instance. Valid values: ONLY_CONFIGURATION_FEE and CONFIGURATION_FEE_AND_DATA_FEE. ONLY_CONFIGURATION_FEE: charges only configuration fees. CONFIGURATION_FEE_AND_DATA_FEE: charges configuration fees and data traffic fees.
	FeeType *string `json:"FeeType,omitempty" xml:"FeeType,omitempty"`
	// The instance class.
	//
	// *   DTS supports the following instance classes for a data migration instance: **xxlarge**, **xlarge**, **large**, **medium**, and **small**.
	// *   DTS supports the following instance classes for a data synchronization instance: **large**, **medium**, **small**, and **micro**.
	//
	// >  For more information about the test performance of each instance class, see [Specifications of data migration instances](~~26606~~) and [Specifications of data synchronization instances](~~26605~~).
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// The ID of the task. You can call the **ConfigureDtsJob** operation to obtain the task ID from the **DtsJobId** parameter.
	//
	// >  If this parameter is specified, you do not need to specify the **SourceRegion**, **DestinationRegion**, **Type**, **SourceEndpointEngineName**, or **DestinationEndpointEngineName** parameter. Even if these parameters are specified, the value of the **JobId** parameter takes precedence.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The billing method. Valid values:
	//
	// *   **PrePaid**: subscription
	// *   **PostPaid**: pay-as-you-go
	//
	// >  This parameter must be specified.
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The unit of the subscription duration. Valid values: **Year** and **Month**.
	//
	// >  You must specify this parameter only if the **PayType** parameter is set to **PrePaid**.
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The number of DTS instances that you want to purchase.
	//
	// >  Only a single instance can be purchased each time.
	Quantity *int32 `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	// The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The database engine of the source instance.
	//
	// *   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
	// *   **PolarDB**: PolarDB for MySQL cluster
	// *   **polardb_o**: PolarDB for Oracle cluster
	// *   **polardb_pg**: PolarDB for PostgreSQL cluster
	// *   **Redis**: ApsaraDB for Redis instance or self-managed Redis database
	// *   **DRDS**: PolarDB-X 1.0 or PolarDB-X 2.0 instance
	// *   **PostgreSQL**: self-managed PostgreSQL database
	// *   **odps**: MaxCompute project
	// *   **oracle**: self-managed Oracle database
	// *   **mongodb**: ApsaraDB for MongoDB instance or self-managed MongoDB database
	// *   **tidb**: TiDB database
	// *   **ADS**: AnalyticDB for MySQL V2.0 cluster
	// *   **ADB30**: AnalyticDB for MySQL V3.0 cluster
	// *   **Greenplum**: AnalyticDB for PostgreSQL instance
	// *   **MSSQL**: ApsaraDB RDS for SQL Server instance or self-managed SQL Server database
	// *   **kafka**: Message Queue for Apache Kafka instance or self-managed Kafka cluster
	// *   **DataHub**: DataHub project
	// *   **DB2**: self-managed Db2 for LUW database
	// *   **as400**: AS/400
	// *   **Tablestore**: Tablestore instance
	//
	// >
	// *   The default value is **MySQL**.
	// *   For more information about the supported source and destination databases, see [Overview of data synchronization scenarios](~~130744~~) and [Overview of data migration scenarios](~~26618~~).
	// *   You must specify one of this parameter and the **JobId** parameter.
	SourceEndpointEngineName *string `json:"SourceEndpointEngineName,omitempty" xml:"SourceEndpointEngineName,omitempty"`
	// The ID of the region in which the source instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  You must specify one of this parameter and the **JobId** parameter.
	SourceRegion *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	// The synchronization topology. Valid values:
	//
	// *   **oneway**: one-way synchronization. This is the default value.
	// *   **bidirectional**: two-way synchronization.
	SyncArchitecture *string `json:"SyncArchitecture,omitempty" xml:"SyncArchitecture,omitempty"`
	// The type of the DTS instance. Valid values:
	//
	// *   **MIGRATION**: data migration instance
	//
	// *   **SYNC**: data synchronization instance
	//
	// *   **SUBSCRIBE**: change tracking instance
	//
	// > You must specify one of this parameter and the **JobId** parameter.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The subscription duration.
	//
	// *   Valid values if the **Period** parameter is set to **Month**: 1, 2, 3, 4, 5, 6, 7, 8, and 9.
	//
	// *   Valid values if the **Period** parameter is set to **Year**: 1, 2, 3, and 5.
	//
	// > *   You must specify this parameter only if the **PayType** parameter is set to **PrePaid**.
	//    *   You can set the **Period** parameter to specify the unit of the subscription duration.
	UsedTime *int32 `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
}

func (s CreateDtsInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDtsInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateDtsInstanceRequest) SetAutoPay(v bool) *CreateDtsInstanceRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetAutoStart(v bool) *CreateDtsInstanceRequest {
	s.AutoStart = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetComputeUnit(v int32) *CreateDtsInstanceRequest {
	s.ComputeUnit = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetDatabaseCount(v int32) *CreateDtsInstanceRequest {
	s.DatabaseCount = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetDestinationEndpointEngineName(v string) *CreateDtsInstanceRequest {
	s.DestinationEndpointEngineName = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetDestinationRegion(v string) *CreateDtsInstanceRequest {
	s.DestinationRegion = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetDu(v int32) *CreateDtsInstanceRequest {
	s.Du = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetFeeType(v string) *CreateDtsInstanceRequest {
	s.FeeType = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetInstanceClass(v string) *CreateDtsInstanceRequest {
	s.InstanceClass = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetJobId(v string) *CreateDtsInstanceRequest {
	s.JobId = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetPayType(v string) *CreateDtsInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetPeriod(v string) *CreateDtsInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetQuantity(v int32) *CreateDtsInstanceRequest {
	s.Quantity = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetRegionId(v string) *CreateDtsInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetResourceGroupId(v string) *CreateDtsInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetSourceEndpointEngineName(v string) *CreateDtsInstanceRequest {
	s.SourceEndpointEngineName = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetSourceRegion(v string) *CreateDtsInstanceRequest {
	s.SourceRegion = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetSyncArchitecture(v string) *CreateDtsInstanceRequest {
	s.SyncArchitecture = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetType(v string) *CreateDtsInstanceRequest {
	s.Type = &v
	return s
}

func (s *CreateDtsInstanceRequest) SetUsedTime(v int32) *CreateDtsInstanceRequest {
	s.UsedTime = &v
	return s
}

type CreateDtsInstanceResponseBody struct {
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the DTS instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the task.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDtsInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDtsInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDtsInstanceResponseBody) SetErrCode(v string) *CreateDtsInstanceResponseBody {
	s.ErrCode = &v
	return s
}

func (s *CreateDtsInstanceResponseBody) SetErrMessage(v string) *CreateDtsInstanceResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *CreateDtsInstanceResponseBody) SetInstanceId(v string) *CreateDtsInstanceResponseBody {
	s.InstanceId = &v
	return s
}

func (s *CreateDtsInstanceResponseBody) SetJobId(v string) *CreateDtsInstanceResponseBody {
	s.JobId = &v
	return s
}

func (s *CreateDtsInstanceResponseBody) SetRequestId(v string) *CreateDtsInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDtsInstanceResponseBody) SetSuccess(v string) *CreateDtsInstanceResponseBody {
	s.Success = &v
	return s
}

type CreateDtsInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDtsInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDtsInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDtsInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateDtsInstanceResponse) SetHeaders(v map[string]*string) *CreateDtsInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateDtsInstanceResponse) SetStatusCode(v int32) *CreateDtsInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDtsInstanceResponse) SetBody(v *CreateDtsInstanceResponseBody) *CreateDtsInstanceResponse {
	s.Body = v
	return s
}

type CreateJobMonitorRuleRequest struct {
	// The threshold for triggering latency alerts.
	//
	// *   If the **Type** parameter is set to **delay**, the threshold must be an integer. You can set the threshold based on your requirements. To prevent jitters caused by network and database overloads, we recommend that you set the threshold to more than 10 seconds. Unit: seconds.
	// *   If the **Type** parameter is set to **full_timeout**, the threshold must be an integer. Unit: hours.
	//
	// >  This parameter is required if the **Type** parameter is set to **delay** or **full_timeout** and the **State** parameter is set to **Y**.
	DelayRuleTime *int64 `json:"DelayRuleTime,omitempty" xml:"DelayRuleTime,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The alert threshold.
	NoticeValue *int32 `json:"NoticeValue,omitempty" xml:"NoticeValue,omitempty"`
	// The statistical period of the incremental data verification task. Unit: minutes.
	//
	// >  Valid values: 1, 3, 5, and 30.
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The mobile numbers that receive alert notifications. Separate multiple mobile numbers with commas (,).
	//
	// >
	// *   This parameter is available only for users of the China site (aliyun.com). Only mobile numbers in the Chinese mainland are supported. You can specify up to 10 mobile numbers.
	// *   Users of the international site (alibabacloud.com) cannot receive alerts by using mobile phones, but can [configure alert rules for DTS tasks in the CloudMonitor console](~~175876~~).
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to enable the alert rule. Valid values:
	//
	// *   **Y**: enables the alert rule.
	// *   **N**: disables the alert rule.
	//
	// Default value: **Y**.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The number of statistical periods of the incremental data verification task.
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
	// The metric that is used to monitor the task. Valid values:
	//
	// *   **delay**: the **Latency** metric.
	// *   **error**: the **Status** metric.
	// *   **full_timeout**: the **Full Timeout** metric.
	//
	// Default value: **error**. You must manually set this value.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateJobMonitorRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJobMonitorRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateJobMonitorRuleRequest) SetDelayRuleTime(v int64) *CreateJobMonitorRuleRequest {
	s.DelayRuleTime = &v
	return s
}

func (s *CreateJobMonitorRuleRequest) SetDtsJobId(v string) *CreateJobMonitorRuleRequest {
	s.DtsJobId = &v
	return s
}

func (s *CreateJobMonitorRuleRequest) SetNoticeValue(v int32) *CreateJobMonitorRuleRequest {
	s.NoticeValue = &v
	return s
}

func (s *CreateJobMonitorRuleRequest) SetPeriod(v int32) *CreateJobMonitorRuleRequest {
	s.Period = &v
	return s
}

func (s *CreateJobMonitorRuleRequest) SetPhone(v string) *CreateJobMonitorRuleRequest {
	s.Phone = &v
	return s
}

func (s *CreateJobMonitorRuleRequest) SetRegionId(v string) *CreateJobMonitorRuleRequest {
	s.RegionId = &v
	return s
}

func (s *CreateJobMonitorRuleRequest) SetState(v string) *CreateJobMonitorRuleRequest {
	s.State = &v
	return s
}

func (s *CreateJobMonitorRuleRequest) SetTimes(v int32) *CreateJobMonitorRuleRequest {
	s.Times = &v
	return s
}

func (s *CreateJobMonitorRuleRequest) SetType(v string) *CreateJobMonitorRuleRequest {
	s.Type = &v
	return s
}

type CreateJobMonitorRuleResponseBody struct {
	// The error code. This parameter will be removed in the future.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The dynamic part in the error message. The value of this parameter is used to replace the **%s** variable in the value of the **ErrMessage** parameter.
	//
	// >  For example, if the specified **DtsJobId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **ErrMessage** and **DtsJobId** is returned for **DynamicMessage**.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateJobMonitorRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateJobMonitorRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateJobMonitorRuleResponseBody) SetCode(v string) *CreateJobMonitorRuleResponseBody {
	s.Code = &v
	return s
}

func (s *CreateJobMonitorRuleResponseBody) SetDtsJobId(v string) *CreateJobMonitorRuleResponseBody {
	s.DtsJobId = &v
	return s
}

func (s *CreateJobMonitorRuleResponseBody) SetDynamicMessage(v string) *CreateJobMonitorRuleResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *CreateJobMonitorRuleResponseBody) SetErrCode(v string) *CreateJobMonitorRuleResponseBody {
	s.ErrCode = &v
	return s
}

func (s *CreateJobMonitorRuleResponseBody) SetErrMessage(v string) *CreateJobMonitorRuleResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *CreateJobMonitorRuleResponseBody) SetHttpStatusCode(v int32) *CreateJobMonitorRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *CreateJobMonitorRuleResponseBody) SetRequestId(v string) *CreateJobMonitorRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateJobMonitorRuleResponseBody) SetSuccess(v bool) *CreateJobMonitorRuleResponseBody {
	s.Success = &v
	return s
}

type CreateJobMonitorRuleResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateJobMonitorRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateJobMonitorRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJobMonitorRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateJobMonitorRuleResponse) SetHeaders(v map[string]*string) *CreateJobMonitorRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateJobMonitorRuleResponse) SetStatusCode(v int32) *CreateJobMonitorRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateJobMonitorRuleResponse) SetBody(v *CreateJobMonitorRuleResponseBody) *CreateJobMonitorRuleResponse {
	s.Body = v
	return s
}

type CreateMigrationJobRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**.
	//
	// >
	// *   For more information about the test performance of each specification, see [Specifications of data migration instances](~~26606~~).
	// *   For more information about the pricing of data migration instances, see [Pricing](~~117780~~).
	MigrationJobClass *string `json:"MigrationJobClass,omitempty" xml:"MigrationJobClass,omitempty"`
	OwnerId           *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region where the data migration instance resides. The region ID of the data migration instance is the same as that of the destination database. For more information, see [List of supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The ID of the region where the data migration instance resides. You do not need to specify this parameter because this parameter will be removed in the future.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateMigrationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationJobRequest) GoString() string {
	return s.String()
}

func (s *CreateMigrationJobRequest) SetAccountId(v string) *CreateMigrationJobRequest {
	s.AccountId = &v
	return s
}

func (s *CreateMigrationJobRequest) SetClientToken(v string) *CreateMigrationJobRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateMigrationJobRequest) SetMigrationJobClass(v string) *CreateMigrationJobRequest {
	s.MigrationJobClass = &v
	return s
}

func (s *CreateMigrationJobRequest) SetOwnerId(v string) *CreateMigrationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateMigrationJobRequest) SetRegion(v string) *CreateMigrationJobRequest {
	s.Region = &v
	return s
}

func (s *CreateMigrationJobRequest) SetRegionId(v string) *CreateMigrationJobRequest {
	s.RegionId = &v
	return s
}

type CreateMigrationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the data migration instance.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMigrationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMigrationJobResponseBody) SetErrCode(v string) *CreateMigrationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *CreateMigrationJobResponseBody) SetErrMessage(v string) *CreateMigrationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *CreateMigrationJobResponseBody) SetMigrationJobId(v string) *CreateMigrationJobResponseBody {
	s.MigrationJobId = &v
	return s
}

func (s *CreateMigrationJobResponseBody) SetRequestId(v string) *CreateMigrationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMigrationJobResponseBody) SetSuccess(v string) *CreateMigrationJobResponseBody {
	s.Success = &v
	return s
}

type CreateMigrationJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateMigrationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMigrationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMigrationJobResponse) GoString() string {
	return s.String()
}

func (s *CreateMigrationJobResponse) SetHeaders(v map[string]*string) *CreateMigrationJobResponse {
	s.Headers = v
	return s
}

func (s *CreateMigrationJobResponse) SetStatusCode(v int32) *CreateMigrationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMigrationJobResponse) SetBody(v *CreateMigrationJobResponseBody) *CreateMigrationJobResponse {
	s.Body = v
	return s
}

type CreateSubscriptionInstanceRequest struct {
	SourceEndpoint *CreateSubscriptionInstanceRequestSourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The billing method of the change tracking instance.
	//
	// *   **Postpaid**: pay-as-you-go
	// *   **Prepaid**: subscription
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The billing cycle of the subscription instance. Valid values:
	//
	// *   **Year**
	// *   **Month**
	//
	// >  You must specify this parameter only if you set the PayType parameter to **Prepaid**.
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The region ID of the change tracking instance. The region ID is the same as that of the source instance. For more information, see [List of supported regions](~~141033~~).
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The subscription length.
	//
	// *   If the billing cycle is **Year**, the value range is **1 to 5**.
	// *   If the billing cycle is **Month**, the value range is **1 to 60**.
	//
	// >  You must specify this parameter only if you set the PayType parameter to **Prepaid**.
	UsedTime *int32 `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
}

func (s CreateSubscriptionInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscriptionInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateSubscriptionInstanceRequest) SetSourceEndpoint(v *CreateSubscriptionInstanceRequestSourceEndpoint) *CreateSubscriptionInstanceRequest {
	s.SourceEndpoint = v
	return s
}

func (s *CreateSubscriptionInstanceRequest) SetAccountId(v string) *CreateSubscriptionInstanceRequest {
	s.AccountId = &v
	return s
}

func (s *CreateSubscriptionInstanceRequest) SetClientToken(v string) *CreateSubscriptionInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateSubscriptionInstanceRequest) SetOwnerId(v string) *CreateSubscriptionInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSubscriptionInstanceRequest) SetPayType(v string) *CreateSubscriptionInstanceRequest {
	s.PayType = &v
	return s
}

func (s *CreateSubscriptionInstanceRequest) SetPeriod(v string) *CreateSubscriptionInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateSubscriptionInstanceRequest) SetRegion(v string) *CreateSubscriptionInstanceRequest {
	s.Region = &v
	return s
}

func (s *CreateSubscriptionInstanceRequest) SetRegionId(v string) *CreateSubscriptionInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSubscriptionInstanceRequest) SetUsedTime(v int32) *CreateSubscriptionInstanceRequest {
	s.UsedTime = &v
	return s
}

type CreateSubscriptionInstanceRequestSourceEndpoint struct {
	// The type of the source instance. Valid values: **MySQL**, **PolarDB**, **DRDS**, and **Oracle**.
	//
	// >  Default value: **MySQL**.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s CreateSubscriptionInstanceRequestSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscriptionInstanceRequestSourceEndpoint) GoString() string {
	return s.String()
}

func (s *CreateSubscriptionInstanceRequestSourceEndpoint) SetInstanceType(v string) *CreateSubscriptionInstanceRequestSourceEndpoint {
	s.InstanceType = &v
	return s
}

type CreateSubscriptionInstanceResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the change tracking instance.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSubscriptionInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscriptionInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSubscriptionInstanceResponseBody) SetErrCode(v string) *CreateSubscriptionInstanceResponseBody {
	s.ErrCode = &v
	return s
}

func (s *CreateSubscriptionInstanceResponseBody) SetErrMessage(v string) *CreateSubscriptionInstanceResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *CreateSubscriptionInstanceResponseBody) SetRequestId(v string) *CreateSubscriptionInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSubscriptionInstanceResponseBody) SetSubscriptionInstanceId(v string) *CreateSubscriptionInstanceResponseBody {
	s.SubscriptionInstanceId = &v
	return s
}

func (s *CreateSubscriptionInstanceResponseBody) SetSuccess(v string) *CreateSubscriptionInstanceResponseBody {
	s.Success = &v
	return s
}

type CreateSubscriptionInstanceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSubscriptionInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSubscriptionInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscriptionInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateSubscriptionInstanceResponse) SetHeaders(v map[string]*string) *CreateSubscriptionInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateSubscriptionInstanceResponse) SetStatusCode(v int32) *CreateSubscriptionInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSubscriptionInstanceResponse) SetBody(v *CreateSubscriptionInstanceResponseBody) *CreateSubscriptionInstanceResponse {
	s.Body = v
	return s
}

type CreateSynchronizationJobRequest struct {
	DestinationEndpoint *CreateSynchronizationJobRequestDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	SourceEndpoint      *CreateSynchronizationJobRequestSourceEndpoint      `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// If you set the **SourceEndpoint.InstanceType** parameter to **DRDS**, you must specify the DBInstanceCount parameter. This parameter specifies the number of private RDS instances attached to the source PolarDB-X instance. Default value: **1**.
	DBInstanceCount *int32 `json:"DBInstanceCount,omitempty" xml:"DBInstanceCount,omitempty"`
	// The ID of the region where the destination database resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  If the **SourceRegion** parameter is set to the China (Hong Kong) region or a region outside the Chinese mainland, you must set the DestRegion parameter to the same region ID.
	DestRegion *string `json:"DestRegion,omitempty" xml:"DestRegion,omitempty"`
	OwnerId    *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The billing method of the data synchronization instance.
	//
	// *   **PrePaid**: subscription
	// *   **PostPaid** (default value): pay-as-you-go
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The billing cycle of the subscription instance. Valid values:
	//
	// *   **Year**
	// *   **Month**
	//
	// >  You must specify this parameter only if you set the PayType parameter to **PrePaid**.
	Period   *string `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the region where the source database resides. For more information, see [List of supported regions](~~141033~~).
	SourceRegion *string `json:"SourceRegion,omitempty" xml:"SourceRegion,omitempty"`
	// The specification of the data synchronization instance. Valid values: **micro**, **small**, **medium**, and **large**.
	//
	// >  For more information about the test performance of each specification, see [Specifications of data synchronization instances](~~26605~~).
	SynchronizationJobClass *string `json:"SynchronizationJobClass,omitempty" xml:"SynchronizationJobClass,omitempty"`
	// The synchronization topology. Valid values:
	//
	// *   **oneway**: one-way synchronization
	// *   **bidirectional**: two-way synchronization
	//
	// >
	// *   The default value is **oneway**.
	// *   This parameter can be set to **bidirectional** only when the **SourceEndpoint.InstanceType** and **DestinationEndpoint.InstanceType** parameters are set to **MySQL**, **PolarDB**, or **Redis**.
	Topology *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
	// The subscription length.
	//
	// *   If the billing cycle is **Year**, the value range is **1 to 5**.
	// *   If the billing cycle is **Month**, the value range is **1 to 60**.
	//
	// >  You must specify this parameter only if you set the PayType parameter to **PrePaid**.
	UsedTime *int32 `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
	// The network type. Valid value: **Intranet**, which indicates virtual private cloud (VPC).
	NetworkType *string `json:"networkType,omitempty" xml:"networkType,omitempty"`
}

func (s CreateSynchronizationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSynchronizationJobRequest) GoString() string {
	return s.String()
}

func (s *CreateSynchronizationJobRequest) SetDestinationEndpoint(v *CreateSynchronizationJobRequestDestinationEndpoint) *CreateSynchronizationJobRequest {
	s.DestinationEndpoint = v
	return s
}

func (s *CreateSynchronizationJobRequest) SetSourceEndpoint(v *CreateSynchronizationJobRequestSourceEndpoint) *CreateSynchronizationJobRequest {
	s.SourceEndpoint = v
	return s
}

func (s *CreateSynchronizationJobRequest) SetAccountId(v string) *CreateSynchronizationJobRequest {
	s.AccountId = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetClientToken(v string) *CreateSynchronizationJobRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetDBInstanceCount(v int32) *CreateSynchronizationJobRequest {
	s.DBInstanceCount = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetDestRegion(v string) *CreateSynchronizationJobRequest {
	s.DestRegion = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetOwnerId(v string) *CreateSynchronizationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetPayType(v string) *CreateSynchronizationJobRequest {
	s.PayType = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetPeriod(v string) *CreateSynchronizationJobRequest {
	s.Period = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetRegionId(v string) *CreateSynchronizationJobRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetSourceRegion(v string) *CreateSynchronizationJobRequest {
	s.SourceRegion = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetSynchronizationJobClass(v string) *CreateSynchronizationJobRequest {
	s.SynchronizationJobClass = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetTopology(v string) *CreateSynchronizationJobRequest {
	s.Topology = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetUsedTime(v int32) *CreateSynchronizationJobRequest {
	s.UsedTime = &v
	return s
}

func (s *CreateSynchronizationJobRequest) SetNetworkType(v string) *CreateSynchronizationJobRequest {
	s.NetworkType = &v
	return s
}

type CreateSynchronizationJobRequestDestinationEndpoint struct {
	// The instance type of the destination database. Valid values:
	//
	// *   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
	// *   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
	// *   **Redis**: Redis database
	// *   **MaxCompute**: MaxCompute project
	//
	// >
	// *   Default value: **MySQL**.
	// *   For more information about the supported source and destination databases, see [Database types, initial synchronization types, and synchronization topologies](~~130744~~).
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s CreateSynchronizationJobRequestDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s CreateSynchronizationJobRequestDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *CreateSynchronizationJobRequestDestinationEndpoint) SetInstanceType(v string) *CreateSynchronizationJobRequestDestinationEndpoint {
	s.InstanceType = &v
	return s
}

type CreateSynchronizationJobRequestSourceEndpoint struct {
	// The instance type of the source database. Valid values:
	//
	// *   **MySQL**: ApsaraDB RDS for MySQL instance or self-managed MySQL database
	// *   **PolarDB**: PolarDB for MySQL cluster or PolarDB O Edition cluster
	// *   **Redis**: Redis database
	// *   **DRDS**: PolarDB-X instance V1.0
	//
	// >
	// *   Default value: **MySQL**.
	// *   For more information about the supported source and destination databases, see [Database types, initial synchronization types, and synchronization topologies](~~130744~~).
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s CreateSynchronizationJobRequestSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s CreateSynchronizationJobRequestSourceEndpoint) GoString() string {
	return s.String()
}

func (s *CreateSynchronizationJobRequestSourceEndpoint) SetInstanceType(v string) *CreateSynchronizationJobRequestSourceEndpoint {
	s.InstanceType = &v
	return s
}

type CreateSynchronizationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the data synchronization instance.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s CreateSynchronizationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSynchronizationJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSynchronizationJobResponseBody) SetErrCode(v string) *CreateSynchronizationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *CreateSynchronizationJobResponseBody) SetErrMessage(v string) *CreateSynchronizationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *CreateSynchronizationJobResponseBody) SetRequestId(v string) *CreateSynchronizationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSynchronizationJobResponseBody) SetSuccess(v string) *CreateSynchronizationJobResponseBody {
	s.Success = &v
	return s
}

func (s *CreateSynchronizationJobResponseBody) SetSynchronizationJobId(v string) *CreateSynchronizationJobResponseBody {
	s.SynchronizationJobId = &v
	return s
}

type CreateSynchronizationJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateSynchronizationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSynchronizationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSynchronizationJobResponse) GoString() string {
	return s.String()
}

func (s *CreateSynchronizationJobResponse) SetHeaders(v map[string]*string) *CreateSynchronizationJobResponse {
	s.Headers = v
	return s
}

func (s *CreateSynchronizationJobResponse) SetStatusCode(v int32) *CreateSynchronizationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSynchronizationJobResponse) SetBody(v *CreateSynchronizationJobResponseBody) *CreateSynchronizationJobResponse {
	s.Body = v
	return s
}

type DeleteConsumerChannelRequest struct {
	// The ID of the consumer group. You can call the [DescribeConsumerChannel](~~264169~~) operation to query the consumer group ID.
	ConsumerGroupId *string `json:"ConsumerGroupId,omitempty" xml:"ConsumerGroupId,omitempty"`
	// The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	//
	// >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	//
	// >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteConsumerChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerChannelRequest) GoString() string {
	return s.String()
}

func (s *DeleteConsumerChannelRequest) SetConsumerGroupId(v string) *DeleteConsumerChannelRequest {
	s.ConsumerGroupId = &v
	return s
}

func (s *DeleteConsumerChannelRequest) SetDtsInstanceId(v string) *DeleteConsumerChannelRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *DeleteConsumerChannelRequest) SetDtsJobId(v string) *DeleteConsumerChannelRequest {
	s.DtsJobId = &v
	return s
}

func (s *DeleteConsumerChannelRequest) SetRegionId(v string) *DeleteConsumerChannelRequest {
	s.RegionId = &v
	return s
}

type DeleteConsumerChannelResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteConsumerChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerChannelResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteConsumerChannelResponseBody) SetErrCode(v string) *DeleteConsumerChannelResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DeleteConsumerChannelResponseBody) SetErrMessage(v string) *DeleteConsumerChannelResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DeleteConsumerChannelResponseBody) SetHttpStatusCode(v string) *DeleteConsumerChannelResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteConsumerChannelResponseBody) SetRequestId(v string) *DeleteConsumerChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteConsumerChannelResponseBody) SetSuccess(v string) *DeleteConsumerChannelResponseBody {
	s.Success = &v
	return s
}

type DeleteConsumerChannelResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteConsumerChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteConsumerChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerChannelResponse) GoString() string {
	return s.String()
}

func (s *DeleteConsumerChannelResponse) SetHeaders(v map[string]*string) *DeleteConsumerChannelResponse {
	s.Headers = v
	return s
}

func (s *DeleteConsumerChannelResponse) SetStatusCode(v int32) *DeleteConsumerChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteConsumerChannelResponse) SetBody(v *DeleteConsumerChannelResponseBody) *DeleteConsumerChannelResponse {
	s.Body = v
	return s
}

type DeleteConsumerGroupRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The ID of the consumer group. You can call the [DescribeConsumerGroup](~~122886~~) operation to query the consumer group ID.
	ConsumerGroupID *string `json:"ConsumerGroupID,omitempty" xml:"ConsumerGroupID,omitempty"`
	OwnerId         *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the **DescribeSubscriptionInstances** operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
}

func (s DeleteConsumerGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupRequest) SetAccountId(v string) *DeleteConsumerGroupRequest {
	s.AccountId = &v
	return s
}

func (s *DeleteConsumerGroupRequest) SetConsumerGroupID(v string) *DeleteConsumerGroupRequest {
	s.ConsumerGroupID = &v
	return s
}

func (s *DeleteConsumerGroupRequest) SetOwnerId(v string) *DeleteConsumerGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteConsumerGroupRequest) SetRegionId(v string) *DeleteConsumerGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteConsumerGroupRequest) SetSubscriptionInstanceId(v string) *DeleteConsumerGroupRequest {
	s.SubscriptionInstanceId = &v
	return s
}

type DeleteConsumerGroupResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteConsumerGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupResponseBody) SetErrCode(v string) *DeleteConsumerGroupResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DeleteConsumerGroupResponseBody) SetErrMessage(v string) *DeleteConsumerGroupResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DeleteConsumerGroupResponseBody) SetRequestId(v string) *DeleteConsumerGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteConsumerGroupResponseBody) SetSuccess(v string) *DeleteConsumerGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteConsumerGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteConsumerGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteConsumerGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConsumerGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteConsumerGroupResponse) SetHeaders(v map[string]*string) *DeleteConsumerGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteConsumerGroupResponse) SetStatusCode(v int32) *DeleteConsumerGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteConsumerGroupResponse) SetBody(v *DeleteConsumerGroupResponseBody) *DeleteConsumerGroupResponse {
	s.Body = v
	return s
}

type DeleteDtsJobRequest struct {
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	JobType  *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The error code returned if the call failed.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The dynamic error code. This parameter will be removed in the future.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s DeleteDtsJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDtsJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteDtsJobRequest) SetDtsInstanceId(v string) *DeleteDtsJobRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *DeleteDtsJobRequest) SetDtsJobId(v string) *DeleteDtsJobRequest {
	s.DtsJobId = &v
	return s
}

func (s *DeleteDtsJobRequest) SetJobType(v string) *DeleteDtsJobRequest {
	s.JobType = &v
	return s
}

func (s *DeleteDtsJobRequest) SetRegionId(v string) *DeleteDtsJobRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteDtsJobRequest) SetSynchronizationDirection(v string) *DeleteDtsJobRequest {
	s.SynchronizationDirection = &v
	return s
}

type DeleteDtsJobResponseBody struct {
	// The operation that you want to perform. Set the value to **DeleteDtsJob**.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The operation that you want to perform. Set the value to **DeleteDtsJob**.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error message returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The ID of the request.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking instance.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >
	//
	// *   Default value: **Forward**.
	// *   You can set this parameter to **Reverse** to delete the reverse synchronization task only if the topology is two-way synchronization.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the region in which the data migration or synchronization task resides. For more information, see [List of supported regions](~~141033~~).
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDtsJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDtsJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDtsJobResponseBody) SetDynamicCode(v string) *DeleteDtsJobResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DeleteDtsJobResponseBody) SetDynamicMessage(v string) *DeleteDtsJobResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DeleteDtsJobResponseBody) SetErrCode(v string) *DeleteDtsJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DeleteDtsJobResponseBody) SetErrMessage(v string) *DeleteDtsJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DeleteDtsJobResponseBody) SetHttpStatusCode(v int32) *DeleteDtsJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteDtsJobResponseBody) SetRequestId(v string) *DeleteDtsJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDtsJobResponseBody) SetSuccess(v bool) *DeleteDtsJobResponseBody {
	s.Success = &v
	return s
}

type DeleteDtsJobResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteDtsJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDtsJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDtsJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteDtsJobResponse) SetHeaders(v map[string]*string) *DeleteDtsJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteDtsJobResponse) SetStatusCode(v int32) *DeleteDtsJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDtsJobResponse) SetBody(v *DeleteDtsJobResponseBody) *DeleteDtsJobResponse {
	s.Body = v
	return s
}

type DeleteDtsJobsRequest struct {
	// The ID of the data migration, data synchronization, or change tracking task.
	//
	// > *   Separate multiple task IDs with commas (,).
	// > *   You can call the [DescribeDtsJobs](~~209702~~) operation to query task IDs.
	DtsJobIds *string `json:"DtsJobIds,omitempty" xml:"DtsJobIds,omitempty"`
	// The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDtsJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDtsJobsRequest) GoString() string {
	return s.String()
}

func (s *DeleteDtsJobsRequest) SetDtsJobIds(v string) *DeleteDtsJobsRequest {
	s.DtsJobIds = &v
	return s
}

func (s *DeleteDtsJobsRequest) SetRegionId(v string) *DeleteDtsJobsRequest {
	s.RegionId = &v
	return s
}

type DeleteDtsJobsResponseBody struct {
	// The dynamic error code. This parameter will be removed soon.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the \*\*%s\*\* variable in the **ErrMessage** parameter.
	//
	// > If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDtsJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDtsJobsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDtsJobsResponseBody) SetDynamicCode(v string) *DeleteDtsJobsResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DeleteDtsJobsResponseBody) SetDynamicMessage(v string) *DeleteDtsJobsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DeleteDtsJobsResponseBody) SetErrCode(v string) *DeleteDtsJobsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DeleteDtsJobsResponseBody) SetErrMessage(v string) *DeleteDtsJobsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DeleteDtsJobsResponseBody) SetHttpStatusCode(v int32) *DeleteDtsJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteDtsJobsResponseBody) SetRequestId(v string) *DeleteDtsJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDtsJobsResponseBody) SetSuccess(v bool) *DeleteDtsJobsResponseBody {
	s.Success = &v
	return s
}

type DeleteDtsJobsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteDtsJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDtsJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDtsJobsResponse) GoString() string {
	return s.String()
}

func (s *DeleteDtsJobsResponse) SetHeaders(v map[string]*string) *DeleteDtsJobsResponse {
	s.Headers = v
	return s
}

func (s *DeleteDtsJobsResponse) SetStatusCode(v int32) *DeleteDtsJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDtsJobsResponse) SetBody(v *DeleteDtsJobsResponseBody) *DeleteDtsJobsResponse {
	s.Body = v
	return s
}

type DeleteMigrationJobRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteMigrationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMigrationJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteMigrationJobRequest) SetAccountId(v string) *DeleteMigrationJobRequest {
	s.AccountId = &v
	return s
}

func (s *DeleteMigrationJobRequest) SetMigrationJobId(v string) *DeleteMigrationJobRequest {
	s.MigrationJobId = &v
	return s
}

func (s *DeleteMigrationJobRequest) SetOwnerId(v string) *DeleteMigrationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMigrationJobRequest) SetRegionId(v string) *DeleteMigrationJobRequest {
	s.RegionId = &v
	return s
}

type DeleteMigrationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMigrationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMigrationJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMigrationJobResponseBody) SetErrCode(v string) *DeleteMigrationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DeleteMigrationJobResponseBody) SetErrMessage(v string) *DeleteMigrationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DeleteMigrationJobResponseBody) SetRequestId(v string) *DeleteMigrationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMigrationJobResponseBody) SetSuccess(v string) *DeleteMigrationJobResponseBody {
	s.Success = &v
	return s
}

type DeleteMigrationJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMigrationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMigrationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMigrationJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteMigrationJobResponse) SetHeaders(v map[string]*string) *DeleteMigrationJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteMigrationJobResponse) SetStatusCode(v int32) *DeleteMigrationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMigrationJobResponse) SetBody(v *DeleteMigrationJobResponseBody) *DeleteMigrationJobResponse {
	s.Body = v
	return s
}

type DeleteSubscriptionInstanceRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
}

func (s DeleteSubscriptionInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscriptionInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteSubscriptionInstanceRequest) SetAccountId(v string) *DeleteSubscriptionInstanceRequest {
	s.AccountId = &v
	return s
}

func (s *DeleteSubscriptionInstanceRequest) SetOwnerId(v string) *DeleteSubscriptionInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSubscriptionInstanceRequest) SetRegionId(v string) *DeleteSubscriptionInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSubscriptionInstanceRequest) SetSubscriptionInstanceId(v string) *DeleteSubscriptionInstanceRequest {
	s.SubscriptionInstanceId = &v
	return s
}

type DeleteSubscriptionInstanceResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteSubscriptionInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscriptionInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSubscriptionInstanceResponseBody) SetErrCode(v string) *DeleteSubscriptionInstanceResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DeleteSubscriptionInstanceResponseBody) SetErrMessage(v string) *DeleteSubscriptionInstanceResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DeleteSubscriptionInstanceResponseBody) SetRequestId(v string) *DeleteSubscriptionInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSubscriptionInstanceResponseBody) SetSuccess(v string) *DeleteSubscriptionInstanceResponseBody {
	s.Success = &v
	return s
}

type DeleteSubscriptionInstanceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSubscriptionInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSubscriptionInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscriptionInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteSubscriptionInstanceResponse) SetHeaders(v map[string]*string) *DeleteSubscriptionInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteSubscriptionInstanceResponse) SetStatusCode(v int32) *DeleteSubscriptionInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSubscriptionInstanceResponse) SetBody(v *DeleteSubscriptionInstanceResponseBody) *DeleteSubscriptionInstanceResponse {
	s.Body = v
	return s
}

type DeleteSynchronizationJobRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s DeleteSynchronizationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSynchronizationJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteSynchronizationJobRequest) SetAccountId(v string) *DeleteSynchronizationJobRequest {
	s.AccountId = &v
	return s
}

func (s *DeleteSynchronizationJobRequest) SetOwnerId(v string) *DeleteSynchronizationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSynchronizationJobRequest) SetRegionId(v string) *DeleteSynchronizationJobRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSynchronizationJobRequest) SetSynchronizationJobId(v string) *DeleteSynchronizationJobRequest {
	s.SynchronizationJobId = &v
	return s
}

type DeleteSynchronizationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteSynchronizationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSynchronizationJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSynchronizationJobResponseBody) SetErrCode(v string) *DeleteSynchronizationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DeleteSynchronizationJobResponseBody) SetErrMessage(v string) *DeleteSynchronizationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DeleteSynchronizationJobResponseBody) SetRequestId(v string) *DeleteSynchronizationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSynchronizationJobResponseBody) SetSuccess(v string) *DeleteSynchronizationJobResponseBody {
	s.Success = &v
	return s
}

type DeleteSynchronizationJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSynchronizationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSynchronizationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSynchronizationJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteSynchronizationJobResponse) SetHeaders(v map[string]*string) *DeleteSynchronizationJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteSynchronizationJobResponse) SetStatusCode(v int32) *DeleteSynchronizationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSynchronizationJobResponse) SetBody(v *DeleteSynchronizationJobResponseBody) *DeleteSynchronizationJobResponse {
	s.Body = v
	return s
}

type DescribeChannelAccountRequest struct {
	DtsJobId        *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	OwnerId         *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Tags            *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeChannelAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelAccountRequest) GoString() string {
	return s.String()
}

func (s *DescribeChannelAccountRequest) SetDtsJobId(v string) *DescribeChannelAccountRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeChannelAccountRequest) SetOwnerId(v string) *DescribeChannelAccountRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeChannelAccountRequest) SetRegion(v string) *DescribeChannelAccountRequest {
	s.Region = &v
	return s
}

func (s *DescribeChannelAccountRequest) SetRegionId(v string) *DescribeChannelAccountRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeChannelAccountRequest) SetResourceGroupId(v string) *DescribeChannelAccountRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeChannelAccountRequest) SetTags(v string) *DescribeChannelAccountRequest {
	s.Tags = &v
	return s
}

func (s *DescribeChannelAccountRequest) SetType(v string) *DescribeChannelAccountRequest {
	s.Type = &v
	return s
}

type DescribeChannelAccountResponseBody struct {
	DynamicCode    *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrCode        *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage     *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Password       *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Username       *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeChannelAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelAccountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeChannelAccountResponseBody) SetDynamicCode(v string) *DescribeChannelAccountResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeChannelAccountResponseBody) SetDynamicMessage(v string) *DescribeChannelAccountResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeChannelAccountResponseBody) SetErrCode(v string) *DescribeChannelAccountResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeChannelAccountResponseBody) SetErrMessage(v string) *DescribeChannelAccountResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeChannelAccountResponseBody) SetHttpStatusCode(v int32) *DescribeChannelAccountResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeChannelAccountResponseBody) SetPassword(v string) *DescribeChannelAccountResponseBody {
	s.Password = &v
	return s
}

func (s *DescribeChannelAccountResponseBody) SetRequestId(v string) *DescribeChannelAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeChannelAccountResponseBody) SetSuccess(v bool) *DescribeChannelAccountResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeChannelAccountResponseBody) SetUsername(v string) *DescribeChannelAccountResponseBody {
	s.Username = &v
	return s
}

type DescribeChannelAccountResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeChannelAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeChannelAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelAccountResponse) GoString() string {
	return s.String()
}

func (s *DescribeChannelAccountResponse) SetHeaders(v map[string]*string) *DescribeChannelAccountResponse {
	s.Headers = v
	return s
}

func (s *DescribeChannelAccountResponse) SetStatusCode(v int32) *DescribeChannelAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeChannelAccountResponse) SetBody(v *DescribeChannelAccountResponseBody) *DescribeChannelAccountResponse {
	s.Body = v
	return s
}

type DescribeCheckJobsRequest struct {
	CheckType  *int32  `json:"CheckType,omitempty" xml:"CheckType,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobName    *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeCheckJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckJobsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCheckJobsRequest) SetCheckType(v int32) *DescribeCheckJobsRequest {
	s.CheckType = &v
	return s
}

func (s *DescribeCheckJobsRequest) SetInstanceId(v string) *DescribeCheckJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeCheckJobsRequest) SetJobName(v string) *DescribeCheckJobsRequest {
	s.JobName = &v
	return s
}

func (s *DescribeCheckJobsRequest) SetPageNumber(v int32) *DescribeCheckJobsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCheckJobsRequest) SetPageSize(v int32) *DescribeCheckJobsRequest {
	s.PageSize = &v
	return s
}

type DescribeCheckJobsResponseBody struct {
	CheckJobs        []*DescribeCheckJobsResponseBodyCheckJobs `json:"CheckJobs,omitempty" xml:"CheckJobs,omitempty" type:"Repeated"`
	DynamicCode      *string                                   `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	DynamicMessage   *string                                   `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrCode          *string                                   `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage       *string                                   `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	HttpStatusCode   *int32                                    `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	PageNumber       *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageRecordCount  *int64                                    `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	RequestId        *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success          *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
	TotalRecordCount *int64                                    `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeCheckJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckJobsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCheckJobsResponseBody) SetCheckJobs(v []*DescribeCheckJobsResponseBodyCheckJobs) *DescribeCheckJobsResponseBody {
	s.CheckJobs = v
	return s
}

func (s *DescribeCheckJobsResponseBody) SetDynamicCode(v string) *DescribeCheckJobsResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeCheckJobsResponseBody) SetDynamicMessage(v string) *DescribeCheckJobsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeCheckJobsResponseBody) SetErrCode(v string) *DescribeCheckJobsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeCheckJobsResponseBody) SetErrMessage(v string) *DescribeCheckJobsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeCheckJobsResponseBody) SetHttpStatusCode(v int32) *DescribeCheckJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeCheckJobsResponseBody) SetPageNumber(v int32) *DescribeCheckJobsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCheckJobsResponseBody) SetPageRecordCount(v int64) *DescribeCheckJobsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeCheckJobsResponseBody) SetRequestId(v string) *DescribeCheckJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCheckJobsResponseBody) SetSuccess(v bool) *DescribeCheckJobsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeCheckJobsResponseBody) SetTotalRecordCount(v int64) *DescribeCheckJobsResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeCheckJobsResponseBodyCheckJobs struct {
	ChargeType    *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	CheckPoint    *int64  `json:"CheckPoint,omitempty" xml:"CheckPoint,omitempty"`
	CheckType     *int32  `json:"CheckType,omitempty" xml:"CheckType,omitempty"`
	DiffCount     *int64  `json:"DiffCount,omitempty" xml:"DiffCount,omitempty"`
	DiffSum       *int64  `json:"DiffSum,omitempty" xml:"DiffSum,omitempty"`
	DtsInstanceID *string `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	DtsJobId      *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	FinishCount   *int64  `json:"FinishCount,omitempty" xml:"FinishCount,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	JobName       *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	JobStepId     *string `json:"JobStepId,omitempty" xml:"JobStepId,omitempty"`
	ParentJobType *string `json:"ParentJobType,omitempty" xml:"ParentJobType,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status        *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalCount    *int64  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCheckJobsResponseBodyCheckJobs) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckJobsResponseBodyCheckJobs) GoString() string {
	return s.String()
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetChargeType(v string) *DescribeCheckJobsResponseBodyCheckJobs {
	s.ChargeType = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetCheckPoint(v int64) *DescribeCheckJobsResponseBodyCheckJobs {
	s.CheckPoint = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetCheckType(v int32) *DescribeCheckJobsResponseBodyCheckJobs {
	s.CheckType = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetDiffCount(v int64) *DescribeCheckJobsResponseBodyCheckJobs {
	s.DiffCount = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetDiffSum(v int64) *DescribeCheckJobsResponseBodyCheckJobs {
	s.DiffSum = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetDtsInstanceID(v string) *DescribeCheckJobsResponseBodyCheckJobs {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetDtsJobId(v string) *DescribeCheckJobsResponseBodyCheckJobs {
	s.DtsJobId = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetFinishCount(v int64) *DescribeCheckJobsResponseBodyCheckJobs {
	s.FinishCount = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetGroupId(v string) *DescribeCheckJobsResponseBodyCheckJobs {
	s.GroupId = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetInstanceClass(v string) *DescribeCheckJobsResponseBodyCheckJobs {
	s.InstanceClass = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetJobName(v string) *DescribeCheckJobsResponseBodyCheckJobs {
	s.JobName = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetJobStepId(v string) *DescribeCheckJobsResponseBodyCheckJobs {
	s.JobStepId = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetParentJobType(v string) *DescribeCheckJobsResponseBodyCheckJobs {
	s.ParentJobType = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetRegionId(v string) *DescribeCheckJobsResponseBodyCheckJobs {
	s.RegionId = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetStatus(v int32) *DescribeCheckJobsResponseBodyCheckJobs {
	s.Status = &v
	return s
}

func (s *DescribeCheckJobsResponseBodyCheckJobs) SetTotalCount(v int64) *DescribeCheckJobsResponseBodyCheckJobs {
	s.TotalCount = &v
	return s
}

type DescribeCheckJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCheckJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCheckJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCheckJobsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCheckJobsResponse) SetHeaders(v map[string]*string) *DescribeCheckJobsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCheckJobsResponse) SetStatusCode(v int32) *DescribeCheckJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCheckJobsResponse) SetBody(v *DescribeCheckJobsResponseBody) *DescribeCheckJobsResponse {
	s.Body = v
	return s
}

type DescribeClusterOperateLogsRequest struct {
	// The ID of the Alibaba Cloud account.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the DTS dedicated cluster on which a DTS task runs.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The ID of the data migration or synchronization task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The end of the time range to query. The value must be in the UNIX timestamp format. Unit: milliseconds.
	EndTime *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than 0. Default value: **1**.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. The value must be in the UNIX timestamp format. Unit: milliseconds. If you do not specify this parameter, the data within the last seven days is returned by default.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeClusterOperateLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterOperateLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterOperateLogsRequest) SetAccountId(v string) *DescribeClusterOperateLogsRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeClusterOperateLogsRequest) SetClientToken(v string) *DescribeClusterOperateLogsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeClusterOperateLogsRequest) SetDedicatedClusterId(v string) *DescribeClusterOperateLogsRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeClusterOperateLogsRequest) SetDtsJobId(v string) *DescribeClusterOperateLogsRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeClusterOperateLogsRequest) SetEndTime(v int64) *DescribeClusterOperateLogsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeClusterOperateLogsRequest) SetOwnerID(v string) *DescribeClusterOperateLogsRequest {
	s.OwnerID = &v
	return s
}

func (s *DescribeClusterOperateLogsRequest) SetPageNumber(v int32) *DescribeClusterOperateLogsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeClusterOperateLogsRequest) SetPageSize(v int32) *DescribeClusterOperateLogsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeClusterOperateLogsRequest) SetStartTime(v int64) *DescribeClusterOperateLogsRequest {
	s.StartTime = &v
	return s
}

type DescribeClusterOperateLogsResponseBody struct {
	// The error code returned by the backend service. The number is incremented.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the operation logs.
	DataPoints []*DescribeClusterOperateLogsResponseBodyDataPoints `json:"DataPoints,omitempty" xml:"DataPoints,omitempty" type:"Repeated"`
	// The dynamic part in the error message. This parameter is used to replace %s in the ErrMessage parameter.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code returned for an exception.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of records.
	TotalRecordCount *int64 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeClusterOperateLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterOperateLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterOperateLogsResponseBody) SetCode(v string) *DescribeClusterOperateLogsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBody) SetDataPoints(v []*DescribeClusterOperateLogsResponseBodyDataPoints) *DescribeClusterOperateLogsResponseBody {
	s.DataPoints = v
	return s
}

func (s *DescribeClusterOperateLogsResponseBody) SetDynamicMessage(v string) *DescribeClusterOperateLogsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBody) SetErrCode(v string) *DescribeClusterOperateLogsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBody) SetErrMessage(v string) *DescribeClusterOperateLogsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBody) SetHttpStatusCode(v int32) *DescribeClusterOperateLogsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBody) SetPageNumber(v int32) *DescribeClusterOperateLogsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBody) SetPageRecordCount(v int32) *DescribeClusterOperateLogsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBody) SetRequestId(v string) *DescribeClusterOperateLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBody) SetSuccess(v bool) *DescribeClusterOperateLogsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBody) SetTotalRecordCount(v int64) *DescribeClusterOperateLogsResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeClusterOperateLogsResponseBodyDataPoints struct {
	// Other description of the operation.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The primary key of the log table.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The time when the operation is recorded. The value is in the UNIX timestamp format. Unit: milliseconds.
	LogDatetime *int64 `json:"LogDatetime,omitempty" xml:"LogDatetime,omitempty"`
	// The value of the parameter after the operation if the operation is an UPDATE operation.
	NewValue *string `json:"NewValue,omitempty" xml:"NewValue,omitempty"`
	// The value of the parameter before the operation if the operation is an UPDATE operation.
	OldValue *string `json:"OldValue,omitempty" xml:"OldValue,omitempty"`
	// The type of the operation.
	OperationName *string `json:"OperationName,omitempty" xml:"OperationName,omitempty"`
	// The user who performed the operation.
	OperationUser *string `json:"OperationUser,omitempty" xml:"OperationUser,omitempty"`
	// Indicates whether the request was successful. A value of **1** indicates that the request was successful.
	Success *int32 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeClusterOperateLogsResponseBodyDataPoints) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterOperateLogsResponseBodyDataPoints) GoString() string {
	return s.String()
}

func (s *DescribeClusterOperateLogsResponseBodyDataPoints) SetContent(v string) *DescribeClusterOperateLogsResponseBodyDataPoints {
	s.Content = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBodyDataPoints) SetId(v string) *DescribeClusterOperateLogsResponseBodyDataPoints {
	s.Id = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBodyDataPoints) SetLogDatetime(v int64) *DescribeClusterOperateLogsResponseBodyDataPoints {
	s.LogDatetime = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBodyDataPoints) SetNewValue(v string) *DescribeClusterOperateLogsResponseBodyDataPoints {
	s.NewValue = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBodyDataPoints) SetOldValue(v string) *DescribeClusterOperateLogsResponseBodyDataPoints {
	s.OldValue = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBodyDataPoints) SetOperationName(v string) *DescribeClusterOperateLogsResponseBodyDataPoints {
	s.OperationName = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBodyDataPoints) SetOperationUser(v string) *DescribeClusterOperateLogsResponseBodyDataPoints {
	s.OperationUser = &v
	return s
}

func (s *DescribeClusterOperateLogsResponseBodyDataPoints) SetSuccess(v int32) *DescribeClusterOperateLogsResponseBodyDataPoints {
	s.Success = &v
	return s
}

type DescribeClusterOperateLogsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeClusterOperateLogsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterOperateLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterOperateLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterOperateLogsResponse) SetHeaders(v map[string]*string) *DescribeClusterOperateLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterOperateLogsResponse) SetStatusCode(v int32) *DescribeClusterOperateLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterOperateLogsResponse) SetBody(v *DescribeClusterOperateLogsResponseBody) *DescribeClusterOperateLogsResponse {
	s.Body = v
	return s
}

type DescribeClusterUsedUtilizationRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter is discontinued.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the cluster. If the **MetricType** parameter is set to **CLUSTER**, enter the ID of the exclusive cluster. Otherwise, set this parameter to a node ID.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The ID of the data migration or synchronization task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The cluster environment. Default value: **ALIYUN**.
	Env *string `json:"Env,omitempty" xml:"Env,omitempty"`
	// Specifies whether to query the metrics of the cluster or a node. Default value: CLUSTER. Valid values:
	//
	// *   **CLUSTER**: query the metrics of the cluster.
	// *   **NODE**: query the metrics of a node.
	MetricType *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	OwnerID    *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The ID of the region in which the Data Transmission Service (DTS) instance resides.
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
}

func (s DescribeClusterUsedUtilizationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterUsedUtilizationRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterUsedUtilizationRequest) SetAccountId(v string) *DescribeClusterUsedUtilizationRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeClusterUsedUtilizationRequest) SetClientToken(v string) *DescribeClusterUsedUtilizationRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeClusterUsedUtilizationRequest) SetDedicatedClusterId(v string) *DescribeClusterUsedUtilizationRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeClusterUsedUtilizationRequest) SetDtsJobId(v string) *DescribeClusterUsedUtilizationRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeClusterUsedUtilizationRequest) SetEnv(v string) *DescribeClusterUsedUtilizationRequest {
	s.Env = &v
	return s
}

func (s *DescribeClusterUsedUtilizationRequest) SetMetricType(v string) *DescribeClusterUsedUtilizationRequest {
	s.MetricType = &v
	return s
}

func (s *DescribeClusterUsedUtilizationRequest) SetOwnerID(v string) *DescribeClusterUsedUtilizationRequest {
	s.OwnerID = &v
	return s
}

func (s *DescribeClusterUsedUtilizationRequest) SetRegionId(v string) *DescribeClusterUsedUtilizationRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterUsedUtilizationRequest) SetSecurityToken(v string) *DescribeClusterUsedUtilizationRequest {
	s.SecurityToken = &v
	return s
}

type DescribeClusterUsedUtilizationResponseBody struct {
	// The error code returned by the backend service. The number is incremented.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The CPU utilization of the cluster. Unit: percentage.
	CpuTotal *float32 `json:"CpuTotal,omitempty" xml:"CpuTotal,omitempty"`
	// The ID of the cluster.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The total disk size of the cluster. Unit: GB.
	DiskTotal *float32 `json:"DiskTotal,omitempty" xml:"DiskTotal,omitempty"`
	// The disk usage of the cluster. Unit: GB.
	DiskUsed *float32 `json:"DiskUsed,omitempty" xml:"DiskUsed,omitempty"`
	// The total number of DTS units (DUs).
	DuTotal *int32 `json:"DuTotal,omitempty" xml:"DuTotal,omitempty"`
	// The usage of DUs.
	DuUsed *int32 `json:"DuUsed,omitempty" xml:"DuUsed,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace %s in the ErrMessage parameter.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The total amount of memory. A value of 0 is temporarily returned.
	MemoryTotal *float32 `json:"MemoryTotal,omitempty" xml:"MemoryTotal,omitempty"`
	// The memory usage. A value of 0 is temporarily returned.
	MemoryUsed *float32 `json:"MemoryUsed,omitempty" xml:"MemoryUsed,omitempty"`
	// The memory usage.
	MemoryUsedPercentage *float32 `json:"MemoryUsedPercentage,omitempty" xml:"MemoryUsedPercentage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The number of tasks that are in progress.
	TaskRunning *int32 `json:"TaskRunning,omitempty" xml:"TaskRunning,omitempty"`
}

func (s DescribeClusterUsedUtilizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterUsedUtilizationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetCode(v string) *DescribeClusterUsedUtilizationResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetCpuTotal(v float32) *DescribeClusterUsedUtilizationResponseBody {
	s.CpuTotal = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetDedicatedClusterId(v string) *DescribeClusterUsedUtilizationResponseBody {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetDiskTotal(v float32) *DescribeClusterUsedUtilizationResponseBody {
	s.DiskTotal = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetDiskUsed(v float32) *DescribeClusterUsedUtilizationResponseBody {
	s.DiskUsed = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetDuTotal(v int32) *DescribeClusterUsedUtilizationResponseBody {
	s.DuTotal = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetDuUsed(v int32) *DescribeClusterUsedUtilizationResponseBody {
	s.DuUsed = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetDynamicMessage(v string) *DescribeClusterUsedUtilizationResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetErrCode(v string) *DescribeClusterUsedUtilizationResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetErrMessage(v string) *DescribeClusterUsedUtilizationResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetHttpStatusCode(v int32) *DescribeClusterUsedUtilizationResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetMemoryTotal(v float32) *DescribeClusterUsedUtilizationResponseBody {
	s.MemoryTotal = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetMemoryUsed(v float32) *DescribeClusterUsedUtilizationResponseBody {
	s.MemoryUsed = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetMemoryUsedPercentage(v float32) *DescribeClusterUsedUtilizationResponseBody {
	s.MemoryUsedPercentage = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetRequestId(v string) *DescribeClusterUsedUtilizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetSuccess(v bool) *DescribeClusterUsedUtilizationResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponseBody) SetTaskRunning(v int32) *DescribeClusterUsedUtilizationResponseBody {
	s.TaskRunning = &v
	return s
}

type DescribeClusterUsedUtilizationResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeClusterUsedUtilizationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterUsedUtilizationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterUsedUtilizationResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterUsedUtilizationResponse) SetHeaders(v map[string]*string) *DescribeClusterUsedUtilizationResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterUsedUtilizationResponse) SetStatusCode(v int32) *DescribeClusterUsedUtilizationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterUsedUtilizationResponse) SetBody(v *DescribeClusterUsedUtilizationResponseBody) *DescribeClusterUsedUtilizationResponse {
	s.Body = v
	return s
}

type DescribeConnectionStatusRequest struct {
	// You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle**. Valid values:
	//
	// *   **SID**: non-RAC architecture
	// *   **RAC**: Real Application Cluster (RAC) architecture
	//
	// >  This parameter is optional. The data type of this parameter is String.
	DestinationEndpointArchitecture *string `json:"DestinationEndpointArchitecture,omitempty" xml:"DestinationEndpointArchitecture,omitempty"`
	// The name of the destination database or the authentication database.
	//
	// >
	// *   You must specify this parameter if the **DestinationEndpointEngineName** parameter is set to **PostgreSQL**, **DRDS**, or **MongoDB**. You must also specify this parameter if the **DestinationEndpointInstanceType** parameter is set to **PolarDB_o**.
	// *   If the **DestinationEndpointEngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the destination database. If the DestinationEndpointEngineName parameter is set to **MongoDB**, specify the name of the authentication database.
	// *   If the **DestinationEndpointInstanceType** parameter is set to **PolarDB_o**, specify the name of the destination database.
	DestinationEndpointDatabaseName *string `json:"DestinationEndpointDatabaseName,omitempty" xml:"DestinationEndpointDatabaseName,omitempty"`
	// The engine type of the destination database. Valid values: **MySQL**, **DRDS**, **SQLServer**, **PostgreSQL**, **PPAS**, **MongoDB**, and **Redis**.
	//
	// >  You must specify this parameter only if the **DestinationEndpointInstanceType** parameter is set to **RDS**, **DRDS**, **ECS**, **LocalInstance**, or **Express**.
	DestinationEndpointEngineName *string `json:"DestinationEndpointEngineName,omitempty" xml:"DestinationEndpointEngineName,omitempty"`
	// The endpoint of the destination database.
	//
	// >  You must specify this parameter only if the **DestinationEndpointInstanceType** parameter is set to **LocalInstance** or **Express**.
	DestinationEndpointIP *string `json:"DestinationEndpointIP,omitempty" xml:"DestinationEndpointIP,omitempty"`
	// The ID of the destination instance.
	DestinationEndpointInstanceID *string `json:"DestinationEndpointInstanceID,omitempty" xml:"DestinationEndpointInstanceID,omitempty"`
	// The instance type of the destination database. Valid values:
	//
	// >
	// *   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
	// *   **LocalInstance**: self-managed database with a public IP address
	// *   **RDS**: ApsaraDB RDS instance
	// *   **DRDS**: PolarDB-X instance
	// *   **MongoDB**: ApsaraDB for MongoDB instance
	// *   **Redis**: ApsaraDB for Redis instance
	// *   **PetaData**: HybridDB for MySQL instance
	// *   **POLARDB**: PolarDB for MySQL cluster
	// *   **PolarDB_o**: PolarDB for Oracle cluster
	// *   **AnalyticDB**: AnalyticDB for MySQL cluster V3.0 or V2.0
	// *   **Greenplum**: AnalyticDB for PostgreSQL instance
	DestinationEndpointInstanceType *string `json:"DestinationEndpointInstanceType,omitempty" xml:"DestinationEndpointInstanceType,omitempty"`
	// You must specify this parameter only if the **DestinationEndpointEngineName** parameter is set to **Oracle**. Valid values:
	//
	// *   **SID**: non-RAC architecture
	// *   **RAC**: RAC architecture
	//
	// >  This parameter is optional. The data type of this parameter is String.
	DestinationEndpointOracleSID *string `json:"DestinationEndpointOracleSID,omitempty" xml:"DestinationEndpointOracleSID,omitempty"`
	// The password of the destination database account.
	DestinationEndpointPassword *string `json:"DestinationEndpointPassword,omitempty" xml:"DestinationEndpointPassword,omitempty"`
	// The service port number of the source database.
	//
	// >  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.
	DestinationEndpointPort *string `json:"DestinationEndpointPort,omitempty" xml:"DestinationEndpointPort,omitempty"`
	// The ID of the region where the destination instance resides. For more information, see [List of supported regions](~~141033~~).
	DestinationEndpointRegion *string `json:"DestinationEndpointRegion,omitempty" xml:"DestinationEndpointRegion,omitempty"`
	// The database account of the destination database.
	//
	// >  The permissions that are required for database accounts vary with the migration or synchronization scenario. For more information, see [Overview of data migration scenarios](~~26618~~) and [Overview of data synchronization scenarios](~~130744~~).
	DestinationEndpointUserName *string `json:"DestinationEndpointUserName,omitempty" xml:"DestinationEndpointUserName,omitempty"`
	// The ID of the region where the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle**. Valid values:
	//
	// *   **SID**: non-RAC architecture
	// *   **RAC**: RAC architecture
	//
	// >  This parameter is optional.
	SourceEndpointArchitecture *string `json:"SourceEndpointArchitecture,omitempty" xml:"SourceEndpointArchitecture,omitempty"`
	// The name of the source database or the authentication database.
	//
	// >
	// *   You must specify this parameter if the **SourceEndpointEngineName** parameter is set to **PostgreSQL** or **MongoDB**. You must also specify this parameter if the **SourceEndpointInstanceType** parameter is set to **PolarDB_o**.
	// *   If the **SourceEndpointEngineName** parameter is set to **PostgreSQL** or **DRDS**, specify the name of the source database. If the SourceEndpointEngineName parameter is set to **MongoDB**, specify the name of the authentication database.
	// *   If the **SourceEndpointInstanceType** parameter is set to **PolarDB_o**, specify the name of the source database.
	SourceEndpointDatabaseName *string `json:"SourceEndpointDatabaseName,omitempty" xml:"SourceEndpointDatabaseName,omitempty"`
	// The engine type of the source database. Valid values: **MySQL**, **TiDB**, **SQLServer**, **PostgreSQL**, **Oracle**, **MongoDB**, and **Redis**.
	//
	// >  Default value: **MySQL**.
	SourceEndpointEngineName *string `json:"SourceEndpointEngineName,omitempty" xml:"SourceEndpointEngineName,omitempty"`
	// The endpoint of the source database.
	//
	// >  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **LocalInstance** or **Express**.
	SourceEndpointIP *string `json:"SourceEndpointIP,omitempty" xml:"SourceEndpointIP,omitempty"`
	// The ID of the source instance.
	SourceEndpointInstanceID *string `json:"SourceEndpointInstanceID,omitempty" xml:"SourceEndpointInstanceID,omitempty"`
	// The type of the source instance. Valid values:
	//
	// *   **RDS**: ApsaraDB RDS instance
	// *   **LocalInstance**: self-managed database with a public IP address
	// *   **ECS**: self-managed database that is hosted on ECS
	// *   **Express**: self-managed database that is connected over Express Connect
	// *   **dg**: self-managed database that is connected over Database Gateway
	// *   **MongoDB**: ApsaraDB for MongoDB instance
	// *   **POLARDB**: PolarDB for MySQL cluster
	// *   **PolarDB_o**: PolarDB for Oracle cluster
	SourceEndpointInstanceType *string `json:"SourceEndpointInstanceType,omitempty" xml:"SourceEndpointInstanceType,omitempty"`
	// The SID of the Oracle database.
	//
	// >  You must specify this parameter only if the **SourceEndpointEngineName** parameter is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	SourceEndpointOracleSID *string `json:"SourceEndpointOracleSID,omitempty" xml:"SourceEndpointOracleSID,omitempty"`
	// The password of the source database account.
	SourceEndpointPassword *string `json:"SourceEndpointPassword,omitempty" xml:"SourceEndpointPassword,omitempty"`
	// The service port number of the source database.
	//
	// >  You must specify this parameter only if the **SourceEndpointInstanceType** parameter is set to **ECS**, **LocalInstance**, or **Express**.
	SourceEndpointPort *string `json:"SourceEndpointPort,omitempty" xml:"SourceEndpointPort,omitempty"`
	// The ID of the region where the source instance resides. For more information, see [List of supported regions](~~141033~~).
	SourceEndpointRegion *string `json:"SourceEndpointRegion,omitempty" xml:"SourceEndpointRegion,omitempty"`
	// The database account of the source database.
	//
	// >  The permissions that are required for database accounts vary with the migration or synchronization scenario. For more information, see [Overview of data migration scenarios](~~26618~~) and [Overview of data synchronization scenarios](~~130744~~).
	SourceEndpointUserName *string `json:"SourceEndpointUserName,omitempty" xml:"SourceEndpointUserName,omitempty"`
}

func (s DescribeConnectionStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConnectionStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointArchitecture(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointArchitecture = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointDatabaseName(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointDatabaseName = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointEngineName(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointEngineName = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointIP(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointIP = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointInstanceID(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointInstanceID = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointInstanceType(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointInstanceType = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointOracleSID(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointOracleSID = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointPassword(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointPassword = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointPort(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointPort = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointRegion(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointRegion = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetDestinationEndpointUserName(v string) *DescribeConnectionStatusRequest {
	s.DestinationEndpointUserName = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetRegionId(v string) *DescribeConnectionStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointArchitecture(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointArchitecture = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointDatabaseName(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointDatabaseName = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointEngineName(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointEngineName = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointIP(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointIP = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointInstanceID(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointInstanceID = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointInstanceType(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointInstanceType = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointOracleSID(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointOracleSID = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointPassword(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointPassword = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointPort(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointPort = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointRegion(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointRegion = &v
	return s
}

func (s *DescribeConnectionStatusRequest) SetSourceEndpointUserName(v string) *DescribeConnectionStatusRequest {
	s.SourceEndpointUserName = &v
	return s
}

type DescribeConnectionStatusResponseBody struct {
	// The connectivity of DTS servers to the destination database.
	DestinationConnectionStatus map[string]interface{} `json:"DestinationConnectionStatus,omitempty" xml:"DestinationConnectionStatus,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The connectivity of DTS servers to the source database.
	SourceConnectionStatus map[string]interface{} `json:"SourceConnectionStatus,omitempty" xml:"SourceConnectionStatus,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConnectionStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConnectionStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConnectionStatusResponseBody) SetDestinationConnectionStatus(v map[string]interface{}) *DescribeConnectionStatusResponseBody {
	s.DestinationConnectionStatus = v
	return s
}

func (s *DescribeConnectionStatusResponseBody) SetErrCode(v string) *DescribeConnectionStatusResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeConnectionStatusResponseBody) SetErrMessage(v string) *DescribeConnectionStatusResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeConnectionStatusResponseBody) SetRequestId(v string) *DescribeConnectionStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConnectionStatusResponseBody) SetSourceConnectionStatus(v map[string]interface{}) *DescribeConnectionStatusResponseBody {
	s.SourceConnectionStatus = v
	return s
}

func (s *DescribeConnectionStatusResponseBody) SetSuccess(v string) *DescribeConnectionStatusResponseBody {
	s.Success = &v
	return s
}

type DescribeConnectionStatusResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeConnectionStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeConnectionStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConnectionStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeConnectionStatusResponse) SetHeaders(v map[string]*string) *DescribeConnectionStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeConnectionStatusResponse) SetStatusCode(v int32) *DescribeConnectionStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConnectionStatusResponse) SetBody(v *DescribeConnectionStatusResponseBody) *DescribeConnectionStatusResponse {
	s.Body = v
	return s
}

type DescribeConsumerChannelRequest struct {
	// The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	//
	// >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	//
	// >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The parent task ID of the distributed task.
	ParentChannelId *string `json:"ParentChannelId,omitempty" xml:"ParentChannelId,omitempty"`
	// The ID of the region in which the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeConsumerChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsumerChannelRequest) GoString() string {
	return s.String()
}

func (s *DescribeConsumerChannelRequest) SetDtsInstanceId(v string) *DescribeConsumerChannelRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *DescribeConsumerChannelRequest) SetDtsJobId(v string) *DescribeConsumerChannelRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeConsumerChannelRequest) SetPageNumber(v int32) *DescribeConsumerChannelRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeConsumerChannelRequest) SetPageSize(v int32) *DescribeConsumerChannelRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeConsumerChannelRequest) SetParentChannelId(v string) *DescribeConsumerChannelRequest {
	s.ParentChannelId = &v
	return s
}

func (s *DescribeConsumerChannelRequest) SetRegionId(v string) *DescribeConsumerChannelRequest {
	s.RegionId = &v
	return s
}

type DescribeConsumerChannelResponseBody struct {
	// The details of the consumer groups.
	ConsumerChannels []*DescribeConsumerChannelResponseBodyConsumerChannels `json:"ConsumerChannels,omitempty" xml:"ConsumerChannels,omitempty" type:"Repeated"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The maximum number of consumer groups that can be displayed on one page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of consumer groups.
	TotalRecordCount *int64 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeConsumerChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsumerChannelResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsumerChannelResponseBody) SetConsumerChannels(v []*DescribeConsumerChannelResponseBodyConsumerChannels) *DescribeConsumerChannelResponseBody {
	s.ConsumerChannels = v
	return s
}

func (s *DescribeConsumerChannelResponseBody) SetErrCode(v string) *DescribeConsumerChannelResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeConsumerChannelResponseBody) SetErrMessage(v string) *DescribeConsumerChannelResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeConsumerChannelResponseBody) SetHttpStatusCode(v string) *DescribeConsumerChannelResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeConsumerChannelResponseBody) SetPageNumber(v int32) *DescribeConsumerChannelResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeConsumerChannelResponseBody) SetPageRecordCount(v int32) *DescribeConsumerChannelResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeConsumerChannelResponseBody) SetRequestId(v string) *DescribeConsumerChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsumerChannelResponseBody) SetSuccess(v string) *DescribeConsumerChannelResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeConsumerChannelResponseBody) SetTotalRecordCount(v int64) *DescribeConsumerChannelResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeConsumerChannelResponseBodyConsumerChannels struct {
	// The ID of the consumer group.
	ConsumerGroupId *string `json:"ConsumerGroupId,omitempty" xml:"ConsumerGroupId,omitempty"`
	// The name of the consumer group.
	ConsumerGroupName *string `json:"ConsumerGroupName,omitempty" xml:"ConsumerGroupName,omitempty"`
	// The username of the consumer group.
	ConsumerGroupUserName *string `json:"ConsumerGroupUserName,omitempty" xml:"ConsumerGroupUserName,omitempty"`
	// The consumption checkpoint, which is the time when the latest data record was consumed by the change tracking client. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.
	ConsumptionCheckpoint *string `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	// The message latency, which is the timestamp of the latest data consumed by the downstream client minus the timestamp of the latest data tracked by the change tracking task. The value is a UNIX timestamp. Unit: seconds.
	//
	// For example, the latest data in the source database is generated at 10:00. The change tracking task reads the data generated at 09:55, and the downstream client consumes the data generated at 09:30. In this case, the message latency is the UNIX timestamp difference between 09:55 and 09:30.
	//
	// >  If the return value of this parameter is **-1**, no client is connected to the consumer group.
	MessageDelay *int64 `json:"MessageDelay,omitempty" xml:"MessageDelay,omitempty"`
	// The total number of unconsumed messages, which is the number of unconsumed data records plus the number of heartbeat messages.
	//
	// >  If the return value of this parameter is -1, no client is connected to the consumer group.
	UnconsumedData *int64 `json:"UnconsumedData,omitempty" xml:"UnconsumedData,omitempty"`
}

func (s DescribeConsumerChannelResponseBodyConsumerChannels) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsumerChannelResponseBodyConsumerChannels) GoString() string {
	return s.String()
}

func (s *DescribeConsumerChannelResponseBodyConsumerChannels) SetConsumerGroupId(v string) *DescribeConsumerChannelResponseBodyConsumerChannels {
	s.ConsumerGroupId = &v
	return s
}

func (s *DescribeConsumerChannelResponseBodyConsumerChannels) SetConsumerGroupName(v string) *DescribeConsumerChannelResponseBodyConsumerChannels {
	s.ConsumerGroupName = &v
	return s
}

func (s *DescribeConsumerChannelResponseBodyConsumerChannels) SetConsumerGroupUserName(v string) *DescribeConsumerChannelResponseBodyConsumerChannels {
	s.ConsumerGroupUserName = &v
	return s
}

func (s *DescribeConsumerChannelResponseBodyConsumerChannels) SetConsumptionCheckpoint(v string) *DescribeConsumerChannelResponseBodyConsumerChannels {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeConsumerChannelResponseBodyConsumerChannels) SetMessageDelay(v int64) *DescribeConsumerChannelResponseBodyConsumerChannels {
	s.MessageDelay = &v
	return s
}

func (s *DescribeConsumerChannelResponseBodyConsumerChannels) SetUnconsumedData(v int64) *DescribeConsumerChannelResponseBodyConsumerChannels {
	s.UnconsumedData = &v
	return s
}

type DescribeConsumerChannelResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeConsumerChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeConsumerChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsumerChannelResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsumerChannelResponse) SetHeaders(v map[string]*string) *DescribeConsumerChannelResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsumerChannelResponse) SetStatusCode(v int32) *DescribeConsumerChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsumerChannelResponse) SetBody(v *DescribeConsumerChannelResponseBody) *DescribeConsumerChannelResponse {
	s.Body = v
	return s
}

type DescribeConsumerGroupRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
}

func (s DescribeConsumerGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsumerGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeConsumerGroupRequest) SetAccountId(v string) *DescribeConsumerGroupRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeConsumerGroupRequest) SetOwnerId(v string) *DescribeConsumerGroupRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeConsumerGroupRequest) SetPageNum(v int32) *DescribeConsumerGroupRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeConsumerGroupRequest) SetPageSize(v int32) *DescribeConsumerGroupRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeConsumerGroupRequest) SetRegionId(v string) *DescribeConsumerGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeConsumerGroupRequest) SetSubscriptionInstanceId(v string) *DescribeConsumerGroupRequest {
	s.SubscriptionInstanceId = &v
	return s
}

type DescribeConsumerGroupResponseBody struct {
	// The list of consumer groups.
	ConsumerChannels *DescribeConsumerGroupResponseBodyConsumerChannels `json:"ConsumerChannels,omitempty" xml:"ConsumerChannels,omitempty" type:"Struct"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The maximum number of consumer groups that can be displayed on one page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of consumer groups.
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeConsumerGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsumerGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsumerGroupResponseBody) SetConsumerChannels(v *DescribeConsumerGroupResponseBodyConsumerChannels) *DescribeConsumerGroupResponseBody {
	s.ConsumerChannels = v
	return s
}

func (s *DescribeConsumerGroupResponseBody) SetErrCode(v string) *DescribeConsumerGroupResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeConsumerGroupResponseBody) SetErrMessage(v string) *DescribeConsumerGroupResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeConsumerGroupResponseBody) SetPageNumber(v int32) *DescribeConsumerGroupResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeConsumerGroupResponseBody) SetPageRecordCount(v int32) *DescribeConsumerGroupResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeConsumerGroupResponseBody) SetRequestId(v string) *DescribeConsumerGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsumerGroupResponseBody) SetSuccess(v string) *DescribeConsumerGroupResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeConsumerGroupResponseBody) SetTotalRecordCount(v int32) *DescribeConsumerGroupResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeConsumerGroupResponseBodyConsumerChannels struct {
	DescribeConsumerChannel []*DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel `json:"DescribeConsumerChannel,omitempty" xml:"DescribeConsumerChannel,omitempty" type:"Repeated"`
}

func (s DescribeConsumerGroupResponseBodyConsumerChannels) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsumerGroupResponseBodyConsumerChannels) GoString() string {
	return s.String()
}

func (s *DescribeConsumerGroupResponseBodyConsumerChannels) SetDescribeConsumerChannel(v []*DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel) *DescribeConsumerGroupResponseBodyConsumerChannels {
	s.DescribeConsumerChannel = v
	return s
}

type DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel struct {
	// The ID of the consumer group.
	ConsumerGroupID *string `json:"ConsumerGroupID,omitempty" xml:"ConsumerGroupID,omitempty"`
	// The name of the consumer group.
	ConsumerGroupName *string `json:"ConsumerGroupName,omitempty" xml:"ConsumerGroupName,omitempty"`
	// The username of the consumer group.
	ConsumerGroupUserName *string `json:"ConsumerGroupUserName,omitempty" xml:"ConsumerGroupUserName,omitempty"`
	// The consumption checkpoint, which is the time when the latest data record was consumed by the change tracking client. The format is *yyyy-MM-dd*T*HH:mm:ss*Z. The time is displayed in UTC.
	ConsumptionCheckpoint *string `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	// The message delay, which is the current time minus the timestamp of the earliest unconsumed message in the change tracking instance. Unit: seconds.
	//
	// >  If the return value of this parameter is **-1**, no client is connected to the consumer group.
	MessageDelay *int64 `json:"MessageDelay,omitempty" xml:"MessageDelay,omitempty"`
	// The total number of unconsumed messages, which is the number of unconsumed data records plus the number of heartbeat messages.
	//
	// >  If the return value of this parameter is **-1**, no client is connected to the consumer group.
	UnconsumedData *int64 `json:"UnconsumedData,omitempty" xml:"UnconsumedData,omitempty"`
}

func (s DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel) GoString() string {
	return s.String()
}

func (s *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel) SetConsumerGroupID(v string) *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel {
	s.ConsumerGroupID = &v
	return s
}

func (s *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel) SetConsumerGroupName(v string) *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel {
	s.ConsumerGroupName = &v
	return s
}

func (s *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel) SetConsumerGroupUserName(v string) *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel {
	s.ConsumerGroupUserName = &v
	return s
}

func (s *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel) SetConsumptionCheckpoint(v string) *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel) SetMessageDelay(v int64) *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel {
	s.MessageDelay = &v
	return s
}

func (s *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel) SetUnconsumedData(v int64) *DescribeConsumerGroupResponseBodyConsumerChannelsDescribeConsumerChannel {
	s.UnconsumedData = &v
	return s
}

type DescribeConsumerGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeConsumerGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeConsumerGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsumerGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsumerGroupResponse) SetHeaders(v map[string]*string) *DescribeConsumerGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsumerGroupResponse) SetStatusCode(v int32) *DescribeConsumerGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsumerGroupResponse) SetBody(v *DescribeConsumerGroupResponseBody) *DescribeConsumerGroupResponse {
	s.Body = v
	return s
}

type DescribeDTSIPRequest struct {
	// The ID of the region where the destination instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  If the destination instance is a self-managed database with a public IP address, you can set the parameter to **cn-hangzhou** or the ID of the closest region.
	DestinationEndpointRegion *string `json:"DestinationEndpointRegion,omitempty" xml:"DestinationEndpointRegion,omitempty"`
	RegionId                  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the region where the source instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  If the source instance is a self-managed database with a public IP address, you can set the parameter to **cn-hangzhou** or the ID of the closest region.
	SourceEndpointRegion *string `json:"SourceEndpointRegion,omitempty" xml:"SourceEndpointRegion,omitempty"`
}

func (s DescribeDTSIPRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTSIPRequest) GoString() string {
	return s.String()
}

func (s *DescribeDTSIPRequest) SetDestinationEndpointRegion(v string) *DescribeDTSIPRequest {
	s.DestinationEndpointRegion = &v
	return s
}

func (s *DescribeDTSIPRequest) SetRegionId(v string) *DescribeDTSIPRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDTSIPRequest) SetSourceEndpointRegion(v string) *DescribeDTSIPRequest {
	s.SourceEndpointRegion = &v
	return s
}

type DescribeDTSIPResponseBody struct {
	// The internal error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The CIDR blocks of DTS servers.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeDTSIPResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTSIPResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDTSIPResponseBody) SetDynamicCode(v string) *DescribeDTSIPResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeDTSIPResponseBody) SetDynamicMessage(v string) *DescribeDTSIPResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeDTSIPResponseBody) SetErrCode(v string) *DescribeDTSIPResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeDTSIPResponseBody) SetErrMessage(v string) *DescribeDTSIPResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDTSIPResponseBody) SetRequestId(v string) *DescribeDTSIPResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDTSIPResponseBody) SetSuccess(v string) *DescribeDTSIPResponseBody {
	s.Success = &v
	return s
}

type DescribeDTSIPResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDTSIPResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDTSIPResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDTSIPResponse) GoString() string {
	return s.String()
}

func (s *DescribeDTSIPResponse) SetHeaders(v map[string]*string) *DescribeDTSIPResponse {
	s.Headers = v
	return s
}

func (s *DescribeDTSIPResponse) SetStatusCode(v int32) *DescribeDTSIPResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDTSIPResponse) SetBody(v *DescribeDTSIPResponseBody) *DescribeDTSIPResponse {
	s.Body = v
	return s
}

type DescribeDataCheckReportUrlRequest struct {
	CheckType *int32  `json:"CheckType,omitempty" xml:"CheckType,omitempty"`
	DbName    *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DtsJobId  *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	TbName    *string `json:"TbName,omitempty" xml:"TbName,omitempty"`
}

func (s DescribeDataCheckReportUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckReportUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckReportUrlRequest) SetCheckType(v int32) *DescribeDataCheckReportUrlRequest {
	s.CheckType = &v
	return s
}

func (s *DescribeDataCheckReportUrlRequest) SetDbName(v string) *DescribeDataCheckReportUrlRequest {
	s.DbName = &v
	return s
}

func (s *DescribeDataCheckReportUrlRequest) SetDtsJobId(v string) *DescribeDataCheckReportUrlRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDataCheckReportUrlRequest) SetTbName(v string) *DescribeDataCheckReportUrlRequest {
	s.TbName = &v
	return s
}

type DescribeDataCheckReportUrlResponseBody struct {
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrCode        *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage     *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeDataCheckReportUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckReportUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckReportUrlResponseBody) SetDynamicMessage(v string) *DescribeDataCheckReportUrlResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeDataCheckReportUrlResponseBody) SetErrCode(v string) *DescribeDataCheckReportUrlResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeDataCheckReportUrlResponseBody) SetErrMessage(v string) *DescribeDataCheckReportUrlResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDataCheckReportUrlResponseBody) SetHttpStatusCode(v int32) *DescribeDataCheckReportUrlResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDataCheckReportUrlResponseBody) SetRequestId(v string) *DescribeDataCheckReportUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataCheckReportUrlResponseBody) SetSuccess(v string) *DescribeDataCheckReportUrlResponseBody {
	s.Success = &v
	return s
}

type DescribeDataCheckReportUrlResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDataCheckReportUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDataCheckReportUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckReportUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckReportUrlResponse) SetHeaders(v map[string]*string) *DescribeDataCheckReportUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataCheckReportUrlResponse) SetStatusCode(v int32) *DescribeDataCheckReportUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataCheckReportUrlResponse) SetBody(v *DescribeDataCheckReportUrlResponseBody) *DescribeDataCheckReportUrlResponse {
	s.Body = v
	return s
}

type DescribeDataCheckTableDetailsRequest struct {
	// The data verification method. Valid values:
	//
	// *   **1**: full data verification.
	// *   **2**: incremental data verification.
	CheckType *int32 `json:"CheckType,omitempty" xml:"CheckType,omitempty"`
	// The ID of the data migration or data synchronization task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The page number. Pages start from page 1. Default value: **1**.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SchemaName *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	// The status of data verification results. Valid values:
	//
	// *   **-1** (default): all states.
	// *   **6**: inconsistent data detected in tables.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the table whose data is verified in the source database.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s DescribeDataCheckTableDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckTableDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckTableDetailsRequest) SetCheckType(v int32) *DescribeDataCheckTableDetailsRequest {
	s.CheckType = &v
	return s
}

func (s *DescribeDataCheckTableDetailsRequest) SetDtsJobId(v string) *DescribeDataCheckTableDetailsRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDataCheckTableDetailsRequest) SetPageNumber(v int32) *DescribeDataCheckTableDetailsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataCheckTableDetailsRequest) SetPageSize(v int32) *DescribeDataCheckTableDetailsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataCheckTableDetailsRequest) SetSchemaName(v string) *DescribeDataCheckTableDetailsRequest {
	s.SchemaName = &v
	return s
}

func (s *DescribeDataCheckTableDetailsRequest) SetStatus(v string) *DescribeDataCheckTableDetailsRequest {
	s.Status = &v
	return s
}

func (s *DescribeDataCheckTableDetailsRequest) SetTableName(v string) *DescribeDataCheckTableDetailsRequest {
	s.TableName = &v
	return s
}

type DescribeDataCheckTableDetailsResponseBody struct {
	// The number of tables that contain inconsistent data.
	DiffTableCount *int64 `json:"DiffTableCount,omitempty" xml:"DiffTableCount,omitempty"`
	// The dynamic error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the value of **ErrMessage**.
	//
	// >  For example, if the return value of **ErrMessage** is **The Value of Input Parameter %s is not valid** and the return value of **DynamicMessage** is **Type**, the specified value of **Type** is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The total number of data rows that were verified.
	FinishedCount *int64 `json:"FinishedCount,omitempty" xml:"FinishedCount,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The page number.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The details of data verification results.
	TableDetails []*DescribeDataCheckTableDetailsResponseBodyTableDetails `json:"TableDetails,omitempty" xml:"TableDetails,omitempty" type:"Repeated"`
	// The total number of tables on which data verification was performed.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDataCheckTableDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckTableDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetDiffTableCount(v int64) *DescribeDataCheckTableDetailsResponseBody {
	s.DiffTableCount = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetDynamicCode(v string) *DescribeDataCheckTableDetailsResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetDynamicMessage(v string) *DescribeDataCheckTableDetailsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetErrCode(v string) *DescribeDataCheckTableDetailsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetErrMessage(v string) *DescribeDataCheckTableDetailsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetFinishedCount(v int64) *DescribeDataCheckTableDetailsResponseBody {
	s.FinishedCount = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetHttpStatusCode(v int32) *DescribeDataCheckTableDetailsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetPageNumber(v int32) *DescribeDataCheckTableDetailsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetRequestId(v string) *DescribeDataCheckTableDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetSuccess(v bool) *DescribeDataCheckTableDetailsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetTableDetails(v []*DescribeDataCheckTableDetailsResponseBodyTableDetails) *DescribeDataCheckTableDetailsResponseBody {
	s.TableDetails = v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBody) SetTotalCount(v int64) *DescribeDataCheckTableDetailsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDataCheckTableDetailsResponseBodyTableDetails struct {
	// The time when data verification was performed.
	BootTime *string `json:"BootTime,omitempty" xml:"BootTime,omitempty"`
	// The number of data rows that contain inconsistent data.
	DiffCount *int64 `json:"DiffCount,omitempty" xml:"DiffCount,omitempty"`
	// The error code returned if the request failed.
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The number of data rows that were verified.
	FinishCount *int64 `json:"FinishCount,omitempty" xml:"FinishCount,omitempty"`
	// The auto-increment primary key that is used to identify the data in a verification result.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the source database.
	SourceDbName *string `json:"SourceDbName,omitempty" xml:"SourceDbName,omitempty"`
	// The name of the source table.
	SourceTbName *string `json:"SourceTbName,omitempty" xml:"SourceTbName,omitempty"`
	// The state of the data verification task. Valid values:
	//
	// *   **0**: The data verification task was complete.
	// *   **2**: The data verification task was being initialized.
	// *   **3**: The data verification task was in progress.
	// *   **5**: The data verification task failed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the destination database.
	TargetDbName *string `json:"TargetDbName,omitempty" xml:"TargetDbName,omitempty"`
	// The name of the destination table.
	TargetTbName *string `json:"TargetTbName,omitempty" xml:"TargetTbName,omitempty"`
	// The total number of data rows.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDataCheckTableDetailsResponseBodyTableDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckTableDetailsResponseBodyTableDetails) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetBootTime(v string) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.BootTime = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetDiffCount(v int64) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.DiffCount = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetErrorCode(v int32) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.ErrorCode = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetFinishCount(v int64) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.FinishCount = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetId(v int64) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.Id = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetSourceDbName(v string) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.SourceDbName = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetSourceTbName(v string) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.SourceTbName = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetStatus(v string) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.Status = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetTargetDbName(v string) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.TargetDbName = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetTargetTbName(v string) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.TargetTbName = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponseBodyTableDetails) SetTotalCount(v int64) *DescribeDataCheckTableDetailsResponseBodyTableDetails {
	s.TotalCount = &v
	return s
}

type DescribeDataCheckTableDetailsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDataCheckTableDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDataCheckTableDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckTableDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckTableDetailsResponse) SetHeaders(v map[string]*string) *DescribeDataCheckTableDetailsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataCheckTableDetailsResponse) SetStatusCode(v int32) *DescribeDataCheckTableDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataCheckTableDetailsResponse) SetBody(v *DescribeDataCheckTableDetailsResponseBody) *DescribeDataCheckTableDetailsResponse {
	s.Body = v
	return s
}

type DescribeDataCheckTableDiffDetailsRequest struct {
	CheckType  *int32  `json:"CheckType,omitempty" xml:"CheckType,omitempty"`
	DbName     *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DtsJobId   *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	PageNumber *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TbName     *string `json:"TbName,omitempty" xml:"TbName,omitempty"`
}

func (s DescribeDataCheckTableDiffDetailsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckTableDiffDetailsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckTableDiffDetailsRequest) SetCheckType(v int32) *DescribeDataCheckTableDiffDetailsRequest {
	s.CheckType = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsRequest) SetDbName(v string) *DescribeDataCheckTableDiffDetailsRequest {
	s.DbName = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsRequest) SetDtsJobId(v string) *DescribeDataCheckTableDiffDetailsRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsRequest) SetPageNumber(v int64) *DescribeDataCheckTableDiffDetailsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsRequest) SetPageSize(v int64) *DescribeDataCheckTableDiffDetailsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsRequest) SetTbName(v string) *DescribeDataCheckTableDiffDetailsRequest {
	s.TbName = &v
	return s
}

type DescribeDataCheckTableDiffDetailsResponseBody struct {
	DbName         *string                                                     `json:"DbName,omitempty" xml:"DbName,omitempty"`
	DiffCount      *int64                                                      `json:"DiffCount,omitempty" xml:"DiffCount,omitempty"`
	DiffDetails    []*DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails `json:"DiffDetails,omitempty" xml:"DiffDetails,omitempty" type:"Repeated"`
	DynamicMessage *string                                                     `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrCode        *string                                                     `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage     *string                                                     `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	HttpStatusCode *int32                                                      `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	InstanceId     *string                                                     `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RequestId      *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty"`
	TbName         *string                                                     `json:"TbName,omitempty" xml:"TbName,omitempty"`
}

func (s DescribeDataCheckTableDiffDetailsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckTableDiffDetailsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetDbName(v string) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.DbName = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetDiffCount(v int64) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.DiffCount = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetDiffDetails(v []*DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.DiffDetails = v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetDynamicMessage(v string) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetErrCode(v string) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetErrMessage(v string) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetHttpStatusCode(v int32) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetInstanceId(v string) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetRequestId(v string) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetSuccess(v bool) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBody) SetTbName(v string) *DescribeDataCheckTableDiffDetailsResponseBody {
	s.TbName = &v
	return s
}

type DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails struct {
	Diff       *string `json:"Diff,omitempty" xml:"Diff,omitempty"`
	GmtCreated *string `json:"GmtCreated,omitempty" xml:"GmtCreated,omitempty"`
	Id         *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails) SetDiff(v string) *DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails {
	s.Diff = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails) SetGmtCreated(v string) *DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails {
	s.GmtCreated = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails) SetId(v int64) *DescribeDataCheckTableDiffDetailsResponseBodyDiffDetails {
	s.Id = &v
	return s
}

type DescribeDataCheckTableDiffDetailsResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDataCheckTableDiffDetailsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDataCheckTableDiffDetailsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataCheckTableDiffDetailsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataCheckTableDiffDetailsResponse) SetHeaders(v map[string]*string) *DescribeDataCheckTableDiffDetailsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponse) SetStatusCode(v int32) *DescribeDataCheckTableDiffDetailsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataCheckTableDiffDetailsResponse) SetBody(v *DescribeDataCheckTableDiffDetailsResponseBody) *DescribeDataCheckTableDiffDetailsResponse {
	s.Body = v
	return s
}

type DescribeDedicatedClusterRequest struct {
	// The ID of the cluster.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	OwnerId            *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region in which the instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDedicatedClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedClusterRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedClusterRequest) SetDedicatedClusterId(v string) *DescribeDedicatedClusterRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeDedicatedClusterRequest) SetOwnerId(v string) *DescribeDedicatedClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedClusterRequest) SetRegionId(v string) *DescribeDedicatedClusterRequest {
	s.RegionId = &v
	return s
}

type DescribeDedicatedClusterResponseBody struct {
	// The CPU utilization. Unit: percentage.
	CpuUtilization *int64 `json:"CpuUtilization,omitempty" xml:"CpuUtilization,omitempty"`
	// The ID of the cluster.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The name of the cluster.
	DedicatedClusterName *string `json:"DedicatedClusterName,omitempty" xml:"DedicatedClusterName,omitempty"`
	// The disk usage.
	DiskUtilization *int64 `json:"DiskUtilization,omitempty" xml:"DiskUtilization,omitempty"`
	// The ID of the instance.
	DtsInstanceID *string `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	// The number of DTS units (DUs).
	Du *int64 `json:"Du,omitempty" xml:"Du,omitempty"`
	// The DU usage. Unit: percentage.
	DuUtilization *int64 `json:"DuUtilization,omitempty" xml:"DuUtilization,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The time when the cluster was created.
	GmtCreated *int64 `json:"GmtCreated,omitempty" xml:"GmtCreated,omitempty"`
	// The time when the cluster stopped.
	GmtFinished *int64 `json:"GmtFinished,omitempty" xml:"GmtFinished,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The memory usage.
	MemUtilization *int64 `json:"MemUtilization,omitempty" xml:"MemUtilization,omitempty"`
	// The number of nodes in the cluster.
	NodeCount *int64 `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	// The number of DUs that exceeds the upper limit.
	OversoldDu *int64 `json:"OversoldDu,omitempty" xml:"OversoldDu,omitempty"`
	// The ID of the region in which the instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the cluster. Valid values:
	//
	// *   **init**: The cluster is being initialized.
	// *   **schedule**: The cluster is pending scheduling.
	// *   **running**: The cluster is running.
	// *   **upgrade**: The cluster is being upgraded.
	// *   **downgrade**: The cluster is being downgraded.
	// *   **locked**: The cluster is locked.
	// *   **releasing**: The cluster is being released.
	// *   **released**: The cluster is released.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// Indicates whether the request was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of CPU cores.
	TotalCpuCore *int64 `json:"TotalCpuCore,omitempty" xml:"TotalCpuCore,omitempty"`
	// The total disk size. Unit: GB.
	TotalDiskGBSize *int64 `json:"TotalDiskGBSize,omitempty" xml:"TotalDiskGBSize,omitempty"`
	// The total amount of memory. Unit: GB.
	TotalMemGBSize *int64 `json:"TotalMemGBSize,omitempty" xml:"TotalMemGBSize,omitempty"`
	// The number of used CPU cores.
	UsedCpuCore *int64 `json:"UsedCpuCore,omitempty" xml:"UsedCpuCore,omitempty"`
	// The used disk size. Unit: GB.
	UsedDiskGBSize *int64 `json:"UsedDiskGBSize,omitempty" xml:"UsedDiskGBSize,omitempty"`
	// The number of used DUs.
	UsedDu *int64 `json:"UsedDu,omitempty" xml:"UsedDu,omitempty"`
	// The amount of used memory. Unit: GB.
	UsedMemGBSize *int64 `json:"UsedMemGBSize,omitempty" xml:"UsedMemGBSize,omitempty"`
}

func (s DescribeDedicatedClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedClusterResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedClusterResponseBody) SetCpuUtilization(v int64) *DescribeDedicatedClusterResponseBody {
	s.CpuUtilization = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetDedicatedClusterId(v string) *DescribeDedicatedClusterResponseBody {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetDedicatedClusterName(v string) *DescribeDedicatedClusterResponseBody {
	s.DedicatedClusterName = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetDiskUtilization(v int64) *DescribeDedicatedClusterResponseBody {
	s.DiskUtilization = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetDtsInstanceID(v string) *DescribeDedicatedClusterResponseBody {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetDu(v int64) *DescribeDedicatedClusterResponseBody {
	s.Du = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetDuUtilization(v int64) *DescribeDedicatedClusterResponseBody {
	s.DuUtilization = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetErrCode(v string) *DescribeDedicatedClusterResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetErrMessage(v string) *DescribeDedicatedClusterResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetGmtCreated(v int64) *DescribeDedicatedClusterResponseBody {
	s.GmtCreated = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetGmtFinished(v int64) *DescribeDedicatedClusterResponseBody {
	s.GmtFinished = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetHttpStatusCode(v string) *DescribeDedicatedClusterResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetMemUtilization(v int64) *DescribeDedicatedClusterResponseBody {
	s.MemUtilization = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetNodeCount(v int64) *DescribeDedicatedClusterResponseBody {
	s.NodeCount = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetOversoldDu(v int64) *DescribeDedicatedClusterResponseBody {
	s.OversoldDu = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetRegionId(v string) *DescribeDedicatedClusterResponseBody {
	s.RegionId = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetRequestId(v string) *DescribeDedicatedClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetState(v string) *DescribeDedicatedClusterResponseBody {
	s.State = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetSuccess(v string) *DescribeDedicatedClusterResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetTotalCpuCore(v int64) *DescribeDedicatedClusterResponseBody {
	s.TotalCpuCore = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetTotalDiskGBSize(v int64) *DescribeDedicatedClusterResponseBody {
	s.TotalDiskGBSize = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetTotalMemGBSize(v int64) *DescribeDedicatedClusterResponseBody {
	s.TotalMemGBSize = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetUsedCpuCore(v int64) *DescribeDedicatedClusterResponseBody {
	s.UsedCpuCore = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetUsedDiskGBSize(v int64) *DescribeDedicatedClusterResponseBody {
	s.UsedDiskGBSize = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetUsedDu(v int64) *DescribeDedicatedClusterResponseBody {
	s.UsedDu = &v
	return s
}

func (s *DescribeDedicatedClusterResponseBody) SetUsedMemGBSize(v int64) *DescribeDedicatedClusterResponseBody {
	s.UsedMemGBSize = &v
	return s
}

type DescribeDedicatedClusterResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDedicatedClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedClusterResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedClusterResponse) SetHeaders(v map[string]*string) *DescribeDedicatedClusterResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedClusterResponse) SetStatusCode(v int32) *DescribeDedicatedClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDedicatedClusterResponse) SetBody(v *DescribeDedicatedClusterResponseBody) *DescribeDedicatedClusterResponse {
	s.Body = v
	return s
}

type DescribeDedicatedClusterMonitorRuleRequest struct {
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	OwnerId            *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDedicatedClusterMonitorRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedClusterMonitorRuleRequest) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedClusterMonitorRuleRequest) SetDedicatedClusterId(v string) *DescribeDedicatedClusterMonitorRuleRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleRequest) SetOwnerId(v string) *DescribeDedicatedClusterMonitorRuleRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleRequest) SetRegionId(v string) *DescribeDedicatedClusterMonitorRuleRequest {
	s.RegionId = &v
	return s
}

type DescribeDedicatedClusterMonitorRuleResponseBody struct {
	CpuAlarmThreshold  *string `json:"CpuAlarmThreshold,omitempty" xml:"CpuAlarmThreshold,omitempty"`
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	DiskAlarmThreshold *string `json:"DiskAlarmThreshold,omitempty" xml:"DiskAlarmThreshold,omitempty"`
	DuAlarmThreshold   *string `json:"DuAlarmThreshold,omitempty" xml:"DuAlarmThreshold,omitempty"`
	ErrCode            *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage         *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	HttpStatusCode     *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	MemAlarmThreshold  *string `json:"MemAlarmThreshold,omitempty" xml:"MemAlarmThreshold,omitempty"`
	NoticeSwitch       *string `json:"NoticeSwitch,omitempty" xml:"NoticeSwitch,omitempty"`
	Phones             *string `json:"Phones,omitempty" xml:"Phones,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success            *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeDedicatedClusterMonitorRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedClusterMonitorRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetCpuAlarmThreshold(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.CpuAlarmThreshold = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetDedicatedClusterId(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetDiskAlarmThreshold(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.DiskAlarmThreshold = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetDuAlarmThreshold(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.DuAlarmThreshold = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetErrCode(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetErrMessage(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetHttpStatusCode(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetMemAlarmThreshold(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.MemAlarmThreshold = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetNoticeSwitch(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.NoticeSwitch = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetPhones(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.Phones = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetRequestId(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponseBody) SetSuccess(v string) *DescribeDedicatedClusterMonitorRuleResponseBody {
	s.Success = &v
	return s
}

type DescribeDedicatedClusterMonitorRuleResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDedicatedClusterMonitorRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDedicatedClusterMonitorRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDedicatedClusterMonitorRuleResponse) GoString() string {
	return s.String()
}

func (s *DescribeDedicatedClusterMonitorRuleResponse) SetHeaders(v map[string]*string) *DescribeDedicatedClusterMonitorRuleResponse {
	s.Headers = v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponse) SetStatusCode(v int32) *DescribeDedicatedClusterMonitorRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDedicatedClusterMonitorRuleResponse) SetBody(v *DescribeDedicatedClusterMonitorRuleResponseBody) *DescribeDedicatedClusterMonitorRuleResponse {
	s.Body = v
	return s
}

type DescribeDtsEtlJobVersionInfoRequest struct {
	// The ID of the Data Transmission Service (DTS) instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the ETL task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The number of the page to return. Default value: 1.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region in which the DTS instance resides. You can call the [DescribeRegions](~~25609~~) operation to query the available Alibaba Cloud regions.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDtsEtlJobVersionInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsEtlJobVersionInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDtsEtlJobVersionInfoRequest) SetDtsInstanceId(v string) *DescribeDtsEtlJobVersionInfoRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoRequest) SetDtsJobId(v string) *DescribeDtsEtlJobVersionInfoRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoRequest) SetPageNumber(v int32) *DescribeDtsEtlJobVersionInfoRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoRequest) SetPageSize(v int32) *DescribeDtsEtlJobVersionInfoRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoRequest) SetRegionId(v string) *DescribeDtsEtlJobVersionInfoRequest {
	s.RegionId = &v
	return s
}

type DescribeDtsEtlJobVersionInfoResponseBody struct {
	// The details of ETL tasks.
	DtsEtlJobVersionInfos []*DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos `json:"DtsEtlJobVersionInfos,omitempty" xml:"DtsEtlJobVersionInfos,omitempty" type:"Repeated"`
	// The dynamic error code.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code. This example indicates that the specified ETL task ID is invalid.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message. This example indicates that the specified ETL task ID does not exist. In this case, the ETL task may have been deleted.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The page number of the returned page. Default value: 1.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of records returned on the current page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. If the call failed, false is returned.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of records.
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeDtsEtlJobVersionInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsEtlJobVersionInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetDtsEtlJobVersionInfos(v []*DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.DtsEtlJobVersionInfos = v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetDynamicCode(v string) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetDynamicMessage(v string) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetErrCode(v string) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetErrMessage(v string) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetHttpStatusCode(v string) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetPageNumber(v int32) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetPageRecordCount(v int32) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetRequestId(v string) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetSuccess(v bool) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBody) SetTotalRecordCount(v int32) *DescribeDtsEtlJobVersionInfoResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos struct {
	// The time when the ETL task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the creator.
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The username of the creator.
	CreatorName *string `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	// The ID of the DTS instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the ETL task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The name of the ETL task.
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The time when the ETL task was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The safe checkpoint of the ETL task.
	SafeCheckpoint *string `json:"SafeCheckpoint,omitempty" xml:"SafeCheckpoint,omitempty"`
	// The log level. Valid values: ERROR, WARN, INFO, and DEBUG.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The version number of the ETL task.
	Version *int32 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) GoString() string {
	return s.String()
}

func (s *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) SetCreateTime(v string) *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos {
	s.CreateTime = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) SetCreator(v string) *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos {
	s.Creator = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) SetCreatorName(v string) *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos {
	s.CreatorName = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) SetDtsInstanceId(v string) *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos {
	s.DtsInstanceId = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) SetDtsJobId(v string) *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) SetDtsJobName(v string) *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos {
	s.DtsJobName = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) SetModifyTime(v string) *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos {
	s.ModifyTime = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) SetSafeCheckpoint(v string) *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos {
	s.SafeCheckpoint = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) SetStatus(v string) *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos {
	s.Status = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos) SetVersion(v int32) *DescribeDtsEtlJobVersionInfoResponseBodyDtsEtlJobVersionInfos {
	s.Version = &v
	return s
}

type DescribeDtsEtlJobVersionInfoResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDtsEtlJobVersionInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDtsEtlJobVersionInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsEtlJobVersionInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDtsEtlJobVersionInfoResponse) SetHeaders(v map[string]*string) *DescribeDtsEtlJobVersionInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponse) SetStatusCode(v int32) *DescribeDtsEtlJobVersionInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDtsEtlJobVersionInfoResponse) SetBody(v *DescribeDtsEtlJobVersionInfoResponseBody) *DescribeDtsEtlJobVersionInfoResponse {
	s.Body = v
	return s
}

type DescribeDtsJobDetailRequest struct {
	// DescribeDtsJobDetail
	DtsInstanceID *string `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	// The state of the data migration or data synchronization task.
	//
	// Valid values for a data migration task:
	//
	// *   **NotStarted**: The migration is not started.
	// *   **Migrating**: The migration is in progress.
	// *   **Failed**: The migration failed.
	// *   **Finished**: The migration is complete.
	//
	// Valid values for a data synchronization task:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is in precheck.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **Initializing**: The task is performing initial synchronization.
	// *   **InitializeFailed**: Initial synchronization failed.
	// *   **Synchronizing**: The task is in progress.
	// *   **Failed**: The task failed to synchronize data.
	// *   **Suspending**: The task is paused.
	// *   **Modifying**: The objects in the task are being modified.
	// *   **Finished**: The task is complete.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task.
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SyncSubJobHistory *bool   `json:"SyncSubJobHistory,omitempty" xml:"SyncSubJobHistory,omitempty"`
	// Queries the details of a data migration, data synchronization, or change tracking task.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s DescribeDtsJobDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailRequest) SetDtsInstanceID(v string) *DescribeDtsJobDetailRequest {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailRequest) SetDtsJobId(v string) *DescribeDtsJobDetailRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobDetailRequest) SetRegionId(v string) *DescribeDtsJobDetailRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDtsJobDetailRequest) SetSyncSubJobHistory(v bool) *DescribeDtsJobDetailRequest {
	s.SyncSubJobHistory = &v
	return s
}

func (s *DescribeDtsJobDetailRequest) SetSynchronizationDirection(v string) *DescribeDtsJobDetailRequest {
	s.SynchronizationDirection = &v
	return s
}

type DescribeDtsJobDetailResponseBody struct {
	// The number of ApsaraDB RDS for MySQL instances that are attached to the source PolarDB-X 1.0 instance.
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	BeginTimestamp *string `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	Binlog         *string `json:"Binlog,omitempty" xml:"Binlog,omitempty"`
	BinlogSite     *string `json:"BinlogSite,omitempty" xml:"BinlogSite,omitempty"`
	BinlogTime     *string `json:"BinlogTime,omitempty" xml:"BinlogTime,omitempty"`
	BootTime       *string `json:"BootTime,omitempty" xml:"BootTime,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking instance.
	Checkpoint *int64 `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The topic of the change tracking instance.
	//
	// >  This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](~~122863~~) operation to create a consumer group.
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The downstream client information in the following format: \<IP address of the downstream client>:\<Random ID generated by DTS>.
	ConsumptionCheckpoint *string `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	// The error code returned if the request failed.
	ConsumptionClient *string `json:"ConsumptionClient,omitempty" xml:"ConsumptionClient,omitempty"`
	// The end time of the task. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	CreateTime                *string                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataDeliveryChannelInfo   *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo   `json:"DataDeliveryChannelInfo,omitempty" xml:"DataDeliveryChannelInfo,omitempty" type:"Struct"`
	DataSynchronizationStatus *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	// The point in time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	DatabaseCount *int32 `json:"DatabaseCount,omitempty" xml:"DatabaseCount,omitempty"`
	// Indicates whether the request was successful.
	DbObject           *string `json:"DbObject,omitempty" xml:"DbObject,omitempty"`
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The ID of the request.
	Delay   *int64 `json:"Delay,omitempty" xml:"Delay,omitempty"`
	DemoJob *bool  `json:"DemoJob,omitempty" xml:"DemoJob,omitempty"`
	// The instance class.
	//
	// >  For more information about the test performance of each instance class, see [Specifications of data migration instances](~~26606~~) and [Specifications of data synchronization instances](~~26605~~).
	DestNetType *string `json:"DestNetType,omitempty" xml:"DestNetType,omitempty"`
	// The name of the database that contains the objects to be migrated from the source instance.
	DestinationEndpoint *DescribeDtsJobDetailResponseBodyDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	DtsBisLabel         *string                                              `json:"DtsBisLabel,omitempty" xml:"DtsBisLabel,omitempty"`
	// Indicates whether the new change tracking feature is used.
	//
	// >  This parameter is returned only for change tracking instances of the new version.
	DtsInstanceID *string `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	// The billing method of the instance. Valid values:
	//
	// *   **PrePaid**: subscription
	// *   **PostPaid**: pay-as-you-go
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The beginning of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	DtsJobDirection *string `json:"DtsJobDirection,omitempty" xml:"DtsJobDirection,omitempty"`
	// API test
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >
	// *   Default value: **Forward**.
	// *   The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The error message returned if the request failed.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).
	EndTimestamp *string `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	// The start offset of incremental data migration or synchronization. The value is a UNIX timestamp. Unit: seconds.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The point in time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// >  This parameter is returned only if the return value of the **PayType** parameter is **PrePaid**.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The name of the data migration, data synchronization, or change tracking task.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](~~209545~~).
	EtlCalculator *string `json:"EtlCalculator,omitempty" xml:"EtlCalculator,omitempty"`
	// The error code. This parameter will be removed in the future.
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The state of the data migration or data synchronization task.
	//
	// Valid values for a data migration task:
	//
	// *   **NotStarted**: The migration is not started.
	// *   **Migrating**: The migration is in progress.
	// *   **Failed**: The migration failed.
	// *   **Finished**: The migration is complete.
	//
	// Valid values for a data synchronization task:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is in precheck.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **Initializing**: The task is performing initial synchronization.
	// *   **InitializeFailed**: Initial synchronization failed.
	// *   **Synchronizing**: The task is in progress.
	// *   **Failed**: The task failed to synchronize data.
	// *   **Suspending**: The task is paused.
	// *   **Modifying**: The objects in the task are being modified.
	// *   **Finished**: The task is complete.
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The operator information of the extract, transform, and load (ETL) task.
	//
	// >  This parameter is returned only if you query the details of an ETL task.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the \*\*%s\*\* variable in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	JobType        *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	LastUpdateTime *string `json:"LastUpdateTime,omitempty" xml:"LastUpdateTime,omitempty"`
	// The type of the destination instance.
	MigrationMode *DescribeDtsJobDetailResponseBodyMigrationMode `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	// The error message returned if the task failed.
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The network type of the consumer client. Valid values:
	//
	// *   **CLASSIC**: classic network
	// *   **VPC**: Virtual Private Cloud (VPC)
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task.
	Reserved                 *string                                     `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	ResourceGroupDisplayName *string                                     `json:"ResourceGroupDisplayName,omitempty" xml:"ResourceGroupDisplayName,omitempty"`
	ResourceGroupId          *string                                     `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	RetryState               *DescribeDtsJobDetailResponseBodyRetryState `json:"RetryState,omitempty" xml:"RetryState,omitempty" type:"Struct"`
	// The ID of the DTS task.
	SourceEndpoint *DescribeDtsJobDetailResponseBodySourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The ID of the data migration, data synchronization, or change tracking instance.
	Status            *string                                              `json:"Status,omitempty" xml:"Status,omitempty"`
	SubDistributedJob []*DescribeDtsJobDetailResponseBodySubDistributedJob `json:"SubDistributedJob,omitempty" xml:"SubDistributedJob,omitempty" type:"Repeated"`
	SubSyncJob        []*DescribeDtsJobDetailResponseBodySubSyncJob        `json:"SubSyncJob,omitempty" xml:"SubSyncJob,omitempty" type:"Repeated"`
	// The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	SubscribeTopic *string `json:"SubscribeTopic,omitempty" xml:"SubscribeTopic,omitempty"`
	// The VPC endpoint of the change tracking instance in the `<Address>:<Port number>` format.
	SubscriptionDataType *DescribeDtsJobDetailResponseBodySubscriptionDataType `json:"SubscriptionDataType,omitempty" xml:"SubscriptionDataType,omitempty" type:"Struct"`
	// Indicates whether full data migration or synchronization is performed. Valid values:
	//
	// *   **true**: Full data migration or synchronization is performed.
	// *   **false**: Full data migration or synchronization is not performed.
	SubscriptionHost *DescribeDtsJobDetailResponseBodySubscriptionHost `json:"SubscriptionHost,omitempty" xml:"SubscriptionHost,omitempty" type:"Struct"`
	// The latency of incremental data migration or synchronization.
	//
	// >  If you query data migration tasks, the unit of this parameter is milliseconds. If you query data synchronization tasks, the unit of this parameter is seconds.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The status code returned.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	TaskType                 *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeDtsJobDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBody) SetAppName(v string) *DescribeDtsJobDetailResponseBody {
	s.AppName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetBeginTimestamp(v string) *DescribeDtsJobDetailResponseBody {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetBinlog(v string) *DescribeDtsJobDetailResponseBody {
	s.Binlog = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetBinlogSite(v string) *DescribeDtsJobDetailResponseBody {
	s.BinlogSite = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetBinlogTime(v string) *DescribeDtsJobDetailResponseBody {
	s.BinlogTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetBootTime(v string) *DescribeDtsJobDetailResponseBody {
	s.BootTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetCheckpoint(v int64) *DescribeDtsJobDetailResponseBody {
	s.Checkpoint = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetCode(v int32) *DescribeDtsJobDetailResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetConsumptionCheckpoint(v string) *DescribeDtsJobDetailResponseBody {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetConsumptionClient(v string) *DescribeDtsJobDetailResponseBody {
	s.ConsumptionClient = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetCreateTime(v string) *DescribeDtsJobDetailResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDataDeliveryChannelInfo(v *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo) *DescribeDtsJobDetailResponseBody {
	s.DataDeliveryChannelInfo = v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDataSynchronizationStatus(v *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus) *DescribeDtsJobDetailResponseBody {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDatabaseCount(v int32) *DescribeDtsJobDetailResponseBody {
	s.DatabaseCount = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDbObject(v string) *DescribeDtsJobDetailResponseBody {
	s.DbObject = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDedicatedClusterId(v string) *DescribeDtsJobDetailResponseBody {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDelay(v int64) *DescribeDtsJobDetailResponseBody {
	s.Delay = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDemoJob(v bool) *DescribeDtsJobDetailResponseBody {
	s.DemoJob = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDestNetType(v string) *DescribeDtsJobDetailResponseBody {
	s.DestNetType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDestinationEndpoint(v *DescribeDtsJobDetailResponseBodyDestinationEndpoint) *DescribeDtsJobDetailResponseBody {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDtsBisLabel(v string) *DescribeDtsJobDetailResponseBody {
	s.DtsBisLabel = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDtsInstanceID(v string) *DescribeDtsJobDetailResponseBody {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDtsJobClass(v string) *DescribeDtsJobDetailResponseBody {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDtsJobDirection(v string) *DescribeDtsJobDetailResponseBody {
	s.DtsJobDirection = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDtsJobId(v string) *DescribeDtsJobDetailResponseBody {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDtsJobName(v string) *DescribeDtsJobDetailResponseBody {
	s.DtsJobName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetDynamicMessage(v string) *DescribeDtsJobDetailResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetEndTimestamp(v string) *DescribeDtsJobDetailResponseBody {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetErrCode(v string) *DescribeDtsJobDetailResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetErrMessage(v string) *DescribeDtsJobDetailResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetEtlCalculator(v string) *DescribeDtsJobDetailResponseBody {
	s.EtlCalculator = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetExpireTime(v string) *DescribeDtsJobDetailResponseBody {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetFinishTime(v string) *DescribeDtsJobDetailResponseBody {
	s.FinishTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetGroupId(v string) *DescribeDtsJobDetailResponseBody {
	s.GroupId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetHttpStatusCode(v int32) *DescribeDtsJobDetailResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetJobType(v string) *DescribeDtsJobDetailResponseBody {
	s.JobType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetLastUpdateTime(v string) *DescribeDtsJobDetailResponseBody {
	s.LastUpdateTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetMigrationMode(v *DescribeDtsJobDetailResponseBodyMigrationMode) *DescribeDtsJobDetailResponseBody {
	s.MigrationMode = v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetPayType(v string) *DescribeDtsJobDetailResponseBody {
	s.PayType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetRequestId(v string) *DescribeDtsJobDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetReserved(v string) *DescribeDtsJobDetailResponseBody {
	s.Reserved = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetResourceGroupDisplayName(v string) *DescribeDtsJobDetailResponseBody {
	s.ResourceGroupDisplayName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetResourceGroupId(v string) *DescribeDtsJobDetailResponseBody {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetRetryState(v *DescribeDtsJobDetailResponseBodyRetryState) *DescribeDtsJobDetailResponseBody {
	s.RetryState = v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetSourceEndpoint(v *DescribeDtsJobDetailResponseBodySourceEndpoint) *DescribeDtsJobDetailResponseBody {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetStatus(v string) *DescribeDtsJobDetailResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetSubDistributedJob(v []*DescribeDtsJobDetailResponseBodySubDistributedJob) *DescribeDtsJobDetailResponseBody {
	s.SubDistributedJob = v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetSubSyncJob(v []*DescribeDtsJobDetailResponseBodySubSyncJob) *DescribeDtsJobDetailResponseBody {
	s.SubSyncJob = v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetSubscribeTopic(v string) *DescribeDtsJobDetailResponseBody {
	s.SubscribeTopic = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetSubscriptionDataType(v *DescribeDtsJobDetailResponseBodySubscriptionDataType) *DescribeDtsJobDetailResponseBody {
	s.SubscriptionDataType = v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetSubscriptionHost(v *DescribeDtsJobDetailResponseBodySubscriptionHost) *DescribeDtsJobDetailResponseBody {
	s.SubscriptionHost = v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetSuccess(v bool) *DescribeDtsJobDetailResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetSynchronizationDirection(v string) *DescribeDtsJobDetailResponseBody {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBody) SetTaskType(v string) *DescribeDtsJobDetailResponseBody {
	s.TaskType = &v
	return s
}

type DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo struct {
	PartitionNum    *int32  `json:"PartitionNum,omitempty" xml:"PartitionNum,omitempty"`
	PublicDproxyUrl *string `json:"PublicDproxyUrl,omitempty" xml:"PublicDproxyUrl,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Topic           *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	VpcDproxyUrl    *string `json:"VpcDproxyUrl,omitempty" xml:"VpcDproxyUrl,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo) SetPartitionNum(v int32) *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo {
	s.PartitionNum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo) SetPublicDproxyUrl(v string) *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo {
	s.PublicDproxyUrl = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo) SetRegion(v string) *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo) SetTopic(v string) *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo {
	s.Topic = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo) SetVpcDproxyUrl(v string) *DescribeDtsJobDetailResponseBodyDataDeliveryChannelInfo {
	s.VpcDproxyUrl = &v
	return s
}

type DescribeDtsJobDetailResponseBodyDataSynchronizationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodyDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodyDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodyDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodyDestinationEndpoint struct {
	CanModifyPassword *bool `json:"CanModifyPassword,omitempty" xml:"CanModifyPassword,omitempty"`
	// The connection settings of the destination instance.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database service port of the destination instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The name of the database that contains the migrated objects in the destination instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The IP address of the destination instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The SID of the Oracle database.
	//
	// >  This parameter is returned only if the **EngineName** parameter of the destination instance is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The username of the account that is used to connect to the source database.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The ID of the region in which the destination instance resides. For more information, see [List of supported regions](~~141033~~).
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// Indicates whether SSL encryption is enabled. Valid values:
	//
	// *   **DISABLE**: SSL encryption is disabled.
	// *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled, and the CA certificate is uploaded.
	// *   **ENABLE_ONLY\_4\_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
	// *   **ENABLE_ONLY\_4\_KAFKA_SCRAM_SHA\_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The ID of the Alibaba Cloud account to which the source ApsaraDB RDS instance belongs.
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	// The ID of the destination instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodyDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodyDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetCanModifyPassword(v bool) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.CanModifyPassword = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetDatabaseName(v string) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetEngineName(v string) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetInstanceID(v string) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetInstanceType(v string) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetIp(v string) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetOracleSID(v string) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetPort(v string) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetRegion(v string) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyDestinationEndpoint) SetUserName(v string) *DescribeDtsJobDetailResponseBodyDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobDetailResponseBodyMigrationMode struct {
	// The database account of the destination instance.
	DataExtractTransformLoad *bool `json:"DataExtractTransformLoad,omitempty" xml:"DataExtractTransformLoad,omitempty"`
	// The database engine of the destination instance.
	DataInitialization *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// The migration types or synchronization types.
	DataSynchronization *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// Indicates whether data transformation is performed. Valid values:
	//
	// *   **true**: Data transformation is performed.
	// *   **false**: Data transformation is not performed.
	StructureInitialization *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodyMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodyMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodyMigrationMode) SetDataExtractTransformLoad(v bool) *DescribeDtsJobDetailResponseBodyMigrationMode {
	s.DataExtractTransformLoad = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyMigrationMode) SetDataInitialization(v bool) *DescribeDtsJobDetailResponseBodyMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyMigrationMode) SetDataSynchronization(v bool) *DescribeDtsJobDetailResponseBodyMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyMigrationMode) SetStructureInitialization(v bool) *DescribeDtsJobDetailResponseBodyMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeDtsJobDetailResponseBodyRetryState struct {
	ErrMessage   *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MaxRetryTime *int32  `json:"MaxRetryTime,omitempty" xml:"MaxRetryTime,omitempty"`
	Module       *string `json:"Module,omitempty" xml:"Module,omitempty"`
	RetryCount   *int32  `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	RetryTarget  *string `json:"RetryTarget,omitempty" xml:"RetryTarget,omitempty"`
	RetryTime    *int32  `json:"RetryTime,omitempty" xml:"RetryTime,omitempty"`
	Retrying     *bool   `json:"Retrying,omitempty" xml:"Retrying,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodyRetryState) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodyRetryState) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodyRetryState) SetErrMessage(v string) *DescribeDtsJobDetailResponseBodyRetryState {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyRetryState) SetJobId(v string) *DescribeDtsJobDetailResponseBodyRetryState {
	s.JobId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyRetryState) SetMaxRetryTime(v int32) *DescribeDtsJobDetailResponseBodyRetryState {
	s.MaxRetryTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyRetryState) SetModule(v string) *DescribeDtsJobDetailResponseBodyRetryState {
	s.Module = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyRetryState) SetRetryCount(v int32) *DescribeDtsJobDetailResponseBodyRetryState {
	s.RetryCount = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyRetryState) SetRetryTarget(v string) *DescribeDtsJobDetailResponseBodyRetryState {
	s.RetryTarget = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyRetryState) SetRetryTime(v int32) *DescribeDtsJobDetailResponseBodyRetryState {
	s.RetryTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodyRetryState) SetRetrying(v bool) *DescribeDtsJobDetailResponseBodyRetryState {
	s.Retrying = &v
	return s
}

type DescribeDtsJobDetailResponseBodySourceEndpoint struct {
	// The database engine of the source instance.
	AliyunUid         *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	CanModifyPassword *bool   `json:"CanModifyPassword,omitempty" xml:"CanModifyPassword,omitempty"`
	// The database service port of the source instance.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The name of the RAM role configured for the Alibaba Cloud account that owns the source instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The system ID (SID) of the Oracle database.
	//
	// >  This parameter is returned only if the **EngineName** parameter of the source instance is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The IP address of the source instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The connection settings of the source instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The ID of the source instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The type of the source instance.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// Indicates whether SSL encryption is enabled. Valid values:
	//
	// *   **DISABLE**: SSL encryption is disabled.
	// *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled, and the CA certificate is uploaded.
	// *   **ENABLE_ONLY\_4\_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
	// *   **ENABLE_ONLY\_4\_KAFKA_SCRAM_SHA\_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
	RoleName *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >  This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	// The ID of the region in which the source instance resides. For more information, see [List of supported regions](~~141033~~).
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetAliyunUid(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.AliyunUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetCanModifyPassword(v bool) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.CanModifyPassword = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetDatabaseName(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetEngineName(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetInstanceID(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetInstanceType(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetIp(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetOracleSID(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetPort(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetRegion(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetRoleName(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.RoleName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySourceEndpoint) SetUserName(v string) *DescribeDtsJobDetailResponseBodySourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJob struct {
	AppName                       *string                                                                         `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTimestamp                *string                                                                         `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	Checkpoint                    *string                                                                         `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	ConsumptionCheckpoint         *string                                                                         `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	ConsumptionClient             *string                                                                         `json:"ConsumptionClient,omitempty" xml:"ConsumptionClient,omitempty"`
	CreateTime                    *string                                                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataEtlStatus                 *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus                 `json:"DataEtlStatus,omitempty" xml:"DataEtlStatus,omitempty" type:"Struct"`
	DataInitializationStatus      *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus      `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	DataSynchronizationStatus     *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus     `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	DatabaseCount                 *int32                                                                          `json:"DatabaseCount,omitempty" xml:"DatabaseCount,omitempty"`
	DbObject                      *string                                                                         `json:"DbObject,omitempty" xml:"DbObject,omitempty"`
	Delay                         *int64                                                                          `json:"Delay,omitempty" xml:"Delay,omitempty"`
	DestNetType                   *string                                                                         `json:"DestNetType,omitempty" xml:"DestNetType,omitempty"`
	DestinationEndpoint           *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint           `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	DtsInstanceID                 *string                                                                         `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	DtsJobClass                   *string                                                                         `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	DtsJobDirection               *string                                                                         `json:"DtsJobDirection,omitempty" xml:"DtsJobDirection,omitempty"`
	DtsJobId                      *string                                                                         `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	DtsJobName                    *string                                                                         `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	EndTimestamp                  *string                                                                         `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	ErrorMessage                  *string                                                                         `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	EtlCalculator                 *string                                                                         `json:"EtlCalculator,omitempty" xml:"EtlCalculator,omitempty"`
	ExpireTime                    *string                                                                         `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	FinishTime                    *string                                                                         `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	GroupId                       *string                                                                         `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	IsDemoJob                     *bool                                                                           `json:"IsDemoJob,omitempty" xml:"IsDemoJob,omitempty"`
	JobType                       *string                                                                         `json:"JobType,omitempty" xml:"JobType,omitempty"`
	MigrationMode                 *DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode                 `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	OriginType                    *string                                                                         `json:"OriginType,omitempty" xml:"OriginType,omitempty"`
	PayType                       *string                                                                         `json:"PayType,omitempty" xml:"PayType,omitempty"`
	Performance                   *DescribeDtsJobDetailResponseBodySubDistributedJobPerformance                   `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Struct"`
	PrecheckStatus                *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus                `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	Reserved                      *string                                                                         `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	RetryState                    *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState                    `json:"RetryState,omitempty" xml:"RetryState,omitempty" type:"Struct"`
	ReverseJob                    *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob                    `json:"ReverseJob,omitempty" xml:"ReverseJob,omitempty" type:"Struct"`
	SourceEndpoint                *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint                `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	Status                        *string                                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	StructureInitializationStatus *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
	SubSyncJob                    []interface{}                                                                   `json:"SubSyncJob,omitempty" xml:"SubSyncJob,omitempty" type:"Repeated"`
	SubscribeTopic                *string                                                                         `json:"SubscribeTopic,omitempty" xml:"SubscribeTopic,omitempty"`
	SubscriptionDataType          *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType          `json:"SubscriptionDataType,omitempty" xml:"SubscriptionDataType,omitempty" type:"Struct"`
	SubscriptionHost              *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost              `json:"SubscriptionHost,omitempty" xml:"SubscriptionHost,omitempty" type:"Struct"`
	SynchronizationDirection      *string                                                                         `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	TagList                       []*DescribeDtsJobDetailResponseBodySubDistributedJobTagList                     `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TaskType                      *string                                                                         `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJob) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetAppName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.AppName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetBeginTimestamp(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetCheckpoint(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.Checkpoint = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetConsumptionCheckpoint(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetConsumptionClient(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.ConsumptionClient = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetCreateTime(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.CreateTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDataEtlStatus(v *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DataEtlStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDataInitializationStatus(v *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDataSynchronizationStatus(v *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDatabaseCount(v int32) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DatabaseCount = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDbObject(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DbObject = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDelay(v int64) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.Delay = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDestNetType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DestNetType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDestinationEndpoint(v *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDtsInstanceID(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDtsJobClass(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDtsJobDirection(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DtsJobDirection = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDtsJobId(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetDtsJobName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.DtsJobName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetEndTimestamp(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetEtlCalculator(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.EtlCalculator = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetExpireTime(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetFinishTime(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.FinishTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetGroupId(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.GroupId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetIsDemoJob(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.IsDemoJob = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetJobType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.JobType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetMigrationMode(v *DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.MigrationMode = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetOriginType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.OriginType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetPayType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.PayType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetPerformance(v *DescribeDtsJobDetailResponseBodySubDistributedJobPerformance) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.Performance = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetPrecheckStatus(v *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetReserved(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.Reserved = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetRetryState(v *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.RetryState = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetReverseJob(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.ReverseJob = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetSourceEndpoint(v *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.Status = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetStructureInitializationStatus(v *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.StructureInitializationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetSubSyncJob(v []interface{}) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.SubSyncJob = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetSubscribeTopic(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.SubscribeTopic = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetSubscriptionDataType(v *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.SubscriptionDataType = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetSubscriptionHost(v *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.SubscriptionHost = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetSynchronizationDirection(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetTagList(v []*DescribeDtsJobDetailResponseBodySubDistributedJobTagList) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.TagList = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJob) SetTaskType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJob {
	s.TaskType = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataEtlStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint struct {
	AliyunUid       *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	DatabaseName    *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EngineName      *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	InstanceID      *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	OracleSID       *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetAliyunUid(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.AliyunUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetDatabaseName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetEngineName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetInstanceID(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetInstanceType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetIp(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetOracleSID(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetPort(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetRegion(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetRoleName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.RoleName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint) SetUserName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode struct {
	DataExtractTransformLoad *bool `json:"DataExtractTransformLoad,omitempty" xml:"DataExtractTransformLoad,omitempty"`
	DataInitialization       *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	DataSynchronization      *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	StructureInitialization  *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode) SetDataExtractTransformLoad(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode {
	s.DataExtractTransformLoad = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode) SetDataInitialization(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode) SetDataSynchronization(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode) SetStructureInitialization(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobPerformance struct {
	Flow *string `json:"Flow,omitempty" xml:"Flow,omitempty"`
	Rps  *string `json:"Rps,omitempty" xml:"Rps,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobPerformance) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPerformance) SetFlow(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobPerformance {
	s.Flow = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPerformance) SetRps(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobPerformance {
	s.Rps = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus struct {
	Detail       []*DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	ErrorMessage *string                                                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Percent      *string                                                                  `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Status       *string                                                                  `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus) SetDetail(v []*DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail) *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail struct {
	CheckItem            *string `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	CheckItemDescription *string `json:"CheckItemDescription,omitempty" xml:"CheckItemDescription,omitempty"`
	CheckResult          *string `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	FailedReason         *string `json:"FailedReason,omitempty" xml:"FailedReason,omitempty"`
	RepairMethod         *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail) SetCheckItem(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail {
	s.CheckItem = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail) SetCheckItemDescription(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail {
	s.CheckItemDescription = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail) SetCheckResult(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail {
	s.CheckResult = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail) SetFailedReason(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail {
	s.FailedReason = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail) SetRepairMethod(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobRetryState struct {
	ErrMsg       *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MaxRetryTime *int32  `json:"MaxRetryTime,omitempty" xml:"MaxRetryTime,omitempty"`
	Module       *string `json:"Module,omitempty" xml:"Module,omitempty"`
	RetryCount   *int32  `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// srcDB/destDB/metaDB/dstore
	RetryTarget *string `json:"RetryTarget,omitempty" xml:"RetryTarget,omitempty"`
	RetryTime   *int32  `json:"RetryTime,omitempty" xml:"RetryTime,omitempty"`
	Retrying    *bool   `json:"Retrying,omitempty" xml:"Retrying,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) SetErrMsg(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState {
	s.ErrMsg = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) SetJobId(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState {
	s.JobId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) SetMaxRetryTime(v int32) *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState {
	s.MaxRetryTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) SetModule(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState {
	s.Module = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) SetRetryCount(v int32) *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState {
	s.RetryCount = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) SetRetryTarget(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState {
	s.RetryTarget = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) SetRetryTime(v int32) *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState {
	s.RetryTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState) SetRetrying(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobRetryState {
	s.Retrying = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob struct {
	AppName                       *string                                                                                   `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTimestamp                *string                                                                                   `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	Checkpoint                    *string                                                                                   `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	ConsumptionCheckpoint         *string                                                                                   `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	ConsumptionClient             *string                                                                                   `json:"ConsumptionClient,omitempty" xml:"ConsumptionClient,omitempty"`
	CreateTime                    *string                                                                                   `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataEtlStatus                 *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus                 `json:"DataEtlStatus,omitempty" xml:"DataEtlStatus,omitempty" type:"Struct"`
	DataInitializationStatus      *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus      `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	DataSynchronizationStatus     *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus     `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	DatabaseCount                 *int32                                                                                    `json:"DatabaseCount,omitempty" xml:"DatabaseCount,omitempty"`
	DbObject                      *string                                                                                   `json:"DbObject,omitempty" xml:"DbObject,omitempty"`
	Delay                         *int64                                                                                    `json:"Delay,omitempty" xml:"Delay,omitempty"`
	DestNetType                   *string                                                                                   `json:"DestNetType,omitempty" xml:"DestNetType,omitempty"`
	DestinationEndpoint           *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint           `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	DtsInstanceID                 *string                                                                                   `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	DtsJobClass                   *string                                                                                   `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	DtsJobDirection               *string                                                                                   `json:"DtsJobDirection,omitempty" xml:"DtsJobDirection,omitempty"`
	DtsJobId                      *string                                                                                   `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	DtsJobName                    *string                                                                                   `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	EndTimestamp                  *string                                                                                   `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	ErrorMessage                  *string                                                                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	EtlCalculator                 *string                                                                                   `json:"EtlCalculator,omitempty" xml:"EtlCalculator,omitempty"`
	ExpireTime                    *string                                                                                   `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	FinishTime                    *string                                                                                   `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	GroupId                       *string                                                                                   `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	IsDemoJob                     *bool                                                                                     `json:"IsDemoJob,omitempty" xml:"IsDemoJob,omitempty"`
	JobType                       *string                                                                                   `json:"JobType,omitempty" xml:"JobType,omitempty"`
	MigrationMode                 *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode                 `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	OriginType                    *string                                                                                   `json:"OriginType,omitempty" xml:"OriginType,omitempty"`
	PayType                       *string                                                                                   `json:"PayType,omitempty" xml:"PayType,omitempty"`
	Performance                   *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance                   `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Struct"`
	PrecheckStatus                *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus                `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	Reserved                      *string                                                                                   `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	RetryState                    *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState                    `json:"RetryState,omitempty" xml:"RetryState,omitempty" type:"Struct"`
	ReverseJob                    interface{}                                                                               `json:"ReverseJob,omitempty" xml:"ReverseJob,omitempty"`
	SourceEndpoint                *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint                `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	Status                        *string                                                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
	StructureInitializationStatus *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
	SubscribeTopic                *string                                                                                   `json:"SubscribeTopic,omitempty" xml:"SubscribeTopic,omitempty"`
	SubscriptionDataType          *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType          `json:"SubscriptionDataType,omitempty" xml:"SubscriptionDataType,omitempty" type:"Struct"`
	SubscriptionHost              *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost              `json:"SubscriptionHost,omitempty" xml:"SubscriptionHost,omitempty" type:"Struct"`
	SynchronizationDirection      *string                                                                                   `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	TagList                       []*DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList                     `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TaskType                      *string                                                                                   `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetAppName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.AppName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetBeginTimestamp(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetCheckpoint(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.Checkpoint = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetConsumptionCheckpoint(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetConsumptionClient(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.ConsumptionClient = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetCreateTime(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.CreateTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDataEtlStatus(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DataEtlStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDataInitializationStatus(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDataSynchronizationStatus(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDatabaseCount(v int32) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DatabaseCount = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDbObject(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DbObject = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDelay(v int64) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.Delay = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDestNetType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DestNetType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDestinationEndpoint(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDtsInstanceID(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDtsJobClass(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDtsJobDirection(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DtsJobDirection = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDtsJobId(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetDtsJobName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.DtsJobName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetEndTimestamp(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetEtlCalculator(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.EtlCalculator = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetExpireTime(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetFinishTime(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.FinishTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetGroupId(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.GroupId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetIsDemoJob(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.IsDemoJob = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetJobType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.JobType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetMigrationMode(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.MigrationMode = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetOriginType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.OriginType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetPayType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.PayType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetPerformance(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.Performance = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetPrecheckStatus(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetReserved(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.Reserved = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetRetryState(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.RetryState = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetReverseJob(v interface{}) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.ReverseJob = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetSourceEndpoint(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.Status = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetStructureInitializationStatus(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.StructureInitializationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetSubscribeTopic(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.SubscribeTopic = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetSubscriptionDataType(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.SubscriptionDataType = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetSubscriptionHost(v *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.SubscriptionHost = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetSynchronizationDirection(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetTagList(v []*DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.TagList = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob) SetTaskType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJob {
	s.TaskType = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataEtlStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint struct {
	AliyunUid       *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	DatabaseName    *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EngineName      *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	InstanceID      *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	OracleSID       *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetAliyunUid(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.AliyunUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetDatabaseName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetEngineName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetInstanceID(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetInstanceType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetIp(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetOracleSID(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetPort(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetRegion(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetRoleName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.RoleName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint) SetUserName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode struct {
	DataExtractTransformLoad *bool `json:"DataExtractTransformLoad,omitempty" xml:"DataExtractTransformLoad,omitempty"`
	DataInitialization       *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	DataSynchronization      *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	StructureInitialization  *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode) SetDataExtractTransformLoad(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode {
	s.DataExtractTransformLoad = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode) SetDataInitialization(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode) SetDataSynchronization(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode) SetStructureInitialization(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance struct {
	Flow *string `json:"Flow,omitempty" xml:"Flow,omitempty"`
	Rps  *string `json:"Rps,omitempty" xml:"Rps,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance) SetFlow(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance {
	s.Flow = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance) SetRps(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPerformance {
	s.Rps = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus struct {
	Detail       []*DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	ErrorMessage *string                                                                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Percent      *string                                                                            `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Status       *string                                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus) SetDetail(v []*DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail struct {
	CheckItem            *string `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	CheckItemDescription *string `json:"CheckItemDescription,omitempty" xml:"CheckItemDescription,omitempty"`
	CheckResult          *string `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	FailedReason         *string `json:"FailedReason,omitempty" xml:"FailedReason,omitempty"`
	RepairMethod         *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail) SetCheckItem(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail {
	s.CheckItem = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail) SetCheckItemDescription(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail {
	s.CheckItemDescription = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail) SetCheckResult(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail {
	s.CheckResult = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail) SetFailedReason(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail {
	s.FailedReason = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail) SetRepairMethod(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState struct {
	ErrMsg       *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MaxRetryTime *int32  `json:"MaxRetryTime,omitempty" xml:"MaxRetryTime,omitempty"`
	Module       *string `json:"Module,omitempty" xml:"Module,omitempty"`
	RetryCount   *int32  `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// srcDB/destDB/metaDB/dstore
	RetryTarget *string `json:"RetryTarget,omitempty" xml:"RetryTarget,omitempty"`
	RetryTime   *int32  `json:"RetryTime,omitempty" xml:"RetryTime,omitempty"`
	Retrying    *bool   `json:"Retrying,omitempty" xml:"Retrying,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) SetErrMsg(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState {
	s.ErrMsg = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) SetJobId(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState {
	s.JobId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) SetMaxRetryTime(v int32) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState {
	s.MaxRetryTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) SetModule(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState {
	s.Module = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) SetRetryCount(v int32) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState {
	s.RetryCount = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) SetRetryTarget(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState {
	s.RetryTarget = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) SetRetryTime(v int32) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState {
	s.RetryTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState) SetRetrying(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobRetryState {
	s.Retrying = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint struct {
	AliyunUid       *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	DatabaseName    *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EngineName      *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	InstanceID      *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	OracleSID       *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetAliyunUid(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.AliyunUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetDatabaseName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetEngineName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetInstanceID(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetInstanceType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetIp(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetOracleSID(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetPort(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetRegion(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetRoleName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.RoleName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint) SetUserName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType struct {
	Ddl *bool `json:"Ddl,omitempty" xml:"Ddl,omitempty"`
	Dml *bool `json:"Dml,omitempty" xml:"Dml,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType) SetDdl(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType {
	s.Ddl = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType) SetDml(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionDataType {
	s.Dml = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost struct {
	PrivateHost *string `json:"PrivateHost,omitempty" xml:"PrivateHost,omitempty"`
	PublicHost  *string `json:"PublicHost,omitempty" xml:"PublicHost,omitempty"`
	VpcHost     *string `json:"VpcHost,omitempty" xml:"VpcHost,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost) SetPrivateHost(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost {
	s.PrivateHost = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost) SetPublicHost(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost {
	s.PublicHost = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost) SetVpcHost(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobSubscriptionHost {
	s.VpcHost = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList struct {
	AliUid      *int64  `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	Creator     *int64  `json:"Creator,omitempty" xml:"Creator,omitempty"`
	GmtCreate   *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	// region_id
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// dts instance id
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Scope        *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	SrcRegion    *string `json:"SrcRegion,omitempty" xml:"SrcRegion,omitempty"`
	TagCategory  *string `json:"TagCategory,omitempty" xml:"TagCategory,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetAliUid(v int64) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.AliUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetCreator(v int64) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.Creator = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetGmtCreate(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetGmtModified(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.GmtModified = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetId(v int64) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.Id = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetRegionId(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.RegionId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetResourceId(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.ResourceId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetResourceType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.ResourceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetScope(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.Scope = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetSrcRegion(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.SrcRegion = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetTagCategory(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.TagCategory = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetTagKey(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.TagKey = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList) SetTagValue(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobReverseJobTagList {
	s.TagValue = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint struct {
	AliyunUid       *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	DatabaseName    *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EngineName      *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	InstanceID      *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	OracleSID       *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetAliyunUid(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.AliyunUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetDatabaseName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetEngineName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetInstanceID(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetInstanceType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetIp(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetOracleSID(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetPort(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetRegion(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetRoleName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.RoleName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint) SetUserName(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType struct {
	Ddl *bool `json:"Ddl,omitempty" xml:"Ddl,omitempty"`
	Dml *bool `json:"Dml,omitempty" xml:"Dml,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType) SetDdl(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType {
	s.Ddl = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType) SetDml(v bool) *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionDataType {
	s.Dml = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost struct {
	PrivateHost *string `json:"PrivateHost,omitempty" xml:"PrivateHost,omitempty"`
	PublicHost  *string `json:"PublicHost,omitempty" xml:"PublicHost,omitempty"`
	VpcHost     *string `json:"VpcHost,omitempty" xml:"VpcHost,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost) SetPrivateHost(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost {
	s.PrivateHost = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost) SetPublicHost(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost {
	s.PublicHost = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost) SetVpcHost(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobSubscriptionHost {
	s.VpcHost = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubDistributedJobTagList struct {
	AliUid      *int64  `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	Creator     *int64  `json:"Creator,omitempty" xml:"Creator,omitempty"`
	GmtCreate   *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	// region_id
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// dts instance id
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Scope        *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	SrcRegion    *string `json:"SrcRegion,omitempty" xml:"SrcRegion,omitempty"`
	TagCategory  *string `json:"TagCategory,omitempty" xml:"TagCategory,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubDistributedJobTagList) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetAliUid(v int64) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.AliUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetCreator(v int64) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.Creator = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetGmtCreate(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetGmtModified(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.GmtModified = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetId(v int64) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.Id = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetRegionId(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.RegionId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetResourceId(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.ResourceId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetResourceType(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.ResourceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetScope(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.Scope = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetSrcRegion(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.SrcRegion = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetTagCategory(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.TagCategory = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetTagKey(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.TagKey = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubDistributedJobTagList) SetTagValue(v string) *DescribeDtsJobDetailResponseBodySubDistributedJobTagList {
	s.TagValue = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJob struct {
	AppName                       *string                                                                  `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTimestamp                *string                                                                  `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	Checkpoint                    *string                                                                  `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	ConsumptionCheckpoint         *string                                                                  `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	ConsumptionClient             *string                                                                  `json:"ConsumptionClient,omitempty" xml:"ConsumptionClient,omitempty"`
	CreateTime                    *string                                                                  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataEtlStatus                 *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus                 `json:"DataEtlStatus,omitempty" xml:"DataEtlStatus,omitempty" type:"Struct"`
	DataInitializationStatus      *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus      `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	DataSynchronizationStatus     *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus     `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	DatabaseCount                 *int32                                                                   `json:"DatabaseCount,omitempty" xml:"DatabaseCount,omitempty"`
	DbObject                      *string                                                                  `json:"DbObject,omitempty" xml:"DbObject,omitempty"`
	Delay                         *int64                                                                   `json:"Delay,omitempty" xml:"Delay,omitempty"`
	DestNetType                   *string                                                                  `json:"DestNetType,omitempty" xml:"DestNetType,omitempty"`
	DestinationEndpoint           *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint           `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	DtsInstanceID                 *string                                                                  `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	DtsJobClass                   *string                                                                  `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	DtsJobDirection               *string                                                                  `json:"DtsJobDirection,omitempty" xml:"DtsJobDirection,omitempty"`
	DtsJobId                      *string                                                                  `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	DtsJobName                    *string                                                                  `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	EndTimestamp                  *string                                                                  `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	ErrorMessage                  *string                                                                  `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	EtlCalculator                 *string                                                                  `json:"EtlCalculator,omitempty" xml:"EtlCalculator,omitempty"`
	ExpireTime                    *string                                                                  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	FinishTime                    *string                                                                  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	GroupId                       *string                                                                  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	IsDemoJob                     *bool                                                                    `json:"IsDemoJob,omitempty" xml:"IsDemoJob,omitempty"`
	JobType                       *string                                                                  `json:"JobType,omitempty" xml:"JobType,omitempty"`
	MigrationMode                 *DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode                 `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	OriginType                    *string                                                                  `json:"OriginType,omitempty" xml:"OriginType,omitempty"`
	PayType                       *string                                                                  `json:"PayType,omitempty" xml:"PayType,omitempty"`
	Performance                   *DescribeDtsJobDetailResponseBodySubSyncJobPerformance                   `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Struct"`
	PrecheckStatus                *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus                `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	Reserved                      *string                                                                  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	RetryState                    *DescribeDtsJobDetailResponseBodySubSyncJobRetryState                    `json:"RetryState,omitempty" xml:"RetryState,omitempty" type:"Struct"`
	ReverseJob                    *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob                    `json:"ReverseJob,omitempty" xml:"ReverseJob,omitempty" type:"Struct"`
	SourceEndpoint                *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint                `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	Status                        *string                                                                  `json:"Status,omitempty" xml:"Status,omitempty"`
	StructureInitializationStatus *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
	SubSyncJob                    []interface{}                                                            `json:"SubSyncJob,omitempty" xml:"SubSyncJob,omitempty" type:"Repeated"`
	SubscribeTopic                *string                                                                  `json:"SubscribeTopic,omitempty" xml:"SubscribeTopic,omitempty"`
	SubscriptionDataType          *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType          `json:"SubscriptionDataType,omitempty" xml:"SubscriptionDataType,omitempty" type:"Struct"`
	SubscriptionHost              *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost              `json:"SubscriptionHost,omitempty" xml:"SubscriptionHost,omitempty" type:"Struct"`
	SynchronizationDirection      *string                                                                  `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	TagList                       []*DescribeDtsJobDetailResponseBodySubSyncJobTagList                     `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TaskType                      *string                                                                  `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJob) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetAppName(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.AppName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetBeginTimestamp(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetCheckpoint(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.Checkpoint = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetConsumptionCheckpoint(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetConsumptionClient(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.ConsumptionClient = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetCreateTime(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.CreateTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDataEtlStatus(v *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DataEtlStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDataInitializationStatus(v *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDataSynchronizationStatus(v *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDatabaseCount(v int32) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DatabaseCount = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDbObject(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DbObject = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDelay(v int64) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.Delay = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDestNetType(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DestNetType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDestinationEndpoint(v *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDtsInstanceID(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDtsJobClass(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDtsJobDirection(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DtsJobDirection = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDtsJobId(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetDtsJobName(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.DtsJobName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetEndTimestamp(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetEtlCalculator(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.EtlCalculator = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetExpireTime(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetFinishTime(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.FinishTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetGroupId(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.GroupId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetIsDemoJob(v bool) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.IsDemoJob = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetJobType(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.JobType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetMigrationMode(v *DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.MigrationMode = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetOriginType(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.OriginType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetPayType(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.PayType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetPerformance(v *DescribeDtsJobDetailResponseBodySubSyncJobPerformance) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.Performance = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetPrecheckStatus(v *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetReserved(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.Reserved = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetRetryState(v *DescribeDtsJobDetailResponseBodySubSyncJobRetryState) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.RetryState = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetReverseJob(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.ReverseJob = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetSourceEndpoint(v *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.Status = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetStructureInitializationStatus(v *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.StructureInitializationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetSubSyncJob(v []interface{}) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.SubSyncJob = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetSubscribeTopic(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.SubscribeTopic = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetSubscriptionDataType(v *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.SubscriptionDataType = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetSubscriptionHost(v *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.SubscriptionHost = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetSynchronizationDirection(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetTagList(v []*DescribeDtsJobDetailResponseBodySubSyncJobTagList) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.TagList = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJob) SetTaskType(v string) *DescribeDtsJobDetailResponseBodySubSyncJob {
	s.TaskType = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataEtlStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint struct {
	AliyunUid       *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	DatabaseName    *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EngineName      *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	InstanceID      *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	OracleSID       *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetAliyunUid(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.AliyunUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetDatabaseName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetEngineName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetInstanceID(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetInstanceType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetIp(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetOracleSID(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetPort(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetRegion(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetRoleName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.RoleName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint) SetUserName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode struct {
	DataExtractTransformLoad *bool `json:"DataExtractTransformLoad,omitempty" xml:"DataExtractTransformLoad,omitempty"`
	DataInitialization       *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	DataSynchronization      *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	StructureInitialization  *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode) SetDataExtractTransformLoad(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode {
	s.DataExtractTransformLoad = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode) SetDataInitialization(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode) SetDataSynchronization(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode) SetStructureInitialization(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobPerformance struct {
	Flow *string `json:"Flow,omitempty" xml:"Flow,omitempty"`
	Rps  *string `json:"Rps,omitempty" xml:"Rps,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobPerformance) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPerformance) SetFlow(v string) *DescribeDtsJobDetailResponseBodySubSyncJobPerformance {
	s.Flow = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPerformance) SetRps(v string) *DescribeDtsJobDetailResponseBodySubSyncJobPerformance {
	s.Rps = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus struct {
	Detail       []*DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	ErrorMessage *string                                                           `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Percent      *string                                                           `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Status       *string                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus) SetDetail(v []*DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail) *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail struct {
	CheckItem            *string `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	CheckItemDescription *string `json:"CheckItemDescription,omitempty" xml:"CheckItemDescription,omitempty"`
	CheckResult          *string `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	FailedReason         *string `json:"FailedReason,omitempty" xml:"FailedReason,omitempty"`
	RepairMethod         *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail) SetCheckItem(v string) *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail {
	s.CheckItem = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail) SetCheckItemDescription(v string) *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail {
	s.CheckItemDescription = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail) SetCheckResult(v string) *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail {
	s.CheckResult = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail) SetFailedReason(v string) *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail {
	s.FailedReason = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail) SetRepairMethod(v string) *DescribeDtsJobDetailResponseBodySubSyncJobPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobRetryState struct {
	ErrMsg       *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MaxRetryTime *int32  `json:"MaxRetryTime,omitempty" xml:"MaxRetryTime,omitempty"`
	Module       *string `json:"Module,omitempty" xml:"Module,omitempty"`
	RetryCount   *int32  `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// srcDB/destDB/metaDB/dstore
	RetryTarget *string `json:"RetryTarget,omitempty" xml:"RetryTarget,omitempty"`
	RetryTime   *int32  `json:"RetryTime,omitempty" xml:"RetryTime,omitempty"`
	Retrying    *bool   `json:"Retrying,omitempty" xml:"Retrying,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobRetryState) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobRetryState) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobRetryState) SetErrMsg(v string) *DescribeDtsJobDetailResponseBodySubSyncJobRetryState {
	s.ErrMsg = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobRetryState) SetJobId(v string) *DescribeDtsJobDetailResponseBodySubSyncJobRetryState {
	s.JobId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobRetryState) SetMaxRetryTime(v int32) *DescribeDtsJobDetailResponseBodySubSyncJobRetryState {
	s.MaxRetryTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobRetryState) SetModule(v string) *DescribeDtsJobDetailResponseBodySubSyncJobRetryState {
	s.Module = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobRetryState) SetRetryCount(v int32) *DescribeDtsJobDetailResponseBodySubSyncJobRetryState {
	s.RetryCount = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobRetryState) SetRetryTarget(v string) *DescribeDtsJobDetailResponseBodySubSyncJobRetryState {
	s.RetryTarget = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobRetryState) SetRetryTime(v int32) *DescribeDtsJobDetailResponseBodySubSyncJobRetryState {
	s.RetryTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobRetryState) SetRetrying(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobRetryState {
	s.Retrying = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJob struct {
	AppName                       *string                                                                            `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTimestamp                *string                                                                            `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	Checkpoint                    *string                                                                            `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	ConsumptionCheckpoint         *string                                                                            `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	ConsumptionClient             *string                                                                            `json:"ConsumptionClient,omitempty" xml:"ConsumptionClient,omitempty"`
	CreateTime                    *string                                                                            `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DataEtlStatus                 *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus                 `json:"DataEtlStatus,omitempty" xml:"DataEtlStatus,omitempty" type:"Struct"`
	DataInitializationStatus      *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus      `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	DataSynchronizationStatus     *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus     `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	DatabaseCount                 *int32                                                                             `json:"DatabaseCount,omitempty" xml:"DatabaseCount,omitempty"`
	DbObject                      *string                                                                            `json:"DbObject,omitempty" xml:"DbObject,omitempty"`
	Delay                         *int64                                                                             `json:"Delay,omitempty" xml:"Delay,omitempty"`
	DestNetType                   *string                                                                            `json:"DestNetType,omitempty" xml:"DestNetType,omitempty"`
	DestinationEndpoint           *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint           `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	DtsInstanceID                 *string                                                                            `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	DtsJobClass                   *string                                                                            `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	DtsJobDirection               *string                                                                            `json:"DtsJobDirection,omitempty" xml:"DtsJobDirection,omitempty"`
	DtsJobId                      *string                                                                            `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	DtsJobName                    *string                                                                            `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	EndTimestamp                  *string                                                                            `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	ErrorMessage                  *string                                                                            `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	EtlCalculator                 *string                                                                            `json:"EtlCalculator,omitempty" xml:"EtlCalculator,omitempty"`
	ExpireTime                    *string                                                                            `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	FinishTime                    *string                                                                            `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	GroupId                       *string                                                                            `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	IsDemoJob                     *bool                                                                              `json:"IsDemoJob,omitempty" xml:"IsDemoJob,omitempty"`
	JobType                       *string                                                                            `json:"JobType,omitempty" xml:"JobType,omitempty"`
	MigrationMode                 *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode                 `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	OriginType                    *string                                                                            `json:"OriginType,omitempty" xml:"OriginType,omitempty"`
	PayType                       *string                                                                            `json:"PayType,omitempty" xml:"PayType,omitempty"`
	Performance                   *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance                   `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Struct"`
	PrecheckStatus                *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus                `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	Reserved                      *string                                                                            `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	RetryState                    *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState                    `json:"RetryState,omitempty" xml:"RetryState,omitempty" type:"Struct"`
	ReverseJob                    interface{}                                                                        `json:"ReverseJob,omitempty" xml:"ReverseJob,omitempty"`
	SourceEndpoint                *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint                `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	Status                        *string                                                                            `json:"Status,omitempty" xml:"Status,omitempty"`
	StructureInitializationStatus *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
	SubscribeTopic                *string                                                                            `json:"SubscribeTopic,omitempty" xml:"SubscribeTopic,omitempty"`
	SubscriptionDataType          *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType          `json:"SubscriptionDataType,omitempty" xml:"SubscriptionDataType,omitempty" type:"Struct"`
	SubscriptionHost              *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost              `json:"SubscriptionHost,omitempty" xml:"SubscriptionHost,omitempty" type:"Struct"`
	SynchronizationDirection      *string                                                                            `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	TagList                       []*DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList                     `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
	TaskType                      *string                                                                            `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetAppName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.AppName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetBeginTimestamp(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetCheckpoint(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.Checkpoint = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetConsumptionCheckpoint(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetConsumptionClient(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.ConsumptionClient = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetCreateTime(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.CreateTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDataEtlStatus(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DataEtlStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDataInitializationStatus(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDataSynchronizationStatus(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDatabaseCount(v int32) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DatabaseCount = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDbObject(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DbObject = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDelay(v int64) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.Delay = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDestNetType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DestNetType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDestinationEndpoint(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDtsInstanceID(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDtsJobClass(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDtsJobDirection(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DtsJobDirection = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDtsJobId(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetDtsJobName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.DtsJobName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetEndTimestamp(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetEtlCalculator(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.EtlCalculator = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetExpireTime(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetFinishTime(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.FinishTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetGroupId(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.GroupId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetIsDemoJob(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.IsDemoJob = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetJobType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.JobType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetMigrationMode(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.MigrationMode = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetOriginType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.OriginType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetPayType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.PayType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetPerformance(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.Performance = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetPrecheckStatus(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetReserved(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.Reserved = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetRetryState(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.RetryState = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetReverseJob(v interface{}) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.ReverseJob = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetSourceEndpoint(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.Status = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetStructureInitializationStatus(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.StructureInitializationStatus = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetSubscribeTopic(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.SubscribeTopic = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetSubscriptionDataType(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.SubscriptionDataType = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetSubscriptionHost(v *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.SubscriptionHost = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetSynchronizationDirection(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetTagList(v []*DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.TagList = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob) SetTaskType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJob {
	s.TaskType = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataEtlStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint struct {
	AliyunUid       *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	DatabaseName    *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EngineName      *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	InstanceID      *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	OracleSID       *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetAliyunUid(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.AliyunUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetDatabaseName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetEngineName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetInstanceID(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetInstanceType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetIp(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetOracleSID(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetPort(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetRegion(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetRoleName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.RoleName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint) SetUserName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode struct {
	DataExtractTransformLoad *bool `json:"DataExtractTransformLoad,omitempty" xml:"DataExtractTransformLoad,omitempty"`
	DataInitialization       *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	DataSynchronization      *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	StructureInitialization  *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode) SetDataExtractTransformLoad(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode {
	s.DataExtractTransformLoad = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode) SetDataInitialization(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode) SetDataSynchronization(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode) SetStructureInitialization(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance struct {
	Flow *string `json:"Flow,omitempty" xml:"Flow,omitempty"`
	Rps  *string `json:"Rps,omitempty" xml:"Rps,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance) SetFlow(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance {
	s.Flow = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance) SetRps(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPerformance {
	s.Rps = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus struct {
	Detail       []*DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	ErrorMessage *string                                                                     `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Percent      *string                                                                     `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Status       *string                                                                     `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus) SetDetail(v []*DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail struct {
	CheckItem            *string `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	CheckItemDescription *string `json:"CheckItemDescription,omitempty" xml:"CheckItemDescription,omitempty"`
	CheckResult          *string `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	FailedReason         *string `json:"FailedReason,omitempty" xml:"FailedReason,omitempty"`
	RepairMethod         *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail) SetCheckItem(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail {
	s.CheckItem = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail) SetCheckItemDescription(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail {
	s.CheckItemDescription = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail) SetCheckResult(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail {
	s.CheckResult = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail) SetFailedReason(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail {
	s.FailedReason = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail) SetRepairMethod(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState struct {
	ErrMsg       *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MaxRetryTime *int32  `json:"MaxRetryTime,omitempty" xml:"MaxRetryTime,omitempty"`
	Module       *string `json:"Module,omitempty" xml:"Module,omitempty"`
	RetryCount   *int32  `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// srcDB/destDB/metaDB/dstore
	RetryTarget *string `json:"RetryTarget,omitempty" xml:"RetryTarget,omitempty"`
	RetryTime   *int32  `json:"RetryTime,omitempty" xml:"RetryTime,omitempty"`
	Retrying    *bool   `json:"Retrying,omitempty" xml:"Retrying,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) SetErrMsg(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState {
	s.ErrMsg = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) SetJobId(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState {
	s.JobId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) SetMaxRetryTime(v int32) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState {
	s.MaxRetryTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) SetModule(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState {
	s.Module = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) SetRetryCount(v int32) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState {
	s.RetryCount = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) SetRetryTarget(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState {
	s.RetryTarget = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) SetRetryTime(v int32) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState {
	s.RetryTime = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState) SetRetrying(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobRetryState {
	s.Retrying = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint struct {
	AliyunUid       *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	DatabaseName    *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EngineName      *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	InstanceID      *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	OracleSID       *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetAliyunUid(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.AliyunUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetDatabaseName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetEngineName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetInstanceID(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetInstanceType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetIp(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetOracleSID(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetPort(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetRegion(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetRoleName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.RoleName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint) SetUserName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType struct {
	Ddl *bool `json:"Ddl,omitempty" xml:"Ddl,omitempty"`
	Dml *bool `json:"Dml,omitempty" xml:"Dml,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType) SetDdl(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType {
	s.Ddl = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType) SetDml(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionDataType {
	s.Dml = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost struct {
	PrivateHost *string `json:"PrivateHost,omitempty" xml:"PrivateHost,omitempty"`
	PublicHost  *string `json:"PublicHost,omitempty" xml:"PublicHost,omitempty"`
	VpcHost     *string `json:"VpcHost,omitempty" xml:"VpcHost,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost) SetPrivateHost(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost {
	s.PrivateHost = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost) SetPublicHost(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost {
	s.PublicHost = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost) SetVpcHost(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobSubscriptionHost {
	s.VpcHost = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList struct {
	AliUid      *int64  `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	Creator     *int64  `json:"Creator,omitempty" xml:"Creator,omitempty"`
	GmtCreate   *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	// region_id
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// dts instance id
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Scope        *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	SrcRegion    *string `json:"SrcRegion,omitempty" xml:"SrcRegion,omitempty"`
	TagCategory  *string `json:"TagCategory,omitempty" xml:"TagCategory,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetAliUid(v int64) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.AliUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetCreator(v int64) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.Creator = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetGmtCreate(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetGmtModified(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.GmtModified = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetId(v int64) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.Id = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetRegionId(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.RegionId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetResourceId(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.ResourceId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetResourceType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.ResourceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetScope(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.Scope = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetSrcRegion(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.SrcRegion = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetTagCategory(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.TagCategory = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetTagKey(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.TagKey = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList) SetTagValue(v string) *DescribeDtsJobDetailResponseBodySubSyncJobReverseJobTagList {
	s.TagValue = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint struct {
	AliyunUid       *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
	DatabaseName    *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	EngineName      *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	InstanceID      *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	OracleSID       *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	Port            *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RoleName        *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	UserName        *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetAliyunUid(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.AliyunUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetDatabaseName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetEngineName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetInstanceID(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetInstanceType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetIp(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetOracleSID(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetPort(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetRegion(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetRoleName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.RoleName = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint) SetUserName(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	NeedUpgrade  *bool   `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus) SetPercent(v string) *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus) SetProgress(v string) *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus) SetStatus(v string) *DescribeDtsJobDetailResponseBodySubSyncJobStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType struct {
	Ddl *bool `json:"Ddl,omitempty" xml:"Ddl,omitempty"`
	Dml *bool `json:"Dml,omitempty" xml:"Dml,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType) SetDdl(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType {
	s.Ddl = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType) SetDml(v bool) *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionDataType {
	s.Dml = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost struct {
	PrivateHost *string `json:"PrivateHost,omitempty" xml:"PrivateHost,omitempty"`
	PublicHost  *string `json:"PublicHost,omitempty" xml:"PublicHost,omitempty"`
	VpcHost     *string `json:"VpcHost,omitempty" xml:"VpcHost,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost) SetPrivateHost(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost {
	s.PrivateHost = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost) SetPublicHost(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost {
	s.PublicHost = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost) SetVpcHost(v string) *DescribeDtsJobDetailResponseBodySubSyncJobSubscriptionHost {
	s.VpcHost = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubSyncJobTagList struct {
	AliUid      *int64  `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	Creator     *int64  `json:"Creator,omitempty" xml:"Creator,omitempty"`
	GmtCreate   *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	// region_id
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// dts instance id
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Scope        *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	SrcRegion    *string `json:"SrcRegion,omitempty" xml:"SrcRegion,omitempty"`
	TagCategory  *string `json:"TagCategory,omitempty" xml:"TagCategory,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubSyncJobTagList) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetAliUid(v int64) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.AliUid = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetCreator(v int64) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.Creator = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetGmtCreate(v string) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetGmtModified(v string) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.GmtModified = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetId(v int64) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.Id = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetRegionId(v string) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.RegionId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetResourceId(v string) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.ResourceId = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetResourceType(v string) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.ResourceType = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetScope(v string) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.Scope = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetSrcRegion(v string) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.SrcRegion = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetTagCategory(v string) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.TagCategory = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetTagKey(v string) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.TagKey = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubSyncJobTagList) SetTagValue(v string) *DescribeDtsJobDetailResponseBodySubSyncJobTagList {
	s.TagValue = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubscriptionDataType struct {
	// The private endpoint of the change tracking instance in the `<Address>:<Port number>` format.
	Ddl *bool `json:"Ddl,omitempty" xml:"Ddl,omitempty"`
	// The public endpoint of the change tracking instance in the `<Address>:<Port number>` format.
	Dml *bool `json:"Dml,omitempty" xml:"Dml,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubscriptionDataType) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubscriptionDataType) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubscriptionDataType) SetDdl(v bool) *DescribeDtsJobDetailResponseBodySubscriptionDataType {
	s.Ddl = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubscriptionDataType) SetDml(v bool) *DescribeDtsJobDetailResponseBodySubscriptionDataType {
	s.Dml = &v
	return s
}

type DescribeDtsJobDetailResponseBodySubscriptionHost struct {
	// The endpoint of the change tracking instance.
	PrivateHost *string `json:"PrivateHost,omitempty" xml:"PrivateHost,omitempty"`
	// Indicates whether schema migration or schema synchronization is performed. Valid values:
	//
	// *   **true**: Schema migration or schema synchronization is performed.
	// *   **false**: Schema migration or schema synchronization is not performed.
	PublicHost *string `json:"PublicHost,omitempty" xml:"PublicHost,omitempty"`
	// Indicates whether incremental data migration or synchronization is performed. Valid values:
	//
	// *   **true**: Incremental data migration or synchronization is performed.
	// *   **false**: Incremental data migration or synchronization is not performed.
	VpcHost *string `json:"VpcHost,omitempty" xml:"VpcHost,omitempty"`
}

func (s DescribeDtsJobDetailResponseBodySubscriptionHost) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponseBodySubscriptionHost) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponseBodySubscriptionHost) SetPrivateHost(v string) *DescribeDtsJobDetailResponseBodySubscriptionHost {
	s.PrivateHost = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubscriptionHost) SetPublicHost(v string) *DescribeDtsJobDetailResponseBodySubscriptionHost {
	s.PublicHost = &v
	return s
}

func (s *DescribeDtsJobDetailResponseBodySubscriptionHost) SetVpcHost(v string) *DescribeDtsJobDetailResponseBodySubscriptionHost {
	s.VpcHost = &v
	return s
}

type DescribeDtsJobDetailResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDtsJobDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDtsJobDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobDetailResponse) SetHeaders(v map[string]*string) *DescribeDtsJobDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeDtsJobDetailResponse) SetStatusCode(v int32) *DescribeDtsJobDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDtsJobDetailResponse) SetBody(v *DescribeDtsJobDetailResponseBody) *DescribeDtsJobDetailResponse {
	s.Body = v
	return s
}

type DescribeDtsJobsRequest struct {
	// The ID of the DTS dedicated cluster on which the task runs.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	DtsBisLabel        *string `json:"DtsBisLabel,omitempty" xml:"DtsBisLabel,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the parent task.
	//
	// >  In most cases, you do not need to specify this parameter.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The type of the DTS task. Valid values:
	//
	// *   **MIGRATION**: data migration. This is the default value.
	// *   **SYNC**: data synchronization.
	// *   **SUBSCRIBE**: change tracking.
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The basis on which the returned DTS tasks are sorted. Valid values:
	//
	// *   **CreateTime**: sorts the DTS tasks based on the points in time when the DTS tasks are created.
	// *   **FinishTime**: sorts the DTS tasks based on the points in time when the DTS tasks are complete.
	// *   **duLimit** sorts the DTS tasks based on the upper limits on DTS Units (DUs) that the DTS tasks can use. This option applies only to the DTS tasks that are run on a DTS dedicated cluster.
	//
	// >  You can also set the **OrderDirection** parameter to specify whether to sort the DTS tasks in ascending or descending order.
	OrderColumn *string `json:"OrderColumn,omitempty" xml:"OrderColumn,omitempty"`
	// The order in which the returned DTS tasks are sorted. Valid values:
	//
	// *   **ASC**: sorts the DTS tasks in ascending order. This is the default value.
	// *   **DESC**: sorts the DTS tasks in descending order.
	OrderDirection *string `json:"OrderDirection,omitempty" xml:"OrderDirection,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The content of the query condition.
	//
	// >  You must set the **Type** parameter to specify the type of the query condition.
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// This parameter is discontinued.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource group ID.
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The state of the DTS task.
	//
	// Valid values for a data migration task:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **PreCheckPass**: The task passed the precheck.
	// *   **NotConfigured**: The task is not configured.
	// *   **Migrating**: The task is in progress.
	// *   **Suspending**: The task is paused.
	// *   **MigrationFailed**: The task failed.
	// *   **Finished**: The task is complete.
	// *   **Retrying**: The task is being retried.
	// *   **Upgrade**: The task is being upgraded.
	// *   **Locked**: The task is locked.
	// *   **Downgrade**: The task is being downgraded.
	//
	// Valid values for a data synchronization task:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **PreCheckPass**: The task passed the precheck.
	// *   **NotConfigured**: The task is not configured.
	// *   **Initializing**: The task is being initialized.
	// *   **InitializeFailed**: Initialization failed.
	// *   **Synchronizing**: The task is in progress.
	// *   **Failed**: The task failed.
	// *   **Suspending**: The task is paused.
	// *   **Modifying**: The objects in the task are being modified.
	// *   **Finished**: The task is complete.
	// *   **Retrying**: The task is being retried.
	// *   **Upgrade**: The task is being upgraded.
	// *   **Locked**: The task is locked.
	// *   **Downgrade**: The task is being downgraded.
	//
	// Valid values for a change tracking task:
	//
	// *   **NotConfigured**: The task is not configured.
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **PreCheckPass**: The task passed the precheck.
	// *   **Starting**: The task is being started.
	// *   **Normal**: The task is running as expected.
	// *   **Retrying**: The task is being retried.
	// *   **Abnormal**: The task is not running as expected.
	// *   **Upgrade**: The task is being upgraded.
	// *   **Locked**: The task is locked.
	// *   **Downgrade**: The task is being downgraded.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags of the DTS task to be queried. Specify tags in the JSON format.
	//
	// >  You can call the **ListTagResources** operation to query the tag key and tag value.
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The type of the query condition. Valid values:
	//
	// *   **instance**: queries DTS tasks based on the ID of a DTS instance.
	// *   **name**: queries DTS tasks based on the name of a DTS instance. Fuzzy match is supported.
	// *   **srcRds**: queries DTS tasks based on the ID of an ApsaraDB RDS instance. The ApsaraDB RDS instance is the source instance of a DTS task.
	// *   **rds**: queries DTS tasks based on the ID of an ApsaraDB RDS instance. The ApsaraDB RDS instance is the destination instance of a DTS task.
	//
	// >  You must set the **Params** parameter to specify the content of the query condition.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// Specifies whether to skip the **DbObject** parameter in the response. The DbObject parameter specifies the objects of the data migration, data synchronization, or change tracking task. Valid values:
	//
	// - **true**: does not return **DbObject**.
	// - **false**: returns **DbObject**. If you set this parameter to false, the response time is shortened.
	WithoutDbList *bool `json:"WithoutDbList,omitempty" xml:"WithoutDbList,omitempty"`
}

func (s DescribeDtsJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsRequest) SetDedicatedClusterId(v string) *DescribeDtsJobsRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetDtsBisLabel(v string) *DescribeDtsJobsRequest {
	s.DtsBisLabel = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetDtsInstanceId(v string) *DescribeDtsJobsRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetDtsJobId(v string) *DescribeDtsJobsRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetGroupId(v string) *DescribeDtsJobsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetJobType(v string) *DescribeDtsJobsRequest {
	s.JobType = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetOrderColumn(v string) *DescribeDtsJobsRequest {
	s.OrderColumn = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetOrderDirection(v string) *DescribeDtsJobsRequest {
	s.OrderDirection = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetOwnerId(v string) *DescribeDtsJobsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetPageNumber(v int32) *DescribeDtsJobsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetPageSize(v int32) *DescribeDtsJobsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetParams(v string) *DescribeDtsJobsRequest {
	s.Params = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetRegion(v string) *DescribeDtsJobsRequest {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetRegionId(v string) *DescribeDtsJobsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetResourceGroupId(v string) *DescribeDtsJobsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetStatus(v string) *DescribeDtsJobsRequest {
	s.Status = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetTags(v string) *DescribeDtsJobsRequest {
	s.Tags = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetType(v string) *DescribeDtsJobsRequest {
	s.Type = &v
	return s
}

func (s *DescribeDtsJobsRequest) SetWithoutDbList(v bool) *DescribeDtsJobsRequest {
	s.WithoutDbList = &v
	return s
}

type DescribeDtsJobsResponseBody struct {
	// The list of DTS tasks and the details of each task.
	DtsJobList []*DescribeDtsJobsResponseBodyDtsJobList `json:"DtsJobList,omitempty" xml:"DtsJobList,omitempty" type:"Repeated"`
	// The dynamic error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. The value of this parameter is used to replace the **%s** variable in the value of the **ErrMessage** parameter.
	//
	// >  For example, if the value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the value of the **DynamicMessage** parameter is **Type**, the specified **Type** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The DTS tasks and the details of each task.
	EtlDemoList []*DescribeDtsJobsResponseBodyEtlDemoList `json:"EtlDemoList,omitempty" xml:"EtlDemoList,omitempty" type:"Repeated"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of DTS tasks that meet the query condition.
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeDtsJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBody) SetDtsJobList(v []*DescribeDtsJobsResponseBodyDtsJobList) *DescribeDtsJobsResponseBody {
	s.DtsJobList = v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetDynamicCode(v string) *DescribeDtsJobsResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetDynamicMessage(v string) *DescribeDtsJobsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetErrCode(v string) *DescribeDtsJobsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetErrMessage(v string) *DescribeDtsJobsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetEtlDemoList(v []*DescribeDtsJobsResponseBodyEtlDemoList) *DescribeDtsJobsResponseBody {
	s.EtlDemoList = v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetHttpStatusCode(v int32) *DescribeDtsJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetPageNumber(v int32) *DescribeDtsJobsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetPageRecordCount(v int32) *DescribeDtsJobsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetRequestId(v string) *DescribeDtsJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetSuccess(v bool) *DescribeDtsJobsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDtsJobsResponseBody) SetTotalRecordCount(v int32) *DescribeDtsJobsResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobList struct {
	// Indicates whether the **new** change tracking feature is used.
	//
	// >  This parameter is returned only for change tracking instances of the new version.
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	BeginTimestamp *string `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	// The start offset of incremental data synchronization. The value is a UNIX timestamp representing the number of seconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	ConsumptionCheckpoint *string `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	// The downstream client information, in the following format: \<IP address of the downstream client>:\<Random ID generated by DTS>.
	ConsumptionClient *string `json:"ConsumptionClient,omitempty" xml:"ConsumptionClient,omitempty"`
	// The CPU utilization of the instance. Unit: percentage.
	CpuUsage *string `json:"CpuUsage,omitempty" xml:"CpuUsage,omitempty"`
	// The point in time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The state of the physical gateway-based migration task.
	DataCloudStatus *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus `json:"DataCloudStatus,omitempty" xml:"DataCloudStatus,omitempty" type:"Struct"`
	// The state of the extract, transform, and load (ETL) task. Valid values:
	//
	// >  This parameter collection is returned only if an ETL task is configured.
	DataEtlStatus *DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus `json:"DataEtlStatus,omitempty" xml:"DataEtlStatus,omitempty" type:"Struct"`
	// The state of full data synchronization.
	DataInitializationStatus *DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	// The state of incremental data migration or synchronization.
	DataSynchronizationStatus *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	// The objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see "Objects of DTS tasks".
	DbObject *string `json:"DbObject,omitempty" xml:"DbObject,omitempty"`
	// The ID of the DTS dedicated cluster on which a DTS task runs.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The latency of incremental data synchronization. Unit: seconds.
	Delay *int64 `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The connection settings of the destination instance.
	DestinationEndpoint *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	DtsBisLabel         *string                                                   `json:"DtsBisLabel,omitempty" xml:"DtsBisLabel,omitempty"`
	// The ID of the data synchronization instance.
	DtsInstanceID *string `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	// The instance class.
	//
	// >  For more information about the test performance of each instance class, see [Specifications of data synchronization instances](~~26605~~).
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The synchronization direction. The value is **Reverse**.
	DtsJobDirection *string `json:"DtsJobDirection,omitempty" xml:"DtsJobDirection,omitempty"`
	// The ID of the data synchronization task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The name of the data synchronization task.
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The number of DUs that have been used.
	DuUsage *int64 `json:"DuUsage,omitempty" xml:"DuUsage,omitempty"`
	// The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	EndTimestamp *string `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	// The error message returned.
	ErrorDetails []*DescribeDtsJobsResponseBodyDtsJobListErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	// The error message returned if the task failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The checkpoint of the ETL task.
	EtlSafeCheckpoint *string `json:"EtlSafeCheckpoint,omitempty" xml:"EtlSafeCheckpoint,omitempty"`
	// The point in time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// >  This parameter is returned only if the value of the **PayType** parameter is **PrePaid**.
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The state information about the full data verification task.
	FullDataCheckStatus *DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus `json:"FullDataCheckStatus,omitempty" xml:"FullDataCheckStatus,omitempty" type:"Struct"`
	// The state information about the incremental data verification task.
	IncDataCheckStatus *DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus `json:"IncDataCheckStatus,omitempty" xml:"IncDataCheckStatus,omitempty" type:"Struct"`
	// The type of the DTS task. Valid values:
	//
	// - **MIGRATION**: data migration task
	// - **SYNC**: data synchronization task
	// - **SUBSCRIBE**: change tracking task
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The memory that has been used. Unit: MB.
	MemUsage *string `json:"MemUsage,omitempty" xml:"MemUsage,omitempty"`
	// The error code.
	MigrationErrCode *string `json:"MigrationErrCode,omitempty" xml:"MigrationErrCode,omitempty"`
	// The ID of the error code-related documentation.
	MigrationErrHelpDocId *string `json:"MigrationErrHelpDocId,omitempty" xml:"MigrationErrHelpDocId,omitempty"`
	// The key of the error code-related documentation.
	MigrationErrHelpDocKey *string `json:"MigrationErrHelpDocKey,omitempty" xml:"MigrationErrHelpDocKey,omitempty"`
	// The error message.
	MigrationErrMsg *string `json:"MigrationErrMsg,omitempty" xml:"MigrationErrMsg,omitempty"`
	// The type of the error code.
	MigrationErrType *string `json:"MigrationErrType,omitempty" xml:"MigrationErrType,omitempty"`
	// The solution to the error.
	MigrationErrWorkaround *string `json:"MigrationErrWorkaround,omitempty" xml:"MigrationErrWorkaround,omitempty"`
	// The migration or synchronization modes.
	MigrationMode *DescribeDtsJobsResponseBodyDtsJobListMigrationMode `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	// The source of the task. Valid values:
	//
	// *   **PTS**
	// *   **DMS**
	// *   **DTS**
	OriginType *string `json:"OriginType,omitempty" xml:"OriginType,omitempty"`
	// The billing method of the DTS instance. Valid values:
	//
	// *   **PrePaid**: subscription
	// *   **PostPaid**: pay-as-you-go
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The performance of the data migration or synchronization instance.
	Performance *DescribeDtsJobsResponseBodyDtsJobListPerformance `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Struct"`
	// The precheck state.
	PrecheckStatus *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	// The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).
	Reserved *string `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	// The name of the resource group.
	ResourceGroupDisplayName *string `json:"ResourceGroupDisplayName,omitempty" xml:"ResourceGroupDisplayName,omitempty"`
	// The resource group ID.
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The information about the retries performed by DTS due to an exception.
	RetryState *DescribeDtsJobsResponseBodyDtsJobListRetryState `json:"RetryState,omitempty" xml:"RetryState,omitempty" type:"Struct"`
	// The details of the data synchronization task in the reverse direction.
	//
	// > This parameter is returned only for two-way data synchronization tasks.
	ReverseJob *DescribeDtsJobsResponseBodyDtsJobListReverseJob `json:"ReverseJob,omitempty" xml:"ReverseJob,omitempty" type:"Struct"`
	// The connection settings of the source instance.
	SourceEndpoint *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The state of schema migration or initial schema synchronization.
	StructureInitializationStatus *DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
	// The tags of the task.
	TagList []*DescribeDtsJobsResponseBodyDtsJobListTagList `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
}

func (s DescribeDtsJobsResponseBodyDtsJobList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobList) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetAppName(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.AppName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetBeginTimestamp(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetCheckpoint(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.Checkpoint = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetConsumptionCheckpoint(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetConsumptionClient(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.ConsumptionClient = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetCpuUsage(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.CpuUsage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetCreateTime(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.CreateTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDataCloudStatus(v *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DataCloudStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDataEtlStatus(v *DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DataEtlStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDataInitializationStatus(v *DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDataSynchronizationStatus(v *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDbObject(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DbObject = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDedicatedClusterId(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDelay(v int64) *DescribeDtsJobsResponseBodyDtsJobList {
	s.Delay = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDestinationEndpoint(v *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDtsBisLabel(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DtsBisLabel = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDtsInstanceID(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDtsJobClass(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDtsJobDirection(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DtsJobDirection = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDtsJobId(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDtsJobName(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DtsJobName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetDuUsage(v int64) *DescribeDtsJobsResponseBodyDtsJobList {
	s.DuUsage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetEndTimestamp(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetErrorDetails(v []*DescribeDtsJobsResponseBodyDtsJobListErrorDetails) *DescribeDtsJobsResponseBodyDtsJobList {
	s.ErrorDetails = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetEtlSafeCheckpoint(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.EtlSafeCheckpoint = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetExpireTime(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetFullDataCheckStatus(v *DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus) *DescribeDtsJobsResponseBodyDtsJobList {
	s.FullDataCheckStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetIncDataCheckStatus(v *DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus) *DescribeDtsJobsResponseBodyDtsJobList {
	s.IncDataCheckStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetJobType(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.JobType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetMemUsage(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.MemUsage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetMigrationErrCode(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.MigrationErrCode = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetMigrationErrHelpDocId(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.MigrationErrHelpDocId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetMigrationErrHelpDocKey(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.MigrationErrHelpDocKey = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetMigrationErrMsg(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.MigrationErrMsg = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetMigrationErrType(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.MigrationErrType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetMigrationErrWorkaround(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.MigrationErrWorkaround = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetMigrationMode(v *DescribeDtsJobsResponseBodyDtsJobListMigrationMode) *DescribeDtsJobsResponseBodyDtsJobList {
	s.MigrationMode = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetOriginType(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.OriginType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetPayType(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.PayType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetPerformance(v *DescribeDtsJobsResponseBodyDtsJobListPerformance) *DescribeDtsJobsResponseBodyDtsJobList {
	s.Performance = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetPrecheckStatus(v *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus) *DescribeDtsJobsResponseBodyDtsJobList {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetReserved(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.Reserved = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetResourceGroupDisplayName(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.ResourceGroupDisplayName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetResourceGroupId(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetRetryState(v *DescribeDtsJobsResponseBodyDtsJobListRetryState) *DescribeDtsJobsResponseBodyDtsJobList {
	s.RetryState = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetReverseJob(v *DescribeDtsJobsResponseBodyDtsJobListReverseJob) *DescribeDtsJobsResponseBodyDtsJobList {
	s.ReverseJob = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetSourceEndpoint(v *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) *DescribeDtsJobsResponseBodyDtsJobList {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobList {
	s.Status = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetStructureInitializationStatus(v *DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus) *DescribeDtsJobsResponseBodyDtsJobList {
	s.StructureInitializationStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobList) SetTagList(v []*DescribeDtsJobsResponseBodyDtsJobListTagList) *DescribeDtsJobsResponseBodyDtsJobList {
	s.TagList = v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus struct {
	// The error message returned if the task failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Indicates whether the instance needs to be upgraded. Valid values:
	//
	// - **true**
	// - **false**
	NeedUpgrade *bool `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	// The progress of the task. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of tables that have been migrated.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of the task. For more information about the valid values, see the description of the request parameter **Status**.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus) SetNeedUpgrade(v bool) *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListDataCloudStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus struct {
	// The error message returned if the task failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of the ETL task.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of records that have been processed by the ETL task.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of the ETL task. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Migrating**: The task is in progress.
	// *   **Failed**: The task failed.
	// *   **Finished**: The task is complete.
	// *   **Catched**: The task is not delayed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListDataEtlStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus struct {
	// The error message returned if full data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of full data synchronization. This is expressed as a percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of records that have been synchronized during full data synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of full data synchronization. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Migrating**: The task is in progress.
	// *   **Failed**: The task failed.
	// *   **Finished**: The task is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus struct {
	// The error message returned if incremental data migration or synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Indicates whether the instance needs to be upgraded. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	//
	// >  To upgrade a DTS instance, call the [TransferInstanceClass](~~281093~~) operation.
	NeedUpgrade *bool `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	// The progress of incremental data migration or synchronization.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of records that have been migrated or synchronized during incremental data migration or synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of incremental data migration or synchronization. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Migrating**: The task is in progress.
	// *   **Failed**: The task failed.
	// *   **Finished**: The task is complete.
	// *   **Catched**: The task is not delayed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint struct {
	// The name of the database to which the migration object in the destination instance belongs.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database type of the destination instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The ID of the destination instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the destination instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The endpoint of the destination instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The SID of the Oracle database.
	//
	// >  This parameter is returned only if the **EngineName** parameter of the destination instance is set to **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The database service port of the destination instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region in which the destination instance resides. For more information, see [List of supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// Indicates whether SSL encryption is enabled. Valid values:
	//
	// *   **DISABLE**: SSL encryption is disabled.
	// *   **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled, and the CA certificate is uploaded.
	// *   **ENABLE_ONLY\_4\_MONGODB_ALTAS**: SSL encryption is enabled for the connection to an AWS MongoDB Altas database.
	// *   **ENABLE_ONLY\_4\_KAFKA_SCRAM_SHA\_256**: SCRAM-SHA-256 is used to encrypt the connection to a Kafka cluster.
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	// The database account of the destination instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) SetDatabaseName(v string) *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) SetEngineName(v string) *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) SetInstanceID(v string) *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) SetInstanceType(v string) *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) SetIp(v string) *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) SetOracleSID(v string) *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) SetPort(v string) *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) SetRegion(v string) *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint) SetUserName(v string) *DescribeDtsJobsResponseBodyDtsJobListDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListErrorDetails struct {
	// The error code returned.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The URL of the documentation.
	HelpUrl *string `json:"HelpUrl,omitempty" xml:"HelpUrl,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListErrorDetails) SetErrorCode(v string) *DescribeDtsJobsResponseBodyDtsJobListErrorDetails {
	s.ErrorCode = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListErrorDetails) SetHelpUrl(v string) *DescribeDtsJobsResponseBodyDtsJobListErrorDetails {
	s.HelpUrl = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus struct {
	// The error message returned if the task failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of the full data verification task. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The progress of the full data verification task.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of the full data verification task. Valid values:
	//
	// - **NotStarted**: The verification is not started.
	// - **Checking**: The verification is in progress.
	// - **Failed**: The verification failed.
	// - **Finished**: The verification is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListFullDataCheckStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus struct {
	// The error message returned if the task failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of the incremental data verification task. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The progress of the incremental data verification task.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of the incremental data verification task. Valid values:
	//
	// - **Catched**: The verification is delayed.
	// - **NotStarted**: The verification is not started.
	// - **Checking**: The verification is in progress.
	// - **Failed**: The verification failed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListIncDataCheckStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListMigrationMode struct {
	// Indicates whether full data migration or synchronization is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DataInitialization *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// Indicates whether incremental data migration or synchronization is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DataSynchronization *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// Indicates whether full data verification is performed. Valid values:
	// -  **true**: yes
	// -   **false**: no
	FullDataCheck *bool `json:"FullDataCheck,omitempty" xml:"FullDataCheck,omitempty"`
	// Indicates whether incremental data verification is performed. Valid values:
	// -  **true**: yes
	// -   **false**: no
	IncDataCheck *bool `json:"IncDataCheck,omitempty" xml:"IncDataCheck,omitempty"`
	// Indicates whether schema migration or schema synchronization is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	StructureInitialization *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListMigrationMode) SetDataInitialization(v bool) *DescribeDtsJobsResponseBodyDtsJobListMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListMigrationMode) SetDataSynchronization(v bool) *DescribeDtsJobsResponseBodyDtsJobListMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListMigrationMode) SetFullDataCheck(v bool) *DescribeDtsJobsResponseBodyDtsJobListMigrationMode {
	s.FullDataCheck = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListMigrationMode) SetIncDataCheck(v bool) *DescribeDtsJobsResponseBodyDtsJobListMigrationMode {
	s.IncDataCheck = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListMigrationMode) SetStructureInitialization(v bool) *DescribeDtsJobsResponseBodyDtsJobListMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListPerformance struct {
	// The size of data that is migrated or synchronized per second. Unit: MB/s.
	Flow *string `json:"Flow,omitempty" xml:"Flow,omitempty"`
	// The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
	Rps *string `json:"Rps,omitempty" xml:"Rps,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListPerformance) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPerformance) SetFlow(v string) *DescribeDtsJobsResponseBodyDtsJobListPerformance {
	s.Flow = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPerformance) SetRps(v string) *DescribeDtsJobsResponseBodyDtsJobListPerformance {
	s.Rps = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus struct {
	// The result of each precheck item.
	Detail []*DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	// The cause of the precheck failure.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The precheck progress. This is expressed as a percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The precheck status. Valid values:
	//
	// *   **NotStarted**
	// *   **Suspending**:
	// *   **Checking**
	// *   **Failed**
	// *   **Finished**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus) SetDetail(v []*DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail) *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail struct {
	// The name of the precheck item.
	CheckItem *string `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	// The description of the precheck item.
	CheckItemDescription *string `json:"CheckItemDescription,omitempty" xml:"CheckItemDescription,omitempty"`
	// The precheck result. Valid values:
	//
	// *   **Success**
	// *   **Failed**
	CheckResult *string `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	// The error message returned if the task failed to pass the precheck.
	//
	// >  This parameter is returned only if the value of the **CheckResult** parameter is **Failed**.
	FailedReason *string `json:"FailedReason,omitempty" xml:"FailedReason,omitempty"`
	// The method to fix the precheck failure.
	//
	// >  This parameter is returned only if the value of the **CheckResult** parameter is **Failed**.
	RepairMethod *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail) SetCheckItem(v string) *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail {
	s.CheckItem = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail) SetCheckItemDescription(v string) *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail {
	s.CheckItemDescription = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail) SetCheckResult(v string) *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail {
	s.CheckResult = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail) SetFailedReason(v string) *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail {
	s.FailedReason = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail) SetRepairMethod(v string) *DescribeDtsJobsResponseBodyDtsJobListPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListRetryState struct {
	// The error message returned if these retries failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The task ID.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The maximum duration of a retry. Unit: seconds.
	MaxRetryTime *int32 `json:"MaxRetryTime,omitempty" xml:"MaxRetryTime,omitempty"`
	// The error code.
	MigrationErrCode *string `json:"MigrationErrCode,omitempty" xml:"MigrationErrCode,omitempty"`
	// The ID of the error code-related documentation.
	MigrationErrHelpDocId *string `json:"MigrationErrHelpDocId,omitempty" xml:"MigrationErrHelpDocId,omitempty"`
	// The key of the error code-related documentation.
	MigrationErrHelpDocKey *string `json:"MigrationErrHelpDocKey,omitempty" xml:"MigrationErrHelpDocKey,omitempty"`
	// The error message.
	MigrationErrMsg *string `json:"MigrationErrMsg,omitempty" xml:"MigrationErrMsg,omitempty"`
	// The type of the error code.
	MigrationErrType *string `json:"MigrationErrType,omitempty" xml:"MigrationErrType,omitempty"`
	// The solution to the error.
	MigrationErrWorkaround *string `json:"MigrationErrWorkaround,omitempty" xml:"MigrationErrWorkaround,omitempty"`
	// The progress of the instance when DTS retries.
	Module *string `json:"Module,omitempty" xml:"Module,omitempty"`
	// The number of retries that have been performed.
	RetryCount *int32 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// The object on which these retries are performed. Valid values:
	//
	// - **srcDB**: the source database
	// - **destDB**: the destination database
	// - **inner_module**: an internal module of DTS
	RetryTarget *string `json:"RetryTarget,omitempty" xml:"RetryTarget,omitempty"`
	// The time that has elapsed from the time when the first retry starts. Unit: seconds.
	RetryTime *int32 `json:"RetryTime,omitempty" xml:"RetryTime,omitempty"`
	// Indicates whether the task is being retried. Valid values:
	//
	// - **true**
	// - **false**
	Retrying *bool `json:"Retrying,omitempty" xml:"Retrying,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListRetryState) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListRetryState) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetErrMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetJobId(v string) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.JobId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetMaxRetryTime(v int32) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.MaxRetryTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetMigrationErrCode(v string) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.MigrationErrCode = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetMigrationErrHelpDocId(v string) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.MigrationErrHelpDocId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetMigrationErrHelpDocKey(v string) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.MigrationErrHelpDocKey = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetMigrationErrMsg(v string) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.MigrationErrMsg = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetMigrationErrType(v string) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.MigrationErrType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetMigrationErrWorkaround(v string) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.MigrationErrWorkaround = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetModule(v string) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.Module = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetRetryCount(v int32) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.RetryCount = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetRetryTarget(v string) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.RetryTarget = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetRetryTime(v int32) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.RetryTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListRetryState) SetRetrying(v bool) *DescribeDtsJobsResponseBodyDtsJobListRetryState {
	s.Retrying = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJob struct {
	// The start offset of incremental data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The CPU utilization of the instance. Unit: percentage.
	CpuUsage *string `json:"CpuUsage,omitempty" xml:"CpuUsage,omitempty"`
	// The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The state of initial full data synchronization.
	DataInitializationStatus *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	// The state of incremental data synchronization.
	DataSynchronizationStatus *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	// The schema of the objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see Objects of DTS tasks.
	DbObject *string `json:"DbObject,omitempty" xml:"DbObject,omitempty"`
	// The ID of the DTS dedicated cluster on which a DTS task runs.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The latency of incremental data synchronization. Unit: seconds.
	Delay *int64 `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The connection settings of the destination instance.
	DestinationEndpoint *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	// The ID of the data synchronization instance.
	DtsInstanceID *string `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	// The instance class.
	//
	// > For more information about the test performance of each instance class, see [Specifications of data synchronization instances](~~26605~~).
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The synchronization direction. **Reverse** is returned.
	DtsJobDirection *string `json:"DtsJobDirection,omitempty" xml:"DtsJobDirection,omitempty"`
	// The ID of the synchronization task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The name of the data synchronization task.
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The number of DUs that have been used.
	DuUsage *int64 `json:"DuUsage,omitempty" xml:"DuUsage,omitempty"`
	// The error message returned.
	ErrorDetails []*DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails `json:"ErrorDetails,omitempty" xml:"ErrorDetails,omitempty" type:"Repeated"`
	// The error message returned if the task failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The checkpoint of the ETL task.
	EtlSafeCheckpoint *string `json:"EtlSafeCheckpoint,omitempty" xml:"EtlSafeCheckpoint,omitempty"`
	// The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// > This parameter is returned only if the returned value of **PayType** is **PrePaid**.
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The memory that has been used. Unit: MB.
	MemUsage *string `json:"MemUsage,omitempty" xml:"MemUsage,omitempty"`
	// The initial synchronization types.
	MigrationMode *DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	// The billing method of the DTS instance. Valid values:
	//
	// - **PrePaid**: subscription
	// - **PostPaid**: pay-as-you-go
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The performance of the data synchronization instance.
	Performance *DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Struct"`
	// The precheck state.
	PrecheckStatus *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	// The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).
	Reserved *string `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	// The connection settings of the source instance.
	SourceEndpoint *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The state of initial schema synchronization.
	StructureInitializationStatus *DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJob) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetCheckpoint(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.Checkpoint = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetCpuUsage(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.CpuUsage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetCreateTime(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.CreateTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDataInitializationStatus(v *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDataSynchronizationStatus(v *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDbObject(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DbObject = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDedicatedClusterId(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DedicatedClusterId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDelay(v int64) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.Delay = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDestinationEndpoint(v *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDtsInstanceID(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDtsJobClass(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDtsJobDirection(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DtsJobDirection = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDtsJobId(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDtsJobName(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DtsJobName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetDuUsage(v int64) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.DuUsage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetErrorDetails(v []*DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.ErrorDetails = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetEtlSafeCheckpoint(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.EtlSafeCheckpoint = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetExpireTime(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetMemUsage(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.MemUsage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetMigrationMode(v *DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.MigrationMode = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetPayType(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.PayType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetPerformance(v *DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.Performance = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetPrecheckStatus(v *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetReserved(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.Reserved = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetSourceEndpoint(v *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.Status = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJob) SetStructureInitializationStatus(v *DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus) *DescribeDtsJobsResponseBodyDtsJobListReverseJob {
	s.StructureInitializationStatus = v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus struct {
	// The error message returned if initial full data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of initial full data synchronization. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of entries that have been synchronized during initial full data synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of initial full data synchronization. Valid values:
	//
	// - **NotStarted**: The task is not started.
	// - **Migrating**: The task is in progress.
	// - **Failed**: The task failed.
	// - **Finished**: The task is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus struct {
	// The error message returned if incremental data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Indicates whether the instance needs to be upgraded. Valid values:
	//
	// - **true**
	// - **false**
	//
	// > To upgrade a DTS instance, call the [TransferInstanceClass](~~281093~~) operation.
	NeedUpgrade *bool `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	// The progress of incremental data synchronization. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of entries that have been migrated or synchronized during incremental data migration or synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of incremental data synchronization.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint struct {
	// The name of the database that contains the synchronized objects in the destination instance.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database engine of the destination instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The ID of the destination instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the destination instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The endpoint of the destination instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The SID of the Oracle database.
	//
	// > This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The port number of the destination instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region in which the destination instance resides. For more information, see [List of supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// Indicates whether SSL encryption is enabled. Valid values:
	//
	// - **DISABLE**: SSL encryption is disabled.
	// - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
	// - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database.
	// - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	// The database account of the destination instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) SetDatabaseName(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) SetEngineName(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) SetInstanceID(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) SetInstanceType(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) SetIp(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) SetOracleSID(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) SetPort(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) SetRegion(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint) SetUserName(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails struct {
	// The error code returned.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The URL of the documentation.
	HelpUrl *string `json:"HelpUrl,omitempty" xml:"HelpUrl,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails) SetErrorCode(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails {
	s.ErrorCode = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails) SetHelpUrl(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobErrorDetails {
	s.HelpUrl = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode struct {
	// Indicates whether initial full data synchronization is performed. Valid values:
	//
	// -  **true**
	// -  **false**
	DataInitialization *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// Indicates whether incremental data synchronization is performed. Valid values:
	// -  **true**
	// -  **false**
	DataSynchronization *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// Indicates whether initial schema synchronization is performed. Valid values:
	// -  **true**
	// -  **false**
	StructureInitialization *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode) SetDataInitialization(v bool) *DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode) SetDataSynchronization(v bool) *DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode) SetStructureInitialization(v bool) *DescribeDtsJobsResponseBodyDtsJobListReverseJobMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance struct {
	// The size of data that is synchronized per second. Unit: MB/s.
	Flow *string `json:"Flow,omitempty" xml:"Flow,omitempty"`
	// The number of times that SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
	Rps *string `json:"Rps,omitempty" xml:"Rps,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance) SetFlow(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance {
	s.Flow = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance) SetRps(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPerformance {
	s.Rps = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus struct {
	// The result of each precheck item.
	Detail []*DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	// The error message returned if the precheck failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The precheck progress. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The precheck state. Valid values:
	//
	// - **NotStarted**: The precheck is not started.
	// - **Suspending**: The precheck is paused.
	// - **Checking**: The precheck is in progress.
	// - **Failed**: The precheck failed.
	// - **Finished**: The precheck is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus) SetDetail(v []*DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail struct {
	// The name of the precheck item.
	CheckItem *string `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	// The description of the precheck item.
	CheckItemDescription *string `json:"CheckItemDescription,omitempty" xml:"CheckItemDescription,omitempty"`
	// The precheck result. Valid values:
	//
	// - **Success**
	// - **Failed**
	CheckResult *string `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	// The error message returned if the task failed to pass the precheck.
	FailedReason *string `json:"FailedReason,omitempty" xml:"FailedReason,omitempty"`
	// The method to fix a precheck failure.
	RepairMethod *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail) SetCheckItem(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail {
	s.CheckItem = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail) SetCheckItemDescription(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail {
	s.CheckItemDescription = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail) SetCheckResult(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail {
	s.CheckResult = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail) SetFailedReason(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail {
	s.FailedReason = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail) SetRepairMethod(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint struct {
	// The name of the database that contains the objects to be migrated from the source instance.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database engine of the source instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The ID of the source instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the source instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The endpoint of the source instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The SID of the Oracle database.
	//
	// > This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The port number of the source instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region in which the source instance resides. For more information, see [Supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// Indicates whether SSL encryption is enabled. Valid values:
	//
	// - **DISABLE**: SSL encryption is disabled.
	// - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
	// - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database.
	// - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	// The database account of the source instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) SetDatabaseName(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) SetEngineName(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) SetInstanceID(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) SetInstanceType(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) SetIp(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) SetOracleSID(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) SetPort(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) SetRegion(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint) SetUserName(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobSourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus struct {
	// The error message returned if initial schema synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of initial schema synchronization. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of tables that have been synchronized during initial schema synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of initial schema synchronization. Valid values:
	//
	// - **NotStarted**: The task is not started.
	// - **Migrating**: The task is in progress.
	// - **Failed**: The task failed.
	// - **Finished**: The task is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListReverseJobStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint struct {
	// The name of the database that contains the objects to be migrated from the source instance.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database engine of the source instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The ID of the source instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the source instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The endpoint of the source instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The SID of the Oracle database.
	//
	// > This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The port number of the source instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region in which the source instance resides. For more information, see [Supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// Indicates whether SSL encryption is enabled. Valid values:
	//
	// - **DISABLE**: SSL encryption is disabled.
	// - **ENABLE_WITH_CERTIFICAT**E: SSL encryption is enabled and the CA certificate is uploaded.
	// - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database.
	// - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	// The database account of the source instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) SetDatabaseName(v string) *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) SetEngineName(v string) *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) SetInstanceID(v string) *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) SetInstanceType(v string) *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) SetIp(v string) *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) SetOracleSID(v string) *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) SetPort(v string) *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) SetRegion(v string) *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint) SetUserName(v string) *DescribeDtsJobsResponseBodyDtsJobListSourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus struct {
	// The error message returned if schema migration or initial schema synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of schema migration or initial schema synchronization. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of tables that have been migrated or synchronized during schema migration or initial schema synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of schema migration or initial schema synchronization. Valid values:
	//
	// - **NotStarted**: The task is not started.
	// - **Migrating**: The task is in progress.
	// - **Failed**: The task failed.
	// - **Finished**: The task is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyDtsJobListStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyDtsJobListTagList struct {
	// The key of the tag.
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The value of the tag.
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeDtsJobsResponseBodyDtsJobListTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyDtsJobListTagList) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyDtsJobListTagList) SetTagKey(v string) *DescribeDtsJobsResponseBodyDtsJobListTagList {
	s.TagKey = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyDtsJobListTagList) SetTagValue(v string) *DescribeDtsJobsResponseBodyDtsJobListTagList {
	s.TagValue = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoList struct {
	// Indicates whether the **new** change tracking feature is used.
	//
	// > This parameter is returned only for change tracking instances of the new version.
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The start of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	BeginTimestamp *string `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	// The start offset of incremental data migration or data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The consumption checkpoint of the change tracking instance. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	ConsumptionCheckpoint *string `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	// The downstream client information in the following format: <IP address of the downstream client>:<Random ID generated by DTS>.
	ConsumptionClient *string `json:"ConsumptionClient,omitempty" xml:"ConsumptionClient,omitempty"`
	// The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:s*sZ format. The time is displayed in UTC.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The state of the ETL task.
	//
	// > This parameter collection is returned only if an ETL task is configured.
	DataEtlStatus *DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus `json:"DataEtlStatus,omitempty" xml:"DataEtlStatus,omitempty" type:"Struct"`
	// The state of full data migration or initial full data synchronization.
	DataInitializationStatus *DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	// The state of incremental data migration or synchronization.
	DataSynchronizationStatus *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	// The objects of the data migration, data synchronization, or change tracking task. For more information, see [Objects of DTS tasks](~~209545~~).
	DbObject *string `json:"DbObject,omitempty" xml:"DbObject,omitempty"`
	// The latency of incremental data migration or synchronization.
	//
	// > If you query data migration tasks, the unit of this parameter is milliseconds. If you query data synchronization tasks, the unit of this parameter is seconds.
	Delay *int64 `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The connection settings of the destination instance.
	DestinationEndpoint *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	// The ID of the data migration, data synchronization, or change tracking instance.
	DtsInstanceID *string `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	// The instance class.
	//
	// > For more information about the test performance of each instance class, see [Specifications of data migration instances](~~26606~~) and [Specifications of data synchronization instances](~~26605~~).
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The synchronization direction. Valid values:
	//
	// - **Forward**
	// - **Reverse**
	//
	// > This parameter is returned only if the topology of the data synchronization instance is two-way synchronization.
	DtsJobDirection *string `json:"DtsJobDirection,omitempty" xml:"DtsJobDirection,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The name of the data migration, data synchronization, or change tracking task.
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The end of the time range for change tracking. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	EndTimestamp *string `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	// The error message returned if the task failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The checkpoint of the ETL task.
	EtlSafeCheckpoint *string `json:"EtlSafeCheckpoint,omitempty" xml:"EtlSafeCheckpoint,omitempty"`
	// The time when the instance expires. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// > This parameter is returned only if the returned value of **PayType** is **PrePaid**.
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The type of the DTS task. Valid values:
	//
	// - **MIGRATION**: data migration task
	// - **SYNC**: data synchronization task
	// - **SUBSCRIBE**: change tracking task
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// The migration types or initial synchronization types.
	MigrationMode *DescribeDtsJobsResponseBodyEtlDemoListMigrationMode `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	// The source of the task.
	// - **PTS**
	// - **DMS**
	// - **DTS**
	OriginType *string `json:"OriginType,omitempty" xml:"OriginType,omitempty"`
	// The billing method of the DTS instance. Valid values:
	//
	// - **PrePaid**: subscription
	// - **PostPaid**: pay-as-you-go
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The performance of the data migration or synchronization instance.
	Performance *DescribeDtsJobsResponseBodyEtlDemoListPerformance `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Struct"`
	// The precheck state.
	PrecheckStatus *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	// The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).
	Reserved *string `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	// The name of the resource group.
	ResourceGroupDisplayName *string `json:"ResourceGroupDisplayName,omitempty" xml:"ResourceGroupDisplayName,omitempty"`
	// The resource group ID.
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The information about the retries performed by DTS due to an exception.
	RetryState *DescribeDtsJobsResponseBodyEtlDemoListRetryState `json:"RetryState,omitempty" xml:"RetryState,omitempty" type:"Struct"`
	// The details of the data synchronization task in the reverse direction.
	//
	// > This parameter is returned only for two-way data synchronization tasks.
	ReverseJob *DescribeDtsJobsResponseBodyEtlDemoListReverseJob `json:"ReverseJob,omitempty" xml:"ReverseJob,omitempty" type:"Struct"`
	// The connection settings of the source instance.
	SourceEndpoint *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The state of schema migration or initial schema synchronization.
	StructureInitializationStatus *DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
	// The tags of the task.
	TagList []*DescribeDtsJobsResponseBodyEtlDemoListTagList `json:"TagList,omitempty" xml:"TagList,omitempty" type:"Repeated"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoList) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetAppName(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.AppName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetBeginTimestamp(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetCheckpoint(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.Checkpoint = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetConsumptionCheckpoint(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetConsumptionClient(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.ConsumptionClient = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetCreateTime(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.CreateTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDataEtlStatus(v *DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.DataEtlStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDataInitializationStatus(v *DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDataSynchronizationStatus(v *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDbObject(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.DbObject = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDelay(v int64) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.Delay = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDestinationEndpoint(v *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDtsInstanceID(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDtsJobClass(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDtsJobDirection(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.DtsJobDirection = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDtsJobId(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetDtsJobName(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.DtsJobName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetEndTimestamp(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetEtlSafeCheckpoint(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.EtlSafeCheckpoint = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetExpireTime(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetJobType(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.JobType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetMigrationMode(v *DescribeDtsJobsResponseBodyEtlDemoListMigrationMode) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.MigrationMode = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetOriginType(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.OriginType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetPayType(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.PayType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetPerformance(v *DescribeDtsJobsResponseBodyEtlDemoListPerformance) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.Performance = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetPrecheckStatus(v *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetReserved(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.Reserved = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetResourceGroupDisplayName(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.ResourceGroupDisplayName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetResourceGroupId(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetRetryState(v *DescribeDtsJobsResponseBodyEtlDemoListRetryState) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.RetryState = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetReverseJob(v *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.ReverseJob = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetSourceEndpoint(v *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.Status = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetStructureInitializationStatus(v *DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.StructureInitializationStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoList) SetTagList(v []*DescribeDtsJobsResponseBodyEtlDemoListTagList) *DescribeDtsJobsResponseBodyEtlDemoList {
	s.TagList = v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus struct {
	// The error message returned if the ETL task failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of the ETL task. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of entries that have been processed by the ETL task.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of the ETL task. Valid values:
	//
	// - **NotStarted**: The task is not started.
	// - **Migrating**: The task is in progress.
	// - **Failed**: The task failed.
	// - **Finished**: The task is complete.
	// - **Catched**: The task is not delayed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataEtlStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus struct {
	// The error message returned if full data migration or initial full data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of full data migration or initial full data synchronization. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of entries that have been migrated or synchronized during full data migration or initial full data synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of full data migration or initial full data synchronization. Valid values:
	//
	// - **NotStarted**: The task is not started.
	// - **Migrating**: The task is in progress.
	// - **Failed**: The task failed.
	// - **Finished**: The task is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus struct {
	// The error message returned if incremental data migration or synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Indicates whether the instance needs to be upgraded. Valid values:
	//
	// - **true**
	// - **false**
	//
	// > To upgrade a DTS instance, call the [TransferInstanceClass](~~281093~~) operation.
	NeedUpgrade *bool `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	// The progress of incremental data migration or synchronization. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of entries that have been migrated or synchronized during incremental data migration or synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of incremental data migration or synchronization. Valid values:
	//
	// - **NotStarted**: The task is not started.
	// - **Migrating**: The task is in progress.
	// - **Failed**: The task failed.
	// - **Finished**: The task is complete.
	// - **Catched**: The task is not delayed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoListDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint struct {
	// The name of the database that contains the migrated objects in the destination instance.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database engine of the destination instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The ID of the destination instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the destination instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The endpoint of the destination instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The SID of the Oracle database.
	//
	// > This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The port number of the destination instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region in which the destination instance resides. For more information, see [Supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// Indicates whether SSL encryption is enabled. Valid values:
	//
	// - **DISABLE**: SSL encryption is disabled.
	// - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
	// - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database.
	// - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	// The database account of the destination instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) SetDatabaseName(v string) *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) SetEngineName(v string) *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) SetInstanceID(v string) *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) SetInstanceType(v string) *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) SetIp(v string) *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) SetOracleSID(v string) *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) SetPort(v string) *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) SetRegion(v string) *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint) SetUserName(v string) *DescribeDtsJobsResponseBodyEtlDemoListDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListMigrationMode struct {
	// Indicates whether full data migration or initial full data synchronization is performed. Valid values:
	//
	// - **true**
	// - **false**
	DataInitialization *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// Indicates whether incremental data migration or synchronization is performed. Valid values:
	//
	// - **true**
	// - **false**
	DataSynchronization *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// Indicates whether schema migration or initial schema synchronization is performed. Valid values:
	//
	// - **true**
	// - **false**
	StructureInitialization *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListMigrationMode) SetDataInitialization(v bool) *DescribeDtsJobsResponseBodyEtlDemoListMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListMigrationMode) SetDataSynchronization(v bool) *DescribeDtsJobsResponseBodyEtlDemoListMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListMigrationMode) SetStructureInitialization(v bool) *DescribeDtsJobsResponseBodyEtlDemoListMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListPerformance struct {
	// The size of data that is migrated or synchronized per second. Unit: MB/s.
	Flow *string `json:"Flow,omitempty" xml:"Flow,omitempty"`
	// The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
	Rps *string `json:"Rps,omitempty" xml:"Rps,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListPerformance) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPerformance) SetFlow(v string) *DescribeDtsJobsResponseBodyEtlDemoListPerformance {
	s.Flow = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPerformance) SetRps(v string) *DescribeDtsJobsResponseBodyEtlDemoListPerformance {
	s.Rps = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus struct {
	// The result of each precheck item.
	Detail []*DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	// The error message returned if the precheck failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The precheck progress. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The precheck state. Valid values:
	//
	// - **NotStarted**: The precheck is not started.
	// - **Suspending**: The precheck is paused.
	// - **Checking**: The precheck is in progress.
	// - **Failed**: The precheck failed.
	// - **Finished**: The precheck is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus) SetDetail(v []*DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail) *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail struct {
	// The name of the precheck item.
	CheckItem *string `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	// The description of the precheck item.
	CheckItemDescription *string `json:"CheckItemDescription,omitempty" xml:"CheckItemDescription,omitempty"`
	// The precheck result. Valid values:
	//
	// - **Success**
	// - **Failed**
	CheckResult *string `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	// The error message returned if the task failed to pass the precheck.
	//
	// > This parameter is returned only if the returned value of **CheckResult** is **Failed**.
	FailedReason *string `json:"FailedReason,omitempty" xml:"FailedReason,omitempty"`
	// The method to fix a precheck failure.
	//
	// > This parameter is returned only if the returned value of **CheckResult** is **Failed**.
	RepairMethod *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail) SetCheckItem(v string) *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail {
	s.CheckItem = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail) SetCheckItemDescription(v string) *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail {
	s.CheckItemDescription = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail) SetCheckResult(v string) *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail {
	s.CheckResult = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail) SetFailedReason(v string) *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail {
	s.FailedReason = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail) SetRepairMethod(v string) *DescribeDtsJobsResponseBodyEtlDemoListPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListRetryState struct {
	// The error message returned if these retries failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The task ID.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The maximum duration of a retry. Unit: seconds.
	MaxRetryTime *int32 `json:"MaxRetryTime,omitempty" xml:"MaxRetryTime,omitempty"`
	// The progress of the instance when DTS retries.
	Module *string `json:"Module,omitempty" xml:"Module,omitempty"`
	// The number of retries that have been performed.
	RetryCount *int32 `json:"RetryCount,omitempty" xml:"RetryCount,omitempty"`
	// The object on which these retries are performed. Valid values:
	//
	// - **srcDB**: the source database
	// - **destDB**: the destination database
	// - **inner_module**: an internal module of DTS
	RetryTarget *string `json:"RetryTarget,omitempty" xml:"RetryTarget,omitempty"`
	// The time that has elapsed from the time when the first retry starts. Unit: seconds.
	RetryTime *int32 `json:"RetryTime,omitempty" xml:"RetryTime,omitempty"`
	// Indicates whether the task is being retried. Valid values:
	//
	// - **true**
	// - **false**
	Retrying *bool `json:"Retrying,omitempty" xml:"Retrying,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListRetryState) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListRetryState) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListRetryState) SetErrMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListRetryState {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListRetryState) SetJobId(v string) *DescribeDtsJobsResponseBodyEtlDemoListRetryState {
	s.JobId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListRetryState) SetMaxRetryTime(v int32) *DescribeDtsJobsResponseBodyEtlDemoListRetryState {
	s.MaxRetryTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListRetryState) SetModule(v string) *DescribeDtsJobsResponseBodyEtlDemoListRetryState {
	s.Module = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListRetryState) SetRetryCount(v int32) *DescribeDtsJobsResponseBodyEtlDemoListRetryState {
	s.RetryCount = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListRetryState) SetRetryTarget(v string) *DescribeDtsJobsResponseBodyEtlDemoListRetryState {
	s.RetryTarget = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListRetryState) SetRetryTime(v int32) *DescribeDtsJobsResponseBodyEtlDemoListRetryState {
	s.RetryTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListRetryState) SetRetrying(v bool) *DescribeDtsJobsResponseBodyEtlDemoListRetryState {
	s.Retrying = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListReverseJob struct {
	// The start offset of incremental data synchronization. This value is a UNIX timestamp representing the number of seconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The time when the task was created. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The state of initial full data synchronization.
	DataInitializationStatus *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	// The state of incremental data synchronization.
	DataSynchronizationStatus *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	// The schema of the objects that you want to synchronize. The value is a JSON string and can contain regular expressions. For more information, see Objects of DTS tasks.
	DbObject *string `json:"DbObject,omitempty" xml:"DbObject,omitempty"`
	// The latency of incremental data synchronization. Unit: seconds.
	Delay *int64 `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The connection settings of the destination instance.
	DestinationEndpoint *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	// The ID of the data synchronization instance.
	DtsInstanceID *string `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	// The instance class.
	//
	// > For more information about the test performance of each instance class, see [Specifications of data synchronization instances](~~26605~~).
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The synchronization direction. **Reverse** is returned.
	DtsJobDirection *string `json:"DtsJobDirection,omitempty" xml:"DtsJobDirection,omitempty"`
	// The ID of the synchronization task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The name of the data synchronization task.
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The error message returned if the task failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The checkpoint of the ETL task.
	EtlSafeCheckpoint *string `json:"EtlSafeCheckpoint,omitempty" xml:"EtlSafeCheckpoint,omitempty"`
	// The time when the instance expires. The time follows the ISO 8601 standard in the* yyyy-MM-dd*T*HH:mm:ss*Z format. The time is displayed in UTC.
	//
	// > This parameter is returned only if the returned value of **PayType** is **PrePaid**.
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The migration types or initial synchronization types.
	MigrationMode *DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	// The billing method of the DTS instance. Valid values:
	//
	// - **PrePaid**: subscription
	// - **PostPaid**: pay-as-you-go
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The performance of the data migration or synchronization instance.
	Performance *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Struct"`
	// The precheck state.
	PrecheckStatus *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	// The reserved parameter of DTS. The value is a JSON string. You can specify this parameter to meet specific requirements, for example, whether to automatically start a precheck. For more information, see [MigrationReserved](~~176470~~).
	Reserved *string `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	// The connection settings of the source instance.
	SourceEndpoint *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The state of the DTS instance. For more information about the valid values, see the description of the request parameter **Status**.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The state of initial schema synchronization.
	StructureInitializationStatus *DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJob) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetCheckpoint(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.Checkpoint = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetCreateTime(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.CreateTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetDataInitializationStatus(v *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetDataSynchronizationStatus(v *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetDbObject(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.DbObject = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetDelay(v int64) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.Delay = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetDestinationEndpoint(v *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetDtsInstanceID(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.DtsInstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetDtsJobClass(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetDtsJobDirection(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.DtsJobDirection = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetDtsJobId(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetDtsJobName(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.DtsJobName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetEtlSafeCheckpoint(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.EtlSafeCheckpoint = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetExpireTime(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetMigrationMode(v *DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.MigrationMode = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetPayType(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.PayType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetPerformance(v *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.Performance = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetPrecheckStatus(v *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetReserved(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.Reserved = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetSourceEndpoint(v *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.Status = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJob) SetStructureInitializationStatus(v *DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus) *DescribeDtsJobsResponseBodyEtlDemoListReverseJob {
	s.StructureInitializationStatus = v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus struct {
	// The error message returned if initial full data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of initial full data synchronization. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of entries that have been synchronized during initial full data synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of initial full data synchronization. Valid values:
	//
	// - **NotStarted**: The task is not started.
	// - **Migrating**: The task is in progress.
	// - **Failed**: The task failed.
	// - **Finished**: The task is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus struct {
	// The error message returned if incremental data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Indicates whether the instance needs to be upgraded. Valid values:
	//
	// - **true**
	// - **false**
	//
	// > To upgrade a DTS instance, call the [TransferInstanceClass](~~281093~~) operation.
	NeedUpgrade *bool `json:"NeedUpgrade,omitempty" xml:"NeedUpgrade,omitempty"`
	// The progress of incremental data synchronization. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of entries that have been migrated or synchronized during incremental data migration or synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of incremental data synchronization.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus) SetNeedUpgrade(v bool) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus {
	s.NeedUpgrade = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint struct {
	// The name of the database that contains the synchronized objects in the destination instance.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database engine of the destination instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The ID of the destination instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the destination instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The endpoint of the destination instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The SID of the Oracle database.
	//
	// > This parameter is returned only if the returned value of **EngineName** of the destination instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The port number of the destination instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region in which the destination instance resides. For more information, see [Supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// Indicates whether SSL encryption is enabled. Valid values:
	//
	// - **DISABLE**: SSL encryption is disabled.
	// - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
	// - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database.
	// - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	// The database account of the destination instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) SetDatabaseName(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) SetEngineName(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) SetInstanceID(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) SetInstanceType(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) SetIp(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) SetOracleSID(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) SetPort(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) SetRegion(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint) SetUserName(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode struct {
	// Indicates whether full data migration or initial full data synchronization is performed. Valid values:
	//
	// - **true**
	// - **false**
	DataInitialization *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// Indicates whether incremental data migration or synchronization is performed. Valid values:
	//
	// - **true**
	// - **false**
	DataSynchronization *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// Indicates whether schema migration or initial schema synchronization is performed. Valid values:
	//
	// - **true**
	// - **false**
	StructureInitialization *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode) SetDataInitialization(v bool) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode) SetDataSynchronization(v bool) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode) SetStructureInitialization(v bool) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance struct {
	// The size of data that is migrated or synchronized per second. Unit: MB/s.
	Flow *string `json:"Flow,omitempty" xml:"Flow,omitempty"`
	// The number of times that SQL statements are migrated or synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
	Rps *string `json:"Rps,omitempty" xml:"Rps,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance) SetFlow(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance {
	s.Flow = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance) SetRps(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPerformance {
	s.Rps = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus struct {
	// The result of each precheck item.
	Detail []*DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	// The error message returned if the precheck failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The precheck progress. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The precheck state. Valid values:
	//
	// - **NotStarted**: The precheck is not started.
	// - **Suspending**: The precheck is paused.
	// - **Checking**: The precheck is in progress.
	// - **Failed**: The precheck failed.
	// - **Finished**: The precheck is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus) SetDetail(v []*DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail struct {
	// The name of the precheck item.
	CheckItem *string `json:"CheckItem,omitempty" xml:"CheckItem,omitempty"`
	// The description of the precheck item.
	CheckItemDescription *string `json:"CheckItemDescription,omitempty" xml:"CheckItemDescription,omitempty"`
	// The precheck result. Valid values:
	//
	// - **Success**
	// - **Failed**
	CheckResult *string `json:"CheckResult,omitempty" xml:"CheckResult,omitempty"`
	// The error message returned if the task failed to pass the precheck.
	//
	// > This parameter is returned only if the returned value of **CheckResult** is **Failed**.
	FailedReason *string `json:"FailedReason,omitempty" xml:"FailedReason,omitempty"`
	// The method to fix a precheck failure.
	//
	// > This parameter is returned only if the returned value of **CheckResult** is **Failed**.
	RepairMethod *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail) SetCheckItem(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail {
	s.CheckItem = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail) SetCheckItemDescription(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail {
	s.CheckItemDescription = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail) SetCheckResult(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail {
	s.CheckResult = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail) SetFailedReason(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail {
	s.FailedReason = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail) SetRepairMethod(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint struct {
	// The name of the database that contains the objects to be migrated from the source instance.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database engine of the source instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The ID of the source instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the source instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The endpoint of the source instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The SID of the Oracle database.
	//
	// > This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The port number of the source instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region in which the source instance resides. For more information, see [Supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// Indicates whether SSL encryption is enabled. Valid values:
	//
	// - **DISABLE**: SSL encryption is disabled.
	// - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
	// - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database.
	// - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	// The database account of the source instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) SetDatabaseName(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) SetEngineName(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) SetInstanceID(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) SetInstanceType(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) SetIp(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) SetOracleSID(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) SetPort(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) SetRegion(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint) SetUserName(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobSourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus struct {
	// The error message returned if initial schema synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of initial schema synchronization. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of tables that have been synchronized during initial schema synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of initial schema synchronization. Valid values:
	//
	// - **NotStarted**: The task is not started.
	// - **Migrating**: The task is in progress.
	// - **Failed**: The task failed.
	// - **Finished**: The task is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoListReverseJobStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint struct {
	// The name of the database that contains the objects to be migrated from the source instance.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database engine of the source instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The ID of the source instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the source instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The endpoint of the source instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The SID of the Oracle database.
	//
	// > This parameter is returned only if the returned value of **EngineName** of the source instance is **Oracle** and the Oracle database is deployed in a non-RAC architecture.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The port number of the source instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region in which the source instance resides. For more information, see [Supported regions](~~141033~~).
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// Indicates whether SSL encryption is enabled. Valid values:
	//
	// - **DISABLE**: SSL encryption is disabled.
	// - **ENABLE_WITH_CERTIFICATE**: SSL encryption is enabled and the CA certificate is uploaded.
	// - **ENABLE_ONLY_4_MONGODB_ALTAS**: SSL encryption is enabled for the connection with an AWS MongoDB Altas database.
	// - **ENABLE_ONLY_4_KAFKA_SCRAM_SHA_256**: SCRAM-SHA-256 is used to encrypt the connection with a Kafka cluster.
	SslSolutionEnum *string `json:"SslSolutionEnum,omitempty" xml:"SslSolutionEnum,omitempty"`
	// The database account of the source instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) SetDatabaseName(v string) *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) SetEngineName(v string) *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) SetInstanceID(v string) *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) SetInstanceType(v string) *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) SetIp(v string) *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint {
	s.Ip = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) SetOracleSID(v string) *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) SetPort(v string) *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) SetRegion(v string) *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint {
	s.Region = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) SetSslSolutionEnum(v string) *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint {
	s.SslSolutionEnum = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint) SetUserName(v string) *DescribeDtsJobsResponseBodyEtlDemoListSourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus struct {
	// The error message returned if schema migration or initial schema synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of schema migration or initial schema synchronization. Unit: percentage.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of tables that have been migrated or synchronized during schema migration or initial schema synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The state of schema migration or initial schema synchronization. Valid values:
	//
	// - **NotStarted**: The task is not started.
	// - **Migrating**: The task is in progress.
	// - **Failed**: The task failed.
	// - **Finished**: The task is complete.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus) SetErrorMessage(v string) *DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus) SetPercent(v string) *DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus) SetProgress(v string) *DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus) SetStatus(v string) *DescribeDtsJobsResponseBodyEtlDemoListStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeDtsJobsResponseBodyEtlDemoListTagList struct {
	// The tag key.
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeDtsJobsResponseBodyEtlDemoListTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponseBodyEtlDemoListTagList) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListTagList) SetTagKey(v string) *DescribeDtsJobsResponseBodyEtlDemoListTagList {
	s.TagKey = &v
	return s
}

func (s *DescribeDtsJobsResponseBodyEtlDemoListTagList) SetTagValue(v string) *DescribeDtsJobsResponseBodyEtlDemoListTagList {
	s.TagValue = &v
	return s
}

type DescribeDtsJobsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDtsJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDtsJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsJobsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDtsJobsResponse) SetHeaders(v map[string]*string) *DescribeDtsJobsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDtsJobsResponse) SetStatusCode(v int32) *DescribeDtsJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDtsJobsResponse) SetBody(v *DescribeDtsJobsResponseBody) *DescribeDtsJobsResponse {
	s.Body = v
	return s
}

type DescribeDtsServiceLogRequest struct {
	// The ID of the data migration or synchronization task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The end of the time range to query. You can call the [DescribePreCheckStatus](~~209718~~) operation to query the execution time of the subtasks.
	//
	// > *   To obtain the logs that are generated for DTS subtasks within a specific period of time, you can call the [DescribePreCheckStatus](~~209718~~) operation to query the execution time of the subtasks.
	// >*   Specify the time in the 13-digit UNIX timestamp format. Unit: milliseconds. You can use a search engine to obtain a UNIX timestamp converter.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The keyword that is passed to specify the query content.
	//
	// >  Fuzzy match is used and the keyword is case-sensitive.
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than 0 and less than or equal to the maximum value supported by the integer data type. Default value: **1**.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of log entries to return on each page. Valid values: **20**, **50**, **100**, **500**, and **1000**. Default value: **20**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query.
	//
	// > *   To obtain the logs that are generated for Data Transmission Service (DTS) subtasks within a specific period of time, you can call the [DescribePreCheckStatus](~~209718~~) operation to query the execution time of the subtasks.
	// >*   Specify the time in the 13-digit UNIX timestamp format. Unit: milliseconds. You can use a search engine to obtain a UNIX timestamp converter.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The log level. Separate multiple log levels with commas (,). Valid values:
	//
	// *   **NORMAL**: displays the logs that are generated when the DTS task runs as expected.
	// *   **WARN**: displays the logs about severe issues that stop the DTS task from running.
	// *   **ERROR**: displays the logs about unexpected issues that stop specific processes form running.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of a DTS subtask. Valid values:
	//
	// *   **DATA_LOAD**: full migration or full synchronization
	// *   **ONLINE_WRITER**: incremental migration
	// *   **SYNC_WRITER**: incremental synchronization
	SubJobType *string `json:"SubJobType,omitempty" xml:"SubJobType,omitempty"`
}

func (s DescribeDtsServiceLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsServiceLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeDtsServiceLogRequest) SetDtsJobId(v string) *DescribeDtsServiceLogRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeDtsServiceLogRequest) SetEndTime(v int64) *DescribeDtsServiceLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDtsServiceLogRequest) SetKeyword(v string) *DescribeDtsServiceLogRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeDtsServiceLogRequest) SetPageNumber(v int32) *DescribeDtsServiceLogRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDtsServiceLogRequest) SetPageSize(v int32) *DescribeDtsServiceLogRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDtsServiceLogRequest) SetRegionId(v string) *DescribeDtsServiceLogRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDtsServiceLogRequest) SetStartTime(v int64) *DescribeDtsServiceLogRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDtsServiceLogRequest) SetStatus(v string) *DescribeDtsServiceLogRequest {
	s.Status = &v
	return s
}

func (s *DescribeDtsServiceLogRequest) SetSubJobType(v string) *DescribeDtsServiceLogRequest {
	s.SubJobType = &v
	return s
}

type DescribeDtsServiceLogResponseBody struct {
	// The dynamic error code. This parameter will be removed soon.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the \*\*%s\*\* variable in the **ErrMessage** parameter.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the request fails.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request fails.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code that is returned.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of log entries returned per page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the logs.
	ServiceLogContexts []*DescribeDtsServiceLogResponseBodyServiceLogContexts `json:"ServiceLogContexts,omitempty" xml:"ServiceLogContexts,omitempty" type:"Repeated"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of logs that meet the query conditions.
	TotalRecordCount *int64 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeDtsServiceLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsServiceLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDtsServiceLogResponseBody) SetDynamicCode(v string) *DescribeDtsServiceLogResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBody) SetDynamicMessage(v string) *DescribeDtsServiceLogResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBody) SetErrCode(v string) *DescribeDtsServiceLogResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBody) SetErrMessage(v string) *DescribeDtsServiceLogResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBody) SetHttpStatusCode(v int32) *DescribeDtsServiceLogResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBody) SetPageNumber(v int32) *DescribeDtsServiceLogResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBody) SetPageRecordCount(v int32) *DescribeDtsServiceLogResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBody) SetRequestId(v string) *DescribeDtsServiceLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBody) SetServiceLogContexts(v []*DescribeDtsServiceLogResponseBodyServiceLogContexts) *DescribeDtsServiceLogResponseBody {
	s.ServiceLogContexts = v
	return s
}

func (s *DescribeDtsServiceLogResponseBody) SetSuccess(v bool) *DescribeDtsServiceLogResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBody) SetTotalRecordCount(v int64) *DescribeDtsServiceLogResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeDtsServiceLogResponseBodyServiceLogContexts struct {
	// The log content.
	Context *string `json:"Context,omitempty" xml:"Context,omitempty"`
	// The log level.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The time when the logs were collected. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeDtsServiceLogResponseBodyServiceLogContexts) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsServiceLogResponseBodyServiceLogContexts) GoString() string {
	return s.String()
}

func (s *DescribeDtsServiceLogResponseBodyServiceLogContexts) SetContext(v string) *DescribeDtsServiceLogResponseBodyServiceLogContexts {
	s.Context = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBodyServiceLogContexts) SetState(v string) *DescribeDtsServiceLogResponseBodyServiceLogContexts {
	s.State = &v
	return s
}

func (s *DescribeDtsServiceLogResponseBodyServiceLogContexts) SetTime(v string) *DescribeDtsServiceLogResponseBodyServiceLogContexts {
	s.Time = &v
	return s
}

type DescribeDtsServiceLogResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDtsServiceLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDtsServiceLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDtsServiceLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeDtsServiceLogResponse) SetHeaders(v map[string]*string) *DescribeDtsServiceLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeDtsServiceLogResponse) SetStatusCode(v int32) *DescribeDtsServiceLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDtsServiceLogResponse) SetBody(v *DescribeDtsServiceLogResponseBody) *DescribeDtsServiceLogResponse {
	s.Body = v
	return s
}

type DescribeEndpointSwitchStatusRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The task ID, which is returned after you call the [SwitchSynchronizationEndpoint](~~201858~~) operation.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeEndpointSwitchStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEndpointSwitchStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeEndpointSwitchStatusRequest) SetAccountId(v string) *DescribeEndpointSwitchStatusRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeEndpointSwitchStatusRequest) SetClientToken(v string) *DescribeEndpointSwitchStatusRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeEndpointSwitchStatusRequest) SetOwnerId(v string) *DescribeEndpointSwitchStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeEndpointSwitchStatusRequest) SetRegionId(v string) *DescribeEndpointSwitchStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEndpointSwitchStatusRequest) SetTaskId(v string) *DescribeEndpointSwitchStatusRequest {
	s.TaskId = &v
	return s
}

type DescribeEndpointSwitchStatusResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// This parameter is no longer available.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the task. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Initializing**: The task is being initialized.
	// *   **Switching**: The task is running.
	// *   **Failed**: The task failed.
	// *   **Finished**: The task is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEndpointSwitchStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEndpointSwitchStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEndpointSwitchStatusResponseBody) SetErrCode(v string) *DescribeEndpointSwitchStatusResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeEndpointSwitchStatusResponseBody) SetErrMessage(v string) *DescribeEndpointSwitchStatusResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeEndpointSwitchStatusResponseBody) SetErrorMessage(v string) *DescribeEndpointSwitchStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeEndpointSwitchStatusResponseBody) SetRequestId(v string) *DescribeEndpointSwitchStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEndpointSwitchStatusResponseBody) SetStatus(v string) *DescribeEndpointSwitchStatusResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeEndpointSwitchStatusResponseBody) SetSuccess(v string) *DescribeEndpointSwitchStatusResponseBody {
	s.Success = &v
	return s
}

type DescribeEndpointSwitchStatusResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEndpointSwitchStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEndpointSwitchStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEndpointSwitchStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeEndpointSwitchStatusResponse) SetHeaders(v map[string]*string) *DescribeEndpointSwitchStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeEndpointSwitchStatusResponse) SetStatusCode(v int32) *DescribeEndpointSwitchStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEndpointSwitchStatusResponse) SetBody(v *DescribeEndpointSwitchStatusResponseBody) *DescribeEndpointSwitchStatusResponse {
	s.Body = v
	return s
}

type DescribeEtlJobLogsRequest struct {
	// The ID of the ETL task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the region in which the Data Transmission Service (DTS) instance resides. You can call the [DescribeRegions](~~25609~~) operation to query the available Alibaba Cloud regions.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeEtlJobLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEtlJobLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeEtlJobLogsRequest) SetDtsJobId(v string) *DescribeEtlJobLogsRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeEtlJobLogsRequest) SetRegionId(v string) *DescribeEtlJobLogsRequest {
	s.RegionId = &v
	return s
}

type DescribeEtlJobLogsResponseBody struct {
	// The dynamic error code.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code. This example indicates that the specified ETL task ID is invalid.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message. This example indicates that the specified ETL task ID does not exist. In this case, the ETL task may be deleted.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The logs of ETL tasks.
	EtlRunningLogs []*DescribeEtlJobLogsResponseBodyEtlRunningLogs `json:"EtlRunningLogs,omitempty" xml:"EtlRunningLogs,omitempty" type:"Repeated"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. If the call failed, false is returned.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEtlJobLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEtlJobLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEtlJobLogsResponseBody) SetDynamicCode(v string) *DescribeEtlJobLogsResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBody) SetDynamicMessage(v string) *DescribeEtlJobLogsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBody) SetErrCode(v string) *DescribeEtlJobLogsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBody) SetErrMessage(v string) *DescribeEtlJobLogsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBody) SetEtlRunningLogs(v []*DescribeEtlJobLogsResponseBodyEtlRunningLogs) *DescribeEtlJobLogsResponseBody {
	s.EtlRunningLogs = v
	return s
}

func (s *DescribeEtlJobLogsResponseBody) SetHttpStatusCode(v int32) *DescribeEtlJobLogsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBody) SetRequestId(v string) *DescribeEtlJobLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBody) SetSuccess(v bool) *DescribeEtlJobLogsResponseBody {
	s.Success = &v
	return s
}

type DescribeEtlJobLogsResponseBodyEtlRunningLogs struct {
	// The state of the ETL task.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The module for which the logs are generated, such as the conversion module of ETL tasks.
	ContentKey *string `json:"ContentKey,omitempty" xml:"ContentKey,omitempty"`
	// The ID of the ETL task.
	EtlId *string `json:"EtlId,omitempty" xml:"EtlId,omitempty"`
	// The time when the log was generated. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	LogDatetime *string `json:"LogDatetime,omitempty" xml:"LogDatetime,omitempty"`
	// The log level. Valid values: ERROR, WARN, INFO, and DEBUG.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the user.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DescribeEtlJobLogsResponseBodyEtlRunningLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribeEtlJobLogsResponseBodyEtlRunningLogs) GoString() string {
	return s.String()
}

func (s *DescribeEtlJobLogsResponseBodyEtlRunningLogs) SetContent(v string) *DescribeEtlJobLogsResponseBodyEtlRunningLogs {
	s.Content = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBodyEtlRunningLogs) SetContentKey(v string) *DescribeEtlJobLogsResponseBodyEtlRunningLogs {
	s.ContentKey = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBodyEtlRunningLogs) SetEtlId(v string) *DescribeEtlJobLogsResponseBodyEtlRunningLogs {
	s.EtlId = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBodyEtlRunningLogs) SetLogDatetime(v string) *DescribeEtlJobLogsResponseBodyEtlRunningLogs {
	s.LogDatetime = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBodyEtlRunningLogs) SetStatus(v string) *DescribeEtlJobLogsResponseBodyEtlRunningLogs {
	s.Status = &v
	return s
}

func (s *DescribeEtlJobLogsResponseBodyEtlRunningLogs) SetUserId(v string) *DescribeEtlJobLogsResponseBodyEtlRunningLogs {
	s.UserId = &v
	return s
}

type DescribeEtlJobLogsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeEtlJobLogsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeEtlJobLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEtlJobLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeEtlJobLogsResponse) SetHeaders(v map[string]*string) *DescribeEtlJobLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeEtlJobLogsResponse) SetStatusCode(v int32) *DescribeEtlJobLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEtlJobLogsResponse) SetBody(v *DescribeEtlJobLogsResponseBody) *DescribeEtlJobLogsResponse {
	s.Body = v
	return s
}

type DescribeInitializationStatusRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Valid values: **1** to **100**. Default value: **30**.
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s DescribeInitializationStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInitializationStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeInitializationStatusRequest) SetAccountId(v string) *DescribeInitializationStatusRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeInitializationStatusRequest) SetOwnerId(v string) *DescribeInitializationStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeInitializationStatusRequest) SetPageNum(v int32) *DescribeInitializationStatusRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeInitializationStatusRequest) SetPageSize(v int32) *DescribeInitializationStatusRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInitializationStatusRequest) SetRegionId(v string) *DescribeInitializationStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeInitializationStatusRequest) SetSynchronizationJobId(v string) *DescribeInitializationStatusRequest {
	s.SynchronizationJobId = &v
	return s
}

type DescribeInitializationStatusResponseBody struct {
	// The details of initial full data synchronization.
	DataInitializationDetails []*DescribeInitializationStatusResponseBodyDataInitializationDetails `json:"DataInitializationDetails,omitempty" xml:"DataInitializationDetails,omitempty" type:"Repeated"`
	// The details of incremental data synchronization.
	//
	// >  This parameter and the parameters it contains will be removed in the future.
	DataSynchronizationDetails []*DescribeInitializationStatusResponseBodyDataSynchronizationDetails `json:"DataSynchronizationDetails,omitempty" xml:"DataSynchronizationDetails,omitempty" type:"Repeated"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of initial schema synchronization.
	StructureInitializationDetails []*DescribeInitializationStatusResponseBodyStructureInitializationDetails `json:"StructureInitializationDetails,omitempty" xml:"StructureInitializationDetails,omitempty" type:"Repeated"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInitializationStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInitializationStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInitializationStatusResponseBody) SetDataInitializationDetails(v []*DescribeInitializationStatusResponseBodyDataInitializationDetails) *DescribeInitializationStatusResponseBody {
	s.DataInitializationDetails = v
	return s
}

func (s *DescribeInitializationStatusResponseBody) SetDataSynchronizationDetails(v []*DescribeInitializationStatusResponseBodyDataSynchronizationDetails) *DescribeInitializationStatusResponseBody {
	s.DataSynchronizationDetails = v
	return s
}

func (s *DescribeInitializationStatusResponseBody) SetErrCode(v string) *DescribeInitializationStatusResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeInitializationStatusResponseBody) SetErrMessage(v string) *DescribeInitializationStatusResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeInitializationStatusResponseBody) SetRequestId(v string) *DescribeInitializationStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInitializationStatusResponseBody) SetStructureInitializationDetails(v []*DescribeInitializationStatusResponseBodyStructureInitializationDetails) *DescribeInitializationStatusResponseBody {
	s.StructureInitializationDetails = v
	return s
}

func (s *DescribeInitializationStatusResponseBody) SetSuccess(v string) *DescribeInitializationStatusResponseBody {
	s.Success = &v
	return s
}

type DescribeInitializationStatusResponseBodyDataInitializationDetails struct {
	// The name of the database to which the object in the destination instance belongs.
	DestinationOwnerDBName *string `json:"DestinationOwnerDBName,omitempty" xml:"DestinationOwnerDBName,omitempty"`
	// The error message returned if initial full data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The total number of rows that are actually synchronized.
	//
	// >  This parameter indicates the total number of actually synchronized rows. In contrast, the value of the **TotalRowNum** parameter is calculated based on the system tables in the source database. The values of the two parameters may be different due to time difference.
	FinishRowNum *string `json:"FinishRowNum,omitempty" xml:"FinishRowNum,omitempty"`
	// The name of the database to which the object in the source instance belongs.
	SourceOwnerDBName *string `json:"SourceOwnerDBName,omitempty" xml:"SourceOwnerDBName,omitempty"`
	// The status of initial full data synchronization. Valid values:
	//
	// *   **NotStarted**
	// *   **Migrating**
	// *   **Failed**
	// *   **Finished**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The table name.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// The total number of rows that are supposed to be synchronized.
	//
	// >  The value of this parameter is calculated based on the system tables in the source database. In contrast, the **FinishRowNum** parameter indicates the total number of actually synchronized rows. The values of the two parameters may be different due to time difference.
	TotalRowNum *string `json:"TotalRowNum,omitempty" xml:"TotalRowNum,omitempty"`
	// The time spent on full data synchronization.
	UsedTime *string `json:"UsedTime,omitempty" xml:"UsedTime,omitempty"`
}

func (s DescribeInitializationStatusResponseBodyDataInitializationDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeInitializationStatusResponseBodyDataInitializationDetails) GoString() string {
	return s.String()
}

func (s *DescribeInitializationStatusResponseBodyDataInitializationDetails) SetDestinationOwnerDBName(v string) *DescribeInitializationStatusResponseBodyDataInitializationDetails {
	s.DestinationOwnerDBName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataInitializationDetails) SetErrorMessage(v string) *DescribeInitializationStatusResponseBodyDataInitializationDetails {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataInitializationDetails) SetFinishRowNum(v string) *DescribeInitializationStatusResponseBodyDataInitializationDetails {
	s.FinishRowNum = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataInitializationDetails) SetSourceOwnerDBName(v string) *DescribeInitializationStatusResponseBodyDataInitializationDetails {
	s.SourceOwnerDBName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataInitializationDetails) SetStatus(v string) *DescribeInitializationStatusResponseBodyDataInitializationDetails {
	s.Status = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataInitializationDetails) SetTableName(v string) *DescribeInitializationStatusResponseBodyDataInitializationDetails {
	s.TableName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataInitializationDetails) SetTotalRowNum(v string) *DescribeInitializationStatusResponseBodyDataInitializationDetails {
	s.TotalRowNum = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataInitializationDetails) SetUsedTime(v string) *DescribeInitializationStatusResponseBodyDataInitializationDetails {
	s.UsedTime = &v
	return s
}

type DescribeInitializationStatusResponseBodyDataSynchronizationDetails struct {
	// The name of the database to which the object in the destination instance belongs.
	DestinationOwnerDBName *string `json:"DestinationOwnerDBName,omitempty" xml:"DestinationOwnerDBName,omitempty"`
	// The error message returned if incremental data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The name of the database to which the object in the source instance belongs.
	SourceOwnerDBName *string `json:"SourceOwnerDBName,omitempty" xml:"SourceOwnerDBName,omitempty"`
	// The status of incremental data synchronization. Valid values:
	//
	// *   **NotStarted**
	// *   **Migrating**
	// *   **Failed**
	// *   **Finished**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The table name.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s DescribeInitializationStatusResponseBodyDataSynchronizationDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeInitializationStatusResponseBodyDataSynchronizationDetails) GoString() string {
	return s.String()
}

func (s *DescribeInitializationStatusResponseBodyDataSynchronizationDetails) SetDestinationOwnerDBName(v string) *DescribeInitializationStatusResponseBodyDataSynchronizationDetails {
	s.DestinationOwnerDBName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataSynchronizationDetails) SetErrorMessage(v string) *DescribeInitializationStatusResponseBodyDataSynchronizationDetails {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataSynchronizationDetails) SetSourceOwnerDBName(v string) *DescribeInitializationStatusResponseBodyDataSynchronizationDetails {
	s.SourceOwnerDBName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataSynchronizationDetails) SetStatus(v string) *DescribeInitializationStatusResponseBodyDataSynchronizationDetails {
	s.Status = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyDataSynchronizationDetails) SetTableName(v string) *DescribeInitializationStatusResponseBodyDataSynchronizationDetails {
	s.TableName = &v
	return s
}

type DescribeInitializationStatusResponseBodyStructureInitializationDetails struct {
	// The constraints of the synchronization object, such as indexes and foreign keys.
	//
	// >  This parameter is returned only if the **ObjectType** parameter is set to **Table** and the synchronization object has constraints.
	Constraints []*DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints `json:"Constraints,omitempty" xml:"Constraints,omitempty" type:"Repeated"`
	// The name of the database to which the object in the destination instance belongs.
	DestinationOwnerDBName *string `json:"DestinationOwnerDBName,omitempty" xml:"DestinationOwnerDBName,omitempty"`
	// The error message returned if initial schema synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The schema of the object.
	ObjectDefinition *string `json:"ObjectDefinition,omitempty" xml:"ObjectDefinition,omitempty"`
	// The name of the object.
	ObjectName *string `json:"ObjectName,omitempty" xml:"ObjectName,omitempty"`
	// The type of the object. Valid values:
	//
	// **Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	// The name of the database to which the object in the source instance belongs.
	SourceOwnerDBName *string `json:"SourceOwnerDBName,omitempty" xml:"SourceOwnerDBName,omitempty"`
	// The status of initial schema synchronization. Valid values:
	//
	// *   **NotStarted**
	// *   **Migrating**
	// *   **Failed**
	// *   **Finished**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeInitializationStatusResponseBodyStructureInitializationDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeInitializationStatusResponseBodyStructureInitializationDetails) GoString() string {
	return s.String()
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetails) SetConstraints(v []*DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints) *DescribeInitializationStatusResponseBodyStructureInitializationDetails {
	s.Constraints = v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetails) SetDestinationOwnerDBName(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetails {
	s.DestinationOwnerDBName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetails) SetErrorMessage(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetails {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetails) SetObjectDefinition(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetails {
	s.ObjectDefinition = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetails) SetObjectName(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetails {
	s.ObjectName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetails) SetObjectType(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetails {
	s.ObjectType = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetails) SetSourceOwnerDBName(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetails {
	s.SourceOwnerDBName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetails) SetStatus(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetails {
	s.Status = &v
	return s
}

type DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints struct {
	// The name of the database to which the object in the destination instance belongs.
	DestinationOwnerDBName *string `json:"DestinationOwnerDBName,omitempty" xml:"DestinationOwnerDBName,omitempty"`
	// The error message returned if constraints failed to be created.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The syntax to create constraints.
	ObjectDefinition *string `json:"ObjectDefinition,omitempty" xml:"ObjectDefinition,omitempty"`
	// The name of the object.
	ObjectName *string `json:"ObjectName,omitempty" xml:"ObjectName,omitempty"`
	// The type of the object. Valid value: **Table**.
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	// The name of the database to which the object in the source instance belongs.
	SourceOwnerDBName *string `json:"SourceOwnerDBName,omitempty" xml:"SourceOwnerDBName,omitempty"`
	// The status of constraint creation. Valid values:
	//
	// *   **NotStarted**
	// *   **Migrating**
	// *   **Failed**
	// *   **Finished**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints) String() string {
	return tea.Prettify(s)
}

func (s DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints) GoString() string {
	return s.String()
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints) SetDestinationOwnerDBName(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints {
	s.DestinationOwnerDBName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints) SetErrorMessage(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints) SetObjectDefinition(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints {
	s.ObjectDefinition = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints) SetObjectName(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints {
	s.ObjectName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints) SetObjectType(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints {
	s.ObjectType = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints) SetSourceOwnerDBName(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints {
	s.SourceOwnerDBName = &v
	return s
}

func (s *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints) SetStatus(v string) *DescribeInitializationStatusResponseBodyStructureInitializationDetailsConstraints {
	s.Status = &v
	return s
}

type DescribeInitializationStatusResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInitializationStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInitializationStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInitializationStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeInitializationStatusResponse) SetHeaders(v map[string]*string) *DescribeInitializationStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeInitializationStatusResponse) SetStatusCode(v int32) *DescribeInitializationStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInitializationStatusResponse) SetBody(v *DescribeInitializationStatusResponseBody) *DescribeInitializationStatusResponse {
	s.Body = v
	return s
}

type DescribeJobMonitorRuleRequest struct {
	// The ID of the data migration, data synchronization, or change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeJobMonitorRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobMonitorRuleRequest) GoString() string {
	return s.String()
}

func (s *DescribeJobMonitorRuleRequest) SetDtsJobId(v string) *DescribeJobMonitorRuleRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeJobMonitorRuleRequest) SetRegionId(v string) *DescribeJobMonitorRuleRequest {
	s.RegionId = &v
	return s
}

type DescribeJobMonitorRuleResponseBody struct {
	// The error code. This parameter will be removed in the future.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the specified **DtsJobId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **ErrMessage** and **DtsJobId** is returned for **DynamicMessage**.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The monitoring rules of the DTS task.
	MonitorRules []*DescribeJobMonitorRuleResponseBodyMonitorRules `json:"MonitorRules,omitempty" xml:"MonitorRules,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// *   **true**: The call was successful.
	// *   **false**:The call failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The topics of all subtasks in the distributed change tracking task.
	Topics []*string `json:"Topics,omitempty" xml:"Topics,omitempty" type:"Repeated"`
}

func (s DescribeJobMonitorRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobMonitorRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJobMonitorRuleResponseBody) SetCode(v string) *DescribeJobMonitorRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBody) SetDtsJobId(v string) *DescribeJobMonitorRuleResponseBody {
	s.DtsJobId = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBody) SetDynamicMessage(v string) *DescribeJobMonitorRuleResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBody) SetErrCode(v string) *DescribeJobMonitorRuleResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBody) SetErrMessage(v string) *DescribeJobMonitorRuleResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBody) SetHttpStatusCode(v int32) *DescribeJobMonitorRuleResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBody) SetMonitorRules(v []*DescribeJobMonitorRuleResponseBodyMonitorRules) *DescribeJobMonitorRuleResponseBody {
	s.MonitorRules = v
	return s
}

func (s *DescribeJobMonitorRuleResponseBody) SetRequestId(v string) *DescribeJobMonitorRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBody) SetSuccess(v bool) *DescribeJobMonitorRuleResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBody) SetTopics(v []*string) *DescribeJobMonitorRuleResponseBody {
	s.Topics = v
	return s
}

type DescribeJobMonitorRuleResponseBodyMonitorRules struct {
	// The threshold that triggers the alert.
	//
	// *   If the request parameter **Type** of the [CreateJobMonitorRule](~~212332~~) operation is set to **delay**, the unit of DelayRuleTime is seconds.
	// *   If the request parameter **Type** of the [CreateJobMonitorRule](~~212332~~) operation is set to **full_timeout**, the unit of DelayRuleTime is hours.
	DelayRuleTime *int64  `json:"DelayRuleTime,omitempty" xml:"DelayRuleTime,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobType       *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	NoticeValue   *int32  `json:"NoticeValue,omitempty" xml:"NoticeValue,omitempty"`
	Period        *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	// The mobile phone numbers that receive alert notifications. Multiple mobile numbers are separated by commas (,).
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	// Indicates whether the monitoring rule is enabled. Valid values:
	//
	// *   **Y**: The monitoring rule is enabled.
	// *   **N**: The monitoring rule is disabled.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	Times *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
	// The type of the monitoring rule. Valid values:
	//
	// *   **delay**: If the task latency reaches the threshold, an alert is triggered.
	// *   **error**: If an exception occurs, an alert is triggered.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeJobMonitorRuleResponseBodyMonitorRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobMonitorRuleResponseBodyMonitorRules) GoString() string {
	return s.String()
}

func (s *DescribeJobMonitorRuleResponseBodyMonitorRules) SetDelayRuleTime(v int64) *DescribeJobMonitorRuleResponseBodyMonitorRules {
	s.DelayRuleTime = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBodyMonitorRules) SetJobId(v string) *DescribeJobMonitorRuleResponseBodyMonitorRules {
	s.JobId = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBodyMonitorRules) SetJobType(v string) *DescribeJobMonitorRuleResponseBodyMonitorRules {
	s.JobType = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBodyMonitorRules) SetNoticeValue(v int32) *DescribeJobMonitorRuleResponseBodyMonitorRules {
	s.NoticeValue = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBodyMonitorRules) SetPeriod(v int32) *DescribeJobMonitorRuleResponseBodyMonitorRules {
	s.Period = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBodyMonitorRules) SetPhone(v string) *DescribeJobMonitorRuleResponseBodyMonitorRules {
	s.Phone = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBodyMonitorRules) SetState(v string) *DescribeJobMonitorRuleResponseBodyMonitorRules {
	s.State = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBodyMonitorRules) SetTimes(v int32) *DescribeJobMonitorRuleResponseBodyMonitorRules {
	s.Times = &v
	return s
}

func (s *DescribeJobMonitorRuleResponseBodyMonitorRules) SetType(v string) *DescribeJobMonitorRuleResponseBodyMonitorRules {
	s.Type = &v
	return s
}

type DescribeJobMonitorRuleResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeJobMonitorRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeJobMonitorRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobMonitorRuleResponse) GoString() string {
	return s.String()
}

func (s *DescribeJobMonitorRuleResponse) SetHeaders(v map[string]*string) *DescribeJobMonitorRuleResponse {
	s.Headers = v
	return s
}

func (s *DescribeJobMonitorRuleResponse) SetStatusCode(v int32) *DescribeJobMonitorRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeJobMonitorRuleResponse) SetBody(v *DescribeJobMonitorRuleResponseBody) *DescribeJobMonitorRuleResponse {
	s.Body = v
	return s
}

type DescribeMetricListRequest struct {
	// The ID of the Alibaba Cloud account.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. **The token can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the data migration or synchronization task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The timestamp that indicates the end of the time range to query. Unit: milliseconds.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Default value: **ALIYUN**.
	Env *string `json:"Env,omitempty" xml:"Env,omitempty"`
	// *   **InternetOut**: the outbound traffic over the Internet. Unit: byte.
	// *   **diskusage_utilization**: the disk usage.
	// *   **IntranetInRate**: the inbound traffic over the internal network. Unit: byte.
	// *   **InternetIn**: the inbound traffic from the Internet. Unit: byte.
	// *   **cpu_total**: the CPU utilization.
	// *   **memory_usedutilization**: the memory usage.
	// *   **IntranetOutRate**: the outbound traffic over the internal network. Unit: byte.
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// Specifies whether to query the metrics of the cluster or a node. Valid values:
	//
	// *   **CLUSTER**: query the metrics of the cluster.
	// *   **NODE**: query the metrics of a node.
	MetricType *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	OwnerID    *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The monitored object. If the **MetricType** parameter is set to **NODE**, set this parameter to the ID of the node that is monitored.
	Param *string `json:"Param,omitempty" xml:"Param,omitempty"`
	// The monitoring interval. Unit: seconds. Minimum value: 15.
	Period *int64 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The timestamp that indicates the beginning of the time range to query. Unit: milliseconds.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeMetricListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricListRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricListRequest) SetAccountId(v string) *DescribeMetricListRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeMetricListRequest) SetClientToken(v string) *DescribeMetricListRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeMetricListRequest) SetDtsJobId(v string) *DescribeMetricListRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribeMetricListRequest) SetEndTime(v int64) *DescribeMetricListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMetricListRequest) SetEnv(v string) *DescribeMetricListRequest {
	s.Env = &v
	return s
}

func (s *DescribeMetricListRequest) SetMetricName(v string) *DescribeMetricListRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricListRequest) SetMetricType(v string) *DescribeMetricListRequest {
	s.MetricType = &v
	return s
}

func (s *DescribeMetricListRequest) SetOwnerID(v string) *DescribeMetricListRequest {
	s.OwnerID = &v
	return s
}

func (s *DescribeMetricListRequest) SetParam(v string) *DescribeMetricListRequest {
	s.Param = &v
	return s
}

func (s *DescribeMetricListRequest) SetPeriod(v int64) *DescribeMetricListRequest {
	s.Period = &v
	return s
}

func (s *DescribeMetricListRequest) SetStartTime(v int64) *DescribeMetricListRequest {
	s.StartTime = &v
	return s
}

type DescribeMetricListResponseBody struct {
	// The error code returned by the backend service. The number is incremented.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The monitoring statistics.
	DataPoints []*DescribeMetricListResponseBodyDataPoints `json:"DataPoints,omitempty" xml:"DataPoints,omitempty" type:"Repeated"`
	// The dynamic part in the error message. This parameter is used to replace the %s variable in the **ErrMessage** parameter.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code returned for an exception.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// *   **InternetOut**: the outbound traffic over the Internet. Unit: byte.
	// *   **diskusage_utilization**: the disk usage.
	// *   **IntranetInRate**: the inbound traffic over the internal network. Unit: byte.
	// *   **InternetIn**: the inbound traffic from the Internet. Unit: byte.
	// *   **cpu_total**: the CPU utilization.
	// *   **memory_usedutilization**: the memory usage.
	// *   **IntranetOutRate**: the outbound traffic over the internal network. Unit: byte.
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// Indicates whether the metrics of the cluster or a node are queried. Valid values:
	//
	// *   **CLUSTER**: The metrics of the cluster are queried.
	// *   **NODE**: The metrics of a node are queried.
	MetricType *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	// The monitored object.
	//
	// *   If the **MetricType** parameter is set to **NODE**, the value of this parameter is the ID of the node that is monitored.****
	// *   If the **MetricType** parameter is set to **CLUSTER**, the value of this parameter is the ID of the dedicated cluster. You can obtain the ID by calling the ListDedicatedCluster operation.
	Param *string `json:"Param,omitempty" xml:"Param,omitempty"`
	// The monitoring interval. Unit: seconds. Minimum value: 15.
	Period *int64 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMetricListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricListResponseBody) SetCode(v string) *DescribeMetricListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetDataPoints(v []*DescribeMetricListResponseBodyDataPoints) *DescribeMetricListResponseBody {
	s.DataPoints = v
	return s
}

func (s *DescribeMetricListResponseBody) SetDynamicMessage(v string) *DescribeMetricListResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetErrCode(v string) *DescribeMetricListResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetErrMessage(v string) *DescribeMetricListResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetHttpStatusCode(v int32) *DescribeMetricListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetMetricName(v string) *DescribeMetricListResponseBody {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetMetricType(v string) *DescribeMetricListResponseBody {
	s.MetricType = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetParam(v string) *DescribeMetricListResponseBody {
	s.Param = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetPeriod(v int64) *DescribeMetricListResponseBody {
	s.Period = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetRequestId(v string) *DescribeMetricListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetSuccess(v bool) *DescribeMetricListResponseBody {
	s.Success = &v
	return s
}

type DescribeMetricListResponseBodyDataPoints struct {
	// The statistical value.
	Statistics *float32 `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The timestamp of the record. Unit: milliseconds.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s DescribeMetricListResponseBodyDataPoints) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricListResponseBodyDataPoints) GoString() string {
	return s.String()
}

func (s *DescribeMetricListResponseBodyDataPoints) SetStatistics(v float32) *DescribeMetricListResponseBodyDataPoints {
	s.Statistics = &v
	return s
}

func (s *DescribeMetricListResponseBodyDataPoints) SetTimestamp(v int64) *DescribeMetricListResponseBodyDataPoints {
	s.Timestamp = &v
	return s
}

type DescribeMetricListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMetricListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMetricListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricListResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricListResponse) SetHeaders(v map[string]*string) *DescribeMetricListResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricListResponse) SetStatusCode(v int32) *DescribeMetricListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricListResponse) SetBody(v *DescribeMetricListResponseBody) *DescribeMetricListResponse {
	s.Body = v
	return s
}

type DescribeMigrationJobAlertRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMigrationJobAlertRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobAlertRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobAlertRequest) SetAccountId(v string) *DescribeMigrationJobAlertRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeMigrationJobAlertRequest) SetClientToken(v string) *DescribeMigrationJobAlertRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeMigrationJobAlertRequest) SetMigrationJobId(v string) *DescribeMigrationJobAlertRequest {
	s.MigrationJobId = &v
	return s
}

func (s *DescribeMigrationJobAlertRequest) SetOwnerId(v string) *DescribeMigrationJobAlertRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMigrationJobAlertRequest) SetRegionId(v string) *DescribeMigrationJobAlertRequest {
	s.RegionId = &v
	return s
}

type DescribeMigrationJobAlertResponseBody struct {
	// The mobile phone numbers that receive latency-related alerts.
	DelayAlertPhone *string `json:"DelayAlertPhone,omitempty" xml:"DelayAlertPhone,omitempty"`
	// Indicates whether task latency is monitored. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	DelayAlertStatus *string `json:"DelayAlertStatus,omitempty" xml:"DelayAlertStatus,omitempty"`
	// The threshold for triggering latency alerts. Unit: seconds.
	DelayOverSeconds *string `json:"DelayOverSeconds,omitempty" xml:"DelayOverSeconds,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The mobile phone numbers that receive status-related alerts.
	ErrorAlertPhone *string `json:"ErrorAlertPhone,omitempty" xml:"ErrorAlertPhone,omitempty"`
	// Indicates whether task status is monitored. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	ErrorAlertStatus *string `json:"ErrorAlertStatus,omitempty" xml:"ErrorAlertStatus,omitempty"`
	// The ID of the data migration instance.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	// The name of the data migration task.
	MigrationJobName *string `json:"MigrationJobName,omitempty" xml:"MigrationJobName,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMigrationJobAlertResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobAlertResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobAlertResponseBody) SetDelayAlertPhone(v string) *DescribeMigrationJobAlertResponseBody {
	s.DelayAlertPhone = &v
	return s
}

func (s *DescribeMigrationJobAlertResponseBody) SetDelayAlertStatus(v string) *DescribeMigrationJobAlertResponseBody {
	s.DelayAlertStatus = &v
	return s
}

func (s *DescribeMigrationJobAlertResponseBody) SetDelayOverSeconds(v string) *DescribeMigrationJobAlertResponseBody {
	s.DelayOverSeconds = &v
	return s
}

func (s *DescribeMigrationJobAlertResponseBody) SetErrCode(v string) *DescribeMigrationJobAlertResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeMigrationJobAlertResponseBody) SetErrMessage(v string) *DescribeMigrationJobAlertResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeMigrationJobAlertResponseBody) SetErrorAlertPhone(v string) *DescribeMigrationJobAlertResponseBody {
	s.ErrorAlertPhone = &v
	return s
}

func (s *DescribeMigrationJobAlertResponseBody) SetErrorAlertStatus(v string) *DescribeMigrationJobAlertResponseBody {
	s.ErrorAlertStatus = &v
	return s
}

func (s *DescribeMigrationJobAlertResponseBody) SetMigrationJobId(v string) *DescribeMigrationJobAlertResponseBody {
	s.MigrationJobId = &v
	return s
}

func (s *DescribeMigrationJobAlertResponseBody) SetMigrationJobName(v string) *DescribeMigrationJobAlertResponseBody {
	s.MigrationJobName = &v
	return s
}

func (s *DescribeMigrationJobAlertResponseBody) SetRequestId(v string) *DescribeMigrationJobAlertResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrationJobAlertResponseBody) SetSuccess(v string) *DescribeMigrationJobAlertResponseBody {
	s.Success = &v
	return s
}

type DescribeMigrationJobAlertResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMigrationJobAlertResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMigrationJobAlertResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobAlertResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobAlertResponse) SetHeaders(v map[string]*string) *DescribeMigrationJobAlertResponse {
	s.Headers = v
	return s
}

func (s *DescribeMigrationJobAlertResponse) SetStatusCode(v int32) *DescribeMigrationJobAlertResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMigrationJobAlertResponse) SetBody(v *DescribeMigrationJobAlertResponseBody) *DescribeMigrationJobAlertResponse {
	s.Body = v
	return s
}

type DescribeMigrationJobDetailRequest struct {
	MigrationMode *DescribeMigrationJobDetailRequestMigrationMode `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region where the data migration instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMigrationJobDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailRequest) SetMigrationMode(v *DescribeMigrationJobDetailRequestMigrationMode) *DescribeMigrationJobDetailRequest {
	s.MigrationMode = v
	return s
}

func (s *DescribeMigrationJobDetailRequest) SetAccountId(v string) *DescribeMigrationJobDetailRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeMigrationJobDetailRequest) SetClientToken(v string) *DescribeMigrationJobDetailRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeMigrationJobDetailRequest) SetMigrationJobId(v string) *DescribeMigrationJobDetailRequest {
	s.MigrationJobId = &v
	return s
}

func (s *DescribeMigrationJobDetailRequest) SetOwnerId(v string) *DescribeMigrationJobDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMigrationJobDetailRequest) SetPageNum(v int32) *DescribeMigrationJobDetailRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeMigrationJobDetailRequest) SetPageSize(v int32) *DescribeMigrationJobDetailRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMigrationJobDetailRequest) SetRegionId(v string) *DescribeMigrationJobDetailRequest {
	s.RegionId = &v
	return s
}

type DescribeMigrationJobDetailRequestMigrationMode struct {
	// Specifies whether to query the details of full data migration. Valid values:
	//
	// *   **true**: yes
	//
	// *   **false**: no
	//
	// > Default value: **false**
	DataInitialization *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// Specifies whether to query the details of incremental data migration. Valid values:
	//
	// *   **true**: yes
	//
	// *   **false**: no
	//
	// > Default value: **false**
	DataSynchronization *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// Specifies whether to query the details of schema migration. Valid values:
	//
	// *   **true**: yes
	//
	// *   **false**: no
	//
	// > Default value: **false**
	StructureInitialization *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeMigrationJobDetailRequestMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailRequestMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailRequestMigrationMode) SetDataInitialization(v bool) *DescribeMigrationJobDetailRequestMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeMigrationJobDetailRequestMigrationMode) SetDataSynchronization(v bool) *DescribeMigrationJobDetailRequestMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeMigrationJobDetailRequestMigrationMode) SetStructureInitialization(v bool) *DescribeMigrationJobDetailRequestMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeMigrationJobDetailResponseBody struct {
	// The details of full data migration.
	DataInitializationDetailList *DescribeMigrationJobDetailResponseBodyDataInitializationDetailList `json:"DataInitializationDetailList,omitempty" xml:"DataInitializationDetailList,omitempty" type:"Struct"`
	// The details of incremental data migration.
	DataSynchronizationDetailList *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailList `json:"DataSynchronizationDetailList,omitempty" xml:"DataSynchronizationDetailList,omitempty" type:"Struct"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The maximum number of data migration instances that can be displayed on one page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of schema migration.
	StructureInitializationDetailList *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailList `json:"StructureInitializationDetailList,omitempty" xml:"StructureInitializationDetailList,omitempty" type:"Struct"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries that are returned.
	TotalRecordCount *int64 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeMigrationJobDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailResponseBody) SetDataInitializationDetailList(v *DescribeMigrationJobDetailResponseBodyDataInitializationDetailList) *DescribeMigrationJobDetailResponseBody {
	s.DataInitializationDetailList = v
	return s
}

func (s *DescribeMigrationJobDetailResponseBody) SetDataSynchronizationDetailList(v *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailList) *DescribeMigrationJobDetailResponseBody {
	s.DataSynchronizationDetailList = v
	return s
}

func (s *DescribeMigrationJobDetailResponseBody) SetErrCode(v string) *DescribeMigrationJobDetailResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBody) SetErrMessage(v string) *DescribeMigrationJobDetailResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBody) SetPageNumber(v int32) *DescribeMigrationJobDetailResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBody) SetPageRecordCount(v int32) *DescribeMigrationJobDetailResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBody) SetRequestId(v string) *DescribeMigrationJobDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBody) SetStructureInitializationDetailList(v *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailList) *DescribeMigrationJobDetailResponseBody {
	s.StructureInitializationDetailList = v
	return s
}

func (s *DescribeMigrationJobDetailResponseBody) SetSuccess(v string) *DescribeMigrationJobDetailResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBody) SetTotalRecordCount(v int64) *DescribeMigrationJobDetailResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeMigrationJobDetailResponseBodyDataInitializationDetailList struct {
	DataInitializationDetail []*DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail `json:"DataInitializationDetail,omitempty" xml:"DataInitializationDetail,omitempty" type:"Repeated"`
}

func (s DescribeMigrationJobDetailResponseBodyDataInitializationDetailList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailResponseBodyDataInitializationDetailList) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailResponseBodyDataInitializationDetailList) SetDataInitializationDetail(v []*DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) *DescribeMigrationJobDetailResponseBodyDataInitializationDetailList {
	s.DataInitializationDetail = v
	return s
}

type DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail struct {
	// The name of the database to which the migration object in the destination instance belongs.
	DestinationOwnerDBName *string `json:"DestinationOwnerDBName,omitempty" xml:"DestinationOwnerDBName,omitempty"`
	// The error message returned if full data migration failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The number of records that have been migrated.
	FinishRowNum *string `json:"FinishRowNum,omitempty" xml:"FinishRowNum,omitempty"`
	// The time taken by full data migration.
	MigrationTime *string `json:"MigrationTime,omitempty" xml:"MigrationTime,omitempty"`
	// The name of the database to which the migration object in the source instance belongs.
	SourceOwnerDBName *string `json:"SourceOwnerDBName,omitempty" xml:"SourceOwnerDBName,omitempty"`
	// The status of full data migration. Valid values:
	//
	// - **NotStarted**: Full data migration is not started.
	// - **Migrating**: Full data migration is in progress.
	// - **Failed**: Full data migration failed.
	// - **Finished**: Full data migration is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The table name.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
	// The total number of records that are supposed to be migrated by the task.
	TotalRowNum *string `json:"TotalRowNum,omitempty" xml:"TotalRowNum,omitempty"`
}

func (s DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) SetDestinationOwnerDBName(v string) *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail {
	s.DestinationOwnerDBName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) SetErrorMessage(v string) *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) SetFinishRowNum(v string) *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail {
	s.FinishRowNum = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) SetMigrationTime(v string) *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail {
	s.MigrationTime = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) SetSourceOwnerDBName(v string) *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail {
	s.SourceOwnerDBName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) SetStatus(v string) *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail {
	s.Status = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) SetTableName(v string) *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail {
	s.TableName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail) SetTotalRowNum(v string) *DescribeMigrationJobDetailResponseBodyDataInitializationDetailListDataInitializationDetail {
	s.TotalRowNum = &v
	return s
}

type DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailList struct {
	DataSynchronizationDetail []*DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail `json:"DataSynchronizationDetail,omitempty" xml:"DataSynchronizationDetail,omitempty" type:"Repeated"`
}

func (s DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailList) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailList) SetDataSynchronizationDetail(v []*DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail) *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailList {
	s.DataSynchronizationDetail = v
	return s
}

type DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail struct {
	// The name of the database to which the migration object in the destination instance belongs.
	DestinationOwnerDBName *string `json:"DestinationOwnerDBName,omitempty" xml:"DestinationOwnerDBName,omitempty"`
	// The error message returned if incremental data migration failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The name of the database to which the migration object in the source instance belongs.
	SourceOwnerDBName *string `json:"SourceOwnerDBName,omitempty" xml:"SourceOwnerDBName,omitempty"`
	// The status of incremental data migration. Valid values:
	//
	// *   **NotStarted**: Incremental data migration is not started.
	// *   **Migrating**: Incremental data migration is in progress.
	// *   **Failed**: Incremental data migration failed.
	// *   **Finished**: Incremental data migration is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The table name.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail) SetDestinationOwnerDBName(v string) *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail {
	s.DestinationOwnerDBName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail) SetErrorMessage(v string) *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail) SetSourceOwnerDBName(v string) *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail {
	s.SourceOwnerDBName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail) SetStatus(v string) *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail {
	s.Status = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail) SetTableName(v string) *DescribeMigrationJobDetailResponseBodyDataSynchronizationDetailListDataSynchronizationDetail {
	s.TableName = &v
	return s
}

type DescribeMigrationJobDetailResponseBodyStructureInitializationDetailList struct {
	StructureInitializationDetail []*DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail `json:"StructureInitializationDetail,omitempty" xml:"StructureInitializationDetail,omitempty" type:"Repeated"`
}

func (s DescribeMigrationJobDetailResponseBodyStructureInitializationDetailList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailResponseBodyStructureInitializationDetailList) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailList) SetStructureInitializationDetail(v []*DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailList {
	s.StructureInitializationDetail = v
	return s
}

type DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail struct {
	// The constraints of the migration object, such as indexes and foreign keys.
	//
	// >  This parameter is returned only if the **ObjectType** parameter is set to **Table** and the migration object has constraints.
	ConstraintList *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintList `json:"ConstraintList,omitempty" xml:"ConstraintList,omitempty" type:"Struct"`
	// The name of the database to which the migration object in the destination instance belongs.
	DestinationOwnerDBName *string `json:"DestinationOwnerDBName,omitempty" xml:"DestinationOwnerDBName,omitempty"`
	// The error message returned if schema migration failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The schema of the migration object.
	ObjectDefinition *string `json:"ObjectDefinition,omitempty" xml:"ObjectDefinition,omitempty"`
	// The name of migration object.
	ObjectName *string `json:"ObjectName,omitempty" xml:"ObjectName,omitempty"`
	// The type of the migration object. Valid values: **Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	// The name of the database to which the migration object in the source instance belongs.
	SourceOwnerDBName *string `json:"SourceOwnerDBName,omitempty" xml:"SourceOwnerDBName,omitempty"`
	// The status of schema migration. Valid values:
	//
	// - **NotStarted**: Schema migration is not started.
	// - **Migrating**: Schema migration is in progress.
	// - **Failed**: Schema migration failed.
	// - **Finished**: Schema migration is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) SetConstraintList(v *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintList) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail {
	s.ConstraintList = v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) SetDestinationOwnerDBName(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail {
	s.DestinationOwnerDBName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) SetErrorMessage(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) SetObjectDefinition(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail {
	s.ObjectDefinition = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) SetObjectName(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail {
	s.ObjectName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) SetObjectType(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail {
	s.ObjectType = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) SetSourceOwnerDBName(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail {
	s.SourceOwnerDBName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail) SetStatus(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetail {
	s.Status = &v
	return s
}

type DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintList struct {
	StructureInitializationDetail []*DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail `json:"StructureInitializationDetail,omitempty" xml:"StructureInitializationDetail,omitempty" type:"Repeated"`
}

func (s DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintList) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintList) SetStructureInitializationDetail(v []*DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintList {
	s.StructureInitializationDetail = v
	return s
}

type DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail struct {
	// The name of the database to which the migration object in the destination instance belongs.
	DestinationOwnerDBName *string `json:"DestinationOwnerDBName,omitempty" xml:"DestinationOwnerDBName,omitempty"`
	// The error message returned if constraints failed to be created.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The syntax to create constraints.
	ObjectDefinition *string `json:"ObjectDefinition,omitempty" xml:"ObjectDefinition,omitempty"`
	// The name of migration object.
	ObjectName *string `json:"ObjectName,omitempty" xml:"ObjectName,omitempty"`
	// The type of the migration object. The value is **Table**.
	ObjectType *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	// The name of the database to which the migration object in the source instance belongs.
	SourceOwnerDBName *string `json:"SourceOwnerDBName,omitempty" xml:"SourceOwnerDBName,omitempty"`
	// The status of constraint creation. Valid values:
	//
	// - **NotStarted**
	// - **Migrating**
	// - **Failed**
	// - **Finished**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail) SetDestinationOwnerDBName(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail {
	s.DestinationOwnerDBName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail) SetErrorMessage(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail) SetObjectDefinition(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail {
	s.ObjectDefinition = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail) SetObjectName(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail {
	s.ObjectName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail) SetObjectType(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail {
	s.ObjectType = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail) SetSourceOwnerDBName(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail {
	s.SourceOwnerDBName = &v
	return s
}

func (s *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail) SetStatus(v string) *DescribeMigrationJobDetailResponseBodyStructureInitializationDetailListStructureInitializationDetailConstraintListStructureInitializationDetail {
	s.Status = &v
	return s
}

type DescribeMigrationJobDetailResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMigrationJobDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMigrationJobDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobDetailResponse) SetHeaders(v map[string]*string) *DescribeMigrationJobDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeMigrationJobDetailResponse) SetStatusCode(v int32) *DescribeMigrationJobDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMigrationJobDetailResponse) SetBody(v *DescribeMigrationJobDetailResponseBody) *DescribeMigrationJobDetailResponse {
	s.Body = v
	return s
}

type DescribeMigrationJobStatusRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query the instance ID.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMigrationJobStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusRequest) SetAccountId(v string) *DescribeMigrationJobStatusRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeMigrationJobStatusRequest) SetClientToken(v string) *DescribeMigrationJobStatusRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeMigrationJobStatusRequest) SetMigrationJobId(v string) *DescribeMigrationJobStatusRequest {
	s.MigrationJobId = &v
	return s
}

func (s *DescribeMigrationJobStatusRequest) SetOwnerId(v string) *DescribeMigrationJobStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMigrationJobStatusRequest) SetRegionId(v string) *DescribeMigrationJobStatusRequest {
	s.RegionId = &v
	return s
}

type DescribeMigrationJobStatusResponseBody struct {
	// The status of full data migration.
	DataInitializationStatus *DescribeMigrationJobStatusResponseBodyDataInitializationStatus `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	// The status of incremental data migration.
	DataSynchronizationStatus *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	// The connection settings of the destination instance.
	DestinationEndpoint *DescribeMigrationJobStatusResponseBodyDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**. For more information, see [Specifications of data migration instances](~~26606~~).
	MigrationJobClass *string `json:"MigrationJobClass,omitempty" xml:"MigrationJobClass,omitempty"`
	// The ID of the data migration instance.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	// The name of the data migration task.
	MigrationJobName *string `json:"MigrationJobName,omitempty" xml:"MigrationJobName,omitempty"`
	// The status of the data migration task. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **Migrating**: The task is migrating data.
	// *   **Suspending**: The task is paused.
	// *   **MigrationFailed**: The task failed to migrate data.
	// *   **Finished**: The task is completed.
	MigrationJobStatus *string `json:"MigrationJobStatus,omitempty" xml:"MigrationJobStatus,omitempty"`
	// The migration types.
	MigrationMode *DescribeMigrationJobStatusResponseBodyMigrationMode `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	// The objects that are migrated by the task.
	MigrationObject *string `json:"MigrationObject,omitempty" xml:"MigrationObject,omitempty"`
	// The billing method of the data migration instance. The value is **PostPaid** (pay-as-you-go).
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The precheck details.
	PrecheckStatus *DescribeMigrationJobStatusResponseBodyPrecheckStatus `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The connection settings of the source instance.
	SourceEndpoint *DescribeMigrationJobStatusResponseBodySourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The status of schema migration.
	StructureInitializationStatus *DescribeMigrationJobStatusResponseBodyStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	TaskId  *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeMigrationJobStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponseBody) SetDataInitializationStatus(v *DescribeMigrationJobStatusResponseBodyDataInitializationStatus) *DescribeMigrationJobStatusResponseBody {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetDataSynchronizationStatus(v *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus) *DescribeMigrationJobStatusResponseBody {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetDestinationEndpoint(v *DescribeMigrationJobStatusResponseBodyDestinationEndpoint) *DescribeMigrationJobStatusResponseBody {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetErrCode(v string) *DescribeMigrationJobStatusResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetErrMessage(v string) *DescribeMigrationJobStatusResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetMigrationJobClass(v string) *DescribeMigrationJobStatusResponseBody {
	s.MigrationJobClass = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetMigrationJobId(v string) *DescribeMigrationJobStatusResponseBody {
	s.MigrationJobId = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetMigrationJobName(v string) *DescribeMigrationJobStatusResponseBody {
	s.MigrationJobName = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetMigrationJobStatus(v string) *DescribeMigrationJobStatusResponseBody {
	s.MigrationJobStatus = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetMigrationMode(v *DescribeMigrationJobStatusResponseBodyMigrationMode) *DescribeMigrationJobStatusResponseBody {
	s.MigrationMode = v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetMigrationObject(v string) *DescribeMigrationJobStatusResponseBody {
	s.MigrationObject = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetPayType(v string) *DescribeMigrationJobStatusResponseBody {
	s.PayType = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetPrecheckStatus(v *DescribeMigrationJobStatusResponseBodyPrecheckStatus) *DescribeMigrationJobStatusResponseBody {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetRequestId(v string) *DescribeMigrationJobStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetSourceEndpoint(v *DescribeMigrationJobStatusResponseBodySourceEndpoint) *DescribeMigrationJobStatusResponseBody {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetStructureInitializationStatus(v *DescribeMigrationJobStatusResponseBodyStructureInitializationStatus) *DescribeMigrationJobStatusResponseBody {
	s.StructureInitializationStatus = v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetSuccess(v string) *DescribeMigrationJobStatusResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBody) SetTaskId(v string) *DescribeMigrationJobStatusResponseBody {
	s.TaskId = &v
	return s
}

type DescribeMigrationJobStatusResponseBodyDataInitializationStatus struct {
	// The error message returned if full data migration failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The migration progress. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of records that have been migrated during full data migration.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of full data migration. Valid values:
	//
	// *   **NotStarted**: Full data migration is not started.
	// *   **Migrating**: Full data migration is in progress.
	// *   **Failed**: Full data migration failed.
	// *   **Finished**: Full data migration is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMigrationJobStatusResponseBodyDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponseBodyDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponseBodyDataInitializationStatus) SetErrorMessage(v string) *DescribeMigrationJobStatusResponseBodyDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDataInitializationStatus) SetPercent(v string) *DescribeMigrationJobStatusResponseBodyDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDataInitializationStatus) SetProgress(v string) *DescribeMigrationJobStatusResponseBodyDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDataInitializationStatus) SetStatus(v string) *DescribeMigrationJobStatusResponseBodyDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus struct {
	// The UNIX timestamp generated when the latest incremental data is migrated. Unit: seconds.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The latency of incremental data migration. Unit: seconds.
	Delay *string `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The error message returned if incremental data migration failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of incremental data migration. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The status of incremental data migration. Valid values:
	//
	// *   **NotStarted**: Incremental data migration is not started.
	// *   **Migrating**: Incremental data migration is in progress.
	// *   **Failed**: Incremental data migration failed.
	// *   **Finished**: Incremental data migration is completed.
	// *   **Catched**: Incremental data migration is not delayed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus) SetCheckpoint(v string) *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus {
	s.Checkpoint = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus) SetDelay(v string) *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus {
	s.Delay = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus) SetErrorMessage(v string) *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus) SetPercent(v string) *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus) SetStatus(v string) *DescribeMigrationJobStatusResponseBodyDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeMigrationJobStatusResponseBodyDestinationEndpoint struct {
	// The name of the database to which the migration object in the destination instance belongs.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database type of the destination instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The endpoint of the destination instance.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the destination instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the destination instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The database service port of the destination instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The database account of the destination instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// The system ID (SID) of the Oracle database.
	//
	// >  This parameter is returned only if the database type of the destination instance is **Oracle**.
	OracleSID *string `json:"oracleSID,omitempty" xml:"oracleSID,omitempty"`
}

func (s DescribeMigrationJobStatusResponseBodyDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponseBodyDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponseBodyDestinationEndpoint) SetDatabaseName(v string) *DescribeMigrationJobStatusResponseBodyDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDestinationEndpoint) SetEngineName(v string) *DescribeMigrationJobStatusResponseBodyDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDestinationEndpoint) SetIP(v string) *DescribeMigrationJobStatusResponseBodyDestinationEndpoint {
	s.IP = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDestinationEndpoint) SetInstanceId(v string) *DescribeMigrationJobStatusResponseBodyDestinationEndpoint {
	s.InstanceId = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDestinationEndpoint) SetInstanceType(v string) *DescribeMigrationJobStatusResponseBodyDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDestinationEndpoint) SetPort(v string) *DescribeMigrationJobStatusResponseBodyDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDestinationEndpoint) SetUserName(v string) *DescribeMigrationJobStatusResponseBodyDestinationEndpoint {
	s.UserName = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyDestinationEndpoint) SetOracleSID(v string) *DescribeMigrationJobStatusResponseBodyDestinationEndpoint {
	s.OracleSID = &v
	return s
}

type DescribeMigrationJobStatusResponseBodyMigrationMode struct {
	// Indicates whether full data migration is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DataInitialization *bool `json:"dataInitialization,omitempty" xml:"dataInitialization,omitempty"`
	// Indicates whether incremental data migration is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DataSynchronization *bool `json:"dataSynchronization,omitempty" xml:"dataSynchronization,omitempty"`
	// Indicates whether schema migration is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	StructureInitialization *bool `json:"structureInitialization,omitempty" xml:"structureInitialization,omitempty"`
}

func (s DescribeMigrationJobStatusResponseBodyMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponseBodyMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponseBodyMigrationMode) SetDataInitialization(v bool) *DescribeMigrationJobStatusResponseBodyMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyMigrationMode) SetDataSynchronization(v bool) *DescribeMigrationJobStatusResponseBodyMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyMigrationMode) SetStructureInitialization(v bool) *DescribeMigrationJobStatusResponseBodyMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeMigrationJobStatusResponseBodyPrecheckStatus struct {
	// The result of each precheck item.
	Detail *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	// The precheck progress. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The precheck status. Valid values:
	//
	// *   **NotStarted**
	// *   **Suspending**:
	// *   **Checking**
	// *   **Failed**
	// *   **Finished**
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMigrationJobStatusResponseBodyPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponseBodyPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponseBodyPrecheckStatus) SetDetail(v *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetail) *DescribeMigrationJobStatusResponseBodyPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyPrecheckStatus) SetPercent(v string) *DescribeMigrationJobStatusResponseBodyPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyPrecheckStatus) SetStatus(v string) *DescribeMigrationJobStatusResponseBodyPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeMigrationJobStatusResponseBodyPrecheckStatusDetail struct {
	CheckItem []*DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem `json:"CheckItem,omitempty" xml:"CheckItem,omitempty" type:"Repeated"`
}

func (s DescribeMigrationJobStatusResponseBodyPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponseBodyPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetail) SetCheckItem(v []*DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem) *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetail {
	s.CheckItem = v
	return s
}

type DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem struct {
	// The precheck result. Valid values:
	//
	// *   **Success**: The task passed the precheck.
	// *   **Failed**: The task failed to pass the precheck.
	CheckStatus *string `json:"CheckStatus,omitempty" xml:"CheckStatus,omitempty"`
	// The error message returned if the task failed to pass the precheck.
	//
	// >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The name of the precheck item.
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	// The method to fix the precheck failure.
	//
	// >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
	RepairMethod *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem) SetCheckStatus(v string) *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem {
	s.CheckStatus = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem) SetErrorMessage(v string) *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem) SetItemName(v string) *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem {
	s.ItemName = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem) SetRepairMethod(v string) *DescribeMigrationJobStatusResponseBodyPrecheckStatusDetailCheckItem {
	s.RepairMethod = &v
	return s
}

type DescribeMigrationJobStatusResponseBodySourceEndpoint struct {
	// The name of the database to which the migration object in the source instance belongs.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database type of the source instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The endpoint of the source instance.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the source instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the source instance.
	//
	// *   **RDS**: ApsaraDB RDS instance
	// *   **ECS**: self-managed database that is hosted on Elastic Compute Service (ECS)
	// *   **LocalInstance**: self-managed database with a public IP address
	// *   **Express**: self-managed database that is connected over Express Connect, VPN Gateway, or Smart Access Gateway
	// *   **MongoDB**: ApsaraDB for MongoDB instance
	// *   **POLARDB**: PolarDB for MySQL cluster (available only for the China site)
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The database service port of the source instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The database account of the source instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// The SID of the Oracle database.
	//
	// >  This parameter is returned only if the database type of the source instance is **Oracle**.
	OracleSID *string `json:"oracleSID,omitempty" xml:"oracleSID,omitempty"`
}

func (s DescribeMigrationJobStatusResponseBodySourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponseBodySourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponseBodySourceEndpoint) SetDatabaseName(v string) *DescribeMigrationJobStatusResponseBodySourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodySourceEndpoint) SetEngineName(v string) *DescribeMigrationJobStatusResponseBodySourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodySourceEndpoint) SetIP(v string) *DescribeMigrationJobStatusResponseBodySourceEndpoint {
	s.IP = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodySourceEndpoint) SetInstanceId(v string) *DescribeMigrationJobStatusResponseBodySourceEndpoint {
	s.InstanceId = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodySourceEndpoint) SetInstanceType(v string) *DescribeMigrationJobStatusResponseBodySourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodySourceEndpoint) SetPort(v string) *DescribeMigrationJobStatusResponseBodySourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodySourceEndpoint) SetUserName(v string) *DescribeMigrationJobStatusResponseBodySourceEndpoint {
	s.UserName = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodySourceEndpoint) SetOracleSID(v string) *DescribeMigrationJobStatusResponseBodySourceEndpoint {
	s.OracleSID = &v
	return s
}

type DescribeMigrationJobStatusResponseBodyStructureInitializationStatus struct {
	// The error message returned if schema migration failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of schema migration. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of tables whose schemas have been migrated.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of schema migration. Valid values:
	//
	// *   **NotStarted**: Schema migration is not started.
	// *   **Migrating**: Schema migration is in progress.
	// *   **Failed**: Schema migration failed.
	// *   **Finished**: Schema migration is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMigrationJobStatusResponseBodyStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponseBodyStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponseBodyStructureInitializationStatus) SetErrorMessage(v string) *DescribeMigrationJobStatusResponseBodyStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyStructureInitializationStatus) SetPercent(v string) *DescribeMigrationJobStatusResponseBodyStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyStructureInitializationStatus) SetProgress(v string) *DescribeMigrationJobStatusResponseBodyStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeMigrationJobStatusResponseBodyStructureInitializationStatus) SetStatus(v string) *DescribeMigrationJobStatusResponseBodyStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeMigrationJobStatusResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMigrationJobStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMigrationJobStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobStatusResponse) SetHeaders(v map[string]*string) *DescribeMigrationJobStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeMigrationJobStatusResponse) SetStatusCode(v int32) *DescribeMigrationJobStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMigrationJobStatusResponse) SetBody(v *DescribeMigrationJobStatusResponseBody) *DescribeMigrationJobStatusResponse {
	s.Body = v
	return s
}

type DescribeMigrationJobsRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The name of the data migration task.
	//
	// >  Fuzzy match is supported.
	MigrationJobName *string `json:"MigrationJobName,omitempty" xml:"MigrationJobName,omitempty"`
	OwnerId          *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region where the data migration instances reside. For more information, see [List of supported regions](~~141033~~).
	RegionId *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Tag      []*DescribeMigrationJobsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeMigrationJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsRequest) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsRequest) SetAccountId(v string) *DescribeMigrationJobsRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeMigrationJobsRequest) SetMigrationJobName(v string) *DescribeMigrationJobsRequest {
	s.MigrationJobName = &v
	return s
}

func (s *DescribeMigrationJobsRequest) SetOwnerId(v string) *DescribeMigrationJobsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeMigrationJobsRequest) SetPageNum(v int32) *DescribeMigrationJobsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeMigrationJobsRequest) SetPageSize(v int32) *DescribeMigrationJobsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMigrationJobsRequest) SetRegionId(v string) *DescribeMigrationJobsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMigrationJobsRequest) SetTag(v []*DescribeMigrationJobsRequestTag) *DescribeMigrationJobsRequest {
	s.Tag = v
	return s
}

type DescribeMigrationJobsRequestTag struct {
	// The tag key. You can call the [ListTagResources](~~191187~~) operation to query the tag key.
	//
	// >
	// *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
	// *   This parameter cannot be an empty string.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value. You can call the [ListTagResources](~~191187~~) operation to query the tag value.
	//
	// >
	// *   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
	// *   This parameter can be an empty string.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeMigrationJobsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsRequestTag) SetKey(v string) *DescribeMigrationJobsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeMigrationJobsRequestTag) SetValue(v string) *DescribeMigrationJobsRequestTag {
	s.Value = &v
	return s
}

type DescribeMigrationJobsResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The list of data migration instances and the details of each instance.
	MigrationJobs *DescribeMigrationJobsResponseBodyMigrationJobs `json:"MigrationJobs,omitempty" xml:"MigrationJobs,omitempty" type:"Struct"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The maximum number of entries that can be displayed on the current page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of data migration instances that belong to your Alibaba Cloud account.
	TotalRecordCount *int64 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeMigrationJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBody) SetErrCode(v string) *DescribeMigrationJobsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeMigrationJobsResponseBody) SetErrMessage(v string) *DescribeMigrationJobsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeMigrationJobsResponseBody) SetMigrationJobs(v *DescribeMigrationJobsResponseBodyMigrationJobs) *DescribeMigrationJobsResponseBody {
	s.MigrationJobs = v
	return s
}

func (s *DescribeMigrationJobsResponseBody) SetPageNumber(v int32) *DescribeMigrationJobsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMigrationJobsResponseBody) SetPageRecordCount(v int32) *DescribeMigrationJobsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeMigrationJobsResponseBody) SetRequestId(v string) *DescribeMigrationJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMigrationJobsResponseBody) SetSuccess(v string) *DescribeMigrationJobsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMigrationJobsResponseBody) SetTotalRecordCount(v int64) *DescribeMigrationJobsResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobs struct {
	MigrationJob []*DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob `json:"MigrationJob,omitempty" xml:"MigrationJob,omitempty" type:"Repeated"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobs) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobs) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobs) SetMigrationJob(v []*DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) *DescribeMigrationJobsResponseBodyMigrationJobs {
	s.MigrationJob = v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob struct {
	// The details of full data migration.
	DataInitialization *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty" type:"Struct"`
	// The details of incremental data migration.
	DataSynchronization *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty" type:"Struct"`
	// The connection settings of the destination instance.
	DestinationEndpoint *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	// The time when the data migration instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	InstanceCreateTime *string `json:"InstanceCreateTime,omitempty" xml:"InstanceCreateTime,omitempty"`
	// The time when the data migration task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	JobCreateTime *string `json:"JobCreateTime,omitempty" xml:"JobCreateTime,omitempty"`
	// The specification of the data migration instance. Valid values: **small**, **medium**, **large**, **xlarge**, and **2xlarge**. For more information, see [Specifications of data migration instances](~~26606~~).
	MigrationJobClass *string `json:"MigrationJobClass,omitempty" xml:"MigrationJobClass,omitempty"`
	// The ID of the data migration instance.
	MigrationJobID *string `json:"MigrationJobID,omitempty" xml:"MigrationJobID,omitempty"`
	// The name of the data migration task.
	MigrationJobName *string `json:"MigrationJobName,omitempty" xml:"MigrationJobName,omitempty"`
	// The status of the data migration task. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **Migrating**: The task is migrating data.
	// *   **Suspending**: The task is paused.
	// *   **MigrationFailed**: The task failed to migrate data.
	// *   **Finished**: The task is completed.
	MigrationJobStatus *string `json:"MigrationJobStatus,omitempty" xml:"MigrationJobStatus,omitempty"`
	// The migration types.
	MigrationMode *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode `json:"MigrationMode,omitempty" xml:"MigrationMode,omitempty" type:"Struct"`
	// The objects that are migrated by the task.
	MigrationObject *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObject `json:"MigrationObject,omitempty" xml:"MigrationObject,omitempty" type:"Struct"`
	// The billing method of the data migration instance. The value is **PostPaid** (pay-as-you-go).
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The precheck details.
	Precheck *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck `json:"Precheck,omitempty" xml:"Precheck,omitempty" type:"Struct"`
	// The connection settings of the source instance.
	SourceEndpoint *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The details of schema migration.
	StructureInitialization *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty" type:"Struct"`
	// The collection of tags.
	Tags *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetDataInitialization(v *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.DataInitialization = v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetDataSynchronization(v *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.DataSynchronization = v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetDestinationEndpoint(v *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetInstanceCreateTime(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.InstanceCreateTime = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetJobCreateTime(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.JobCreateTime = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetMigrationJobClass(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.MigrationJobClass = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetMigrationJobID(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.MigrationJobID = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetMigrationJobName(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.MigrationJobName = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetMigrationJobStatus(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.MigrationJobStatus = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetMigrationMode(v *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.MigrationMode = v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetMigrationObject(v *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObject) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.MigrationObject = v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetPayType(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.PayType = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetPrecheck(v *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.Precheck = v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetSourceEndpoint(v *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetStructureInitialization(v *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.StructureInitialization = v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob) SetTags(v *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTags) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJob {
	s.Tags = v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization struct {
	// The error message returned if full data migration failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The migration progress. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of records that have been migrated during full data migration.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of full data migration. Valid values:
	//
	// *   **NotStarted**: Full data migration is not started.
	// *   **Migrating**: Full data migration is in progress.
	// *   **Failed**: Full data migration failed.
	// *   **Finished**: Full data migration is completed.
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization) SetErrorMessage(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization) SetPercent(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization {
	s.Percent = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization) SetProgress(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization {
	s.Progress = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization) SetStatus(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataInitialization {
	s.Status = &v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization struct {
	// The latency of incremental data migration. Unit: seconds.
	Delay *string `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The error message returned if incremental data migration failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of incremental data migration. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The status of incremental data migration. Valid values:
	//
	// *   **NotStarted**: Incremental data migration is not started.
	// *   **Migrating**: Incremental data migration is in progress.
	// *   **Failed**: Incremental data migration failed.
	// *   **Finished**: Incremental data migration is completed.
	// *   **Catched**: Incremental data migration is not delayed.
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization) SetDelay(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization {
	s.Delay = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization) SetErrorMessage(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization) SetPercent(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization {
	s.Percent = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization) SetStatus(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDataSynchronization {
	s.Status = &v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint struct {
	// The name of the database to which the migration object in the destination instance belongs.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database type of the destination instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The endpoint of the destination instance.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the destination instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the destination instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// This parameter is returned only if the database type of the destination instance is **Oracle**.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The database service port of the destination instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The database account of the destination instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) SetDatabaseName(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) SetEngineName(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) SetIP(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint {
	s.IP = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) SetInstanceID(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) SetInstanceType(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) SetOracleSID(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) SetPort(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint) SetUserName(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode struct {
	// Indicates whether full data migration is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DataInitialization *bool `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// Indicates whether incremental data migration is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DataSynchronization *bool `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// Indicates whether schema migration is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	StructureInitialization *bool `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode) SetDataInitialization(v bool) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode {
	s.DataInitialization = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode) SetDataSynchronization(v bool) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode {
	s.DataSynchronization = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode) SetStructureInitialization(v bool) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationMode {
	s.StructureInitialization = &v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObject struct {
	SynchronousObject []*DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject `json:"SynchronousObject,omitempty" xml:"SynchronousObject,omitempty" type:"Repeated"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObject) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObject) SetSynchronousObject(v []*DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObject {
	s.SynchronousObject = v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject struct {
	// The name of the database to which the migration object in the source instance belongs.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The names of the migrated tables.
	TableList *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObjectTableList `json:"TableList,omitempty" xml:"TableList,omitempty" type:"Struct"`
	// Indicates whether an entire database is migrated. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	WholeDatabase *string `json:"WholeDatabase,omitempty" xml:"WholeDatabase,omitempty"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject) SetDatabaseName(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject {
	s.DatabaseName = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject) SetTableList(v *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObjectTableList) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject {
	s.TableList = v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject) SetWholeDatabase(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObject {
	s.WholeDatabase = &v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObjectTableList struct {
	Table []*string `json:"Table,omitempty" xml:"Table,omitempty" type:"Repeated"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObjectTableList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObjectTableList) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObjectTableList) SetTable(v []*string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobMigrationObjectSynchronousObjectTableList {
	s.Table = v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck struct {
	// The precheck progress. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The precheck result. Valid values:
	//
	// *   **Success**: The task passed the precheck.
	// *   **Failed**: The task failed to pass the precheck.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck) SetPercent(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck {
	s.Percent = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck) SetStatus(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobPrecheck {
	s.Status = &v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint struct {
	// The name of the database to which the migration object in the source instance belongs.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The database type of the source instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The endpoint of the source instance.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the source instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the source instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// This parameter is returned only if the database type of the source instance is **Oracle**.
	OracleSID *string `json:"OracleSID,omitempty" xml:"OracleSID,omitempty"`
	// The database service port of the source instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The database account of the source instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) SetDatabaseName(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint {
	s.DatabaseName = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) SetEngineName(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) SetIP(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint {
	s.IP = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) SetInstanceID(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) SetInstanceType(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) SetOracleSID(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint {
	s.OracleSID = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) SetPort(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint) SetUserName(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobSourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization struct {
	// The error message returned if schema migration failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of schema migration. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of tables whose schemas have been migrated.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of schema migration. Valid values:
	//
	// *   **NotStarted**: Schema migration is not started.
	// *   **Migrating**: Schema migration is in progress.
	// *   **Failed**: Schema migration failed.
	// *   **Finished**: Schema migration is completed.
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization) SetErrorMessage(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization) SetPercent(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization {
	s.Percent = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization) SetProgress(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization {
	s.Progress = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization) SetStatus(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobStructureInitialization {
	s.Status = &v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTags struct {
	Tag []*DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTags) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTags) SetTag(v []*DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTags {
	s.Tag = v
	return s
}

type DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag struct {
	// The tag key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value that corresponds to the tag key.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag) SetKey(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag) SetValue(v string) *DescribeMigrationJobsResponseBodyMigrationJobsMigrationJobTagsTag {
	s.Value = &v
	return s
}

type DescribeMigrationJobsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMigrationJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMigrationJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMigrationJobsResponse) GoString() string {
	return s.String()
}

func (s *DescribeMigrationJobsResponse) SetHeaders(v map[string]*string) *DescribeMigrationJobsResponse {
	s.Headers = v
	return s
}

func (s *DescribeMigrationJobsResponse) SetStatusCode(v int32) *DescribeMigrationJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMigrationJobsResponse) SetBody(v *DescribeMigrationJobsResponseBody) *DescribeMigrationJobsResponse {
	s.Body = v
	return s
}

type DescribePreCheckStatusRequest struct {
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The task code that specifies the type of the DTS subtask. Valid values:
	//
	// *   **01**: precheck
	// *   **02**: schema migration or initial schema synchronization
	// *   **03**: full data migration or initial full data synchronization
	// *   **04**: incremental data migration or synchronization
	JobCode *string `json:"JobCode,omitempty" xml:"JobCode,omitempty"`
	// The filter item used to filter tables in fuzzy match.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries to return on each page. Default value: **20**.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The filter item used to filter tables, views, and functions during schema migration.
	StructPhase *string `json:"StructPhase,omitempty" xml:"StructPhase,omitempty"`
	// The type of schema definition. Valid values:
	//
	// *   **before**: schema migration or initial schema synchronization
	// *   **after**: DDL operations performed during incremental data migration or synchronization
	StructType *string `json:"StructType,omitempty" xml:"StructType,omitempty"`
}

func (s DescribePreCheckStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusRequest) SetDtsJobId(v string) *DescribePreCheckStatusRequest {
	s.DtsJobId = &v
	return s
}

func (s *DescribePreCheckStatusRequest) SetJobCode(v string) *DescribePreCheckStatusRequest {
	s.JobCode = &v
	return s
}

func (s *DescribePreCheckStatusRequest) SetName(v string) *DescribePreCheckStatusRequest {
	s.Name = &v
	return s
}

func (s *DescribePreCheckStatusRequest) SetPageNo(v string) *DescribePreCheckStatusRequest {
	s.PageNo = &v
	return s
}

func (s *DescribePreCheckStatusRequest) SetPageSize(v string) *DescribePreCheckStatusRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePreCheckStatusRequest) SetRegionId(v string) *DescribePreCheckStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePreCheckStatusRequest) SetStructPhase(v string) *DescribePreCheckStatusRequest {
	s.StructPhase = &v
	return s
}

func (s *DescribePreCheckStatusRequest) SetStructType(v string) *DescribePreCheckStatusRequest {
	s.StructType = &v
	return s
}

type DescribePreCheckStatusResponseBody struct {
	AnalysisJobProgress []*DescribePreCheckStatusResponseBodyAnalysisJobProgress `json:"AnalysisJobProgress,omitempty" xml:"AnalysisJobProgress,omitempty" type:"Repeated"`
	// The task code that indicates the subtask type. Valid values:
	//
	// *   **01**: precheck
	// *   **02**: schema migration or initial schema synchronization
	// *   **03**: full data migration or initial full data synchronization
	// *   **04**: incremental data migration or synchronization
	Code              *string `json:"Code,omitempty" xml:"Code,omitempty"`
	ErrorAnalysisItem *int32  `json:"ErrorAnalysisItem,omitempty" xml:"ErrorAnalysisItem,omitempty"`
	// The total number of subtask failures.
	ErrorItem             *int32                                                     `json:"ErrorItem,omitempty" xml:"ErrorItem,omitempty"`
	FullNetCheckJobStatus []*DescribePreCheckStatusResponseBodyFullNetCheckJobStatus `json:"FullNetCheckJobStatus,omitempty" xml:"FullNetCheckJobStatus,omitempty" type:"Repeated"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the data migration or synchronization task.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of the subtask.
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The list of subtasks and the progress of each subtask.
	JobProgress            []*DescribePreCheckStatusResponseBodyJobProgress          `json:"JobProgress,omitempty" xml:"JobProgress,omitempty" type:"Repeated"`
	NetworkDiagnosisResult *DescribePreCheckStatusResponseBodyNetworkDiagnosisResult `json:"NetworkDiagnosisResult,omitempty" xml:"NetworkDiagnosisResult,omitempty" type:"Struct"`
	// The number of the page returned. The value is an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	PageRecordCount *int64 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the subtask. Valid values:
	//
	// *   **NotStarted**: The subtask is not started.
	// *   **Suspending**: The subtask is paused.
	// *   **Checking**: The subtask is being checked.
	// *   **Migrating**: The subtask is in progress. Data is being migrated.
	// *   **Failed**: The subtask failed.
	// *   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
	// *   **Finished**: The subtask is complete.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The state of the distributed subtask.
	SubDistributedJobStatus []*DescribePreCheckStatusResponseBodySubDistributedJobStatus `json:"SubDistributedJobStatus,omitempty" xml:"SubDistributedJobStatus,omitempty" type:"Repeated"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of subtasks.
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
	// The total number of returned records.
	TotalRecordCount *int64 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribePreCheckStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBody) SetAnalysisJobProgress(v []*DescribePreCheckStatusResponseBodyAnalysisJobProgress) *DescribePreCheckStatusResponseBody {
	s.AnalysisJobProgress = v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetCode(v string) *DescribePreCheckStatusResponseBody {
	s.Code = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetErrorAnalysisItem(v int32) *DescribePreCheckStatusResponseBody {
	s.ErrorAnalysisItem = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetErrorItem(v int32) *DescribePreCheckStatusResponseBody {
	s.ErrorItem = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetFullNetCheckJobStatus(v []*DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) *DescribePreCheckStatusResponseBody {
	s.FullNetCheckJobStatus = v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetHttpStatusCode(v int32) *DescribePreCheckStatusResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetJobId(v string) *DescribePreCheckStatusResponseBody {
	s.JobId = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetJobName(v string) *DescribePreCheckStatusResponseBody {
	s.JobName = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetJobProgress(v []*DescribePreCheckStatusResponseBodyJobProgress) *DescribePreCheckStatusResponseBody {
	s.JobProgress = v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetNetworkDiagnosisResult(v *DescribePreCheckStatusResponseBodyNetworkDiagnosisResult) *DescribePreCheckStatusResponseBody {
	s.NetworkDiagnosisResult = v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetPageNumber(v int64) *DescribePreCheckStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetPageRecordCount(v int64) *DescribePreCheckStatusResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetRequestId(v string) *DescribePreCheckStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetState(v string) *DescribePreCheckStatusResponseBody {
	s.State = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetSubDistributedJobStatus(v []*DescribePreCheckStatusResponseBodySubDistributedJobStatus) *DescribePreCheckStatusResponseBody {
	s.SubDistributedJobStatus = v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetSuccess(v bool) *DescribePreCheckStatusResponseBody {
	s.Success = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetTotal(v int32) *DescribePreCheckStatusResponseBody {
	s.Total = &v
	return s
}

func (s *DescribePreCheckStatusResponseBody) SetTotalRecordCount(v int64) *DescribePreCheckStatusResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribePreCheckStatusResponseBodyAnalysisJobProgress struct {
	BootTime     *string                                                      `json:"BootTime,omitempty" xml:"BootTime,omitempty"`
	CanSkip      *bool                                                        `json:"CanSkip,omitempty" xml:"CanSkip,omitempty"`
	Current      *string                                                      `json:"Current,omitempty" xml:"Current,omitempty"`
	DdlSql       *string                                                      `json:"DdlSql,omitempty" xml:"DdlSql,omitempty"`
	DelaySeconds *int32                                                       `json:"DelaySeconds,omitempty" xml:"DelaySeconds,omitempty"`
	DestSchema   *string                                                      `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	DiffRow      *int64                                                       `json:"DiffRow,omitempty" xml:"DiffRow,omitempty"`
	ErrDetail    *string                                                      `json:"ErrDetail,omitempty" xml:"ErrDetail,omitempty"`
	ErrMsg       *string                                                      `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	FinishTime   *string                                                      `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Id           *string                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	IgnoreFlag   *string                                                      `json:"IgnoreFlag,omitempty" xml:"IgnoreFlag,omitempty"`
	Item         *string                                                      `json:"Item,omitempty" xml:"Item,omitempty"`
	JobId        *string                                                      `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Logs         []*DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
	Names        *string                                                      `json:"Names,omitempty" xml:"Names,omitempty"`
	OrderNum     *int32                                                       `json:"OrderNum,omitempty" xml:"OrderNum,omitempty"`
	ParentObj    *string                                                      `json:"ParentObj,omitempty" xml:"ParentObj,omitempty"`
	RepairMethod *string                                                      `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
	Skip         *bool                                                        `json:"Skip,omitempty" xml:"Skip,omitempty"`
	SourceSchema *string                                                      `json:"SourceSchema,omitempty" xml:"SourceSchema,omitempty"`
	State        *string                                                      `json:"State,omitempty" xml:"State,omitempty"`
	Sub          *string                                                      `json:"Sub,omitempty" xml:"Sub,omitempty"`
	TargetNames  *string                                                      `json:"TargetNames,omitempty" xml:"TargetNames,omitempty"`
	Total        *int32                                                       `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribePreCheckStatusResponseBodyAnalysisJobProgress) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodyAnalysisJobProgress) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetBootTime(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.BootTime = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetCanSkip(v bool) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.CanSkip = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetCurrent(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.Current = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetDdlSql(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.DdlSql = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetDelaySeconds(v int32) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.DelaySeconds = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetDestSchema(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.DestSchema = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetDiffRow(v int64) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.DiffRow = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetErrDetail(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.ErrDetail = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetErrMsg(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.ErrMsg = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetFinishTime(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.FinishTime = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetId(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.Id = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetIgnoreFlag(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.IgnoreFlag = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetItem(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.Item = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetJobId(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.JobId = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetLogs(v []*DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.Logs = v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetNames(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.Names = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetOrderNum(v int32) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.OrderNum = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetParentObj(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.ParentObj = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetRepairMethod(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.RepairMethod = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetSkip(v bool) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.Skip = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetSourceSchema(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.SourceSchema = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetState(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.State = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetSub(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.Sub = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetTargetNames(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.TargetNames = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgress) SetTotal(v int32) *DescribePreCheckStatusResponseBodyAnalysisJobProgress {
	s.Total = &v
	return s
}

type DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs struct {
	ErrData  *string `json:"ErrData,omitempty" xml:"ErrData,omitempty"`
	ErrMsg   *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	ErrType  *string `json:"ErrType,omitempty" xml:"ErrType,omitempty"`
	LogLevel *string `json:"LogLevel,omitempty" xml:"LogLevel,omitempty"`
}

func (s DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs) SetErrData(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs {
	s.ErrData = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs) SetErrMsg(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs {
	s.ErrMsg = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs) SetErrType(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs {
	s.ErrType = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs) SetLogLevel(v string) *DescribePreCheckStatusResponseBodyAnalysisJobProgressLogs {
	s.LogLevel = &v
	return s
}

type DescribePreCheckStatusResponseBodyFullNetCheckJobStatus struct {
	Code                    *string                                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	DestRegion              *string                                                               `json:"DestRegion,omitempty" xml:"DestRegion,omitempty"`
	DestRegionCidr          *string                                                               `json:"DestRegionCidr,omitempty" xml:"DestRegionCidr,omitempty"`
	DestinationEndpointType *string                                                               `json:"DestinationEndpointType,omitempty" xml:"DestinationEndpointType,omitempty"`
	ErrorItem               *int32                                                                `json:"ErrorItem,omitempty" xml:"ErrorItem,omitempty"`
	HostRegion              *string                                                               `json:"HostRegion,omitempty" xml:"HostRegion,omitempty"`
	JobId                   *string                                                               `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName                 *string                                                               `json:"JobName,omitempty" xml:"JobName,omitempty"`
	JobProgress             []*DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress `json:"JobProgress,omitempty" xml:"JobProgress,omitempty" type:"Repeated"`
	SourceEndpointType      *string                                                               `json:"SourceEndpointType,omitempty" xml:"SourceEndpointType,omitempty"`
	SrcRegion               *string                                                               `json:"SrcRegion,omitempty" xml:"SrcRegion,omitempty"`
	SrcRegionCidr           *string                                                               `json:"SrcRegionCidr,omitempty" xml:"SrcRegionCidr,omitempty"`
	State                   *string                                                               `json:"State,omitempty" xml:"State,omitempty"`
	Total                   *int32                                                                `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetCode(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.Code = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetDestRegion(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.DestRegion = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetDestRegionCidr(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.DestRegionCidr = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetDestinationEndpointType(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.DestinationEndpointType = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetErrorItem(v int32) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.ErrorItem = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetHostRegion(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.HostRegion = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetJobId(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.JobId = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetJobName(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.JobName = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetJobProgress(v []*DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.JobProgress = v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetSourceEndpointType(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.SourceEndpointType = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetSrcRegion(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.SrcRegion = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetSrcRegionCidr(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.SrcRegionCidr = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetState(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.State = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus) SetTotal(v int32) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatus {
	s.Total = &v
	return s
}

type DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress struct {
	BootTime     *string                                                                   `json:"BootTime,omitempty" xml:"BootTime,omitempty"`
	CanSkip      *bool                                                                     `json:"CanSkip,omitempty" xml:"CanSkip,omitempty"`
	Current      *string                                                                   `json:"Current,omitempty" xml:"Current,omitempty"`
	DdlSql       *string                                                                   `json:"DdlSql,omitempty" xml:"DdlSql,omitempty"`
	DelaySeconds *int32                                                                    `json:"DelaySeconds,omitempty" xml:"DelaySeconds,omitempty"`
	DestSchema   *string                                                                   `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	DiffRow      *int64                                                                    `json:"DiffRow,omitempty" xml:"DiffRow,omitempty"`
	ErrDetail    *string                                                                   `json:"ErrDetail,omitempty" xml:"ErrDetail,omitempty"`
	ErrMsg       *string                                                                   `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	FinishTime   *string                                                                   `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Id           *string                                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
	IgnoreFlag   *string                                                                   `json:"IgnoreFlag,omitempty" xml:"IgnoreFlag,omitempty"`
	Item         *string                                                                   `json:"Item,omitempty" xml:"Item,omitempty"`
	JobId        *string                                                                   `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Logs         []*DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
	Names        *string                                                                   `json:"Names,omitempty" xml:"Names,omitempty"`
	OrderNum     *int32                                                                    `json:"OrderNum,omitempty" xml:"OrderNum,omitempty"`
	ParentObj    *string                                                                   `json:"ParentObj,omitempty" xml:"ParentObj,omitempty"`
	RepairMethod *string                                                                   `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
	Skip         *bool                                                                     `json:"Skip,omitempty" xml:"Skip,omitempty"`
	SourceSchema *string                                                                   `json:"SourceSchema,omitempty" xml:"SourceSchema,omitempty"`
	State        *string                                                                   `json:"State,omitempty" xml:"State,omitempty"`
	Sub          *string                                                                   `json:"Sub,omitempty" xml:"Sub,omitempty"`
	TargetNames  *string                                                                   `json:"TargetNames,omitempty" xml:"TargetNames,omitempty"`
	Total        *int32                                                                    `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetBootTime(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.BootTime = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetCanSkip(v bool) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.CanSkip = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetCurrent(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.Current = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetDdlSql(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.DdlSql = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetDelaySeconds(v int32) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.DelaySeconds = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetDestSchema(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.DestSchema = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetDiffRow(v int64) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.DiffRow = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetErrDetail(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.ErrDetail = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetErrMsg(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.ErrMsg = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetFinishTime(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.FinishTime = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetId(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.Id = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetIgnoreFlag(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.IgnoreFlag = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetItem(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.Item = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetJobId(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.JobId = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetLogs(v []*DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.Logs = v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetNames(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.Names = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetOrderNum(v int32) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.OrderNum = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetParentObj(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.ParentObj = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetRepairMethod(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.RepairMethod = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetSkip(v bool) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.Skip = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetSourceSchema(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.SourceSchema = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetState(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.State = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetSub(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.Sub = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetTargetNames(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.TargetNames = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress) SetTotal(v int32) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgress {
	s.Total = &v
	return s
}

type DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs struct {
	ErrData  *string `json:"ErrData,omitempty" xml:"ErrData,omitempty"`
	ErrMsg   *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	ErrType  *string `json:"ErrType,omitempty" xml:"ErrType,omitempty"`
	LogLevel *string `json:"LogLevel,omitempty" xml:"LogLevel,omitempty"`
}

func (s DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs) SetErrData(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs {
	s.ErrData = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs) SetErrMsg(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs {
	s.ErrMsg = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs) SetErrType(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs {
	s.ErrType = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs) SetLogLevel(v string) *DescribePreCheckStatusResponseBodyFullNetCheckJobStatusJobProgressLogs {
	s.LogLevel = &v
	return s
}

type DescribePreCheckStatusResponseBodyJobProgress struct {
	// The time when the subtask was started. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.
	BootTime *string `json:"BootTime,omitempty" xml:"BootTime,omitempty"`
	// Indicates whether the subtask can be ignored if it fails.
	CanSkip *bool `json:"CanSkip,omitempty" xml:"CanSkip,omitempty"`
	// The number of the subtasks that are running.
	Current *string `json:"Current,omitempty" xml:"Current,omitempty"`
	// The DDL statements.
	DdlSql *string `json:"DdlSql,omitempty" xml:"DdlSql,omitempty"`
	// The latency of incremental data migration or synchronization.
	//
	// >  For data migration tasks, the unit of this parameter is milliseconds. For data synchronization tasks, the unit of this parameter is seconds.
	DelaySeconds *int32 `json:"DelaySeconds,omitempty" xml:"DelaySeconds,omitempty"`
	// The name of the database to which the object in the destination instance belongs.
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// This parameter will be removed in the future.
	DiffRow *int64 `json:"DiffRow,omitempty" xml:"DiffRow,omitempty"`
	// The error details of the subtask failure.
	ErrDetail *string `json:"ErrDetail,omitempty" xml:"ErrDetail,omitempty"`
	// The error message of the subtask failure.
	ErrMsg *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	// The time when the subtask was complete. The time is displayed in the yyyy-MM-ddTHH:mm:ssZ format in UTC.
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The ID recorded in the metadatabase.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Indicates whether DTS ignores the subtask and proceeds with the next subtask. Valid values:
	//
	// *   **N**: no
	// *   **Y**: yes
	IgnoreFlag *string `json:"IgnoreFlag,omitempty" xml:"IgnoreFlag,omitempty"`
	// The shortened name of the subtask.
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The ID of the subtask.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The logs of subtask failures.
	Logs []*DescribePreCheckStatusResponseBodyJobProgressLogs `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
	// The name of the subtask.
	Names *string `json:"Names,omitempty" xml:"Names,omitempty"`
	// The serial number of the subtask.
	OrderNum *int32 `json:"OrderNum,omitempty" xml:"OrderNum,omitempty"`
	// This parameter will be removed in the future.
	ParentObj *string `json:"ParentObj,omitempty" xml:"ParentObj,omitempty"`
	// The method to fix the subtask failure.
	RepairMethod *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
	// Indicates whether the subtask is ignored if it fails. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Skip *bool `json:"Skip,omitempty" xml:"Skip,omitempty"`
	// The name of the database to which the object in the source instance belongs.
	SourceSchema *string `json:"SourceSchema,omitempty" xml:"SourceSchema,omitempty"`
	// The status of the subtask. Valid values:
	//
	// *   **NotStarted**: The subtask is not started.
	// *   **Checking**: The subtask is being checked.
	// *   **Migrating**: The subtask is in progress. Data is being migrated.
	// *   **Failed**: The subtask failed.
	// *   **Warning**: The subtask encounters an exception.
	// *   **Success**: The subtask is complete.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The sub-item progress of the subtask.
	//
	// >  If **\[]** is returned, the subtask has no sub-items.
	Sub *string `json:"Sub,omitempty" xml:"Sub,omitempty"`
	// The names of the objects that are migrated or synchronized.
	TargetNames *string `json:"TargetNames,omitempty" xml:"TargetNames,omitempty"`
	// The total number of subtasks.
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribePreCheckStatusResponseBodyJobProgress) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodyJobProgress) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetBootTime(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.BootTime = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetCanSkip(v bool) *DescribePreCheckStatusResponseBodyJobProgress {
	s.CanSkip = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetCurrent(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.Current = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetDdlSql(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.DdlSql = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetDelaySeconds(v int32) *DescribePreCheckStatusResponseBodyJobProgress {
	s.DelaySeconds = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetDestSchema(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.DestSchema = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetDiffRow(v int64) *DescribePreCheckStatusResponseBodyJobProgress {
	s.DiffRow = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetErrDetail(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.ErrDetail = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetErrMsg(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.ErrMsg = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetFinishTime(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.FinishTime = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetId(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.Id = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetIgnoreFlag(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.IgnoreFlag = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetItem(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.Item = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetJobId(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.JobId = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetLogs(v []*DescribePreCheckStatusResponseBodyJobProgressLogs) *DescribePreCheckStatusResponseBodyJobProgress {
	s.Logs = v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetNames(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.Names = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetOrderNum(v int32) *DescribePreCheckStatusResponseBodyJobProgress {
	s.OrderNum = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetParentObj(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.ParentObj = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetRepairMethod(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.RepairMethod = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetSkip(v bool) *DescribePreCheckStatusResponseBodyJobProgress {
	s.Skip = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetSourceSchema(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.SourceSchema = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetState(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.State = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetSub(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.Sub = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetTargetNames(v string) *DescribePreCheckStatusResponseBodyJobProgress {
	s.TargetNames = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgress) SetTotal(v int32) *DescribePreCheckStatusResponseBodyJobProgress {
	s.Total = &v
	return s
}

type DescribePreCheckStatusResponseBodyJobProgressLogs struct {
	// The error message.
	ErrData *string `json:"ErrData,omitempty" xml:"ErrData,omitempty"`
	// The error message returned when an error occurs on the subtask.
	ErrMsg *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	// The error type.
	ErrType *string `json:"ErrType,omitempty" xml:"ErrType,omitempty"`
	// The level of logs.
	LogLevel *string `json:"LogLevel,omitempty" xml:"LogLevel,omitempty"`
}

func (s DescribePreCheckStatusResponseBodyJobProgressLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodyJobProgressLogs) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodyJobProgressLogs) SetErrData(v string) *DescribePreCheckStatusResponseBodyJobProgressLogs {
	s.ErrData = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgressLogs) SetErrMsg(v string) *DescribePreCheckStatusResponseBodyJobProgressLogs {
	s.ErrMsg = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgressLogs) SetErrType(v string) *DescribePreCheckStatusResponseBodyJobProgressLogs {
	s.ErrType = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyJobProgressLogs) SetLogLevel(v string) *DescribePreCheckStatusResponseBodyJobProgressLogs {
	s.LogLevel = &v
	return s
}

type DescribePreCheckStatusResponseBodyNetworkDiagnosisResult struct {
	Diagnosis    []*DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis `json:"Diagnosis,omitempty" xml:"Diagnosis,omitempty" type:"Repeated"`
	ModelVersion *string                                                              `json:"ModelVersion,omitempty" xml:"ModelVersion,omitempty"`
}

func (s DescribePreCheckStatusResponseBodyNetworkDiagnosisResult) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodyNetworkDiagnosisResult) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodyNetworkDiagnosisResult) SetDiagnosis(v []*DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis) *DescribePreCheckStatusResponseBodyNetworkDiagnosisResult {
	s.Diagnosis = v
	return s
}

func (s *DescribePreCheckStatusResponseBodyNetworkDiagnosisResult) SetModelVersion(v string) *DescribePreCheckStatusResponseBodyNetworkDiagnosisResult {
	s.ModelVersion = &v
	return s
}

type DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis struct {
	CnDocUrl            *string `json:"CnDocUrl,omitempty" xml:"CnDocUrl,omitempty"`
	Code                *string `json:"Code,omitempty" xml:"Code,omitempty"`
	EndpointType        *string `json:"EndpointType,omitempty" xml:"EndpointType,omitempty"`
	InternationalDocUrl *string `json:"InternationalDocUrl,omitempty" xml:"InternationalDocUrl,omitempty"`
	Result              *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis) SetCnDocUrl(v string) *DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis {
	s.CnDocUrl = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis) SetCode(v string) *DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis {
	s.Code = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis) SetEndpointType(v string) *DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis {
	s.EndpointType = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis) SetInternationalDocUrl(v string) *DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis {
	s.InternationalDocUrl = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis) SetResult(v string) *DescribePreCheckStatusResponseBodyNetworkDiagnosisResultDiagnosis {
	s.Result = &v
	return s
}

type DescribePreCheckStatusResponseBodySubDistributedJobStatus struct {
	// The task code that indicates the subtask type. Valid values:
	//
	// *   **01**: precheck
	// *   **02**: schema migration or initial schema synchronization
	// *   **03**: full data migration or initial full data synchronization
	// *   **04**: incremental data migration or synchronization
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The number of subtasks that failed.
	ErrorItem *int32 `json:"ErrorItem,omitempty" xml:"ErrorItem,omitempty"`
	// The ID of the subtask.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The name of distributed subtasks associated with the subtask.
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// The list of subtasks and the progress of each subtask.
	JobProgress []*DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress `json:"JobProgress,omitempty" xml:"JobProgress,omitempty" type:"Repeated"`
	// The status of the subtask. Valid values:
	//
	// *   **NotStarted**: The subtask is not started.
	// *   **Suspending**: The subtask is paused.
	// *   **Checking**: The subtask is being checked.
	// *   **Migrating**: The subtask is in progress. Data is being migrated.
	// *   **Failed**: The subtask failed.
	// *   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
	// *   **Finished**: The subtask is complete.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The total number of returned entries.
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribePreCheckStatusResponseBodySubDistributedJobStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodySubDistributedJobStatus) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatus) SetCode(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatus {
	s.Code = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatus) SetErrorItem(v int32) *DescribePreCheckStatusResponseBodySubDistributedJobStatus {
	s.ErrorItem = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatus) SetJobId(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatus {
	s.JobId = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatus) SetJobName(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatus {
	s.JobName = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatus) SetJobProgress(v []*DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) *DescribePreCheckStatusResponseBodySubDistributedJobStatus {
	s.JobProgress = v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatus) SetState(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatus {
	s.State = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatus) SetTotal(v int32) *DescribePreCheckStatusResponseBodySubDistributedJobStatus {
	s.Total = &v
	return s
}

type DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress struct {
	// The time when the subtask was started. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	BootTime *string `json:"BootTime,omitempty" xml:"BootTime,omitempty"`
	// Indicates whether the subtask can be ignored if it fails. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	CanSkip *bool `json:"CanSkip,omitempty" xml:"CanSkip,omitempty"`
	// The number of the subtasks that are running.
	Current *string `json:"Current,omitempty" xml:"Current,omitempty"`
	// The DDL statements.
	DdlSql *string `json:"DdlSql,omitempty" xml:"DdlSql,omitempty"`
	// The latency of incremental data migration or synchronization.
	DelaySeconds *int32 `json:"DelaySeconds,omitempty" xml:"DelaySeconds,omitempty"`
	// The name of the database to which the object in the destination instance belongs.
	DestSchema *string `json:"DestSchema,omitempty" xml:"DestSchema,omitempty"`
	// This parameter will be removed in the future.
	DiffRow *int64 `json:"DiffRow,omitempty" xml:"DiffRow,omitempty"`
	// The error details of the subtask failure.
	ErrDetail *string `json:"ErrDetail,omitempty" xml:"ErrDetail,omitempty"`
	// The error message of the subtask failure.
	ErrMsg *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	// The time when the instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The ID of the entry in the metadatabase.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Indicates whether DTS ignores the subtask and proceeds with the next subtask. Valid values:
	//
	// *   **N**: no
	// *   **Y**: yes
	IgnoreFlag *string `json:"IgnoreFlag,omitempty" xml:"IgnoreFlag,omitempty"`
	// The name of the subtask.
	Item *string `json:"Item,omitempty" xml:"Item,omitempty"`
	// The ID of the subtask.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The operations logs of errors.
	Logs []*DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
	// The name of the subtask.
	Names *string `json:"Names,omitempty" xml:"Names,omitempty"`
	// The serial number of the subtask.
	OrderNum *int32 `json:"OrderNum,omitempty" xml:"OrderNum,omitempty"`
	// This parameter will be removed in the future.
	ParentObj *string `json:"ParentObj,omitempty" xml:"ParentObj,omitempty"`
	// The method used to fix a precheck failure.
	RepairMethod *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
	// Indicates whether the subtask was skipped. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	Skip *bool `json:"Skip,omitempty" xml:"Skip,omitempty"`
	// The name of the database to which the object in the source instance belongs.
	SourceSchema *string `json:"SourceSchema,omitempty" xml:"SourceSchema,omitempty"`
	// The status of the subtask. Valid values:
	//
	// *   **NotStarted**: The subtask is not started.
	// *   **Suspending**: The subtask is paused.
	// *   **Checking**: The subtask is being checked.
	// *   **Migrating**: The subtask is in progress. Data is being migrated.
	// *   **Failed**: The subtask failed.
	// *   **Catched**: The subtask is in progress. Incremental data is being migrated or synchronized.
	// *   **Finished**: The subtask is complete.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The sub-item progress of the subtask.
	//
	// >  If **\[]** is returned, the subtask has no sub-items.
	Sub *string `json:"Sub,omitempty" xml:"Sub,omitempty"`
	// The names of the objects that are migrated or synchronized.
	TargetNames *string `json:"TargetNames,omitempty" xml:"TargetNames,omitempty"`
	// The total number of subtasks.
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetBootTime(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.BootTime = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetCanSkip(v bool) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.CanSkip = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetCurrent(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.Current = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetDdlSql(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.DdlSql = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetDelaySeconds(v int32) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.DelaySeconds = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetDestSchema(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.DestSchema = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetDiffRow(v int64) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.DiffRow = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetErrDetail(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.ErrDetail = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetErrMsg(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.ErrMsg = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetFinishTime(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.FinishTime = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetId(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.Id = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetIgnoreFlag(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.IgnoreFlag = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetItem(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.Item = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetJobId(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.JobId = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetLogs(v []*DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.Logs = v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetNames(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.Names = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetOrderNum(v int32) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.OrderNum = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetParentObj(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.ParentObj = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetRepairMethod(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.RepairMethod = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetSkip(v bool) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.Skip = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetSourceSchema(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.SourceSchema = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetState(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.State = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetSub(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.Sub = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetTargetNames(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.TargetNames = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress) SetTotal(v int32) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgress {
	s.Total = &v
	return s
}

type DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs struct {
	// The record of errors.
	ErrData *string `json:"ErrData,omitempty" xml:"ErrData,omitempty"`
	// The error message.
	ErrMsg *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	// The error type.
	ErrType *string `json:"ErrType,omitempty" xml:"ErrType,omitempty"`
	// The level of logs.
	LogLevel *string `json:"LogLevel,omitempty" xml:"LogLevel,omitempty"`
}

func (s DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs) SetErrData(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs {
	s.ErrData = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs) SetErrMsg(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs {
	s.ErrMsg = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs) SetErrType(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs {
	s.ErrType = &v
	return s
}

func (s *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs) SetLogLevel(v string) *DescribePreCheckStatusResponseBodySubDistributedJobStatusJobProgressLogs {
	s.LogLevel = &v
	return s
}

type DescribePreCheckStatusResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePreCheckStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePreCheckStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePreCheckStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribePreCheckStatusResponse) SetHeaders(v map[string]*string) *DescribePreCheckStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribePreCheckStatusResponse) SetStatusCode(v int32) *DescribePreCheckStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePreCheckStatusResponse) SetBody(v *DescribePreCheckStatusResponseBody) *DescribePreCheckStatusResponse {
	s.Body = v
	return s
}

type DescribeSubscriptionInstanceAlertRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
}

func (s DescribeSubscriptionInstanceAlertRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceAlertRequest) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceAlertRequest) SetAccountId(v string) *DescribeSubscriptionInstanceAlertRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertRequest) SetClientToken(v string) *DescribeSubscriptionInstanceAlertRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertRequest) SetOwnerId(v string) *DescribeSubscriptionInstanceAlertRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertRequest) SetRegionId(v string) *DescribeSubscriptionInstanceAlertRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertRequest) SetSubscriptionInstanceId(v string) *DescribeSubscriptionInstanceAlertRequest {
	s.SubscriptionInstanceId = &v
	return s
}

type DescribeSubscriptionInstanceAlertResponseBody struct {
	// The mobile phone numbers that receive latency-related alerts.
	DelayAlertPhone *string `json:"DelayAlertPhone,omitempty" xml:"DelayAlertPhone,omitempty"`
	// Indicates whether task latency is monitored. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	DelayAlertStatus *string `json:"DelayAlertStatus,omitempty" xml:"DelayAlertStatus,omitempty"`
	// The threshold for triggering latency alerts. The unit is seconds and the value is an integer. The recommended value is 10 seconds.
	DelayOverSeconds *string `json:"DelayOverSeconds,omitempty" xml:"DelayOverSeconds,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The mobile phone numbers that receive status-related alerts.
	ErrorAlertPhone *string `json:"ErrorAlertPhone,omitempty" xml:"ErrorAlertPhone,omitempty"`
	// Indicates whether task status is monitored. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	ErrorAlertStatus *string `json:"ErrorAlertStatus,omitempty" xml:"ErrorAlertStatus,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the change tracking instance.
	SubscriptionInstanceID *string `json:"SubscriptionInstanceID,omitempty" xml:"SubscriptionInstanceID,omitempty"`
	// The name of the change tracking instance.
	SubscriptionInstanceName *string `json:"SubscriptionInstanceName,omitempty" xml:"SubscriptionInstanceName,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSubscriptionInstanceAlertResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceAlertResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetDelayAlertPhone(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.DelayAlertPhone = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetDelayAlertStatus(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.DelayAlertStatus = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetDelayOverSeconds(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.DelayOverSeconds = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetErrCode(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetErrMessage(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetErrorAlertPhone(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.ErrorAlertPhone = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetErrorAlertStatus(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.ErrorAlertStatus = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetRequestId(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetSubscriptionInstanceID(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.SubscriptionInstanceID = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetSubscriptionInstanceName(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.SubscriptionInstanceName = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponseBody) SetSuccess(v string) *DescribeSubscriptionInstanceAlertResponseBody {
	s.Success = &v
	return s
}

type DescribeSubscriptionInstanceAlertResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSubscriptionInstanceAlertResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSubscriptionInstanceAlertResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceAlertResponse) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceAlertResponse) SetHeaders(v map[string]*string) *DescribeSubscriptionInstanceAlertResponse {
	s.Headers = v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponse) SetStatusCode(v int32) *DescribeSubscriptionInstanceAlertResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSubscriptionInstanceAlertResponse) SetBody(v *DescribeSubscriptionInstanceAlertResponseBody) *DescribeSubscriptionInstanceAlertResponse {
	s.Body = v
	return s
}

type DescribeSubscriptionInstanceStatusRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](~~49442~~) operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusRequest) SetAccountId(v string) *DescribeSubscriptionInstanceStatusRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusRequest) SetOwnerId(v string) *DescribeSubscriptionInstanceStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusRequest) SetRegionId(v string) *DescribeSubscriptionInstanceStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusRequest) SetSubscriptionInstanceId(v string) *DescribeSubscriptionInstanceStatusRequest {
	s.SubscriptionInstanceId = &v
	return s
}

type DescribeSubscriptionInstanceStatusResponseBody struct {
	// The start of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	BeginTimestamp *string `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	// The consumption checkpoint of the change tracking instance. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	ConsumptionCheckpoint *string `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	// The downstream client information, in the following format: \<IP address of the downstream client>:\<Random ID generated by DTS>.
	ConsumptionClient *string `json:"ConsumptionClient,omitempty" xml:"ConsumptionClient,omitempty"`
	// The end of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	EndTimestamp *string `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The error message returned if change tracking failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The billing method of the change tracking instance. Valid values:
	//
	// *   **PrePaid**: subscription
	// *   **PostPaid**: pay-as-you-go
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The connection settings of the source instance.
	SourceEndpoint *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The status of the change tracking task. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **Starting**: The task is being started.
	// *   **Normal**: The task is running as expected.
	// *   **Abnormal**: The task is not running as expected.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The topic of the change tracking instance.
	//
	// >  This parameter is returned only if your change tracking instance is of the new version and you have called the [CreateConsumerGroup](~~122863~~) operation to create a consumer group.
	SubscribeTopic *string `json:"SubscribeTopic,omitempty" xml:"SubscribeTopic,omitempty"`
	// The types of operations that are tracked by the task.
	SubscriptionDataType *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType `json:"SubscriptionDataType,omitempty" xml:"SubscriptionDataType,omitempty" type:"Struct"`
	// The endpoint of the change tracking instance.
	SubscriptionHost *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost `json:"SubscriptionHost,omitempty" xml:"SubscriptionHost,omitempty" type:"Struct"`
	// The ID of the change tracking instance.
	SubscriptionInstanceID *string `json:"SubscriptionInstanceID,omitempty" xml:"SubscriptionInstanceID,omitempty"`
	// The name of the change tracking instance.
	SubscriptionInstanceName *string `json:"SubscriptionInstanceName,omitempty" xml:"SubscriptionInstanceName,omitempty"`
	// The objects for change tracking.
	SubscriptionObject *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject `json:"SubscriptionObject,omitempty" xml:"SubscriptionObject,omitempty" type:"Struct"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the change tracking task.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetBeginTimestamp(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetConsumptionCheckpoint(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetConsumptionClient(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.ConsumptionClient = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetEndTimestamp(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetErrCode(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetErrMessage(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetErrorMessage(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetPayType(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.PayType = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetRequestId(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSourceEndpoint(v *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetStatus(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscribeTopic(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscribeTopic = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscriptionDataType(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscriptionDataType = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscriptionHost(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscriptionHost = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscriptionInstanceID(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscriptionInstanceID = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscriptionInstanceName(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscriptionInstanceName = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscriptionObject(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscriptionObject = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSuccess(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetTaskId(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.TaskId = &v
	return s
}

type DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint struct {
	// The ID of the instance that hosts the source database.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The instance type of the source database.
	//
	// >  This parameter is returned only for change tracking instances of the new version.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) SetInstanceID(v string) *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) SetInstanceType(v string) *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint {
	s.InstanceType = &v
	return s
}

type DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType struct {
	// Indicates whether data definition language (DDL) operations are tracked. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DDL *bool `json:"DDL,omitempty" xml:"DDL,omitempty"`
	// Indicates whether data manipulation language (DML) operations are tracked. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DML *bool `json:"DML,omitempty" xml:"DML,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) SetDDL(v bool) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType {
	s.DDL = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) SetDML(v bool) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType {
	s.DML = &v
	return s
}

type DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost struct {
	// The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
	PrivateHost *string `json:"PrivateHost,omitempty" xml:"PrivateHost,omitempty"`
	// The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
	PublicHost *string `json:"PublicHost,omitempty" xml:"PublicHost,omitempty"`
	// The virtual private cloud (VPC) endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
	VPCHost *string `json:"VPCHost,omitempty" xml:"VPCHost,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) SetPrivateHost(v string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost {
	s.PrivateHost = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) SetPublicHost(v string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost {
	s.PublicHost = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) SetVPCHost(v string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost {
	s.VPCHost = &v
	return s
}

type DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject struct {
	SynchronousObject []*DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject `json:"SynchronousObject,omitempty" xml:"SynchronousObject,omitempty" type:"Repeated"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) SetSynchronousObject(v []*DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject {
	s.SynchronousObject = v
	return s
}

type DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject struct {
	// The name of the database to which the object belongs.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The table name.
	TableList *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList `json:"TableList,omitempty" xml:"TableList,omitempty" type:"Struct"`
	// Indicates whether the data of an entire database is tracked. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	WholeDatabase *string `json:"WholeDatabase,omitempty" xml:"WholeDatabase,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) SetDatabaseName(v string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject {
	s.DatabaseName = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) SetTableList(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject {
	s.TableList = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) SetWholeDatabase(v string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject {
	s.WholeDatabase = &v
	return s
}

type DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList struct {
	Table []*string `json:"Table,omitempty" xml:"Table,omitempty" type:"Repeated"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList) SetTable(v []*string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList {
	s.Table = v
	return s
}

type DescribeSubscriptionInstanceStatusResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSubscriptionInstanceStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSubscriptionInstanceStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponse) SetHeaders(v map[string]*string) *DescribeSubscriptionInstanceStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponse) SetStatusCode(v int32) *DescribeSubscriptionInstanceStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponse) SetBody(v *DescribeSubscriptionInstanceStatusResponseBody) *DescribeSubscriptionInstanceStatusResponse {
	s.Body = v
	return s
}

type DescribeSubscriptionInstancesRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. The value must be an integer that is greater than **0** and does not exceed the maximum value of the Integer data type. Default value: **1**.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The number of entries to return on each page. Valid values: **30**, **50**, and **100**. Default value: **30**.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](~~49442~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the change tracking instance.
	//
	// >  If you specify this parameter, DTS returns all the change tracking instances that match the specified name.
	SubscriptionInstanceName *string                                    `json:"SubscriptionInstanceName,omitempty" xml:"SubscriptionInstanceName,omitempty"`
	Tag                      []*DescribeSubscriptionInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeSubscriptionInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesRequest) SetAccountId(v string) *DescribeSubscriptionInstancesRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeSubscriptionInstancesRequest) SetClientToken(v string) *DescribeSubscriptionInstancesRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSubscriptionInstancesRequest) SetOwnerId(v string) *DescribeSubscriptionInstancesRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSubscriptionInstancesRequest) SetPageNum(v int32) *DescribeSubscriptionInstancesRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeSubscriptionInstancesRequest) SetPageSize(v int32) *DescribeSubscriptionInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSubscriptionInstancesRequest) SetRegionId(v string) *DescribeSubscriptionInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSubscriptionInstancesRequest) SetSubscriptionInstanceName(v string) *DescribeSubscriptionInstancesRequest {
	s.SubscriptionInstanceName = &v
	return s
}

func (s *DescribeSubscriptionInstancesRequest) SetTag(v []*DescribeSubscriptionInstancesRequestTag) *DescribeSubscriptionInstancesRequest {
	s.Tag = v
	return s
}

type DescribeSubscriptionInstancesRequestTag struct {
	// The tag key.
	//
	// >
	// *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
	// *   This parameter cannot be an empty string.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// >
	// *   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
	// *   This parameter can be an empty string.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSubscriptionInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesRequestTag) SetKey(v string) *DescribeSubscriptionInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeSubscriptionInstancesRequestTag) SetValue(v string) *DescribeSubscriptionInstancesRequestTag {
	s.Value = &v
	return s
}

type DescribeSubscriptionInstancesResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The maximum number of entries that can be displayed on the current page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of change tracking instances and the details of each instance.
	SubscriptionInstances *DescribeSubscriptionInstancesResponseBodySubscriptionInstances `json:"SubscriptionInstances,omitempty" xml:"SubscriptionInstances,omitempty" type:"Struct"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of change tracking instances that belong to your Alibaba Cloud account.
	TotalRecordCount *int64 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeSubscriptionInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBody) SetErrCode(v string) *DescribeSubscriptionInstancesResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBody) SetErrMessage(v string) *DescribeSubscriptionInstancesResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBody) SetPageNumber(v int32) *DescribeSubscriptionInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBody) SetPageRecordCount(v int32) *DescribeSubscriptionInstancesResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBody) SetRequestId(v string) *DescribeSubscriptionInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBody) SetSubscriptionInstances(v *DescribeSubscriptionInstancesResponseBodySubscriptionInstances) *DescribeSubscriptionInstancesResponseBody {
	s.SubscriptionInstances = v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBody) SetSuccess(v string) *DescribeSubscriptionInstancesResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBody) SetTotalRecordCount(v int64) *DescribeSubscriptionInstancesResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeSubscriptionInstancesResponseBodySubscriptionInstances struct {
	SubscriptionInstance []*DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance `json:"SubscriptionInstance,omitempty" xml:"SubscriptionInstance,omitempty" type:"Repeated"`
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstances) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstances) SetSubscriptionInstance(v []*DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) *DescribeSubscriptionInstancesResponseBodySubscriptionInstances {
	s.SubscriptionInstance = v
	return s
}

type DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance struct {
	// The start of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	BeginTimestamp *string `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	// The consumption checkpoint of the change tracking instance. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	ConsumptionCheckpoint *string `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	// The downstream client information, in the following format: \<IP address of the downstream client>:\<Random ID generated by DTS>.
	ConsumptionClient *string `json:"ConsumptionClient,omitempty" xml:"ConsumptionClient,omitempty"`
	// The end of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	EndTimestamp *string `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	// The error message returned if change tracking failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The time when the change tracking instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format. The time must be in UTC.
	InstanceCreateTime *string `json:"InstanceCreateTime,omitempty" xml:"InstanceCreateTime,omitempty"`
	// The time when the change tracking task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	JobCreateTime *string `json:"JobCreateTime,omitempty" xml:"JobCreateTime,omitempty"`
	// The billing method of the change tracking instance. Valid values:
	//
	// *   **PrePaid**: subscription
	// *   **PostPaid**: pay-as-you-go
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The connection settings of the source instance.
	SourceEndpoint *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The status of the change tracking task. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **Starting**: The task is being started.
	// *   **Normal**: The task is running as expected.
	// *   **Abnormal**: The task is not running as expected.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The topic of the change tracking instance.
	//
	// >  This parameter is returned only if your change tracking instances are of the new version and you have called the [CreateConsumerGroup](~~122863~~) operation to create a consumer group.
	SubscribeTopic *string `json:"SubscribeTopic,omitempty" xml:"SubscribeTopic,omitempty"`
	// The types of operations that are tracked by the task.
	SubscriptionDataType *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType `json:"SubscriptionDataType,omitempty" xml:"SubscriptionDataType,omitempty" type:"Struct"`
	// The endpoint of the change tracking instance.
	SubscriptionHost *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost `json:"SubscriptionHost,omitempty" xml:"SubscriptionHost,omitempty" type:"Struct"`
	// The ID of the change tracking instance.
	SubscriptionInstanceID *string `json:"SubscriptionInstanceID,omitempty" xml:"SubscriptionInstanceID,omitempty"`
	// The name of the change tracking instance.
	SubscriptionInstanceName *string `json:"SubscriptionInstanceName,omitempty" xml:"SubscriptionInstanceName,omitempty"`
	// The objects for change tracking.
	SubscriptionObject *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObject `json:"SubscriptionObject,omitempty" xml:"SubscriptionObject,omitempty" type:"Struct"`
	// The collection of tags.
	Tags *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetBeginTimestamp(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetConsumptionCheckpoint(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetConsumptionClient(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.ConsumptionClient = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetEndTimestamp(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetErrorMessage(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetInstanceCreateTime(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.InstanceCreateTime = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetJobCreateTime(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.JobCreateTime = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetPayType(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.PayType = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetSourceEndpoint(v *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetStatus(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.Status = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetSubscribeTopic(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.SubscribeTopic = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetSubscriptionDataType(v *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.SubscriptionDataType = v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetSubscriptionHost(v *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.SubscriptionHost = v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetSubscriptionInstanceID(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.SubscriptionInstanceID = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetSubscriptionInstanceName(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.SubscriptionInstanceName = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetSubscriptionObject(v *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObject) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.SubscriptionObject = v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance) SetTags(v *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTags) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstance {
	s.Tags = v
	return s
}

type DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint struct {
	// The ID of the source instance.
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The type of the source instance.
	//
	// >  This parameter is returned only for change tracking instances of the new version.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint) SetInstanceID(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint) SetInstanceType(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSourceEndpoint {
	s.InstanceType = &v
	return s
}

type DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType struct {
	// Indicates whether data definition language (DDL) operations are tracked. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DDL *bool `json:"DDL,omitempty" xml:"DDL,omitempty"`
	// Indicates whether data manipulation language (DML) operations are tracked. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DML *bool `json:"DML,omitempty" xml:"DML,omitempty"`
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType) SetDDL(v bool) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType {
	s.DDL = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType) SetDML(v bool) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionDataType {
	s.DML = &v
	return s
}

type DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost struct {
	// The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
	PrivateHost *string `json:"PrivateHost,omitempty" xml:"PrivateHost,omitempty"`
	// The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
	PublicHost *string `json:"PublicHost,omitempty" xml:"PublicHost,omitempty"`
	// The virtual private cloud (VPC) endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
	VPCHost *string `json:"VPCHost,omitempty" xml:"VPCHost,omitempty"`
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost) SetPrivateHost(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost {
	s.PrivateHost = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost) SetPublicHost(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost {
	s.PublicHost = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost) SetVPCHost(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionHost {
	s.VPCHost = &v
	return s
}

type DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObject struct {
	SynchronousObject []*DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject `json:"SynchronousObject,omitempty" xml:"SynchronousObject,omitempty" type:"Repeated"`
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObject) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObject) SetSynchronousObject(v []*DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObject {
	s.SynchronousObject = v
	return s
}

type DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject struct {
	// The name of the database to which the object belongs.
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The table name.
	TableList *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObjectTableList `json:"TableList,omitempty" xml:"TableList,omitempty" type:"Struct"`
	// Indicates whether the data of an entire database is tracked. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	WholeDatabase *string `json:"WholeDatabase,omitempty" xml:"WholeDatabase,omitempty"`
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject) SetDatabaseName(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject {
	s.DatabaseName = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject) SetTableList(v *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObjectTableList) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject {
	s.TableList = v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject) SetWholeDatabase(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObject {
	s.WholeDatabase = &v
	return s
}

type DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObjectTableList struct {
	Table []*string `json:"Table,omitempty" xml:"Table,omitempty" type:"Repeated"`
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObjectTableList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObjectTableList) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObjectTableList) SetTable(v []*string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceSubscriptionObjectSynchronousObjectTableList {
	s.Table = v
	return s
}

type DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTags struct {
	Tag []*DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTags) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTags) SetTag(v []*DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTags {
	s.Tag = v
	return s
}

type DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag struct {
	// The tag key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value that corresponds to the tag key.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag) SetKey(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag) SetValue(v string) *DescribeSubscriptionInstancesResponseBodySubscriptionInstancesSubscriptionInstanceTagsTag {
	s.Value = &v
	return s
}

type DescribeSubscriptionInstancesResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSubscriptionInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSubscriptionInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstancesResponse) SetHeaders(v map[string]*string) *DescribeSubscriptionInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSubscriptionInstancesResponse) SetStatusCode(v int32) *DescribeSubscriptionInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSubscriptionInstancesResponse) SetBody(v *DescribeSubscriptionInstancesResponseBody) *DescribeSubscriptionInstancesResponse {
	s.Body = v
	return s
}

type DescribeSubscriptionMetaRequest struct {
	// The ID of the distributed change tracking instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the region in which the change tracking instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the consumer group.
	Sid *string `json:"Sid,omitempty" xml:"Sid,omitempty"`
	// The IDs of all subtasks in the distributed change tracking task. Separate multiple subtask IDs with commas (,).
	//
	// >  You must specify at least one of the SubMigrationJobIds and **Topics** parameters. We recommend that you specify the SubMigrationJobIds parameter.
	SubMigrationJobIds map[string]interface{} `json:"SubMigrationJobIds,omitempty" xml:"SubMigrationJobIds,omitempty"`
	// The topics of all subtasks in the distributed change tracking task. Separate multiple topics with commas (,).
	//
	// >  You must specify at least one of the **SubMigrationJobIds** and Topics parameters. We recommend that you specify the **SubMigrationJobIds** parameter.
	Topics map[string]interface{} `json:"Topics,omitempty" xml:"Topics,omitempty"`
}

func (s DescribeSubscriptionMetaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionMetaRequest) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionMetaRequest) SetDtsInstanceId(v string) *DescribeSubscriptionMetaRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *DescribeSubscriptionMetaRequest) SetRegionId(v string) *DescribeSubscriptionMetaRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSubscriptionMetaRequest) SetSid(v string) *DescribeSubscriptionMetaRequest {
	s.Sid = &v
	return s
}

func (s *DescribeSubscriptionMetaRequest) SetSubMigrationJobIds(v map[string]interface{}) *DescribeSubscriptionMetaRequest {
	s.SubMigrationJobIds = v
	return s
}

func (s *DescribeSubscriptionMetaRequest) SetTopics(v map[string]interface{}) *DescribeSubscriptionMetaRequest {
	s.Topics = v
	return s
}

type DescribeSubscriptionMetaShrinkRequest struct {
	// The ID of the distributed change tracking instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the region in which the change tracking instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the consumer group.
	Sid *string `json:"Sid,omitempty" xml:"Sid,omitempty"`
	// The IDs of all subtasks in the distributed change tracking task. Separate multiple subtask IDs with commas (,).
	//
	// >  You must specify at least one of the SubMigrationJobIds and **Topics** parameters. We recommend that you specify the SubMigrationJobIds parameter.
	SubMigrationJobIdsShrink *string `json:"SubMigrationJobIds,omitempty" xml:"SubMigrationJobIds,omitempty"`
	// The topics of all subtasks in the distributed change tracking task. Separate multiple topics with commas (,).
	//
	// >  You must specify at least one of the **SubMigrationJobIds** and Topics parameters. We recommend that you specify the **SubMigrationJobIds** parameter.
	TopicsShrink *string `json:"Topics,omitempty" xml:"Topics,omitempty"`
}

func (s DescribeSubscriptionMetaShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionMetaShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionMetaShrinkRequest) SetDtsInstanceId(v string) *DescribeSubscriptionMetaShrinkRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *DescribeSubscriptionMetaShrinkRequest) SetRegionId(v string) *DescribeSubscriptionMetaShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSubscriptionMetaShrinkRequest) SetSid(v string) *DescribeSubscriptionMetaShrinkRequest {
	s.Sid = &v
	return s
}

func (s *DescribeSubscriptionMetaShrinkRequest) SetSubMigrationJobIdsShrink(v string) *DescribeSubscriptionMetaShrinkRequest {
	s.SubMigrationJobIdsShrink = &v
	return s
}

func (s *DescribeSubscriptionMetaShrinkRequest) SetTopicsShrink(v string) *DescribeSubscriptionMetaShrinkRequest {
	s.TopicsShrink = &v
	return s
}

type DescribeSubscriptionMetaResponseBody struct {
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the subtasks.
	SubscriptionMetaList []*DescribeSubscriptionMetaResponseBodySubscriptionMetaList `json:"SubscriptionMetaList,omitempty" xml:"SubscriptionMetaList,omitempty" type:"Repeated"`
	// Indicates whether the request was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSubscriptionMetaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionMetaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionMetaResponseBody) SetErrCode(v string) *DescribeSubscriptionMetaResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeSubscriptionMetaResponseBody) SetErrMessage(v string) *DescribeSubscriptionMetaResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeSubscriptionMetaResponseBody) SetHttpStatusCode(v string) *DescribeSubscriptionMetaResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeSubscriptionMetaResponseBody) SetRequestId(v string) *DescribeSubscriptionMetaResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSubscriptionMetaResponseBody) SetSubscriptionMetaList(v []*DescribeSubscriptionMetaResponseBodySubscriptionMetaList) *DescribeSubscriptionMetaResponseBody {
	s.SubscriptionMetaList = v
	return s
}

func (s *DescribeSubscriptionMetaResponseBody) SetSuccess(v string) *DescribeSubscriptionMetaResponseBody {
	s.Success = &v
	return s
}

type DescribeSubscriptionMetaResponseBodySubscriptionMetaList struct {
	// The consumer offset of the subtask. It is a UNIX timestamp that is generated when the client consumes the first data record. Unit: seconds.
	//
	// >  You can use a search engine to obtain a UNIX timestamp converter.
	Checkpoint *int64 `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The objects of the subtask. For more information, see [Objects of DTS tasks](~~209545~~).
	DBList *string `json:"DBList,omitempty" xml:"DBList,omitempty"`
	// The endpoint and port number of the change tracking instance.
	DProxyUrl *string `json:"DProxyUrl,omitempty" xml:"DProxyUrl,omitempty"`
	// The consumer group ID of the subtask.
	Sid *string `json:"Sid,omitempty" xml:"Sid,omitempty"`
	// The topic of the subtask.
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s DescribeSubscriptionMetaResponseBodySubscriptionMetaList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionMetaResponseBodySubscriptionMetaList) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionMetaResponseBodySubscriptionMetaList) SetCheckpoint(v int64) *DescribeSubscriptionMetaResponseBodySubscriptionMetaList {
	s.Checkpoint = &v
	return s
}

func (s *DescribeSubscriptionMetaResponseBodySubscriptionMetaList) SetDBList(v string) *DescribeSubscriptionMetaResponseBodySubscriptionMetaList {
	s.DBList = &v
	return s
}

func (s *DescribeSubscriptionMetaResponseBodySubscriptionMetaList) SetDProxyUrl(v string) *DescribeSubscriptionMetaResponseBodySubscriptionMetaList {
	s.DProxyUrl = &v
	return s
}

func (s *DescribeSubscriptionMetaResponseBodySubscriptionMetaList) SetSid(v string) *DescribeSubscriptionMetaResponseBodySubscriptionMetaList {
	s.Sid = &v
	return s
}

func (s *DescribeSubscriptionMetaResponseBodySubscriptionMetaList) SetTopic(v string) *DescribeSubscriptionMetaResponseBodySubscriptionMetaList {
	s.Topic = &v
	return s
}

type DescribeSubscriptionMetaResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSubscriptionMetaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSubscriptionMetaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscriptionMetaResponse) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionMetaResponse) SetHeaders(v map[string]*string) *DescribeSubscriptionMetaResponse {
	s.Headers = v
	return s
}

func (s *DescribeSubscriptionMetaResponse) SetStatusCode(v int32) *DescribeSubscriptionMetaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSubscriptionMetaResponse) SetBody(v *DescribeSubscriptionMetaResponseBody) *DescribeSubscriptionMetaResponse {
	s.Body = v
	return s
}

type DescribeSynchronizationJobAlertRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >  Default value: **Forward**.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s DescribeSynchronizationJobAlertRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobAlertRequest) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobAlertRequest) SetAccountId(v string) *DescribeSynchronizationJobAlertRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeSynchronizationJobAlertRequest) SetClientToken(v string) *DescribeSynchronizationJobAlertRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSynchronizationJobAlertRequest) SetOwnerId(v string) *DescribeSynchronizationJobAlertRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSynchronizationJobAlertRequest) SetRegionId(v string) *DescribeSynchronizationJobAlertRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSynchronizationJobAlertRequest) SetSynchronizationDirection(v string) *DescribeSynchronizationJobAlertRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeSynchronizationJobAlertRequest) SetSynchronizationJobId(v string) *DescribeSynchronizationJobAlertRequest {
	s.SynchronizationJobId = &v
	return s
}

type DescribeSynchronizationJobAlertResponseBody struct {
	// The mobile phone numbers that receive latency-related alerts.
	DelayAlertPhone *string `json:"DelayAlertPhone,omitempty" xml:"DelayAlertPhone,omitempty"`
	// Indicates whether task latency is monitored. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	DelayAlertStatus *string `json:"DelayAlertStatus,omitempty" xml:"DelayAlertStatus,omitempty"`
	// The threshold for triggering latency alerts. Unit: seconds.
	DelayOverSeconds *string `json:"DelayOverSeconds,omitempty" xml:"DelayOverSeconds,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The mobile phone numbers that receive status-related alerts.
	ErrorAlertPhone *string `json:"ErrorAlertPhone,omitempty" xml:"ErrorAlertPhone,omitempty"`
	// Indicates whether task status is monitored. Valid values:
	//
	// *   **enable**: yes
	// *   **disable**: no
	ErrorAlertStatus *string `json:"ErrorAlertStatus,omitempty" xml:"ErrorAlertStatus,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	//
	// *   **Reverse**
	//
	// > This parameter is returned only when the topology of data synchronization is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
	// The name of the data synchronization task.
	SynchronizationJobName *string `json:"SynchronizationJobName,omitempty" xml:"SynchronizationJobName,omitempty"`
}

func (s DescribeSynchronizationJobAlertResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobAlertResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetDelayAlertPhone(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.DelayAlertPhone = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetDelayAlertStatus(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.DelayAlertStatus = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetDelayOverSeconds(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.DelayOverSeconds = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetErrCode(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetErrMessage(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetErrorAlertPhone(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.ErrorAlertPhone = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetErrorAlertStatus(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.ErrorAlertStatus = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetRequestId(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetSuccess(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetSynchronizationDirection(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetSynchronizationJobId(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.SynchronizationJobId = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponseBody) SetSynchronizationJobName(v string) *DescribeSynchronizationJobAlertResponseBody {
	s.SynchronizationJobName = &v
	return s
}

type DescribeSynchronizationJobAlertResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSynchronizationJobAlertResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSynchronizationJobAlertResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobAlertResponse) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobAlertResponse) SetHeaders(v map[string]*string) *DescribeSynchronizationJobAlertResponse {
	s.Headers = v
	return s
}

func (s *DescribeSynchronizationJobAlertResponse) SetStatusCode(v int32) *DescribeSynchronizationJobAlertResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSynchronizationJobAlertResponse) SetBody(v *DescribeSynchronizationJobAlertResponseBody) *DescribeSynchronizationJobAlertResponse {
	s.Body = v
	return s
}

type DescribeSynchronizationJobReplicatorCompareRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >
	// *   Default value: **Forward**.
	// *   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s DescribeSynchronizationJobReplicatorCompareRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobReplicatorCompareRequest) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobReplicatorCompareRequest) SetAccountId(v string) *DescribeSynchronizationJobReplicatorCompareRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareRequest) SetClientToken(v string) *DescribeSynchronizationJobReplicatorCompareRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareRequest) SetOwnerId(v string) *DescribeSynchronizationJobReplicatorCompareRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareRequest) SetRegionId(v string) *DescribeSynchronizationJobReplicatorCompareRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareRequest) SetSynchronizationDirection(v string) *DescribeSynchronizationJobReplicatorCompareRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareRequest) SetSynchronizationJobId(v string) *DescribeSynchronizationJobReplicatorCompareRequest {
	s.SynchronizationJobId = &v
	return s
}

type DescribeSynchronizationJobReplicatorCompareResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// Indicates whether image matching is enabled. Valid values:
	//
	// *   **true**: Image matching is enabled.
	// *   **false**: Image matching is disabled.
	SynchronizationReplicatorCompareEnable *bool `json:"SynchronizationReplicatorCompareEnable,omitempty" xml:"SynchronizationReplicatorCompareEnable,omitempty"`
}

func (s DescribeSynchronizationJobReplicatorCompareResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobReplicatorCompareResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobReplicatorCompareResponseBody) SetErrCode(v string) *DescribeSynchronizationJobReplicatorCompareResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareResponseBody) SetErrMessage(v string) *DescribeSynchronizationJobReplicatorCompareResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareResponseBody) SetRequestId(v string) *DescribeSynchronizationJobReplicatorCompareResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareResponseBody) SetSuccess(v string) *DescribeSynchronizationJobReplicatorCompareResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareResponseBody) SetSynchronizationReplicatorCompareEnable(v bool) *DescribeSynchronizationJobReplicatorCompareResponseBody {
	s.SynchronizationReplicatorCompareEnable = &v
	return s
}

type DescribeSynchronizationJobReplicatorCompareResponse struct {
	Headers    map[string]*string                                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSynchronizationJobReplicatorCompareResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSynchronizationJobReplicatorCompareResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobReplicatorCompareResponse) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobReplicatorCompareResponse) SetHeaders(v map[string]*string) *DescribeSynchronizationJobReplicatorCompareResponse {
	s.Headers = v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareResponse) SetStatusCode(v int32) *DescribeSynchronizationJobReplicatorCompareResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSynchronizationJobReplicatorCompareResponse) SetBody(v *DescribeSynchronizationJobReplicatorCompareResponseBody) *DescribeSynchronizationJobReplicatorCompareResponse {
	s.Body = v
	return s
}

type DescribeSynchronizationJobStatusRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >  Default value: **Forward**.
	//
	// The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s DescribeSynchronizationJobStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusRequest) SetAccountId(v string) *DescribeSynchronizationJobStatusRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusRequest) SetClientToken(v string) *DescribeSynchronizationJobStatusRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSynchronizationJobStatusRequest) SetOwnerId(v string) *DescribeSynchronizationJobStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusRequest) SetRegionId(v string) *DescribeSynchronizationJobStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusRequest) SetSynchronizationDirection(v string) *DescribeSynchronizationJobStatusRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeSynchronizationJobStatusRequest) SetSynchronizationJobId(v string) *DescribeSynchronizationJobStatusRequest {
	s.SynchronizationJobId = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBody struct {
	// The UNIX timestamp generated when the latest data record was synchronized.
	//
	// >  You can use a search engine to obtain a UNIX timestamp converter.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// Indicates whether full data synchronization is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	DataInitialization *string `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// The status of full data synchronization.
	DataInitializationStatus *DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	// The status of incremental data synchronization.
	DataSynchronizationStatus *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	// The synchronization latency, in seconds.
	Delay *string `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The synchronization delay, in milliseconds.
	DelayMillis *int64 `json:"DelayMillis,omitempty" xml:"DelayMillis,omitempty"`
	// The connection settings of the destination instance.
	DestinationEndpoint *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The error message returned if data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The time when the data synchronization instance expires. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	//
	// >  This parameter is returned only if the return value of the **PayType** parameter is **PrePaid**.
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The billing method of the data synchronization instance. Valid values:
	//
	// *   **PrePaid**: subscription
	// *   **PostPaid**: pay-as-you-go
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The performance of the data synchronization instance.
	Performance *DescribeSynchronizationJobStatusResponseBodyPerformance `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Struct"`
	// The precheck status.
	PrecheckStatus *DescribeSynchronizationJobStatusResponseBodyPrecheckStatus `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The connection settings of the source instance.
	SourceEndpoint *DescribeSynchronizationJobStatusResponseBodySourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The status of the data synchronization task. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **Initializing**: The task is performing initial synchronization.
	// *   **InitializeFailed**: Initial synchronization failed.
	// *   **Synchronizing**: The task is synchronizing data.
	// *   **Failed**: The task failed to synchronize data.
	// *   **Suspending**: The task is paused.
	// *   **Modifying**: The objects in the task are being modified.
	// *   **Finished**: The task is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Indicates whether schema synchronization is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	StructureInitialization *string `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
	// The status of schema synchronization.
	StructureInitializationStatus *DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The specification of the data synchronization instance.
	SynchronizationJobClass *string `json:"SynchronizationJobClass,omitempty" xml:"SynchronizationJobClass,omitempty"`
	// The ID of the data synchronization instance.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
	// The name of the data synchronization task.
	SynchronizationJobName *string `json:"SynchronizationJobName,omitempty" xml:"SynchronizationJobName,omitempty"`
	// The objects that are synchronized by the task.
	SynchronizationObjects []*DescribeSynchronizationJobStatusResponseBodySynchronizationObjects `json:"SynchronizationObjects,omitempty" xml:"SynchronizationObjects,omitempty" type:"Repeated"`
	TaskId                 *string                                                               `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetCheckpoint(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.Checkpoint = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetDataInitialization(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.DataInitialization = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetDataInitializationStatus(v *DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus) *DescribeSynchronizationJobStatusResponseBody {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetDataSynchronizationStatus(v *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus) *DescribeSynchronizationJobStatusResponseBody {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetDelay(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.Delay = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetDelayMillis(v int64) *DescribeSynchronizationJobStatusResponseBody {
	s.DelayMillis = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetDestinationEndpoint(v *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint) *DescribeSynchronizationJobStatusResponseBody {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetErrCode(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetErrMessage(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetErrorMessage(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetExpireTime(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.ExpireTime = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetPayType(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.PayType = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetPerformance(v *DescribeSynchronizationJobStatusResponseBodyPerformance) *DescribeSynchronizationJobStatusResponseBody {
	s.Performance = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetPrecheckStatus(v *DescribeSynchronizationJobStatusResponseBodyPrecheckStatus) *DescribeSynchronizationJobStatusResponseBody {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetRequestId(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetSourceEndpoint(v *DescribeSynchronizationJobStatusResponseBodySourceEndpoint) *DescribeSynchronizationJobStatusResponseBody {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetStatus(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetStructureInitialization(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.StructureInitialization = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetStructureInitializationStatus(v *DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus) *DescribeSynchronizationJobStatusResponseBody {
	s.StructureInitializationStatus = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetSuccess(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetSynchronizationDirection(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetSynchronizationJobClass(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.SynchronizationJobClass = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetSynchronizationJobId(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.SynchronizationJobId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetSynchronizationJobName(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.SynchronizationJobName = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetSynchronizationObjects(v []*DescribeSynchronizationJobStatusResponseBodySynchronizationObjects) *DescribeSynchronizationJobStatusResponseBody {
	s.SynchronizationObjects = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBody) SetTaskId(v string) *DescribeSynchronizationJobStatusResponseBody {
	s.TaskId = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus struct {
	// The error message returned if full data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of full data synchronization. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of records that have been synchronized during full data synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of full data synchronization. Valid values:
	//
	// *   **NotStarted**: Full data synchronization is not started.
	// *   **Migrating**: Full data synchronization is in progress.
	// *   **Failed**: Full data synchronization failed.
	// *   **Finished**: Full data synchronization is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus) SetErrorMessage(v string) *DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus) SetPercent(v string) *DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus) SetProgress(v string) *DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus) SetStatus(v string) *DescribeSynchronizationJobStatusResponseBodyDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus struct {
	// The UNIX timestamp generated when the latest data record was synchronized.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The synchronization latency, in seconds.
	Delay *string `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The synchronization latency, in milliseconds.
	DelayMillis *int64 `json:"DelayMillis,omitempty" xml:"DelayMillis,omitempty"`
	// The error message returned if incremental data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of incremental data synchronization. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The status of incremental data synchronization. Valid values:
	//
	// *   **NotStarted**: Incremental data synchronization is not started.
	// *   **Migrating**: Incremental data synchronization is in progress.
	// *   **Failed**: Incremental data synchronization failed.
	// *   **Finished**: Incremental data synchronization is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus) SetCheckpoint(v string) *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus {
	s.Checkpoint = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus) SetDelay(v string) *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus {
	s.Delay = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus) SetDelayMillis(v int64) *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus {
	s.DelayMillis = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus) SetErrorMessage(v string) *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus) SetPercent(v string) *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus) SetStatus(v string) *DescribeSynchronizationJobStatusResponseBodyDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint struct {
	// The database type of the destination instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The endpoint of the destination instance.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the destination instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the destination instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The database service port of the destination instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The database account of the destination instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint) SetEngineName(v string) *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint) SetIP(v string) *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint {
	s.IP = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint) SetInstanceId(v string) *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint {
	s.InstanceId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint) SetInstanceType(v string) *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint) SetPort(v string) *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint) SetUserName(v string) *DescribeSynchronizationJobStatusResponseBodyDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBodyPerformance struct {
	// The data traffic that is synchronized per second. Unit: MB/s.
	FLOW *string `json:"FLOW,omitempty" xml:"FLOW,omitempty"`
	// The number of times SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
	RPS *string `json:"RPS,omitempty" xml:"RPS,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBodyPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodyPerformance) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodyPerformance) SetFLOW(v string) *DescribeSynchronizationJobStatusResponseBodyPerformance {
	s.FLOW = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyPerformance) SetRPS(v string) *DescribeSynchronizationJobStatusResponseBodyPerformance {
	s.RPS = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBodyPrecheckStatus struct {
	// The result of each precheck item.
	Detail []*DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	// The precheck progress. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The precheck result. Valid values:
	//
	// *   **Success**: The task passed the precheck.
	// *   **Failed**: The task failed to pass the precheck.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBodyPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodyPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodyPrecheckStatus) SetDetail(v []*DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail) *DescribeSynchronizationJobStatusResponseBodyPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyPrecheckStatus) SetPercent(v string) *DescribeSynchronizationJobStatusResponseBodyPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyPrecheckStatus) SetStatus(v string) *DescribeSynchronizationJobStatusResponseBodyPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail struct {
	// The precheck result. Valid values:
	//
	// *   **Success**: The task passed the precheck.
	// *   **Failed**: The task failed to pass the precheck.
	CheckStatus *string `json:"CheckStatus,omitempty" xml:"CheckStatus,omitempty"`
	// The error message returned if the task failed to pass the precheck.
	//
	// >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The name of the precheck item.
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	// The method to fix the precheck failure.
	//
	// >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
	RepairMethod *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail) SetCheckStatus(v string) *DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail {
	s.CheckStatus = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail) SetErrorMessage(v string) *DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail) SetItemName(v string) *DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail {
	s.ItemName = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail) SetRepairMethod(v string) *DescribeSynchronizationJobStatusResponseBodyPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBodySourceEndpoint struct {
	// The database type of the source instance.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The endpoint of the source instance.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the source instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the source instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The database service port of the source instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The database account of the source instance.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBodySourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodySourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodySourceEndpoint) SetEngineName(v string) *DescribeSynchronizationJobStatusResponseBodySourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodySourceEndpoint) SetIP(v string) *DescribeSynchronizationJobStatusResponseBodySourceEndpoint {
	s.IP = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodySourceEndpoint) SetInstanceId(v string) *DescribeSynchronizationJobStatusResponseBodySourceEndpoint {
	s.InstanceId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodySourceEndpoint) SetInstanceType(v string) *DescribeSynchronizationJobStatusResponseBodySourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodySourceEndpoint) SetPort(v string) *DescribeSynchronizationJobStatusResponseBodySourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodySourceEndpoint) SetUserName(v string) *DescribeSynchronizationJobStatusResponseBodySourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus struct {
	// The error message returned if schema synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of schema synchronization. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of tables whose schemas have been synchronized.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of schema synchronization. Valid values:
	//
	// *   **NotStarted**: Schema synchronization is not started.
	// *   **Migrating**: Schema synchronization is in progress.
	// *   **Failed**: Schema synchronization failed.
	// *   **Finished**: Schema synchronization is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus) SetErrorMessage(v string) *DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus) SetPercent(v string) *DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus) SetProgress(v string) *DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus) SetStatus(v string) *DescribeSynchronizationJobStatusResponseBodyStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBodySynchronizationObjects struct {
	// The database name that is used in the destination instance.
	NewSchemaName *string `json:"NewSchemaName,omitempty" xml:"NewSchemaName,omitempty"`
	// The name of the synchronized database.
	SchemaName *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	// The source tables that are excluded from the data synchronization task.
	TableExcludes []*DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableExcludes `json:"TableExcludes,omitempty" xml:"TableExcludes,omitempty" type:"Repeated"`
	// The tables that are synchronized by the task.
	TableIncludes []*DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableIncludes `json:"TableIncludes,omitempty" xml:"TableIncludes,omitempty" type:"Repeated"`
}

func (s DescribeSynchronizationJobStatusResponseBodySynchronizationObjects) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodySynchronizationObjects) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodySynchronizationObjects) SetNewSchemaName(v string) *DescribeSynchronizationJobStatusResponseBodySynchronizationObjects {
	s.NewSchemaName = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodySynchronizationObjects) SetSchemaName(v string) *DescribeSynchronizationJobStatusResponseBodySynchronizationObjects {
	s.SchemaName = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodySynchronizationObjects) SetTableExcludes(v []*DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableExcludes) *DescribeSynchronizationJobStatusResponseBodySynchronizationObjects {
	s.TableExcludes = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponseBodySynchronizationObjects) SetTableIncludes(v []*DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableIncludes) *DescribeSynchronizationJobStatusResponseBodySynchronizationObjects {
	s.TableIncludes = v
	return s
}

type DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableExcludes struct {
	// The name of the excluded table.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableExcludes) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableExcludes) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableExcludes) SetTableName(v string) *DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableExcludes {
	s.TableName = &v
	return s
}

type DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableIncludes struct {
	// The name of the synchronized table.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableIncludes) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableIncludes) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableIncludes) SetTableName(v string) *DescribeSynchronizationJobStatusResponseBodySynchronizationObjectsTableIncludes {
	s.TableName = &v
	return s
}

type DescribeSynchronizationJobStatusResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSynchronizationJobStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSynchronizationJobStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusResponse) SetHeaders(v map[string]*string) *DescribeSynchronizationJobStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeSynchronizationJobStatusResponse) SetStatusCode(v int32) *DescribeSynchronizationJobStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSynchronizationJobStatusResponse) SetBody(v *DescribeSynchronizationJobStatusResponseBody) *DescribeSynchronizationJobStatusResponse {
	s.Body = v
	return s
}

type DescribeSynchronizationJobStatusListRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The IDs of the data synchronization instances. The value is a JSON array. You can call the [DescribeSynchronizationJobs](~~49454~~) operation to query the instance IDs.
	SynchronizationJobIdListJsonStr *string `json:"SynchronizationJobIdListJsonStr,omitempty" xml:"SynchronizationJobIdListJsonStr,omitempty"`
}

func (s DescribeSynchronizationJobStatusListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusListRequest) SetAccountId(v string) *DescribeSynchronizationJobStatusListRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListRequest) SetClientToken(v string) *DescribeSynchronizationJobStatusListRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListRequest) SetOwnerId(v string) *DescribeSynchronizationJobStatusListRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListRequest) SetRegionId(v string) *DescribeSynchronizationJobStatusListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListRequest) SetSynchronizationJobIdListJsonStr(v string) *DescribeSynchronizationJobStatusListRequest {
	s.SynchronizationJobIdListJsonStr = &v
	return s
}

type DescribeSynchronizationJobStatusListResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The page number of the returned page.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of data synchronization instances displayed on one page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The status of the data synchronization tasks.
	SynchronizationJobListStatusList []*DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList `json:"SynchronizationJobListStatusList,omitempty" xml:"SynchronizationJobListStatusList,omitempty" type:"Repeated"`
	// The total number of data synchronization instances.
	TotalRecordCount *int64 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeSynchronizationJobStatusListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusListResponseBody) SetErrCode(v string) *DescribeSynchronizationJobStatusListResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponseBody) SetErrMessage(v string) *DescribeSynchronizationJobStatusListResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponseBody) SetPageNumber(v int32) *DescribeSynchronizationJobStatusListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponseBody) SetPageRecordCount(v int32) *DescribeSynchronizationJobStatusListResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponseBody) SetRequestId(v string) *DescribeSynchronizationJobStatusListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponseBody) SetSuccess(v string) *DescribeSynchronizationJobStatusListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponseBody) SetSynchronizationJobListStatusList(v []*DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList) *DescribeSynchronizationJobStatusListResponseBody {
	s.SynchronizationJobListStatusList = v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponseBody) SetTotalRecordCount(v int64) *DescribeSynchronizationJobStatusListResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList struct {
	// The details of data synchronization tasks in each direction.
	SynchronizationDirectionInfoList []*DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList `json:"SynchronizationDirectionInfoList,omitempty" xml:"SynchronizationDirectionInfoList,omitempty" type:"Repeated"`
	// The ID of the data synchronization instance.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList) SetSynchronizationDirectionInfoList(v []*DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList) *DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList {
	s.SynchronizationDirectionInfoList = v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList) SetSynchronizationJobId(v string) *DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusList {
	s.SynchronizationJobId = &v
	return s
}

type DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList struct {
	// The UNIX timestamp generated when the latest data record was synchronized.
	//
	// >  You can use a search engine to obtain a UNIX timestamp converter.
	Checkpoint *string `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	// The status of the data synchronization task in this direction. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **Initializing**: The task is performing initial synchronization.
	// *   **InitializeFailed**: Initial synchronization failed.
	// *   **Synchronizing**: The task is synchronizing data.
	// *   **Failed**: The task failed to synchronize data.
	// *   **Suspending**: The task is paused.
	// *   **Modifying**: The objects in the task are being modified.
	// *   **Finished**: The task is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList) SetCheckpoint(v string) *DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList {
	s.Checkpoint = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList) SetStatus(v string) *DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList {
	s.Status = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList) SetSynchronizationDirection(v string) *DescribeSynchronizationJobStatusListResponseBodySynchronizationJobListStatusListSynchronizationDirectionInfoList {
	s.SynchronizationDirection = &v
	return s
}

type DescribeSynchronizationJobStatusListResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSynchronizationJobStatusListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSynchronizationJobStatusListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobStatusListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobStatusListResponse) SetHeaders(v map[string]*string) *DescribeSynchronizationJobStatusListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponse) SetStatusCode(v int32) *DescribeSynchronizationJobStatusListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSynchronizationJobStatusListResponse) SetBody(v *DescribeSynchronizationJobStatusListResponseBody) *DescribeSynchronizationJobStatusListResponse {
	s.Body = v
	return s
}

type DescribeSynchronizationJobsRequest struct {
	// The page number of the returned page.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The tag value. You can call the [ListTagResources](~~191187~~) operation to query the tag value.
	//
	// >
	// *   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
	// *   This parameter can be an empty string.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	PageNum *int32 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The name of the data synchronization task.
	//
	// >  Fuzzy matching is supported.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tag key. You can call the [ListTagResources](~~191187~~) operation to query the tag key.
	//
	// >
	// *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
	// *   This parameter cannot be an empty string.
	SynchronizationJobName *string                                  `json:"SynchronizationJobName,omitempty" xml:"SynchronizationJobName,omitempty"`
	Tag                    []*DescribeSynchronizationJobsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeSynchronizationJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsRequest) SetAccountId(v string) *DescribeSynchronizationJobsRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeSynchronizationJobsRequest) SetClientToken(v string) *DescribeSynchronizationJobsRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSynchronizationJobsRequest) SetOwnerId(v string) *DescribeSynchronizationJobsRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSynchronizationJobsRequest) SetPageNum(v int32) *DescribeSynchronizationJobsRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeSynchronizationJobsRequest) SetPageSize(v int32) *DescribeSynchronizationJobsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSynchronizationJobsRequest) SetRegionId(v string) *DescribeSynchronizationJobsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSynchronizationJobsRequest) SetSynchronizationJobName(v string) *DescribeSynchronizationJobsRequest {
	s.SynchronizationJobName = &v
	return s
}

func (s *DescribeSynchronizationJobsRequest) SetTag(v []*DescribeSynchronizationJobsRequestTag) *DescribeSynchronizationJobsRequest {
	s.Tag = v
	return s
}

type DescribeSynchronizationJobsRequestTag struct {
	// The ID of the request.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The maximum number of entries that can be displayed on the current page.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSynchronizationJobsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsRequestTag) SetKey(v string) *DescribeSynchronizationJobsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeSynchronizationJobsRequestTag) SetValue(v string) *DescribeSynchronizationJobsRequestTag {
	s.Value = &v
	return s
}

type DescribeSynchronizationJobsResponseBody struct {
	// The total number of data synchronization instances that belong to your Alibaba Cloud account.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// Indicates whether full data synchronization is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The list of data synchronization instances and the details of each instance.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The name of the data synchronization task.
	SynchronizationInstances []*DescribeSynchronizationJobsResponseBodySynchronizationInstances `json:"SynchronizationInstances,omitempty" xml:"SynchronizationInstances,omitempty" type:"Repeated"`
	// The status of the data synchronization task. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **Initializing**: The task is performing initial synchronization.
	// *   **InitializeFailed**: Initial synchronization failed.
	// *   **Synchronizing**: The task is synchronizing data.
	// *   **Failed**: The task failed to synchronize data.
	// *   **Suspending**: The task is paused.
	// *   **Modifying**: The objects in the task are being modified.
	// *   **Finished**: The task is completed.
	TotalRecordCount *int64 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBody) SetPageNumber(v int32) *DescribeSynchronizationJobsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBody) SetPageRecordCount(v int32) *DescribeSynchronizationJobsResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBody) SetRequestId(v string) *DescribeSynchronizationJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBody) SetSynchronizationInstances(v []*DescribeSynchronizationJobsResponseBodySynchronizationInstances) *DescribeSynchronizationJobsResponseBody {
	s.SynchronizationInstances = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBody) SetTotalRecordCount(v int64) *DescribeSynchronizationJobsResponseBody {
	s.TotalRecordCount = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstances struct {
	// The specification of the data synchronization instance.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The synchronization latency, in seconds.
	DataInitialization *string `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	// The error message returned if full data synchronization failed.
	DataInitializationStatus *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	// The progress of incremental data synchronization. Unit: %.
	//
	// >  This parameter is no longer available.
	DataSynchronizationStatus *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	// The time when the data synchronization task was created. The time is displayed in the *yyyy-MM-dd* *HH:mm:ss*.0 format (UTC+8).
	Delay *string `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The type of the destination instance.
	DestinationEndpoint *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint `json:"DestinationEndpoint,omitempty" xml:"DestinationEndpoint,omitempty" type:"Struct"`
	// The billing method of the data synchronization instance. Valid values:
	//
	// *   **PrePaid**: subscription
	// *   **PostPaid**: pay-as-you-go
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// Indicates whether schema synchronization is performed. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The time when the data synchronization task was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	InstanceCreateTime *string `json:"InstanceCreateTime,omitempty" xml:"InstanceCreateTime,omitempty"`
	// The tag value that corresponds to the tag key.
	JobCreateTime *string `json:"JobCreateTime,omitempty" xml:"JobCreateTime,omitempty"`
	// The time when the instance was created. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The precheck status.
	Performance *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance `json:"Performance,omitempty" xml:"Performance,omitempty" type:"Struct"`
	// The result of each precheck item.
	PrecheckStatus *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	// The type of the source instance.
	SourceEndpoint *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The error message returned if data synchronization failed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the data synchronization instance.
	StructureInitialization *string `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
	// The error message returned if schema synchronization failed.
	StructureInitializationStatus *DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
	// The tag key.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	SynchronizationJobClass *string `json:"SynchronizationJobClass,omitempty" xml:"SynchronizationJobClass,omitempty"`
	// The collection of tags.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
	// The time when the data synchronization instance expires. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	//
	// >  This parameter is returned only if the return value of the **PayType** parameter is **PrePaid**.
	SynchronizationJobName *string `json:"SynchronizationJobName,omitempty" xml:"SynchronizationJobName,omitempty"`
	// The source tables that are excluded from the data synchronization task.
	SynchronizationObjects []*DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects `json:"SynchronizationObjects,omitempty" xml:"SynchronizationObjects,omitempty" type:"Repeated"`
	// The objects that are synchronized by the task.
	Tags []*DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstances) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetCreateTime(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.CreateTime = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetDataInitialization(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.DataInitialization = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetDataInitializationStatus(v *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetDataSynchronizationStatus(v *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetDelay(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.Delay = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetDestinationEndpoint(v *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.DestinationEndpoint = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetErrorMessage(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetExpireTime(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.ExpireTime = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetInstanceCreateTime(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.InstanceCreateTime = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetJobCreateTime(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.JobCreateTime = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetPayType(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.PayType = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetPerformance(v *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.Performance = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetPrecheckStatus(v *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetSourceEndpoint(v *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetStatus(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.Status = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetStructureInitialization(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.StructureInitialization = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetStructureInitializationStatus(v *DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.StructureInitializationStatus = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetSynchronizationDirection(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.SynchronizationDirection = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetSynchronizationJobClass(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.SynchronizationJobClass = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetSynchronizationJobId(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.SynchronizationJobId = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetSynchronizationJobName(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.SynchronizationJobName = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetSynchronizationObjects(v []*DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.SynchronizationObjects = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstances) SetTags(v []*DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags) *DescribeSynchronizationJobsResponseBodySynchronizationInstances {
	s.Tags = v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus struct {
	// The status of incremental data synchronization.
	//
	// >  This parameter is no longer available.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The status of incremental data synchronization.
	//
	// >  This parameter and its sub-parameters are no longer available.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The synchronization latency.
	//
	// >  This parameter is no longer available.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The number of records that have been synchronized during full data synchronization.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus) SetErrorMessage(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus) SetPercent(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus) SetProgress(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus) SetStatus(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus struct {
	// The connection settings of the destination instance.
	Delay *string `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The endpoint of the destination instance.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the destination instance.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The error message returned if incremental data synchronization failed.
	//
	// >  This parameter is no longer available.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus) SetDelay(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus {
	s.Delay = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus) SetErrorMessage(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus) SetPercent(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus) SetStatus(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint struct {
	// The data traffic that is synchronized per second. Unit: MB/s.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The database account of the destination instance.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The database service port of the destination instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The database type of the destination instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The performance of the data synchronization instance.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The number of times SQL statements are synchronized per second, including BEGIN, COMMIT, DML, and DDL statements. DML statements include INSERT, DELETE, and UPDATE.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint) SetEngineName(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint) SetIP(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint {
	s.IP = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint) SetInstanceId(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint {
	s.InstanceId = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint) SetInstanceType(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint) SetPort(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint) SetUserName(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesDestinationEndpoint {
	s.UserName = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance struct {
	// The precheck progress. Unit: %.
	FLOW *string `json:"FLOW,omitempty" xml:"FLOW,omitempty"`
	// The precheck result. Valid values:
	//
	// *   **Success**: The task passed the precheck.
	// *   **Failed**: The task failed to pass the precheck.
	RPS *string `json:"RPS,omitempty" xml:"RPS,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance) SetFLOW(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance {
	s.FLOW = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance) SetRPS(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPerformance {
	s.RPS = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus struct {
	// The name of the precheck item.
	Detail []*DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	// The error message returned if the task failed to pass the precheck.
	//
	// >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The precheck result. Valid values:
	//
	// *   **Success**: The task passed the precheck.
	// *   **Failed**: The task failed to pass the precheck.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus) SetDetail(v []*DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus) SetPercent(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus) SetStatus(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail struct {
	// The method to fix the precheck failure.
	//
	// >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
	CheckStatus *string `json:"CheckStatus,omitempty" xml:"CheckStatus,omitempty"`
	// The connection settings of the source instance.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The ID of the source instance.
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	// The endpoint of the source instance.
	RepairMethod *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail) SetCheckStatus(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail {
	s.CheckStatus = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail) SetErrorMessage(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail) SetItemName(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail {
	s.ItemName = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail) SetRepairMethod(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint struct {
	// The progress of schema synchronization. Unit: %.
	EngineName *string `json:"EngineName,omitempty" xml:"EngineName,omitempty"`
	// The database account of the source instance.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The database service port of the source instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The database type of the source instance.
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The status of schema synchronization.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The status of schema synchronization. Valid values:
	//
	// *   **NotStarted**: Schema synchronization is not started.
	// *   **Migrating**: Schema synchronization is in progress.
	// *   **Failed**: Schema synchronization failed.
	// *   **Finished**: Schema synchronization is completed.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint) SetEngineName(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint {
	s.EngineName = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint) SetIP(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint {
	s.IP = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint) SetInstanceId(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint {
	s.InstanceId = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint) SetInstanceType(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint) SetPort(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint {
	s.Port = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint) SetUserName(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSourceEndpoint {
	s.UserName = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus struct {
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Percent      *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	Progress     *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The number of tables whose schemas have been synchronized.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus) SetErrorMessage(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus) SetPercent(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus) SetProgress(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus) SetStatus(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects struct {
	// The name of the excluded table.
	NewSchemaName *string `json:"NewSchemaName,omitempty" xml:"NewSchemaName,omitempty"`
	// The tables that are synchronized by the task.
	SchemaName *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
	// The name of the synchronized table.
	TableExcludes []*DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableExcludes `json:"TableExcludes,omitempty" xml:"TableExcludes,omitempty" type:"Repeated"`
	// The status of full data synchronization. Valid values:
	//
	// *   **NotStarted**: Full data synchronization is not started.
	// *   **Migrating**: Full data synchronization is in progress.
	// *   **Failed**: Full data synchronization failed.
	// *   **Finished**: Full data synchronization is completed.
	TableIncludes []*DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableIncludes `json:"TableIncludes,omitempty" xml:"TableIncludes,omitempty" type:"Repeated"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects) SetNewSchemaName(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects {
	s.NewSchemaName = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects) SetSchemaName(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects {
	s.SchemaName = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects) SetTableExcludes(v []*DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableExcludes) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects {
	s.TableExcludes = v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects) SetTableIncludes(v []*DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableIncludes) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjects {
	s.TableIncludes = v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableExcludes struct {
	// The status of full data synchronization.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableExcludes) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableExcludes) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableExcludes) SetTableName(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableExcludes {
	s.TableName = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableIncludes struct {
	// The progress of full data synchronization. Unit: %.
	TableName *string `json:"TableName,omitempty" xml:"TableName,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableIncludes) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableIncludes) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableIncludes) SetTableName(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesSynchronizationObjectsTableIncludes {
	s.TableName = &v
	return s
}

type DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags struct {
	// The database name that is used in the destination instance.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The name of the synchronized database.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags) SetKey(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags {
	s.Key = &v
	return s
}

func (s *DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags) SetValue(v string) *DescribeSynchronizationJobsResponseBodySynchronizationInstancesTags {
	s.Value = &v
	return s
}

type DescribeSynchronizationJobsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSynchronizationJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSynchronizationJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationJobsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationJobsResponse) SetHeaders(v map[string]*string) *DescribeSynchronizationJobsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSynchronizationJobsResponse) SetStatusCode(v int32) *DescribeSynchronizationJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSynchronizationJobsResponse) SetBody(v *DescribeSynchronizationJobsResponseBody) *DescribeSynchronizationJobsResponse {
	s.Body = v
	return s
}

type DescribeSynchronizationObjectModifyStatusRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must make sure that the value is unique among different requests. The **ClientToken** value can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region where the data synchronization instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The task ID, which is returned after you call the [ModifySynchronizationObject](~~49451~~) operation to modify the objects to be synchronized.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeSynchronizationObjectModifyStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationObjectModifyStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationObjectModifyStatusRequest) SetAccountId(v string) *DescribeSynchronizationObjectModifyStatusRequest {
	s.AccountId = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusRequest) SetClientToken(v string) *DescribeSynchronizationObjectModifyStatusRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusRequest) SetOwnerId(v string) *DescribeSynchronizationObjectModifyStatusRequest {
	s.OwnerId = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusRequest) SetRegionId(v string) *DescribeSynchronizationObjectModifyStatusRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusRequest) SetTaskId(v string) *DescribeSynchronizationObjectModifyStatusRequest {
	s.TaskId = &v
	return s
}

type DescribeSynchronizationObjectModifyStatusResponseBody struct {
	// The status of full data synchronization.
	DataInitializationStatus *DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus `json:"DataInitializationStatus,omitempty" xml:"DataInitializationStatus,omitempty" type:"Struct"`
	// The status of incremental data synchronization.
	//
	// >  This parameter and its sub-parameters will be removed in the future.
	DataSynchronizationStatus *DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus `json:"DataSynchronizationStatus,omitempty" xml:"DataSynchronizationStatus,omitempty" type:"Struct"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The error message returned if the task failed to modify the objects to be synchronized.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The precheck status.
	PrecheckStatus *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus `json:"PrecheckStatus,omitempty" xml:"PrecheckStatus,omitempty" type:"Struct"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The status of the task that changes the objects to be synchronized. Valid values:
	//
	// *   **NotStarted**: The task is not started.
	// *   **Prechecking**: The task is being prechecked.
	// *   **PrecheckFailed**: The task failed to pass the precheck.
	// *   **Migrating**: The task is running.
	// *   **Failed**: The task failed.
	// *   **Finished**: The task is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The status of schema synchronization.
	StructureInitializationStatus *DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus `json:"StructureInitializationStatus,omitempty" xml:"StructureInitializationStatus,omitempty" type:"Struct"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSynchronizationObjectModifyStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationObjectModifyStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBody) SetDataInitializationStatus(v *DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus) *DescribeSynchronizationObjectModifyStatusResponseBody {
	s.DataInitializationStatus = v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBody) SetDataSynchronizationStatus(v *DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus) *DescribeSynchronizationObjectModifyStatusResponseBody {
	s.DataSynchronizationStatus = v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBody) SetErrCode(v string) *DescribeSynchronizationObjectModifyStatusResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBody) SetErrMessage(v string) *DescribeSynchronizationObjectModifyStatusResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBody) SetErrorMessage(v string) *DescribeSynchronizationObjectModifyStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBody) SetPrecheckStatus(v *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus) *DescribeSynchronizationObjectModifyStatusResponseBody {
	s.PrecheckStatus = v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBody) SetRequestId(v string) *DescribeSynchronizationObjectModifyStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBody) SetStatus(v string) *DescribeSynchronizationObjectModifyStatusResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBody) SetStructureInitializationStatus(v *DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus) *DescribeSynchronizationObjectModifyStatusResponseBody {
	s.StructureInitializationStatus = v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBody) SetSuccess(v string) *DescribeSynchronizationObjectModifyStatusResponseBody {
	s.Success = &v
	return s
}

type DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus struct {
	// The error message returned if full data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of full data synchronization. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of records that have been synchronized during full data synchronization.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of full data synchronization. Valid values:
	//
	// *   **NotStarted**: Full data synchronization is not started.
	// *   **Migrating**: Full data synchronization is in progress.
	// *   **Failed**: Full data synchronization failed.
	// *   **Finished**: Full data synchronization is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus) SetErrorMessage(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus) SetPercent(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus) SetProgress(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus) SetStatus(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyDataInitializationStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus struct {
	// The synchronization latency, in seconds.
	Delay *string `json:"Delay,omitempty" xml:"Delay,omitempty"`
	// The error message returned if incremental data synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of incremental data synchronization. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The status of incremental data synchronization. Valid values:
	//
	// *   **NotStarted**: Incremental data synchronization is not started.
	// *   **Migrating**: Incremental data synchronization is in progress.
	// *   **Failed**: Incremental data synchronization failed.
	// *   **Finished**: Incremental data synchronization is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus) SetDelay(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus {
	s.Delay = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus) SetErrorMessage(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus) SetPercent(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus) SetStatus(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyDataSynchronizationStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus struct {
	// The result of each precheck item.
	Detail []*DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Repeated"`
	// The precheck progress. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The precheck status.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus) SetDetail(v []*DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail) *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus {
	s.Detail = v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus) SetPercent(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus) SetStatus(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail struct {
	// The precheck result. Valid values:
	//
	// *   Success: The task passed the precheck.
	// *   Failed: The task failed to pass the precheck.
	CheckStatus *string `json:"CheckStatus,omitempty" xml:"CheckStatus,omitempty"`
	// The error message returned if the task failed to pass the precheck.
	//
	// >  This parameter is returned only if the return value of the **CheckStatus** parameter is **Failed**.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The name of the precheck item.
	ItemName *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	// The method to fix the precheck failure.
	//
	// >  This parameter is returned only if the return value of the **CheckStatus** parameter is Failed.
	RepairMethod *string `json:"RepairMethod,omitempty" xml:"RepairMethod,omitempty"`
}

func (s DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail) SetCheckStatus(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail {
	s.CheckStatus = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail) SetErrorMessage(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail) SetItemName(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail {
	s.ItemName = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail) SetRepairMethod(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyPrecheckStatusDetail {
	s.RepairMethod = &v
	return s
}

type DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus struct {
	// The error message returned if schema synchronization failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The progress of schema synchronization. Unit: %.
	Percent *string `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// The number of tables whose schemas have been synchronized.
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The status of schema synchronization. Valid values:
	//
	// *   **NotStarted**: Schema synchronization is not started.
	// *   **Migrating**: Schema synchronization is in progress.
	// *   **Failed**: Schema synchronization failed.
	// *   **Finished**: Schema synchronization is completed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus) SetErrorMessage(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus) SetPercent(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus {
	s.Percent = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus) SetProgress(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus {
	s.Progress = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus) SetStatus(v string) *DescribeSynchronizationObjectModifyStatusResponseBodyStructureInitializationStatus {
	s.Status = &v
	return s
}

type DescribeSynchronizationObjectModifyStatusResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeSynchronizationObjectModifyStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSynchronizationObjectModifyStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSynchronizationObjectModifyStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeSynchronizationObjectModifyStatusResponse) SetHeaders(v map[string]*string) *DescribeSynchronizationObjectModifyStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponse) SetStatusCode(v int32) *DescribeSynchronizationObjectModifyStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSynchronizationObjectModifyStatusResponse) SetBody(v *DescribeSynchronizationObjectModifyStatusResponseBody) *DescribeSynchronizationObjectModifyStatusResponse {
	s.Body = v
	return s
}

type DescribeTagKeysRequest struct {
	// The type of the tag. Valid values:
	//
	// *   **Custom**: The tag is added by a user.
	// *   **System**: The tag is added by the system.
	//
	// >  By default, if the parameter is left empty, custom tags and system tags are returned.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1. This parameter is used together with PageSize.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of tags to return on each page if the DTS instance has multiple tags. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The resource type. Set the value to **ALIYUN::DTS::INSTANCE**.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeTagKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagKeysRequest) SetCategory(v string) *DescribeTagKeysRequest {
	s.Category = &v
	return s
}

func (s *DescribeTagKeysRequest) SetPageNumber(v int32) *DescribeTagKeysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTagKeysRequest) SetPageSize(v int32) *DescribeTagKeysRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTagKeysRequest) SetRegionId(v string) *DescribeTagKeysRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTagKeysRequest) SetResourceId(v string) *DescribeTagKeysRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeTagKeysRequest) SetResourceType(v string) *DescribeTagKeysRequest {
	s.ResourceType = &v
	return s
}

type DescribeTagKeysResponseBody struct {
	// The type of the tag.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The start page of the returned pages.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of tags returned per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The key of the tag.
	TagKeys []*string `json:"TagKeys,omitempty" xml:"TagKeys,omitempty" type:"Repeated"`
	// The total number of returned tag keys.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeTagKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagKeysResponseBody) SetCategory(v string) *DescribeTagKeysResponseBody {
	s.Category = &v
	return s
}

func (s *DescribeTagKeysResponseBody) SetPageNumber(v int32) *DescribeTagKeysResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeTagKeysResponseBody) SetPageSize(v int32) *DescribeTagKeysResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeTagKeysResponseBody) SetRequestId(v string) *DescribeTagKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagKeysResponseBody) SetTagKeys(v []*string) *DescribeTagKeysResponseBody {
	s.TagKeys = v
	return s
}

func (s *DescribeTagKeysResponseBody) SetTotalCount(v int32) *DescribeTagKeysResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeTagKeysResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTagKeysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTagKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagKeysResponse) SetHeaders(v map[string]*string) *DescribeTagKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagKeysResponse) SetStatusCode(v int32) *DescribeTagKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagKeysResponse) SetBody(v *DescribeTagKeysResponseBody) *DescribeTagKeysResponse {
	s.Body = v
	return s
}

type DescribeTagValuesRequest struct {
	// The type of the tag key. Valid values:
	//
	// *   **Custom**: The tag key is created by users.
	// *   **System**: The tag key is created by the system.
	//
	// >  By default, if the parameter is left empty, both custom tag keys and system tag keys are returned.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The tag key.
	//
	// >  This parameter is required.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The page number of the start page to return for a tag key that has multiple values. The valid value ranges from 1 to the maximum value of the INTEGER data type. This parameter is often used with the PageSize parameter. Default value: 1.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of tag values to return each time for a tag key that has multiple values. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	//
	// >  If this parameter is left empty, the values of all tag keys of the current user are returned.
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The resource type. Set the value to **ALIYUN::DTS::INSTANCE**.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeTagValuesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagValuesRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagValuesRequest) SetCategory(v string) *DescribeTagValuesRequest {
	s.Category = &v
	return s
}

func (s *DescribeTagValuesRequest) SetKey(v string) *DescribeTagValuesRequest {
	s.Key = &v
	return s
}

func (s *DescribeTagValuesRequest) SetPageNumber(v int32) *DescribeTagValuesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTagValuesRequest) SetPageSize(v int32) *DescribeTagValuesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTagValuesRequest) SetRegionId(v string) *DescribeTagValuesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTagValuesRequest) SetResourceId(v string) *DescribeTagValuesRequest {
	s.ResourceId = &v
	return s
}

func (s *DescribeTagValuesRequest) SetResourceType(v string) *DescribeTagValuesRequest {
	s.ResourceType = &v
	return s
}

type DescribeTagValuesResponseBody struct {
	// The type of the tag key.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The start page of the returned pages.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of tag values returned on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The tag values that are associated with the tag key.
	TagValues []*string `json:"TagValues,omitempty" xml:"TagValues,omitempty" type:"Repeated"`
	// The total number of tag values that are associated with the tag key.
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeTagValuesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagValuesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagValuesResponseBody) SetCategory(v string) *DescribeTagValuesResponseBody {
	s.Category = &v
	return s
}

func (s *DescribeTagValuesResponseBody) SetPageNumber(v int32) *DescribeTagValuesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeTagValuesResponseBody) SetPageSize(v int32) *DescribeTagValuesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeTagValuesResponseBody) SetRequestId(v string) *DescribeTagValuesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagValuesResponseBody) SetTagValues(v []*string) *DescribeTagValuesResponseBody {
	s.TagValues = v
	return s
}

func (s *DescribeTagValuesResponseBody) SetTotalCount(v int32) *DescribeTagValuesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeTagValuesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTagValuesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTagValuesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagValuesResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagValuesResponse) SetHeaders(v map[string]*string) *DescribeTagValuesResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagValuesResponse) SetStatusCode(v int32) *DescribeTagValuesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagValuesResponse) SetBody(v *DescribeTagValuesResponseBody) *DescribeTagValuesResponse {
	s.Body = v
	return s
}

type InitDtsRdsInstanceRequest struct {
	// The ID of the data synchronization task.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// If the node is a self-managed MySQL database that is connected over CEN, you must specify the ID of the CEN instance.
	//
	// > You must specify the **EndpointRegion** and **EndpointInstanceId** parameters or the EndpointCenId parameter based on the type of the node.
	EndpointCenId *string `json:"EndpointCenId,omitempty" xml:"EndpointCenId,omitempty"`
	// If the node is an ApsaraDB RDS for MySQL instance, you must specify the ID of the ApsaraDB RDS for MySQL instance.
	//
	// > *   You must also specify the **EndpointRegion** parameter.
	// >*   You must specify the EndpointInstanceId parameter or the **EndpointCenId** parameter based on the type of the node.
	EndpointInstanceId *string `json:"EndpointInstanceId,omitempty" xml:"EndpointInstanceId,omitempty"`
	// The type of the node. Valid values:
	//
	// *   **RDS**: an ApsaraDB RDS for MySQL instance
	// *   **CEN**: a self-managed MySQL database that is connected over CEN
	EndpointInstanceType *string `json:"EndpointInstanceType,omitempty" xml:"EndpointInstanceType,omitempty"`
	// If the node is an ApsaraDB RDS for MySQL instance, you must specify the region in which the ApsaraDB RDS for MySQL instance resides.
	//
	// > *   You must also specify the **EndpointInstanceId** parameter.
	// >*   You must specify the EndpointRegion parameter or the **EndpointCenId** parameter based on the type of the node.
	EndpointRegion *string `json:"EndpointRegion,omitempty" xml:"EndpointRegion,omitempty"`
	// The ID of the region in which the active geo-redundancy database cluster resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s InitDtsRdsInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s InitDtsRdsInstanceRequest) GoString() string {
	return s.String()
}

func (s *InitDtsRdsInstanceRequest) SetDtsInstanceId(v string) *InitDtsRdsInstanceRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *InitDtsRdsInstanceRequest) SetEndpointCenId(v string) *InitDtsRdsInstanceRequest {
	s.EndpointCenId = &v
	return s
}

func (s *InitDtsRdsInstanceRequest) SetEndpointInstanceId(v string) *InitDtsRdsInstanceRequest {
	s.EndpointInstanceId = &v
	return s
}

func (s *InitDtsRdsInstanceRequest) SetEndpointInstanceType(v string) *InitDtsRdsInstanceRequest {
	s.EndpointInstanceType = &v
	return s
}

func (s *InitDtsRdsInstanceRequest) SetEndpointRegion(v string) *InitDtsRdsInstanceRequest {
	s.EndpointRegion = &v
	return s
}

func (s *InitDtsRdsInstanceRequest) SetRegionId(v string) *InitDtsRdsInstanceRequest {
	s.RegionId = &v
	return s
}

type InitDtsRdsInstanceResponseBody struct {
	// The built-in account that is used by DTS to connect to the node.
	AdminAccount *string `json:"AdminAccount,omitempty" xml:"AdminAccount,omitempty"`
	// The password of the built-in account.
	AdminPassword *string `json:"AdminPassword,omitempty" xml:"AdminPassword,omitempty"`
	// The error code returned if the request fails.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request fails.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InitDtsRdsInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InitDtsRdsInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *InitDtsRdsInstanceResponseBody) SetAdminAccount(v string) *InitDtsRdsInstanceResponseBody {
	s.AdminAccount = &v
	return s
}

func (s *InitDtsRdsInstanceResponseBody) SetAdminPassword(v string) *InitDtsRdsInstanceResponseBody {
	s.AdminPassword = &v
	return s
}

func (s *InitDtsRdsInstanceResponseBody) SetErrCode(v string) *InitDtsRdsInstanceResponseBody {
	s.ErrCode = &v
	return s
}

func (s *InitDtsRdsInstanceResponseBody) SetErrMessage(v string) *InitDtsRdsInstanceResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *InitDtsRdsInstanceResponseBody) SetHttpStatusCode(v string) *InitDtsRdsInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *InitDtsRdsInstanceResponseBody) SetRequestId(v string) *InitDtsRdsInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *InitDtsRdsInstanceResponseBody) SetSuccess(v string) *InitDtsRdsInstanceResponseBody {
	s.Success = &v
	return s
}

type InitDtsRdsInstanceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *InitDtsRdsInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InitDtsRdsInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s InitDtsRdsInstanceResponse) GoString() string {
	return s.String()
}

func (s *InitDtsRdsInstanceResponse) SetHeaders(v map[string]*string) *InitDtsRdsInstanceResponse {
	s.Headers = v
	return s
}

func (s *InitDtsRdsInstanceResponse) SetStatusCode(v int32) *InitDtsRdsInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *InitDtsRdsInstanceResponse) SetBody(v *InitDtsRdsInstanceResponseBody) *InitDtsRdsInstanceResponse {
	s.Body = v
	return s
}

type ListDedicatedClusterRequest struct {
	// The basis on which the retrieved entries are sorted if multiple DTS dedicated clusters are returned. Valid values:
	//
	// *   **gmtCreated**: the time when a cluster was created.
	// *   **orderCount**: the number of nodes in a cluster.
	OrderColumn *string `json:"OrderColumn,omitempty" xml:"OrderColumn,omitempty"`
	// The order in which you want to sort the retrieved entries. Valid values:
	//
	// *   asc: sorts the retrieved entries in ascending order. This is the default value.
	// *   desc: sorts the retrieved entries in descending order.
	OrderDirection *string `json:"OrderDirection,omitempty" xml:"OrderDirection,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The number of the page to return. The value of this parameter must be an integer that is greater than 0. Default value: **1**.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of clusters to return on each page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The content of the query condition.
	//
	// >  You must set the **Type parameter** to specify the type of the query condition.
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// The ID of the region.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the cluster. Valid values:
	//
	// *   **init**: The cluster is being initialized.
	// *   **schedule**: The cluster is pending scheduling.
	// *   **running**: The cluster is running.
	// *   **upgrade**: The cluster is being upgraded.
	// *   **downgrade**: The cluster is being downgraded.
	// *   **locked**: The cluster is locked.
	// *   **releasing**: The cluster is being released.
	// *   **released**: The cluster is released.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The type of the query condition. Valid values:
	//
	// *   **NAME**: the name of the cluster.
	// *   **INSTANCE**: the ID of a cluster instance.
	// *   **DEDICAETEDCLUSTERID**: the ID of a dedicated cluster.
	//
	// >  You must specify the query condition by using the **Params** parameter.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDedicatedClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDedicatedClusterRequest) GoString() string {
	return s.String()
}

func (s *ListDedicatedClusterRequest) SetOrderColumn(v string) *ListDedicatedClusterRequest {
	s.OrderColumn = &v
	return s
}

func (s *ListDedicatedClusterRequest) SetOrderDirection(v string) *ListDedicatedClusterRequest {
	s.OrderDirection = &v
	return s
}

func (s *ListDedicatedClusterRequest) SetOwnerId(v string) *ListDedicatedClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDedicatedClusterRequest) SetPageNumber(v int32) *ListDedicatedClusterRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDedicatedClusterRequest) SetPageSize(v int32) *ListDedicatedClusterRequest {
	s.PageSize = &v
	return s
}

func (s *ListDedicatedClusterRequest) SetParams(v string) *ListDedicatedClusterRequest {
	s.Params = &v
	return s
}

func (s *ListDedicatedClusterRequest) SetRegionId(v string) *ListDedicatedClusterRequest {
	s.RegionId = &v
	return s
}

func (s *ListDedicatedClusterRequest) SetState(v string) *ListDedicatedClusterRequest {
	s.State = &v
	return s
}

func (s *ListDedicatedClusterRequest) SetType(v string) *ListDedicatedClusterRequest {
	s.Type = &v
	return s
}

type ListDedicatedClusterResponseBody struct {
	// The statuses of all clusters.
	DedicatedClusterStatusList *ListDedicatedClusterResponseBodyDedicatedClusterStatusList `json:"DedicatedClusterStatusList,omitempty" xml:"DedicatedClusterStatusList,omitempty" type:"Struct"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The page number of the returned page. The value must be an integer that is greater than 0. Default value: 1.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	PageRecordCount *int32 `json:"PageRecordCount,omitempty" xml:"PageRecordCount,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of clusters that meet the query condition.
	TotalRecordCount *int32 `json:"TotalRecordCount,omitempty" xml:"TotalRecordCount,omitempty"`
}

func (s ListDedicatedClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDedicatedClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ListDedicatedClusterResponseBody) SetDedicatedClusterStatusList(v *ListDedicatedClusterResponseBodyDedicatedClusterStatusList) *ListDedicatedClusterResponseBody {
	s.DedicatedClusterStatusList = v
	return s
}

func (s *ListDedicatedClusterResponseBody) SetErrCode(v string) *ListDedicatedClusterResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ListDedicatedClusterResponseBody) SetErrMessage(v string) *ListDedicatedClusterResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ListDedicatedClusterResponseBody) SetHttpStatusCode(v string) *ListDedicatedClusterResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ListDedicatedClusterResponseBody) SetPageNumber(v int32) *ListDedicatedClusterResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListDedicatedClusterResponseBody) SetPageRecordCount(v int32) *ListDedicatedClusterResponseBody {
	s.PageRecordCount = &v
	return s
}

func (s *ListDedicatedClusterResponseBody) SetRequestId(v string) *ListDedicatedClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDedicatedClusterResponseBody) SetSuccess(v string) *ListDedicatedClusterResponseBody {
	s.Success = &v
	return s
}

func (s *ListDedicatedClusterResponseBody) SetTotalRecordCount(v int32) *ListDedicatedClusterResponseBody {
	s.TotalRecordCount = &v
	return s
}

type ListDedicatedClusterResponseBodyDedicatedClusterStatusList struct {
	DedicatedClusterStatus []*ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus `json:"DedicatedClusterStatus,omitempty" xml:"DedicatedClusterStatus,omitempty" type:"Repeated"`
}

func (s ListDedicatedClusterResponseBodyDedicatedClusterStatusList) String() string {
	return tea.Prettify(s)
}

func (s ListDedicatedClusterResponseBodyDedicatedClusterStatusList) GoString() string {
	return s.String()
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusList) SetDedicatedClusterStatus(v []*ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) *ListDedicatedClusterResponseBodyDedicatedClusterStatusList {
	s.DedicatedClusterStatus = v
	return s
}

type ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus struct {
	// The CPU utilization, in percentage.
	CpuUtilization *int64 `json:"CpuUtilization,omitempty" xml:"CpuUtilization,omitempty"`
	// The ID of the cluster.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The name of the cluster.
	DedicatedClusterName *string `json:"DedicatedClusterName,omitempty" xml:"DedicatedClusterName,omitempty"`
	// The disk usage.
	DiskUtilization *int64 `json:"DiskUtilization,omitempty" xml:"DiskUtilization,omitempty"`
	// The ID of the DTS instance.
	DtsInstanceID *string `json:"DtsInstanceID,omitempty" xml:"DtsInstanceID,omitempty"`
	// The number of DTS units (DUs).
	Du *int64 `json:"Du,omitempty" xml:"Du,omitempty"`
	// The DU usage, in percentage.
	DuUtilization *int64 `json:"DuUtilization,omitempty" xml:"DuUtilization,omitempty"`
	// The time when the cluster was created.
	GmtCreated *int64 `json:"GmtCreated,omitempty" xml:"GmtCreated,omitempty"`
	// The memory usage.
	MemUtilization *int64 `json:"MemUtilization,omitempty" xml:"MemUtilization,omitempty"`
	// The number of nodes in the cluster.
	NodeCount *int64 `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	// The number of over-provisioned DUs.
	OversoldDu *int64 `json:"OversoldDu,omitempty" xml:"OversoldDu,omitempty"`
	// The ID of the region in which the DTS instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the cluster. Valid values:
	//
	// *   **init**: The cluster is being initialized.
	// *   **schedule**: The cluster is pending scheduling.
	// *   **running**: The cluster is running.
	// *   **upgrade**: The cluster is being upgraded.
	// *   **downgrade**: The cluster is being downgraded.
	// *   **locked**: The cluster is locked.
	// *   **releasing**: The cluster is being released.
	// *   **released**: The cluster is released.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The total number of CPU cores.
	TotalCpuCore *int64 `json:"TotalCpuCore,omitempty" xml:"TotalCpuCore,omitempty"`
	// The total disk capacity. Unit: GB.
	TotalDiskGBSize *int64 `json:"TotalDiskGBSize,omitempty" xml:"TotalDiskGBSize,omitempty"`
	// The total memory capacity. Unit: GB.
	TotalMemGBSize *int64 `json:"TotalMemGBSize,omitempty" xml:"TotalMemGBSize,omitempty"`
	// The number of used CPU cores.
	UsedCpuCore *int64 `json:"UsedCpuCore,omitempty" xml:"UsedCpuCore,omitempty"`
	// The used disk capacity. Unit: GB.
	UsedDiskGBSize *int64 `json:"UsedDiskGBSize,omitempty" xml:"UsedDiskGBSize,omitempty"`
	// The number of used DUs.
	UsedDu *int64 `json:"UsedDu,omitempty" xml:"UsedDu,omitempty"`
	// The used memory capacity. Unit: GB.
	UsedMemGBSize *int64 `json:"UsedMemGBSize,omitempty" xml:"UsedMemGBSize,omitempty"`
}

func (s ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) String() string {
	return tea.Prettify(s)
}

func (s ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) GoString() string {
	return s.String()
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetCpuUtilization(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.CpuUtilization = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetDedicatedClusterId(v string) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.DedicatedClusterId = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetDedicatedClusterName(v string) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.DedicatedClusterName = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetDiskUtilization(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.DiskUtilization = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetDtsInstanceID(v string) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.DtsInstanceID = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetDu(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.Du = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetDuUtilization(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.DuUtilization = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetGmtCreated(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.GmtCreated = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetMemUtilization(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.MemUtilization = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetNodeCount(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.NodeCount = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetOversoldDu(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.OversoldDu = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetRegionId(v string) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.RegionId = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetState(v string) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.State = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetTotalCpuCore(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.TotalCpuCore = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetTotalDiskGBSize(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.TotalDiskGBSize = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetTotalMemGBSize(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.TotalMemGBSize = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetUsedCpuCore(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.UsedCpuCore = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetUsedDiskGBSize(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.UsedDiskGBSize = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetUsedDu(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.UsedDu = &v
	return s
}

func (s *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus) SetUsedMemGBSize(v int64) *ListDedicatedClusterResponseBodyDedicatedClusterStatusListDedicatedClusterStatus {
	s.UsedMemGBSize = &v
	return s
}

type ListDedicatedClusterResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListDedicatedClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDedicatedClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDedicatedClusterResponse) GoString() string {
	return s.String()
}

func (s *ListDedicatedClusterResponse) SetHeaders(v map[string]*string) *ListDedicatedClusterResponse {
	s.Headers = v
	return s
}

func (s *ListDedicatedClusterResponse) SetStatusCode(v int32) *ListDedicatedClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDedicatedClusterResponse) SetBody(v *ListDedicatedClusterResponseBody) *ListDedicatedClusterResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	// The query token.
	//
	// >  If a query does not return all results, you can specify the returned **NextToken** parameter in the next query to obtain more results.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the region where the data migration, data synchronization, or change tracking instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId   *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.
	ResourceType *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	// The tag key.
	//
	// >
	// *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag. You can specify 1 to 20 tag keys at a time.
	// *   You must specify at least one of the **ResourceId.N** and Tag.N.Key parameters. The parameters cannot be empty strings.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// >
	// *   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag. You can specify 1 to 20 tag values at a time.
	// *   This parameter can be an empty string.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The query token.
	//
	// >  If a query does not return all results, you can specify the returned **NextToken** parameter in the next query to obtain more results.
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The collection of tags.
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetErrCode(v string) *ListTagResourcesResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetErrMessage(v string) *ListTagResourcesResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetSuccess(v bool) *ListTagResourcesResponseBody {
	s.Success = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	// The ID of the DTS instance.
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag key.
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value that corresponds to the tag key.
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ModifyConsumerChannelRequest struct {
	// The ID of the consumer group. You can call the [DescribeConsumerChannel](~~264169~~) operation to query the consumer group ID.
	ConsumerGroupId *string `json:"ConsumerGroupId,omitempty" xml:"ConsumerGroupId,omitempty"`
	// The name of the consumer group. The name cannot exceed 128 characters in length. We recommend that you use an informative name for easy identification.
	ConsumerGroupName *string `json:"ConsumerGroupName,omitempty" xml:"ConsumerGroupName,omitempty"`
	// The new password of the consumer group.
	//
	// *   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
	// *   A password must be 8 to 32 characters in length.
	ConsumerGroupPassword *string `json:"ConsumerGroupPassword,omitempty" xml:"ConsumerGroupPassword,omitempty"`
	// The new username of the consumer group.
	//
	// *   A username can contain one or more of the following character types: uppercase letters, lowercase letters, digits, and underscores (\_).
	// *   A username cannot exceed 16 characters in length.
	ConsumerGroupUserName *string `json:"ConsumerGroupUserName,omitempty" xml:"ConsumerGroupUserName,omitempty"`
	// The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	//
	// >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	//
	// >  You must specify at least one of the **DtsInstanceId** and **DtsJobId** parameters.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyConsumerChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyConsumerChannelRequest) GoString() string {
	return s.String()
}

func (s *ModifyConsumerChannelRequest) SetConsumerGroupId(v string) *ModifyConsumerChannelRequest {
	s.ConsumerGroupId = &v
	return s
}

func (s *ModifyConsumerChannelRequest) SetConsumerGroupName(v string) *ModifyConsumerChannelRequest {
	s.ConsumerGroupName = &v
	return s
}

func (s *ModifyConsumerChannelRequest) SetConsumerGroupPassword(v string) *ModifyConsumerChannelRequest {
	s.ConsumerGroupPassword = &v
	return s
}

func (s *ModifyConsumerChannelRequest) SetConsumerGroupUserName(v string) *ModifyConsumerChannelRequest {
	s.ConsumerGroupUserName = &v
	return s
}

func (s *ModifyConsumerChannelRequest) SetDtsInstanceId(v string) *ModifyConsumerChannelRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ModifyConsumerChannelRequest) SetDtsJobId(v string) *ModifyConsumerChannelRequest {
	s.DtsJobId = &v
	return s
}

func (s *ModifyConsumerChannelRequest) SetRegionId(v string) *ModifyConsumerChannelRequest {
	s.RegionId = &v
	return s
}

type ModifyConsumerChannelResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyConsumerChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyConsumerChannelResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyConsumerChannelResponseBody) SetErrCode(v string) *ModifyConsumerChannelResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyConsumerChannelResponseBody) SetErrMessage(v string) *ModifyConsumerChannelResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyConsumerChannelResponseBody) SetHttpStatusCode(v string) *ModifyConsumerChannelResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyConsumerChannelResponseBody) SetRequestId(v string) *ModifyConsumerChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyConsumerChannelResponseBody) SetSuccess(v string) *ModifyConsumerChannelResponseBody {
	s.Success = &v
	return s
}

type ModifyConsumerChannelResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyConsumerChannelResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyConsumerChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyConsumerChannelResponse) GoString() string {
	return s.String()
}

func (s *ModifyConsumerChannelResponse) SetHeaders(v map[string]*string) *ModifyConsumerChannelResponse {
	s.Headers = v
	return s
}

func (s *ModifyConsumerChannelResponse) SetStatusCode(v int32) *ModifyConsumerChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyConsumerChannelResponse) SetBody(v *ModifyConsumerChannelResponseBody) *ModifyConsumerChannelResponse {
	s.Body = v
	return s
}

type ModifyConsumerGroupPasswordRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The ID of the consumer group.
	//
	// You can call the [DescribeConsumerGroup](~~122886~~) operation to query the consumer group ID.
	ConsumerGroupID *string `json:"ConsumerGroupID,omitempty" xml:"ConsumerGroupID,omitempty"`
	// The name of the consumer group. You can call the [DescribeConsumerGroup](~~122886~~) operation to query the consumer group name.
	ConsumerGroupName *string `json:"ConsumerGroupName,omitempty" xml:"ConsumerGroupName,omitempty"`
	// The current password of the consumer group.
	ConsumerGroupPassword *string `json:"ConsumerGroupPassword,omitempty" xml:"ConsumerGroupPassword,omitempty"`
	// The username of the consumer group. You can call the [DescribeConsumerGroup](~~122886~~) operation to query the username.
	ConsumerGroupUserName *string `json:"ConsumerGroupUserName,omitempty" xml:"ConsumerGroupUserName,omitempty"`
	OwnerId               *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
	// The new password of the consumer group.
	//
	// *   A password must contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
	// *   A password must be 8 to 32 characters in length.
	ConsumerGroupNewPassword *string `json:"consumerGroupNewPassword,omitempty" xml:"consumerGroupNewPassword,omitempty"`
}

func (s ModifyConsumerGroupPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyConsumerGroupPasswordRequest) GoString() string {
	return s.String()
}

func (s *ModifyConsumerGroupPasswordRequest) SetAccountId(v string) *ModifyConsumerGroupPasswordRequest {
	s.AccountId = &v
	return s
}

func (s *ModifyConsumerGroupPasswordRequest) SetConsumerGroupID(v string) *ModifyConsumerGroupPasswordRequest {
	s.ConsumerGroupID = &v
	return s
}

func (s *ModifyConsumerGroupPasswordRequest) SetConsumerGroupName(v string) *ModifyConsumerGroupPasswordRequest {
	s.ConsumerGroupName = &v
	return s
}

func (s *ModifyConsumerGroupPasswordRequest) SetConsumerGroupPassword(v string) *ModifyConsumerGroupPasswordRequest {
	s.ConsumerGroupPassword = &v
	return s
}

func (s *ModifyConsumerGroupPasswordRequest) SetConsumerGroupUserName(v string) *ModifyConsumerGroupPasswordRequest {
	s.ConsumerGroupUserName = &v
	return s
}

func (s *ModifyConsumerGroupPasswordRequest) SetOwnerId(v string) *ModifyConsumerGroupPasswordRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyConsumerGroupPasswordRequest) SetRegionId(v string) *ModifyConsumerGroupPasswordRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyConsumerGroupPasswordRequest) SetSubscriptionInstanceId(v string) *ModifyConsumerGroupPasswordRequest {
	s.SubscriptionInstanceId = &v
	return s
}

func (s *ModifyConsumerGroupPasswordRequest) SetConsumerGroupNewPassword(v string) *ModifyConsumerGroupPasswordRequest {
	s.ConsumerGroupNewPassword = &v
	return s
}

type ModifyConsumerGroupPasswordResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyConsumerGroupPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyConsumerGroupPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyConsumerGroupPasswordResponseBody) SetErrCode(v string) *ModifyConsumerGroupPasswordResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyConsumerGroupPasswordResponseBody) SetErrMessage(v string) *ModifyConsumerGroupPasswordResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyConsumerGroupPasswordResponseBody) SetRequestId(v string) *ModifyConsumerGroupPasswordResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyConsumerGroupPasswordResponseBody) SetSuccess(v string) *ModifyConsumerGroupPasswordResponseBody {
	s.Success = &v
	return s
}

type ModifyConsumerGroupPasswordResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyConsumerGroupPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyConsumerGroupPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyConsumerGroupPasswordResponse) GoString() string {
	return s.String()
}

func (s *ModifyConsumerGroupPasswordResponse) SetHeaders(v map[string]*string) *ModifyConsumerGroupPasswordResponse {
	s.Headers = v
	return s
}

func (s *ModifyConsumerGroupPasswordResponse) SetStatusCode(v int32) *ModifyConsumerGroupPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyConsumerGroupPasswordResponse) SetBody(v *ModifyConsumerGroupPasswordResponseBody) *ModifyConsumerGroupPasswordResponse {
	s.Body = v
	return s
}

type ModifyConsumptionTimestampRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The consumption checkpoint. The format is *yyyy-MM-dd*T*HH:mm:ss*Z. The time is displayed in UTC.
	ConsumptionTimestamp *string `json:"ConsumptionTimestamp,omitempty" xml:"ConsumptionTimestamp,omitempty"`
	OwnerId              *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the **DescribeSubscriptionInstances** operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
}

func (s ModifyConsumptionTimestampRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyConsumptionTimestampRequest) GoString() string {
	return s.String()
}

func (s *ModifyConsumptionTimestampRequest) SetAccountId(v string) *ModifyConsumptionTimestampRequest {
	s.AccountId = &v
	return s
}

func (s *ModifyConsumptionTimestampRequest) SetConsumptionTimestamp(v string) *ModifyConsumptionTimestampRequest {
	s.ConsumptionTimestamp = &v
	return s
}

func (s *ModifyConsumptionTimestampRequest) SetOwnerId(v string) *ModifyConsumptionTimestampRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyConsumptionTimestampRequest) SetRegionId(v string) *ModifyConsumptionTimestampRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyConsumptionTimestampRequest) SetSubscriptionInstanceId(v string) *ModifyConsumptionTimestampRequest {
	s.SubscriptionInstanceId = &v
	return s
}

type ModifyConsumptionTimestampResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyConsumptionTimestampResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyConsumptionTimestampResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyConsumptionTimestampResponseBody) SetErrCode(v string) *ModifyConsumptionTimestampResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyConsumptionTimestampResponseBody) SetErrMessage(v string) *ModifyConsumptionTimestampResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyConsumptionTimestampResponseBody) SetRequestId(v string) *ModifyConsumptionTimestampResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyConsumptionTimestampResponseBody) SetSuccess(v string) *ModifyConsumptionTimestampResponseBody {
	s.Success = &v
	return s
}

type ModifyConsumptionTimestampResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyConsumptionTimestampResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyConsumptionTimestampResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyConsumptionTimestampResponse) GoString() string {
	return s.String()
}

func (s *ModifyConsumptionTimestampResponse) SetHeaders(v map[string]*string) *ModifyConsumptionTimestampResponse {
	s.Headers = v
	return s
}

func (s *ModifyConsumptionTimestampResponse) SetStatusCode(v int32) *ModifyConsumptionTimestampResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyConsumptionTimestampResponse) SetBody(v *ModifyConsumptionTimestampResponseBody) *ModifyConsumptionTimestampResponse {
	s.Body = v
	return s
}

type ModifyDedicatedClusterRequest struct {
	// The ID of the cluster.
	//
	// >  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The name of the cluster.
	DedicatedClusterName *string `json:"DedicatedClusterName,omitempty" xml:"DedicatedClusterName,omitempty"`
	// The ID of the instance.
	//
	// >  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The overcommit ratio. Unit: %.
	OversoldRatio *int32  `json:"OversoldRatio,omitempty" xml:"OversoldRatio,omitempty"`
	OwnerId       *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region in which the Data Transmission Service (DTS) instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDedicatedClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedClusterRequest) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedClusterRequest) SetDedicatedClusterId(v string) *ModifyDedicatedClusterRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *ModifyDedicatedClusterRequest) SetDedicatedClusterName(v string) *ModifyDedicatedClusterRequest {
	s.DedicatedClusterName = &v
	return s
}

func (s *ModifyDedicatedClusterRequest) SetInstanceId(v string) *ModifyDedicatedClusterRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyDedicatedClusterRequest) SetOversoldRatio(v int32) *ModifyDedicatedClusterRequest {
	s.OversoldRatio = &v
	return s
}

func (s *ModifyDedicatedClusterRequest) SetOwnerId(v string) *ModifyDedicatedClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDedicatedClusterRequest) SetRegionId(v string) *ModifyDedicatedClusterRequest {
	s.RegionId = &v
	return s
}

type ModifyDedicatedClusterResponseBody struct {
	// The ID of the cluster.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyDedicatedClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedClusterResponseBody) SetDedicatedClusterId(v string) *ModifyDedicatedClusterResponseBody {
	s.DedicatedClusterId = &v
	return s
}

func (s *ModifyDedicatedClusterResponseBody) SetErrCode(v string) *ModifyDedicatedClusterResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyDedicatedClusterResponseBody) SetErrMessage(v string) *ModifyDedicatedClusterResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyDedicatedClusterResponseBody) SetHttpStatusCode(v string) *ModifyDedicatedClusterResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyDedicatedClusterResponseBody) SetRequestId(v string) *ModifyDedicatedClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDedicatedClusterResponseBody) SetSuccess(v string) *ModifyDedicatedClusterResponseBody {
	s.Success = &v
	return s
}

type ModifyDedicatedClusterResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDedicatedClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDedicatedClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDedicatedClusterResponse) GoString() string {
	return s.String()
}

func (s *ModifyDedicatedClusterResponse) SetHeaders(v map[string]*string) *ModifyDedicatedClusterResponse {
	s.Headers = v
	return s
}

func (s *ModifyDedicatedClusterResponse) SetStatusCode(v int32) *ModifyDedicatedClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDedicatedClusterResponse) SetBody(v *ModifyDedicatedClusterResponseBody) *ModifyDedicatedClusterResponse {
	s.Body = v
	return s
}

type ModifyDtsJobRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken         *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DataInitialization  *bool   `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	DataSynchronization *bool   `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// The objects of the data synchronization task after modification. The value is a JSON string. For more information, see [Objects of DTS tasks](~~209545~~).
	//
	// >  Before you call the ModifyDtsJob operation, we recommend that you call the [DescribeDtsJobDetail](~~208925~~) to query the current objects of the data synchronization task. Then, you can specify the new objects based on your business requirements. For example, if the current objects are Table A and Table B and you need to add Table C, you must specify Table A, Table B, and Table C for this parameter.
	DbList map[string]interface{} `json:"DbList,omitempty" xml:"DbList,omitempty"`
	// The ID of the data synchronization instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The operator that is related to the extract, transform, and load (ETL) feature and dedicated to T+1 business.
	EtlOperatorColumnReference *string `json:"EtlOperatorColumnReference,omitempty" xml:"EtlOperatorColumnReference,omitempty"`
	// The endpoint of the Object Storage Service (OSS) bucket in which the files to be synchronized are stored.
	FileOssUrl *string `json:"FileOssUrl,omitempty" xml:"FileOssUrl,omitempty"`
	// The name of the table to be filtered.
	FilterTableName *string `json:"FilterTableName,omitempty" xml:"FilterTableName,omitempty"`
	// The method that is used to modify the data synchronization task. If you do not specify the parameter, the objects of the data synchronization task are modified by default. If you specify UPDATE_RESERVED for the parameter, the reserved parameters are modified.
	ModifyTypeEnum *string `json:"ModifyTypeEnum,omitempty" xml:"ModifyTypeEnum,omitempty"`
	// The ID of the region in which the data synchronization instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The reserved parameters of the data synchronization task. You can add reserved parameters instead of overwriting the existing reserved parameters. The value of the parameter is a MAP JSON string. You can specify this parameter to meet special requirements, such as specifying whether to automatically start the precheck of the data synchronization task. For more information, see [MigrationReserved](~~176470~~).
	Reserved                *string `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StructureInitialization *bool   `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >
	// *   Default value: **Forward**.
	// *   This parameter is required only if the topology of the data synchronization instance is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s ModifyDtsJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobRequest) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobRequest) SetClientToken(v string) *ModifyDtsJobRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDtsJobRequest) SetDataInitialization(v bool) *ModifyDtsJobRequest {
	s.DataInitialization = &v
	return s
}

func (s *ModifyDtsJobRequest) SetDataSynchronization(v bool) *ModifyDtsJobRequest {
	s.DataSynchronization = &v
	return s
}

func (s *ModifyDtsJobRequest) SetDbList(v map[string]interface{}) *ModifyDtsJobRequest {
	s.DbList = v
	return s
}

func (s *ModifyDtsJobRequest) SetDtsInstanceId(v string) *ModifyDtsJobRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ModifyDtsJobRequest) SetEtlOperatorColumnReference(v string) *ModifyDtsJobRequest {
	s.EtlOperatorColumnReference = &v
	return s
}

func (s *ModifyDtsJobRequest) SetFileOssUrl(v string) *ModifyDtsJobRequest {
	s.FileOssUrl = &v
	return s
}

func (s *ModifyDtsJobRequest) SetFilterTableName(v string) *ModifyDtsJobRequest {
	s.FilterTableName = &v
	return s
}

func (s *ModifyDtsJobRequest) SetModifyTypeEnum(v string) *ModifyDtsJobRequest {
	s.ModifyTypeEnum = &v
	return s
}

func (s *ModifyDtsJobRequest) SetRegionId(v string) *ModifyDtsJobRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDtsJobRequest) SetReserved(v string) *ModifyDtsJobRequest {
	s.Reserved = &v
	return s
}

func (s *ModifyDtsJobRequest) SetStructureInitialization(v bool) *ModifyDtsJobRequest {
	s.StructureInitialization = &v
	return s
}

func (s *ModifyDtsJobRequest) SetSynchronizationDirection(v string) *ModifyDtsJobRequest {
	s.SynchronizationDirection = &v
	return s
}

type ModifyDtsJobAdvanceRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken         *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DataInitialization  *bool   `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	DataSynchronization *bool   `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// The objects of the data synchronization task after modification. The value is a JSON string. For more information, see [Objects of DTS tasks](~~209545~~).
	//
	// >  Before you call the ModifyDtsJob operation, we recommend that you call the [DescribeDtsJobDetail](~~208925~~) to query the current objects of the data synchronization task. Then, you can specify the new objects based on your business requirements. For example, if the current objects are Table A and Table B and you need to add Table C, you must specify Table A, Table B, and Table C for this parameter.
	DbList map[string]interface{} `json:"DbList,omitempty" xml:"DbList,omitempty"`
	// The ID of the data synchronization instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The operator that is related to the extract, transform, and load (ETL) feature and dedicated to T+1 business.
	EtlOperatorColumnReference *string `json:"EtlOperatorColumnReference,omitempty" xml:"EtlOperatorColumnReference,omitempty"`
	// The endpoint of the Object Storage Service (OSS) bucket in which the files to be synchronized are stored.
	FileOssUrlObject io.Reader `json:"FileOssUrl,omitempty" xml:"FileOssUrl,omitempty"`
	// The name of the table to be filtered.
	FilterTableName *string `json:"FilterTableName,omitempty" xml:"FilterTableName,omitempty"`
	// The method that is used to modify the data synchronization task. If you do not specify the parameter, the objects of the data synchronization task are modified by default. If you specify UPDATE_RESERVED for the parameter, the reserved parameters are modified.
	ModifyTypeEnum *string `json:"ModifyTypeEnum,omitempty" xml:"ModifyTypeEnum,omitempty"`
	// The ID of the region in which the data synchronization instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The reserved parameters of the data synchronization task. You can add reserved parameters instead of overwriting the existing reserved parameters. The value of the parameter is a MAP JSON string. You can specify this parameter to meet special requirements, such as specifying whether to automatically start the precheck of the data synchronization task. For more information, see [MigrationReserved](~~176470~~).
	Reserved                *string `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StructureInitialization *bool   `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >
	// *   Default value: **Forward**.
	// *   This parameter is required only if the topology of the data synchronization instance is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s ModifyDtsJobAdvanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobAdvanceRequest) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobAdvanceRequest) SetClientToken(v string) *ModifyDtsJobAdvanceRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetDataInitialization(v bool) *ModifyDtsJobAdvanceRequest {
	s.DataInitialization = &v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetDataSynchronization(v bool) *ModifyDtsJobAdvanceRequest {
	s.DataSynchronization = &v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetDbList(v map[string]interface{}) *ModifyDtsJobAdvanceRequest {
	s.DbList = v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetDtsInstanceId(v string) *ModifyDtsJobAdvanceRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetEtlOperatorColumnReference(v string) *ModifyDtsJobAdvanceRequest {
	s.EtlOperatorColumnReference = &v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetFileOssUrlObject(v io.Reader) *ModifyDtsJobAdvanceRequest {
	s.FileOssUrlObject = v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetFilterTableName(v string) *ModifyDtsJobAdvanceRequest {
	s.FilterTableName = &v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetModifyTypeEnum(v string) *ModifyDtsJobAdvanceRequest {
	s.ModifyTypeEnum = &v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetRegionId(v string) *ModifyDtsJobAdvanceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetReserved(v string) *ModifyDtsJobAdvanceRequest {
	s.Reserved = &v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetStructureInitialization(v bool) *ModifyDtsJobAdvanceRequest {
	s.StructureInitialization = &v
	return s
}

func (s *ModifyDtsJobAdvanceRequest) SetSynchronizationDirection(v string) *ModifyDtsJobAdvanceRequest {
	s.SynchronizationDirection = &v
	return s
}

type ModifyDtsJobShrinkRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken         *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	DataInitialization  *bool   `json:"DataInitialization,omitempty" xml:"DataInitialization,omitempty"`
	DataSynchronization *bool   `json:"DataSynchronization,omitempty" xml:"DataSynchronization,omitempty"`
	// The objects of the data synchronization task after modification. The value is a JSON string. For more information, see [Objects of DTS tasks](~~209545~~).
	//
	// >  Before you call the ModifyDtsJob operation, we recommend that you call the [DescribeDtsJobDetail](~~208925~~) to query the current objects of the data synchronization task. Then, you can specify the new objects based on your business requirements. For example, if the current objects are Table A and Table B and you need to add Table C, you must specify Table A, Table B, and Table C for this parameter.
	DbListShrink *string `json:"DbList,omitempty" xml:"DbList,omitempty"`
	// The ID of the data synchronization instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The operator that is related to the extract, transform, and load (ETL) feature and dedicated to T+1 business.
	EtlOperatorColumnReference *string `json:"EtlOperatorColumnReference,omitempty" xml:"EtlOperatorColumnReference,omitempty"`
	// The endpoint of the Object Storage Service (OSS) bucket in which the files to be synchronized are stored.
	FileOssUrl *string `json:"FileOssUrl,omitempty" xml:"FileOssUrl,omitempty"`
	// The name of the table to be filtered.
	FilterTableName *string `json:"FilterTableName,omitempty" xml:"FilterTableName,omitempty"`
	// The method that is used to modify the data synchronization task. If you do not specify the parameter, the objects of the data synchronization task are modified by default. If you specify UPDATE_RESERVED for the parameter, the reserved parameters are modified.
	ModifyTypeEnum *string `json:"ModifyTypeEnum,omitempty" xml:"ModifyTypeEnum,omitempty"`
	// The ID of the region in which the data synchronization instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The reserved parameters of the data synchronization task. You can add reserved parameters instead of overwriting the existing reserved parameters. The value of the parameter is a MAP JSON string. You can specify this parameter to meet special requirements, such as specifying whether to automatically start the precheck of the data synchronization task. For more information, see [MigrationReserved](~~176470~~).
	Reserved                *string `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StructureInitialization *bool   `json:"StructureInitialization,omitempty" xml:"StructureInitialization,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >
	// *   Default value: **Forward**.
	// *   This parameter is required only if the topology of the data synchronization instance is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s ModifyDtsJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobShrinkRequest) SetClientToken(v string) *ModifyDtsJobShrinkRequest {
	s.ClientToken = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetDataInitialization(v bool) *ModifyDtsJobShrinkRequest {
	s.DataInitialization = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetDataSynchronization(v bool) *ModifyDtsJobShrinkRequest {
	s.DataSynchronization = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetDbListShrink(v string) *ModifyDtsJobShrinkRequest {
	s.DbListShrink = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetDtsInstanceId(v string) *ModifyDtsJobShrinkRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetEtlOperatorColumnReference(v string) *ModifyDtsJobShrinkRequest {
	s.EtlOperatorColumnReference = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetFileOssUrl(v string) *ModifyDtsJobShrinkRequest {
	s.FileOssUrl = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetFilterTableName(v string) *ModifyDtsJobShrinkRequest {
	s.FilterTableName = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetModifyTypeEnum(v string) *ModifyDtsJobShrinkRequest {
	s.ModifyTypeEnum = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetRegionId(v string) *ModifyDtsJobShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetReserved(v string) *ModifyDtsJobShrinkRequest {
	s.Reserved = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetStructureInitialization(v bool) *ModifyDtsJobShrinkRequest {
	s.StructureInitialization = &v
	return s
}

func (s *ModifyDtsJobShrinkRequest) SetSynchronizationDirection(v string) *ModifyDtsJobShrinkRequest {
	s.SynchronizationDirection = &v
	return s
}

type ModifyDtsJobResponseBody struct {
	// The ID of the DTS task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	//
	// >  The data type of this parameter is String. Sample value: **The actual sample value is The request processing has failed due to some unknown error.
	ErrMessage *bool `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The HTTP status code.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyDtsJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobResponseBody) SetDtsJobId(v string) *ModifyDtsJobResponseBody {
	s.DtsJobId = &v
	return s
}

func (s *ModifyDtsJobResponseBody) SetErrCode(v string) *ModifyDtsJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyDtsJobResponseBody) SetErrMessage(v bool) *ModifyDtsJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyDtsJobResponseBody) SetRequestId(v string) *ModifyDtsJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDtsJobResponseBody) SetStatus(v string) *ModifyDtsJobResponseBody {
	s.Status = &v
	return s
}

func (s *ModifyDtsJobResponseBody) SetSuccess(v bool) *ModifyDtsJobResponseBody {
	s.Success = &v
	return s
}

type ModifyDtsJobResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDtsJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDtsJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobResponse) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobResponse) SetHeaders(v map[string]*string) *ModifyDtsJobResponse {
	s.Headers = v
	return s
}

func (s *ModifyDtsJobResponse) SetStatusCode(v int32) *ModifyDtsJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDtsJobResponse) SetBody(v *ModifyDtsJobResponseBody) *ModifyDtsJobResponse {
	s.Body = v
	return s
}

type ModifyDtsJobDedicatedClusterRequest struct {
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	DtsJobIds          *string `json:"DtsJobIds,omitempty" xml:"DtsJobIds,omitempty"`
	OwnerId            *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDtsJobDedicatedClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobDedicatedClusterRequest) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobDedicatedClusterRequest) SetDedicatedClusterId(v string) *ModifyDtsJobDedicatedClusterRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *ModifyDtsJobDedicatedClusterRequest) SetDtsJobIds(v string) *ModifyDtsJobDedicatedClusterRequest {
	s.DtsJobIds = &v
	return s
}

func (s *ModifyDtsJobDedicatedClusterRequest) SetOwnerId(v string) *ModifyDtsJobDedicatedClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDtsJobDedicatedClusterRequest) SetRegionId(v string) *ModifyDtsJobDedicatedClusterRequest {
	s.RegionId = &v
	return s
}

type ModifyDtsJobDedicatedClusterResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrCode        *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage     *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	HttpStatusCode *int64  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyDtsJobDedicatedClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobDedicatedClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobDedicatedClusterResponseBody) SetCode(v string) *ModifyDtsJobDedicatedClusterResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyDtsJobDedicatedClusterResponseBody) SetDynamicMessage(v string) *ModifyDtsJobDedicatedClusterResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *ModifyDtsJobDedicatedClusterResponseBody) SetErrCode(v string) *ModifyDtsJobDedicatedClusterResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyDtsJobDedicatedClusterResponseBody) SetErrMessage(v string) *ModifyDtsJobDedicatedClusterResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyDtsJobDedicatedClusterResponseBody) SetHttpStatusCode(v int64) *ModifyDtsJobDedicatedClusterResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyDtsJobDedicatedClusterResponseBody) SetRequestId(v string) *ModifyDtsJobDedicatedClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDtsJobDedicatedClusterResponseBody) SetSuccess(v bool) *ModifyDtsJobDedicatedClusterResponseBody {
	s.Success = &v
	return s
}

type ModifyDtsJobDedicatedClusterResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDtsJobDedicatedClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDtsJobDedicatedClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobDedicatedClusterResponse) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobDedicatedClusterResponse) SetHeaders(v map[string]*string) *ModifyDtsJobDedicatedClusterResponse {
	s.Headers = v
	return s
}

func (s *ModifyDtsJobDedicatedClusterResponse) SetStatusCode(v int32) *ModifyDtsJobDedicatedClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDtsJobDedicatedClusterResponse) SetBody(v *ModifyDtsJobDedicatedClusterResponseBody) *ModifyDtsJobDedicatedClusterResponse {
	s.Body = v
	return s
}

type ModifyDtsJobDuLimitRequest struct {
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The upper limit of DUs for the DTS task.
	//
	// >  Minimum value: **1**.
	DuLimit *int64  `json:"DuLimit,omitempty" xml:"DuLimit,omitempty"`
	OwnerId *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region in which the DTS instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDtsJobDuLimitRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobDuLimitRequest) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobDuLimitRequest) SetDtsJobId(v string) *ModifyDtsJobDuLimitRequest {
	s.DtsJobId = &v
	return s
}

func (s *ModifyDtsJobDuLimitRequest) SetDuLimit(v int64) *ModifyDtsJobDuLimitRequest {
	s.DuLimit = &v
	return s
}

func (s *ModifyDtsJobDuLimitRequest) SetOwnerId(v string) *ModifyDtsJobDuLimitRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyDtsJobDuLimitRequest) SetRegionId(v string) *ModifyDtsJobDuLimitRequest {
	s.RegionId = &v
	return s
}

type ModifyDtsJobDuLimitResponseBody struct {
	// The error code returned by the backend service. The number is incremented.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the %s variable in the **ErrMessage** parameter.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int64 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyDtsJobDuLimitResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobDuLimitResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobDuLimitResponseBody) SetCode(v string) *ModifyDtsJobDuLimitResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyDtsJobDuLimitResponseBody) SetDynamicMessage(v string) *ModifyDtsJobDuLimitResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *ModifyDtsJobDuLimitResponseBody) SetErrCode(v string) *ModifyDtsJobDuLimitResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyDtsJobDuLimitResponseBody) SetErrMessage(v string) *ModifyDtsJobDuLimitResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyDtsJobDuLimitResponseBody) SetHttpStatusCode(v int64) *ModifyDtsJobDuLimitResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyDtsJobDuLimitResponseBody) SetRequestId(v string) *ModifyDtsJobDuLimitResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDtsJobDuLimitResponseBody) SetSuccess(v bool) *ModifyDtsJobDuLimitResponseBody {
	s.Success = &v
	return s
}

type ModifyDtsJobDuLimitResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDtsJobDuLimitResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDtsJobDuLimitResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobDuLimitResponse) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobDuLimitResponse) SetHeaders(v map[string]*string) *ModifyDtsJobDuLimitResponse {
	s.Headers = v
	return s
}

func (s *ModifyDtsJobDuLimitResponse) SetStatusCode(v int32) *ModifyDtsJobDuLimitResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDtsJobDuLimitResponse) SetBody(v *ModifyDtsJobDuLimitResponseBody) *ModifyDtsJobDuLimitResponse {
	s.Body = v
	return s
}

type ModifyDtsJobNameRequest struct {
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The new name of the DTS task.
	//
	// >  We recommend that you specify a descriptive name for easy identification. You do not need to use a unique name.
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDtsJobNameRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobNameRequest) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobNameRequest) SetDtsJobId(v string) *ModifyDtsJobNameRequest {
	s.DtsJobId = &v
	return s
}

func (s *ModifyDtsJobNameRequest) SetDtsJobName(v string) *ModifyDtsJobNameRequest {
	s.DtsJobName = &v
	return s
}

func (s *ModifyDtsJobNameRequest) SetRegionId(v string) *ModifyDtsJobNameRequest {
	s.RegionId = &v
	return s
}

type ModifyDtsJobNameResponseBody struct {
	// The error code. This parameter will be removed in the future.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The dynamic part in the error message. The value of this parameter is used to replace the **%s** variable in the value of the **ErrMessage** parameter.
	//
	// >  For example, if the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyDtsJobNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobNameResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobNameResponseBody) SetCode(v string) *ModifyDtsJobNameResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyDtsJobNameResponseBody) SetDynamicMessage(v string) *ModifyDtsJobNameResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *ModifyDtsJobNameResponseBody) SetErrCode(v string) *ModifyDtsJobNameResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyDtsJobNameResponseBody) SetErrMessage(v string) *ModifyDtsJobNameResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyDtsJobNameResponseBody) SetHttpStatusCode(v int32) *ModifyDtsJobNameResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyDtsJobNameResponseBody) SetRequestId(v string) *ModifyDtsJobNameResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDtsJobNameResponseBody) SetSuccess(v bool) *ModifyDtsJobNameResponseBody {
	s.Success = &v
	return s
}

type ModifyDtsJobNameResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDtsJobNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDtsJobNameResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobNameResponse) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobNameResponse) SetHeaders(v map[string]*string) *ModifyDtsJobNameResponse {
	s.Headers = v
	return s
}

func (s *ModifyDtsJobNameResponse) SetStatusCode(v int32) *ModifyDtsJobNameResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDtsJobNameResponse) SetBody(v *ModifyDtsJobNameResponseBody) *ModifyDtsJobNameResponse {
	s.Body = v
	return s
}

type ModifyDtsJobPasswordRequest struct {
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// Specifies the database to which the password belongs. Valid values:
	//
	// *   **src**: source database
	// *   **dest**: destination database
	//
	// >  This parameter must be specified.
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// The new password of the account.
	//
	// >  This parameter must be specified and cannot be the same as the current password.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The ID of the region where the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The account of the source or destination database.
	//
	// >  This parameter must be specified.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ModifyDtsJobPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobPasswordRequest) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobPasswordRequest) SetDtsJobId(v string) *ModifyDtsJobPasswordRequest {
	s.DtsJobId = &v
	return s
}

func (s *ModifyDtsJobPasswordRequest) SetEndpoint(v string) *ModifyDtsJobPasswordRequest {
	s.Endpoint = &v
	return s
}

func (s *ModifyDtsJobPasswordRequest) SetPassword(v string) *ModifyDtsJobPasswordRequest {
	s.Password = &v
	return s
}

func (s *ModifyDtsJobPasswordRequest) SetRegionId(v string) *ModifyDtsJobPasswordRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDtsJobPasswordRequest) SetUserName(v string) *ModifyDtsJobPasswordRequest {
	s.UserName = &v
	return s
}

type ModifyDtsJobPasswordResponseBody struct {
	// The error code. This parameter will be removed in the future.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyDtsJobPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobPasswordResponseBody) SetCode(v string) *ModifyDtsJobPasswordResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyDtsJobPasswordResponseBody) SetDynamicMessage(v string) *ModifyDtsJobPasswordResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *ModifyDtsJobPasswordResponseBody) SetErrCode(v string) *ModifyDtsJobPasswordResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyDtsJobPasswordResponseBody) SetErrMessage(v string) *ModifyDtsJobPasswordResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyDtsJobPasswordResponseBody) SetHttpStatusCode(v int32) *ModifyDtsJobPasswordResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyDtsJobPasswordResponseBody) SetRequestId(v string) *ModifyDtsJobPasswordResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDtsJobPasswordResponseBody) SetSuccess(v bool) *ModifyDtsJobPasswordResponseBody {
	s.Success = &v
	return s
}

type ModifyDtsJobPasswordResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDtsJobPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDtsJobPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDtsJobPasswordResponse) GoString() string {
	return s.String()
}

func (s *ModifyDtsJobPasswordResponse) SetHeaders(v map[string]*string) *ModifyDtsJobPasswordResponse {
	s.Headers = v
	return s
}

func (s *ModifyDtsJobPasswordResponse) SetStatusCode(v int32) *ModifyDtsJobPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDtsJobPasswordResponse) SetBody(v *ModifyDtsJobPasswordResponseBody) *ModifyDtsJobPasswordResponse {
	s.Body = v
	return s
}

type ModifyDynamicConfigRequest struct {
	ConfigList  *string `json:"ConfigList,omitempty" xml:"ConfigList,omitempty"`
	DtsJobId    *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	EnableLimit *bool   `json:"EnableLimit,omitempty" xml:"EnableLimit,omitempty"`
	JobCode     *string `json:"JobCode,omitempty" xml:"JobCode,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDynamicConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDynamicConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyDynamicConfigRequest) SetConfigList(v string) *ModifyDynamicConfigRequest {
	s.ConfigList = &v
	return s
}

func (s *ModifyDynamicConfigRequest) SetDtsJobId(v string) *ModifyDynamicConfigRequest {
	s.DtsJobId = &v
	return s
}

func (s *ModifyDynamicConfigRequest) SetEnableLimit(v bool) *ModifyDynamicConfigRequest {
	s.EnableLimit = &v
	return s
}

func (s *ModifyDynamicConfigRequest) SetJobCode(v string) *ModifyDynamicConfigRequest {
	s.JobCode = &v
	return s
}

func (s *ModifyDynamicConfigRequest) SetRegionId(v string) *ModifyDynamicConfigRequest {
	s.RegionId = &v
	return s
}

type ModifyDynamicConfigResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrCode        *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage     *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyDynamicConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDynamicConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDynamicConfigResponseBody) SetCode(v string) *ModifyDynamicConfigResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyDynamicConfigResponseBody) SetDynamicMessage(v string) *ModifyDynamicConfigResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *ModifyDynamicConfigResponseBody) SetErrCode(v string) *ModifyDynamicConfigResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifyDynamicConfigResponseBody) SetErrMessage(v string) *ModifyDynamicConfigResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifyDynamicConfigResponseBody) SetHttpStatusCode(v int32) *ModifyDynamicConfigResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifyDynamicConfigResponseBody) SetRequestId(v string) *ModifyDynamicConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyDynamicConfigResponseBody) SetSuccess(v bool) *ModifyDynamicConfigResponseBody {
	s.Success = &v
	return s
}

type ModifyDynamicConfigResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyDynamicConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyDynamicConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDynamicConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyDynamicConfigResponse) SetHeaders(v map[string]*string) *ModifyDynamicConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyDynamicConfigResponse) SetStatusCode(v int32) *ModifyDynamicConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDynamicConfigResponse) SetBody(v *ModifyDynamicConfigResponseBody) *ModifyDynamicConfigResponse {
	s.Body = v
	return s
}

type ModifySubscriptionRequest struct {
	// The objects of the change tracking task. The value is a JSON string. For more information, see [Objects of DTS tasks](~~209545~~).
	//
	// >  You can call the [DescribeDtsJobDetail](~~208925~~) operation to query the original objects of the task.
	DbList *string `json:"DbList,omitempty" xml:"DbList,omitempty"`
	// The ID of the change tracking instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the region where the change tracking instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to retrieve data definition language (DDL) statements. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	SubscriptionDataTypeDDL *bool `json:"SubscriptionDataTypeDDL,omitempty" xml:"SubscriptionDataTypeDDL,omitempty"`
	// Specifies whether to retrieve data manipulation language (DML) statements. Valid values:
	//
	// *   **true**: yes
	// *   **false**: no
	SubscriptionDataTypeDML *bool `json:"SubscriptionDataTypeDML,omitempty" xml:"SubscriptionDataTypeDML,omitempty"`
}

func (s ModifySubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySubscriptionRequest) GoString() string {
	return s.String()
}

func (s *ModifySubscriptionRequest) SetDbList(v string) *ModifySubscriptionRequest {
	s.DbList = &v
	return s
}

func (s *ModifySubscriptionRequest) SetDtsInstanceId(v string) *ModifySubscriptionRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ModifySubscriptionRequest) SetDtsJobId(v string) *ModifySubscriptionRequest {
	s.DtsJobId = &v
	return s
}

func (s *ModifySubscriptionRequest) SetRegionId(v string) *ModifySubscriptionRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySubscriptionRequest) SetSubscriptionDataTypeDDL(v bool) *ModifySubscriptionRequest {
	s.SubscriptionDataTypeDDL = &v
	return s
}

func (s *ModifySubscriptionRequest) SetSubscriptionDataTypeDML(v bool) *ModifySubscriptionRequest {
	s.SubscriptionDataTypeDML = &v
	return s
}

type ModifySubscriptionResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifySubscriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySubscriptionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySubscriptionResponseBody) SetErrCode(v string) *ModifySubscriptionResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifySubscriptionResponseBody) SetErrMessage(v string) *ModifySubscriptionResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifySubscriptionResponseBody) SetHttpStatusCode(v string) *ModifySubscriptionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ModifySubscriptionResponseBody) SetRequestId(v string) *ModifySubscriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySubscriptionResponseBody) SetSuccess(v string) *ModifySubscriptionResponseBody {
	s.Success = &v
	return s
}

type ModifySubscriptionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySubscriptionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySubscriptionResponse) GoString() string {
	return s.String()
}

func (s *ModifySubscriptionResponse) SetHeaders(v map[string]*string) *ModifySubscriptionResponse {
	s.Headers = v
	return s
}

func (s *ModifySubscriptionResponse) SetStatusCode(v int32) *ModifySubscriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySubscriptionResponse) SetBody(v *ModifySubscriptionResponseBody) *ModifySubscriptionResponse {
	s.Body = v
	return s
}

type ModifySubscriptionObjectRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the [DescribeSubscriptionInstances](~~49442~~) operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
	// The objects from which you want to track data changes. The value is a JSON string and can contain regular expressions. For more information, see [SubscriptionObjects](~~141902~~).
	SubscriptionObject *string `json:"SubscriptionObject,omitempty" xml:"SubscriptionObject,omitempty"`
}

func (s ModifySubscriptionObjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySubscriptionObjectRequest) GoString() string {
	return s.String()
}

func (s *ModifySubscriptionObjectRequest) SetAccountId(v string) *ModifySubscriptionObjectRequest {
	s.AccountId = &v
	return s
}

func (s *ModifySubscriptionObjectRequest) SetOwnerId(v string) *ModifySubscriptionObjectRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySubscriptionObjectRequest) SetRegionId(v string) *ModifySubscriptionObjectRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySubscriptionObjectRequest) SetSubscriptionInstanceId(v string) *ModifySubscriptionObjectRequest {
	s.SubscriptionInstanceId = &v
	return s
}

func (s *ModifySubscriptionObjectRequest) SetSubscriptionObject(v string) *ModifySubscriptionObjectRequest {
	s.SubscriptionObject = &v
	return s
}

type ModifySubscriptionObjectResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifySubscriptionObjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySubscriptionObjectResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySubscriptionObjectResponseBody) SetErrCode(v string) *ModifySubscriptionObjectResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifySubscriptionObjectResponseBody) SetErrMessage(v string) *ModifySubscriptionObjectResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifySubscriptionObjectResponseBody) SetRequestId(v string) *ModifySubscriptionObjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySubscriptionObjectResponseBody) SetSuccess(v string) *ModifySubscriptionObjectResponseBody {
	s.Success = &v
	return s
}

type ModifySubscriptionObjectResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySubscriptionObjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySubscriptionObjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySubscriptionObjectResponse) GoString() string {
	return s.String()
}

func (s *ModifySubscriptionObjectResponse) SetHeaders(v map[string]*string) *ModifySubscriptionObjectResponse {
	s.Headers = v
	return s
}

func (s *ModifySubscriptionObjectResponse) SetStatusCode(v int32) *ModifySubscriptionObjectResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySubscriptionObjectResponse) SetBody(v *ModifySubscriptionObjectResponseBody) *ModifySubscriptionObjectResponse {
	s.Body = v
	return s
}

type ModifySynchronizationObjectRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >
	// *   Default value: **Forward**.
	// *   This parameter is required only when the topology of the data synchronization instance is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.
	SynchronizationJobId   *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
	SynchronizationObjects *string `json:"SynchronizationObjects,omitempty" xml:"SynchronizationObjects,omitempty"`
}

func (s ModifySynchronizationObjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySynchronizationObjectRequest) GoString() string {
	return s.String()
}

func (s *ModifySynchronizationObjectRequest) SetAccountId(v string) *ModifySynchronizationObjectRequest {
	s.AccountId = &v
	return s
}

func (s *ModifySynchronizationObjectRequest) SetOwnerId(v string) *ModifySynchronizationObjectRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifySynchronizationObjectRequest) SetRegionId(v string) *ModifySynchronizationObjectRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySynchronizationObjectRequest) SetSynchronizationDirection(v string) *ModifySynchronizationObjectRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *ModifySynchronizationObjectRequest) SetSynchronizationJobId(v string) *ModifySynchronizationObjectRequest {
	s.SynchronizationJobId = &v
	return s
}

func (s *ModifySynchronizationObjectRequest) SetSynchronizationObjects(v string) *ModifySynchronizationObjectRequest {
	s.SynchronizationObjects = &v
	return s
}

type ModifySynchronizationObjectResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the task that changes the objects. You must specify the task ID when you call the DescribeSynchronizationObjectModifyStatus operation to query the status and progress of the task.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ModifySynchronizationObjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySynchronizationObjectResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySynchronizationObjectResponseBody) SetErrCode(v string) *ModifySynchronizationObjectResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ModifySynchronizationObjectResponseBody) SetErrMessage(v string) *ModifySynchronizationObjectResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ModifySynchronizationObjectResponseBody) SetRequestId(v string) *ModifySynchronizationObjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySynchronizationObjectResponseBody) SetSuccess(v string) *ModifySynchronizationObjectResponseBody {
	s.Success = &v
	return s
}

func (s *ModifySynchronizationObjectResponseBody) SetTaskId(v string) *ModifySynchronizationObjectResponseBody {
	s.TaskId = &v
	return s
}

type ModifySynchronizationObjectResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifySynchronizationObjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifySynchronizationObjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySynchronizationObjectResponse) GoString() string {
	return s.String()
}

func (s *ModifySynchronizationObjectResponse) SetHeaders(v map[string]*string) *ModifySynchronizationObjectResponse {
	s.Headers = v
	return s
}

func (s *ModifySynchronizationObjectResponse) SetStatusCode(v int32) *ModifySynchronizationObjectResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySynchronizationObjectResponse) SetBody(v *ModifySynchronizationObjectResponseBody) *ModifySynchronizationObjectResponse {
	s.Body = v
	return s
}

type RenewInstanceRequest struct {
	// The subscription duration of the DTS instance after renewal. Default value: 1.
	//
	// *   If the **Period** parameter is set to **Year**, the valid values are **1 to 5**.
	// *   If the **Period** parameter is set to **Month**, the valid values are **1 to 60**.
	BuyCount *string `json:"BuyCount,omitempty" xml:"BuyCount,omitempty"`
	// The billing method of the DTS instance. Set the value to **PREPAY**, which indicates the subscription billing method.
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The ID of the data synchronization or change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The billing cycle of the DTS instance after renewal. Valid values:
	//
	// *   **Year**: annual subscription.
	// *   **Month**: monthly subscription. This is the default value.
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RenewInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewInstanceRequest) SetBuyCount(v string) *RenewInstanceRequest {
	s.BuyCount = &v
	return s
}

func (s *RenewInstanceRequest) SetChargeType(v string) *RenewInstanceRequest {
	s.ChargeType = &v
	return s
}

func (s *RenewInstanceRequest) SetDtsJobId(v string) *RenewInstanceRequest {
	s.DtsJobId = &v
	return s
}

func (s *RenewInstanceRequest) SetPeriod(v string) *RenewInstanceRequest {
	s.Period = &v
	return s
}

func (s *RenewInstanceRequest) SetRegionId(v string) *RenewInstanceRequest {
	s.RegionId = &v
	return s
}

type RenewInstanceResponseBody struct {
	// The billing method of the DTS instance. **PREPAY** is returned, which indicates the subscription billing method.
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The error code.
	//
	// >  This parameter will be removed in the future.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the data synchronization or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The time when the DTS instance expires after renewal. The time follows the ISO 8601 standard in the *yyyy-MM-dd*T*HH:mm:ssZZZ* format. The time is displayed in UTC.
	//
	// >  **ZZZ** indicates the offset of the time zone, which is displayed in the format of a plus sign (+) or a minus sign (-) followed by hours and minutes, such as **+00:00**.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the DTS instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RenewInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponseBody) SetChargeType(v string) *RenewInstanceResponseBody {
	s.ChargeType = &v
	return s
}

func (s *RenewInstanceResponseBody) SetCode(v string) *RenewInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *RenewInstanceResponseBody) SetDtsJobId(v string) *RenewInstanceResponseBody {
	s.DtsJobId = &v
	return s
}

func (s *RenewInstanceResponseBody) SetDynamicMessage(v string) *RenewInstanceResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *RenewInstanceResponseBody) SetEndTime(v string) *RenewInstanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *RenewInstanceResponseBody) SetErrCode(v string) *RenewInstanceResponseBody {
	s.ErrCode = &v
	return s
}

func (s *RenewInstanceResponseBody) SetErrMessage(v string) *RenewInstanceResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *RenewInstanceResponseBody) SetHttpStatusCode(v int32) *RenewInstanceResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RenewInstanceResponseBody) SetInstanceId(v string) *RenewInstanceResponseBody {
	s.InstanceId = &v
	return s
}

func (s *RenewInstanceResponseBody) SetRequestId(v string) *RenewInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenewInstanceResponseBody) SetSuccess(v bool) *RenewInstanceResponseBody {
	s.Success = &v
	return s
}

type RenewInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RenewInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RenewInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponse) SetHeaders(v map[string]*string) *RenewInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewInstanceResponse) SetStatusCode(v int32) *RenewInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewInstanceResponse) SetBody(v *RenewInstanceResponseBody) *RenewInstanceResponse {
	s.Body = v
	return s
}

type ResetDtsJobRequest struct {
	// The ID of the data synchronization or change tracking instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the data synchronization or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >
	// *   Default value: **Forward**.
	// *   You can set this parameter to **Reverse** to reset the reverse synchronization task only when the topology is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s ResetDtsJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetDtsJobRequest) GoString() string {
	return s.String()
}

func (s *ResetDtsJobRequest) SetDtsInstanceId(v string) *ResetDtsJobRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ResetDtsJobRequest) SetDtsJobId(v string) *ResetDtsJobRequest {
	s.DtsJobId = &v
	return s
}

func (s *ResetDtsJobRequest) SetRegionId(v string) *ResetDtsJobRequest {
	s.RegionId = &v
	return s
}

func (s *ResetDtsJobRequest) SetSynchronizationDirection(v string) *ResetDtsJobRequest {
	s.SynchronizationDirection = &v
	return s
}

type ResetDtsJobResponseBody struct {
	// The dynamic error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace **%s** in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ResetDtsJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetDtsJobResponseBody) GoString() string {
	return s.String()
}

func (s *ResetDtsJobResponseBody) SetDynamicCode(v string) *ResetDtsJobResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *ResetDtsJobResponseBody) SetDynamicMessage(v string) *ResetDtsJobResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *ResetDtsJobResponseBody) SetErrCode(v string) *ResetDtsJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ResetDtsJobResponseBody) SetErrMessage(v string) *ResetDtsJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ResetDtsJobResponseBody) SetHttpStatusCode(v int32) *ResetDtsJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ResetDtsJobResponseBody) SetRequestId(v string) *ResetDtsJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetDtsJobResponseBody) SetSuccess(v bool) *ResetDtsJobResponseBody {
	s.Success = &v
	return s
}

type ResetDtsJobResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResetDtsJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetDtsJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetDtsJobResponse) GoString() string {
	return s.String()
}

func (s *ResetDtsJobResponse) SetHeaders(v map[string]*string) *ResetDtsJobResponse {
	s.Headers = v
	return s
}

func (s *ResetDtsJobResponse) SetStatusCode(v int32) *ResetDtsJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetDtsJobResponse) SetBody(v *ResetDtsJobResponseBody) *ResetDtsJobResponse {
	s.Body = v
	return s
}

type ResetSynchronizationJobRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >
	// *   Default value: **Forward**.
	// *   You can set this parameter to **Reverse** to stop reverse synchronization only when the topology is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s ResetSynchronizationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetSynchronizationJobRequest) GoString() string {
	return s.String()
}

func (s *ResetSynchronizationJobRequest) SetAccountId(v string) *ResetSynchronizationJobRequest {
	s.AccountId = &v
	return s
}

func (s *ResetSynchronizationJobRequest) SetOwnerId(v string) *ResetSynchronizationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *ResetSynchronizationJobRequest) SetRegionId(v string) *ResetSynchronizationJobRequest {
	s.RegionId = &v
	return s
}

func (s *ResetSynchronizationJobRequest) SetSynchronizationDirection(v string) *ResetSynchronizationJobRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *ResetSynchronizationJobRequest) SetSynchronizationJobId(v string) *ResetSynchronizationJobRequest {
	s.SynchronizationJobId = &v
	return s
}

type ResetSynchronizationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ResetSynchronizationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetSynchronizationJobResponseBody) GoString() string {
	return s.String()
}

func (s *ResetSynchronizationJobResponseBody) SetErrCode(v string) *ResetSynchronizationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ResetSynchronizationJobResponseBody) SetErrMessage(v string) *ResetSynchronizationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ResetSynchronizationJobResponseBody) SetRequestId(v string) *ResetSynchronizationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetSynchronizationJobResponseBody) SetSuccess(v string) *ResetSynchronizationJobResponseBody {
	s.Success = &v
	return s
}

type ResetSynchronizationJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ResetSynchronizationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetSynchronizationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetSynchronizationJobResponse) GoString() string {
	return s.String()
}

func (s *ResetSynchronizationJobResponse) SetHeaders(v map[string]*string) *ResetSynchronizationJobResponse {
	s.Headers = v
	return s
}

func (s *ResetSynchronizationJobResponse) SetStatusCode(v int32) *ResetSynchronizationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetSynchronizationJobResponse) SetBody(v *ResetSynchronizationJobResponseBody) *ResetSynchronizationJobResponse {
	s.Body = v
	return s
}

type ReverseTwoWayDirectionRequest struct {
	DtsInstanceId     *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	IgnoreErrorSubJob *bool   `json:"IgnoreErrorSubJob,omitempty" xml:"IgnoreErrorSubJob,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ReverseTwoWayDirectionRequest) String() string {
	return tea.Prettify(s)
}

func (s ReverseTwoWayDirectionRequest) GoString() string {
	return s.String()
}

func (s *ReverseTwoWayDirectionRequest) SetDtsInstanceId(v string) *ReverseTwoWayDirectionRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ReverseTwoWayDirectionRequest) SetIgnoreErrorSubJob(v bool) *ReverseTwoWayDirectionRequest {
	s.IgnoreErrorSubJob = &v
	return s
}

func (s *ReverseTwoWayDirectionRequest) SetRegionId(v string) *ReverseTwoWayDirectionRequest {
	s.RegionId = &v
	return s
}

type ReverseTwoWayDirectionResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrCode        *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage     *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ReverseTwoWayDirectionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReverseTwoWayDirectionResponseBody) GoString() string {
	return s.String()
}

func (s *ReverseTwoWayDirectionResponseBody) SetCode(v string) *ReverseTwoWayDirectionResponseBody {
	s.Code = &v
	return s
}

func (s *ReverseTwoWayDirectionResponseBody) SetDynamicMessage(v string) *ReverseTwoWayDirectionResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *ReverseTwoWayDirectionResponseBody) SetErrCode(v string) *ReverseTwoWayDirectionResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ReverseTwoWayDirectionResponseBody) SetErrMessage(v string) *ReverseTwoWayDirectionResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ReverseTwoWayDirectionResponseBody) SetHttpStatusCode(v int32) *ReverseTwoWayDirectionResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *ReverseTwoWayDirectionResponseBody) SetRequestId(v string) *ReverseTwoWayDirectionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReverseTwoWayDirectionResponseBody) SetSuccess(v bool) *ReverseTwoWayDirectionResponseBody {
	s.Success = &v
	return s
}

type ReverseTwoWayDirectionResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ReverseTwoWayDirectionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReverseTwoWayDirectionResponse) String() string {
	return tea.Prettify(s)
}

func (s ReverseTwoWayDirectionResponse) GoString() string {
	return s.String()
}

func (s *ReverseTwoWayDirectionResponse) SetHeaders(v map[string]*string) *ReverseTwoWayDirectionResponse {
	s.Headers = v
	return s
}

func (s *ReverseTwoWayDirectionResponse) SetStatusCode(v int32) *ReverseTwoWayDirectionResponse {
	s.StatusCode = &v
	return s
}

func (s *ReverseTwoWayDirectionResponse) SetBody(v *ReverseTwoWayDirectionResponseBody) *ReverseTwoWayDirectionResponse {
	s.Body = v
	return s
}

type ShieldPrecheckRequest struct {
	// The ID of the data migration or data synchronization instance. You can call the **DescribeMigrationJobs** or DescribeSynchronizationJobs operation to query the instance ID.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The precheck items that you want to ignore. Separate multiple items with commas (,). Valid values:
	//
	// *   **CHECK_SAME_OBJ**: schema name conflict
	//
	// *   **CHECK_SAME_USER**: multiple usernames for one instance
	//
	// *   **CHECK_SRC**: source database version
	//
	// *   **CHECK_TOPOLOGY**: topology
	//
	// > For more information about the topologies supported by DTS, see [Synchronization topologies](~~124115~~).
	//
	// *   **CHECK_SERVER_ID**: value of server_id in the source database
	PrecheckItems *string `json:"PrecheckItems,omitempty" xml:"PrecheckItems,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ShieldPrecheckRequest) String() string {
	return tea.Prettify(s)
}

func (s ShieldPrecheckRequest) GoString() string {
	return s.String()
}

func (s *ShieldPrecheckRequest) SetDtsInstanceId(v string) *ShieldPrecheckRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *ShieldPrecheckRequest) SetPrecheckItems(v string) *ShieldPrecheckRequest {
	s.PrecheckItems = &v
	return s
}

func (s *ShieldPrecheckRequest) SetRegionId(v string) *ShieldPrecheckRequest {
	s.RegionId = &v
	return s
}

type ShieldPrecheckResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ShieldPrecheckResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ShieldPrecheckResponseBody) GoString() string {
	return s.String()
}

func (s *ShieldPrecheckResponseBody) SetErrCode(v string) *ShieldPrecheckResponseBody {
	s.ErrCode = &v
	return s
}

func (s *ShieldPrecheckResponseBody) SetErrMessage(v string) *ShieldPrecheckResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *ShieldPrecheckResponseBody) SetRequestId(v string) *ShieldPrecheckResponseBody {
	s.RequestId = &v
	return s
}

func (s *ShieldPrecheckResponseBody) SetSuccess(v bool) *ShieldPrecheckResponseBody {
	s.Success = &v
	return s
}

type ShieldPrecheckResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ShieldPrecheckResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ShieldPrecheckResponse) String() string {
	return tea.Prettify(s)
}

func (s ShieldPrecheckResponse) GoString() string {
	return s.String()
}

func (s *ShieldPrecheckResponse) SetHeaders(v map[string]*string) *ShieldPrecheckResponse {
	s.Headers = v
	return s
}

func (s *ShieldPrecheckResponse) SetStatusCode(v int32) *ShieldPrecheckResponse {
	s.StatusCode = &v
	return s
}

func (s *ShieldPrecheckResponse) SetBody(v *ShieldPrecheckResponseBody) *ShieldPrecheckResponse {
	s.Body = v
	return s
}

type SkipPreCheckRequest struct {
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the precheck task. You can call the **DescribePreCheckStatus** operation to query the task ID.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to skip the precheck item. Valid values:
	//
	// *   **true**: skips the precheck item.
	// *   **false**: does not skip the precheck item.
	//
	// >  This parameter is required.
	Skip *bool `json:"Skip,omitempty" xml:"Skip,omitempty"`
	// The shortened name of the precheck item. Valid values:
	//
	// *   **CHECK_SAME_OBJ**: object name conflict
	//
	// *   **CHECK_SAME_USER**: multiple usernames for one instance
	//
	// *   **CHECK_SRC**: source database version
	//
	// *   **CHECK_TOPOLOGY**: topology type
	//
	// > For more information about the topologies supported by DTS, see [Synchronization topologies](~~124115~~).
	//
	// *   **CHECK_SERVER_ID**: the server ID of the source database
	//
	// >  Separate multiple shortened names with commas (,).
	SkipPreCheckItems *string `json:"SkipPreCheckItems,omitempty" xml:"SkipPreCheckItems,omitempty"`
	// The name of the precheck item. This parameter corresponds to the **SkipPreCheckItems** parameter. Valid values:
	//
	// *   **CHECK_SAME_OBJ_DETAIL**: object name conflict
	//
	// *   **CHECK_SAME_USER_DETAIL**: multiple usernames for one instance
	//
	// *   **CHECK_SRC_DETAIL**: source database version
	//
	// *   **CHECK_TOPOLOGY_DETAIL**: topology type
	//
	// > For more information about the topologies supported by DTS, see [Synchronization topologies](~~124115~~).
	//
	// *   **CHECK_SERVER_ID_DETAIL**: the server ID of the source database
	//
	// >  Separate multiple item names with commas (,).
	SkipPreCheckNames *string `json:"SkipPreCheckNames,omitempty" xml:"SkipPreCheckNames,omitempty"`
}

func (s SkipPreCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s SkipPreCheckRequest) GoString() string {
	return s.String()
}

func (s *SkipPreCheckRequest) SetDtsJobId(v string) *SkipPreCheckRequest {
	s.DtsJobId = &v
	return s
}

func (s *SkipPreCheckRequest) SetJobId(v string) *SkipPreCheckRequest {
	s.JobId = &v
	return s
}

func (s *SkipPreCheckRequest) SetRegionId(v string) *SkipPreCheckRequest {
	s.RegionId = &v
	return s
}

func (s *SkipPreCheckRequest) SetSkip(v bool) *SkipPreCheckRequest {
	s.Skip = &v
	return s
}

func (s *SkipPreCheckRequest) SetSkipPreCheckItems(v string) *SkipPreCheckRequest {
	s.SkipPreCheckItems = &v
	return s
}

func (s *SkipPreCheckRequest) SetSkipPreCheckNames(v string) *SkipPreCheckRequest {
	s.SkipPreCheckNames = &v
	return s
}

type SkipPreCheckResponseBody struct {
	// The error code. This parameter will be removed in the future.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the specified **JobId** parameter is invalid, **The Value of Input Parameter %s is not valid** is returned for **ErrMessage** and **JobId** is returned for **DynamicMessage**.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the DTS task on which the precheck is performed.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the precheck task.
	ScheduleJobId *string `json:"ScheduleJobId,omitempty" xml:"ScheduleJobId,omitempty"`
	// The shortened name of the precheck item.
	SkipItems *string `json:"SkipItems,omitempty" xml:"SkipItems,omitempty"`
	// The name of the precheck item.
	SkipNames *string `json:"SkipNames,omitempty" xml:"SkipNames,omitempty"`
	// Indicates whether the call is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SkipPreCheckResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SkipPreCheckResponseBody) GoString() string {
	return s.String()
}

func (s *SkipPreCheckResponseBody) SetCode(v string) *SkipPreCheckResponseBody {
	s.Code = &v
	return s
}

func (s *SkipPreCheckResponseBody) SetDynamicMessage(v string) *SkipPreCheckResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *SkipPreCheckResponseBody) SetErrCode(v string) *SkipPreCheckResponseBody {
	s.ErrCode = &v
	return s
}

func (s *SkipPreCheckResponseBody) SetErrMessage(v string) *SkipPreCheckResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *SkipPreCheckResponseBody) SetHttpStatusCode(v int32) *SkipPreCheckResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SkipPreCheckResponseBody) SetMigrationJobId(v string) *SkipPreCheckResponseBody {
	s.MigrationJobId = &v
	return s
}

func (s *SkipPreCheckResponseBody) SetRequestId(v string) *SkipPreCheckResponseBody {
	s.RequestId = &v
	return s
}

func (s *SkipPreCheckResponseBody) SetScheduleJobId(v string) *SkipPreCheckResponseBody {
	s.ScheduleJobId = &v
	return s
}

func (s *SkipPreCheckResponseBody) SetSkipItems(v string) *SkipPreCheckResponseBody {
	s.SkipItems = &v
	return s
}

func (s *SkipPreCheckResponseBody) SetSkipNames(v string) *SkipPreCheckResponseBody {
	s.SkipNames = &v
	return s
}

func (s *SkipPreCheckResponseBody) SetSuccess(v bool) *SkipPreCheckResponseBody {
	s.Success = &v
	return s
}

type SkipPreCheckResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SkipPreCheckResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SkipPreCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s SkipPreCheckResponse) GoString() string {
	return s.String()
}

func (s *SkipPreCheckResponse) SetHeaders(v map[string]*string) *SkipPreCheckResponse {
	s.Headers = v
	return s
}

func (s *SkipPreCheckResponse) SetStatusCode(v int32) *SkipPreCheckResponse {
	s.StatusCode = &v
	return s
}

func (s *SkipPreCheckResponse) SetBody(v *SkipPreCheckResponseBody) *SkipPreCheckResponse {
	s.Body = v
	return s
}

type StartDtsJobRequest struct {
	// The ID of the data migration, data synchronization, or change tracking instance.
	//
	// >  You can call the [DescribeMigrationJobs](~~208139~~), [DescribeSubscriptionInstances](~~49442~~), or [DescribeSynchronizationJobs](~~49454~~) operation to query the instance ID
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The region ID of the Data Transmission Service (DTS) instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Default value: Forward. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	//
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >You can set this parameter to **Reverse** to start the reverse synchronization task only if the topology is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s StartDtsJobRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDtsJobRequest) GoString() string {
	return s.String()
}

func (s *StartDtsJobRequest) SetDtsInstanceId(v string) *StartDtsJobRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *StartDtsJobRequest) SetDtsJobId(v string) *StartDtsJobRequest {
	s.DtsJobId = &v
	return s
}

func (s *StartDtsJobRequest) SetRegionId(v string) *StartDtsJobRequest {
	s.RegionId = &v
	return s
}

func (s *StartDtsJobRequest) SetSynchronizationDirection(v string) *StartDtsJobRequest {
	s.SynchronizationDirection = &v
	return s
}

type StartDtsJobResponseBody struct {
	// The dynamic error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  For example, if the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartDtsJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartDtsJobResponseBody) GoString() string {
	return s.String()
}

func (s *StartDtsJobResponseBody) SetDynamicCode(v string) *StartDtsJobResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *StartDtsJobResponseBody) SetDynamicMessage(v string) *StartDtsJobResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *StartDtsJobResponseBody) SetErrCode(v string) *StartDtsJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *StartDtsJobResponseBody) SetErrMessage(v string) *StartDtsJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *StartDtsJobResponseBody) SetHttpStatusCode(v int32) *StartDtsJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartDtsJobResponseBody) SetRequestId(v string) *StartDtsJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartDtsJobResponseBody) SetSuccess(v bool) *StartDtsJobResponseBody {
	s.Success = &v
	return s
}

type StartDtsJobResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartDtsJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartDtsJobResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDtsJobResponse) GoString() string {
	return s.String()
}

func (s *StartDtsJobResponse) SetHeaders(v map[string]*string) *StartDtsJobResponse {
	s.Headers = v
	return s
}

func (s *StartDtsJobResponse) SetStatusCode(v int32) *StartDtsJobResponse {
	s.StatusCode = &v
	return s
}

func (s *StartDtsJobResponse) SetBody(v *StartDtsJobResponseBody) *StartDtsJobResponse {
	s.Body = v
	return s
}

type StartDtsJobsRequest struct {
	// The ID of the data migration or data synchronization task.
	//
	// >
	// *   For multiple tasks, separate them with commas (**,**).
	// *   You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobIds *string `json:"DtsJobIds,omitempty" xml:"DtsJobIds,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StartDtsJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDtsJobsRequest) GoString() string {
	return s.String()
}

func (s *StartDtsJobsRequest) SetDtsJobIds(v string) *StartDtsJobsRequest {
	s.DtsJobIds = &v
	return s
}

func (s *StartDtsJobsRequest) SetRegionId(v string) *StartDtsJobsRequest {
	s.RegionId = &v
	return s
}

type StartDtsJobsResponseBody struct {
	// The dynamic error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartDtsJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartDtsJobsResponseBody) GoString() string {
	return s.String()
}

func (s *StartDtsJobsResponseBody) SetDynamicCode(v string) *StartDtsJobsResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *StartDtsJobsResponseBody) SetDynamicMessage(v string) *StartDtsJobsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *StartDtsJobsResponseBody) SetErrCode(v string) *StartDtsJobsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *StartDtsJobsResponseBody) SetErrMessage(v string) *StartDtsJobsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *StartDtsJobsResponseBody) SetHttpStatusCode(v int32) *StartDtsJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StartDtsJobsResponseBody) SetRequestId(v string) *StartDtsJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartDtsJobsResponseBody) SetSuccess(v bool) *StartDtsJobsResponseBody {
	s.Success = &v
	return s
}

type StartDtsJobsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartDtsJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartDtsJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDtsJobsResponse) GoString() string {
	return s.String()
}

func (s *StartDtsJobsResponse) SetHeaders(v map[string]*string) *StartDtsJobsResponse {
	s.Headers = v
	return s
}

func (s *StartDtsJobsResponse) SetStatusCode(v int32) *StartDtsJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *StartDtsJobsResponse) SetBody(v *StartDtsJobsResponseBody) *StartDtsJobsResponse {
	s.Body = v
	return s
}

type StartMigrationJobRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StartMigrationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMigrationJobRequest) GoString() string {
	return s.String()
}

func (s *StartMigrationJobRequest) SetAccountId(v string) *StartMigrationJobRequest {
	s.AccountId = &v
	return s
}

func (s *StartMigrationJobRequest) SetMigrationJobId(v string) *StartMigrationJobRequest {
	s.MigrationJobId = &v
	return s
}

func (s *StartMigrationJobRequest) SetOwnerId(v string) *StartMigrationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *StartMigrationJobRequest) SetRegionId(v string) *StartMigrationJobRequest {
	s.RegionId = &v
	return s
}

type StartMigrationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartMigrationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartMigrationJobResponseBody) GoString() string {
	return s.String()
}

func (s *StartMigrationJobResponseBody) SetErrCode(v string) *StartMigrationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *StartMigrationJobResponseBody) SetErrMessage(v string) *StartMigrationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *StartMigrationJobResponseBody) SetRequestId(v string) *StartMigrationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartMigrationJobResponseBody) SetSuccess(v string) *StartMigrationJobResponseBody {
	s.Success = &v
	return s
}

type StartMigrationJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartMigrationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartMigrationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMigrationJobResponse) GoString() string {
	return s.String()
}

func (s *StartMigrationJobResponse) SetHeaders(v map[string]*string) *StartMigrationJobResponse {
	s.Headers = v
	return s
}

func (s *StartMigrationJobResponse) SetStatusCode(v int32) *StartMigrationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *StartMigrationJobResponse) SetBody(v *StartMigrationJobResponseBody) *StartMigrationJobResponse {
	s.Body = v
	return s
}

type StartSubscriptionInstanceRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the change tracking instance. You can call the DescribeSubscriptionInstances operation to query the instance ID.
	SubscriptionInstanceId *string `json:"SubscriptionInstanceId,omitempty" xml:"SubscriptionInstanceId,omitempty"`
}

func (s StartSubscriptionInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartSubscriptionInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartSubscriptionInstanceRequest) SetAccountId(v string) *StartSubscriptionInstanceRequest {
	s.AccountId = &v
	return s
}

func (s *StartSubscriptionInstanceRequest) SetOwnerId(v string) *StartSubscriptionInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *StartSubscriptionInstanceRequest) SetRegionId(v string) *StartSubscriptionInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *StartSubscriptionInstanceRequest) SetSubscriptionInstanceId(v string) *StartSubscriptionInstanceRequest {
	s.SubscriptionInstanceId = &v
	return s
}

type StartSubscriptionInstanceResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The task ID. This parameter will be removed in the future.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s StartSubscriptionInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartSubscriptionInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartSubscriptionInstanceResponseBody) SetErrCode(v string) *StartSubscriptionInstanceResponseBody {
	s.ErrCode = &v
	return s
}

func (s *StartSubscriptionInstanceResponseBody) SetErrMessage(v string) *StartSubscriptionInstanceResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *StartSubscriptionInstanceResponseBody) SetRequestId(v string) *StartSubscriptionInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartSubscriptionInstanceResponseBody) SetSuccess(v string) *StartSubscriptionInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *StartSubscriptionInstanceResponseBody) SetTaskId(v string) *StartSubscriptionInstanceResponseBody {
	s.TaskId = &v
	return s
}

type StartSubscriptionInstanceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartSubscriptionInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartSubscriptionInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartSubscriptionInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartSubscriptionInstanceResponse) SetHeaders(v map[string]*string) *StartSubscriptionInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartSubscriptionInstanceResponse) SetStatusCode(v int32) *StartSubscriptionInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartSubscriptionInstanceResponse) SetBody(v *StartSubscriptionInstanceResponseBody) *StartSubscriptionInstanceResponse {
	s.Body = v
	return s
}

type StartSynchronizationJobRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >
	// *   Default value: **Forward**.
	// *   You can set this parameter to **Reverse** to start the reverse synchronization task only when the topology is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s StartSynchronizationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s StartSynchronizationJobRequest) GoString() string {
	return s.String()
}

func (s *StartSynchronizationJobRequest) SetAccountId(v string) *StartSynchronizationJobRequest {
	s.AccountId = &v
	return s
}

func (s *StartSynchronizationJobRequest) SetOwnerId(v string) *StartSynchronizationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *StartSynchronizationJobRequest) SetRegionId(v string) *StartSynchronizationJobRequest {
	s.RegionId = &v
	return s
}

func (s *StartSynchronizationJobRequest) SetSynchronizationDirection(v string) *StartSynchronizationJobRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *StartSynchronizationJobRequest) SetSynchronizationJobId(v string) *StartSynchronizationJobRequest {
	s.SynchronizationJobId = &v
	return s
}

type StartSynchronizationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartSynchronizationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartSynchronizationJobResponseBody) GoString() string {
	return s.String()
}

func (s *StartSynchronizationJobResponseBody) SetErrCode(v string) *StartSynchronizationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *StartSynchronizationJobResponseBody) SetErrMessage(v string) *StartSynchronizationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *StartSynchronizationJobResponseBody) SetRequestId(v string) *StartSynchronizationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartSynchronizationJobResponseBody) SetSuccess(v string) *StartSynchronizationJobResponseBody {
	s.Success = &v
	return s
}

type StartSynchronizationJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StartSynchronizationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartSynchronizationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s StartSynchronizationJobResponse) GoString() string {
	return s.String()
}

func (s *StartSynchronizationJobResponse) SetHeaders(v map[string]*string) *StartSynchronizationJobResponse {
	s.Headers = v
	return s
}

func (s *StartSynchronizationJobResponse) SetStatusCode(v int32) *StartSynchronizationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *StartSynchronizationJobResponse) SetBody(v *StartSynchronizationJobResponseBody) *StartSynchronizationJobResponse {
	s.Body = v
	return s
}

type StopDedicatedClusterRequest struct {
	// The ID of the cluster.
	//
	// >  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.
	DedicatedClusterId *string `json:"DedicatedClusterId,omitempty" xml:"DedicatedClusterId,omitempty"`
	// The name of the cluster.
	DedicatedClusterName *string `json:"DedicatedClusterName,omitempty" xml:"DedicatedClusterName,omitempty"`
	// The ID of the instance.
	//
	// >  You must specify one of the **InstanceId** and **DedicatedClusterId** parameters.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	OwnerId    *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The ID of the region in which the instance resides.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StopDedicatedClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDedicatedClusterRequest) GoString() string {
	return s.String()
}

func (s *StopDedicatedClusterRequest) SetDedicatedClusterId(v string) *StopDedicatedClusterRequest {
	s.DedicatedClusterId = &v
	return s
}

func (s *StopDedicatedClusterRequest) SetDedicatedClusterName(v string) *StopDedicatedClusterRequest {
	s.DedicatedClusterName = &v
	return s
}

func (s *StopDedicatedClusterRequest) SetInstanceId(v string) *StopDedicatedClusterRequest {
	s.InstanceId = &v
	return s
}

func (s *StopDedicatedClusterRequest) SetOwnerId(v string) *StopDedicatedClusterRequest {
	s.OwnerId = &v
	return s
}

func (s *StopDedicatedClusterRequest) SetRegionId(v string) *StopDedicatedClusterRequest {
	s.RegionId = &v
	return s
}

type StopDedicatedClusterResponseBody struct {
	// The error code returned if the request failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the request failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StopDedicatedClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopDedicatedClusterResponseBody) GoString() string {
	return s.String()
}

func (s *StopDedicatedClusterResponseBody) SetErrCode(v string) *StopDedicatedClusterResponseBody {
	s.ErrCode = &v
	return s
}

func (s *StopDedicatedClusterResponseBody) SetErrMessage(v string) *StopDedicatedClusterResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *StopDedicatedClusterResponseBody) SetHttpStatusCode(v string) *StopDedicatedClusterResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StopDedicatedClusterResponseBody) SetRequestId(v string) *StopDedicatedClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopDedicatedClusterResponseBody) SetSuccess(v string) *StopDedicatedClusterResponseBody {
	s.Success = &v
	return s
}

type StopDedicatedClusterResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopDedicatedClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopDedicatedClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDedicatedClusterResponse) GoString() string {
	return s.String()
}

func (s *StopDedicatedClusterResponse) SetHeaders(v map[string]*string) *StopDedicatedClusterResponse {
	s.Headers = v
	return s
}

func (s *StopDedicatedClusterResponse) SetStatusCode(v int32) *StopDedicatedClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *StopDedicatedClusterResponse) SetBody(v *StopDedicatedClusterResponseBody) *StopDedicatedClusterResponse {
	s.Body = v
	return s
}

type StopDtsJobRequest struct {
	// The ID of the data migration, data synchronization, or change tracking instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >
	// *   Default value: **Forward**.
	// *   You can set this parameter to **Reverse** to stop the reverse synchronization task only when the topology is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s StopDtsJobRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDtsJobRequest) GoString() string {
	return s.String()
}

func (s *StopDtsJobRequest) SetDtsInstanceId(v string) *StopDtsJobRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *StopDtsJobRequest) SetDtsJobId(v string) *StopDtsJobRequest {
	s.DtsJobId = &v
	return s
}

func (s *StopDtsJobRequest) SetRegionId(v string) *StopDtsJobRequest {
	s.RegionId = &v
	return s
}

func (s *StopDtsJobRequest) SetSynchronizationDirection(v string) *StopDtsJobRequest {
	s.SynchronizationDirection = &v
	return s
}

type StopDtsJobResponseBody struct {
	// The dynamic error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic error message, which is used to replace **%s** in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StopDtsJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopDtsJobResponseBody) GoString() string {
	return s.String()
}

func (s *StopDtsJobResponseBody) SetDynamicCode(v string) *StopDtsJobResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *StopDtsJobResponseBody) SetDynamicMessage(v string) *StopDtsJobResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *StopDtsJobResponseBody) SetErrCode(v string) *StopDtsJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *StopDtsJobResponseBody) SetErrMessage(v string) *StopDtsJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *StopDtsJobResponseBody) SetHttpStatusCode(v int32) *StopDtsJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StopDtsJobResponseBody) SetRequestId(v string) *StopDtsJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopDtsJobResponseBody) SetSuccess(v bool) *StopDtsJobResponseBody {
	s.Success = &v
	return s
}

type StopDtsJobResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopDtsJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopDtsJobResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDtsJobResponse) GoString() string {
	return s.String()
}

func (s *StopDtsJobResponse) SetHeaders(v map[string]*string) *StopDtsJobResponse {
	s.Headers = v
	return s
}

func (s *StopDtsJobResponse) SetStatusCode(v int32) *StopDtsJobResponse {
	s.StatusCode = &v
	return s
}

func (s *StopDtsJobResponse) SetBody(v *StopDtsJobResponseBody) *StopDtsJobResponse {
	s.Body = v
	return s
}

type StopDtsJobsRequest struct {
	// The ID of the data migration or data synchronization task.
	//
	// >
	// *   Separate multiple task IDs by **,** (commas).
	// *   You can call the [DescribeDtsJobs](~~209702~~) operation to query task IDs.
	DtsJobIds *string `json:"DtsJobIds,omitempty" xml:"DtsJobIds,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StopDtsJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDtsJobsRequest) GoString() string {
	return s.String()
}

func (s *StopDtsJobsRequest) SetDtsJobIds(v string) *StopDtsJobsRequest {
	s.DtsJobIds = &v
	return s
}

func (s *StopDtsJobsRequest) SetRegionId(v string) *StopDtsJobsRequest {
	s.RegionId = &v
	return s
}

type StopDtsJobsResponseBody struct {
	// The dynamic error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the returned value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the returned value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StopDtsJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopDtsJobsResponseBody) GoString() string {
	return s.String()
}

func (s *StopDtsJobsResponseBody) SetDynamicCode(v string) *StopDtsJobsResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *StopDtsJobsResponseBody) SetDynamicMessage(v string) *StopDtsJobsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *StopDtsJobsResponseBody) SetErrCode(v string) *StopDtsJobsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *StopDtsJobsResponseBody) SetErrMessage(v string) *StopDtsJobsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *StopDtsJobsResponseBody) SetHttpStatusCode(v int32) *StopDtsJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *StopDtsJobsResponseBody) SetRequestId(v string) *StopDtsJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopDtsJobsResponseBody) SetSuccess(v bool) *StopDtsJobsResponseBody {
	s.Success = &v
	return s
}

type StopDtsJobsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopDtsJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopDtsJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDtsJobsResponse) GoString() string {
	return s.String()
}

func (s *StopDtsJobsResponse) SetHeaders(v map[string]*string) *StopDtsJobsResponse {
	s.Headers = v
	return s
}

func (s *StopDtsJobsResponse) SetStatusCode(v int32) *StopDtsJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *StopDtsJobsResponse) SetBody(v *StopDtsJobsResponseBody) *StopDtsJobsResponse {
	s.Body = v
	return s
}

type StopMigrationJobRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StopMigrationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s StopMigrationJobRequest) GoString() string {
	return s.String()
}

func (s *StopMigrationJobRequest) SetAccountId(v string) *StopMigrationJobRequest {
	s.AccountId = &v
	return s
}

func (s *StopMigrationJobRequest) SetClientToken(v string) *StopMigrationJobRequest {
	s.ClientToken = &v
	return s
}

func (s *StopMigrationJobRequest) SetMigrationJobId(v string) *StopMigrationJobRequest {
	s.MigrationJobId = &v
	return s
}

func (s *StopMigrationJobRequest) SetOwnerId(v string) *StopMigrationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *StopMigrationJobRequest) SetRegionId(v string) *StopMigrationJobRequest {
	s.RegionId = &v
	return s
}

type StopMigrationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StopMigrationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopMigrationJobResponseBody) GoString() string {
	return s.String()
}

func (s *StopMigrationJobResponseBody) SetErrCode(v string) *StopMigrationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *StopMigrationJobResponseBody) SetErrMessage(v string) *StopMigrationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *StopMigrationJobResponseBody) SetRequestId(v string) *StopMigrationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopMigrationJobResponseBody) SetSuccess(v string) *StopMigrationJobResponseBody {
	s.Success = &v
	return s
}

type StopMigrationJobResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopMigrationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopMigrationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s StopMigrationJobResponse) GoString() string {
	return s.String()
}

func (s *StopMigrationJobResponse) SetHeaders(v map[string]*string) *StopMigrationJobResponse {
	s.Headers = v
	return s
}

func (s *StopMigrationJobResponse) SetStatusCode(v int32) *StopMigrationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *StopMigrationJobResponse) SetBody(v *StopMigrationJobResponseBody) *StopMigrationJobResponse {
	s.Body = v
	return s
}

type SummaryJobDetailRequest struct {
	// The ID of the data migration or data synchronization instance.
	//
	// >  You must specify at least one of the DtsJobId and DtsInstanceId parameters.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the data migration or data synchronization task.
	//
	// >  You must specify at least one of the DtsJobId and DtsInstanceId parameters.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The phase of the data migration task. Valid values:
	//
	// *   **02**: The task is in the schema migration phase.
	// *   **03**: The task is in the incremental migration phase.
	JobCode *string `json:"JobCode,omitempty" xml:"JobCode,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of schema definition. Valid values:
	//
	// *   **before**: schema migration or initial schema synchronization
	// *   **after**: DDL operations performed during incremental data migration or synchronization
	StructType *string `json:"StructType,omitempty" xml:"StructType,omitempty"`
	// The synchronization direction of the data synchronization task. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >
	// *   Default value: **Forward**.
	// *   You can set this parameter to **Reverse** to delete the reverse synchronization task only if the topology is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s SummaryJobDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s SummaryJobDetailRequest) GoString() string {
	return s.String()
}

func (s *SummaryJobDetailRequest) SetDtsInstanceId(v string) *SummaryJobDetailRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *SummaryJobDetailRequest) SetDtsJobId(v string) *SummaryJobDetailRequest {
	s.DtsJobId = &v
	return s
}

func (s *SummaryJobDetailRequest) SetJobCode(v string) *SummaryJobDetailRequest {
	s.JobCode = &v
	return s
}

func (s *SummaryJobDetailRequest) SetRegionId(v string) *SummaryJobDetailRequest {
	s.RegionId = &v
	return s
}

func (s *SummaryJobDetailRequest) SetStructType(v string) *SummaryJobDetailRequest {
	s.StructType = &v
	return s
}

func (s *SummaryJobDetailRequest) SetSynchronizationDirection(v string) *SummaryJobDetailRequest {
	s.SynchronizationDirection = &v
	return s
}

type SummaryJobDetailResponseBody struct {
	// The error code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the data migration or data synchronization task.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned information about the migrated or synchronized objects in arrays.
	//
	// >  The arrays are in the following format: \[{"key":"Function","state":5,"totalCount":22},{"key":"Procedure","state":5,"totalCount":26},{"key":"Table","state":0,"totalCount":68},{"key":"View","state":5,"totalCount":100}].
	ProgressSummaryDetails []*SummaryJobDetailResponseBodyProgressSummaryDetails `json:"ProgressSummaryDetails,omitempty" xml:"ProgressSummaryDetails,omitempty" type:"Repeated"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SummaryJobDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SummaryJobDetailResponseBody) GoString() string {
	return s.String()
}

func (s *SummaryJobDetailResponseBody) SetCode(v string) *SummaryJobDetailResponseBody {
	s.Code = &v
	return s
}

func (s *SummaryJobDetailResponseBody) SetHttpStatusCode(v int32) *SummaryJobDetailResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SummaryJobDetailResponseBody) SetJobId(v string) *SummaryJobDetailResponseBody {
	s.JobId = &v
	return s
}

func (s *SummaryJobDetailResponseBody) SetProgressSummaryDetails(v []*SummaryJobDetailResponseBodyProgressSummaryDetails) *SummaryJobDetailResponseBody {
	s.ProgressSummaryDetails = v
	return s
}

func (s *SummaryJobDetailResponseBody) SetRequestId(v string) *SummaryJobDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *SummaryJobDetailResponseBody) SetSuccess(v bool) *SummaryJobDetailResponseBody {
	s.Success = &v
	return s
}

type SummaryJobDetailResponseBodyProgressSummaryDetails struct {
	// The type of migrated or synchronized object. Valid values: **Table**, **Constraint**, **Index**, **View**, **Materialize View**, **Type**, **Synonym**, **Trigger**, **Function**, **Procedure**, **Package**, **Default**, **Rule**, **PlanGuide**, and **Sequence**.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The state of the data migration or data synchronization task. Valid values:
	//
	// *   **0**: The task was complete.
	// *   **1**: The task was waiting to start.
	// *   **2**: The task was being initialized.
	// *   **3**: The task was in progress.
	// *   **4**: An error occurred.
	// *   **5**: The task failed.
	State *int32 `json:"State,omitempty" xml:"State,omitempty"`
	// The total number of migrated or synchronized objects.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SummaryJobDetailResponseBodyProgressSummaryDetails) String() string {
	return tea.Prettify(s)
}

func (s SummaryJobDetailResponseBodyProgressSummaryDetails) GoString() string {
	return s.String()
}

func (s *SummaryJobDetailResponseBodyProgressSummaryDetails) SetKey(v string) *SummaryJobDetailResponseBodyProgressSummaryDetails {
	s.Key = &v
	return s
}

func (s *SummaryJobDetailResponseBodyProgressSummaryDetails) SetState(v int32) *SummaryJobDetailResponseBodyProgressSummaryDetails {
	s.State = &v
	return s
}

func (s *SummaryJobDetailResponseBodyProgressSummaryDetails) SetTotalCount(v int64) *SummaryJobDetailResponseBodyProgressSummaryDetails {
	s.TotalCount = &v
	return s
}

type SummaryJobDetailResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SummaryJobDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SummaryJobDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s SummaryJobDetailResponse) GoString() string {
	return s.String()
}

func (s *SummaryJobDetailResponse) SetHeaders(v map[string]*string) *SummaryJobDetailResponse {
	s.Headers = v
	return s
}

func (s *SummaryJobDetailResponse) SetStatusCode(v int32) *SummaryJobDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *SummaryJobDetailResponse) SetBody(v *SummaryJobDetailResponseBody) *SummaryJobDetailResponse {
	s.Body = v
	return s
}

type SuspendDtsJobRequest struct {
	// The ID of the data migration, data synchronization, or change tracking instance.
	DtsInstanceId *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	// The ID of the data migration, data synchronization, or change tracking task.
	//
	// >  You can call the [DescribeDtsJobs](~~209702~~) operation to obtain the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**: Data is synchronized from the source database to the destination database.
	// *   **Reverse**: Data is synchronized from the destination database to the source database.
	//
	// >
	// *   Default value: **Forward**.
	// *   You can set this parameter to **Reverse** to pause the reverse synchronization task only if the topology is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s SuspendDtsJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendDtsJobRequest) GoString() string {
	return s.String()
}

func (s *SuspendDtsJobRequest) SetDtsInstanceId(v string) *SuspendDtsJobRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *SuspendDtsJobRequest) SetDtsJobId(v string) *SuspendDtsJobRequest {
	s.DtsJobId = &v
	return s
}

func (s *SuspendDtsJobRequest) SetRegionId(v string) *SuspendDtsJobRequest {
	s.RegionId = &v
	return s
}

func (s *SuspendDtsJobRequest) SetSynchronizationDirection(v string) *SuspendDtsJobRequest {
	s.SynchronizationDirection = &v
	return s
}

type SuspendDtsJobResponseBody struct {
	// The dynamic error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SuspendDtsJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendDtsJobResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendDtsJobResponseBody) SetDynamicCode(v string) *SuspendDtsJobResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *SuspendDtsJobResponseBody) SetDynamicMessage(v string) *SuspendDtsJobResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *SuspendDtsJobResponseBody) SetErrCode(v string) *SuspendDtsJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *SuspendDtsJobResponseBody) SetErrMessage(v string) *SuspendDtsJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *SuspendDtsJobResponseBody) SetHttpStatusCode(v int32) *SuspendDtsJobResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SuspendDtsJobResponseBody) SetRequestId(v string) *SuspendDtsJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendDtsJobResponseBody) SetSuccess(v bool) *SuspendDtsJobResponseBody {
	s.Success = &v
	return s
}

type SuspendDtsJobResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SuspendDtsJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SuspendDtsJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendDtsJobResponse) GoString() string {
	return s.String()
}

func (s *SuspendDtsJobResponse) SetHeaders(v map[string]*string) *SuspendDtsJobResponse {
	s.Headers = v
	return s
}

func (s *SuspendDtsJobResponse) SetStatusCode(v int32) *SuspendDtsJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SuspendDtsJobResponse) SetBody(v *SuspendDtsJobResponseBody) *SuspendDtsJobResponse {
	s.Body = v
	return s
}

type SuspendDtsJobsRequest struct {
	// The ID of the data migration or data synchronization task.
	//
	// >
	// *   For multiple tasks, separate them with commas (,).
	// *   You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobIds *string `json:"DtsJobIds,omitempty" xml:"DtsJobIds,omitempty"`
	// The ID of the region in which the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SuspendDtsJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendDtsJobsRequest) GoString() string {
	return s.String()
}

func (s *SuspendDtsJobsRequest) SetDtsJobIds(v string) *SuspendDtsJobsRequest {
	s.DtsJobIds = &v
	return s
}

func (s *SuspendDtsJobsRequest) SetRegionId(v string) *SuspendDtsJobsRequest {
	s.RegionId = &v
	return s
}

type SuspendDtsJobsResponseBody struct {
	// The dynamic error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SuspendDtsJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendDtsJobsResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendDtsJobsResponseBody) SetDynamicCode(v string) *SuspendDtsJobsResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *SuspendDtsJobsResponseBody) SetDynamicMessage(v string) *SuspendDtsJobsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *SuspendDtsJobsResponseBody) SetErrCode(v string) *SuspendDtsJobsResponseBody {
	s.ErrCode = &v
	return s
}

func (s *SuspendDtsJobsResponseBody) SetErrMessage(v string) *SuspendDtsJobsResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *SuspendDtsJobsResponseBody) SetHttpStatusCode(v int32) *SuspendDtsJobsResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SuspendDtsJobsResponseBody) SetRequestId(v string) *SuspendDtsJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendDtsJobsResponseBody) SetSuccess(v bool) *SuspendDtsJobsResponseBody {
	s.Success = &v
	return s
}

type SuspendDtsJobsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SuspendDtsJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SuspendDtsJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendDtsJobsResponse) GoString() string {
	return s.String()
}

func (s *SuspendDtsJobsResponse) SetHeaders(v map[string]*string) *SuspendDtsJobsResponse {
	s.Headers = v
	return s
}

func (s *SuspendDtsJobsResponse) SetStatusCode(v int32) *SuspendDtsJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *SuspendDtsJobsResponse) SetBody(v *SuspendDtsJobsResponseBody) *SuspendDtsJobsResponse {
	s.Body = v
	return s
}

type SuspendMigrationJobRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The **ClientToken** parameter can contain only ASCII characters and cannot exceed 64 characters in length.
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the data migration instance. You can call the **DescribeMigrationJobs** operation to query all data migration instances.
	MigrationJobId *string `json:"MigrationJobId,omitempty" xml:"MigrationJobId,omitempty"`
	OwnerId        *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SuspendMigrationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendMigrationJobRequest) GoString() string {
	return s.String()
}

func (s *SuspendMigrationJobRequest) SetAccountId(v string) *SuspendMigrationJobRequest {
	s.AccountId = &v
	return s
}

func (s *SuspendMigrationJobRequest) SetClientToken(v string) *SuspendMigrationJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SuspendMigrationJobRequest) SetMigrationJobId(v string) *SuspendMigrationJobRequest {
	s.MigrationJobId = &v
	return s
}

func (s *SuspendMigrationJobRequest) SetOwnerId(v string) *SuspendMigrationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SuspendMigrationJobRequest) SetRegionId(v string) *SuspendMigrationJobRequest {
	s.RegionId = &v
	return s
}

type SuspendMigrationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SuspendMigrationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendMigrationJobResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendMigrationJobResponseBody) SetErrCode(v string) *SuspendMigrationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *SuspendMigrationJobResponseBody) SetErrMessage(v string) *SuspendMigrationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *SuspendMigrationJobResponseBody) SetRequestId(v string) *SuspendMigrationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendMigrationJobResponseBody) SetSuccess(v string) *SuspendMigrationJobResponseBody {
	s.Success = &v
	return s
}

type SuspendMigrationJobResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SuspendMigrationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SuspendMigrationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendMigrationJobResponse) GoString() string {
	return s.String()
}

func (s *SuspendMigrationJobResponse) SetHeaders(v map[string]*string) *SuspendMigrationJobResponse {
	s.Headers = v
	return s
}

func (s *SuspendMigrationJobResponse) SetStatusCode(v int32) *SuspendMigrationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SuspendMigrationJobResponse) SetBody(v *SuspendMigrationJobResponseBody) *SuspendMigrationJobResponse {
	s.Body = v
	return s
}

type SuspendSynchronizationJobRequest struct {
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >
	// *   Default value: **Forward**.
	// *   You can set this parameter to **Reverse** to pause reverse synchronization only when the topology is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the **DescribeSynchronizationJobs** operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s SuspendSynchronizationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendSynchronizationJobRequest) GoString() string {
	return s.String()
}

func (s *SuspendSynchronizationJobRequest) SetAccountId(v string) *SuspendSynchronizationJobRequest {
	s.AccountId = &v
	return s
}

func (s *SuspendSynchronizationJobRequest) SetOwnerId(v string) *SuspendSynchronizationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SuspendSynchronizationJobRequest) SetRegionId(v string) *SuspendSynchronizationJobRequest {
	s.RegionId = &v
	return s
}

func (s *SuspendSynchronizationJobRequest) SetSynchronizationDirection(v string) *SuspendSynchronizationJobRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *SuspendSynchronizationJobRequest) SetSynchronizationJobId(v string) *SuspendSynchronizationJobRequest {
	s.SynchronizationJobId = &v
	return s
}

type SuspendSynchronizationJobResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SuspendSynchronizationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendSynchronizationJobResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendSynchronizationJobResponseBody) SetErrCode(v string) *SuspendSynchronizationJobResponseBody {
	s.ErrCode = &v
	return s
}

func (s *SuspendSynchronizationJobResponseBody) SetErrMessage(v string) *SuspendSynchronizationJobResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *SuspendSynchronizationJobResponseBody) SetRequestId(v string) *SuspendSynchronizationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendSynchronizationJobResponseBody) SetSuccess(v string) *SuspendSynchronizationJobResponseBody {
	s.Success = &v
	return s
}

type SuspendSynchronizationJobResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SuspendSynchronizationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SuspendSynchronizationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendSynchronizationJobResponse) GoString() string {
	return s.String()
}

func (s *SuspendSynchronizationJobResponse) SetHeaders(v map[string]*string) *SuspendSynchronizationJobResponse {
	s.Headers = v
	return s
}

func (s *SuspendSynchronizationJobResponse) SetStatusCode(v int32) *SuspendSynchronizationJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SuspendSynchronizationJobResponse) SetBody(v *SuspendSynchronizationJobResponseBody) *SuspendSynchronizationJobResponse {
	s.Body = v
	return s
}

type SwitchPhysicalDtsJobToCloudRequest struct {
	DtsInstanceId            *string `json:"DtsInstanceId,omitempty" xml:"DtsInstanceId,omitempty"`
	DtsJobId                 *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	RegionId                 *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
}

func (s SwitchPhysicalDtsJobToCloudRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchPhysicalDtsJobToCloudRequest) GoString() string {
	return s.String()
}

func (s *SwitchPhysicalDtsJobToCloudRequest) SetDtsInstanceId(v string) *SwitchPhysicalDtsJobToCloudRequest {
	s.DtsInstanceId = &v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudRequest) SetDtsJobId(v string) *SwitchPhysicalDtsJobToCloudRequest {
	s.DtsJobId = &v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudRequest) SetRegionId(v string) *SwitchPhysicalDtsJobToCloudRequest {
	s.RegionId = &v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudRequest) SetSynchronizationDirection(v string) *SwitchPhysicalDtsJobToCloudRequest {
	s.SynchronizationDirection = &v
	return s
}

type SwitchPhysicalDtsJobToCloudResponseBody struct {
	DynamicCode    *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrCode        *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	ErrMessage     *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	HttpStatusCode *int32  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SwitchPhysicalDtsJobToCloudResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchPhysicalDtsJobToCloudResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchPhysicalDtsJobToCloudResponseBody) SetDynamicCode(v string) *SwitchPhysicalDtsJobToCloudResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudResponseBody) SetDynamicMessage(v string) *SwitchPhysicalDtsJobToCloudResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudResponseBody) SetErrCode(v string) *SwitchPhysicalDtsJobToCloudResponseBody {
	s.ErrCode = &v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudResponseBody) SetErrMessage(v string) *SwitchPhysicalDtsJobToCloudResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudResponseBody) SetHttpStatusCode(v int32) *SwitchPhysicalDtsJobToCloudResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudResponseBody) SetRequestId(v string) *SwitchPhysicalDtsJobToCloudResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudResponseBody) SetSuccess(v bool) *SwitchPhysicalDtsJobToCloudResponseBody {
	s.Success = &v
	return s
}

type SwitchPhysicalDtsJobToCloudResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SwitchPhysicalDtsJobToCloudResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SwitchPhysicalDtsJobToCloudResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchPhysicalDtsJobToCloudResponse) GoString() string {
	return s.String()
}

func (s *SwitchPhysicalDtsJobToCloudResponse) SetHeaders(v map[string]*string) *SwitchPhysicalDtsJobToCloudResponse {
	s.Headers = v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudResponse) SetStatusCode(v int32) *SwitchPhysicalDtsJobToCloudResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchPhysicalDtsJobToCloudResponse) SetBody(v *SwitchPhysicalDtsJobToCloudResponseBody) *SwitchPhysicalDtsJobToCloudResponse {
	s.Body = v
	return s
}

type SwitchSynchronizationEndpointRequest struct {
	Endpoint       *SwitchSynchronizationEndpointRequestEndpoint       `json:"Endpoint,omitempty" xml:"Endpoint,omitempty" type:"Struct"`
	SourceEndpoint *SwitchSynchronizationEndpointRequestSourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The ID of the Alibaba Cloud account. You do not need to specify this parameter because this parameter will be removed in the future.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The synchronization direction. Valid values:
	//
	// *   **Forward**
	// *   **Reverse**
	//
	// >  Default value: **Forward**.
	//
	// The value **Reverse** takes effect only if the topology of the data synchronization instance is two-way synchronization.
	SynchronizationDirection *string `json:"SynchronizationDirection,omitempty" xml:"SynchronizationDirection,omitempty"`
	// The ID of the data synchronization instance. You can call the DescribeSynchronizationJobs operation to query the instance ID.
	SynchronizationJobId *string `json:"SynchronizationJobId,omitempty" xml:"SynchronizationJobId,omitempty"`
}

func (s SwitchSynchronizationEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchSynchronizationEndpointRequest) GoString() string {
	return s.String()
}

func (s *SwitchSynchronizationEndpointRequest) SetEndpoint(v *SwitchSynchronizationEndpointRequestEndpoint) *SwitchSynchronizationEndpointRequest {
	s.Endpoint = v
	return s
}

func (s *SwitchSynchronizationEndpointRequest) SetSourceEndpoint(v *SwitchSynchronizationEndpointRequestSourceEndpoint) *SwitchSynchronizationEndpointRequest {
	s.SourceEndpoint = v
	return s
}

func (s *SwitchSynchronizationEndpointRequest) SetAccountId(v string) *SwitchSynchronizationEndpointRequest {
	s.AccountId = &v
	return s
}

func (s *SwitchSynchronizationEndpointRequest) SetOwnerId(v string) *SwitchSynchronizationEndpointRequest {
	s.OwnerId = &v
	return s
}

func (s *SwitchSynchronizationEndpointRequest) SetRegionId(v string) *SwitchSynchronizationEndpointRequest {
	s.RegionId = &v
	return s
}

func (s *SwitchSynchronizationEndpointRequest) SetSynchronizationDirection(v string) *SwitchSynchronizationEndpointRequest {
	s.SynchronizationDirection = &v
	return s
}

func (s *SwitchSynchronizationEndpointRequest) SetSynchronizationJobId(v string) *SwitchSynchronizationEndpointRequest {
	s.SynchronizationJobId = &v
	return s
}

type SwitchSynchronizationEndpointRequestEndpoint struct {
	// The IP address of the database.
	//
	// >  You must specify the IP address only if the **Endpoint.InstanceType** parameter is set to **Express**.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The ID of the ECS instance or the virtual private cloud (VPC).
	//
	// >
	// *   If the **Endpoint.InstanceType** parameter is set to **ECS**, you must specify the ID of the ECS instance.
	// *   If the **Endpoint.InstanceType** parameter is set to **Express**, you must specify the ID of the VPC.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The instance type of the database. Valid values:
	//
	// *   **LocalInstance**: self-managed database with a public IP address
	// *   **ECS**: self-managed database that is hosted on ECS
	// *   **Express**: self-managed database that is connected over Express Connect
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The service port number of the database.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// Specifies whether to update the connection settings of the source instance or the destination instance. Valid values:
	//
	// *   **Source**
	// *   **Destination**
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SwitchSynchronizationEndpointRequestEndpoint) String() string {
	return tea.Prettify(s)
}

func (s SwitchSynchronizationEndpointRequestEndpoint) GoString() string {
	return s.String()
}

func (s *SwitchSynchronizationEndpointRequestEndpoint) SetIP(v string) *SwitchSynchronizationEndpointRequestEndpoint {
	s.IP = &v
	return s
}

func (s *SwitchSynchronizationEndpointRequestEndpoint) SetInstanceId(v string) *SwitchSynchronizationEndpointRequestEndpoint {
	s.InstanceId = &v
	return s
}

func (s *SwitchSynchronizationEndpointRequestEndpoint) SetInstanceType(v string) *SwitchSynchronizationEndpointRequestEndpoint {
	s.InstanceType = &v
	return s
}

func (s *SwitchSynchronizationEndpointRequestEndpoint) SetPort(v string) *SwitchSynchronizationEndpointRequestEndpoint {
	s.Port = &v
	return s
}

func (s *SwitchSynchronizationEndpointRequestEndpoint) SetType(v string) *SwitchSynchronizationEndpointRequestEndpoint {
	s.Type = &v
	return s
}

type SwitchSynchronizationEndpointRequestSourceEndpoint struct {
	// The ID of the Alibaba Cloud account to which the source instance belongs. You must specify this parameter only if the source instance and the destination instance belong to different Alibaba Cloud accounts.
	OwnerID *string `json:"OwnerID,omitempty" xml:"OwnerID,omitempty"`
	// The authorized Resource Access Management (RAM) role of the source instance. You must specify the RAM role only if the source instance and the destination instance belong to different Alibaba Cloud accounts. You can use the RAM role to allow the Alibaba Cloud account that owns the destination instance to access the source instance.
	//
	// >  For information about the permissions and authorization methods of the RAM role, see [Configure RAM authorization for cross-account data migration and synchronization](~~48468~~).
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s SwitchSynchronizationEndpointRequestSourceEndpoint) String() string {
	return tea.Prettify(s)
}

func (s SwitchSynchronizationEndpointRequestSourceEndpoint) GoString() string {
	return s.String()
}

func (s *SwitchSynchronizationEndpointRequestSourceEndpoint) SetOwnerID(v string) *SwitchSynchronizationEndpointRequestSourceEndpoint {
	s.OwnerID = &v
	return s
}

func (s *SwitchSynchronizationEndpointRequestSourceEndpoint) SetRole(v string) *SwitchSynchronizationEndpointRequestSourceEndpoint {
	s.Role = &v
	return s
}

type SwitchSynchronizationEndpointResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The task ID. You must specify the task ID when you call the [DescribeEndpointSwitchStatus](~~135598~~) operation to query the execution status of the task.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s SwitchSynchronizationEndpointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchSynchronizationEndpointResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchSynchronizationEndpointResponseBody) SetErrCode(v string) *SwitchSynchronizationEndpointResponseBody {
	s.ErrCode = &v
	return s
}

func (s *SwitchSynchronizationEndpointResponseBody) SetErrMessage(v string) *SwitchSynchronizationEndpointResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *SwitchSynchronizationEndpointResponseBody) SetRequestId(v string) *SwitchSynchronizationEndpointResponseBody {
	s.RequestId = &v
	return s
}

func (s *SwitchSynchronizationEndpointResponseBody) SetSuccess(v string) *SwitchSynchronizationEndpointResponseBody {
	s.Success = &v
	return s
}

func (s *SwitchSynchronizationEndpointResponseBody) SetTaskId(v string) *SwitchSynchronizationEndpointResponseBody {
	s.TaskId = &v
	return s
}

type SwitchSynchronizationEndpointResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SwitchSynchronizationEndpointResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SwitchSynchronizationEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchSynchronizationEndpointResponse) GoString() string {
	return s.String()
}

func (s *SwitchSynchronizationEndpointResponse) SetHeaders(v map[string]*string) *SwitchSynchronizationEndpointResponse {
	s.Headers = v
	return s
}

func (s *SwitchSynchronizationEndpointResponse) SetStatusCode(v int32) *SwitchSynchronizationEndpointResponse {
	s.StatusCode = &v
	return s
}

func (s *SwitchSynchronizationEndpointResponse) SetBody(v *SwitchSynchronizationEndpointResponseBody) *SwitchSynchronizationEndpointResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	// The ID of the region where the data migration, data synchronization, or change tracking instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId   *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.
	ResourceType *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	// The tag key.
	//
	// >
	// *   N specifies the serial number of the tag. For example, Tag.1.Key specifies the key of the first tag and Tag.2.Key specifies the key of the second tag.
	// *   This parameter cannot be an empty string.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// >
	// *   N specifies the serial number of the tag. For example, Tag.1.Value specifies the value of the first tag and Tag.2.Value specifies the value of the second tag.
	// *   This parameter can be an empty string.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetErrCode(v string) *TagResourcesResponseBody {
	s.ErrCode = &v
	return s
}

func (s *TagResourcesResponseBody) SetErrMessage(v string) *TagResourcesResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *TagResourcesResponseBody) SetSuccess(v bool) *TagResourcesResponseBody {
	s.Success = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type TransferInstanceClassRequest struct {
	// The ID of the data migration or data synchronization task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The new instance class of the DTS instance. You can call the [DescribeDtsJobDetail](~~208925~~) operation to query the original instance class of the DTS instance.
	//
	// *   DTS supports the following instance classes for a data migration instance: **xxlarge**, **xlarge**, **large**, **medium**, and **small**.
	// *   DTS supports the following instance classes for a data synchronization instance: **large**, **medium**, **small**, and **micro**.
	//
	// >  For more information about the test performance of each instance class, see [Specifications of data migration instances](~~26606~~) and [Specifications of data synchronization instances](~~26605~~).
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// Specifies whether to upgrade or downgrade the DTS instance. Valid values:
	//
	// *   **UPGRADE**
	// *   **DOWNGRADE**
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	// The ID of the region where the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s TransferInstanceClassRequest) String() string {
	return tea.Prettify(s)
}

func (s TransferInstanceClassRequest) GoString() string {
	return s.String()
}

func (s *TransferInstanceClassRequest) SetDtsJobId(v string) *TransferInstanceClassRequest {
	s.DtsJobId = &v
	return s
}

func (s *TransferInstanceClassRequest) SetInstanceClass(v string) *TransferInstanceClassRequest {
	s.InstanceClass = &v
	return s
}

func (s *TransferInstanceClassRequest) SetOrderType(v string) *TransferInstanceClassRequest {
	s.OrderType = &v
	return s
}

func (s *TransferInstanceClassRequest) SetRegionId(v string) *TransferInstanceClassRequest {
	s.RegionId = &v
	return s
}

type TransferInstanceClassResponseBody struct {
	// The billing method of the DTS instance. Valid values:
	//
	// *   **POSTPAY**: pay-as-you-go
	// *   **PREPAY**: subscription
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The error code.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the data migration or data synchronization task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The expiration time of the DTS instance.
	//
	// >  This parameter is returned only if the ChargeType parameter is set to **PREPAY**.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of DTS instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// *   **true**: The call was successful.
	// *   **false**:The call failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s TransferInstanceClassResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TransferInstanceClassResponseBody) GoString() string {
	return s.String()
}

func (s *TransferInstanceClassResponseBody) SetChargeType(v string) *TransferInstanceClassResponseBody {
	s.ChargeType = &v
	return s
}

func (s *TransferInstanceClassResponseBody) SetCode(v string) *TransferInstanceClassResponseBody {
	s.Code = &v
	return s
}

func (s *TransferInstanceClassResponseBody) SetDtsJobId(v string) *TransferInstanceClassResponseBody {
	s.DtsJobId = &v
	return s
}

func (s *TransferInstanceClassResponseBody) SetDynamicMessage(v string) *TransferInstanceClassResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *TransferInstanceClassResponseBody) SetEndTime(v string) *TransferInstanceClassResponseBody {
	s.EndTime = &v
	return s
}

func (s *TransferInstanceClassResponseBody) SetErrCode(v string) *TransferInstanceClassResponseBody {
	s.ErrCode = &v
	return s
}

func (s *TransferInstanceClassResponseBody) SetErrMessage(v string) *TransferInstanceClassResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *TransferInstanceClassResponseBody) SetHttpStatusCode(v int32) *TransferInstanceClassResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *TransferInstanceClassResponseBody) SetInstanceId(v string) *TransferInstanceClassResponseBody {
	s.InstanceId = &v
	return s
}

func (s *TransferInstanceClassResponseBody) SetRequestId(v string) *TransferInstanceClassResponseBody {
	s.RequestId = &v
	return s
}

func (s *TransferInstanceClassResponseBody) SetSuccess(v bool) *TransferInstanceClassResponseBody {
	s.Success = &v
	return s
}

type TransferInstanceClassResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TransferInstanceClassResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TransferInstanceClassResponse) String() string {
	return tea.Prettify(s)
}

func (s TransferInstanceClassResponse) GoString() string {
	return s.String()
}

func (s *TransferInstanceClassResponse) SetHeaders(v map[string]*string) *TransferInstanceClassResponse {
	s.Headers = v
	return s
}

func (s *TransferInstanceClassResponse) SetStatusCode(v int32) *TransferInstanceClassResponse {
	s.StatusCode = &v
	return s
}

func (s *TransferInstanceClassResponse) SetBody(v *TransferInstanceClassResponseBody) *TransferInstanceClassResponse {
	s.Body = v
	return s
}

type TransferPayTypeRequest struct {
	// The subscription length.
	//
	// *   If the **Period** parameter is set to **Year**, the value range is **1** to **5**.
	// *   If the **Period** parameter is set to **Month**, the value range is **1** to **60**.
	//
	// >  You must specify this parameter only if you set the **ChargeType** parameter to **PrePaid**.
	BuyCount *string `json:"BuyCount,omitempty" xml:"BuyCount,omitempty"`
	// The billing method that you want to use. Valid values:
	//
	// *   **PrePaid**: subscription
	// *   **PostPaid**: pay-as-you-go
	//
	// >
	// *   The billing method of subscription instances cannot be changed to pay-as-you-go. To prevent resource waste, determine whether you need to change the billing method of your resources.
	// *   If you do not need to change the billing method, specify the current billing method.
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The ID of the data synchronization or change tracking task. You can call the [DescribeDtsJobs](~~209702~~) operation to query the task ID.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The billing cycle of the subscription instance. Valid values:
	//
	// *   **Year**
	// *   **Month** (default value)
	//
	// >  You must specify this parameter only if you set the **ChargeType** parameter to **PrePaid**.
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The ID of the region where the DTS instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s TransferPayTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s TransferPayTypeRequest) GoString() string {
	return s.String()
}

func (s *TransferPayTypeRequest) SetBuyCount(v string) *TransferPayTypeRequest {
	s.BuyCount = &v
	return s
}

func (s *TransferPayTypeRequest) SetChargeType(v string) *TransferPayTypeRequest {
	s.ChargeType = &v
	return s
}

func (s *TransferPayTypeRequest) SetDtsJobId(v string) *TransferPayTypeRequest {
	s.DtsJobId = &v
	return s
}

func (s *TransferPayTypeRequest) SetPeriod(v string) *TransferPayTypeRequest {
	s.Period = &v
	return s
}

func (s *TransferPayTypeRequest) SetRegionId(v string) *TransferPayTypeRequest {
	s.RegionId = &v
	return s
}

type TransferPayTypeResponseBody struct {
	// The billing method of the DTS instance. Valid values:
	//
	// *   **PrePaid**: subscription
	// *   **PostPaid**: pay-as-you-go
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The error code. This parameter will be removed in the future.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the DTS task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and the return value of the **DynamicMessage** parameter is **DtsJobId**, the specified **DtsJobId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The expiration time of the subscription instance. The value is a UNIX timestamp.
	//
	// >
	// *   If the DTS instance is a pay-as-you-go instance, the value of this parameter is empty.
	// *   You can use a search engine to obtain a UNIX timestamp converter.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the DTS instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// *   **true**: The call was successful.
	// *   **false**: The call failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s TransferPayTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TransferPayTypeResponseBody) GoString() string {
	return s.String()
}

func (s *TransferPayTypeResponseBody) SetChargeType(v string) *TransferPayTypeResponseBody {
	s.ChargeType = &v
	return s
}

func (s *TransferPayTypeResponseBody) SetCode(v string) *TransferPayTypeResponseBody {
	s.Code = &v
	return s
}

func (s *TransferPayTypeResponseBody) SetDtsJobId(v string) *TransferPayTypeResponseBody {
	s.DtsJobId = &v
	return s
}

func (s *TransferPayTypeResponseBody) SetDynamicMessage(v string) *TransferPayTypeResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *TransferPayTypeResponseBody) SetEndTime(v string) *TransferPayTypeResponseBody {
	s.EndTime = &v
	return s
}

func (s *TransferPayTypeResponseBody) SetErrCode(v string) *TransferPayTypeResponseBody {
	s.ErrCode = &v
	return s
}

func (s *TransferPayTypeResponseBody) SetErrMessage(v string) *TransferPayTypeResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *TransferPayTypeResponseBody) SetHttpStatusCode(v int32) *TransferPayTypeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *TransferPayTypeResponseBody) SetInstanceId(v string) *TransferPayTypeResponseBody {
	s.InstanceId = &v
	return s
}

func (s *TransferPayTypeResponseBody) SetRequestId(v string) *TransferPayTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *TransferPayTypeResponseBody) SetSuccess(v bool) *TransferPayTypeResponseBody {
	s.Success = &v
	return s
}

type TransferPayTypeResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *TransferPayTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TransferPayTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s TransferPayTypeResponse) GoString() string {
	return s.String()
}

func (s *TransferPayTypeResponse) SetHeaders(v map[string]*string) *TransferPayTypeResponse {
	s.Headers = v
	return s
}

func (s *TransferPayTypeResponse) SetStatusCode(v int32) *TransferPayTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *TransferPayTypeResponse) SetBody(v *TransferPayTypeResponseBody) *TransferPayTypeResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	// Specifies whether to unbind all tags from the specified instances. Valid values:
	//
	// *   **true**: unbinds all tags from the specified instances.
	// *   **false**: To unbind only specific tags, you must specify the **TagKey.N** parameter.
	//
	// >
	// *   You must specify at least one of the All and **TagKey.N** parameters.
	// *   If you specify both the All parameter and the **TagKey.N** parameter, the All parameter does not take effect.
	All *bool `json:"All,omitempty" xml:"All,omitempty"`
	// The ID of the region where the data migration, data synchronization, or change tracking instance resides. For more information, see [List of supported regions](~~141033~~).
	RegionId   *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The resource type. Valid value: **ALIYUN::DTS::INSTANCE**.
	ResourceType *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetErrCode(v string) *UntagResourcesResponseBody {
	s.ErrCode = &v
	return s
}

func (s *UntagResourcesResponseBody) SetErrMessage(v string) *UntagResourcesResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UntagResourcesResponseBody) SetSuccess(v bool) *UntagResourcesResponseBody {
	s.Success = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpgradeTwoWayRequest struct {
	// The instance class of the two-way synchronization task. Valid values: **large**, **medium**, **micro**, and **small**.
	//
	// >  For more information, see [Specifications of data synchronization instances](~~26605~~).
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// The ID of the data synchronization instance. You can call the [DescribeDtsJobs](~~209702~~) operation to query the instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The region ID of the DTS instance. For more information, see [List of supported regions](~~141033~~).
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UpgradeTwoWayRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeTwoWayRequest) GoString() string {
	return s.String()
}

func (s *UpgradeTwoWayRequest) SetInstanceClass(v string) *UpgradeTwoWayRequest {
	s.InstanceClass = &v
	return s
}

func (s *UpgradeTwoWayRequest) SetInstanceId(v string) *UpgradeTwoWayRequest {
	s.InstanceId = &v
	return s
}

func (s *UpgradeTwoWayRequest) SetRegionId(v string) *UpgradeTwoWayRequest {
	s.RegionId = &v
	return s
}

type UpgradeTwoWayResponseBody struct {
	// The dynamic error code. This parameter will be removed in the future.
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace the **%s** variable in the **ErrMessage** parameter.
	//
	// >  If the return value of the **ErrMessage** parameter is **The Value of Input Parameter %s is not valid** and that of the **DynamicMessage** parameter is **InstanceId**, the specified **InstanceId** parameter is invalid.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// The error code returned if the call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The HTTP status code.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// *   **true**: The call was successful.
	// *   **false**: The call failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpgradeTwoWayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeTwoWayResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeTwoWayResponseBody) SetDynamicCode(v string) *UpgradeTwoWayResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *UpgradeTwoWayResponseBody) SetDynamicMessage(v string) *UpgradeTwoWayResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *UpgradeTwoWayResponseBody) SetErrCode(v string) *UpgradeTwoWayResponseBody {
	s.ErrCode = &v
	return s
}

func (s *UpgradeTwoWayResponseBody) SetErrMessage(v string) *UpgradeTwoWayResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *UpgradeTwoWayResponseBody) SetHttpStatusCode(v int32) *UpgradeTwoWayResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpgradeTwoWayResponseBody) SetRequestId(v string) *UpgradeTwoWayResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeTwoWayResponseBody) SetSuccess(v bool) *UpgradeTwoWayResponseBody {
	s.Success = &v
	return s
}

type UpgradeTwoWayResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpgradeTwoWayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpgradeTwoWayResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeTwoWayResponse) GoString() string {
	return s.String()
}

func (s *UpgradeTwoWayResponse) SetHeaders(v map[string]*string) *UpgradeTwoWayResponse {
	s.Headers = v
	return s
}

func (s *UpgradeTwoWayResponse) SetStatusCode(v int32) *UpgradeTwoWayResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeTwoWayResponse) SetBody(v *UpgradeTwoWayResponseBody) *UpgradeTwoWayResponse {
	s.Body = v
	return s
}

type WhiteIpListRequest struct {
	// The HTTP status code.
	DestinationRegion *string `json:"DestinationRegion,omitempty" xml:"DestinationRegion,omitempty"`
	// The ID of the region where the destination instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >
	// *   If the destination instance is a self-managed database with a public IP address or a third-party cloud database, you can set the parameter to **cn-hangzhou** or the ID of the closest region.
	// *   If the DTS task is a data migration or data synchronization task, you must specify this parameter.
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the region where the source instance resides. For more information, see [List of supported regions](~~141033~~).
	//
	// >  If the source instance is a self-managed database with a public IP address or a third-party cloud database, you can set the parameter to **cn-hangzhou** or the ID of the closest region.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s WhiteIpListRequest) String() string {
	return tea.Prettify(s)
}

func (s WhiteIpListRequest) GoString() string {
	return s.String()
}

func (s *WhiteIpListRequest) SetDestinationRegion(v string) *WhiteIpListRequest {
	s.DestinationRegion = &v
	return s
}

func (s *WhiteIpListRequest) SetRegion(v string) *WhiteIpListRequest {
	s.Region = &v
	return s
}

func (s *WhiteIpListRequest) SetRegionId(v string) *WhiteIpListRequest {
	s.RegionId = &v
	return s
}

func (s *WhiteIpListRequest) SetType(v string) *WhiteIpListRequest {
	s.Type = &v
	return s
}

type WhiteIpListResponseBody struct {
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// The dynamic error code. This parameter will be removed in the future.
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// *   **true**: The call was successful.
	// *   **false**: The call failed.
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The CIDR blocks of DTS servers. Multiple CIDR blocks are separated by commas (,).
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the request.
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// The dynamic part in the error message. This parameter is used to replace **%s** in the **ErrMessage** parameter.
	IpList *string `json:"IpList,omitempty" xml:"IpList,omitempty"`
	// The error code returned if the call failed.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The error message returned if the call failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s WhiteIpListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s WhiteIpListResponseBody) GoString() string {
	return s.String()
}

func (s *WhiteIpListResponseBody) SetDynamicCode(v string) *WhiteIpListResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *WhiteIpListResponseBody) SetDynamicMessage(v string) *WhiteIpListResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *WhiteIpListResponseBody) SetErrCode(v string) *WhiteIpListResponseBody {
	s.ErrCode = &v
	return s
}

func (s *WhiteIpListResponseBody) SetErrMessage(v string) *WhiteIpListResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *WhiteIpListResponseBody) SetHttpStatusCode(v int32) *WhiteIpListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *WhiteIpListResponseBody) SetIpList(v string) *WhiteIpListResponseBody {
	s.IpList = &v
	return s
}

func (s *WhiteIpListResponseBody) SetRequestId(v string) *WhiteIpListResponseBody {
	s.RequestId = &v
	return s
}

func (s *WhiteIpListResponseBody) SetSuccess(v bool) *WhiteIpListResponseBody {
	s.Success = &v
	return s
}

type WhiteIpListResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *WhiteIpListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s WhiteIpListResponse) String() string {
	return tea.Prettify(s)
}

func (s WhiteIpListResponse) GoString() string {
	return s.String()
}

func (s *WhiteIpListResponse) SetHeaders(v map[string]*string) *WhiteIpListResponse {
	s.Headers = v
	return s
}

func (s *WhiteIpListResponse) SetStatusCode(v int32) *WhiteIpListResponse {
	s.StatusCode = &v
	return s
}

func (s *WhiteIpListResponse) SetBody(v *WhiteIpListResponseBody) *WhiteIpListResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":                  tea.String("dts.aliyuncs.com"),
		"cn-beijing":                  tea.String("dts.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("dts.aliyuncs.com"),
		"cn-huhehaote":                tea.String("dts.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("dts.aliyuncs.com"),
		"cn-shanghai":                 tea.String("dts.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("dts.aliyuncs.com"),
		"cn-hongkong":                 tea.String("dts.aliyuncs.com"),
		"ap-southeast-1":              tea.String("dts.aliyuncs.com"),
		"ap-southeast-2":              tea.String("dts.aliyuncs.com"),
		"ap-southeast-3":              tea.String("dts.aliyuncs.com"),
		"ap-southeast-5":              tea.String("dts.aliyuncs.com"),
		"eu-west-1":                   tea.String("dts.aliyuncs.com"),
		"us-west-1":                   tea.String("dts.aliyuncs.com"),
		"us-east-1":                   tea.String("dts.aliyuncs.com"),
		"eu-central-1":                tea.String("dts.aliyuncs.com"),
		"me-east-1":                   tea.String("dts.aliyuncs.com"),
		"ap-south-1":                  tea.String("dts.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("dts.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("dts.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("dts.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("dts.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("dts.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("dts.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("dts.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("dts.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("dts.aliyuncs.com"),
		"cn-chengdu":                  tea.String("dts.aliyuncs.com"),
		"cn-edge-1":                   tea.String("dts.aliyuncs.com"),
		"cn-fujian":                   tea.String("dts.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("dts.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("dts.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("dts.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("dts.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("dts.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("dts.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("dts.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("dts.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("dts.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("dts.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("dts.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("dts.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("dts.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("dts.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("dts.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("dts.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("dts.aliyuncs.com"),
		"cn-wuhan":                    tea.String("dts.aliyuncs.com"),
		"cn-wulanchabu":               tea.String("dts.aliyuncs.com"),
		"cn-yushanfang":               tea.String("dts.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("dts.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("dts.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("dts.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("dts.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("dts.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("dts"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The name of the DTS instance.
 *
 * @param request ConfigureDtsJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigureDtsJobResponse
 */
func (client *Client) ConfigureDtsJobWithOptions(request *ConfigureDtsJobRequest, runtime *util.RuntimeOptions) (_result *ConfigureDtsJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Checkpoint)) {
		query["Checkpoint"] = request.Checkpoint
	}

	if !tea.BoolValue(util.IsUnset(request.DataCheckConfigure)) {
		query["DataCheckConfigure"] = request.DataCheckConfigure
	}

	if !tea.BoolValue(util.IsUnset(request.DataInitialization)) {
		query["DataInitialization"] = request.DataInitialization
	}

	if !tea.BoolValue(util.IsUnset(request.DataSynchronization)) {
		query["DataSynchronization"] = request.DataSynchronization
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		query["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DelayNotice)) {
		query["DelayNotice"] = request.DelayNotice
	}

	if !tea.BoolValue(util.IsUnset(request.DelayPhone)) {
		query["DelayPhone"] = request.DelayPhone
	}

	if !tea.BoolValue(util.IsUnset(request.DelayRuleTime)) {
		query["DelayRuleTime"] = request.DelayRuleTime
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointDataBaseName)) {
		query["DestinationEndpointDataBaseName"] = request.DestinationEndpointDataBaseName
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointEngineName)) {
		query["DestinationEndpointEngineName"] = request.DestinationEndpointEngineName
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointIP)) {
		query["DestinationEndpointIP"] = request.DestinationEndpointIP
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointInstanceID)) {
		query["DestinationEndpointInstanceID"] = request.DestinationEndpointInstanceID
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointInstanceType)) {
		query["DestinationEndpointInstanceType"] = request.DestinationEndpointInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointOracleSID)) {
		query["DestinationEndpointOracleSID"] = request.DestinationEndpointOracleSID
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointOwnerID)) {
		query["DestinationEndpointOwnerID"] = request.DestinationEndpointOwnerID
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointPassword)) {
		query["DestinationEndpointPassword"] = request.DestinationEndpointPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointPort)) {
		query["DestinationEndpointPort"] = request.DestinationEndpointPort
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointRegion)) {
		query["DestinationEndpointRegion"] = request.DestinationEndpointRegion
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointRole)) {
		query["DestinationEndpointRole"] = request.DestinationEndpointRole
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointUserName)) {
		query["DestinationEndpointUserName"] = request.DestinationEndpointUserName
	}

	if !tea.BoolValue(util.IsUnset(request.DisasterRecoveryJob)) {
		query["DisasterRecoveryJob"] = request.DisasterRecoveryJob
	}

	if !tea.BoolValue(util.IsUnset(request.DtsBisLabel)) {
		query["DtsBisLabel"] = request.DtsBisLabel
	}

	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobName)) {
		query["DtsJobName"] = request.DtsJobName
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorNotice)) {
		query["ErrorNotice"] = request.ErrorNotice
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorPhone)) {
		query["ErrorPhone"] = request.ErrorPhone
	}

	if !tea.BoolValue(util.IsUnset(request.FileOssUrl)) {
		query["FileOssUrl"] = request.FileOssUrl
	}

	if !tea.BoolValue(util.IsUnset(request.JobType)) {
		query["JobType"] = request.JobType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointDatabaseName)) {
		query["SourceEndpointDatabaseName"] = request.SourceEndpointDatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointEngineName)) {
		query["SourceEndpointEngineName"] = request.SourceEndpointEngineName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointIP)) {
		query["SourceEndpointIP"] = request.SourceEndpointIP
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointInstanceID)) {
		query["SourceEndpointInstanceID"] = request.SourceEndpointInstanceID
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointInstanceType)) {
		query["SourceEndpointInstanceType"] = request.SourceEndpointInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointOracleSID)) {
		query["SourceEndpointOracleSID"] = request.SourceEndpointOracleSID
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointOwnerID)) {
		query["SourceEndpointOwnerID"] = request.SourceEndpointOwnerID
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointPassword)) {
		query["SourceEndpointPassword"] = request.SourceEndpointPassword
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointPort)) {
		query["SourceEndpointPort"] = request.SourceEndpointPort
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointRegion)) {
		query["SourceEndpointRegion"] = request.SourceEndpointRegion
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointRole)) {
		query["SourceEndpointRole"] = request.SourceEndpointRole
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointUserName)) {
		query["SourceEndpointUserName"] = request.SourceEndpointUserName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointVSwitchID)) {
		query["SourceEndpointVSwitchID"] = request.SourceEndpointVSwitchID
	}

	if !tea.BoolValue(util.IsUnset(request.StructureInitialization)) {
		query["StructureInitialization"] = request.StructureInitialization
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbList)) {
		body["DbList"] = request.DbList
	}

	if !tea.BoolValue(util.IsUnset(request.Reserve)) {
		body["Reserve"] = request.Reserve
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigureDtsJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigureDtsJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The name of the DTS instance.
 *
 * @param request ConfigureDtsJobRequest
 * @return ConfigureDtsJobResponse
 */
func (client *Client) ConfigureDtsJob(request *ConfigureDtsJobRequest) (_result *ConfigureDtsJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigureDtsJobResponse{}
	_body, _err := client.ConfigureDtsJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfigureDtsJobAdvance(request *ConfigureDtsJobAdvanceRequest, runtime *util.RuntimeOptions) (_result *ConfigureDtsJobResponse, _err error) {
	// Step 0: init client
	accessKeyId, _err := client.Credential.GetAccessKeyId()
	if _err != nil {
		return _result, _err
	}

	accessKeySecret, _err := client.Credential.GetAccessKeySecret()
	if _err != nil {
		return _result, _err
	}

	securityToken, _err := client.Credential.GetSecurityToken()
	if _err != nil {
		return _result, _err
	}

	credentialType := client.Credential.GetType()
	openPlatformEndpoint := client.OpenPlatformEndpoint
	if tea.BoolValue(util.IsUnset(openPlatformEndpoint)) {
		openPlatformEndpoint = tea.String("openplatform.aliyuncs.com")
	}

	if tea.BoolValue(util.IsUnset(credentialType)) {
		credentialType = tea.String("access_key")
	}

	authConfig := &openapi.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		SecurityToken:   securityToken,
		Type:            credentialType,
		Endpoint:        openPlatformEndpoint,
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  tea.String("Dts"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeySecret: accessKeySecret,
		Type:            tea.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	var ossClient *oss.Client
	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	configureDtsJobReq := &ConfigureDtsJobRequest{}
	openapiutil.Convert(request, configureDtsJobReq)
	if !tea.BoolValue(util.IsUnset(request.FileOssUrlObject)) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.FileOssUrlObject,
			ContentType: tea.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: tea.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		configureDtsJobReq.FileOssUrl = tea.String("http://" + tea.StringValue(authResponse.Body.Bucket) + "." + tea.StringValue(authResponse.Body.Endpoint) + "/" + tea.StringValue(authResponse.Body.ObjectKey))
	}

	configureDtsJobResp, _err := client.ConfigureDtsJobWithOptions(configureDtsJobReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = configureDtsJobResp
	return _result, _err
}

/**
 * After you call this operation to configure a data migration task, the task will be automatically started. You do not need to call the [StartMigrationJob](~~49429~~) operation to start the task.
 * A data migration task may fail to be started due to precheck failures. You can call the [DescribeMigrationJobStatus](~~49433~~) operation to query the error messages about precheck failures. Then, you can fix the issue based on the error messages. After you fix the issue, you must call the [StartMigrationJob](~~49429~~) operation to restart the data migration task.
 *
 * @param request ConfigureMigrationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigureMigrationJobResponse
 */
func (client *Client) ConfigureMigrationJobWithOptions(request *ConfigureMigrationJobRequest, runtime *util.RuntimeOptions) (_result *ConfigureMigrationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.Checkpoint)) {
		query["Checkpoint"] = request.Checkpoint
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobId)) {
		query["MigrationJobId"] = request.MigrationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobName)) {
		query["MigrationJobName"] = request.MigrationJobName
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationReserved)) {
		query["MigrationReserved"] = request.MigrationReserved
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpoint)) {
		query["DestinationEndpoint"] = request.DestinationEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationMode)) {
		query["MigrationMode"] = request.MigrationMode
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpoint)) {
		query["SourceEndpoint"] = request.SourceEndpoint
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MigrationObject)) {
		body["MigrationObject"] = request.MigrationObject
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigureMigrationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigureMigrationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * After you call this operation to configure a data migration task, the task will be automatically started. You do not need to call the [StartMigrationJob](~~49429~~) operation to start the task.
 * A data migration task may fail to be started due to precheck failures. You can call the [DescribeMigrationJobStatus](~~49433~~) operation to query the error messages about precheck failures. Then, you can fix the issue based on the error messages. After you fix the issue, you must call the [StartMigrationJob](~~49429~~) operation to restart the data migration task.
 *
 * @param request ConfigureMigrationJobRequest
 * @return ConfigureMigrationJobResponse
 */
func (client *Client) ConfigureMigrationJob(request *ConfigureMigrationJobRequest) (_result *ConfigureMigrationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigureMigrationJobResponse{}
	_body, _err := client.ConfigureMigrationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfigureMigrationJobAlertWithOptions(request *ConfigureMigrationJobAlertRequest, runtime *util.RuntimeOptions) (_result *ConfigureMigrationJobAlertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.DelayAlertPhone)) {
		query["DelayAlertPhone"] = request.DelayAlertPhone
	}

	if !tea.BoolValue(util.IsUnset(request.DelayAlertStatus)) {
		query["DelayAlertStatus"] = request.DelayAlertStatus
	}

	if !tea.BoolValue(util.IsUnset(request.DelayOverSeconds)) {
		query["DelayOverSeconds"] = request.DelayOverSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorAlertPhone)) {
		query["ErrorAlertPhone"] = request.ErrorAlertPhone
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorAlertStatus)) {
		query["ErrorAlertStatus"] = request.ErrorAlertStatus
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobId)) {
		query["MigrationJobId"] = request.MigrationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigureMigrationJobAlert"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigureMigrationJobAlertResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfigureMigrationJobAlert(request *ConfigureMigrationJobAlertRequest) (_result *ConfigureMigrationJobAlertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigureMigrationJobAlertResponse{}
	_body, _err := client.ConfigureMigrationJobAlertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfigureSubscriptionWithOptions(request *ConfigureSubscriptionRequest, runtime *util.RuntimeOptions) (_result *ConfigureSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Checkpoint)) {
		query["Checkpoint"] = request.Checkpoint
	}

	if !tea.BoolValue(util.IsUnset(request.DbList)) {
		query["DbList"] = request.DbList
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		query["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DelayNotice)) {
		query["DelayNotice"] = request.DelayNotice
	}

	if !tea.BoolValue(util.IsUnset(request.DelayPhone)) {
		query["DelayPhone"] = request.DelayPhone
	}

	if !tea.BoolValue(util.IsUnset(request.DelayRuleTime)) {
		query["DelayRuleTime"] = request.DelayRuleTime
	}

	if !tea.BoolValue(util.IsUnset(request.DtsBisLabel)) {
		query["DtsBisLabel"] = request.DtsBisLabel
	}

	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobName)) {
		query["DtsJobName"] = request.DtsJobName
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorNotice)) {
		query["ErrorNotice"] = request.ErrorNotice
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorPhone)) {
		query["ErrorPhone"] = request.ErrorPhone
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Reserve)) {
		query["Reserve"] = request.Reserve
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointDatabaseName)) {
		query["SourceEndpointDatabaseName"] = request.SourceEndpointDatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointEngineName)) {
		query["SourceEndpointEngineName"] = request.SourceEndpointEngineName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointIP)) {
		query["SourceEndpointIP"] = request.SourceEndpointIP
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointInstanceID)) {
		query["SourceEndpointInstanceID"] = request.SourceEndpointInstanceID
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointInstanceType)) {
		query["SourceEndpointInstanceType"] = request.SourceEndpointInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointOracleSID)) {
		query["SourceEndpointOracleSID"] = request.SourceEndpointOracleSID
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointOwnerID)) {
		query["SourceEndpointOwnerID"] = request.SourceEndpointOwnerID
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointPassword)) {
		query["SourceEndpointPassword"] = request.SourceEndpointPassword
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointPort)) {
		query["SourceEndpointPort"] = request.SourceEndpointPort
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointRegion)) {
		query["SourceEndpointRegion"] = request.SourceEndpointRegion
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointRole)) {
		query["SourceEndpointRole"] = request.SourceEndpointRole
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointUserName)) {
		query["SourceEndpointUserName"] = request.SourceEndpointUserName
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionDataTypeDDL)) {
		query["SubscriptionDataTypeDDL"] = request.SubscriptionDataTypeDDL
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionDataTypeDML)) {
		query["SubscriptionDataTypeDML"] = request.SubscriptionDataTypeDML
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceNetworkType)) {
		query["SubscriptionInstanceNetworkType"] = request.SubscriptionInstanceNetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceVPCId)) {
		query["SubscriptionInstanceVPCId"] = request.SubscriptionInstanceVPCId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceVSwitchId)) {
		query["SubscriptionInstanceVSwitchId"] = request.SubscriptionInstanceVSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigureSubscription"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigureSubscriptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfigureSubscription(request *ConfigureSubscriptionRequest) (_result *ConfigureSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigureSubscriptionResponse{}
	_body, _err := client.ConfigureSubscriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The operation that you want to perform. Set the value to **ConfigureSubscriptionInstance**.
 *
 * @param request ConfigureSubscriptionInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigureSubscriptionInstanceResponse
 */
func (client *Client) ConfigureSubscriptionInstanceWithOptions(request *ConfigureSubscriptionInstanceRequest, runtime *util.RuntimeOptions) (_result *ConfigureSubscriptionInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceName)) {
		query["SubscriptionInstanceName"] = request.SubscriptionInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceNetworkType)) {
		query["SubscriptionInstanceNetworkType"] = request.SubscriptionInstanceNetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpoint)) {
		query["SourceEndpoint"] = request.SourceEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionDataType)) {
		query["SubscriptionDataType"] = request.SubscriptionDataType
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstance)) {
		query["SubscriptionInstance"] = request.SubscriptionInstance
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SubscriptionObject)) {
		body["SubscriptionObject"] = request.SubscriptionObject
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigureSubscriptionInstance"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigureSubscriptionInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The operation that you want to perform. Set the value to **ConfigureSubscriptionInstance**.
 *
 * @param request ConfigureSubscriptionInstanceRequest
 * @return ConfigureSubscriptionInstanceResponse
 */
func (client *Client) ConfigureSubscriptionInstance(request *ConfigureSubscriptionInstanceRequest) (_result *ConfigureSubscriptionInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigureSubscriptionInstanceResponse{}
	_body, _err := client.ConfigureSubscriptionInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfigureSubscriptionInstanceAlertWithOptions(request *ConfigureSubscriptionInstanceAlertRequest, runtime *util.RuntimeOptions) (_result *ConfigureSubscriptionInstanceAlertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.DelayAlertPhone)) {
		query["DelayAlertPhone"] = request.DelayAlertPhone
	}

	if !tea.BoolValue(util.IsUnset(request.DelayAlertStatus)) {
		query["DelayAlertStatus"] = request.DelayAlertStatus
	}

	if !tea.BoolValue(util.IsUnset(request.DelayOverSeconds)) {
		query["DelayOverSeconds"] = request.DelayOverSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorAlertPhone)) {
		query["ErrorAlertPhone"] = request.ErrorAlertPhone
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorAlertStatus)) {
		query["ErrorAlertStatus"] = request.ErrorAlertStatus
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigureSubscriptionInstanceAlert"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigureSubscriptionInstanceAlertResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfigureSubscriptionInstanceAlert(request *ConfigureSubscriptionInstanceAlertRequest) (_result *ConfigureSubscriptionInstanceAlertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigureSubscriptionInstanceAlertResponse{}
	_body, _err := client.ConfigureSubscriptionInstanceAlertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, you must call the [CreateSynchronizationJob](~~49446~~) operation to create a data synchronization instance.
 * >
 * *   After you call this operation to configure a data synchronization task, the task will be automatically started and prechecked. You do not need to call the [StartSynchronizationJob](~~49448~~) operation to start the task.
 * *   A data synchronization task may fail to be started due to precheck failures. You can call the [DescribeSynchronizationJobStatus](~~49453~~) operation to query the status of the task. Then, you can change parameter settings based on the error messages about the precheck failures. After you fix the issue, you must call the [StartSynchronizationJob](~~49448~~) operation to restart the data synchronization task.
 *
 * @param request ConfigureSynchronizationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigureSynchronizationJobResponse
 */
func (client *Client) ConfigureSynchronizationJobWithOptions(request *ConfigureSynchronizationJobRequest, runtime *util.RuntimeOptions) (_result *ConfigureSynchronizationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.Checkpoint)) {
		query["Checkpoint"] = request.Checkpoint
	}

	if !tea.BoolValue(util.IsUnset(request.DataInitialization)) {
		query["DataInitialization"] = request.DataInitialization
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationReserved)) {
		query["MigrationReserved"] = request.MigrationReserved
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StructureInitialization)) {
		query["StructureInitialization"] = request.StructureInitialization
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobName)) {
		query["SynchronizationJobName"] = request.SynchronizationJobName
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpoint)) {
		query["DestinationEndpoint"] = request.DestinationEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.PartitionKey)) {
		query["PartitionKey"] = request.PartitionKey
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpoint)) {
		query["SourceEndpoint"] = request.SourceEndpoint
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SynchronizationObjects)) {
		body["SynchronizationObjects"] = request.SynchronizationObjects
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigureSynchronizationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigureSynchronizationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, you must call the [CreateSynchronizationJob](~~49446~~) operation to create a data synchronization instance.
 * >
 * *   After you call this operation to configure a data synchronization task, the task will be automatically started and prechecked. You do not need to call the [StartSynchronizationJob](~~49448~~) operation to start the task.
 * *   A data synchronization task may fail to be started due to precheck failures. You can call the [DescribeSynchronizationJobStatus](~~49453~~) operation to query the status of the task. Then, you can change parameter settings based on the error messages about the precheck failures. After you fix the issue, you must call the [StartSynchronizationJob](~~49448~~) operation to restart the data synchronization task.
 *
 * @param request ConfigureSynchronizationJobRequest
 * @return ConfigureSynchronizationJobResponse
 */
func (client *Client) ConfigureSynchronizationJob(request *ConfigureSynchronizationJobRequest) (_result *ConfigureSynchronizationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigureSynchronizationJobResponse{}
	_body, _err := client.ConfigureSynchronizationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConfigureSynchronizationJobAlertWithOptions(request *ConfigureSynchronizationJobAlertRequest, runtime *util.RuntimeOptions) (_result *ConfigureSynchronizationJobAlertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.DelayAlertPhone)) {
		query["DelayAlertPhone"] = request.DelayAlertPhone
	}

	if !tea.BoolValue(util.IsUnset(request.DelayAlertStatus)) {
		query["DelayAlertStatus"] = request.DelayAlertStatus
	}

	if !tea.BoolValue(util.IsUnset(request.DelayOverSeconds)) {
		query["DelayOverSeconds"] = request.DelayOverSeconds
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorAlertPhone)) {
		query["ErrorAlertPhone"] = request.ErrorAlertPhone
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorAlertStatus)) {
		query["ErrorAlertStatus"] = request.ErrorAlertStatus
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigureSynchronizationJobAlert"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigureSynchronizationJobAlertResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConfigureSynchronizationJobAlert(request *ConfigureSynchronizationJobAlertRequest) (_result *ConfigureSynchronizationJobAlertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigureSynchronizationJobAlertResponse{}
	_body, _err := client.ConfigureSynchronizationJobAlertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * When you use Data Transmission Service (DTS) to synchronize data, other data sources may write data to the destination instance. In this case, data may become inconsistent between the source and destination instances. To ensure data consistency, you can enable image matching.
 * After you call this operation, you can call the [DescribeSynchronizationJobReplicatorCompare](~~199183~~) operation to verify whether image matching is enabled for the data synchronization instance.
 *
 * @param request ConfigureSynchronizationJobReplicatorCompareRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ConfigureSynchronizationJobReplicatorCompareResponse
 */
func (client *Client) ConfigureSynchronizationJobReplicatorCompareWithOptions(request *ConfigureSynchronizationJobReplicatorCompareRequest, runtime *util.RuntimeOptions) (_result *ConfigureSynchronizationJobReplicatorCompareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationReplicatorCompareEnable)) {
		query["SynchronizationReplicatorCompareEnable"] = request.SynchronizationReplicatorCompareEnable
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigureSynchronizationJobReplicatorCompare"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigureSynchronizationJobReplicatorCompareResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * When you use Data Transmission Service (DTS) to synchronize data, other data sources may write data to the destination instance. In this case, data may become inconsistent between the source and destination instances. To ensure data consistency, you can enable image matching.
 * After you call this operation, you can call the [DescribeSynchronizationJobReplicatorCompare](~~199183~~) operation to verify whether image matching is enabled for the data synchronization instance.
 *
 * @param request ConfigureSynchronizationJobReplicatorCompareRequest
 * @return ConfigureSynchronizationJobReplicatorCompareResponse
 */
func (client *Client) ConfigureSynchronizationJobReplicatorCompare(request *ConfigureSynchronizationJobReplicatorCompareRequest) (_result *ConfigureSynchronizationJobReplicatorCompareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigureSynchronizationJobReplicatorCompareResponse{}
	_body, _err := client.ConfigureSynchronizationJobReplicatorCompareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CountJobByConditionWithOptions(request *CountJobByConditionRequest, runtime *util.RuntimeOptions) (_result *CountJobByConditionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestDbType)) {
		query["DestDbType"] = request.DestDbType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.JobType)) {
		query["JobType"] = request.JobType
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcDbType)) {
		query["SrcDbType"] = request.SrcDbType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CountJobByCondition"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CountJobByConditionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CountJobByCondition(request *CountJobByConditionRequest) (_result *CountJobByConditionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CountJobByConditionResponse{}
	_body, _err := client.CountJobByConditionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateConsumerChannelWithOptions(request *CreateConsumerChannelRequest, runtime *util.RuntimeOptions) (_result *CreateConsumerChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupName)) {
		query["ConsumerGroupName"] = request.ConsumerGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupPassword)) {
		query["ConsumerGroupPassword"] = request.ConsumerGroupPassword
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupUserName)) {
		query["ConsumerGroupUserName"] = request.ConsumerGroupUserName
	}

	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateConsumerChannel"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateConsumerChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateConsumerChannel(request *CreateConsumerChannelRequest) (_result *CreateConsumerChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateConsumerChannelResponse{}
	_body, _err := client.CreateConsumerChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateConsumerGroupWithOptions(request *CreateConsumerGroupRequest, runtime *util.RuntimeOptions) (_result *CreateConsumerGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupName)) {
		query["ConsumerGroupName"] = request.ConsumerGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupPassword)) {
		query["ConsumerGroupPassword"] = request.ConsumerGroupPassword
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupUserName)) {
		query["ConsumerGroupUserName"] = request.ConsumerGroupUserName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateConsumerGroup"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateConsumerGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateConsumerGroup(request *CreateConsumerGroupRequest) (_result *CreateConsumerGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateConsumerGroupResponse{}
	_body, _err := client.CreateConsumerGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDedicatedClusterMonitorRuleWithOptions(request *CreateDedicatedClusterMonitorRuleRequest, runtime *util.RuntimeOptions) (_result *CreateDedicatedClusterMonitorRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CpuAlarmThreshold)) {
		query["CpuAlarmThreshold"] = request.CpuAlarmThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		query["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DiskAlarmThreshold)) {
		query["DiskAlarmThreshold"] = request.DiskAlarmThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.DuAlarmThreshold)) {
		query["DuAlarmThreshold"] = request.DuAlarmThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MemAlarmThreshold)) {
		query["MemAlarmThreshold"] = request.MemAlarmThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.NoticeSwitch)) {
		query["NoticeSwitch"] = request.NoticeSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Phones)) {
		query["Phones"] = request.Phones
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDedicatedClusterMonitorRule"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDedicatedClusterMonitorRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDedicatedClusterMonitorRule(request *CreateDedicatedClusterMonitorRuleRequest) (_result *CreateDedicatedClusterMonitorRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDedicatedClusterMonitorRuleResponse{}
	_body, _err := client.CreateDedicatedClusterMonitorRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/apsaradb-for-mongodb/pricing) of DTS.
 * *   If you want to run a DTS task on a DTS dedicated cluster, you must configure the task before you purchase a DTS instance. You can call the [ConfigureDtsJob](~~208399~~) operation to configure a DTS task.
 *
 * @param request CreateDtsInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDtsInstanceResponse
 */
func (client *Client) CreateDtsInstanceWithOptions(request *CreateDtsInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateDtsInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.AutoStart)) {
		query["AutoStart"] = request.AutoStart
	}

	if !tea.BoolValue(util.IsUnset(request.ComputeUnit)) {
		query["ComputeUnit"] = request.ComputeUnit
	}

	if !tea.BoolValue(util.IsUnset(request.DatabaseCount)) {
		query["DatabaseCount"] = request.DatabaseCount
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointEngineName)) {
		query["DestinationEndpointEngineName"] = request.DestinationEndpointEngineName
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationRegion)) {
		query["DestinationRegion"] = request.DestinationRegion
	}

	if !tea.BoolValue(util.IsUnset(request.Du)) {
		query["Du"] = request.Du
	}

	if !tea.BoolValue(util.IsUnset(request.FeeType)) {
		query["FeeType"] = request.FeeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceClass)) {
		query["InstanceClass"] = request.InstanceClass
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.Quantity)) {
		query["Quantity"] = request.Quantity
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointEngineName)) {
		query["SourceEndpointEngineName"] = request.SourceEndpointEngineName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceRegion)) {
		query["SourceRegion"] = request.SourceRegion
	}

	if !tea.BoolValue(util.IsUnset(request.SyncArchitecture)) {
		query["SyncArchitecture"] = request.SyncArchitecture
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UsedTime)) {
		query["UsedTime"] = request.UsedTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDtsInstance"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDtsInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/apsaradb-for-mongodb/pricing) of DTS.
 * *   If you want to run a DTS task on a DTS dedicated cluster, you must configure the task before you purchase a DTS instance. You can call the [ConfigureDtsJob](~~208399~~) operation to configure a DTS task.
 *
 * @param request CreateDtsInstanceRequest
 * @return CreateDtsInstanceResponse
 */
func (client *Client) CreateDtsInstance(request *CreateDtsInstanceRequest) (_result *CreateDtsInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDtsInstanceResponse{}
	_body, _err := client.CreateDtsInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * DTS provides the following metrics for DTS tasks:************
 * *   **Latency**: DTS monitors the latency of a DTS task. If the latency of the task exceeds the specified threshold, an alert is triggered. Unit: seconds.
 * *   **Status**: DTS monitors the status of a DTS task. If the state of the task changes to **Error** or **Restore**, an alert is triggered.
 * *   **Full Timeout**: DTS monitors the duration of a DTS task. If the duration of the task exceeds the specified threshold, an alert is triggered. Unit: hours.
 *
 * @param request CreateJobMonitorRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateJobMonitorRuleResponse
 */
func (client *Client) CreateJobMonitorRuleWithOptions(request *CreateJobMonitorRuleRequest, runtime *util.RuntimeOptions) (_result *CreateJobMonitorRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DelayRuleTime)) {
		query["DelayRuleTime"] = request.DelayRuleTime
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.NoticeValue)) {
		query["NoticeValue"] = request.NoticeValue
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		query["Phone"] = request.Phone
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	if !tea.BoolValue(util.IsUnset(request.Times)) {
		query["Times"] = request.Times
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateJobMonitorRule"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateJobMonitorRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * DTS provides the following metrics for DTS tasks:************
 * *   **Latency**: DTS monitors the latency of a DTS task. If the latency of the task exceeds the specified threshold, an alert is triggered. Unit: seconds.
 * *   **Status**: DTS monitors the status of a DTS task. If the state of the task changes to **Error** or **Restore**, an alert is triggered.
 * *   **Full Timeout**: DTS monitors the duration of a DTS task. If the duration of the task exceeds the specified threshold, an alert is triggered. Unit: hours.
 *
 * @param request CreateJobMonitorRuleRequest
 * @return CreateJobMonitorRuleResponse
 */
func (client *Client) CreateJobMonitorRule(request *CreateJobMonitorRuleRequest) (_result *CreateJobMonitorRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateJobMonitorRuleResponse{}
	_body, _err := client.CreateJobMonitorRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  This API operation is outdated. We recommend that you use the new version. For more information, see [CreateDtsInstance](~~208270~~).
 * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS).
 * After you purchase a data migration instance, you must call the [ConfigureMigrationJob](~~324260~~) operation to configure a data migration task.
 *
 * @param request CreateMigrationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMigrationJobResponse
 */
func (client *Client) CreateMigrationJobWithOptions(request *CreateMigrationJobRequest, runtime *util.RuntimeOptions) (_result *CreateMigrationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobClass)) {
		query["MigrationJobClass"] = request.MigrationJobClass
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMigrationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMigrationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  This API operation is outdated. We recommend that you use the new version. For more information, see [CreateDtsInstance](~~208270~~).
 * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS).
 * After you purchase a data migration instance, you must call the [ConfigureMigrationJob](~~324260~~) operation to configure a data migration task.
 *
 * @param request CreateMigrationJobRequest
 * @return CreateMigrationJobResponse
 */
func (client *Client) CreateMigrationJob(request *CreateMigrationJobRequest) (_result *CreateMigrationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMigrationJobResponse{}
	_body, _err := client.CreateMigrationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS).
 *
 * @param request CreateSubscriptionInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSubscriptionInstanceResponse
 */
func (client *Client) CreateSubscriptionInstanceWithOptions(request *CreateSubscriptionInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateSubscriptionInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UsedTime)) {
		query["UsedTime"] = request.UsedTime
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpoint)) {
		query["SourceEndpoint"] = request.SourceEndpoint
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSubscriptionInstance"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSubscriptionInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS).
 *
 * @param request CreateSubscriptionInstanceRequest
 * @return CreateSubscriptionInstanceResponse
 */
func (client *Client) CreateSubscriptionInstance(request *CreateSubscriptionInstanceRequest) (_result *CreateSubscriptionInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSubscriptionInstanceResponse{}
	_body, _err := client.CreateSubscriptionInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS).
 * After you purchase a data synchronization instance, you must call the [ConfigureSynchronizationJob](~~49447~~) operation to configure a data synchronization task. Then, the task is automatically started.
 *
 * @param request CreateSynchronizationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateSynchronizationJobResponse
 */
func (client *Client) CreateSynchronizationJobWithOptions(request *CreateSynchronizationJobRequest, runtime *util.RuntimeOptions) (_result *CreateSynchronizationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DBInstanceCount)) {
		query["DBInstanceCount"] = request.DBInstanceCount
	}

	if !tea.BoolValue(util.IsUnset(request.DestRegion)) {
		query["DestRegion"] = request.DestRegion
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceRegion)) {
		query["SourceRegion"] = request.SourceRegion
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobClass)) {
		query["SynchronizationJobClass"] = request.SynchronizationJobClass
	}

	if !tea.BoolValue(util.IsUnset(request.Topology)) {
		query["Topology"] = request.Topology
	}

	if !tea.BoolValue(util.IsUnset(request.UsedTime)) {
		query["UsedTime"] = request.UsedTime
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["networkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpoint)) {
		query["DestinationEndpoint"] = request.DestinationEndpoint
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpoint)) {
		query["SourceEndpoint"] = request.SourceEndpoint
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSynchronizationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSynchronizationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS).
 * After you purchase a data synchronization instance, you must call the [ConfigureSynchronizationJob](~~49447~~) operation to configure a data synchronization task. Then, the task is automatically started.
 *
 * @param request CreateSynchronizationJobRequest
 * @return CreateSynchronizationJobResponse
 */
func (client *Client) CreateSynchronizationJob(request *CreateSynchronizationJobRequest) (_result *CreateSynchronizationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSynchronizationJobResponse{}
	_body, _err := client.CreateSynchronizationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteConsumerChannelWithOptions(request *DeleteConsumerChannelRequest, runtime *util.RuntimeOptions) (_result *DeleteConsumerChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupId)) {
		query["ConsumerGroupId"] = request.ConsumerGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteConsumerChannel"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteConsumerChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteConsumerChannel(request *DeleteConsumerChannelRequest) (_result *DeleteConsumerChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteConsumerChannelResponse{}
	_body, _err := client.DeleteConsumerChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteConsumerGroupWithOptions(request *DeleteConsumerGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteConsumerGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupID)) {
		query["ConsumerGroupID"] = request.ConsumerGroupID
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteConsumerGroup"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteConsumerGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteConsumerGroup(request *DeleteConsumerGroupRequest) (_result *DeleteConsumerGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteConsumerGroupResponse{}
	_body, _err := client.DeleteConsumerGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDtsJobWithOptions(request *DeleteDtsJobRequest, runtime *util.RuntimeOptions) (_result *DeleteDtsJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobType)) {
		query["JobType"] = request.JobType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDtsJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDtsJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDtsJob(request *DeleteDtsJobRequest) (_result *DeleteDtsJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDtsJobResponse{}
	_body, _err := client.DeleteDtsJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDtsJobsWithOptions(request *DeleteDtsJobsRequest, runtime *util.RuntimeOptions) (_result *DeleteDtsJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobIds)) {
		query["DtsJobIds"] = request.DtsJobIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDtsJobs"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDtsJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDtsJobs(request *DeleteDtsJobsRequest) (_result *DeleteDtsJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDtsJobsResponse{}
	_body, _err := client.DeleteDtsJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  After a data migration instance is released, it cannot be recovered.
 *
 * @param request DeleteMigrationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMigrationJobResponse
 */
func (client *Client) DeleteMigrationJobWithOptions(request *DeleteMigrationJobRequest, runtime *util.RuntimeOptions) (_result *DeleteMigrationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobId)) {
		query["MigrationJobId"] = request.MigrationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMigrationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMigrationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  After a data migration instance is released, it cannot be recovered.
 *
 * @param request DeleteMigrationJobRequest
 * @return DeleteMigrationJobResponse
 */
func (client *Client) DeleteMigrationJob(request *DeleteMigrationJobRequest) (_result *DeleteMigrationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMigrationJobResponse{}
	_body, _err := client.DeleteMigrationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  After a change tracking instance is released, it cannot be recovered.
 *
 * @param request DeleteSubscriptionInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSubscriptionInstanceResponse
 */
func (client *Client) DeleteSubscriptionInstanceWithOptions(request *DeleteSubscriptionInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteSubscriptionInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSubscriptionInstance"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSubscriptionInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  After a change tracking instance is released, it cannot be recovered.
 *
 * @param request DeleteSubscriptionInstanceRequest
 * @return DeleteSubscriptionInstanceResponse
 */
func (client *Client) DeleteSubscriptionInstance(request *DeleteSubscriptionInstanceRequest) (_result *DeleteSubscriptionInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSubscriptionInstanceResponse{}
	_body, _err := client.DeleteSubscriptionInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  After a data synchronization instance is released, it cannot be recovered.
 *
 * @param request DeleteSynchronizationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteSynchronizationJobResponse
 */
func (client *Client) DeleteSynchronizationJobWithOptions(request *DeleteSynchronizationJobRequest, runtime *util.RuntimeOptions) (_result *DeleteSynchronizationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSynchronizationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSynchronizationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  After a data synchronization instance is released, it cannot be recovered.
 *
 * @param request DeleteSynchronizationJobRequest
 * @return DeleteSynchronizationJobResponse
 */
func (client *Client) DeleteSynchronizationJob(request *DeleteSynchronizationJobRequest) (_result *DeleteSynchronizationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSynchronizationJobResponse{}
	_body, _err := client.DeleteSynchronizationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeChannelAccountWithOptions(request *DescribeChannelAccountRequest, runtime *util.RuntimeOptions) (_result *DescribeChannelAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeChannelAccount"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeChannelAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeChannelAccount(request *DescribeChannelAccountRequest) (_result *DescribeChannelAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeChannelAccountResponse{}
	_body, _err := client.DescribeChannelAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeCheckJobsWithOptions(request *DescribeCheckJobsRequest, runtime *util.RuntimeOptions) (_result *DescribeCheckJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckType)) {
		query["CheckType"] = request.CheckType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobName)) {
		query["JobName"] = request.JobName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCheckJobs"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCheckJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeCheckJobs(request *DescribeCheckJobsRequest) (_result *DescribeCheckJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCheckJobsResponse{}
	_body, _err := client.DescribeCheckJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterOperateLogsWithOptions(request *DescribeClusterOperateLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterOperateLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		body["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		body["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		body["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		body["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerID)) {
		body["OwnerID"] = request.OwnerID
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterOperateLogs"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterOperateLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterOperateLogs(request *DescribeClusterOperateLogsRequest) (_result *DescribeClusterOperateLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterOperateLogsResponse{}
	_body, _err := client.DescribeClusterOperateLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterUsedUtilizationWithOptions(request *DescribeClusterUsedUtilizationRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterUsedUtilizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		body["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		body["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		body["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		body["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.Env)) {
		body["Env"] = request.Env
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		body["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerID)) {
		body["OwnerID"] = request.OwnerID
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		body["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityToken)) {
		body["SecurityToken"] = request.SecurityToken
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterUsedUtilization"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterUsedUtilizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterUsedUtilization(request *DescribeClusterUsedUtilizationRequest) (_result *DescribeClusterUsedUtilizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterUsedUtilizationResponse{}
	_body, _err := client.DescribeClusterUsedUtilizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeConnectionStatusWithOptions(request *DescribeConnectionStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeConnectionStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointArchitecture)) {
		query["DestinationEndpointArchitecture"] = request.DestinationEndpointArchitecture
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointDatabaseName)) {
		query["DestinationEndpointDatabaseName"] = request.DestinationEndpointDatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointEngineName)) {
		query["DestinationEndpointEngineName"] = request.DestinationEndpointEngineName
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointIP)) {
		query["DestinationEndpointIP"] = request.DestinationEndpointIP
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointInstanceID)) {
		query["DestinationEndpointInstanceID"] = request.DestinationEndpointInstanceID
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointInstanceType)) {
		query["DestinationEndpointInstanceType"] = request.DestinationEndpointInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointOracleSID)) {
		query["DestinationEndpointOracleSID"] = request.DestinationEndpointOracleSID
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointPassword)) {
		query["DestinationEndpointPassword"] = request.DestinationEndpointPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointPort)) {
		query["DestinationEndpointPort"] = request.DestinationEndpointPort
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointRegion)) {
		query["DestinationEndpointRegion"] = request.DestinationEndpointRegion
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointUserName)) {
		query["DestinationEndpointUserName"] = request.DestinationEndpointUserName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointArchitecture)) {
		query["SourceEndpointArchitecture"] = request.SourceEndpointArchitecture
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointDatabaseName)) {
		query["SourceEndpointDatabaseName"] = request.SourceEndpointDatabaseName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointEngineName)) {
		query["SourceEndpointEngineName"] = request.SourceEndpointEngineName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointIP)) {
		query["SourceEndpointIP"] = request.SourceEndpointIP
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointInstanceID)) {
		query["SourceEndpointInstanceID"] = request.SourceEndpointInstanceID
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointInstanceType)) {
		query["SourceEndpointInstanceType"] = request.SourceEndpointInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointOracleSID)) {
		query["SourceEndpointOracleSID"] = request.SourceEndpointOracleSID
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointPassword)) {
		query["SourceEndpointPassword"] = request.SourceEndpointPassword
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointPort)) {
		query["SourceEndpointPort"] = request.SourceEndpointPort
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointRegion)) {
		query["SourceEndpointRegion"] = request.SourceEndpointRegion
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointUserName)) {
		query["SourceEndpointUserName"] = request.SourceEndpointUserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConnectionStatus"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConnectionStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeConnectionStatus(request *DescribeConnectionStatusRequest) (_result *DescribeConnectionStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConnectionStatusResponse{}
	_body, _err := client.DescribeConnectionStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeConsumerChannelWithOptions(request *DescribeConsumerChannelRequest, runtime *util.RuntimeOptions) (_result *DescribeConsumerChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentChannelId)) {
		query["ParentChannelId"] = request.ParentChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsumerChannel"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsumerChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeConsumerChannel(request *DescribeConsumerChannelRequest) (_result *DescribeConsumerChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsumerChannelResponse{}
	_body, _err := client.DescribeConsumerChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeConsumerGroupWithOptions(request *DescribeConsumerGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeConsumerGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsumerGroup"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsumerGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeConsumerGroup(request *DescribeConsumerGroupRequest) (_result *DescribeConsumerGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsumerGroupResponse{}
	_body, _err := client.DescribeConsumerGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * If the **source or destination instance** is an **on-premises database**, you need to call this operation to query the CIDR blocks of DTS servers. Then, you need to add the CIDR blocks of DTS servers to the security settings of the source or destination instance, for example, the firewall of your database. For more information, see [Add the CIDR blocks of DTS servers to the security settings of on-premises databases](~~176627~~).
 * >  If the **source or destination database** is an **ApsaraDB database instance** (such as RDS instance and ApsaraDB for MongoDB instance) or a **self-managed database hosted on ECS**, you do not need to add the CIDR blocks. When you click **Set Whitelist and Next** in the DTS console, DTS automatically add the CIDR blocks of DTS servers to the security settings of the source or destination instance.
 *
 * @param request DescribeDTSIPRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDTSIPResponse
 */
func (client *Client) DescribeDTSIPWithOptions(request *DescribeDTSIPRequest, runtime *util.RuntimeOptions) (_result *DescribeDTSIPResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationEndpointRegion)) {
		query["DestinationEndpointRegion"] = request.DestinationEndpointRegion
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpointRegion)) {
		query["SourceEndpointRegion"] = request.SourceEndpointRegion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDTSIP"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDTSIPResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * If the **source or destination instance** is an **on-premises database**, you need to call this operation to query the CIDR blocks of DTS servers. Then, you need to add the CIDR blocks of DTS servers to the security settings of the source or destination instance, for example, the firewall of your database. For more information, see [Add the CIDR blocks of DTS servers to the security settings of on-premises databases](~~176627~~).
 * >  If the **source or destination database** is an **ApsaraDB database instance** (such as RDS instance and ApsaraDB for MongoDB instance) or a **self-managed database hosted on ECS**, you do not need to add the CIDR blocks. When you click **Set Whitelist and Next** in the DTS console, DTS automatically add the CIDR blocks of DTS servers to the security settings of the source or destination instance.
 *
 * @param request DescribeDTSIPRequest
 * @return DescribeDTSIPResponse
 */
func (client *Client) DescribeDTSIP(request *DescribeDTSIPRequest) (_result *DescribeDTSIPResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDTSIPResponse{}
	_body, _err := client.DescribeDTSIPWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDataCheckReportUrlWithOptions(request *DescribeDataCheckReportUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeDataCheckReportUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckType)) {
		query["CheckType"] = request.CheckType
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.TbName)) {
		query["TbName"] = request.TbName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataCheckReportUrl"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataCheckReportUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDataCheckReportUrl(request *DescribeDataCheckReportUrlRequest) (_result *DescribeDataCheckReportUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataCheckReportUrlResponse{}
	_body, _err := client.DescribeDataCheckReportUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDataCheckTableDetailsWithOptions(request *DescribeDataCheckTableDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeDataCheckTableDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckType)) {
		query["CheckType"] = request.CheckType
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaName)) {
		query["SchemaName"] = request.SchemaName
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TableName)) {
		query["TableName"] = request.TableName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataCheckTableDetails"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataCheckTableDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDataCheckTableDetails(request *DescribeDataCheckTableDetailsRequest) (_result *DescribeDataCheckTableDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataCheckTableDetailsResponse{}
	_body, _err := client.DescribeDataCheckTableDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDataCheckTableDiffDetailsWithOptions(request *DescribeDataCheckTableDiffDetailsRequest, runtime *util.RuntimeOptions) (_result *DescribeDataCheckTableDiffDetailsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckType)) {
		query["CheckType"] = request.CheckType
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TbName)) {
		query["TbName"] = request.TbName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataCheckTableDiffDetails"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDataCheckTableDiffDetailsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDataCheckTableDiffDetails(request *DescribeDataCheckTableDiffDetailsRequest) (_result *DescribeDataCheckTableDiffDetailsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataCheckTableDiffDetailsResponse{}
	_body, _err := client.DescribeDataCheckTableDiffDetailsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedClusterWithOptions(request *DescribeDedicatedClusterRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		query["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDedicatedCluster"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDedicatedClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedCluster(request *DescribeDedicatedClusterRequest) (_result *DescribeDedicatedClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedClusterResponse{}
	_body, _err := client.DescribeDedicatedClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDedicatedClusterMonitorRuleWithOptions(request *DescribeDedicatedClusterMonitorRuleRequest, runtime *util.RuntimeOptions) (_result *DescribeDedicatedClusterMonitorRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		query["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDedicatedClusterMonitorRule"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDedicatedClusterMonitorRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDedicatedClusterMonitorRule(request *DescribeDedicatedClusterMonitorRuleRequest) (_result *DescribeDedicatedClusterMonitorRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDedicatedClusterMonitorRuleResponse{}
	_body, _err := client.DescribeDedicatedClusterMonitorRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDtsEtlJobVersionInfoWithOptions(request *DescribeDtsEtlJobVersionInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDtsEtlJobVersionInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDtsEtlJobVersionInfo"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDtsEtlJobVersionInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDtsEtlJobVersionInfo(request *DescribeDtsEtlJobVersionInfoRequest) (_result *DescribeDtsEtlJobVersionInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDtsEtlJobVersionInfoResponse{}
	_body, _err := client.DescribeDtsEtlJobVersionInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDtsJobDetailWithOptions(request *DescribeDtsJobDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeDtsJobDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceID)) {
		query["DtsInstanceID"] = request.DtsInstanceID
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SyncSubJobHistory)) {
		query["SyncSubJobHistory"] = request.SyncSubJobHistory
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDtsJobDetail"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDtsJobDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDtsJobDetail(request *DescribeDtsJobDetailRequest) (_result *DescribeDtsJobDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDtsJobDetailResponse{}
	_body, _err := client.DescribeDtsJobDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * ## Debugging
 * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Dts\\&api=DescribeDtsJobs\\&type=RPC\\&version=2020-01-01)
 *
 * @param request DescribeDtsJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDtsJobsResponse
 */
func (client *Client) DescribeDtsJobsWithOptions(request *DescribeDtsJobsRequest, runtime *util.RuntimeOptions) (_result *DescribeDtsJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		query["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsBisLabel)) {
		query["DtsBisLabel"] = request.DtsBisLabel
	}

	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.JobType)) {
		query["JobType"] = request.JobType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderColumn)) {
		query["OrderColumn"] = request.OrderColumn
	}

	if !tea.BoolValue(util.IsUnset(request.OrderDirection)) {
		query["OrderDirection"] = request.OrderDirection
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.WithoutDbList)) {
		query["WithoutDbList"] = request.WithoutDbList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDtsJobs"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDtsJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * ## Debugging
 * [OpenAPI Explorer automatically calculates the signature value. For your convenience, we recommend that you call this operation in OpenAPI Explorer. OpenAPI Explorer dynamically generates the sample code of the operation for different SDKs.](https://api.aliyun.com/#product=Dts\\&api=DescribeDtsJobs\\&type=RPC\\&version=2020-01-01)
 *
 * @param request DescribeDtsJobsRequest
 * @return DescribeDtsJobsResponse
 */
func (client *Client) DescribeDtsJobs(request *DescribeDtsJobsRequest) (_result *DescribeDtsJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDtsJobsResponse{}
	_body, _err := client.DescribeDtsJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDtsServiceLogWithOptions(request *DescribeDtsServiceLogRequest, runtime *util.RuntimeOptions) (_result *DescribeDtsServiceLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.SubJobType)) {
		query["SubJobType"] = request.SubJobType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDtsServiceLog"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDtsServiceLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDtsServiceLog(request *DescribeDtsServiceLogRequest) (_result *DescribeDtsServiceLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDtsServiceLogResponse{}
	_body, _err := client.DescribeDtsServiceLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, you must call the [SwitchSynchronizationEndpoint](~~201858~~) operation to change the database connection settings.
 *
 * @param request DescribeEndpointSwitchStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeEndpointSwitchStatusResponse
 */
func (client *Client) DescribeEndpointSwitchStatusWithOptions(request *DescribeEndpointSwitchStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeEndpointSwitchStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEndpointSwitchStatus"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEndpointSwitchStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, you must call the [SwitchSynchronizationEndpoint](~~201858~~) operation to change the database connection settings.
 *
 * @param request DescribeEndpointSwitchStatusRequest
 * @return DescribeEndpointSwitchStatusResponse
 */
func (client *Client) DescribeEndpointSwitchStatus(request *DescribeEndpointSwitchStatusRequest) (_result *DescribeEndpointSwitchStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEndpointSwitchStatusResponse{}
	_body, _err := client.DescribeEndpointSwitchStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeEtlJobLogsWithOptions(request *DescribeEtlJobLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeEtlJobLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEtlJobLogs"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEtlJobLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeEtlJobLogs(request *DescribeEtlJobLogsRequest) (_result *DescribeEtlJobLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEtlJobLogsResponse{}
	_body, _err := client.DescribeEtlJobLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeInitializationStatusWithOptions(request *DescribeInitializationStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeInitializationStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInitializationStatus"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInitializationStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeInitializationStatus(request *DescribeInitializationStatusRequest) (_result *DescribeInitializationStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInitializationStatusResponse{}
	_body, _err := client.DescribeInitializationStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeJobMonitorRuleWithOptions(request *DescribeJobMonitorRuleRequest, runtime *util.RuntimeOptions) (_result *DescribeJobMonitorRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeJobMonitorRule"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeJobMonitorRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeJobMonitorRule(request *DescribeJobMonitorRuleRequest) (_result *DescribeJobMonitorRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeJobMonitorRuleResponse{}
	_body, _err := client.DescribeJobMonitorRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMetricListWithOptions(request *DescribeMetricListRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		body["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		body["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		body["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Env)) {
		body["Env"] = request.Env
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		body["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		body["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerID)) {
		body["OwnerID"] = request.OwnerID
	}

	if !tea.BoolValue(util.IsUnset(request.Param)) {
		body["Param"] = request.Param
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		body["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricList"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMetricList(request *DescribeMetricListRequest) (_result *DescribeMetricListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricListResponse{}
	_body, _err := client.DescribeMetricListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrationJobAlertWithOptions(request *DescribeMigrationJobAlertRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrationJobAlertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobId)) {
		query["MigrationJobId"] = request.MigrationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMigrationJobAlert"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMigrationJobAlertResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrationJobAlert(request *DescribeMigrationJobAlertRequest) (_result *DescribeMigrationJobAlertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrationJobAlertResponse{}
	_body, _err := client.DescribeMigrationJobAlertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * When you call this operation, the data migration task must be in the Migrating, Failed, Paused, or Finished state.
 *
 * @param request DescribeMigrationJobDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeMigrationJobDetailResponse
 */
func (client *Client) DescribeMigrationJobDetailWithOptions(request *DescribeMigrationJobDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrationJobDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobId)) {
		query["MigrationJobId"] = request.MigrationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationMode)) {
		query["MigrationMode"] = request.MigrationMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMigrationJobDetail"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMigrationJobDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * When you call this operation, the data migration task must be in the Migrating, Failed, Paused, or Finished state.
 *
 * @param request DescribeMigrationJobDetailRequest
 * @return DescribeMigrationJobDetailResponse
 */
func (client *Client) DescribeMigrationJobDetail(request *DescribeMigrationJobDetailRequest) (_result *DescribeMigrationJobDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrationJobDetailResponse{}
	_body, _err := client.DescribeMigrationJobDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrationJobStatusWithOptions(request *DescribeMigrationJobStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrationJobStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobId)) {
		query["MigrationJobId"] = request.MigrationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMigrationJobStatus"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMigrationJobStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrationJobStatus(request *DescribeMigrationJobStatusRequest) (_result *DescribeMigrationJobStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrationJobStatusResponse{}
	_body, _err := client.DescribeMigrationJobStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMigrationJobsWithOptions(request *DescribeMigrationJobsRequest, runtime *util.RuntimeOptions) (_result *DescribeMigrationJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobName)) {
		query["MigrationJobName"] = request.MigrationJobName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMigrationJobs"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMigrationJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMigrationJobs(request *DescribeMigrationJobsRequest) (_result *DescribeMigrationJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMigrationJobsResponse{}
	_body, _err := client.DescribeMigrationJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePreCheckStatusWithOptions(request *DescribePreCheckStatusRequest, runtime *util.RuntimeOptions) (_result *DescribePreCheckStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobCode)) {
		query["JobCode"] = request.JobCode
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StructPhase)) {
		query["StructPhase"] = request.StructPhase
	}

	if !tea.BoolValue(util.IsUnset(request.StructType)) {
		query["StructType"] = request.StructType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePreCheckStatus"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePreCheckStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePreCheckStatus(request *DescribePreCheckStatusRequest) (_result *DescribePreCheckStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePreCheckStatusResponse{}
	_body, _err := client.DescribePreCheckStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSubscriptionInstanceAlertWithOptions(request *DescribeSubscriptionInstanceAlertRequest, runtime *util.RuntimeOptions) (_result *DescribeSubscriptionInstanceAlertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSubscriptionInstanceAlert"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSubscriptionInstanceAlertResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSubscriptionInstanceAlert(request *DescribeSubscriptionInstanceAlertRequest) (_result *DescribeSubscriptionInstanceAlertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSubscriptionInstanceAlertResponse{}
	_body, _err := client.DescribeSubscriptionInstanceAlertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSubscriptionInstanceStatusWithOptions(request *DescribeSubscriptionInstanceStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeSubscriptionInstanceStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSubscriptionInstanceStatus"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSubscriptionInstanceStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSubscriptionInstanceStatus(request *DescribeSubscriptionInstanceStatusRequest) (_result *DescribeSubscriptionInstanceStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSubscriptionInstanceStatusResponse{}
	_body, _err := client.DescribeSubscriptionInstanceStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSubscriptionInstancesWithOptions(request *DescribeSubscriptionInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeSubscriptionInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceName)) {
		query["SubscriptionInstanceName"] = request.SubscriptionInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSubscriptionInstances"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSubscriptionInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSubscriptionInstances(request *DescribeSubscriptionInstancesRequest) (_result *DescribeSubscriptionInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSubscriptionInstancesResponse{}
	_body, _err := client.DescribeSubscriptionInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   When Data Transmission Service (DTS) tracks data changes from a PolarDB-X 1.0 instance, data is distributed across the attached ApsaraDB RDS for MySQL instances. DTS runs a subtask for each ApsaraDB RDS for MySQL instance. You can call this operation to query the details of the subtasks in a distributed change tracking task.
 * *   You can call the [DescribeDtsJobs](~~209702~~) operation to query the ID of the change tracking instance and the ID of the consumer group.
 *
 * @param tmpReq DescribeSubscriptionMetaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSubscriptionMetaResponse
 */
func (client *Client) DescribeSubscriptionMetaWithOptions(tmpReq *DescribeSubscriptionMetaRequest, runtime *util.RuntimeOptions) (_result *DescribeSubscriptionMetaResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeSubscriptionMetaShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SubMigrationJobIds)) {
		request.SubMigrationJobIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SubMigrationJobIds, tea.String("SubMigrationJobIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Topics)) {
		request.TopicsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Topics, tea.String("Topics"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Sid)) {
		query["Sid"] = request.Sid
	}

	if !tea.BoolValue(util.IsUnset(request.SubMigrationJobIdsShrink)) {
		query["SubMigrationJobIds"] = request.SubMigrationJobIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TopicsShrink)) {
		query["Topics"] = request.TopicsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSubscriptionMeta"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSubscriptionMetaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   When Data Transmission Service (DTS) tracks data changes from a PolarDB-X 1.0 instance, data is distributed across the attached ApsaraDB RDS for MySQL instances. DTS runs a subtask for each ApsaraDB RDS for MySQL instance. You can call this operation to query the details of the subtasks in a distributed change tracking task.
 * *   You can call the [DescribeDtsJobs](~~209702~~) operation to query the ID of the change tracking instance and the ID of the consumer group.
 *
 * @param request DescribeSubscriptionMetaRequest
 * @return DescribeSubscriptionMetaResponse
 */
func (client *Client) DescribeSubscriptionMeta(request *DescribeSubscriptionMetaRequest) (_result *DescribeSubscriptionMetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSubscriptionMetaResponse{}
	_body, _err := client.DescribeSubscriptionMetaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSynchronizationJobAlertWithOptions(request *DescribeSynchronizationJobAlertRequest, runtime *util.RuntimeOptions) (_result *DescribeSynchronizationJobAlertResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSynchronizationJobAlert"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSynchronizationJobAlertResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSynchronizationJobAlert(request *DescribeSynchronizationJobAlertRequest) (_result *DescribeSynchronizationJobAlertResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSynchronizationJobAlertResponse{}
	_body, _err := client.DescribeSynchronizationJobAlertWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSynchronizationJobReplicatorCompareWithOptions(request *DescribeSynchronizationJobReplicatorCompareRequest, runtime *util.RuntimeOptions) (_result *DescribeSynchronizationJobReplicatorCompareResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSynchronizationJobReplicatorCompare"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSynchronizationJobReplicatorCompareResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSynchronizationJobReplicatorCompare(request *DescribeSynchronizationJobReplicatorCompareRequest) (_result *DescribeSynchronizationJobReplicatorCompareResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSynchronizationJobReplicatorCompareResponse{}
	_body, _err := client.DescribeSynchronizationJobReplicatorCompareWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSynchronizationJobStatusWithOptions(request *DescribeSynchronizationJobStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeSynchronizationJobStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSynchronizationJobStatus"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSynchronizationJobStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSynchronizationJobStatus(request *DescribeSynchronizationJobStatusRequest) (_result *DescribeSynchronizationJobStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSynchronizationJobStatusResponse{}
	_body, _err := client.DescribeSynchronizationJobStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSynchronizationJobStatusListWithOptions(request *DescribeSynchronizationJobStatusListRequest, runtime *util.RuntimeOptions) (_result *DescribeSynchronizationJobStatusListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobIdListJsonStr)) {
		query["SynchronizationJobIdListJsonStr"] = request.SynchronizationJobIdListJsonStr
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSynchronizationJobStatusList"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSynchronizationJobStatusListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSynchronizationJobStatusList(request *DescribeSynchronizationJobStatusListRequest) (_result *DescribeSynchronizationJobStatusListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSynchronizationJobStatusListResponse{}
	_body, _err := client.DescribeSynchronizationJobStatusListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSynchronizationJobsWithOptions(request *DescribeSynchronizationJobsRequest, runtime *util.RuntimeOptions) (_result *DescribeSynchronizationJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobName)) {
		query["SynchronizationJobName"] = request.SynchronizationJobName
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSynchronizationJobs"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSynchronizationJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSynchronizationJobs(request *DescribeSynchronizationJobsRequest) (_result *DescribeSynchronizationJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSynchronizationJobsResponse{}
	_body, _err := client.DescribeSynchronizationJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, you must call the [ModifySynchronizationObject](~~49451~~) operation to obtain the task ID.
 *
 * @param request DescribeSynchronizationObjectModifyStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeSynchronizationObjectModifyStatusResponse
 */
func (client *Client) DescribeSynchronizationObjectModifyStatusWithOptions(request *DescribeSynchronizationObjectModifyStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeSynchronizationObjectModifyStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSynchronizationObjectModifyStatus"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSynchronizationObjectModifyStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, you must call the [ModifySynchronizationObject](~~49451~~) operation to obtain the task ID.
 *
 * @param request DescribeSynchronizationObjectModifyStatusRequest
 * @return DescribeSynchronizationObjectModifyStatusResponse
 */
func (client *Client) DescribeSynchronizationObjectModifyStatus(request *DescribeSynchronizationObjectModifyStatusRequest) (_result *DescribeSynchronizationObjectModifyStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSynchronizationObjectModifyStatusResponse{}
	_body, _err := client.DescribeSynchronizationObjectModifyStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTagKeysWithOptions(request *DescribeTagKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeTagKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagKeys"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagKeysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTagKeys(request *DescribeTagKeysRequest) (_result *DescribeTagKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagKeysResponse{}
	_body, _err := client.DescribeTagKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeTagValuesWithOptions(request *DescribeTagValuesRequest, runtime *util.RuntimeOptions) (_result *DescribeTagValuesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Key)) {
		query["Key"] = request.Key
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagValues"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagValuesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeTagValues(request *DescribeTagValuesRequest) (_result *DescribeTagValuesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagValuesResponse{}
	_body, _err := client.DescribeTagValuesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   The node must be an ApsaraDB RDS for MySQL instance or a self-managed MySQL database that is connected over Cloud Enterprise Network (CEN).
 * *   This operation is used to initialize the built-in account named rdsdt_dtsacct on a node of an active geo-redundancy database cluster. DTS uses this account to connect to the node and perform data synchronization tasks.
 *
 * @param request InitDtsRdsInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return InitDtsRdsInstanceResponse
 */
func (client *Client) InitDtsRdsInstanceWithOptions(request *InitDtsRdsInstanceRequest, runtime *util.RuntimeOptions) (_result *InitDtsRdsInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndpointCenId)) {
		query["EndpointCenId"] = request.EndpointCenId
	}

	if !tea.BoolValue(util.IsUnset(request.EndpointInstanceId)) {
		query["EndpointInstanceId"] = request.EndpointInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndpointInstanceType)) {
		query["EndpointInstanceType"] = request.EndpointInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.EndpointRegion)) {
		query["EndpointRegion"] = request.EndpointRegion
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InitDtsRdsInstance"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InitDtsRdsInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   The node must be an ApsaraDB RDS for MySQL instance or a self-managed MySQL database that is connected over Cloud Enterprise Network (CEN).
 * *   This operation is used to initialize the built-in account named rdsdt_dtsacct on a node of an active geo-redundancy database cluster. DTS uses this account to connect to the node and perform data synchronization tasks.
 *
 * @param request InitDtsRdsInstanceRequest
 * @return InitDtsRdsInstanceResponse
 */
func (client *Client) InitDtsRdsInstance(request *InitDtsRdsInstanceRequest) (_result *InitDtsRdsInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InitDtsRdsInstanceResponse{}
	_body, _err := client.InitDtsRdsInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDedicatedClusterWithOptions(request *ListDedicatedClusterRequest, runtime *util.RuntimeOptions) (_result *ListDedicatedClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderColumn)) {
		query["OrderColumn"] = request.OrderColumn
	}

	if !tea.BoolValue(util.IsUnset(request.OrderDirection)) {
		query["OrderDirection"] = request.OrderDirection
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDedicatedCluster"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDedicatedClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDedicatedCluster(request *ListDedicatedClusterRequest) (_result *ListDedicatedClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDedicatedClusterResponse{}
	_body, _err := client.ListDedicatedClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * ****
 *
 * @param request ListTagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTagResourcesResponse
 */
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * ****
 *
 * @param request ListTagResourcesRequest
 * @return ListTagResourcesResponse
 */
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyConsumerChannelWithOptions(request *ModifyConsumerChannelRequest, runtime *util.RuntimeOptions) (_result *ModifyConsumerChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupId)) {
		query["ConsumerGroupId"] = request.ConsumerGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupName)) {
		query["ConsumerGroupName"] = request.ConsumerGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupPassword)) {
		query["ConsumerGroupPassword"] = request.ConsumerGroupPassword
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupUserName)) {
		query["ConsumerGroupUserName"] = request.ConsumerGroupUserName
	}

	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyConsumerChannel"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyConsumerChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyConsumerChannel(request *ModifyConsumerChannelRequest) (_result *ModifyConsumerChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyConsumerChannelResponse{}
	_body, _err := client.ModifyConsumerChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >
 * *   This operation is applicable to only the new version of the change tracking feature. To use the new version, you must specify the SubscriptionInstanceNetworkType parameter when you call the ConfigureSubscriptionInstance operation. If you use the previous version, you do not need to specify the **SubscriptionInstanceNetworkType** parameter.
 * *   When you call this operation, the change tracking task must be in the NotStarted, Failed, Normal, or Abnormal state.
 *
 * @param request ModifyConsumerGroupPasswordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyConsumerGroupPasswordResponse
 */
func (client *Client) ModifyConsumerGroupPasswordWithOptions(request *ModifyConsumerGroupPasswordRequest, runtime *util.RuntimeOptions) (_result *ModifyConsumerGroupPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupID)) {
		query["ConsumerGroupID"] = request.ConsumerGroupID
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupName)) {
		query["ConsumerGroupName"] = request.ConsumerGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupPassword)) {
		query["ConsumerGroupPassword"] = request.ConsumerGroupPassword
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupUserName)) {
		query["ConsumerGroupUserName"] = request.ConsumerGroupUserName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumerGroupNewPassword)) {
		query["consumerGroupNewPassword"] = request.ConsumerGroupNewPassword
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyConsumerGroupPassword"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyConsumerGroupPasswordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >
 * *   This operation is applicable to only the new version of the change tracking feature. To use the new version, you must specify the SubscriptionInstanceNetworkType parameter when you call the ConfigureSubscriptionInstance operation. If you use the previous version, you do not need to specify the **SubscriptionInstanceNetworkType** parameter.
 * *   When you call this operation, the change tracking task must be in the NotStarted, Failed, Normal, or Abnormal state.
 *
 * @param request ModifyConsumerGroupPasswordRequest
 * @return ModifyConsumerGroupPasswordResponse
 */
func (client *Client) ModifyConsumerGroupPassword(request *ModifyConsumerGroupPasswordRequest) (_result *ModifyConsumerGroupPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyConsumerGroupPasswordResponse{}
	_body, _err := client.ModifyConsumerGroupPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >
 * *   This operation is applicable to only the previous version of the change tracking feature. To use the new version, you must specify the SubscriptionInstanceNetworkType parameter when you call the [ConfigureSubscriptionInstance](~~49437~~) operation. If you use the previous version, you do not need to specify the **SubscriptionInstanceNetworkType** parameter.
 * *   If you use the new version, you need to set the consumption checkpoint on the change tracking client.
 * *   When you call this operation, you must stop the change tracking client, and the change tracking task must be in the Normal state.
 *
 * @param request ModifyConsumptionTimestampRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyConsumptionTimestampResponse
 */
func (client *Client) ModifyConsumptionTimestampWithOptions(request *ModifyConsumptionTimestampRequest, runtime *util.RuntimeOptions) (_result *ModifyConsumptionTimestampResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsumptionTimestamp)) {
		query["ConsumptionTimestamp"] = request.ConsumptionTimestamp
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyConsumptionTimestamp"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyConsumptionTimestampResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >
 * *   This operation is applicable to only the previous version of the change tracking feature. To use the new version, you must specify the SubscriptionInstanceNetworkType parameter when you call the [ConfigureSubscriptionInstance](~~49437~~) operation. If you use the previous version, you do not need to specify the **SubscriptionInstanceNetworkType** parameter.
 * *   If you use the new version, you need to set the consumption checkpoint on the change tracking client.
 * *   When you call this operation, you must stop the change tracking client, and the change tracking task must be in the Normal state.
 *
 * @param request ModifyConsumptionTimestampRequest
 * @return ModifyConsumptionTimestampResponse
 */
func (client *Client) ModifyConsumptionTimestamp(request *ModifyConsumptionTimestampRequest) (_result *ModifyConsumptionTimestampResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyConsumptionTimestampResponse{}
	_body, _err := client.ModifyConsumptionTimestampWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can modify only the overcommit ratio.
 *
 * @param request ModifyDedicatedClusterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDedicatedClusterResponse
 */
func (client *Client) ModifyDedicatedClusterWithOptions(request *ModifyDedicatedClusterRequest, runtime *util.RuntimeOptions) (_result *ModifyDedicatedClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		query["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterName)) {
		query["DedicatedClusterName"] = request.DedicatedClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldRatio)) {
		query["OversoldRatio"] = request.OversoldRatio
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDedicatedCluster"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDedicatedClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can modify only the overcommit ratio.
 *
 * @param request ModifyDedicatedClusterRequest
 * @return ModifyDedicatedClusterResponse
 */
func (client *Client) ModifyDedicatedCluster(request *ModifyDedicatedClusterRequest) (_result *ModifyDedicatedClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDedicatedClusterResponse{}
	_body, _err := client.ModifyDedicatedClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDtsJobWithOptions(tmpReq *ModifyDtsJobRequest, runtime *util.RuntimeOptions) (_result *ModifyDtsJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ModifyDtsJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DbList)) {
		request.DbListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DbList, tea.String("DbList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DataInitialization)) {
		query["DataInitialization"] = request.DataInitialization
	}

	if !tea.BoolValue(util.IsUnset(request.DataSynchronization)) {
		query["DataSynchronization"] = request.DataSynchronization
	}

	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.FileOssUrl)) {
		query["FileOssUrl"] = request.FileOssUrl
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StructureInitialization)) {
		query["StructureInitialization"] = request.StructureInitialization
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbListShrink)) {
		body["DbList"] = request.DbListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EtlOperatorColumnReference)) {
		body["EtlOperatorColumnReference"] = request.EtlOperatorColumnReference
	}

	if !tea.BoolValue(util.IsUnset(request.FilterTableName)) {
		body["FilterTableName"] = request.FilterTableName
	}

	if !tea.BoolValue(util.IsUnset(request.ModifyTypeEnum)) {
		body["ModifyTypeEnum"] = request.ModifyTypeEnum
	}

	if !tea.BoolValue(util.IsUnset(request.Reserved)) {
		body["Reserved"] = request.Reserved
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDtsJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDtsJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDtsJob(request *ModifyDtsJobRequest) (_result *ModifyDtsJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDtsJobResponse{}
	_body, _err := client.ModifyDtsJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDtsJobAdvance(request *ModifyDtsJobAdvanceRequest, runtime *util.RuntimeOptions) (_result *ModifyDtsJobResponse, _err error) {
	// Step 0: init client
	accessKeyId, _err := client.Credential.GetAccessKeyId()
	if _err != nil {
		return _result, _err
	}

	accessKeySecret, _err := client.Credential.GetAccessKeySecret()
	if _err != nil {
		return _result, _err
	}

	securityToken, _err := client.Credential.GetSecurityToken()
	if _err != nil {
		return _result, _err
	}

	credentialType := client.Credential.GetType()
	openPlatformEndpoint := client.OpenPlatformEndpoint
	if tea.BoolValue(util.IsUnset(openPlatformEndpoint)) {
		openPlatformEndpoint = tea.String("openplatform.aliyuncs.com")
	}

	if tea.BoolValue(util.IsUnset(credentialType)) {
		credentialType = tea.String("access_key")
	}

	authConfig := &openapi.Config{
		AccessKeyId:     accessKeyId,
		AccessKeySecret: accessKeySecret,
		SecurityToken:   securityToken,
		Type:            credentialType,
		Endpoint:        openPlatformEndpoint,
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	authClient, _err := openplatform.NewClient(authConfig)
	if _err != nil {
		return _result, _err
	}

	authRequest := &openplatform.AuthorizeFileUploadRequest{
		Product:  tea.String("Dts"),
		RegionId: client.RegionId,
	}
	authResponse := &openplatform.AuthorizeFileUploadResponse{}
	ossConfig := &oss.Config{
		AccessKeySecret: accessKeySecret,
		Type:            tea.String("access_key"),
		Protocol:        client.Protocol,
		RegionId:        client.RegionId,
	}
	var ossClient *oss.Client
	fileObj := &fileform.FileField{}
	ossHeader := &oss.PostObjectRequestHeader{}
	uploadRequest := &oss.PostObjectRequest{}
	ossRuntime := &ossutil.RuntimeOptions{}
	openapiutil.Convert(runtime, ossRuntime)
	modifyDtsJobReq := &ModifyDtsJobRequest{}
	openapiutil.Convert(request, modifyDtsJobReq)
	if !tea.BoolValue(util.IsUnset(request.FileOssUrlObject)) {
		authResponse, _err = authClient.AuthorizeFileUploadWithOptions(authRequest, runtime)
		if _err != nil {
			return _result, _err
		}

		ossConfig.AccessKeyId = authResponse.Body.AccessKeyId
		ossConfig.Endpoint = openapiutil.GetEndpoint(authResponse.Body.Endpoint, authResponse.Body.UseAccelerate, client.EndpointType)
		ossClient, _err = oss.NewClient(ossConfig)
		if _err != nil {
			return _result, _err
		}

		fileObj = &fileform.FileField{
			Filename:    authResponse.Body.ObjectKey,
			Content:     request.FileOssUrlObject,
			ContentType: tea.String(""),
		}
		ossHeader = &oss.PostObjectRequestHeader{
			AccessKeyId:         authResponse.Body.AccessKeyId,
			Policy:              authResponse.Body.EncodedPolicy,
			Signature:           authResponse.Body.Signature,
			Key:                 authResponse.Body.ObjectKey,
			File:                fileObj,
			SuccessActionStatus: tea.String("201"),
		}
		uploadRequest = &oss.PostObjectRequest{
			BucketName: authResponse.Body.Bucket,
			Header:     ossHeader,
		}
		_, _err = ossClient.PostObject(uploadRequest, ossRuntime)
		if _err != nil {
			return _result, _err
		}
		modifyDtsJobReq.FileOssUrl = tea.String("http://" + tea.StringValue(authResponse.Body.Bucket) + "." + tea.StringValue(authResponse.Body.Endpoint) + "/" + tea.StringValue(authResponse.Body.ObjectKey))
	}

	modifyDtsJobResp, _err := client.ModifyDtsJobWithOptions(modifyDtsJobReq, runtime)
	if _err != nil {
		return _result, _err
	}

	_result = modifyDtsJobResp
	return _result, _err
}

func (client *Client) ModifyDtsJobDedicatedClusterWithOptions(request *ModifyDtsJobDedicatedClusterRequest, runtime *util.RuntimeOptions) (_result *ModifyDtsJobDedicatedClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		query["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobIds)) {
		query["DtsJobIds"] = request.DtsJobIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDtsJobDedicatedCluster"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDtsJobDedicatedClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDtsJobDedicatedCluster(request *ModifyDtsJobDedicatedClusterRequest) (_result *ModifyDtsJobDedicatedClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDtsJobDedicatedClusterResponse{}
	_body, _err := client.ModifyDtsJobDedicatedClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   DTS allows you to upgrade or downgrade the configurations of DTS instances in a dedicated cluster. You can adjust the resources that are occupied for task execution to dynamically adjust the number of tasks that can be scheduled in the cluster. This way, you can reduce the total number of DUs required for the cluster or release DUs.
 * *   Before you modify the upper limit of DUs for a DTS task, make sure that sufficient DUs are available.
 *
 * @param request ModifyDtsJobDuLimitRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyDtsJobDuLimitResponse
 */
func (client *Client) ModifyDtsJobDuLimitWithOptions(request *ModifyDtsJobDuLimitRequest, runtime *util.RuntimeOptions) (_result *ModifyDtsJobDuLimitResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.DuLimit)) {
		query["DuLimit"] = request.DuLimit
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDtsJobDuLimit"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDtsJobDuLimitResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   DTS allows you to upgrade or downgrade the configurations of DTS instances in a dedicated cluster. You can adjust the resources that are occupied for task execution to dynamically adjust the number of tasks that can be scheduled in the cluster. This way, you can reduce the total number of DUs required for the cluster or release DUs.
 * *   Before you modify the upper limit of DUs for a DTS task, make sure that sufficient DUs are available.
 *
 * @param request ModifyDtsJobDuLimitRequest
 * @return ModifyDtsJobDuLimitResponse
 */
func (client *Client) ModifyDtsJobDuLimit(request *ModifyDtsJobDuLimitRequest) (_result *ModifyDtsJobDuLimitResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDtsJobDuLimitResponse{}
	_body, _err := client.ModifyDtsJobDuLimitWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDtsJobNameWithOptions(request *ModifyDtsJobNameRequest, runtime *util.RuntimeOptions) (_result *ModifyDtsJobNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobName)) {
		query["DtsJobName"] = request.DtsJobName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDtsJobName"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDtsJobNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDtsJobName(request *ModifyDtsJobNameRequest) (_result *ModifyDtsJobNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDtsJobNameResponse{}
	_body, _err := client.ModifyDtsJobNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDtsJobPasswordWithOptions(request *ModifyDtsJobPasswordRequest, runtime *util.RuntimeOptions) (_result *ModifyDtsJobPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.Endpoint)) {
		query["Endpoint"] = request.Endpoint
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDtsJobPassword"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDtsJobPasswordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDtsJobPassword(request *ModifyDtsJobPasswordRequest) (_result *ModifyDtsJobPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDtsJobPasswordResponse{}
	_body, _err := client.ModifyDtsJobPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyDynamicConfigWithOptions(request *ModifyDynamicConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyDynamicConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigList)) {
		query["ConfigList"] = request.ConfigList
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.EnableLimit)) {
		query["EnableLimit"] = request.EnableLimit
	}

	if !tea.BoolValue(util.IsUnset(request.JobCode)) {
		query["JobCode"] = request.JobCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDynamicConfig"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDynamicConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyDynamicConfig(request *ModifyDynamicConfigRequest) (_result *ModifyDynamicConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDynamicConfigResponse{}
	_body, _err := client.ModifyDynamicConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifySubscriptionWithOptions(request *ModifySubscriptionRequest, runtime *util.RuntimeOptions) (_result *ModifySubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbList)) {
		query["DbList"] = request.DbList
	}

	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionDataTypeDDL)) {
		query["SubscriptionDataTypeDDL"] = request.SubscriptionDataTypeDDL
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionDataTypeDML)) {
		query["SubscriptionDataTypeDML"] = request.SubscriptionDataTypeDML
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySubscription"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySubscriptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifySubscription(request *ModifySubscriptionRequest) (_result *ModifySubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySubscriptionResponse{}
	_body, _err := client.ModifySubscriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * When you call this operation, the change tracking task must be in the Normal, NotStarted, or Failed state.
 * >
 * *   If you call this operation to modify the objects of a change tracking task that is in the Normal state, DTS automatically calls the [StartSubscriptionInstance](~~49438~~) to restart the task.
 * *   If you call this operation to modify the objects of a change tracking task that is in the NotStarted or Failed state, DTS does not automatically start the task. You must call the [StartSubscriptionInstance](~~49438~~) to restart the task.
 *
 * @param request ModifySubscriptionObjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifySubscriptionObjectResponse
 */
func (client *Client) ModifySubscriptionObjectWithOptions(request *ModifySubscriptionObjectRequest, runtime *util.RuntimeOptions) (_result *ModifySubscriptionObjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionObject)) {
		query["SubscriptionObject"] = request.SubscriptionObject
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySubscriptionObject"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySubscriptionObjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * When you call this operation, the change tracking task must be in the Normal, NotStarted, or Failed state.
 * >
 * *   If you call this operation to modify the objects of a change tracking task that is in the Normal state, DTS automatically calls the [StartSubscriptionInstance](~~49438~~) to restart the task.
 * *   If you call this operation to modify the objects of a change tracking task that is in the NotStarted or Failed state, DTS does not automatically start the task. You must call the [StartSubscriptionInstance](~~49438~~) to restart the task.
 *
 * @param request ModifySubscriptionObjectRequest
 * @return ModifySubscriptionObjectResponse
 */
func (client *Client) ModifySubscriptionObject(request *ModifySubscriptionObjectRequest) (_result *ModifySubscriptionObjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySubscriptionObjectResponse{}
	_body, _err := client.ModifySubscriptionObjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  When you call this operation, the data synchronization task must be in the Not Started or Synchronizing state.
 *
 * @param request ModifySynchronizationObjectRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifySynchronizationObjectResponse
 */
func (client *Client) ModifySynchronizationObjectWithOptions(request *ModifySynchronizationObjectRequest, runtime *util.RuntimeOptions) (_result *ModifySynchronizationObjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SynchronizationObjects)) {
		body["SynchronizationObjects"] = request.SynchronizationObjects
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySynchronizationObject"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySynchronizationObjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  When you call this operation, the data synchronization task must be in the Not Started or Synchronizing state.
 *
 * @param request ModifySynchronizationObjectRequest
 * @return ModifySynchronizationObjectResponse
 */
func (client *Client) ModifySynchronizationObject(request *ModifySynchronizationObjectRequest) (_result *ModifySynchronizationObjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySynchronizationObjectResponse{}
	_body, _err := client.ModifySynchronizationObjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RenewInstanceWithOptions(request *RenewInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BuyCount)) {
		query["BuyCount"] = request.BuyCount
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewInstance"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RenewInstance(request *RenewInstanceRequest) (_result *RenewInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewInstanceResponse{}
	_body, _err := client.RenewInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  If you clear the configurations of a data synchronization or change tracking task, DTS deletes the task. Then, DTS creates another task. The task is in the Not Configured state. You must call the [ConfigureDtsJob](~~208399~~) operation reconfigure the task.
 *
 * @param request ResetDtsJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetDtsJobResponse
 */
func (client *Client) ResetDtsJobWithOptions(request *ResetDtsJobRequest, runtime *util.RuntimeOptions) (_result *ResetDtsJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetDtsJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetDtsJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  If you clear the configurations of a data synchronization or change tracking task, DTS deletes the task. Then, DTS creates another task. The task is in the Not Configured state. You must call the [ConfigureDtsJob](~~208399~~) operation reconfigure the task.
 *
 * @param request ResetDtsJobRequest
 * @return ResetDtsJobResponse
 */
func (client *Client) ResetDtsJob(request *ResetDtsJobRequest) (_result *ResetDtsJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetDtsJobResponse{}
	_body, _err := client.ResetDtsJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  If you clear the configurations of a data synchronization task, the task will be released. To start the task again, you must call the **ConfigureSynchronizationJob** operation to reconfigure the task.
 *
 * @param request ResetSynchronizationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetSynchronizationJobResponse
 */
func (client *Client) ResetSynchronizationJobWithOptions(request *ResetSynchronizationJobRequest, runtime *util.RuntimeOptions) (_result *ResetSynchronizationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetSynchronizationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetSynchronizationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  If you clear the configurations of a data synchronization task, the task will be released. To start the task again, you must call the **ConfigureSynchronizationJob** operation to reconfigure the task.
 *
 * @param request ResetSynchronizationJobRequest
 * @return ResetSynchronizationJobResponse
 */
func (client *Client) ResetSynchronizationJob(request *ResetSynchronizationJobRequest) (_result *ResetSynchronizationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetSynchronizationJobResponse{}
	_body, _err := client.ResetSynchronizationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReverseTwoWayDirectionWithOptions(request *ReverseTwoWayDirectionRequest, runtime *util.RuntimeOptions) (_result *ReverseTwoWayDirectionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoreErrorSubJob)) {
		query["IgnoreErrorSubJob"] = request.IgnoreErrorSubJob
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReverseTwoWayDirection"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReverseTwoWayDirectionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReverseTwoWayDirection(request *ReverseTwoWayDirectionRequest) (_result *ReverseTwoWayDirectionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReverseTwoWayDirectionResponse{}
	_body, _err := client.ReverseTwoWayDirectionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * If you call this operation to ignore all precheck items, you must call the [StartMigrationJob](https://www.alibabacloud.com/help/zh/doc-detail/49429.htm) or [StartSynchronizationJob](https://www.alibabacloud.com/help/zh/doc-detail/49448.htm) operation. DTS performs a precheck again. After the data migration or synchronization task passes the precheck, the task will be automatically started.
 *
 * @param request ShieldPrecheckRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ShieldPrecheckResponse
 */
func (client *Client) ShieldPrecheckWithOptions(request *ShieldPrecheckRequest, runtime *util.RuntimeOptions) (_result *ShieldPrecheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PrecheckItems)) {
		query["PrecheckItems"] = request.PrecheckItems
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ShieldPrecheck"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ShieldPrecheckResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * If you call this operation to ignore all precheck items, you must call the [StartMigrationJob](https://www.alibabacloud.com/help/zh/doc-detail/49429.htm) or [StartSynchronizationJob](https://www.alibabacloud.com/help/zh/doc-detail/49448.htm) operation. DTS performs a precheck again. After the data migration or synchronization task passes the precheck, the task will be automatically started.
 *
 * @param request ShieldPrecheckRequest
 * @return ShieldPrecheckResponse
 */
func (client *Client) ShieldPrecheck(request *ShieldPrecheckRequest) (_result *ShieldPrecheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ShieldPrecheckResponse{}
	_body, _err := client.ShieldPrecheckWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SkipPreCheckWithOptions(request *SkipPreCheckRequest, runtime *util.RuntimeOptions) (_result *SkipPreCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Skip)) {
		query["Skip"] = request.Skip
	}

	if !tea.BoolValue(util.IsUnset(request.SkipPreCheckItems)) {
		query["SkipPreCheckItems"] = request.SkipPreCheckItems
	}

	if !tea.BoolValue(util.IsUnset(request.SkipPreCheckNames)) {
		query["SkipPreCheckNames"] = request.SkipPreCheckNames
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SkipPreCheck"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SkipPreCheckResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SkipPreCheck(request *SkipPreCheckRequest) (_result *SkipPreCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SkipPreCheckResponse{}
	_body, _err := client.SkipPreCheckWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartDtsJobWithOptions(request *StartDtsJobRequest, runtime *util.RuntimeOptions) (_result *StartDtsJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartDtsJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartDtsJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartDtsJob(request *StartDtsJobRequest) (_result *StartDtsJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartDtsJobResponse{}
	_body, _err := client.StartDtsJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartDtsJobsWithOptions(request *StartDtsJobsRequest, runtime *util.RuntimeOptions) (_result *StartDtsJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobIds)) {
		query["DtsJobIds"] = request.DtsJobIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartDtsJobs"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartDtsJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartDtsJobs(request *StartDtsJobsRequest) (_result *StartDtsJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartDtsJobsResponse{}
	_body, _err := client.StartDtsJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  When you call this operation, the data migration task must be in the Not Started, Paused, or Migration Failed state.
 *
 * @param request StartMigrationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartMigrationJobResponse
 */
func (client *Client) StartMigrationJobWithOptions(request *StartMigrationJobRequest, runtime *util.RuntimeOptions) (_result *StartMigrationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobId)) {
		query["MigrationJobId"] = request.MigrationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartMigrationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartMigrationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  When you call this operation, the data migration task must be in the Not Started, Paused, or Migration Failed state.
 *
 * @param request StartMigrationJobRequest
 * @return StartMigrationJobResponse
 */
func (client *Client) StartMigrationJob(request *StartMigrationJobRequest) (_result *StartMigrationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartMigrationJobResponse{}
	_body, _err := client.StartMigrationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * When you call this operation, the change tracking task must be in the NotStarted or Failed state.
 *
 * @param request StartSubscriptionInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartSubscriptionInstanceResponse
 */
func (client *Client) StartSubscriptionInstanceWithOptions(request *StartSubscriptionInstanceRequest, runtime *util.RuntimeOptions) (_result *StartSubscriptionInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubscriptionInstanceId)) {
		query["SubscriptionInstanceId"] = request.SubscriptionInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartSubscriptionInstance"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartSubscriptionInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * When you call this operation, the change tracking task must be in the NotStarted or Failed state.
 *
 * @param request StartSubscriptionInstanceRequest
 * @return StartSubscriptionInstanceResponse
 */
func (client *Client) StartSubscriptionInstance(request *StartSubscriptionInstanceRequest) (_result *StartSubscriptionInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartSubscriptionInstanceResponse{}
	_body, _err := client.StartSubscriptionInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >
 * *   Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service) of Data Transmission Service (DTS).
 * *   When you call this operation, the data synchronization task must be in the NotStarted, Failed, or Suspending state. If you call this operation to start a task that is in the NotStarted state, the task will be prechecked.
 *
 * @param request StartSynchronizationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartSynchronizationJobResponse
 */
func (client *Client) StartSynchronizationJobWithOptions(request *StartSynchronizationJobRequest, runtime *util.RuntimeOptions) (_result *StartSynchronizationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartSynchronizationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartSynchronizationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >
 * *   Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service) of Data Transmission Service (DTS).
 * *   When you call this operation, the data synchronization task must be in the NotStarted, Failed, or Suspending state. If you call this operation to start a task that is in the NotStarted state, the task will be prechecked.
 *
 * @param request StartSynchronizationJobRequest
 * @return StartSynchronizationJobResponse
 */
func (client *Client) StartSynchronizationJob(request *StartSynchronizationJobRequest) (_result *StartSynchronizationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartSynchronizationJobResponse{}
	_body, _err := client.StartSynchronizationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopDedicatedClusterWithOptions(request *StopDedicatedClusterRequest, runtime *util.RuntimeOptions) (_result *StopDedicatedClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterId)) {
		query["DedicatedClusterId"] = request.DedicatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DedicatedClusterName)) {
		query["DedicatedClusterName"] = request.DedicatedClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopDedicatedCluster"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopDedicatedClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopDedicatedCluster(request *StopDedicatedClusterRequest) (_result *StopDedicatedClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopDedicatedClusterResponse{}
	_body, _err := client.StopDedicatedClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopDtsJobWithOptions(request *StopDtsJobRequest, runtime *util.RuntimeOptions) (_result *StopDtsJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopDtsJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopDtsJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopDtsJob(request *StopDtsJobRequest) (_result *StopDtsJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopDtsJobResponse{}
	_body, _err := client.StopDtsJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopDtsJobsWithOptions(request *StopDtsJobsRequest, runtime *util.RuntimeOptions) (_result *StopDtsJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobIds)) {
		query["DtsJobIds"] = request.DtsJobIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopDtsJobs"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopDtsJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopDtsJobs(request *StopDtsJobsRequest) (_result *StopDtsJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopDtsJobsResponse{}
	_body, _err := client.StopDtsJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  After you call this operation to stop a data migration task, the status of the task changes to Finished and you cannot restart the task by calling the [StartMigrationJob](~~49429~~) operation.
 *
 * @param request StopMigrationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopMigrationJobResponse
 */
func (client *Client) StopMigrationJobWithOptions(request *StopMigrationJobRequest, runtime *util.RuntimeOptions) (_result *StopMigrationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobId)) {
		query["MigrationJobId"] = request.MigrationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopMigrationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopMigrationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  After you call this operation to stop a data migration task, the status of the task changes to Finished and you cannot restart the task by calling the [StartMigrationJob](~~49429~~) operation.
 *
 * @param request StopMigrationJobRequest
 * @return StopMigrationJobResponse
 */
func (client *Client) StopMigrationJob(request *StopMigrationJobRequest) (_result *StopMigrationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopMigrationJobResponse{}
	_body, _err := client.StopMigrationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SummaryJobDetailWithOptions(request *SummaryJobDetailRequest, runtime *util.RuntimeOptions) (_result *SummaryJobDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobCode)) {
		query["JobCode"] = request.JobCode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StructType)) {
		query["StructType"] = request.StructType
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SummaryJobDetail"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SummaryJobDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SummaryJobDetail(request *SummaryJobDetailRequest) (_result *SummaryJobDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SummaryJobDetailResponse{}
	_body, _err := client.SummaryJobDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * ****
 *
 * @param request SuspendDtsJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SuspendDtsJobResponse
 */
func (client *Client) SuspendDtsJobWithOptions(request *SuspendDtsJobRequest, runtime *util.RuntimeOptions) (_result *SuspendDtsJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendDtsJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendDtsJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * ****
 *
 * @param request SuspendDtsJobRequest
 * @return SuspendDtsJobResponse
 */
func (client *Client) SuspendDtsJob(request *SuspendDtsJobRequest) (_result *SuspendDtsJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendDtsJobResponse{}
	_body, _err := client.SuspendDtsJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SuspendDtsJobsWithOptions(request *SuspendDtsJobsRequest, runtime *util.RuntimeOptions) (_result *SuspendDtsJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobIds)) {
		query["DtsJobIds"] = request.DtsJobIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendDtsJobs"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendDtsJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SuspendDtsJobs(request *SuspendDtsJobsRequest) (_result *SuspendDtsJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendDtsJobsResponse{}
	_body, _err := client.SuspendDtsJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >
 * *   If a data migration task is performing incremental data migration, we recommend that you do not pause the task for more than 6 hours. Otherwise, you will not be able to call the [StartMigrationJob](~~49429~~) operation to restart the task.
 * *   If you select incremental data migration as the migration type for a pay-as-you-go instance, DTS charges a fee even when the task is paused. This is because DTS only stops writing data to the destination database. DTS continues to pull the logs of the source database so that the task can resume quickly after it is restarted. Therefore, incremental data migration consumes resources such as the bandwidth of the source database.
 *
 * @param request SuspendMigrationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SuspendMigrationJobResponse
 */
func (client *Client) SuspendMigrationJobWithOptions(request *SuspendMigrationJobRequest, runtime *util.RuntimeOptions) (_result *SuspendMigrationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.MigrationJobId)) {
		query["MigrationJobId"] = request.MigrationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendMigrationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendMigrationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >
 * *   If a data migration task is performing incremental data migration, we recommend that you do not pause the task for more than 6 hours. Otherwise, you will not be able to call the [StartMigrationJob](~~49429~~) operation to restart the task.
 * *   If you select incremental data migration as the migration type for a pay-as-you-go instance, DTS charges a fee even when the task is paused. This is because DTS only stops writing data to the destination database. DTS continues to pull the logs of the source database so that the task can resume quickly after it is restarted. Therefore, incremental data migration consumes resources such as the bandwidth of the source database.
 *
 * @param request SuspendMigrationJobRequest
 * @return SuspendMigrationJobResponse
 */
func (client *Client) SuspendMigrationJob(request *SuspendMigrationJobRequest) (_result *SuspendMigrationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendMigrationJobResponse{}
	_body, _err := client.SuspendMigrationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >
 * *   When you call this operation, the data synchronization task must be in the Synchronizing state.
 * *   We recommend that you do not pause a data synchronization task for more than 6 hours. Otherwise, the task cannot be started again.
 * *   If the billing method is pay-as-you-go, DTS charges a fee even when the task is paused. This is because DTS only stops writing data to the destination database. DTS continues to pull the logs of the source database so that the task can resume quickly after it is restarted. Therefore, data synchronization consumes resources such as the bandwidth of the source database.
 *
 * @param request SuspendSynchronizationJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SuspendSynchronizationJobResponse
 */
func (client *Client) SuspendSynchronizationJobWithOptions(request *SuspendSynchronizationJobRequest, runtime *util.RuntimeOptions) (_result *SuspendSynchronizationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendSynchronizationJob"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendSynchronizationJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >
 * *   When you call this operation, the data synchronization task must be in the Synchronizing state.
 * *   We recommend that you do not pause a data synchronization task for more than 6 hours. Otherwise, the task cannot be started again.
 * *   If the billing method is pay-as-you-go, DTS charges a fee even when the task is paused. This is because DTS only stops writing data to the destination database. DTS continues to pull the logs of the source database so that the task can resume quickly after it is restarted. Therefore, data synchronization consumes resources such as the bandwidth of the source database.
 *
 * @param request SuspendSynchronizationJobRequest
 * @return SuspendSynchronizationJobResponse
 */
func (client *Client) SuspendSynchronizationJob(request *SuspendSynchronizationJobRequest) (_result *SuspendSynchronizationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendSynchronizationJobResponse{}
	_body, _err := client.SuspendSynchronizationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchPhysicalDtsJobToCloudWithOptions(request *SwitchPhysicalDtsJobToCloudRequest, runtime *util.RuntimeOptions) (_result *SwitchPhysicalDtsJobToCloudResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsInstanceId)) {
		query["DtsInstanceId"] = request.DtsInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchPhysicalDtsJobToCloud"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchPhysicalDtsJobToCloudResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchPhysicalDtsJobToCloud(request *SwitchPhysicalDtsJobToCloudRequest) (_result *SwitchPhysicalDtsJobToCloudResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchPhysicalDtsJobToCloudResponse{}
	_body, _err := client.SwitchPhysicalDtsJobToCloudWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If the source or destination database is a self-managed MySQL database connected over the Internet, Elastic Compute Service (ECS) or Express Connect, you must call this operation to update the connection settings.
 * *   If the source or destination database is hosted on an ApsaraDB instance (such as ApsaraDB RDS instance and ApsaraDB for MongoDB instance), DTS automatically updates the connection settings. You do not need to call this operation.
 * > *   For two-way synchronization tasks, if you perform a primary/secondary switchover on the source or destination database, you must call this operation twice to update the connection settings.
 *         For example, if you perform a primary/secondary switchover on the destination database of the forward direction, you must call this operation twice. In the first call, set the **SynchronizationDirection** parameter to **Forward**, set the **Endpoint.Type **parameter to **Destination**, and configure the connection settings. In the second call, set the **SynchronizationDirection** parameter to **Reverse**, set the **Endpoint.Type **parameter to **Source**, and configure the connection settings.
 *
 * @param request SwitchSynchronizationEndpointRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SwitchSynchronizationEndpointResponse
 */
func (client *Client) SwitchSynchronizationEndpointWithOptions(request *SwitchSynchronizationEndpointRequest, runtime *util.RuntimeOptions) (_result *SwitchSynchronizationEndpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountId)) {
		query["AccountId"] = request.AccountId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationDirection)) {
		query["SynchronizationDirection"] = request.SynchronizationDirection
	}

	if !tea.BoolValue(util.IsUnset(request.SynchronizationJobId)) {
		query["SynchronizationJobId"] = request.SynchronizationJobId
	}

	if !tea.BoolValue(util.IsUnset(request.Endpoint)) {
		query["Endpoint"] = request.Endpoint
	}

	if !tea.BoolValue(util.IsUnset(request.SourceEndpoint)) {
		query["SourceEndpoint"] = request.SourceEndpoint
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SwitchSynchronizationEndpoint"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SwitchSynchronizationEndpointResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If the source or destination database is a self-managed MySQL database connected over the Internet, Elastic Compute Service (ECS) or Express Connect, you must call this operation to update the connection settings.
 * *   If the source or destination database is hosted on an ApsaraDB instance (such as ApsaraDB RDS instance and ApsaraDB for MongoDB instance), DTS automatically updates the connection settings. You do not need to call this operation.
 * > *   For two-way synchronization tasks, if you perform a primary/secondary switchover on the source or destination database, you must call this operation twice to update the connection settings.
 *         For example, if you perform a primary/secondary switchover on the destination database of the forward direction, you must call this operation twice. In the first call, set the **SynchronizationDirection** parameter to **Forward**, set the **Endpoint.Type **parameter to **Destination**, and configure the connection settings. In the second call, set the **SynchronizationDirection** parameter to **Reverse**, set the **Endpoint.Type **parameter to **Source**, and configure the connection settings.
 *
 * @param request SwitchSynchronizationEndpointRequest
 * @return SwitchSynchronizationEndpointResponse
 */
func (client *Client) SwitchSynchronizationEndpoint(request *SwitchSynchronizationEndpointRequest) (_result *SwitchSynchronizationEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchSynchronizationEndpointResponse{}
	_body, _err := client.SwitchSynchronizationEndpointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * If you have a large number of instances, you can create multiple tags and bind these tags to the instances. Then, you can filter the instances by tag.
 * *   A tag consists of a key and a value. Each key must be unique in a region for an Alibaba Cloud account. Different keys can be mapped to the same value.
 * *   If the tag that you specify does not exist, this tag is automatically created and bound to the specified instance.
 * *   If the key of the specified tag is the same as that of an existing tag, the specified tag overwrites the existing tag.
 * *   You can bind up to 20 tags to each instance.
 * *   You can bind tags to up to 50 instances in each call.
 *
 * @param request TagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TagResourcesResponse
 */
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * If you have a large number of instances, you can create multiple tags and bind these tags to the instances. Then, you can filter the instances by tag.
 * *   A tag consists of a key and a value. Each key must be unique in a region for an Alibaba Cloud account. Different keys can be mapped to the same value.
 * *   If the tag that you specify does not exist, this tag is automatically created and bound to the specified instance.
 * *   If the key of the specified tag is the same as that of an existing tag, the specified tag overwrites the existing tag.
 * *   You can bind up to 20 tags to each instance.
 * *   You can bind tags to up to 50 instances in each call.
 *
 * @param request TagResourcesRequest
 * @return TagResourcesResponse
 */
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TransferInstanceClassWithOptions(request *TransferInstanceClassRequest, runtime *util.RuntimeOptions) (_result *TransferInstanceClassResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceClass)) {
		query["InstanceClass"] = request.InstanceClass
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TransferInstanceClass"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TransferInstanceClassResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TransferInstanceClass(request *TransferInstanceClassRequest) (_result *TransferInstanceClassResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TransferInstanceClassResponse{}
	_body, _err := client.TransferInstanceClassWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of DTS.
 * *   The billing method of subscription instances cannot be changed to pay-as-you-go. To prevent resource waste, determine whether you need to change the billing method of your resources.
 * *   Data migration instances are all pay-as-you-go instances. You do not need to change the billing method of data migration instances.
 * *   After you change the billing method from pay-as-you-go to subscription, the DTS instance is not affected.
 *
 * @param request TransferPayTypeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TransferPayTypeResponse
 */
func (client *Client) TransferPayTypeWithOptions(request *TransferPayTypeRequest, runtime *util.RuntimeOptions) (_result *TransferPayTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BuyCount)) {
		query["BuyCount"] = request.BuyCount
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TransferPayType"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TransferPayTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of DTS.
 * *   The billing method of subscription instances cannot be changed to pay-as-you-go. To prevent resource waste, determine whether you need to change the billing method of your resources.
 * *   Data migration instances are all pay-as-you-go instances. You do not need to change the billing method of data migration instances.
 * *   After you change the billing method from pay-as-you-go to subscription, the DTS instance is not affected.
 *
 * @param request TransferPayTypeRequest
 * @return TransferPayTypeResponse
 */
func (client *Client) TransferPayType(request *TransferPayTypeRequest) (_result *TransferPayTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TransferPayTypeResponse{}
	_body, _err := client.TransferPayTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  If a tag is unbound from an instance and is not bound to other instances, the tag is deleted.
 *
 * @param request UntagResourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UntagResourcesResponse
 */
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  If a tag is unbound from an instance and is not bound to other instances, the tag is deleted.
 *
 * @param request UntagResourcesRequest
 * @return UntagResourcesResponse
 */
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS)
 * When you call this operation, take note of the following information:
 * *   The source and destination databases of the data synchronization task are both **MySQL** databases.
 * *   The synchronization topology of the data synchronization task is **one-way synchronization**.
 * *   The data synchronization task is in the **Synchronizing** state.
 * *   The upgrade operation causes data synchronization latency of about 5 seconds. We recommend that you perform this operation during off-peak hours.
 *
 * @param request UpgradeTwoWayRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpgradeTwoWayResponse
 */
func (client *Client) UpgradeTwoWayWithOptions(request *UpgradeTwoWayRequest, runtime *util.RuntimeOptions) (_result *UpgradeTwoWayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceClass)) {
		query["InstanceClass"] = request.InstanceClass
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeTwoWay"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeTwoWayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, make sure that you fully understand the billing methods and [pricing](https://www.alibabacloud.com/zh/product/data-transmission-service/pricing) of Data Transmission Service (DTS)
 * When you call this operation, take note of the following information:
 * *   The source and destination databases of the data synchronization task are both **MySQL** databases.
 * *   The synchronization topology of the data synchronization task is **one-way synchronization**.
 * *   The data synchronization task is in the **Synchronizing** state.
 * *   The upgrade operation causes data synchronization latency of about 5 seconds. We recommend that you perform this operation during off-peak hours.
 *
 * @param request UpgradeTwoWayRequest
 * @return UpgradeTwoWayResponse
 */
func (client *Client) UpgradeTwoWay(request *UpgradeTwoWayRequest) (_result *UpgradeTwoWayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeTwoWayResponse{}
	_body, _err := client.UpgradeTwoWayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The operation that you want to perform. Set the value to **WhiteIpList**.
 *
 * @param request WhiteIpListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return WhiteIpListResponse
 */
func (client *Client) WhiteIpListWithOptions(request *WhiteIpListRequest, runtime *util.RuntimeOptions) (_result *WhiteIpListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationRegion)) {
		query["DestinationRegion"] = request.DestinationRegion
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("WhiteIpList"),
		Version:     tea.String("2020-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &WhiteIpListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The operation that you want to perform. Set the value to **WhiteIpList**.
 *
 * @param request WhiteIpListRequest
 * @return WhiteIpListResponse
 */
func (client *Client) WhiteIpList(request *WhiteIpListRequest) (_result *WhiteIpListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &WhiteIpListResponse{}
	_body, _err := client.WhiteIpListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
