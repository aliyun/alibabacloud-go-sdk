// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iDescribeSubscriptionInstanceStatusResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetBeginTimestamp(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetBeginTimestamp() *string
	SetConsumptionCheckpoint(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetConsumptionCheckpoint() *string
	SetConsumptionClient(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetConsumptionClient() *string
	SetEndTimestamp(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetEndTimestamp() *string
	SetErrCode(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetErrCode() *string
	SetErrMessage(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetErrMessage() *string
	SetErrorMessage(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetErrorMessage() *string
	SetPayType(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetPayType() *string
	SetRequestId(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetRequestId() *string
	SetSourceEndpoint(v *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) *DescribeSubscriptionInstanceStatusResponseBody
	GetSourceEndpoint() *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint
	SetStatus(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetStatus() *string
	SetSubscribeTopic(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetSubscribeTopic() *string
	SetSubscriptionDataType(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) *DescribeSubscriptionInstanceStatusResponseBody
	GetSubscriptionDataType() *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType
	SetSubscriptionHost(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) *DescribeSubscriptionInstanceStatusResponseBody
	GetSubscriptionHost() *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost
	SetSubscriptionInstanceID(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetSubscriptionInstanceID() *string
	SetSubscriptionInstanceName(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetSubscriptionInstanceName() *string
	SetSubscriptionObject(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) *DescribeSubscriptionInstanceStatusResponseBody
	GetSubscriptionObject() *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject
	SetSuccess(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetSuccess() *string
	SetTaskId(v string) *DescribeSubscriptionInstanceStatusResponseBody
	GetTaskId() *string
}

type DescribeSubscriptionInstanceStatusResponseBody struct {
	// The start of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	//
	// example:
	//
	// 2021-03-15T08:25:34Z
	BeginTimestamp *string `json:"BeginTimestamp,omitempty" xml:"BeginTimestamp,omitempty"`
	// The consumption checkpoint of the change tracking instance. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	//
	// example:
	//
	// 2021-03-23T07:30:31Z
	ConsumptionCheckpoint *string `json:"ConsumptionCheckpoint,omitempty" xml:"ConsumptionCheckpoint,omitempty"`
	// The downstream client information, in the following format: \\<IP address of the downstream client>:\\<Random ID generated by DTS>.
	//
	// example:
	//
	// 114.***.***.**:dts********
	ConsumptionClient *string `json:"ConsumptionClient,omitempty" xml:"ConsumptionClient,omitempty"`
	// The end of the time range for change tracking. The time is displayed in the *yyyy-MM-dd*T*HH:mm:ss*Z format in UTC.
	//
	// example:
	//
	// 2021-03-26T14:03:21Z
	EndTimestamp *string `json:"EndTimestamp,omitempty" xml:"EndTimestamp,omitempty"`
	// The error code returned if the call failed.
	//
	// example:
	//
	// InternalError
	ErrCode *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message returned if the call failed.
	//
	// example:
	//
	// The request processing has failed due to some unknown error.
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The error message returned if change tracking failed.
	//
	// example:
	//
	// ******
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The billing method of the change tracking instance. Valid values:
	//
	// 	- **PrePaid**: subscription
	//
	// 	- **PostPaid**: pay-as-you-go
	//
	// example:
	//
	// PrePaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// E0845D0A-6D36-4EEB-BE26-CF191E1A****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The connection settings of the source instance.
	SourceEndpoint *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint `json:"SourceEndpoint,omitempty" xml:"SourceEndpoint,omitempty" type:"Struct"`
	// The status of the change tracking task. Valid values:
	//
	// 	- **NotStarted**: The task is not started.
	//
	// 	- **Prechecking**: The task is being prechecked.
	//
	// 	- **PrecheckFailed**: The task failed to pass the precheck.
	//
	// 	- **Starting**: The task is being started.
	//
	// 	- **Normal**: The task is running as expected.
	//
	// 	- **Abnormal**: The task is not running as expected.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The topic of the change tracking instance.
	//
	// >  This parameter is returned only if your change tracking instance is of the new version and you have called the [CreateConsumerGroup](https://help.aliyun.com/document_detail/122863.html) operation to create a consumer group.
	//
	// example:
	//
	// cn_hangzhou_rm_bp1162kryivb8****_dtstest_version2
	SubscribeTopic *string `json:"SubscribeTopic,omitempty" xml:"SubscribeTopic,omitempty"`
	// The types of operations that are tracked by the task.
	SubscriptionDataType *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType `json:"SubscriptionDataType,omitempty" xml:"SubscriptionDataType,omitempty" type:"Struct"`
	// The endpoint of the change tracking instance.
	SubscriptionHost *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost `json:"SubscriptionHost,omitempty" xml:"SubscriptionHost,omitempty" type:"Struct"`
	// The ID of the change tracking instance.
	//
	// example:
	//
	// rm-bp1162kryivb8****
	SubscriptionInstanceID *string `json:"SubscriptionInstanceID,omitempty" xml:"SubscriptionInstanceID,omitempty"`
	// The name of the change tracking instance.
	//
	// example:
	//
	// dtstest
	SubscriptionInstanceName *string `json:"SubscriptionInstanceName,omitempty" xml:"SubscriptionInstanceName,omitempty"`
	// The objects for change tracking.
	SubscriptionObject *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject `json:"SubscriptionObject,omitempty" xml:"SubscriptionObject,omitempty" type:"Struct"`
	// Indicates whether the call was successful.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the change tracking task.
	//
	// example:
	//
	// y0zz3t13h7d****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetBeginTimestamp() *string {
	return s.BeginTimestamp
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetConsumptionCheckpoint() *string {
	return s.ConsumptionCheckpoint
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetConsumptionClient() *string {
	return s.ConsumptionClient
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetEndTimestamp() *string {
	return s.EndTimestamp
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetErrCode() *string {
	return s.ErrCode
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetErrMessage() *string {
	return s.ErrMessage
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetErrorMessage() *string {
	return s.ErrorMessage
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetPayType() *string {
	return s.PayType
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetRequestId() *string {
	return s.RequestId
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetSourceEndpoint() *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint {
	return s.SourceEndpoint
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetStatus() *string {
	return s.Status
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetSubscribeTopic() *string {
	return s.SubscribeTopic
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetSubscriptionDataType() *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType {
	return s.SubscriptionDataType
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetSubscriptionHost() *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost {
	return s.SubscriptionHost
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetSubscriptionInstanceID() *string {
	return s.SubscriptionInstanceID
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetSubscriptionInstanceName() *string {
	return s.SubscriptionInstanceName
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetSubscriptionObject() *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject {
	return s.SubscriptionObject
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetSuccess() *string {
	return s.Success
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) GetTaskId() *string {
	return s.TaskId
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetBeginTimestamp(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.BeginTimestamp = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetConsumptionCheckpoint(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.ConsumptionCheckpoint = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetConsumptionClient(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.ConsumptionClient = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetEndTimestamp(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.EndTimestamp = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetErrCode(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.ErrCode = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetErrMessage(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.ErrMessage = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetErrorMessage(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetPayType(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.PayType = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetRequestId(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSourceEndpoint(v *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SourceEndpoint = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetStatus(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscribeTopic(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscribeTopic = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscriptionDataType(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscriptionDataType = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscriptionHost(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscriptionHost = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscriptionInstanceID(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscriptionInstanceID = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscriptionInstanceName(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscriptionInstanceName = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSubscriptionObject(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) *DescribeSubscriptionInstanceStatusResponseBody {
	s.SubscriptionObject = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetSuccess(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) SetTaskId(v string) *DescribeSubscriptionInstanceStatusResponseBody {
	s.TaskId = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint struct {
	// The ID of the instance that hosts the source database.
	//
	// example:
	//
	// rm-bp1162kryivb8****
	InstanceID *string `json:"InstanceID,omitempty" xml:"InstanceID,omitempty"`
	// The instance type of the source database.
	//
	// >  This parameter is returned only for change tracking instances of the new version.
	//
	// example:
	//
	// RDS
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) String() string {
	return dara.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) GetInstanceID() *string {
	return s.InstanceID
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) GetInstanceType() *string {
	return s.InstanceType
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) SetInstanceID(v string) *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint {
	s.InstanceID = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) SetInstanceType(v string) *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint {
	s.InstanceType = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySourceEndpoint) Validate() error {
	return dara.Validate(s)
}

type DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType struct {
	// Indicates whether data definition language (DDL) operations are tracked. Valid values:
	//
	// 	- **true**: yes
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	DDL *bool `json:"DDL,omitempty" xml:"DDL,omitempty"`
	// Indicates whether data manipulation language (DML) operations are tracked. Valid values:
	//
	// 	- **true**: yes
	//
	// 	- **false**: no
	//
	// example:
	//
	// true
	DML *bool `json:"DML,omitempty" xml:"DML,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) String() string {
	return dara.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) GetDDL() *bool {
	return s.DDL
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) GetDML() *bool {
	return s.DML
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) SetDDL(v bool) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType {
	s.DDL = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) SetDML(v bool) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType {
	s.DML = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionDataType) Validate() error {
	return dara.Validate(s)
}

type DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost struct {
	// The private endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
	//
	// example:
	//
	// dts-cn-****-internal.aliyuncs.com:18002
	PrivateHost *string `json:"PrivateHost,omitempty" xml:"PrivateHost,omitempty"`
	// The public endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
	//
	// example:
	//
	// dts-cn-****.aliyuncs.com:18001
	PublicHost *string `json:"PublicHost,omitempty" xml:"PublicHost,omitempty"`
	// The virtual private cloud (VPC) endpoint of the change tracking instance. The format is `<Address>:<Port number>`.
	//
	// example:
	//
	// dts-cn-****-vpc.aliyuncs.com:18003
	VPCHost *string `json:"VPCHost,omitempty" xml:"VPCHost,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) String() string {
	return dara.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) GetPrivateHost() *string {
	return s.PrivateHost
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) GetPublicHost() *string {
	return s.PublicHost
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) GetVPCHost() *string {
	return s.VPCHost
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) SetPrivateHost(v string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost {
	s.PrivateHost = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) SetPublicHost(v string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost {
	s.PublicHost = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) SetVPCHost(v string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost {
	s.VPCHost = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionHost) Validate() error {
	return dara.Validate(s)
}

type DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject struct {
	SynchronousObject []*DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject `json:"SynchronousObject,omitempty" xml:"SynchronousObject,omitempty" type:"Repeated"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) String() string {
	return dara.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) GetSynchronousObject() []*DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject {
	return s.SynchronousObject
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) SetSynchronousObject(v []*DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject {
	s.SynchronousObject = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObject) Validate() error {
	return dara.Validate(s)
}

type DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject struct {
	// The name of the database to which the object belongs.
	//
	// example:
	//
	// dtstestdata
	DatabaseName *string `json:"DatabaseName,omitempty" xml:"DatabaseName,omitempty"`
	// The table name.
	TableList *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList `json:"TableList,omitempty" xml:"TableList,omitempty" type:"Struct"`
	// Indicates whether the data of an entire database is tracked. Valid values:
	//
	// 	- **true**: yes
	//
	// 	- **false**: no
	//
	// example:
	//
	// false
	WholeDatabase *string `json:"WholeDatabase,omitempty" xml:"WholeDatabase,omitempty"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) String() string {
	return dara.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) GetDatabaseName() *string {
	return s.DatabaseName
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) GetTableList() *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList {
	return s.TableList
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) GetWholeDatabase() *string {
	return s.WholeDatabase
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) SetDatabaseName(v string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject {
	s.DatabaseName = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) SetTableList(v *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject {
	s.TableList = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) SetWholeDatabase(v string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject {
	s.WholeDatabase = &v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObject) Validate() error {
	return dara.Validate(s)
}

type DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList struct {
	Table []*string `json:"Table,omitempty" xml:"Table,omitempty" type:"Repeated"`
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList) String() string {
	return dara.Prettify(s)
}

func (s DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList) GoString() string {
	return s.String()
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList) GetTable() []*string {
	return s.Table
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList) SetTable(v []*string) *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList {
	s.Table = v
	return s
}

func (s *DescribeSubscriptionInstanceStatusResponseBodySubscriptionObjectSynchronousObjectTableList) Validate() error {
	return dara.Validate(s)
}
