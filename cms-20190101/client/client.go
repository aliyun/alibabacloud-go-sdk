// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AlertEvent struct {
	AlertName    *string                `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	AlertStatus  *string                `json:"AlertStatus,omitempty" xml:"AlertStatus,omitempty"`
	Arn          *string                `json:"Arn,omitempty" xml:"Arn,omitempty"`
	Content      *string                `json:"Content,omitempty" xml:"Content,omitempty"`
	CustomLabels map[string]interface{} `json:"CustomLabels,omitempty" xml:"CustomLabels,omitempty"`
	DeDupId      *string                `json:"DeDupId,omitempty" xml:"DeDupId,omitempty"`
	Details      *string                `json:"Details,omitempty" xml:"Details,omitempty"`
	EventName    *string                `json:"EventName,omitempty" xml:"EventName,omitempty"`
	EventType    *string                `json:"EventType,omitempty" xml:"EventType,omitempty"`
	Expression   *string                `json:"Expression,omitempty" xml:"Expression,omitempty"`
	Metrics      []*AlertEventMetrics   `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	Product      *string                `json:"Product,omitempty" xml:"Product,omitempty"`
	ResourceInfo map[string]interface{} `json:"ResourceInfo,omitempty" xml:"ResourceInfo,omitempty"`
	RuleName     *string                `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	Severity     *string                `json:"Severity,omitempty" xml:"Severity,omitempty"`
	Source       *string                `json:"Source,omitempty" xml:"Source,omitempty"`
	Summary      *string                `json:"Summary,omitempty" xml:"Summary,omitempty"`
	Timestamp    *int64                 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	TraceId      *string                `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	UserId       *string                `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AlertEvent) String() string {
	return tea.Prettify(s)
}

func (s AlertEvent) GoString() string {
	return s.String()
}

func (s *AlertEvent) SetAlertName(v string) *AlertEvent {
	s.AlertName = &v
	return s
}

func (s *AlertEvent) SetAlertStatus(v string) *AlertEvent {
	s.AlertStatus = &v
	return s
}

func (s *AlertEvent) SetArn(v string) *AlertEvent {
	s.Arn = &v
	return s
}

func (s *AlertEvent) SetContent(v string) *AlertEvent {
	s.Content = &v
	return s
}

func (s *AlertEvent) SetCustomLabels(v map[string]interface{}) *AlertEvent {
	s.CustomLabels = v
	return s
}

func (s *AlertEvent) SetDeDupId(v string) *AlertEvent {
	s.DeDupId = &v
	return s
}

func (s *AlertEvent) SetDetails(v string) *AlertEvent {
	s.Details = &v
	return s
}

func (s *AlertEvent) SetEventName(v string) *AlertEvent {
	s.EventName = &v
	return s
}

func (s *AlertEvent) SetEventType(v string) *AlertEvent {
	s.EventType = &v
	return s
}

func (s *AlertEvent) SetExpression(v string) *AlertEvent {
	s.Expression = &v
	return s
}

func (s *AlertEvent) SetMetrics(v []*AlertEventMetrics) *AlertEvent {
	s.Metrics = v
	return s
}

func (s *AlertEvent) SetProduct(v string) *AlertEvent {
	s.Product = &v
	return s
}

func (s *AlertEvent) SetResourceInfo(v map[string]interface{}) *AlertEvent {
	s.ResourceInfo = v
	return s
}

func (s *AlertEvent) SetRuleName(v string) *AlertEvent {
	s.RuleName = &v
	return s
}

func (s *AlertEvent) SetSeverity(v string) *AlertEvent {
	s.Severity = &v
	return s
}

func (s *AlertEvent) SetSource(v string) *AlertEvent {
	s.Source = &v
	return s
}

func (s *AlertEvent) SetSummary(v string) *AlertEvent {
	s.Summary = &v
	return s
}

func (s *AlertEvent) SetTimestamp(v int64) *AlertEvent {
	s.Timestamp = &v
	return s
}

func (s *AlertEvent) SetTraceId(v string) *AlertEvent {
	s.TraceId = &v
	return s
}

func (s *AlertEvent) SetUserId(v string) *AlertEvent {
	s.UserId = &v
	return s
}

type AlertEventMetrics struct {
	CurValue     *string  `json:"CurValue,omitempty" xml:"CurValue,omitempty"`
	MetricName   *string  `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	MetricNameEn *string  `json:"MetricNameEn,omitempty" xml:"MetricNameEn,omitempty"`
	MetricNameZh *string  `json:"MetricNameZh,omitempty" xml:"MetricNameZh,omitempty"`
	Operator     *string  `json:"Operator,omitempty" xml:"Operator,omitempty"`
	Statistics   *string  `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold    *string  `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Unit         *string  `json:"Unit,omitempty" xml:"Unit,omitempty"`
	UnitFactor   *float32 `json:"UnitFactor,omitempty" xml:"UnitFactor,omitempty"`
}

func (s AlertEventMetrics) String() string {
	return tea.Prettify(s)
}

func (s AlertEventMetrics) GoString() string {
	return s.String()
}

func (s *AlertEventMetrics) SetCurValue(v string) *AlertEventMetrics {
	s.CurValue = &v
	return s
}

func (s *AlertEventMetrics) SetMetricName(v string) *AlertEventMetrics {
	s.MetricName = &v
	return s
}

func (s *AlertEventMetrics) SetMetricNameEn(v string) *AlertEventMetrics {
	s.MetricNameEn = &v
	return s
}

func (s *AlertEventMetrics) SetMetricNameZh(v string) *AlertEventMetrics {
	s.MetricNameZh = &v
	return s
}

func (s *AlertEventMetrics) SetOperator(v string) *AlertEventMetrics {
	s.Operator = &v
	return s
}

func (s *AlertEventMetrics) SetStatistics(v string) *AlertEventMetrics {
	s.Statistics = &v
	return s
}

func (s *AlertEventMetrics) SetThreshold(v string) *AlertEventMetrics {
	s.Threshold = &v
	return s
}

func (s *AlertEventMetrics) SetUnit(v string) *AlertEventMetrics {
	s.Unit = &v
	return s
}

func (s *AlertEventMetrics) SetUnitFactor(v float32) *AlertEventMetrics {
	s.UnitFactor = &v
	return s
}

type AlertStrategyRelation struct {
	AlertName    *string `json:"AlertName,omitempty" xml:"AlertName,omitempty"`
	StrategyUuid *string `json:"StrategyUuid,omitempty" xml:"StrategyUuid,omitempty"`
}

func (s AlertStrategyRelation) String() string {
	return tea.Prettify(s)
}

func (s AlertStrategyRelation) GoString() string {
	return s.String()
}

func (s *AlertStrategyRelation) SetAlertName(v string) *AlertStrategyRelation {
	s.AlertName = &v
	return s
}

func (s *AlertStrategyRelation) SetStrategyUuid(v string) *AlertStrategyRelation {
	s.StrategyUuid = &v
	return s
}

type Dimension struct {
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s Dimension) String() string {
	return tea.Prettify(s)
}

func (s Dimension) GoString() string {
	return s.String()
}

func (s *Dimension) SetLabel(v string) *Dimension {
	s.Label = &v
	return s
}

func (s *Dimension) SetValue(v string) *Dimension {
	s.Value = &v
	return s
}

type EscalationRule struct {
	CreateTime  *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	Escalations []*EscalationRuleEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Repeated"`
	// This parameter is required.
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Uuid       *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s EscalationRule) String() string {
	return tea.Prettify(s)
}

func (s EscalationRule) GoString() string {
	return s.String()
}

func (s *EscalationRule) SetCreateTime(v string) *EscalationRule {
	s.CreateTime = &v
	return s
}

func (s *EscalationRule) SetDescription(v string) *EscalationRule {
	s.Description = &v
	return s
}

func (s *EscalationRule) SetEscalations(v []*EscalationRuleEscalations) *EscalationRule {
	s.Escalations = v
	return s
}

func (s *EscalationRule) SetName(v string) *EscalationRule {
	s.Name = &v
	return s
}

func (s *EscalationRule) SetUpdateTime(v string) *EscalationRule {
	s.UpdateTime = &v
	return s
}

func (s *EscalationRule) SetUserId(v string) *EscalationRule {
	s.UserId = &v
	return s
}

func (s *EscalationRule) SetUuid(v string) *EscalationRule {
	s.Uuid = &v
	return s
}

type EscalationRuleEscalations struct {
	BackupContactGroups  []*string                                      `json:"BackupContactGroups,omitempty" xml:"BackupContactGroups,omitempty" type:"Repeated"`
	ContactGroups        []*string                                      `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty" type:"Repeated"`
	ContactGroupsByLevel *EscalationRuleEscalationsContactGroupsByLevel `json:"ContactGroupsByLevel,omitempty" xml:"ContactGroupsByLevel,omitempty" type:"Struct"`
	EscalateMin          *int64                                         `json:"EscalateMin,omitempty" xml:"EscalateMin,omitempty"`
}

func (s EscalationRuleEscalations) String() string {
	return tea.Prettify(s)
}

func (s EscalationRuleEscalations) GoString() string {
	return s.String()
}

func (s *EscalationRuleEscalations) SetBackupContactGroups(v []*string) *EscalationRuleEscalations {
	s.BackupContactGroups = v
	return s
}

func (s *EscalationRuleEscalations) SetContactGroups(v []*string) *EscalationRuleEscalations {
	s.ContactGroups = v
	return s
}

func (s *EscalationRuleEscalations) SetContactGroupsByLevel(v *EscalationRuleEscalationsContactGroupsByLevel) *EscalationRuleEscalations {
	s.ContactGroupsByLevel = v
	return s
}

func (s *EscalationRuleEscalations) SetEscalateMin(v int64) *EscalationRuleEscalations {
	s.EscalateMin = &v
	return s
}

type EscalationRuleEscalationsContactGroupsByLevel struct {
	Critical []*string `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Repeated"`
	Error    []*string `json:"Error,omitempty" xml:"Error,omitempty" type:"Repeated"`
	Info     []*string `json:"Info,omitempty" xml:"Info,omitempty" type:"Repeated"`
	Resolve  []*string `json:"Resolve,omitempty" xml:"Resolve,omitempty" type:"Repeated"`
	Warning  []*string `json:"Warning,omitempty" xml:"Warning,omitempty" type:"Repeated"`
}

func (s EscalationRuleEscalationsContactGroupsByLevel) String() string {
	return tea.Prettify(s)
}

func (s EscalationRuleEscalationsContactGroupsByLevel) GoString() string {
	return s.String()
}

func (s *EscalationRuleEscalationsContactGroupsByLevel) SetCritical(v []*string) *EscalationRuleEscalationsContactGroupsByLevel {
	s.Critical = v
	return s
}

func (s *EscalationRuleEscalationsContactGroupsByLevel) SetError(v []*string) *EscalationRuleEscalationsContactGroupsByLevel {
	s.Error = v
	return s
}

func (s *EscalationRuleEscalationsContactGroupsByLevel) SetInfo(v []*string) *EscalationRuleEscalationsContactGroupsByLevel {
	s.Info = v
	return s
}

func (s *EscalationRuleEscalationsContactGroupsByLevel) SetResolve(v []*string) *EscalationRuleEscalationsContactGroupsByLevel {
	s.Resolve = v
	return s
}

func (s *EscalationRuleEscalationsContactGroupsByLevel) SetWarning(v []*string) *EscalationRuleEscalationsContactGroupsByLevel {
	s.Warning = v
	return s
}

type Incident struct {
	ActionTime     *int64                 `json:"ActionTime,omitempty" xml:"ActionTime,omitempty"`
	AlertCount     *int64                 `json:"AlertCount,omitempty" xml:"AlertCount,omitempty"`
	EndTime        *int64                 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	GroupingData   map[string]interface{} `json:"GroupingData,omitempty" xml:"GroupingData,omitempty"`
	GroupingId     *string                `json:"GroupingId,omitempty" xml:"GroupingId,omitempty"`
	GroupingKey    *string                `json:"GroupingKey,omitempty" xml:"GroupingKey,omitempty"`
	IncidentId     *string                `json:"IncidentId,omitempty" xml:"IncidentId,omitempty"`
	IncidentStatus *string                `json:"IncidentStatus,omitempty" xml:"IncidentStatus,omitempty"`
	Severity       *string                `json:"Severity,omitempty" xml:"Severity,omitempty"`
	StartTime      *int64                 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StrategyUuid   *string                `json:"StrategyUuid,omitempty" xml:"StrategyUuid,omitempty"`
	UserId         *string                `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s Incident) String() string {
	return tea.Prettify(s)
}

func (s Incident) GoString() string {
	return s.String()
}

func (s *Incident) SetActionTime(v int64) *Incident {
	s.ActionTime = &v
	return s
}

func (s *Incident) SetAlertCount(v int64) *Incident {
	s.AlertCount = &v
	return s
}

func (s *Incident) SetEndTime(v int64) *Incident {
	s.EndTime = &v
	return s
}

func (s *Incident) SetGroupingData(v map[string]interface{}) *Incident {
	s.GroupingData = v
	return s
}

func (s *Incident) SetGroupingId(v string) *Incident {
	s.GroupingId = &v
	return s
}

func (s *Incident) SetGroupingKey(v string) *Incident {
	s.GroupingKey = &v
	return s
}

func (s *Incident) SetIncidentId(v string) *Incident {
	s.IncidentId = &v
	return s
}

func (s *Incident) SetIncidentStatus(v string) *Incident {
	s.IncidentStatus = &v
	return s
}

func (s *Incident) SetSeverity(v string) *Incident {
	s.Severity = &v
	return s
}

func (s *Incident) SetStartTime(v int64) *Incident {
	s.StartTime = &v
	return s
}

func (s *Incident) SetStrategyUuid(v string) *Incident {
	s.StrategyUuid = &v
	return s
}

func (s *Incident) SetUserId(v string) *Incident {
	s.UserId = &v
	return s
}

type Matcher struct {
	Label    *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	Value    *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s Matcher) String() string {
	return tea.Prettify(s)
}

func (s Matcher) GoString() string {
	return s.String()
}

func (s *Matcher) SetLabel(v string) *Matcher {
	s.Label = &v
	return s
}

func (s *Matcher) SetOperator(v string) *Matcher {
	s.Operator = &v
	return s
}

func (s *Matcher) SetValue(v string) *Matcher {
	s.Value = &v
	return s
}

type MetricStat struct {
	Associated   map[string]*string     `json:"Associated,omitempty" xml:"Associated,omitempty"`
	Dimensions   []*Dimension           `json:"Dimensions,omitempty" xml:"Dimensions,omitempty" type:"Repeated"`
	LogTime      *int64                 `json:"LogTime,omitempty" xml:"LogTime,omitempty"`
	Measurements map[string]interface{} `json:"Measurements,omitempty" xml:"Measurements,omitempty"`
	Metric       *string                `json:"Metric,omitempty" xml:"Metric,omitempty"`
	Namespace    *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Period       *int32                 `json:"Period,omitempty" xml:"Period,omitempty"`
	Timestamp    *int64                 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s MetricStat) String() string {
	return tea.Prettify(s)
}

func (s MetricStat) GoString() string {
	return s.String()
}

func (s *MetricStat) SetAssociated(v map[string]*string) *MetricStat {
	s.Associated = v
	return s
}

func (s *MetricStat) SetDimensions(v []*Dimension) *MetricStat {
	s.Dimensions = v
	return s
}

func (s *MetricStat) SetLogTime(v int64) *MetricStat {
	s.LogTime = &v
	return s
}

func (s *MetricStat) SetMeasurements(v map[string]interface{}) *MetricStat {
	s.Measurements = v
	return s
}

func (s *MetricStat) SetMetric(v string) *MetricStat {
	s.Metric = &v
	return s
}

func (s *MetricStat) SetNamespace(v string) *MetricStat {
	s.Namespace = &v
	return s
}

func (s *MetricStat) SetPeriod(v int32) *MetricStat {
	s.Period = &v
	return s
}

func (s *MetricStat) SetTimestamp(v int64) *MetricStat {
	s.Timestamp = &v
	return s
}

type MigrationJob struct {
	CreateTime *string               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Detail     *string               `json:"Detail,omitempty" xml:"Detail,omitempty"`
	JobStatus  *string               `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	Plan       *MigrationJobPlan     `json:"Plan,omitempty" xml:"Plan,omitempty" type:"Struct"`
	RuleNames  []*string             `json:"RuleNames,omitempty" xml:"RuleNames,omitempty" type:"Repeated"`
	Source     []*MigrationJobSource `json:"Source,omitempty" xml:"Source,omitempty" type:"Repeated"`
	UpdateTime *string               `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Uuid       *string               `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s MigrationJob) String() string {
	return tea.Prettify(s)
}

func (s MigrationJob) GoString() string {
	return s.String()
}

func (s *MigrationJob) SetCreateTime(v string) *MigrationJob {
	s.CreateTime = &v
	return s
}

func (s *MigrationJob) SetDetail(v string) *MigrationJob {
	s.Detail = &v
	return s
}

func (s *MigrationJob) SetJobStatus(v string) *MigrationJob {
	s.JobStatus = &v
	return s
}

func (s *MigrationJob) SetPlan(v *MigrationJobPlan) *MigrationJob {
	s.Plan = v
	return s
}

func (s *MigrationJob) SetRuleNames(v []*string) *MigrationJob {
	s.RuleNames = v
	return s
}

func (s *MigrationJob) SetSource(v []*MigrationJobSource) *MigrationJob {
	s.Source = v
	return s
}

func (s *MigrationJob) SetUpdateTime(v string) *MigrationJob {
	s.UpdateTime = &v
	return s
}

func (s *MigrationJob) SetUuid(v string) *MigrationJob {
	s.Uuid = &v
	return s
}

type MigrationJobPlan struct {
	Contacts      []*MigrationJobPlanContacts      `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Repeated"`
	Escalations   []*MigrationJobPlanEscalations   `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Repeated"`
	Groups        []*MigrationJobPlanGroups        `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Repeated"`
	RuleNames     []*string                        `json:"RuleNames,omitempty" xml:"RuleNames,omitempty" type:"Repeated"`
	Strategies    []*MigrationJobPlanStrategies    `json:"Strategies,omitempty" xml:"Strategies,omitempty" type:"Repeated"`
	Subscriptions []*MigrationJobPlanSubscriptions `json:"Subscriptions,omitempty" xml:"Subscriptions,omitempty" type:"Repeated"`
	Targets       []*MigrationJobPlanTargets       `json:"Targets,omitempty" xml:"Targets,omitempty" type:"Repeated"`
}

func (s MigrationJobPlan) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlan) GoString() string {
	return s.String()
}

func (s *MigrationJobPlan) SetContacts(v []*MigrationJobPlanContacts) *MigrationJobPlan {
	s.Contacts = v
	return s
}

func (s *MigrationJobPlan) SetEscalations(v []*MigrationJobPlanEscalations) *MigrationJobPlan {
	s.Escalations = v
	return s
}

func (s *MigrationJobPlan) SetGroups(v []*MigrationJobPlanGroups) *MigrationJobPlan {
	s.Groups = v
	return s
}

func (s *MigrationJobPlan) SetRuleNames(v []*string) *MigrationJobPlan {
	s.RuleNames = v
	return s
}

func (s *MigrationJobPlan) SetStrategies(v []*MigrationJobPlanStrategies) *MigrationJobPlan {
	s.Strategies = v
	return s
}

func (s *MigrationJobPlan) SetSubscriptions(v []*MigrationJobPlanSubscriptions) *MigrationJobPlan {
	s.Subscriptions = v
	return s
}

func (s *MigrationJobPlan) SetTargets(v []*MigrationJobPlanTargets) *MigrationJobPlan {
	s.Targets = v
	return s
}

type MigrationJobPlanContacts struct {
	Channels []*MigrationJobPlanContactsChannels `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Repeated"`
	Name     *string                             `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s MigrationJobPlanContacts) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanContacts) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanContacts) SetChannels(v []*MigrationJobPlanContactsChannels) *MigrationJobPlanContacts {
	s.Channels = v
	return s
}

func (s *MigrationJobPlanContacts) SetName(v string) *MigrationJobPlanContacts {
	s.Name = &v
	return s
}

type MigrationJobPlanContactsChannels struct {
	Level *int64  `json:"Level,omitempty" xml:"Level,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s MigrationJobPlanContactsChannels) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanContactsChannels) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanContactsChannels) SetLevel(v int64) *MigrationJobPlanContactsChannels {
	s.Level = &v
	return s
}

func (s *MigrationJobPlanContactsChannels) SetType(v string) *MigrationJobPlanContactsChannels {
	s.Type = &v
	return s
}

func (s *MigrationJobPlanContactsChannels) SetValue(v string) *MigrationJobPlanContactsChannels {
	s.Value = &v
	return s
}

type MigrationJobPlanEscalations struct {
	Escalations []*MigrationJobPlanEscalationsEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Repeated"`
	Name        *string                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	Uuid        *string                                   `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s MigrationJobPlanEscalations) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanEscalations) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanEscalations) SetEscalations(v []*MigrationJobPlanEscalationsEscalations) *MigrationJobPlanEscalations {
	s.Escalations = v
	return s
}

func (s *MigrationJobPlanEscalations) SetName(v string) *MigrationJobPlanEscalations {
	s.Name = &v
	return s
}

func (s *MigrationJobPlanEscalations) SetUuid(v string) *MigrationJobPlanEscalations {
	s.Uuid = &v
	return s
}

type MigrationJobPlanEscalationsEscalations struct {
	Groups      []*string                                          `json:"Groups,omitempty" xml:"Groups,omitempty" type:"Repeated"`
	LevelGroups *MigrationJobPlanEscalationsEscalationsLevelGroups `json:"LevelGroups,omitempty" xml:"LevelGroups,omitempty" type:"Struct"`
}

func (s MigrationJobPlanEscalationsEscalations) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanEscalationsEscalations) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanEscalationsEscalations) SetGroups(v []*string) *MigrationJobPlanEscalationsEscalations {
	s.Groups = v
	return s
}

func (s *MigrationJobPlanEscalationsEscalations) SetLevelGroups(v *MigrationJobPlanEscalationsEscalationsLevelGroups) *MigrationJobPlanEscalationsEscalations {
	s.LevelGroups = v
	return s
}

type MigrationJobPlanEscalationsEscalationsLevelGroups struct {
	Critical []*string `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Repeated"`
	Info     []*string `json:"Info,omitempty" xml:"Info,omitempty" type:"Repeated"`
	Resolved []*string `json:"Resolved,omitempty" xml:"Resolved,omitempty" type:"Repeated"`
	Warning  []*string `json:"Warning,omitempty" xml:"Warning,omitempty" type:"Repeated"`
}

func (s MigrationJobPlanEscalationsEscalationsLevelGroups) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanEscalationsEscalationsLevelGroups) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanEscalationsEscalationsLevelGroups) SetCritical(v []*string) *MigrationJobPlanEscalationsEscalationsLevelGroups {
	s.Critical = v
	return s
}

func (s *MigrationJobPlanEscalationsEscalationsLevelGroups) SetInfo(v []*string) *MigrationJobPlanEscalationsEscalationsLevelGroups {
	s.Info = v
	return s
}

func (s *MigrationJobPlanEscalationsEscalationsLevelGroups) SetResolved(v []*string) *MigrationJobPlanEscalationsEscalationsLevelGroups {
	s.Resolved = v
	return s
}

func (s *MigrationJobPlanEscalationsEscalationsLevelGroups) SetWarning(v []*string) *MigrationJobPlanEscalationsEscalationsLevelGroups {
	s.Warning = v
	return s
}

type MigrationJobPlanGroups struct {
	Contacts []*string `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Repeated"`
	Name     *string   `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s MigrationJobPlanGroups) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanGroups) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanGroups) SetContacts(v []*string) *MigrationJobPlanGroups {
	s.Contacts = v
	return s
}

func (s *MigrationJobPlanGroups) SetName(v string) *MigrationJobPlanGroups {
	s.Name = &v
	return s
}

type MigrationJobPlanStrategies struct {
	EscalationSetting *MigrationJobPlanStrategiesEscalationSetting `json:"EscalationSetting,omitempty" xml:"EscalationSetting,omitempty" type:"Struct"`
	Name              *string                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	PushingSetting    *MigrationJobPlanStrategiesPushingSetting    `json:"PushingSetting,omitempty" xml:"PushingSetting,omitempty" type:"Struct"`
}

func (s MigrationJobPlanStrategies) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanStrategies) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanStrategies) SetEscalationSetting(v *MigrationJobPlanStrategiesEscalationSetting) *MigrationJobPlanStrategies {
	s.EscalationSetting = v
	return s
}

func (s *MigrationJobPlanStrategies) SetName(v string) *MigrationJobPlanStrategies {
	s.Name = &v
	return s
}

func (s *MigrationJobPlanStrategies) SetPushingSetting(v *MigrationJobPlanStrategiesPushingSetting) *MigrationJobPlanStrategies {
	s.PushingSetting = v
	return s
}

type MigrationJobPlanStrategiesEscalationSetting struct {
	EscalationUuid *string `json:"escalationUuid,omitempty" xml:"escalationUuid,omitempty"`
}

func (s MigrationJobPlanStrategiesEscalationSetting) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanStrategiesEscalationSetting) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanStrategiesEscalationSetting) SetEscalationUuid(v string) *MigrationJobPlanStrategiesEscalationSetting {
	s.EscalationUuid = &v
	return s
}

type MigrationJobPlanStrategiesPushingSetting struct {
	TargetUuids []*string `json:"TargetUuids,omitempty" xml:"TargetUuids,omitempty" type:"Repeated"`
}

func (s MigrationJobPlanStrategiesPushingSetting) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanStrategiesPushingSetting) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanStrategiesPushingSetting) SetTargetUuids(v []*string) *MigrationJobPlanStrategiesPushingSetting {
	s.TargetUuids = v
	return s
}

type MigrationJobPlanSubscriptions struct {
	Conditions   []*MigrationJobPlanSubscriptionsConditions `json:"Conditions,omitempty" xml:"Conditions,omitempty" type:"Repeated"`
	Name         *string                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	StrategyUuid *string                                    `json:"StrategyUuid,omitempty" xml:"StrategyUuid,omitempty"`
}

func (s MigrationJobPlanSubscriptions) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanSubscriptions) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanSubscriptions) SetConditions(v []*MigrationJobPlanSubscriptionsConditions) *MigrationJobPlanSubscriptions {
	s.Conditions = v
	return s
}

func (s *MigrationJobPlanSubscriptions) SetName(v string) *MigrationJobPlanSubscriptions {
	s.Name = &v
	return s
}

func (s *MigrationJobPlanSubscriptions) SetStrategyUuid(v string) *MigrationJobPlanSubscriptions {
	s.StrategyUuid = &v
	return s
}

type MigrationJobPlanSubscriptionsConditions struct {
	Field *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Op    *string `json:"Op,omitempty" xml:"Op,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s MigrationJobPlanSubscriptionsConditions) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanSubscriptionsConditions) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanSubscriptionsConditions) SetField(v string) *MigrationJobPlanSubscriptionsConditions {
	s.Field = &v
	return s
}

func (s *MigrationJobPlanSubscriptionsConditions) SetOp(v string) *MigrationJobPlanSubscriptionsConditions {
	s.Op = &v
	return s
}

func (s *MigrationJobPlanSubscriptionsConditions) SetValue(v string) *MigrationJobPlanSubscriptionsConditions {
	s.Value = &v
	return s
}

type MigrationJobPlanTargets struct {
	Arn               *string                                   `json:"Arn,omitempty" xml:"Arn,omitempty"`
	HttpRequestTarget *MigrationJobPlanTargetsHttpRequestTarget `json:"HttpRequestTarget,omitempty" xml:"HttpRequestTarget,omitempty" type:"Struct"`
	Name              *string                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	Type              *string                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	Uuid              *string                                   `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s MigrationJobPlanTargets) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanTargets) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanTargets) SetArn(v string) *MigrationJobPlanTargets {
	s.Arn = &v
	return s
}

func (s *MigrationJobPlanTargets) SetHttpRequestTarget(v *MigrationJobPlanTargetsHttpRequestTarget) *MigrationJobPlanTargets {
	s.HttpRequestTarget = v
	return s
}

func (s *MigrationJobPlanTargets) SetName(v string) *MigrationJobPlanTargets {
	s.Name = &v
	return s
}

func (s *MigrationJobPlanTargets) SetType(v string) *MigrationJobPlanTargets {
	s.Type = &v
	return s
}

func (s *MigrationJobPlanTargets) SetUuid(v string) *MigrationJobPlanTargets {
	s.Uuid = &v
	return s
}

type MigrationJobPlanTargetsHttpRequestTarget struct {
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	Method      *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Url         *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s MigrationJobPlanTargetsHttpRequestTarget) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobPlanTargetsHttpRequestTarget) GoString() string {
	return s.String()
}

func (s *MigrationJobPlanTargetsHttpRequestTarget) SetContentType(v string) *MigrationJobPlanTargetsHttpRequestTarget {
	s.ContentType = &v
	return s
}

func (s *MigrationJobPlanTargetsHttpRequestTarget) SetMethod(v string) *MigrationJobPlanTargetsHttpRequestTarget {
	s.Method = &v
	return s
}

func (s *MigrationJobPlanTargetsHttpRequestTarget) SetUrl(v string) *MigrationJobPlanTargetsHttpRequestTarget {
	s.Url = &v
	return s
}

type MigrationJobSource struct {
	Rule    *MigrationJobSourceRule      `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Struct"`
	Targets []*MigrationJobSourceTargets `json:"Targets,omitempty" xml:"Targets,omitempty" type:"Repeated"`
}

func (s MigrationJobSource) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobSource) GoString() string {
	return s.String()
}

func (s *MigrationJobSource) SetRule(v *MigrationJobSourceRule) *MigrationJobSource {
	s.Rule = v
	return s
}

func (s *MigrationJobSource) SetTargets(v []*MigrationJobSourceTargets) *MigrationJobSource {
	s.Targets = v
	return s
}

type MigrationJobSourceRule struct {
	KeywordFilter  *MigrationJobSourceRuleKeywordFilter    `json:"KeywordFilter,omitempty" xml:"KeywordFilter,omitempty" type:"Struct"`
	Name           *string                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	PrimaryFilters []*MigrationJobSourceRulePrimaryFilters `json:"PrimaryFilters,omitempty" xml:"PrimaryFilters,omitempty" type:"Repeated"`
}

func (s MigrationJobSourceRule) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobSourceRule) GoString() string {
	return s.String()
}

func (s *MigrationJobSourceRule) SetKeywordFilter(v *MigrationJobSourceRuleKeywordFilter) *MigrationJobSourceRule {
	s.KeywordFilter = v
	return s
}

func (s *MigrationJobSourceRule) SetName(v string) *MigrationJobSourceRule {
	s.Name = &v
	return s
}

func (s *MigrationJobSourceRule) SetPrimaryFilters(v []*MigrationJobSourceRulePrimaryFilters) *MigrationJobSourceRule {
	s.PrimaryFilters = v
	return s
}

type MigrationJobSourceRuleKeywordFilter struct {
	Keywords []*string `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
	Relation *string   `json:"Relation,omitempty" xml:"Relation,omitempty"`
}

func (s MigrationJobSourceRuleKeywordFilter) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobSourceRuleKeywordFilter) GoString() string {
	return s.String()
}

func (s *MigrationJobSourceRuleKeywordFilter) SetKeywords(v []*string) *MigrationJobSourceRuleKeywordFilter {
	s.Keywords = v
	return s
}

func (s *MigrationJobSourceRuleKeywordFilter) SetRelation(v string) *MigrationJobSourceRuleKeywordFilter {
	s.Relation = &v
	return s
}

type MigrationJobSourceRulePrimaryFilters struct {
	Field  *string `json:"Field,omitempty" xml:"Field,omitempty"`
	OpType *string `json:"OpType,omitempty" xml:"OpType,omitempty"`
	Value  *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s MigrationJobSourceRulePrimaryFilters) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobSourceRulePrimaryFilters) GoString() string {
	return s.String()
}

func (s *MigrationJobSourceRulePrimaryFilters) SetField(v string) *MigrationJobSourceRulePrimaryFilters {
	s.Field = &v
	return s
}

func (s *MigrationJobSourceRulePrimaryFilters) SetOpType(v string) *MigrationJobSourceRulePrimaryFilters {
	s.OpType = &v
	return s
}

func (s *MigrationJobSourceRulePrimaryFilters) SetValue(v string) *MigrationJobSourceRulePrimaryFilters {
	s.Value = &v
	return s
}

type MigrationJobSourceTargets struct {
	Content *MigrationJobSourceTargetsContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	Type    *string                           `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s MigrationJobSourceTargets) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobSourceTargets) GoString() string {
	return s.String()
}

func (s *MigrationJobSourceTargets) SetContent(v *MigrationJobSourceTargetsContent) *MigrationJobSourceTargets {
	s.Content = v
	return s
}

func (s *MigrationJobSourceTargets) SetType(v string) *MigrationJobSourceTargets {
	s.Type = &v
	return s
}

type MigrationJobSourceTargetsContent struct {
	Group        *string `json:"Group,omitempty" xml:"Group,omitempty"`
	Level        *string `json:"Level,omitempty" xml:"Level,omitempty"`
	Method       *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Region       *string `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourcePath *string `json:"ResourcePath,omitempty" xml:"ResourcePath,omitempty"`
	Url          *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s MigrationJobSourceTargetsContent) String() string {
	return tea.Prettify(s)
}

func (s MigrationJobSourceTargetsContent) GoString() string {
	return s.String()
}

func (s *MigrationJobSourceTargetsContent) SetGroup(v string) *MigrationJobSourceTargetsContent {
	s.Group = &v
	return s
}

func (s *MigrationJobSourceTargetsContent) SetLevel(v string) *MigrationJobSourceTargetsContent {
	s.Level = &v
	return s
}

func (s *MigrationJobSourceTargetsContent) SetMethod(v string) *MigrationJobSourceTargetsContent {
	s.Method = &v
	return s
}

func (s *MigrationJobSourceTargetsContent) SetRegion(v string) *MigrationJobSourceTargetsContent {
	s.Region = &v
	return s
}

func (s *MigrationJobSourceTargetsContent) SetResourcePath(v string) *MigrationJobSourceTargetsContent {
	s.ResourcePath = &v
	return s
}

func (s *MigrationJobSourceTargetsContent) SetUrl(v string) *MigrationJobSourceTargetsContent {
	s.Url = &v
	return s
}

type NotificationStrategy struct {
	CreateTime        *string                                `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description       *string                                `json:"Description,omitempty" xml:"Description,omitempty"`
	EscalationSetting *NotificationStrategyEscalationSetting `json:"EscalationSetting,omitempty" xml:"EscalationSetting,omitempty" type:"Struct"`
	FilterSetting     *NotificationStrategyFilterSetting     `json:"FilterSetting,omitempty" xml:"FilterSetting,omitempty" type:"Struct"`
	GroupingSetting   *NotificationStrategyGroupingSetting   `json:"GroupingSetting,omitempty" xml:"GroupingSetting,omitempty" type:"Struct"`
	// This parameter is required.
	Name           *string                             `json:"Name,omitempty" xml:"Name,omitempty"`
	Product        *string                             `json:"Product,omitempty" xml:"Product,omitempty"`
	PushingSetting *NotificationStrategyPushingSetting `json:"PushingSetting,omitempty" xml:"PushingSetting,omitempty" type:"Struct"`
	RouteSetting   *NotificationStrategyRouteSetting   `json:"RouteSetting,omitempty" xml:"RouteSetting,omitempty" type:"Struct"`
	UpdateTime     *string                             `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId         *string                             `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Uuid           *string                             `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s NotificationStrategy) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategy) GoString() string {
	return s.String()
}

func (s *NotificationStrategy) SetCreateTime(v string) *NotificationStrategy {
	s.CreateTime = &v
	return s
}

func (s *NotificationStrategy) SetDescription(v string) *NotificationStrategy {
	s.Description = &v
	return s
}

func (s *NotificationStrategy) SetEscalationSetting(v *NotificationStrategyEscalationSetting) *NotificationStrategy {
	s.EscalationSetting = v
	return s
}

func (s *NotificationStrategy) SetFilterSetting(v *NotificationStrategyFilterSetting) *NotificationStrategy {
	s.FilterSetting = v
	return s
}

func (s *NotificationStrategy) SetGroupingSetting(v *NotificationStrategyGroupingSetting) *NotificationStrategy {
	s.GroupingSetting = v
	return s
}

func (s *NotificationStrategy) SetName(v string) *NotificationStrategy {
	s.Name = &v
	return s
}

func (s *NotificationStrategy) SetProduct(v string) *NotificationStrategy {
	s.Product = &v
	return s
}

func (s *NotificationStrategy) SetPushingSetting(v *NotificationStrategyPushingSetting) *NotificationStrategy {
	s.PushingSetting = v
	return s
}

func (s *NotificationStrategy) SetRouteSetting(v *NotificationStrategyRouteSetting) *NotificationStrategy {
	s.RouteSetting = v
	return s
}

func (s *NotificationStrategy) SetUpdateTime(v string) *NotificationStrategy {
	s.UpdateTime = &v
	return s
}

func (s *NotificationStrategy) SetUserId(v string) *NotificationStrategy {
	s.UserId = &v
	return s
}

func (s *NotificationStrategy) SetUuid(v string) *NotificationStrategy {
	s.Uuid = &v
	return s
}

type NotificationStrategyEscalationSetting struct {
	AutoResolveMin  *int64                                                 `json:"AutoResolveMin,omitempty" xml:"AutoResolveMin,omitempty"`
	CustomChannels  []*NotificationStrategyEscalationSettingCustomChannels `json:"CustomChannels,omitempty" xml:"CustomChannels,omitempty" type:"Repeated"`
	EscalationLevel *string                                                `json:"EscalationLevel,omitempty" xml:"EscalationLevel,omitempty"`
	EscalationUuid  *string                                                `json:"EscalationUuid,omitempty" xml:"EscalationUuid,omitempty"`
	Range           *string                                                `json:"Range,omitempty" xml:"Range,omitempty"`
	RetriggerMin    *int64                                                 `json:"RetriggerMin,omitempty" xml:"RetriggerMin,omitempty"`
}

func (s NotificationStrategyEscalationSetting) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyEscalationSetting) GoString() string {
	return s.String()
}

func (s *NotificationStrategyEscalationSetting) SetAutoResolveMin(v int64) *NotificationStrategyEscalationSetting {
	s.AutoResolveMin = &v
	return s
}

func (s *NotificationStrategyEscalationSetting) SetCustomChannels(v []*NotificationStrategyEscalationSettingCustomChannels) *NotificationStrategyEscalationSetting {
	s.CustomChannels = v
	return s
}

func (s *NotificationStrategyEscalationSetting) SetEscalationLevel(v string) *NotificationStrategyEscalationSetting {
	s.EscalationLevel = &v
	return s
}

func (s *NotificationStrategyEscalationSetting) SetEscalationUuid(v string) *NotificationStrategyEscalationSetting {
	s.EscalationUuid = &v
	return s
}

func (s *NotificationStrategyEscalationSetting) SetRange(v string) *NotificationStrategyEscalationSetting {
	s.Range = &v
	return s
}

func (s *NotificationStrategyEscalationSetting) SetRetriggerMin(v int64) *NotificationStrategyEscalationSetting {
	s.RetriggerMin = &v
	return s
}

type NotificationStrategyEscalationSettingCustomChannels struct {
	// This parameter is required.
	ChannelType  *string   `json:"ChannelType,omitempty" xml:"ChannelType,omitempty"`
	Severities   []*string `json:"Severities,omitempty" xml:"Severities,omitempty" type:"Repeated"`
	TemplateUuid *string   `json:"TemplateUuid,omitempty" xml:"TemplateUuid,omitempty"`
}

func (s NotificationStrategyEscalationSettingCustomChannels) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyEscalationSettingCustomChannels) GoString() string {
	return s.String()
}

func (s *NotificationStrategyEscalationSettingCustomChannels) SetChannelType(v string) *NotificationStrategyEscalationSettingCustomChannels {
	s.ChannelType = &v
	return s
}

func (s *NotificationStrategyEscalationSettingCustomChannels) SetSeverities(v []*string) *NotificationStrategyEscalationSettingCustomChannels {
	s.Severities = v
	return s
}

func (s *NotificationStrategyEscalationSettingCustomChannels) SetTemplateUuid(v string) *NotificationStrategyEscalationSettingCustomChannels {
	s.TemplateUuid = &v
	return s
}

type NotificationStrategyFilterSetting struct {
	BlackList [][]*NotificationStrategyFilterSettingBlackList `json:"BlackList,omitempty" xml:"BlackList,omitempty" type:"Repeated"`
	WhiteList [][]*NotificationStrategyFilterSettingWhiteList `json:"WhiteList,omitempty" xml:"WhiteList,omitempty" type:"Repeated"`
}

func (s NotificationStrategyFilterSetting) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyFilterSetting) GoString() string {
	return s.String()
}

func (s *NotificationStrategyFilterSetting) SetBlackList(v [][]*NotificationStrategyFilterSettingBlackList) *NotificationStrategyFilterSetting {
	s.BlackList = v
	return s
}

func (s *NotificationStrategyFilterSetting) SetWhiteList(v [][]*NotificationStrategyFilterSettingWhiteList) *NotificationStrategyFilterSetting {
	s.WhiteList = v
	return s
}

type NotificationStrategyFilterSettingBlackList struct {
	// This parameter is required.
	Field *string `json:"Field,omitempty" xml:"Field,omitempty"`
	// This parameter is required.
	Op *string `json:"Op,omitempty" xml:"Op,omitempty"`
	// This parameter is required.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s NotificationStrategyFilterSettingBlackList) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyFilterSettingBlackList) GoString() string {
	return s.String()
}

func (s *NotificationStrategyFilterSettingBlackList) SetField(v string) *NotificationStrategyFilterSettingBlackList {
	s.Field = &v
	return s
}

func (s *NotificationStrategyFilterSettingBlackList) SetOp(v string) *NotificationStrategyFilterSettingBlackList {
	s.Op = &v
	return s
}

func (s *NotificationStrategyFilterSettingBlackList) SetValue(v string) *NotificationStrategyFilterSettingBlackList {
	s.Value = &v
	return s
}

type NotificationStrategyFilterSettingWhiteList struct {
	// This parameter is required.
	Field *string `json:"Field,omitempty" xml:"Field,omitempty"`
	// This parameter is required.
	Op *string `json:"Op,omitempty" xml:"Op,omitempty"`
	// This parameter is required.
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s NotificationStrategyFilterSettingWhiteList) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyFilterSettingWhiteList) GoString() string {
	return s.String()
}

func (s *NotificationStrategyFilterSettingWhiteList) SetField(v string) *NotificationStrategyFilterSettingWhiteList {
	s.Field = &v
	return s
}

func (s *NotificationStrategyFilterSettingWhiteList) SetOp(v string) *NotificationStrategyFilterSettingWhiteList {
	s.Op = &v
	return s
}

func (s *NotificationStrategyFilterSettingWhiteList) SetValue(v string) *NotificationStrategyFilterSettingWhiteList {
	s.Value = &v
	return s
}

type NotificationStrategyGroupingSetting struct {
	EnableRawAlertDispatching *bool                                               `json:"EnableRawAlertDispatching,omitempty" xml:"EnableRawAlertDispatching,omitempty"`
	GroupingItems             []*NotificationStrategyGroupingSettingGroupingItems `json:"GroupingItems,omitempty" xml:"GroupingItems,omitempty" type:"Repeated"`
	PeriodMin                 *int32                                              `json:"PeriodMin,omitempty" xml:"PeriodMin,omitempty"`
	SilenceSec                *int32                                              `json:"SilenceSec,omitempty" xml:"SilenceSec,omitempty"`
	Times                     *int32                                              `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s NotificationStrategyGroupingSetting) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyGroupingSetting) GoString() string {
	return s.String()
}

func (s *NotificationStrategyGroupingSetting) SetEnableRawAlertDispatching(v bool) *NotificationStrategyGroupingSetting {
	s.EnableRawAlertDispatching = &v
	return s
}

func (s *NotificationStrategyGroupingSetting) SetGroupingItems(v []*NotificationStrategyGroupingSettingGroupingItems) *NotificationStrategyGroupingSetting {
	s.GroupingItems = v
	return s
}

func (s *NotificationStrategyGroupingSetting) SetPeriodMin(v int32) *NotificationStrategyGroupingSetting {
	s.PeriodMin = &v
	return s
}

func (s *NotificationStrategyGroupingSetting) SetSilenceSec(v int32) *NotificationStrategyGroupingSetting {
	s.SilenceSec = &v
	return s
}

func (s *NotificationStrategyGroupingSetting) SetTimes(v int32) *NotificationStrategyGroupingSetting {
	s.Times = &v
	return s
}

type NotificationStrategyGroupingSettingGroupingItems struct {
	Keys []*string `json:"Keys,omitempty" xml:"Keys,omitempty" type:"Repeated"`
	Type *string   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s NotificationStrategyGroupingSettingGroupingItems) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyGroupingSettingGroupingItems) GoString() string {
	return s.String()
}

func (s *NotificationStrategyGroupingSettingGroupingItems) SetKeys(v []*string) *NotificationStrategyGroupingSettingGroupingItems {
	s.Keys = v
	return s
}

func (s *NotificationStrategyGroupingSettingGroupingItems) SetType(v string) *NotificationStrategyGroupingSettingGroupingItems {
	s.Type = &v
	return s
}

type NotificationStrategyPushingSetting struct {
	PushingDataFormat *string   `json:"PushingDataFormat,omitempty" xml:"PushingDataFormat,omitempty"`
	Range             *string   `json:"Range,omitempty" xml:"Range,omitempty"`
	TargetUuids       []*string `json:"TargetUuids,omitempty" xml:"TargetUuids,omitempty" type:"Repeated"`
	TemplateUuid      *string   `json:"TemplateUuid,omitempty" xml:"TemplateUuid,omitempty"`
}

func (s NotificationStrategyPushingSetting) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyPushingSetting) GoString() string {
	return s.String()
}

func (s *NotificationStrategyPushingSetting) SetPushingDataFormat(v string) *NotificationStrategyPushingSetting {
	s.PushingDataFormat = &v
	return s
}

func (s *NotificationStrategyPushingSetting) SetRange(v string) *NotificationStrategyPushingSetting {
	s.Range = &v
	return s
}

func (s *NotificationStrategyPushingSetting) SetTargetUuids(v []*string) *NotificationStrategyPushingSetting {
	s.TargetUuids = v
	return s
}

func (s *NotificationStrategyPushingSetting) SetTemplateUuid(v string) *NotificationStrategyPushingSetting {
	s.TemplateUuid = &v
	return s
}

type NotificationStrategyRouteSetting struct {
	Routes []*NotificationStrategyRouteSettingRoutes `json:"Routes,omitempty" xml:"Routes,omitempty" type:"Repeated"`
}

func (s NotificationStrategyRouteSetting) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyRouteSetting) GoString() string {
	return s.String()
}

func (s *NotificationStrategyRouteSetting) SetRoutes(v []*NotificationStrategyRouteSettingRoutes) *NotificationStrategyRouteSetting {
	s.Routes = v
	return s
}

type NotificationStrategyRouteSettingRoutes struct {
	Conditions     []*NotificationStrategyRouteSettingRoutesConditions `json:"Conditions,omitempty" xml:"Conditions,omitempty" type:"Repeated"`
	EscalationUuid *string                                             `json:"EscalationUuid,omitempty" xml:"EscalationUuid,omitempty"`
}

func (s NotificationStrategyRouteSettingRoutes) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyRouteSettingRoutes) GoString() string {
	return s.String()
}

func (s *NotificationStrategyRouteSettingRoutes) SetConditions(v []*NotificationStrategyRouteSettingRoutesConditions) *NotificationStrategyRouteSettingRoutes {
	s.Conditions = v
	return s
}

func (s *NotificationStrategyRouteSettingRoutes) SetEscalationUuid(v string) *NotificationStrategyRouteSettingRoutes {
	s.EscalationUuid = &v
	return s
}

type NotificationStrategyRouteSettingRoutesConditions struct {
	Field *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Op    *string `json:"Op,omitempty" xml:"Op,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s NotificationStrategyRouteSettingRoutesConditions) String() string {
	return tea.Prettify(s)
}

func (s NotificationStrategyRouteSettingRoutesConditions) GoString() string {
	return s.String()
}

func (s *NotificationStrategyRouteSettingRoutesConditions) SetField(v string) *NotificationStrategyRouteSettingRoutesConditions {
	s.Field = &v
	return s
}

func (s *NotificationStrategyRouteSettingRoutesConditions) SetOp(v string) *NotificationStrategyRouteSettingRoutesConditions {
	s.Op = &v
	return s
}

func (s *NotificationStrategyRouteSettingRoutesConditions) SetValue(v string) *NotificationStrategyRouteSettingRoutesConditions {
	s.Value = &v
	return s
}

type NotificationTemplate struct {
	CreateTime  *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// Alarm $.alertName
	EnContent *string `json:"EnContent,omitempty" xml:"EnContent,omitempty"`
	// example:
	//
	// Alarm $.alertName
	EnItemContent *string `json:"EnItemContent,omitempty" xml:"EnItemContent,omitempty"`
	// example:
	//
	// Alarm $.alertName
	EnTitle *string `json:"EnTitle,omitempty" xml:"EnTitle,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// DATA,  SMS,  ONCALL,  MAIL,  DING,  WEIXIN,  FEISHU,  SLACK
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId     *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Uuid       *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// example:
	//
	// TEXT, MARKDOWN,CARD
	WraperType *string `json:"WraperType,omitempty" xml:"WraperType,omitempty"`
	// example:
	//
	// 报警 $.alertName
	ZhContent *string `json:"ZhContent,omitempty" xml:"ZhContent,omitempty"`
	// example:
	//
	// 报警 $.alertName
	ZhItemContent *string `json:"ZhItemContent,omitempty" xml:"ZhItemContent,omitempty"`
	// example:
	//
	// 报警通知 $.alertName
	ZhTitle *string `json:"ZhTitle,omitempty" xml:"ZhTitle,omitempty"`
}

func (s NotificationTemplate) String() string {
	return tea.Prettify(s)
}

func (s NotificationTemplate) GoString() string {
	return s.String()
}

func (s *NotificationTemplate) SetCreateTime(v string) *NotificationTemplate {
	s.CreateTime = &v
	return s
}

func (s *NotificationTemplate) SetDescription(v string) *NotificationTemplate {
	s.Description = &v
	return s
}

func (s *NotificationTemplate) SetEnContent(v string) *NotificationTemplate {
	s.EnContent = &v
	return s
}

func (s *NotificationTemplate) SetEnItemContent(v string) *NotificationTemplate {
	s.EnItemContent = &v
	return s
}

func (s *NotificationTemplate) SetEnTitle(v string) *NotificationTemplate {
	s.EnTitle = &v
	return s
}

func (s *NotificationTemplate) SetName(v string) *NotificationTemplate {
	s.Name = &v
	return s
}

func (s *NotificationTemplate) SetType(v string) *NotificationTemplate {
	s.Type = &v
	return s
}

func (s *NotificationTemplate) SetUpdateTime(v string) *NotificationTemplate {
	s.UpdateTime = &v
	return s
}

func (s *NotificationTemplate) SetUserId(v string) *NotificationTemplate {
	s.UserId = &v
	return s
}

func (s *NotificationTemplate) SetUuid(v string) *NotificationTemplate {
	s.Uuid = &v
	return s
}

func (s *NotificationTemplate) SetWraperType(v string) *NotificationTemplate {
	s.WraperType = &v
	return s
}

func (s *NotificationTemplate) SetZhContent(v string) *NotificationTemplate {
	s.ZhContent = &v
	return s
}

func (s *NotificationTemplate) SetZhItemContent(v string) *NotificationTemplate {
	s.ZhItemContent = &v
	return s
}

func (s *NotificationTemplate) SetZhTitle(v string) *NotificationTemplate {
	s.ZhTitle = &v
	return s
}

type PushingTarget struct {
	Arn               *string                         `json:"Arn,omitempty" xml:"Arn,omitempty"`
	CreateTime        *string                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description       *string                         `json:"Description,omitempty" xml:"Description,omitempty"`
	HttpRequestTarget *PushingTargetHttpRequestTarget `json:"HttpRequestTarget,omitempty" xml:"HttpRequestTarget,omitempty" type:"Struct"`
	// This parameter is required.
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Range        *string `json:"Range,omitempty" xml:"Range,omitempty"`
	TemplateUuid *string `json:"TemplateUuid,omitempty" xml:"TemplateUuid,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UpdateTime   *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId       *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Uuid         *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s PushingTarget) String() string {
	return tea.Prettify(s)
}

func (s PushingTarget) GoString() string {
	return s.String()
}

func (s *PushingTarget) SetArn(v string) *PushingTarget {
	s.Arn = &v
	return s
}

func (s *PushingTarget) SetCreateTime(v string) *PushingTarget {
	s.CreateTime = &v
	return s
}

func (s *PushingTarget) SetDescription(v string) *PushingTarget {
	s.Description = &v
	return s
}

func (s *PushingTarget) SetHttpRequestTarget(v *PushingTargetHttpRequestTarget) *PushingTarget {
	s.HttpRequestTarget = v
	return s
}

func (s *PushingTarget) SetName(v string) *PushingTarget {
	s.Name = &v
	return s
}

func (s *PushingTarget) SetRange(v string) *PushingTarget {
	s.Range = &v
	return s
}

func (s *PushingTarget) SetTemplateUuid(v string) *PushingTarget {
	s.TemplateUuid = &v
	return s
}

func (s *PushingTarget) SetType(v string) *PushingTarget {
	s.Type = &v
	return s
}

func (s *PushingTarget) SetUpdateTime(v string) *PushingTarget {
	s.UpdateTime = &v
	return s
}

func (s *PushingTarget) SetUserId(v string) *PushingTarget {
	s.UserId = &v
	return s
}

func (s *PushingTarget) SetUuid(v string) *PushingTarget {
	s.Uuid = &v
	return s
}

type PushingTargetHttpRequestTarget struct {
	ContentType   *string                                  `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	EncryptString *string                                  `json:"EncryptString,omitempty" xml:"EncryptString,omitempty"`
	Headers       []*PushingTargetHttpRequestTargetHeaders `json:"Headers,omitempty" xml:"Headers,omitempty" type:"Repeated"`
	Method        *string                                  `json:"Method,omitempty" xml:"Method,omitempty"`
	Url           *string                                  `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s PushingTargetHttpRequestTarget) String() string {
	return tea.Prettify(s)
}

func (s PushingTargetHttpRequestTarget) GoString() string {
	return s.String()
}

func (s *PushingTargetHttpRequestTarget) SetContentType(v string) *PushingTargetHttpRequestTarget {
	s.ContentType = &v
	return s
}

func (s *PushingTargetHttpRequestTarget) SetEncryptString(v string) *PushingTargetHttpRequestTarget {
	s.EncryptString = &v
	return s
}

func (s *PushingTargetHttpRequestTarget) SetHeaders(v []*PushingTargetHttpRequestTargetHeaders) *PushingTargetHttpRequestTarget {
	s.Headers = v
	return s
}

func (s *PushingTargetHttpRequestTarget) SetMethod(v string) *PushingTargetHttpRequestTarget {
	s.Method = &v
	return s
}

func (s *PushingTargetHttpRequestTarget) SetUrl(v string) *PushingTargetHttpRequestTarget {
	s.Url = &v
	return s
}

type PushingTargetHttpRequestTargetHeaders struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PushingTargetHttpRequestTargetHeaders) String() string {
	return tea.Prettify(s)
}

func (s PushingTargetHttpRequestTargetHeaders) GoString() string {
	return s.String()
}

func (s *PushingTargetHttpRequestTargetHeaders) SetKey(v string) *PushingTargetHttpRequestTargetHeaders {
	s.Key = &v
	return s
}

func (s *PushingTargetHttpRequestTargetHeaders) SetValue(v string) *PushingTargetHttpRequestTargetHeaders {
	s.Value = &v
	return s
}

type Subscription struct {
	Conditions  []*SubscriptionConditions `json:"Conditions,omitempty" xml:"Conditions,omitempty" type:"Repeated"`
	CreateTime  *string                   `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string                   `json:"Description,omitempty" xml:"Description,omitempty"`
	Enabled     *bool                     `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// This parameter is required.
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Product      *string `json:"Product,omitempty" xml:"Product,omitempty"`
	Relation     *string `json:"Relation,omitempty" xml:"Relation,omitempty"`
	StrategyUuid *string `json:"StrategyUuid,omitempty" xml:"StrategyUuid,omitempty"`
	UpdateTime   *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Uuid         *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s Subscription) String() string {
	return tea.Prettify(s)
}

func (s Subscription) GoString() string {
	return s.String()
}

func (s *Subscription) SetConditions(v []*SubscriptionConditions) *Subscription {
	s.Conditions = v
	return s
}

func (s *Subscription) SetCreateTime(v string) *Subscription {
	s.CreateTime = &v
	return s
}

func (s *Subscription) SetDescription(v string) *Subscription {
	s.Description = &v
	return s
}

func (s *Subscription) SetEnabled(v bool) *Subscription {
	s.Enabled = &v
	return s
}

func (s *Subscription) SetName(v string) *Subscription {
	s.Name = &v
	return s
}

func (s *Subscription) SetProduct(v string) *Subscription {
	s.Product = &v
	return s
}

func (s *Subscription) SetRelation(v string) *Subscription {
	s.Relation = &v
	return s
}

func (s *Subscription) SetStrategyUuid(v string) *Subscription {
	s.StrategyUuid = &v
	return s
}

func (s *Subscription) SetUpdateTime(v string) *Subscription {
	s.UpdateTime = &v
	return s
}

func (s *Subscription) SetUuid(v string) *Subscription {
	s.Uuid = &v
	return s
}

type SubscriptionConditions struct {
	Field    *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	Value    *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s SubscriptionConditions) String() string {
	return tea.Prettify(s)
}

func (s SubscriptionConditions) GoString() string {
	return s.String()
}

func (s *SubscriptionConditions) SetField(v string) *SubscriptionConditions {
	s.Field = &v
	return s
}

func (s *SubscriptionConditions) SetOperator(v string) *SubscriptionConditions {
	s.Operator = &v
	return s
}

func (s *SubscriptionConditions) SetValue(v string) *SubscriptionConditions {
	s.Value = &v
	return s
}

type AddTagsRequest struct {
	// The ID of the application group.
	//
	// Valid values of N: 1 to 20.
	//
	// For more information about how to obtain the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 7301****
	GroupIds []*string `json:"GroupIds,omitempty" xml:"GroupIds,omitempty" type:"Repeated"`
	RegionId *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tags.
	//
	// This parameter is required.
	Tag []*AddTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s AddTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTagsRequest) GoString() string {
	return s.String()
}

func (s *AddTagsRequest) SetGroupIds(v []*string) *AddTagsRequest {
	s.GroupIds = v
	return s
}

func (s *AddTagsRequest) SetRegionId(v string) *AddTagsRequest {
	s.RegionId = &v
	return s
}

func (s *AddTagsRequest) SetTag(v []*AddTagsRequestTag) *AddTagsRequest {
	s.Tag = v
	return s
}

type AddTagsRequestTag struct {
	// The tag key.
	//
	// Valid values of N: 1 to 3. A tag key can be 1 to 64 characters in length.
	//
	// You can create a tag key or specify an existing tag key. For more information about how to obtain a tag key, see [DescribeTagKeyList](https://help.aliyun.com/document_detail/145558.html).
	//
	// >  The tag key cannot start with `aliyun` or `acs:`. The tag key (`Tag.N.Key`) and tag value (`Tag.N.Value`) must be specified at the same time.
	//
	// This parameter is required.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// Valid values of N: 1 to 3. A tag value can be 1 to 64 characters in length.
	//
	// You can create a tag value or specify an existing tag value. For more information about how to obtain a tag value, see [DescribeTagValueList](https://help.aliyun.com/document_detail/145557.html).
	//
	// >  The tag value cannot start with `aliyun` or `acs:`. The tag key (`Tag.N.Key`) and tag value (`Tag.N.Value`) must be specified at the same time.
	//
	// This parameter is required.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s AddTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s AddTagsRequestTag) GoString() string {
	return s.String()
}

func (s *AddTagsRequestTag) SetKey(v string) *AddTagsRequestTag {
	s.Key = &v
	return s
}

func (s *AddTagsRequestTag) SetValue(v string) *AddTagsRequestTag {
	s.Value = &v
	return s
}

type AddTagsResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// DAE4B115-3847-5438-8709-423627F0A3A3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTagsResponseBody) GoString() string {
	return s.String()
}

func (s *AddTagsResponseBody) SetCode(v string) *AddTagsResponseBody {
	s.Code = &v
	return s
}

func (s *AddTagsResponseBody) SetMessage(v string) *AddTagsResponseBody {
	s.Message = &v
	return s
}

func (s *AddTagsResponseBody) SetRequestId(v string) *AddTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddTagsResponseBody) SetSuccess(v bool) *AddTagsResponseBody {
	s.Success = &v
	return s
}

type AddTagsResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTagsResponse) GoString() string {
	return s.String()
}

func (s *AddTagsResponse) SetHeaders(v map[string]*string) *AddTagsResponse {
	s.Headers = v
	return s
}

func (s *AddTagsResponse) SetStatusCode(v int32) *AddTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTagsResponse) SetBody(v *AddTagsResponseBody) *AddTagsResponse {
	s.Body = v
	return s
}

type ApplyMetricRuleTemplateRequest struct {
	// The template application policy. Valid values:
	//
	// 	- all (default): deletes all the rules that are created by using the alert template from the selected application group, and then creates alert rules based on the template.
	//
	// 	- append: deletes the rules that are created by using the alert template from the selected application group, and then creates alert rules based on the existing template.
	//
	// example:
	//
	// all
	AppendMode *string `json:"AppendMode,omitempty" xml:"AppendMode,omitempty"`
	// The mode in which the alert template is applied. Valid values:
	//
	// 	- GROUP_INSTANCE_FIRST: The metrics in the application group take precedence. If a metric specified in the alert template does not exist in the application group, the system does not generate an alert rule for the metric based on the alert template.
	//
	// 	- ALARM_TEMPLATE_FIRST: The metrics specified in the alert template take precedence. If a metric specified in the alert template does not exist in the application group, the system still generates an alert rule for the metric based on the alert template.
	//
	// example:
	//
	// GROUP_INSTANCE_FIRST
	ApplyMode *string `json:"ApplyMode,omitempty" xml:"ApplyMode,omitempty"`
	// The end of the time period during which the alert rule is effective. Valid values: 00 to 23. A value of 00 indicates 00:59 and a value of 23 indicates 23:59.
	//
	// example:
	//
	// 23
	EnableEndTime *int64 `json:"EnableEndTime,omitempty" xml:"EnableEndTime,omitempty"`
	// The beginning of the time period during which the alert rule is effective. Valid values: 00 to 23. A value of 00 indicates 00:00 and a value of 23 indicates 23:00.
	//
	// example:
	//
	// 00
	EnableStartTime *int64 `json:"EnableStartTime,omitempty" xml:"EnableStartTime,omitempty"`
	// The ID of the application group to which the alert template is applied.
	//
	// For more information about how to query the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The alert notification method. Valid values:
	//
	// Set the value to 4. A value of 4 indicates that alert notifications are sent by using TradeManager and DingTalk chatbots.
	//
	// example:
	//
	// 4
	NotifyLevel *int64 `json:"NotifyLevel,omitempty" xml:"NotifyLevel,omitempty"`
	// The mute period during which notifications are not repeatedly sent for an alert. Unit: seconds. Default value: 86400.
	//
	// >  Only one alert notification is sent during each mute period even if the metric value exceeds the alert threshold several times.
	//
	// example:
	//
	// 86400
	SilenceTime *int64 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The ID of the alert template.
	//
	// For more information about how to query the IDs of alert templates, see [DescribeMetricRuleTemplateList](https://help.aliyun.com/document_detail/114982.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 700****
	TemplateIds *string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty"`
	// The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.
	//
	// example:
	//
	// https://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s ApplyMetricRuleTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyMetricRuleTemplateRequest) GoString() string {
	return s.String()
}

func (s *ApplyMetricRuleTemplateRequest) SetAppendMode(v string) *ApplyMetricRuleTemplateRequest {
	s.AppendMode = &v
	return s
}

func (s *ApplyMetricRuleTemplateRequest) SetApplyMode(v string) *ApplyMetricRuleTemplateRequest {
	s.ApplyMode = &v
	return s
}

func (s *ApplyMetricRuleTemplateRequest) SetEnableEndTime(v int64) *ApplyMetricRuleTemplateRequest {
	s.EnableEndTime = &v
	return s
}

func (s *ApplyMetricRuleTemplateRequest) SetEnableStartTime(v int64) *ApplyMetricRuleTemplateRequest {
	s.EnableStartTime = &v
	return s
}

func (s *ApplyMetricRuleTemplateRequest) SetGroupId(v int64) *ApplyMetricRuleTemplateRequest {
	s.GroupId = &v
	return s
}

func (s *ApplyMetricRuleTemplateRequest) SetNotifyLevel(v int64) *ApplyMetricRuleTemplateRequest {
	s.NotifyLevel = &v
	return s
}

func (s *ApplyMetricRuleTemplateRequest) SetSilenceTime(v int64) *ApplyMetricRuleTemplateRequest {
	s.SilenceTime = &v
	return s
}

func (s *ApplyMetricRuleTemplateRequest) SetTemplateIds(v string) *ApplyMetricRuleTemplateRequest {
	s.TemplateIds = &v
	return s
}

func (s *ApplyMetricRuleTemplateRequest) SetWebhook(v string) *ApplyMetricRuleTemplateRequest {
	s.Webhook = &v
	return s
}

type ApplyMetricRuleTemplateResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3F897F3C-020A-4993-95B4-63ABB84F83E6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The resources that are affected by the alert rule.
	Resource *ApplyMetricRuleTemplateResponseBodyResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ApplyMetricRuleTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyMetricRuleTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyMetricRuleTemplateResponseBody) SetCode(v int32) *ApplyMetricRuleTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *ApplyMetricRuleTemplateResponseBody) SetMessage(v string) *ApplyMetricRuleTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *ApplyMetricRuleTemplateResponseBody) SetRequestId(v string) *ApplyMetricRuleTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyMetricRuleTemplateResponseBody) SetResource(v *ApplyMetricRuleTemplateResponseBodyResource) *ApplyMetricRuleTemplateResponseBody {
	s.Resource = v
	return s
}

func (s *ApplyMetricRuleTemplateResponseBody) SetSuccess(v bool) *ApplyMetricRuleTemplateResponseBody {
	s.Success = &v
	return s
}

type ApplyMetricRuleTemplateResponseBodyResource struct {
	// The details of the generated alert rule.
	AlertResults []*ApplyMetricRuleTemplateResponseBodyResourceAlertResults `json:"AlertResults,omitempty" xml:"AlertResults,omitempty" type:"Repeated"`
	// The ID of the application group.
	//
	// example:
	//
	// 123456
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s ApplyMetricRuleTemplateResponseBodyResource) String() string {
	return tea.Prettify(s)
}

func (s ApplyMetricRuleTemplateResponseBodyResource) GoString() string {
	return s.String()
}

func (s *ApplyMetricRuleTemplateResponseBodyResource) SetAlertResults(v []*ApplyMetricRuleTemplateResponseBodyResourceAlertResults) *ApplyMetricRuleTemplateResponseBodyResource {
	s.AlertResults = v
	return s
}

func (s *ApplyMetricRuleTemplateResponseBodyResource) SetGroupId(v int64) *ApplyMetricRuleTemplateResponseBodyResource {
	s.GroupId = &v
	return s
}

type ApplyMetricRuleTemplateResponseBodyResourceAlertResults struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// alert rule is creating, please wait a few minutes.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// applyTemplate8ab74c6b-9f27-47ab-8841-de01dc08****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// test123
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ApplyMetricRuleTemplateResponseBodyResourceAlertResults) String() string {
	return tea.Prettify(s)
}

func (s ApplyMetricRuleTemplateResponseBodyResourceAlertResults) GoString() string {
	return s.String()
}

func (s *ApplyMetricRuleTemplateResponseBodyResourceAlertResults) SetCode(v string) *ApplyMetricRuleTemplateResponseBodyResourceAlertResults {
	s.Code = &v
	return s
}

func (s *ApplyMetricRuleTemplateResponseBodyResourceAlertResults) SetMessage(v string) *ApplyMetricRuleTemplateResponseBodyResourceAlertResults {
	s.Message = &v
	return s
}

func (s *ApplyMetricRuleTemplateResponseBodyResourceAlertResults) SetRuleId(v string) *ApplyMetricRuleTemplateResponseBodyResourceAlertResults {
	s.RuleId = &v
	return s
}

func (s *ApplyMetricRuleTemplateResponseBodyResourceAlertResults) SetRuleName(v string) *ApplyMetricRuleTemplateResponseBodyResourceAlertResults {
	s.RuleName = &v
	return s
}

func (s *ApplyMetricRuleTemplateResponseBodyResourceAlertResults) SetSuccess(v bool) *ApplyMetricRuleTemplateResponseBodyResourceAlertResults {
	s.Success = &v
	return s
}

type ApplyMetricRuleTemplateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyMetricRuleTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyMetricRuleTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyMetricRuleTemplateResponse) GoString() string {
	return s.String()
}

func (s *ApplyMetricRuleTemplateResponse) SetHeaders(v map[string]*string) *ApplyMetricRuleTemplateResponse {
	s.Headers = v
	return s
}

func (s *ApplyMetricRuleTemplateResponse) SetStatusCode(v int32) *ApplyMetricRuleTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyMetricRuleTemplateResponse) SetBody(v *ApplyMetricRuleTemplateResponseBody) *ApplyMetricRuleTemplateResponse {
	s.Body = v
	return s
}

type BatchCreateInstantSiteMonitorRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The site monitoring tasks.
	//
	// >  You must create at least one site monitoring task. You must specify all of the `Address`, `TaskName`, and `TaskType` parameters in each request.
	//
	// This parameter is required.
	TaskList []*BatchCreateInstantSiteMonitorRequestTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Repeated"`
}

func (s BatchCreateInstantSiteMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateInstantSiteMonitorRequest) GoString() string {
	return s.String()
}

func (s *BatchCreateInstantSiteMonitorRequest) SetRegionId(v string) *BatchCreateInstantSiteMonitorRequest {
	s.RegionId = &v
	return s
}

func (s *BatchCreateInstantSiteMonitorRequest) SetTaskList(v []*BatchCreateInstantSiteMonitorRequestTaskList) *BatchCreateInstantSiteMonitorRequest {
	s.TaskList = v
	return s
}

type BatchCreateInstantSiteMonitorRequestTaskList struct {
	// The URL or IP address that is monitored by the task.
	//
	// >  You must create at least one site monitoring task. You must specify all of the `Address`, `TaskName`, and `TaskType` parameters in each request.
	//
	// example:
	//
	// https://www.aliyun.com
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// The detection points. If you leave this parameter empty, the system randomly selects three detection points.
	//
	// The value is a `JSON array`. Example: `{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}`. The values of the city field indicate Beijing, Hangzhou, and Qingdao.
	//
	// For information about how to obtain detection points, see [DescribeSiteMonitorISPCityList](https://help.aliyun.com/document_detail/115045.html).
	//
	// example:
	//
	// [{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]
	IspCities *string `json:"IspCities,omitempty" xml:"IspCities,omitempty"`
	// The extended options of the protocol that is used by the site monitoring task. The options vary based on the protocol.
	//
	// example:
	//
	// {"time_out":5000}
	OptionsJson *string `json:"OptionsJson,omitempty" xml:"OptionsJson,omitempty"`
	// The name of the site monitoring task.
	//
	// The name must be 4 to 100 characters in length, and can contain letters, digits, and underscores (_).
	//
	// >  You must create at least one site monitoring task. You must specify all of the `Address`, `TaskName`, and `TaskType` parameters in each request.
	//
	// example:
	//
	// HangZhou_ECS1
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the site monitoring task.
	//
	// Valid values: HTTP, PING, TCP, UDP, DNS, SMTP, POP3, and FTP.
	//
	// >  You must create at least one site monitoring task. You must specify all of the `Address`, `TaskName`, and `TaskType` parameters in each request.
	//
	// example:
	//
	// HTTP
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s BatchCreateInstantSiteMonitorRequestTaskList) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateInstantSiteMonitorRequestTaskList) GoString() string {
	return s.String()
}

func (s *BatchCreateInstantSiteMonitorRequestTaskList) SetAddress(v string) *BatchCreateInstantSiteMonitorRequestTaskList {
	s.Address = &v
	return s
}

func (s *BatchCreateInstantSiteMonitorRequestTaskList) SetIspCities(v string) *BatchCreateInstantSiteMonitorRequestTaskList {
	s.IspCities = &v
	return s
}

func (s *BatchCreateInstantSiteMonitorRequestTaskList) SetOptionsJson(v string) *BatchCreateInstantSiteMonitorRequestTaskList {
	s.OptionsJson = &v
	return s
}

func (s *BatchCreateInstantSiteMonitorRequestTaskList) SetTaskName(v string) *BatchCreateInstantSiteMonitorRequestTaskList {
	s.TaskName = &v
	return s
}

func (s *BatchCreateInstantSiteMonitorRequestTaskList) SetTaskType(v string) *BatchCreateInstantSiteMonitorRequestTaskList {
	s.TaskType = &v
	return s
}

type BatchCreateInstantSiteMonitorResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the site monitoring task.
	//
	// example:
	//
	// [{"taskName": "HangZhou_ECS1", "taskId": "679fbe4f-b80b-4706-91b2-5427b43e****"}]
	Data []*BatchCreateInstantSiteMonitorResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7AE72720-2C96-5446-9F2B-308C7CEDFF1A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s BatchCreateInstantSiteMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateInstantSiteMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *BatchCreateInstantSiteMonitorResponseBody) SetCode(v string) *BatchCreateInstantSiteMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *BatchCreateInstantSiteMonitorResponseBody) SetData(v []*BatchCreateInstantSiteMonitorResponseBodyData) *BatchCreateInstantSiteMonitorResponseBody {
	s.Data = v
	return s
}

func (s *BatchCreateInstantSiteMonitorResponseBody) SetMessage(v string) *BatchCreateInstantSiteMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *BatchCreateInstantSiteMonitorResponseBody) SetRequestId(v string) *BatchCreateInstantSiteMonitorResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchCreateInstantSiteMonitorResponseBody) SetSuccess(v bool) *BatchCreateInstantSiteMonitorResponseBody {
	s.Success = &v
	return s
}

type BatchCreateInstantSiteMonitorResponseBodyData struct {
	// The ID of the site monitoring task.
	//
	// example:
	//
	// 679fbe4f-b80b-4706-91b2-5427b43e****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the site monitoring task.
	//
	// example:
	//
	// HangZhou_ECS1
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s BatchCreateInstantSiteMonitorResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateInstantSiteMonitorResponseBodyData) GoString() string {
	return s.String()
}

func (s *BatchCreateInstantSiteMonitorResponseBodyData) SetTaskId(v string) *BatchCreateInstantSiteMonitorResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *BatchCreateInstantSiteMonitorResponseBodyData) SetTaskName(v string) *BatchCreateInstantSiteMonitorResponseBodyData {
	s.TaskName = &v
	return s
}

type BatchCreateInstantSiteMonitorResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchCreateInstantSiteMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchCreateInstantSiteMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchCreateInstantSiteMonitorResponse) GoString() string {
	return s.String()
}

func (s *BatchCreateInstantSiteMonitorResponse) SetHeaders(v map[string]*string) *BatchCreateInstantSiteMonitorResponse {
	s.Headers = v
	return s
}

func (s *BatchCreateInstantSiteMonitorResponse) SetStatusCode(v int32) *BatchCreateInstantSiteMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchCreateInstantSiteMonitorResponse) SetBody(v *BatchCreateInstantSiteMonitorResponseBody) *BatchCreateInstantSiteMonitorResponse {
	s.Body = v
	return s
}

type BatchExportRequest struct {
	// When you call this operation to export data, you must specify the `Cursor` parameter. You can obtain the value of the `Cursor` parameter by using one of the following methods:
	//
	// 	- When you call this operation for the first time, you must call the Cursor operation to obtain the `Cursor` value. For more information, see [Cursor](https://help.aliyun.com/document_detail/2330730.html).
	//
	// 	- When you call this operation again, you can obtain the `Cursor` value from the returned data of the last call.
	//
	// This parameter is required.
	//
	// example:
	//
	// eyJidWNrZXRzIjo0LCJjdXJzb3IiOiIxNjQxNDU0MzIwMDAwMWUxY2YxNWY0NTU0MTliZjllYTY4OWQ2ODI1OTU1Yzc1NmZjMDQ2OTMxMzczMzM2MzUzMTMxMzEzMzM0MzMzODM5MzEzMTMwMjQyYzY5MmQ3NTY2MzYzMjY3NmI2ZjM5MzU2YjY4MzAzMTYyNzg3MTcwNjkzMTM3MjQyYyIsImN1cnNvclZlcnNpb24iOiJxdWVyeSIsImVuZFRpbWUiOjE2NDE0NTQ3OTU4MjMsImV4cG9ydEVuZFRpbWUiOjE2NDE0NTQ3OTU4MjMsImV4cG9ydFN0YXJ0VGltZSI6MTY0MTQ1NDE5NTgyMywiZXhwcmVzc1JhbmdlIjpmYWxzZSwiaGFzTmV4dCI6dHJ1ZSwiaW5wdXRNZXRyaWMiOiJDUFVVdGlsaXphdGlvbiIsImlucHV0TmFtZXNwYWNlIjoiYWNzX2Vjc19kYXNoYm9hcmQiLCJsaW1pdCI6MTAwMCwibG9nVGltZU1vZGUiOnRydWUsIm1hdGNoZXJzIjp7ImNoYWluIjpbeyJsYWJlbCI6InVzZXJJZCIsIm9wZXJhdG9yIjoiRVFVQUxTIiwidmFsdWUiOiIxNzM2NTExMTM0Mzg5MTEwIn1dfSwibWV0cmljIjoiQ1BVVXRpbGl6YXRpb24iLCJtZXRyaWNUeXBlIjoiTUVUUklDIiwibmFtZXNwYWNlIjoiYWNzX2Vjc19kYXNoYm9hcmQiLCJuZXh0UGtBZGFwdGVyIjp7fSwib2Zmc2V0IjowLCJwYXJlbnRVaWQiOjEyNzA2NzY2Nzk1NDY3MDQsInN0YXJ0VGltZSI6MTY0MTQ1NDE5NTgyMywic3RlcCI6LTEsInRpbWVvdXQiOjEyMCwid2luZG93Ijo2****
	Cursor *string `json:"Cursor,omitempty" xml:"Cursor,omitempty"`
	// The maximum number of data entries that can be returned in each response.
	//
	// Valid values: 1 to 10000.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Length *int32 `json:"Length,omitempty" xml:"Length,omitempty"`
	// The statistical methods used to customize the returned data. By default, the measurements based on all statistical methods are returned.
	//
	// For example, the `cpu_idle` metric of ECS (`acs_ecs_dashboard`) has three statistical methods: `Average`, `Maximum`, and `Minimum`. If you want to return only the measurements based on the `Average` and `Maximum` statistical methods, set this parameter to `["Average", "Maximum"]`.
	//
	// The statistical methods of metrics are displayed in the `Statistics` column on the Metrics page of each cloud service. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	Measurements []*string `json:"Measurements,omitempty" xml:"Measurements,omitempty" type:"Repeated"`
	// The metric that is used to monitor the cloud service.
	//
	// For more information about the metrics of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  The value of this parameter must be the same as the value of the request parameter `Metric` in the Cursor operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_idle
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  The value of this parameter must be the same as the value of the request parameter `Namespace` in the Cursor operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s BatchExportRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchExportRequest) GoString() string {
	return s.String()
}

func (s *BatchExportRequest) SetCursor(v string) *BatchExportRequest {
	s.Cursor = &v
	return s
}

func (s *BatchExportRequest) SetLength(v int32) *BatchExportRequest {
	s.Length = &v
	return s
}

func (s *BatchExportRequest) SetMeasurements(v []*string) *BatchExportRequest {
	s.Measurements = v
	return s
}

func (s *BatchExportRequest) SetMetric(v string) *BatchExportRequest {
	s.Metric = &v
	return s
}

func (s *BatchExportRequest) SetNamespace(v string) *BatchExportRequest {
	s.Namespace = &v
	return s
}

type BatchExportShrinkRequest struct {
	// When you call this operation to export data, you must specify the `Cursor` parameter. You can obtain the value of the `Cursor` parameter by using one of the following methods:
	//
	// 	- When you call this operation for the first time, you must call the Cursor operation to obtain the `Cursor` value. For more information, see [Cursor](https://help.aliyun.com/document_detail/2330730.html).
	//
	// 	- When you call this operation again, you can obtain the `Cursor` value from the returned data of the last call.
	//
	// This parameter is required.
	//
	// example:
	//
	// eyJidWNrZXRzIjo0LCJjdXJzb3IiOiIxNjQxNDU0MzIwMDAwMWUxY2YxNWY0NTU0MTliZjllYTY4OWQ2ODI1OTU1Yzc1NmZjMDQ2OTMxMzczMzM2MzUzMTMxMzEzMzM0MzMzODM5MzEzMTMwMjQyYzY5MmQ3NTY2MzYzMjY3NmI2ZjM5MzU2YjY4MzAzMTYyNzg3MTcwNjkzMTM3MjQyYyIsImN1cnNvclZlcnNpb24iOiJxdWVyeSIsImVuZFRpbWUiOjE2NDE0NTQ3OTU4MjMsImV4cG9ydEVuZFRpbWUiOjE2NDE0NTQ3OTU4MjMsImV4cG9ydFN0YXJ0VGltZSI6MTY0MTQ1NDE5NTgyMywiZXhwcmVzc1JhbmdlIjpmYWxzZSwiaGFzTmV4dCI6dHJ1ZSwiaW5wdXRNZXRyaWMiOiJDUFVVdGlsaXphdGlvbiIsImlucHV0TmFtZXNwYWNlIjoiYWNzX2Vjc19kYXNoYm9hcmQiLCJsaW1pdCI6MTAwMCwibG9nVGltZU1vZGUiOnRydWUsIm1hdGNoZXJzIjp7ImNoYWluIjpbeyJsYWJlbCI6InVzZXJJZCIsIm9wZXJhdG9yIjoiRVFVQUxTIiwidmFsdWUiOiIxNzM2NTExMTM0Mzg5MTEwIn1dfSwibWV0cmljIjoiQ1BVVXRpbGl6YXRpb24iLCJtZXRyaWNUeXBlIjoiTUVUUklDIiwibmFtZXNwYWNlIjoiYWNzX2Vjc19kYXNoYm9hcmQiLCJuZXh0UGtBZGFwdGVyIjp7fSwib2Zmc2V0IjowLCJwYXJlbnRVaWQiOjEyNzA2NzY2Nzk1NDY3MDQsInN0YXJ0VGltZSI6MTY0MTQ1NDE5NTgyMywic3RlcCI6LTEsInRpbWVvdXQiOjEyMCwid2luZG93Ijo2****
	Cursor *string `json:"Cursor,omitempty" xml:"Cursor,omitempty"`
	// The maximum number of data entries that can be returned in each response.
	//
	// Valid values: 1 to 10000.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1000
	Length *int32 `json:"Length,omitempty" xml:"Length,omitempty"`
	// The statistical methods used to customize the returned data. By default, the measurements based on all statistical methods are returned.
	//
	// For example, the `cpu_idle` metric of ECS (`acs_ecs_dashboard`) has three statistical methods: `Average`, `Maximum`, and `Minimum`. If you want to return only the measurements based on the `Average` and `Maximum` statistical methods, set this parameter to `["Average", "Maximum"]`.
	//
	// The statistical methods of metrics are displayed in the `Statistics` column on the Metrics page of each cloud service. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	MeasurementsShrink *string `json:"Measurements,omitempty" xml:"Measurements,omitempty"`
	// The metric that is used to monitor the cloud service.
	//
	// For more information about the metrics of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  The value of this parameter must be the same as the value of the request parameter `Metric` in the Cursor operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_idle
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  The value of this parameter must be the same as the value of the request parameter `Namespace` in the Cursor operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s BatchExportShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchExportShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchExportShrinkRequest) SetCursor(v string) *BatchExportShrinkRequest {
	s.Cursor = &v
	return s
}

func (s *BatchExportShrinkRequest) SetLength(v int32) *BatchExportShrinkRequest {
	s.Length = &v
	return s
}

func (s *BatchExportShrinkRequest) SetMeasurementsShrink(v string) *BatchExportShrinkRequest {
	s.MeasurementsShrink = &v
	return s
}

func (s *BatchExportShrinkRequest) SetMetric(v string) *BatchExportShrinkRequest {
	s.Metric = &v
	return s
}

func (s *BatchExportShrinkRequest) SetNamespace(v string) *BatchExportShrinkRequest {
	s.Namespace = &v
	return s
}

type BatchExportResponseBody struct {
	// The timestamp of the data requested by the backend. A larger timestamp indicates that the data export time is closer to the current time.
	//
	// example:
	//
	// 1678781819000
	Anchor *int64 `json:"Anchor,omitempty" xml:"Anchor,omitempty"`
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The Cursor information that is used to call this operation again.
	//
	// >  If `null` is returned, the monitoring data is exported.
	//
	// example:
	//
	// v2.5eyJidWNrZXRzIjo0LCJjdXJzb3IiOiIxNjQxNDU0ODAwMDAwMWUxY2YxNWY0NTU0MTliZjllYTY4OWQ2ODI1OTU1Yzc1NmZjMDQ2OTMxMzczMzM2MzUzMTMxMzEzMzM0MzMzODM5MzEzMTMwMjQyYzY5MmQzMjdhNjU2MjY3N2E2NjZhNzczOTY2NmM3Mjc0NjM3MzY5Njg3NDcyMjQyYyIsImN1cnNvclZlcnNpb24iOiJxdWVyeSIsImVuZFRpbWUiOjE2NDE0NTUyMzYxMTIsImV4cG9ydEVuZFRpbWUiOjE2NDE0NTUyMzYxMTIsImV4cG9ydFN0YXJ0VGltZSI6MTY0MTQ1NDYzNjExMiwiZXhwcmVzc1JhbmdlIjpmYWxzZSwiaGFzTmV4dCI6dHJ1ZSwiaW5wdXRNZXRyaWMiOiJDUFVVdGlsaXphdGlvbiIsImlucHV0TmFtZXNwYWNlIjoiYWNzX2Vjc19kYXNoYm9hcmQiLCJsaW1pdCI6MTAwMCwibG9nVGltZU1vZGUiOnRydWUsIm1hdGNoZXJzIjp7ImNoYWluIjpbeyJsYWJlbCI6InVzZXJJZCIsIm9wZXJhdG9yIjoiRVFVQUxTIiwidmFsdWUiOiIxNzM2NTExMTM0Mzg5MTEwIn1dfSwibWV0cmljIjoiQ1BVVXRpbGl6YXRpb24iLCJtZXRyaWNUeXBlIjoiTUVUUklDIiwibmFtZXNwYWNlIjoiYWNzX2Vjc19kYXNoYm9hcmQiLCJuZXh0UGtBZGFwdGVyIjp7fSwib2Zmc2V0IjowLCJwYXJlbnRVaWQiOjEyNzA2NzY2Nzk1NDY3MDQsInN0YXJ0VGltZSI6MTY0MTQ1NDYzNjExMiwic3RlcCI6LTEsInRpbWVvdXQiOjEyMCwid2luZG93Ijo2MH0***
	Cursor *string `json:"Cursor,omitempty" xml:"Cursor,omitempty"`
	// The data returned in this call.
	DataResults []*MetricStat `json:"DataResults,omitempty" xml:"DataResults,omitempty" type:"Repeated"`
	// Indicates whether the data has been exported. Valid values:
	//
	// 	- true: Some data is not exported.
	//
	// 	- false: All the data is exported.
	//
	// example:
	//
	// true
	HasNext *bool `json:"HasNext,omitempty" xml:"HasNext,omitempty"`
	// The number of data entries returned in this call.
	//
	// example:
	//
	// 1000
	Length *int32 `json:"Length,omitempty" xml:"Length,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 251402CD-305C-1617-808E-D8C11FC8138D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s BatchExportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchExportResponseBody) GoString() string {
	return s.String()
}

func (s *BatchExportResponseBody) SetAnchor(v int64) *BatchExportResponseBody {
	s.Anchor = &v
	return s
}

func (s *BatchExportResponseBody) SetCode(v int32) *BatchExportResponseBody {
	s.Code = &v
	return s
}

func (s *BatchExportResponseBody) SetCursor(v string) *BatchExportResponseBody {
	s.Cursor = &v
	return s
}

func (s *BatchExportResponseBody) SetDataResults(v []*MetricStat) *BatchExportResponseBody {
	s.DataResults = v
	return s
}

func (s *BatchExportResponseBody) SetHasNext(v bool) *BatchExportResponseBody {
	s.HasNext = &v
	return s
}

func (s *BatchExportResponseBody) SetLength(v int32) *BatchExportResponseBody {
	s.Length = &v
	return s
}

func (s *BatchExportResponseBody) SetMessage(v string) *BatchExportResponseBody {
	s.Message = &v
	return s
}

func (s *BatchExportResponseBody) SetRequestId(v string) *BatchExportResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchExportResponseBody) SetSuccess(v bool) *BatchExportResponseBody {
	s.Success = &v
	return s
}

type BatchExportResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchExportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchExportResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchExportResponse) GoString() string {
	return s.String()
}

func (s *BatchExportResponse) SetHeaders(v map[string]*string) *BatchExportResponse {
	s.Headers = v
	return s
}

func (s *BatchExportResponse) SetStatusCode(v int32) *BatchExportResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchExportResponse) SetBody(v *BatchExportResponseBody) *BatchExportResponse {
	s.Body = v
	return s
}

type CreateDynamicTagGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ECS_Group
	ContactGroupList []*string `json:"ContactGroupList,omitempty" xml:"ContactGroupList,omitempty" type:"Repeated"`
	// Specifies whether the CloudMonitor agent is automatically installed for the application group. CloudMonitor determines whether to automatically install the CloudMonitor agent for the hosts in an application group based on the value of this parameter. Valid values:
	//
	// 	- true: The CloudMonitor agent is automatically installed.
	//
	// 	- false (default value): The CloudMonitor agent is not automatically installed.
	//
	// example:
	//
	// true
	EnableInstallAgent *bool `json:"EnableInstallAgent,omitempty" xml:"EnableInstallAgent,omitempty"`
	// Specifies whether the application group automatically subscribes to event notifications. If events whose severity level is critical or warning occur on resources in an application group, CloudMonitor sends alert notifications. Valid values:
	//
	// 	- true: The application group automatically subscribes to event notifications.
	//
	// 	- false (default value): The application group does not automatically subscribe to event notifications.
	//
	// example:
	//
	// true
	EnableSubscribeEvent *bool `json:"EnableSubscribeEvent,omitempty" xml:"EnableSubscribeEvent,omitempty"`
	// The conditional expressions used to create an application group based on the tag.
	//
	// This parameter is required.
	MatchExpress []*CreateDynamicTagGroupRequestMatchExpress `json:"MatchExpress,omitempty" xml:"MatchExpress,omitempty" type:"Repeated"`
	// The relationship between the conditional expressions for the tag values of the cloud resources. Valid values:
	//
	// 	- and (default value)
	//
	// 	- or
	//
	// example:
	//
	// and
	MatchExpressFilterRelation *string `json:"MatchExpressFilterRelation,omitempty" xml:"MatchExpressFilterRelation,omitempty"`
	RegionId                   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tag keys of the cloud resources.
	//
	// For more information about how to obtain tag keys, see [DescribeTagKeyList](https://help.aliyun.com/document_detail/145558.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs_instance
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The ID of the region to which the tags belong.
	//
	// example:
	//
	// cn-hangzhou
	TagRegionId *string `json:"TagRegionId,omitempty" xml:"TagRegionId,omitempty"`
	// example:
	//
	// 85****
	TemplateIdList []*string `json:"TemplateIdList,omitempty" xml:"TemplateIdList,omitempty" type:"Repeated"`
}

func (s CreateDynamicTagGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDynamicTagGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateDynamicTagGroupRequest) SetContactGroupList(v []*string) *CreateDynamicTagGroupRequest {
	s.ContactGroupList = v
	return s
}

func (s *CreateDynamicTagGroupRequest) SetEnableInstallAgent(v bool) *CreateDynamicTagGroupRequest {
	s.EnableInstallAgent = &v
	return s
}

func (s *CreateDynamicTagGroupRequest) SetEnableSubscribeEvent(v bool) *CreateDynamicTagGroupRequest {
	s.EnableSubscribeEvent = &v
	return s
}

func (s *CreateDynamicTagGroupRequest) SetMatchExpress(v []*CreateDynamicTagGroupRequestMatchExpress) *CreateDynamicTagGroupRequest {
	s.MatchExpress = v
	return s
}

func (s *CreateDynamicTagGroupRequest) SetMatchExpressFilterRelation(v string) *CreateDynamicTagGroupRequest {
	s.MatchExpressFilterRelation = &v
	return s
}

func (s *CreateDynamicTagGroupRequest) SetRegionId(v string) *CreateDynamicTagGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDynamicTagGroupRequest) SetTagKey(v string) *CreateDynamicTagGroupRequest {
	s.TagKey = &v
	return s
}

func (s *CreateDynamicTagGroupRequest) SetTagRegionId(v string) *CreateDynamicTagGroupRequest {
	s.TagRegionId = &v
	return s
}

func (s *CreateDynamicTagGroupRequest) SetTemplateIdList(v []*string) *CreateDynamicTagGroupRequest {
	s.TemplateIdList = v
	return s
}

type CreateDynamicTagGroupRequestMatchExpress struct {
	// The keys of the tags that are used to create the application group. If a specified key is attached to multiple resources, the resources that have the same key-value pair are added to the same group.
	//
	// example:
	//
	// appname
	TagName *string `json:"TagName,omitempty" xml:"TagName,omitempty"`
	// The tag values of the cloud resources. Set the value of N to 1.
	//
	// >  If you set the `MatchExpress.N.TagValueMatchFunction` parameter, you must also set the `MatchExpress.N.TagValue` parameter.
	//
	// example:
	//
	// instance
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	// The method that is used to match the tag values of the cloud resources. Set the value of N to 1. Valid values:
	//
	// 	- contains: contains
	//
	// 	- startWith: starts with a prefix
	//
	// 	- endWith: ends with a suffix
	//
	// 	- notContains: does not contain
	//
	// 	- equals: equals
	//
	// 	- all: matches all
	//
	// >  If you set the `MatchExpress.N.TagValueMatchFunction` parameter, you must also set the `MatchExpress.N.TagValue` parameter.
	//
	// example:
	//
	// contains
	TagValueMatchFunction *string `json:"TagValueMatchFunction,omitempty" xml:"TagValueMatchFunction,omitempty"`
}

func (s CreateDynamicTagGroupRequestMatchExpress) String() string {
	return tea.Prettify(s)
}

func (s CreateDynamicTagGroupRequestMatchExpress) GoString() string {
	return s.String()
}

func (s *CreateDynamicTagGroupRequestMatchExpress) SetTagName(v string) *CreateDynamicTagGroupRequestMatchExpress {
	s.TagName = &v
	return s
}

func (s *CreateDynamicTagGroupRequestMatchExpress) SetTagValue(v string) *CreateDynamicTagGroupRequestMatchExpress {
	s.TagValue = &v
	return s
}

func (s *CreateDynamicTagGroupRequestMatchExpress) SetTagValueMatchFunction(v string) *CreateDynamicTagGroupRequestMatchExpress {
	s.TagValueMatchFunction = &v
	return s
}

type CreateDynamicTagGroupResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call is successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the tag matching rule.
	//
	// example:
	//
	// 2534dc0a-e3e5-4ae1-a2fc-75ef166c****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 84AC6F0B-7945-466A-AA44-99BB5A561F86
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. Valid values:
	//
	// 	- true: The call is successful.
	//
	// 	- false: The call fails.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDynamicTagGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDynamicTagGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDynamicTagGroupResponseBody) SetCode(v string) *CreateDynamicTagGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDynamicTagGroupResponseBody) SetId(v string) *CreateDynamicTagGroupResponseBody {
	s.Id = &v
	return s
}

func (s *CreateDynamicTagGroupResponseBody) SetMessage(v string) *CreateDynamicTagGroupResponseBody {
	s.Message = &v
	return s
}

func (s *CreateDynamicTagGroupResponseBody) SetRequestId(v string) *CreateDynamicTagGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDynamicTagGroupResponseBody) SetSuccess(v bool) *CreateDynamicTagGroupResponseBody {
	s.Success = &v
	return s
}

type CreateDynamicTagGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDynamicTagGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDynamicTagGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDynamicTagGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateDynamicTagGroupResponse) SetHeaders(v map[string]*string) *CreateDynamicTagGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateDynamicTagGroupResponse) SetStatusCode(v int32) *CreateDynamicTagGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDynamicTagGroupResponse) SetBody(v *CreateDynamicTagGroupResponseBody) *CreateDynamicTagGroupResponse {
	s.Body = v
	return s
}

type CreateGroupMetricRulesRequest struct {
	// The ID of the application group.
	//
	// For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId          *int64                                           `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	GroupMetricRules []*CreateGroupMetricRulesRequestGroupMetricRules `json:"GroupMetricRules,omitempty" xml:"GroupMetricRules,omitempty" type:"Repeated"`
	RegionId         *string                                          `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateGroupMetricRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesRequest) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesRequest) SetGroupId(v int64) *CreateGroupMetricRulesRequest {
	s.GroupId = &v
	return s
}

func (s *CreateGroupMetricRulesRequest) SetGroupMetricRules(v []*CreateGroupMetricRulesRequestGroupMetricRules) *CreateGroupMetricRulesRequest {
	s.GroupMetricRules = v
	return s
}

func (s *CreateGroupMetricRulesRequest) SetRegionId(v string) *CreateGroupMetricRulesRequest {
	s.RegionId = &v
	return s
}

type CreateGroupMetricRulesRequestGroupMetricRules struct {
	Escalations *CreateGroupMetricRulesRequestGroupMetricRulesEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Struct"`
	// The name of the cloud service. Valid values of N: 1 to 200. Valid value:
	//
	// 	- PolarDB: PolarDB
	//
	// 	- NewBGPDDoS: Anti-DDoS Pro
	//
	// 	- IoTDevice: IoT Platform
	//
	// 	- DRDS: Distributed Relational Database Service (DRDS)
	//
	// 	- VS: Video Surveillance System
	//
	// 	- AMQP: Alibaba Cloud Message Queue for AMQP
	//
	// 	- ADS: AnalyticDB
	//
	// 	- APIGateway: API Gateway
	//
	// 	- InternetSharedBandwidth: EIP Bandwidth Plan
	//
	// 	- CDN: Alibaba Cloud Content Delivery Network (CDN)
	//
	// 	- CEN: Cloud Enterprise Network (CEN)
	//
	// 	- DCDN: Dynamic Route for CDN (DCDN)
	//
	// 	- DDoS: Anti-DDoS
	//
	// 	- ECS: Elastic Compute Service (ECS)
	//
	// 	- DirectMail: Direct Mail
	//
	// 	- Elasticsearch: Elasticsearch
	//
	// 	- EMR: E-MapReduce (EMR)
	//
	// 	- ESS: Auto Scaling
	//
	// 	- FunctionCompute: Function Compute
	//
	// 	- RealtimeCompute: Realtime Compute for Apache Flink
	//
	// 	- GlobalAcceleration: Global Accelerator (GA)
	//
	// 	- Hbase: ApsaraDB for HBase
	//
	// 	- TSDB: Time Series Database (TSDB)
	//
	// 	- IPv6trans: IPv6 Translation Service
	//
	// 	- Kafka: Message Queue for Apache Kafka
	//
	// 	- Kubernetes: Container Service for Kubernetes (ACK)
	//
	// 	- KVstore: ApsaraDB for Redis
	//
	// 	- MNS: Message Service (MNS)
	//
	// 	- MongoDB: ApsaraDB for MongoDB
	//
	// 	- MQ: Message Queue
	//
	// 	- NAT: NAT Gateway
	//
	// 	- OpenAd: Open Ad
	//
	// 	- OpenSearch: Open Search
	//
	// 	- OSS: Object Storage Service (OSS)
	//
	// 	- PCDN: P2P CDN
	//
	// 	- petadata: HybridDB for MySQL
	//
	// 	- RDS: ApsaraDB RDS
	//
	// 	- SCDN: Secure CDN
	//
	// 	- SLB: Server Load Balancer (SLB)
	//
	// 	- SLS: Log Service
	//
	// 	- VideoLive: ApsaraVideo Live
	//
	// 	- VOD: ApsaraVideo VOD
	//
	// 	- EIP: Elastic IP Address (EIP)
	//
	// 	- VPN: VPN Gateway
	//
	// 	- AIRec: Artificial Intelligence Recommendation
	//
	// 	- GPDB: AnalyticDB for PostgreSQL
	//
	// 	- DBS: Database Backup (DBS)
	//
	// 	- SAG: Smart Access Gateway (SAG)
	//
	// 	- Memcache: ApsaraDB for Memcache
	//
	// 	- IOT_EDGE: Link IoT Edge
	//
	// 	- OCS: ApsaraDB for Memcache (previous version)
	//
	// 	- VPC: Express Connect
	//
	// 	- EHPC: Elastic High Performance Computing (E-HPC)
	//
	// 	- MPS: ApsaraVideo Media Processing
	//
	// 	- ENS: Edge Node Service (ENS)
	//
	// 	- MaxCompute_Prepay: MaxCompute
	//
	// 	- IoT_Kubernetes: Edge Application Hosting
	//
	// 	- CMS: CloudMonitor
	//
	// 	- batchcomputenew: Batch Compute
	//
	// 	- HBaseUE: ApsaraDB for HBase Performance-enhanced Edition
	//
	// 	- UIS: Ultimate Internet Service (UIS)
	//
	// 	- nls: Intelligent Speech Interaction
	//
	// 	- ots: Tablestore
	//
	// 	- NAS: File Storage NAS
	//
	// 	- ECI: Elastic Container Instance (ECI)
	//
	// 	- OpenAPI: OpenAPI Explorer
	//
	// 	- pvtzpost: Alibaba Cloud DNS PrivateZone
	//
	// 	- blinkonk8s: Flink on Kubernetes
	//
	// 	- FunctionFlow: Serverless Workflow (SWF)
	//
	// 	- SMC: Server Migration Center (SMC)
	//
	// 	- ddosbgp: Anti-DDoS Origin
	//
	// 	- baas: Blockchain as a Service
	//
	// 	- privatelink: PrivateLink
	//
	// 	- cds: ApsaraDB for Cassandra
	//
	// 	- DDH: Dedicated Host
	//
	// 	- RocketMQ: Message Queue for Apache RocketMQ
	//
	// 	- ECC: Express Cloud Connect
	//
	// 	- hbaseserverless: ApsaraDB for HBase Serverless Edition
	//
	// 	- mns_tmp: Message Service
	//
	// 	- hdr: Hybrid Disaster Recovery (HDR)
	//
	// 	- hbr: Hybrid Backup Recovery (HBR)
	//
	// 	- ADB: AnalyticDB for MySQL V3.0
	//
	// 	- tag: Tag Service
	//
	// 	- GDB: Graph Database
	//
	// 	- WAF: Web Application Firewall (WAF)
	//
	// 	- hcs_sgw: Cloud Storage Gateway (CSG)
	//
	// 	- ipv6gateway: IPv6 Gateway
	//
	// 	- RDS_SAR: ApsaraDB Exclusive Host Group
	//
	// 	- learn: Machine Learning Platform for AI
	//
	// 	- ROS: Resource Orchestration Service (ROS)
	//
	// 	- OOS: Operation Orchestration Service (OOS)
	//
	// 	- bds: Data Synchronization for HBase
	//
	// 	- cfw: Cloud Firewall
	//
	// 	- ddosDip: Anti-DDoS Premium
	//
	// 	- datahub: DataHub
	//
	// 	- hologres: Hologres
	//
	// 	- ExpressConnect: Express Connect
	//
	// 	- dbfs: Database File System (DBFS)
	//
	// 	- clickhouse: ApsaraDB for ClickHouse
	//
	// 	- k8s: Container Service for Kubernetes (ACK)
	//
	// 	- DTS: Data Transmission Service (DTS)
	//
	// 	- AnycastEIP: Anycast Elastic IP Address
	//
	// 	- Lindorm: ApsaraDB for Lindorm
	//
	// 	- config: Cloud Config
	//
	// 	- spark: Databricks DataInsight (DDI)
	//
	// 	- serverless: Serverless App Engine (SAE)
	//
	// 	- alb: Application Load Balancer (ALB)
	//
	// 	- oceanbase: ApsaraDB for OceanBase
	//
	// 	- KMS: Key Management Service (KMS)
	//
	// 	- lvwang: Content Moderation
	//
	// 	- LinkVisual: LinkVisual
	//
	// 	- tair: ApsaraDB for Redis Enhanced Edition (Tair)
	//
	// 	- dlf: Data Lake Formation (DLF)
	//
	// 	- networkmonitor: Site Monitoring
	//
	// 	- pnc: Physical Network Change
	//
	// 	- AIS: Alibaba Cloud Infrastructure
	//
	// 	- cloudgame: Cloud Gaming Platform
	//
	// 	- RTC: Real-Time Communication
	//
	// 	- cloudbox: CloudBox
	//
	// 	- actiontrail: ActionTrail
	//
	// 	- cc: Cloud Connector
	//
	// 	- disk: Elastic Block Storage (EBS)
	//
	// 	- easygene: Genomics Computing Platform
	//
	// 	- cloudphone: Elastic Cloud Phone
	//
	// 	- BMS: Bare Metal Management Service
	//
	// 	- swas: Simple Application Server
	//
	// 	- AvailabilityMonitoring: Availability Monitoring of CloudMonitor
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The alert contact groups. Valid values of N: 1 to 200.
	//
	// For information about how to obtain alert contact groups, see [DescribeContactGroupList](https://help.aliyun.com/document_detail/114922.html).
	//
	// example:
	//
	// ECS_Group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The dimension of the alert rule. Valid values of N: 1 to 200.
	//
	// Set the value to a set of key-value pairs, for example, `userId:120886317861****` or `instanceId:i-m5e1qg6uo38rztr4****`.
	//
	// example:
	//
	// [{"instanceId":"i-m5e1qg6uo38rztr4****"}]
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The time period during which the alert rule is effective. Valid values of N: 1 to 200.
	//
	// example:
	//
	// 05:31-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// The subject of the alert notification email. Valid values of N: 1 to 200.
	EmailSubject *string `json:"EmailSubject,omitempty" xml:"EmailSubject,omitempty"`
	// The interval at which CloudMonitor checks whether the alert rule is triggered. Valid values of N: 1 to 200.
	//
	// Unit: seconds. The default value is the lowest frequency at which the metric is polled.
	//
	// >  We recommend that you set the interval to the data aggregation period. If the interval is shorter than the data aggregation period, alerts cannot be triggered due to insufficient data.
	//
	// example:
	//
	// 60
	Interval *string                                                `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Labels   []*CreateGroupMetricRulesRequestGroupMetricRulesLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The name of the metric. Valid values of N: 1 to 200.
	//
	// For information about how to obtain the name of a metric, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service. Valid values of N: 1 to 200.
	//
	// For information about how to obtain the namespace of a cloud service, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The method that is used to handle alerts when no monitoring data is found. Valid values of N: 1 to 200. Valid value:
	//
	// 	- KEEP_LAST_STATE (default value): No operation is performed.
	//
	// 	- INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
	//
	// 	- OK: The alert rule has no active alerts.
	//
	// example:
	//
	// KEEP_LAST_STATE
	NoDataPolicy *string `json:"NoDataPolicy,omitempty" xml:"NoDataPolicy,omitempty"`
	// The time period during which the alert rule is ineffective. Valid values of N: 1 to 200.
	//
	// example:
	//
	// 00:00-05:30
	NoEffectiveInterval *string `json:"NoEffectiveInterval,omitempty" xml:"NoEffectiveInterval,omitempty"`
	// example:
	//
	// {
	//
	//       "NotSendOK": true
	//
	// }
	Options *string `json:"Options,omitempty" xml:"Options,omitempty"`
	// The aggregation period of the metric data. Valid values of N: 1 to 200.
	//
	// Set the `Period` parameter to an integral multiple of 60. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The ID of the alert rule. Valid values of N: 1 to 200.
	//
	// This parameter is required.
	//
	// example:
	//
	// 456789
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule. Valid values of N: 1 to 200.
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS_Rule1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which new alerts are not sent even if the trigger conditions are met. Valid values of N: 1 to 200.
	//
	// Unit: seconds. Default value: 86400. Minimum value: 3600.
	//
	// example:
	//
	// 86400
	SilenceTime *int32 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The callback URL. Valid values of N: 1 to 200.
	//
	// The callback URL must be accessible over the Internet. CloudMonitor pushes an alert notification to the specified callback URL by sending an HTTP POST request. Only the HTTP protocol is supported.
	//
	// example:
	//
	// https://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s CreateGroupMetricRulesRequestGroupMetricRules) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesRequestGroupMetricRules) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetEscalations(v *CreateGroupMetricRulesRequestGroupMetricRulesEscalations) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.Escalations = v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetCategory(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.Category = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetContactGroups(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.ContactGroups = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetDimensions(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.Dimensions = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetEffectiveInterval(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.EffectiveInterval = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetEmailSubject(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.EmailSubject = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetInterval(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.Interval = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetLabels(v []*CreateGroupMetricRulesRequestGroupMetricRulesLabels) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.Labels = v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetMetricName(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.MetricName = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetNamespace(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.Namespace = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetNoDataPolicy(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.NoDataPolicy = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetNoEffectiveInterval(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.NoEffectiveInterval = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetOptions(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.Options = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetPeriod(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.Period = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetRuleId(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.RuleId = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetRuleName(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.RuleName = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetSilenceTime(v int32) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.SilenceTime = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRules) SetWebhook(v string) *CreateGroupMetricRulesRequestGroupMetricRules {
	s.Webhook = &v
	return s
}

type CreateGroupMetricRulesRequestGroupMetricRulesEscalations struct {
	Critical *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	Info     *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo     `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	Warn     *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn     `json:"Warn,omitempty" xml:"Warn,omitempty" type:"Struct"`
}

func (s CreateGroupMetricRulesRequestGroupMetricRulesEscalations) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesRequestGroupMetricRulesEscalations) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalations) SetCritical(v *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical) *CreateGroupMetricRulesRequestGroupMetricRulesEscalations {
	s.Critical = v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalations) SetInfo(v *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo) *CreateGroupMetricRulesRequestGroupMetricRulesEscalations {
	s.Info = v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalations) SetWarn(v *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn) *CreateGroupMetricRulesRequestGroupMetricRulesEscalations {
	s.Warn = v
	return s
}

type CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *string `json:"N,omitempty" xml:"N,omitempty"`
	PreCondition       *string `json:"PreCondition,omitempty" xml:"PreCondition,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical) SetComparisonOperator(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical {
	s.ComparisonOperator = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical) SetN(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical {
	s.N = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical) SetPreCondition(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical {
	s.PreCondition = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical) SetStatistics(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical {
	s.Statistics = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical) SetThreshold(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical {
	s.Threshold = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical) SetTimes(v int32) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsCritical {
	s.Times = &v
	return s
}

type CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *string `json:"N,omitempty" xml:"N,omitempty"`
	PreCondition       *string `json:"PreCondition,omitempty" xml:"PreCondition,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo) SetComparisonOperator(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo {
	s.ComparisonOperator = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo) SetN(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo {
	s.N = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo) SetPreCondition(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo {
	s.PreCondition = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo) SetStatistics(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo {
	s.Statistics = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo) SetThreshold(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo {
	s.Threshold = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo) SetTimes(v int32) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsInfo {
	s.Times = &v
	return s
}

type CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *string `json:"N,omitempty" xml:"N,omitempty"`
	PreCondition       *string `json:"PreCondition,omitempty" xml:"PreCondition,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn) SetComparisonOperator(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn {
	s.ComparisonOperator = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn) SetN(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn {
	s.N = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn) SetPreCondition(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn {
	s.PreCondition = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn) SetStatistics(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn {
	s.Statistics = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn) SetThreshold(v string) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn {
	s.Threshold = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn) SetTimes(v int32) *CreateGroupMetricRulesRequestGroupMetricRulesEscalationsWarn {
	s.Times = &v
	return s
}

type CreateGroupMetricRulesRequestGroupMetricRulesLabels struct {
	// The tag key of the alert rule. The specified tag is contained in alert notifications.
	//
	// Valid values of N: 1 to 200.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the alert rule. The specified tag is contained in alert notifications.
	//
	// Valid values of N: 1 to 200.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateGroupMetricRulesRequestGroupMetricRulesLabels) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesRequestGroupMetricRulesLabels) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesLabels) SetKey(v string) *CreateGroupMetricRulesRequestGroupMetricRulesLabels {
	s.Key = &v
	return s
}

func (s *CreateGroupMetricRulesRequestGroupMetricRulesLabels) SetValue(v string) *CreateGroupMetricRulesRequestGroupMetricRulesLabels {
	s.Value = &v
	return s
}

type CreateGroupMetricRulesResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call is successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 461CF2CD-2FC3-4B26-8645-7BD27E7D0F1D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the alert rules.
	Resources *CreateGroupMetricRulesResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Struct"`
	// Indicates whether the call is successful. Valid value:
	//
	// - true: The call is successful.
	//
	// - false: The call fails.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateGroupMetricRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesResponseBody) SetCode(v int32) *CreateGroupMetricRulesResponseBody {
	s.Code = &v
	return s
}

func (s *CreateGroupMetricRulesResponseBody) SetMessage(v string) *CreateGroupMetricRulesResponseBody {
	s.Message = &v
	return s
}

func (s *CreateGroupMetricRulesResponseBody) SetRequestId(v string) *CreateGroupMetricRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateGroupMetricRulesResponseBody) SetResources(v *CreateGroupMetricRulesResponseBodyResources) *CreateGroupMetricRulesResponseBody {
	s.Resources = v
	return s
}

func (s *CreateGroupMetricRulesResponseBody) SetSuccess(v bool) *CreateGroupMetricRulesResponseBody {
	s.Success = &v
	return s
}

type CreateGroupMetricRulesResponseBodyResources struct {
	AlertResult []*CreateGroupMetricRulesResponseBodyResourcesAlertResult `json:"AlertResult,omitempty" xml:"AlertResult,omitempty" type:"Repeated"`
}

func (s CreateGroupMetricRulesResponseBodyResources) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesResponseBodyResources) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesResponseBodyResources) SetAlertResult(v []*CreateGroupMetricRulesResponseBodyResourcesAlertResult) *CreateGroupMetricRulesResponseBodyResources {
	s.AlertResult = v
	return s
}

type CreateGroupMetricRulesResponseBodyResourcesAlertResult struct {
	// The status code that is returned for the alert rule.
	//
	// >  The status code 200 indicates that the call is successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message that is returned for the alert rule.
	//
	// example:
	//
	// Metric not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// 456789
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// ECS_Rule1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// Indicates whether the alert rule was created. Valid value:
	//
	// - true: The alert rule was created.
	//
	// - false: The alert rule failed to be created.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateGroupMetricRulesResponseBodyResourcesAlertResult) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesResponseBodyResourcesAlertResult) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesResponseBodyResourcesAlertResult) SetCode(v int32) *CreateGroupMetricRulesResponseBodyResourcesAlertResult {
	s.Code = &v
	return s
}

func (s *CreateGroupMetricRulesResponseBodyResourcesAlertResult) SetMessage(v string) *CreateGroupMetricRulesResponseBodyResourcesAlertResult {
	s.Message = &v
	return s
}

func (s *CreateGroupMetricRulesResponseBodyResourcesAlertResult) SetRuleId(v string) *CreateGroupMetricRulesResponseBodyResourcesAlertResult {
	s.RuleId = &v
	return s
}

func (s *CreateGroupMetricRulesResponseBodyResourcesAlertResult) SetRuleName(v string) *CreateGroupMetricRulesResponseBodyResourcesAlertResult {
	s.RuleName = &v
	return s
}

func (s *CreateGroupMetricRulesResponseBodyResourcesAlertResult) SetSuccess(v bool) *CreateGroupMetricRulesResponseBodyResourcesAlertResult {
	s.Success = &v
	return s
}

type CreateGroupMetricRulesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateGroupMetricRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateGroupMetricRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMetricRulesResponse) GoString() string {
	return s.String()
}

func (s *CreateGroupMetricRulesResponse) SetHeaders(v map[string]*string) *CreateGroupMetricRulesResponse {
	s.Headers = v
	return s
}

func (s *CreateGroupMetricRulesResponse) SetStatusCode(v int32) *CreateGroupMetricRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateGroupMetricRulesResponse) SetBody(v *CreateGroupMetricRulesResponseBody) *CreateGroupMetricRulesResponse {
	s.Body = v
	return s
}

type CreateGroupMonitoringAgentProcessRequest struct {
	// The alert rule configurations.
	//
	// Valid values of N: 1 to 3.
	//
	// This parameter is required.
	AlertConfig []*CreateGroupMonitoringAgentProcessRequestAlertConfig `json:"AlertConfig,omitempty" xml:"AlertConfig,omitempty" type:"Repeated"`
	// The ID of the application group.
	//
	// For more information about how to obtain the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The expressions used to match instances.
	//
	// Valid values of N: 1 to 3.
	MatchExpress []*CreateGroupMonitoringAgentProcessRequestMatchExpress `json:"MatchExpress,omitempty" xml:"MatchExpress,omitempty" type:"Repeated"`
	// The logical operator used between conditional expressions that are used to match instances. Valid values:
	//
	// 	- all
	//
	// 	- and
	//
	// 	- or
	//
	// example:
	//
	// and
	MatchExpressFilterRelation *string `json:"MatchExpressFilterRelation,omitempty" xml:"MatchExpressFilterRelation,omitempty"`
	// The process name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test1
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateGroupMonitoringAgentProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMonitoringAgentProcessRequest) GoString() string {
	return s.String()
}

func (s *CreateGroupMonitoringAgentProcessRequest) SetAlertConfig(v []*CreateGroupMonitoringAgentProcessRequestAlertConfig) *CreateGroupMonitoringAgentProcessRequest {
	s.AlertConfig = v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequest) SetGroupId(v string) *CreateGroupMonitoringAgentProcessRequest {
	s.GroupId = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequest) SetMatchExpress(v []*CreateGroupMonitoringAgentProcessRequestMatchExpress) *CreateGroupMonitoringAgentProcessRequest {
	s.MatchExpress = v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequest) SetMatchExpressFilterRelation(v string) *CreateGroupMonitoringAgentProcessRequest {
	s.MatchExpressFilterRelation = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequest) SetProcessName(v string) *CreateGroupMonitoringAgentProcessRequest {
	s.ProcessName = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequest) SetRegionId(v string) *CreateGroupMonitoringAgentProcessRequest {
	s.RegionId = &v
	return s
}

type CreateGroupMonitoringAgentProcessRequestAlertConfig struct {
	// The operator that is used to compare the metric value with the threshold. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the previous monitoring cycle
	//
	// Valid values of N: 1 to 3.
	//
	// This parameter is required.
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The period of time during which the alert rule is effective.
	//
	// Valid values of N: 1 to 3.
	//
	// example:
	//
	// 00:00-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// The alert level. Valid values:
	//
	// 	- critical (default)
	//
	// 	- warn
	//
	// 	- info
	//
	// Valid values of N: 1 to 3.
	//
	// This parameter is required.
	//
	// example:
	//
	// warn
	EscalationsLevel *string `json:"EscalationsLevel,omitempty" xml:"EscalationsLevel,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// 00:00-23:59
	NoEffectiveInterval *string `json:"NoEffectiveInterval,omitempty" xml:"NoEffectiveInterval,omitempty"`
	// The mute period during which new alert notifications are not sent even if the trigger conditions are met. Unit: seconds. Minimum value: 3600, which is equivalent to one hour. Default value: 86400, which is equivalent to one day.
	//
	// Valid values of N: 1 to 3.
	//
	// >  Only one alert notification is sent during a mute period even if the metric value exceeds the alert threshold during consecutive checks.
	//
	// example:
	//
	// 86400
	SilenceTime *string `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The statistical aggregation method that is used to calculate the metric values.
	//
	// Valid values of N: 1 to 3.
	//
	// >  Set the value to Average.
	//
	// This parameter is required.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The alert triggers.
	TargetList []*CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList `json:"TargetList,omitempty" xml:"TargetList,omitempty" type:"Repeated"`
	// The alert threshold.
	//
	// Valid values of N: 1 to 3.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The number of times for which the threshold can be consecutively exceeded. Default value: 3.
	//
	// Valid values of N: 1 to 3.
	//
	// >  A metric triggers an alert only after the metric value reaches the threshold consecutively for the specified times.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	Times *string `json:"Times,omitempty" xml:"Times,omitempty"`
	// The callback URL.
	//
	// Valid values of N: 1 to 3.
	//
	// example:
	//
	// http://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s CreateGroupMonitoringAgentProcessRequestAlertConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMonitoringAgentProcessRequestAlertConfig) GoString() string {
	return s.String()
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfig) SetComparisonOperator(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfig {
	s.ComparisonOperator = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfig) SetEffectiveInterval(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfig {
	s.EffectiveInterval = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfig) SetEscalationsLevel(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfig {
	s.EscalationsLevel = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfig) SetNoEffectiveInterval(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfig {
	s.NoEffectiveInterval = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfig) SetSilenceTime(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfig {
	s.SilenceTime = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfig) SetStatistics(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfig {
	s.Statistics = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfig) SetTargetList(v []*CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList) *CreateGroupMonitoringAgentProcessRequestAlertConfig {
	s.TargetList = v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfig) SetThreshold(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfig {
	s.Threshold = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfig) SetTimes(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfig {
	s.Times = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfig) SetWebhook(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfig {
	s.Webhook = &v
	return s
}

type CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList struct {
	// The Alibaba Cloud Resource Name (ARN) of the resource.
	//
	// For more information about how to query the ARN of a resource, see [DescribeMetricRuleTargets](https://help.aliyun.com/document_detail/121592.html).
	//
	// Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:
	//
	// 	- {Service name abbreviation}: the abbreviation of the service name. Set the value to Simple Message Queue (formerly MNS) (SMQ).
	//
	// 	- {userId}: the ID of the Alibaba Cloud account.
	//
	// 	- {regionId}: the region ID of the SMQ queue or topic.
	//
	// 	- {Resource type}: the type of the resource that triggers the alert. Valid values:
	//
	//     	- **queues**
	//
	//     	- **topics**
	//
	// 	- {Resource name}: the resource name.
	//
	//     	- If the resource type is **queues**, the resource name is the queue name.
	//
	//     	- If the resource type is **topics**, the resource name is the topic name.
	//
	// example:
	//
	// acs:mns:cn-hangzhou:120886317861****:/queues/test/message
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the resource for which alerts are triggered.
	//
	// For more information about how to obtain the ID of a resource for which alerts are triggered, see [DescribeMetricRuleTargets](https://help.aliyun.com/document_detail/121592.html).
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The parameters of the alert callback. The parameters are in the JSON format.
	//
	// example:
	//
	// {"customField1":"value1","customField2":"$.name"}
	JsonParams *string `json:"JsonParams,omitempty" xml:"JsonParams,omitempty"`
	// The alert level. Valid values:
	//
	// 	- INFO
	//
	// 	- WARN
	//
	// 	- CRITICAL
	//
	// example:
	//
	// ["INFO", "WARN", "CRITICAL"]
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList) GoString() string {
	return s.String()
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList) SetArn(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList {
	s.Arn = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList) SetId(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList {
	s.Id = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList) SetJsonParams(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList {
	s.JsonParams = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList) SetLevel(v string) *CreateGroupMonitoringAgentProcessRequestAlertConfigTargetList {
	s.Level = &v
	return s
}

type CreateGroupMonitoringAgentProcessRequestMatchExpress struct {
	// The matching condition. Valid values:
	//
	// 	- all (default value): matches all
	//
	// 	- startWith: starts with a prefix
	//
	// 	- endWith: ends with a suffix
	//
	// 	- contains: contains
	//
	// 	- notContains: does not contain
	//
	// 	- equals: equals
	//
	// Valid values of N: 1 to 3.
	//
	// example:
	//
	// startWith
	Function *string `json:"Function,omitempty" xml:"Function,omitempty"`
	// The criteria based on which the instances are matched.
	//
	// Valid values of N: 1 to 3.
	//
	// > Set the value to name. The value name indicates that the instances are matched based on the instance name.
	//
	// example:
	//
	// name1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The keyword used to match the instance name.
	//
	// Valid values of N: 1 to 3.
	//
	// example:
	//
	// portalHost
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateGroupMonitoringAgentProcessRequestMatchExpress) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMonitoringAgentProcessRequestMatchExpress) GoString() string {
	return s.String()
}

func (s *CreateGroupMonitoringAgentProcessRequestMatchExpress) SetFunction(v string) *CreateGroupMonitoringAgentProcessRequestMatchExpress {
	s.Function = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestMatchExpress) SetName(v string) *CreateGroupMonitoringAgentProcessRequestMatchExpress {
	s.Name = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessRequestMatchExpress) SetValue(v string) *CreateGroupMonitoringAgentProcessRequestMatchExpress {
	s.Value = &v
	return s
}

type CreateGroupMonitoringAgentProcessResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the call is successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3F6150F9-45C7-43F9-9578-A58B2E726C90
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The group process information.
	Resource *CreateGroupMonitoringAgentProcessResponseBodyResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// Indicates whether the call is successful. Valid values:
	//
	// 	- true: The call is successful.
	//
	// 	- false: The call fails.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateGroupMonitoringAgentProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMonitoringAgentProcessResponseBody) GoString() string {
	return s.String()
}

func (s *CreateGroupMonitoringAgentProcessResponseBody) SetCode(v string) *CreateGroupMonitoringAgentProcessResponseBody {
	s.Code = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessResponseBody) SetMessage(v string) *CreateGroupMonitoringAgentProcessResponseBody {
	s.Message = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessResponseBody) SetRequestId(v string) *CreateGroupMonitoringAgentProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessResponseBody) SetResource(v *CreateGroupMonitoringAgentProcessResponseBodyResource) *CreateGroupMonitoringAgentProcessResponseBody {
	s.Resource = v
	return s
}

func (s *CreateGroupMonitoringAgentProcessResponseBody) SetSuccess(v bool) *CreateGroupMonitoringAgentProcessResponseBody {
	s.Success = &v
	return s
}

type CreateGroupMonitoringAgentProcessResponseBodyResource struct {
	// The ID of the group process.
	//
	// example:
	//
	// 7F2B0024-4F21-48B9-A764-211CEC48****
	GroupProcessId *string `json:"GroupProcessId,omitempty" xml:"GroupProcessId,omitempty"`
}

func (s CreateGroupMonitoringAgentProcessResponseBodyResource) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMonitoringAgentProcessResponseBodyResource) GoString() string {
	return s.String()
}

func (s *CreateGroupMonitoringAgentProcessResponseBodyResource) SetGroupProcessId(v string) *CreateGroupMonitoringAgentProcessResponseBodyResource {
	s.GroupProcessId = &v
	return s
}

type CreateGroupMonitoringAgentProcessResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateGroupMonitoringAgentProcessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateGroupMonitoringAgentProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGroupMonitoringAgentProcessResponse) GoString() string {
	return s.String()
}

func (s *CreateGroupMonitoringAgentProcessResponse) SetHeaders(v map[string]*string) *CreateGroupMonitoringAgentProcessResponse {
	s.Headers = v
	return s
}

func (s *CreateGroupMonitoringAgentProcessResponse) SetStatusCode(v int32) *CreateGroupMonitoringAgentProcessResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateGroupMonitoringAgentProcessResponse) SetBody(v *CreateGroupMonitoringAgentProcessResponseBody) *CreateGroupMonitoringAgentProcessResponse {
	s.Body = v
	return s
}

type CreateHostAvailabilityRequest struct {
	AlertConfig *CreateHostAvailabilityRequestAlertConfig `json:"AlertConfig,omitempty" xml:"AlertConfig,omitempty" type:"Struct"`
	TaskOption  *CreateHostAvailabilityRequestTaskOption  `json:"TaskOption,omitempty" xml:"TaskOption,omitempty" type:"Struct"`
	// None
	//
	// This parameter is required.
	AlertConfigEscalationList []*CreateHostAvailabilityRequestAlertConfigEscalationList `json:"AlertConfigEscalationList,omitempty" xml:"AlertConfigEscalationList,omitempty" type:"Repeated"`
	// The resources for which alerts are triggered.
	AlertConfigTargetList []*CreateHostAvailabilityRequestAlertConfigTargetList `json:"AlertConfigTargetList,omitempty" xml:"AlertConfigTargetList,omitempty" type:"Repeated"`
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ECS instances that are monitored. Valid values of N: 1 to 21.
	//
	// > This parameter must be specified when `TaskScope` is set to `GROUP_SPEC_INSTANCE`.
	//
	// example:
	//
	// i-absdfkwl321****
	InstanceList []*string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Repeated"`
	RegionId     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the availability monitoring task. The name must be 4 to 100 characters in length, and can contain letters, digits, and underscores (_).
	//
	// This parameter is required.
	//
	// example:
	//
	// task1
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The range of instances that are monitored by the availability monitoring task. Valid values:
	//
	// 	- GROUP: All Elastic Compute Service (ECS) instances in the application group are monitored.
	//
	// 	- GROUP_SPEC_INSTANCE: Specified ECS instances in the application group are monitored. The TaskScope parameter must be used in combination with the InstanceList.N parameter. The InstanceList.N parameter specifies the ECS instances to be monitored.
	//
	// example:
	//
	// GROUP
	TaskScope *string `json:"TaskScope,omitempty" xml:"TaskScope,omitempty"`
	// The monitoring type of the availability monitoring task. Valid values:
	//
	// 	- PING
	//
	// 	- TELNET
	//
	// 	- HTTP
	//
	// This parameter is required.
	//
	// example:
	//
	// HTTP
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s CreateHostAvailabilityRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAvailabilityRequest) GoString() string {
	return s.String()
}

func (s *CreateHostAvailabilityRequest) SetAlertConfig(v *CreateHostAvailabilityRequestAlertConfig) *CreateHostAvailabilityRequest {
	s.AlertConfig = v
	return s
}

func (s *CreateHostAvailabilityRequest) SetTaskOption(v *CreateHostAvailabilityRequestTaskOption) *CreateHostAvailabilityRequest {
	s.TaskOption = v
	return s
}

func (s *CreateHostAvailabilityRequest) SetAlertConfigEscalationList(v []*CreateHostAvailabilityRequestAlertConfigEscalationList) *CreateHostAvailabilityRequest {
	s.AlertConfigEscalationList = v
	return s
}

func (s *CreateHostAvailabilityRequest) SetAlertConfigTargetList(v []*CreateHostAvailabilityRequestAlertConfigTargetList) *CreateHostAvailabilityRequest {
	s.AlertConfigTargetList = v
	return s
}

func (s *CreateHostAvailabilityRequest) SetGroupId(v int64) *CreateHostAvailabilityRequest {
	s.GroupId = &v
	return s
}

func (s *CreateHostAvailabilityRequest) SetInstanceList(v []*string) *CreateHostAvailabilityRequest {
	s.InstanceList = v
	return s
}

func (s *CreateHostAvailabilityRequest) SetRegionId(v string) *CreateHostAvailabilityRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHostAvailabilityRequest) SetTaskName(v string) *CreateHostAvailabilityRequest {
	s.TaskName = &v
	return s
}

func (s *CreateHostAvailabilityRequest) SetTaskScope(v string) *CreateHostAvailabilityRequest {
	s.TaskScope = &v
	return s
}

func (s *CreateHostAvailabilityRequest) SetTaskType(v string) *CreateHostAvailabilityRequest {
	s.TaskType = &v
	return s
}

type CreateHostAvailabilityRequestAlertConfig struct {
	// The end of the time range during which the alert rule is effective. Valid values: 0 to 23.
	//
	// For example, if the `AlertConfig.StartTime` parameter is set to 0 and the `AlertConfig.EndTime` parameter is set to 22, the alert rule is effective from 00:00:00 to 22:00:00.
	//
	// > Alert notifications are sent based on the specified threshold only if the alert rule is effective.
	//
	// example:
	//
	// 22
	EndTime *int32 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The alert notification methods. Valid values:
	//
	// 0: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0
	NotifyType *int32 `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	// The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400. The default value indicates one day.
	//
	// example:
	//
	// 86400
	SilenceTime *int32 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The beginning of the time range during which the alert rule is effective. Valid values: 0 to 23.
	//
	// For example, if the `AlertConfig.StartTime` parameter is set to 0 and the `AlertConfig.EndTime` parameter is set to 22, the alert rule is effective from 00:00:00 to 22:00:00.
	//
	// > Alert notifications are sent based on the specified threshold only if the alert rule is effective.
	//
	// example:
	//
	// 0
	StartTime *int32 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// https://www.aliyun.com/webhook.json
	WebHook *string `json:"WebHook,omitempty" xml:"WebHook,omitempty"`
}

func (s CreateHostAvailabilityRequestAlertConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAvailabilityRequestAlertConfig) GoString() string {
	return s.String()
}

func (s *CreateHostAvailabilityRequestAlertConfig) SetEndTime(v int32) *CreateHostAvailabilityRequestAlertConfig {
	s.EndTime = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfig) SetNotifyType(v int32) *CreateHostAvailabilityRequestAlertConfig {
	s.NotifyType = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfig) SetSilenceTime(v int32) *CreateHostAvailabilityRequestAlertConfig {
	s.SilenceTime = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfig) SetStartTime(v int32) *CreateHostAvailabilityRequestAlertConfig {
	s.StartTime = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfig) SetWebHook(v string) *CreateHostAvailabilityRequestAlertConfig {
	s.WebHook = &v
	return s
}

type CreateHostAvailabilityRequestTaskOption struct {
	// The header of the HTTP request. Format: `Parameter name:Parameter value`. Separate multiple parameters with carriage return characters. Example:
	//
	//     params1:value1
	//
	//     params2:value2
	//
	// example:
	//
	// token:testTokenValue
	HttpHeader *string `json:"HttpHeader,omitempty" xml:"HttpHeader,omitempty"`
	// The HTTP request method. Valid values:
	//
	// 	- GET
	//
	// 	- POST
	//
	// 	- HEAD
	//
	// > This parameter must be specified when TaskType is set to HTTP.
	//
	// example:
	//
	// GET
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The method to trigger an alert. The alert can be triggered based on whether the specified alert rule is included in the response body. Valid values:
	//
	// 	- true: If the HTTP response body includes the alert rule, an alert is triggered.
	//
	// 	- false: If the HTTP response does not include the alert rule, an alert is triggered.
	//
	// > This parameter must be specified when TaskType is set to HTTP.
	//
	// example:
	//
	// true
	HttpNegative *bool `json:"HttpNegative,omitempty" xml:"HttpNegative,omitempty"`
	// The content of the HTTP POST request.
	//
	// example:
	//
	// params1=paramsValue1
	HttpPostContent *string `json:"HttpPostContent,omitempty" xml:"HttpPostContent,omitempty"`
	// The character set that is used in the HTTP response.
	//
	// > Only UTF-8 is supported.
	//
	// example:
	//
	// UTF-8
	HttpResponseCharset *string `json:"HttpResponseCharset,omitempty" xml:"HttpResponseCharset,omitempty"`
	// The response to the HTTP request.
	//
	// example:
	//
	// ok
	HttpResponseMatchContent *string `json:"HttpResponseMatchContent,omitempty" xml:"HttpResponseMatchContent,omitempty"`
	// The URI that you want to monitor. This parameter is required if the TaskType parameter is set to HTTP or Telnet.
	//
	// example:
	//
	// https://www.aliyun.com
	HttpURI *string `json:"HttpURI,omitempty" xml:"HttpURI,omitempty"`
	// The interval at which detection requests are sent. Unit: seconds. Valid values: 15, 30, 60, 120, 300, 900, 1800, and 3600.
	//
	// > This parameter is available only for the CloudMonitor agent V3.5.1 or later.
	//
	// example:
	//
	// 60
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The domain name or IP address that you want to monitor.
	//
	// >  This parameter is required if the TaskType parameter is set to PING.
	//
	// example:
	//
	// www.aliyun.com
	TelnetOrPingHost *string `json:"TelnetOrPingHost,omitempty" xml:"TelnetOrPingHost,omitempty"`
}

func (s CreateHostAvailabilityRequestTaskOption) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAvailabilityRequestTaskOption) GoString() string {
	return s.String()
}

func (s *CreateHostAvailabilityRequestTaskOption) SetHttpHeader(v string) *CreateHostAvailabilityRequestTaskOption {
	s.HttpHeader = &v
	return s
}

func (s *CreateHostAvailabilityRequestTaskOption) SetHttpMethod(v string) *CreateHostAvailabilityRequestTaskOption {
	s.HttpMethod = &v
	return s
}

func (s *CreateHostAvailabilityRequestTaskOption) SetHttpNegative(v bool) *CreateHostAvailabilityRequestTaskOption {
	s.HttpNegative = &v
	return s
}

func (s *CreateHostAvailabilityRequestTaskOption) SetHttpPostContent(v string) *CreateHostAvailabilityRequestTaskOption {
	s.HttpPostContent = &v
	return s
}

func (s *CreateHostAvailabilityRequestTaskOption) SetHttpResponseCharset(v string) *CreateHostAvailabilityRequestTaskOption {
	s.HttpResponseCharset = &v
	return s
}

func (s *CreateHostAvailabilityRequestTaskOption) SetHttpResponseMatchContent(v string) *CreateHostAvailabilityRequestTaskOption {
	s.HttpResponseMatchContent = &v
	return s
}

func (s *CreateHostAvailabilityRequestTaskOption) SetHttpURI(v string) *CreateHostAvailabilityRequestTaskOption {
	s.HttpURI = &v
	return s
}

func (s *CreateHostAvailabilityRequestTaskOption) SetInterval(v int32) *CreateHostAvailabilityRequestTaskOption {
	s.Interval = &v
	return s
}

func (s *CreateHostAvailabilityRequestTaskOption) SetTelnetOrPingHost(v string) *CreateHostAvailabilityRequestTaskOption {
	s.TelnetOrPingHost = &v
	return s
}

type CreateHostAvailabilityRequestAlertConfigEscalationList struct {
	// The method used to calculate the metric values that trigger alerts. Valid values of N: 1 to 21. Valid values:
	//
	// 	- HttpStatus: Value
	//
	// 	- HttpLatency: Average
	//
	// 	- TelnetStatus: Value
	//
	// 	- TelnetLatency: Average
	//
	// 	- PingLostRate: Average
	//
	// > The value Value indicates the original value and is used for metrics such as status codes. The value Average indicates the average value and is used for metrics such as the latency and packet loss rate.
	//
	// example:
	//
	// Value
	Aggregate *string `json:"Aggregate,omitempty" xml:"Aggregate,omitempty"`
	// The metric for which the alert feature is enabled. Valid values of N: 1 to 21. Valid values:
	//
	// 	- HttpStatus: HTTP status code
	//
	// 	- HttpLatency: HTTP response time
	//
	// 	- TelnetStatus: Telnet status code
	//
	// 	- TelnetLatency: Telnet response time
	//
	// 	- PingLostRate: Ping packet loss rate
	//
	// This parameter is required.
	//
	// example:
	//
	// HttpStatus
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The comparison operator that is used in the alert rule. Valid values of N: 1 to 21. Valid values:
	//
	// 	- `>`
	//
	// 	- `>=`
	//
	// 	- `<`
	//
	// 	- `<=`
	//
	// 	- `=`
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an alert is triggered. Valid values of N: 1 to 21.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
	// The alert threshold. Valid values of N: 1 to 21.
	//
	// example:
	//
	// 90
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateHostAvailabilityRequestAlertConfigEscalationList) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAvailabilityRequestAlertConfigEscalationList) GoString() string {
	return s.String()
}

func (s *CreateHostAvailabilityRequestAlertConfigEscalationList) SetAggregate(v string) *CreateHostAvailabilityRequestAlertConfigEscalationList {
	s.Aggregate = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfigEscalationList) SetMetricName(v string) *CreateHostAvailabilityRequestAlertConfigEscalationList {
	s.MetricName = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfigEscalationList) SetOperator(v string) *CreateHostAvailabilityRequestAlertConfigEscalationList {
	s.Operator = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfigEscalationList) SetTimes(v int32) *CreateHostAvailabilityRequestAlertConfigEscalationList {
	s.Times = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfigEscalationList) SetValue(v string) *CreateHostAvailabilityRequestAlertConfigEscalationList {
	s.Value = &v
	return s
}

type CreateHostAvailabilityRequestAlertConfigTargetList struct {
	// The Alibaba Cloud Resource Name (ARN) of the resource. Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:
	//
	// 	- {Service name abbreviation}: the abbreviation of the service name. Set the value to Simple Message Queue (formerly MNS) (SMQ).
	//
	// 	- {userId}: the ID of the Alibaba Cloud account.
	//
	// 	- {regionId}: the region ID of the SMQ queue or topic.
	//
	// 	- {Resource type}: the type of the resource for which alerts are triggered. Valid values:
	//
	//     	- **queues**
	//
	//     	- **topics**
	//
	// 	- {Resource name}: the resource name.
	//
	//     	- If the resource type is **queues**, the resource name is the queue name.
	//
	//     	- If the resource type is **topics**, the resource name is the topic name.
	//
	// example:
	//
	// acs:mns:cn-hangzhou:120886317861****:/queues/test/message
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the resource for which alerts are triggered.
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The parameters of the alert callback. The parameters are in the JSON format.
	//
	// example:
	//
	// {"customField1":"value1","customField2":"$.name"}
	JsonParams *string `json:"JsonParams,omitempty" xml:"JsonParams,omitempty"`
	// The alert level. Valid values:
	//
	// 	- INFO
	//
	// 	- WARN
	//
	// 	- CRITICAL
	//
	// example:
	//
	// ["INFO", "WARN", "CRITICAL"]
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s CreateHostAvailabilityRequestAlertConfigTargetList) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAvailabilityRequestAlertConfigTargetList) GoString() string {
	return s.String()
}

func (s *CreateHostAvailabilityRequestAlertConfigTargetList) SetArn(v string) *CreateHostAvailabilityRequestAlertConfigTargetList {
	s.Arn = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfigTargetList) SetId(v string) *CreateHostAvailabilityRequestAlertConfigTargetList {
	s.Id = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfigTargetList) SetJsonParams(v string) *CreateHostAvailabilityRequestAlertConfigTargetList {
	s.JsonParams = &v
	return s
}

func (s *CreateHostAvailabilityRequestAlertConfigTargetList) SetLevel(v string) *CreateHostAvailabilityRequestAlertConfigTargetList {
	s.Level = &v
	return s
}

type CreateHostAvailabilityResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// ACBDBB40-DFB6-4F4C-8957-51FFB233969C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the availability monitoring task.
	//
	// example:
	//
	// 12345
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateHostAvailabilityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAvailabilityResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHostAvailabilityResponseBody) SetCode(v string) *CreateHostAvailabilityResponseBody {
	s.Code = &v
	return s
}

func (s *CreateHostAvailabilityResponseBody) SetMessage(v string) *CreateHostAvailabilityResponseBody {
	s.Message = &v
	return s
}

func (s *CreateHostAvailabilityResponseBody) SetRequestId(v string) *CreateHostAvailabilityResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHostAvailabilityResponseBody) SetSuccess(v bool) *CreateHostAvailabilityResponseBody {
	s.Success = &v
	return s
}

func (s *CreateHostAvailabilityResponseBody) SetTaskId(v int64) *CreateHostAvailabilityResponseBody {
	s.TaskId = &v
	return s
}

type CreateHostAvailabilityResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHostAvailabilityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHostAvailabilityResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHostAvailabilityResponse) GoString() string {
	return s.String()
}

func (s *CreateHostAvailabilityResponse) SetHeaders(v map[string]*string) *CreateHostAvailabilityResponse {
	s.Headers = v
	return s
}

func (s *CreateHostAvailabilityResponse) SetStatusCode(v int32) *CreateHostAvailabilityResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHostAvailabilityResponse) SetBody(v *CreateHostAvailabilityResponseBody) *CreateHostAvailabilityResponse {
	s.Body = v
	return s
}

type CreateHybridMonitorNamespaceRequest struct {
	// The description of the namespace.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the namespace.
	//
	// The name can contain lowercase letters, digits, and hyphens (-).
	//
	// This parameter is required.
	//
	// example:
	//
	// aliyun
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The region where the metric data is stored.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceRegion *string `json:"NamespaceRegion,omitempty" xml:"NamespaceRegion,omitempty"`
	// The storage scheme of metric data. Valid values:
	//
	// 	- m_prom_user: The metric data is stored in Simple Log Service.
	//
	// 	- m_prom_pool: The metric data is stored in the private storage space provided by CloudMonitor.
	//
	// >  For more information about the storage schemes of metric data, see [Data storage schemes for Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/2594921.html).
	//
	// example:
	//
	// m_prometheus
	NamespaceType *string `json:"NamespaceType,omitempty" xml:"NamespaceType,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The data retention period. Valid values:
	//
	// 	- cms.s1.large (Retention Period 15 Days)
	//
	// 	- cms.s1.xlarge (Retention Period 32 Days)
	//
	// 	- cms.s1.2xlarge (Retention Period 63 Days)
	//
	// 	- cms.s1.3xlarge (Retention Period 93 Days) (default)
	//
	// 	- cms.s1.6xlarge (Retention Period 185 Days)
	//
	// 	- cms.s1.12xlarge (Retention Period 367 Days)
	//
	// For information about the pricing for different retention periods, see the **Pricing*	- section in [Billing of the dashboard feature](https://help.aliyun.com/document_detail/223532.html).
	//
	// example:
	//
	// cms.s1.3xlarge
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s CreateHybridMonitorNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorNamespaceRequest) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorNamespaceRequest) SetDescription(v string) *CreateHybridMonitorNamespaceRequest {
	s.Description = &v
	return s
}

func (s *CreateHybridMonitorNamespaceRequest) SetNamespace(v string) *CreateHybridMonitorNamespaceRequest {
	s.Namespace = &v
	return s
}

func (s *CreateHybridMonitorNamespaceRequest) SetNamespaceRegion(v string) *CreateHybridMonitorNamespaceRequest {
	s.NamespaceRegion = &v
	return s
}

func (s *CreateHybridMonitorNamespaceRequest) SetNamespaceType(v string) *CreateHybridMonitorNamespaceRequest {
	s.NamespaceType = &v
	return s
}

func (s *CreateHybridMonitorNamespaceRequest) SetRegionId(v string) *CreateHybridMonitorNamespaceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHybridMonitorNamespaceRequest) SetSpec(v string) *CreateHybridMonitorNamespaceRequest {
	s.Spec = &v
	return s
}

type CreateHybridMonitorNamespaceResponseBody struct {
	// The response code.
	//
	// example:
	//
	// Success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// Namespace.Existed
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3843D23A-FB9E-5DC8-BCCC-458768B79296
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateHybridMonitorNamespaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorNamespaceResponseBody) SetCode(v string) *CreateHybridMonitorNamespaceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateHybridMonitorNamespaceResponseBody) SetMessage(v string) *CreateHybridMonitorNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateHybridMonitorNamespaceResponseBody) SetRequestId(v string) *CreateHybridMonitorNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHybridMonitorNamespaceResponseBody) SetSuccess(v string) *CreateHybridMonitorNamespaceResponseBody {
	s.Success = &v
	return s
}

type CreateHybridMonitorNamespaceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHybridMonitorNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHybridMonitorNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorNamespaceResponse) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorNamespaceResponse) SetHeaders(v map[string]*string) *CreateHybridMonitorNamespaceResponse {
	s.Headers = v
	return s
}

func (s *CreateHybridMonitorNamespaceResponse) SetStatusCode(v int32) *CreateHybridMonitorNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHybridMonitorNamespaceResponse) SetBody(v *CreateHybridMonitorNamespaceResponseBody) *CreateHybridMonitorNamespaceResponse {
	s.Body = v
	return s
}

type CreateHybridMonitorSLSGroupRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The configurations of the Logstore group.
	//
	// Valid values of N: 1 to 25.
	//
	// This parameter is required.
	SLSGroupConfig []*CreateHybridMonitorSLSGroupRequestSLSGroupConfig `json:"SLSGroupConfig,omitempty" xml:"SLSGroupConfig,omitempty" type:"Repeated"`
	// The description of the Logstore group.
	SLSGroupDescription *string `json:"SLSGroupDescription,omitempty" xml:"SLSGroupDescription,omitempty"`
	// The name of the Logstore group.
	//
	// The name must be 2 to 32 characters in length and can contain uppercase letters, lowercase letters, digits, and underscores (_). The name must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// Logstore_test
	SLSGroupName *string `json:"SLSGroupName,omitempty" xml:"SLSGroupName,omitempty"`
}

func (s CreateHybridMonitorSLSGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorSLSGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorSLSGroupRequest) SetRegionId(v string) *CreateHybridMonitorSLSGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHybridMonitorSLSGroupRequest) SetSLSGroupConfig(v []*CreateHybridMonitorSLSGroupRequestSLSGroupConfig) *CreateHybridMonitorSLSGroupRequest {
	s.SLSGroupConfig = v
	return s
}

func (s *CreateHybridMonitorSLSGroupRequest) SetSLSGroupDescription(v string) *CreateHybridMonitorSLSGroupRequest {
	s.SLSGroupDescription = &v
	return s
}

func (s *CreateHybridMonitorSLSGroupRequest) SetSLSGroupName(v string) *CreateHybridMonitorSLSGroupRequest {
	s.SLSGroupName = &v
	return s
}

type CreateHybridMonitorSLSGroupRequestSLSGroupConfig struct {
	// The Logstore.
	//
	// Valid values of N: 1 to 25.
	//
	// This parameter is required.
	//
	// example:
	//
	// Logstore-ECS
	SLSLogstore *string `json:"SLSLogstore,omitempty" xml:"SLSLogstore,omitempty"`
	// The Simple Log Service project.
	//
	// Valid values of N: 1 to 25.
	//
	// This parameter is required.
	//
	// example:
	//
	// aliyun-project
	SLSProject *string `json:"SLSProject,omitempty" xml:"SLSProject,omitempty"`
	// The region ID.
	//
	// Valid values of N: 1 to 25.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	SLSRegion *string `json:"SLSRegion,omitempty" xml:"SLSRegion,omitempty"`
	// The member ID.
	//
	// Valid values of N: 1 to 25.
	//
	// If you call this operation by using the management account of a resource directory, you can connect the Alibaba Cloud services that are activated for all members in the resource directory to Hybrid Cloud Monitoring. You can use the resource directory to monitor Alibaba Cloud services across enterprise accounts.
	//
	// > If a member uses CloudMonitor for the first time, you must make sure that the service-linked role AliyunServiceRoleForCloudMonitor is attached to the member. For more information, see [Manage the service-linked role for CloudMonitor](https://help.aliyun.com/document_detail/170423.html).
	//
	// example:
	//
	// 120886317861****
	SLSUserId *string `json:"SLSUserId,omitempty" xml:"SLSUserId,omitempty"`
}

func (s CreateHybridMonitorSLSGroupRequestSLSGroupConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorSLSGroupRequestSLSGroupConfig) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorSLSGroupRequestSLSGroupConfig) SetSLSLogstore(v string) *CreateHybridMonitorSLSGroupRequestSLSGroupConfig {
	s.SLSLogstore = &v
	return s
}

func (s *CreateHybridMonitorSLSGroupRequestSLSGroupConfig) SetSLSProject(v string) *CreateHybridMonitorSLSGroupRequestSLSGroupConfig {
	s.SLSProject = &v
	return s
}

func (s *CreateHybridMonitorSLSGroupRequestSLSGroupConfig) SetSLSRegion(v string) *CreateHybridMonitorSLSGroupRequestSLSGroupConfig {
	s.SLSRegion = &v
	return s
}

func (s *CreateHybridMonitorSLSGroupRequestSLSGroupConfig) SetSLSUserId(v string) *CreateHybridMonitorSLSGroupRequestSLSGroupConfig {
	s.SLSUserId = &v
	return s
}

type CreateHybridMonitorSLSGroupResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// Duplicate.SLSGroup
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 66683237-7126-50F8-BBF8-D67ACC919A17
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateHybridMonitorSLSGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorSLSGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorSLSGroupResponseBody) SetCode(v string) *CreateHybridMonitorSLSGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateHybridMonitorSLSGroupResponseBody) SetMessage(v string) *CreateHybridMonitorSLSGroupResponseBody {
	s.Message = &v
	return s
}

func (s *CreateHybridMonitorSLSGroupResponseBody) SetRequestId(v string) *CreateHybridMonitorSLSGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHybridMonitorSLSGroupResponseBody) SetSuccess(v string) *CreateHybridMonitorSLSGroupResponseBody {
	s.Success = &v
	return s
}

type CreateHybridMonitorSLSGroupResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHybridMonitorSLSGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHybridMonitorSLSGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorSLSGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorSLSGroupResponse) SetHeaders(v map[string]*string) *CreateHybridMonitorSLSGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateHybridMonitorSLSGroupResponse) SetStatusCode(v int32) *CreateHybridMonitorSLSGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHybridMonitorSLSGroupResponse) SetBody(v *CreateHybridMonitorSLSGroupResponseBody) *CreateHybridMonitorSLSGroupResponse {
	s.Body = v
	return s
}

type CreateHybridMonitorTaskRequest struct {
	// The tags of the metric.
	//
	// >  This parameter is required only if the `TaskType` parameter is set to `aliyun_sls`.
	AttachLabels  []*CreateHybridMonitorTaskRequestAttachLabels `json:"AttachLabels,omitempty" xml:"AttachLabels,omitempty" type:"Repeated"`
	CloudAccessId []*string                                     `json:"CloudAccessId,omitempty" xml:"CloudAccessId,omitempty" type:"Repeated"`
	// The collection period of the metric. Valid values:
	//
	// 	- 15
	//
	// 	- 60 (default)
	//
	// Unit: seconds.
	//
	// >  This parameter is required only if the `TaskType` parameter is set to `aliyun_sls`.
	//
	// example:
	//
	// 60
	CollectInterval *string `json:"CollectInterval,omitempty" xml:"CollectInterval,omitempty"`
	// The type of the collection target.
	//
	// 	- If the `TaskType` parameter is set to `aliyun_fc`, enter `aliyun_fc`.
	//
	// 	- If the `TaskType` parameter is set to `aliyun_sls`, enter the name of the Logstore group.
	//
	// This parameter is required.
	//
	// example:
	//
	// aliyun_fc
	CollectTargetType *string `json:"CollectTargetType,omitempty" xml:"CollectTargetType,omitempty"`
	// The description of the metric import task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the application group.
	//
	// For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// >  This parameter is required only if the `TaskType` parameter is set to `aliyun_sls`.
	//
	// example:
	//
	// 3607****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the namespace.
	//
	// For information about how to obtain the name of a namespace, see [DescribeHybridMonitorNamespaceList](https://help.aliyun.com/document_detail/428880.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// aliyun
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The configurations of the logs that are imported from Simple Log Service.
	//
	// >  This parameter is required only if the `TaskType` parameter is set to `aliyun_sls`.
	SLSProcessConfig *CreateHybridMonitorTaskRequestSLSProcessConfig `json:"SLSProcessConfig,omitempty" xml:"SLSProcessConfig,omitempty" type:"Struct"`
	// The ID of the member account.
	//
	// If you call this operation by using the management account of a resource directory, you can connect the Alibaba Cloud services that are activated for all members in the resource directory to Hybrid Cloud Monitoring. You can use the resource directory to monitor Alibaba Cloud services across enterprise accounts.
	//
	// >  This parameter is required only if the `TaskType` parameter is set to `aliyun_fc`.
	//
	// example:
	//
	// 120886317861****
	TargetUserId *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty"`
	// The IDs of the member accounts. Separate multiple member account IDs with commas (,).
	//
	// >  This parameter is required only if you call this operation by using the management account.
	//
	// example:
	//
	// 120886317861****
	TargetUserIdList *string `json:"TargetUserIdList,omitempty" xml:"TargetUserIdList,omitempty"`
	// The name of the metric import task.
	//
	// 	- If the `TaskType` parameter is set to `aliyun_fc`, enter the name of the metric import task.
	//
	// 	- If the `TaskType` parameter is set to `aliyun_sls`, enter the name of the metric for logs imported from Simple Log Service.
	//
	// example:
	//
	// aliyun_task
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the metric import task. Valid values:
	//
	// 	- aliyun_fc: metric import tasks for Alibaba Cloud services.
	//
	// 	- aliyun_sls: metrics for logs imported from Simple Log Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// aliyun_fc
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.
	//
	// 	- namespace: the namespace of the Alibaba Cloud service. For information about how to query the namespace of an Alibaba Cloud service, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html).
	//
	// 	- metric_list: the metrics of the Alibaba Cloud service. For information about how to query the metrics of an Alibaba Cloud service, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html).
	//
	// The following code shows a sample configuration file:
	//
	//     products:
	//
	//     - namespace: acs_ecs_dashboard
	//
	//       metric_info:
	//
	//       - metric_list:
	//
	//         - cpu_total
	//
	//         - cpu_idle
	//
	//         - diskusage_utilization
	//
	//         - CPUUtilization
	//
	//         - DiskReadBPS
	//
	//         - InternetOut
	//
	//         - IntranetOut
	//
	//         - cpu_system
	//
	//     - namespace: acs_rds_dashboard
	//
	//       metric_info:
	//
	//       - metric_list:
	//
	//         - MySQL_QPS
	//
	//         - MySQL_TPS
	//
	// >  This parameter is required only if the `TaskType` parameter is set to `aliyun_fc`.
	//
	// example:
	//
	// products:- namespace: acs_ecs_dashboard  metric_info:  - metric_list:    - cpu_total
	YARMConfig *string `json:"YARMConfig,omitempty" xml:"YARMConfig,omitempty"`
}

func (s CreateHybridMonitorTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorTaskRequest) SetAttachLabels(v []*CreateHybridMonitorTaskRequestAttachLabels) *CreateHybridMonitorTaskRequest {
	s.AttachLabels = v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetCloudAccessId(v []*string) *CreateHybridMonitorTaskRequest {
	s.CloudAccessId = v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetCollectInterval(v string) *CreateHybridMonitorTaskRequest {
	s.CollectInterval = &v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetCollectTargetType(v string) *CreateHybridMonitorTaskRequest {
	s.CollectTargetType = &v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetDescription(v string) *CreateHybridMonitorTaskRequest {
	s.Description = &v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetGroupId(v string) *CreateHybridMonitorTaskRequest {
	s.GroupId = &v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetNamespace(v string) *CreateHybridMonitorTaskRequest {
	s.Namespace = &v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetRegionId(v string) *CreateHybridMonitorTaskRequest {
	s.RegionId = &v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetSLSProcessConfig(v *CreateHybridMonitorTaskRequestSLSProcessConfig) *CreateHybridMonitorTaskRequest {
	s.SLSProcessConfig = v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetTargetUserId(v string) *CreateHybridMonitorTaskRequest {
	s.TargetUserId = &v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetTargetUserIdList(v string) *CreateHybridMonitorTaskRequest {
	s.TargetUserIdList = &v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetTaskName(v string) *CreateHybridMonitorTaskRequest {
	s.TaskName = &v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetTaskType(v string) *CreateHybridMonitorTaskRequest {
	s.TaskType = &v
	return s
}

func (s *CreateHybridMonitorTaskRequest) SetYARMConfig(v string) *CreateHybridMonitorTaskRequest {
	s.YARMConfig = &v
	return s
}

type CreateHybridMonitorTaskRequestAttachLabels struct {
	// The tag key of the metric.
	//
	// example:
	//
	// app_service
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The tag value of the metric.
	//
	// example:
	//
	// testValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateHybridMonitorTaskRequestAttachLabels) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorTaskRequestAttachLabels) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorTaskRequestAttachLabels) SetName(v string) *CreateHybridMonitorTaskRequestAttachLabels {
	s.Name = &v
	return s
}

func (s *CreateHybridMonitorTaskRequestAttachLabels) SetValue(v string) *CreateHybridMonitorTaskRequestAttachLabels {
	s.Value = &v
	return s
}

type CreateHybridMonitorTaskRequestSLSProcessConfig struct {
	// The extended fields that specify the results of basic operations performed on aggregation results.
	Express []*CreateHybridMonitorTaskRequestSLSProcessConfigExpress `json:"Express,omitempty" xml:"Express,omitempty" type:"Repeated"`
	// The conditions that are used to filter logs imported from Simple Log Service.
	Filter *CreateHybridMonitorTaskRequestSLSProcessConfigFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Struct"`
	// The dimension based on which data is aggregated. This parameter is equivalent to the GROUP BY clause in SQL.
	GroupBy []*CreateHybridMonitorTaskRequestSLSProcessConfigGroupBy `json:"GroupBy,omitempty" xml:"GroupBy,omitempty" type:"Repeated"`
	// The method that is used to aggregate logs imported from Simple Log Service.
	Statistics []*CreateHybridMonitorTaskRequestSLSProcessConfigStatistics `json:"Statistics,omitempty" xml:"Statistics,omitempty" type:"Repeated"`
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfig) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfig) SetExpress(v []*CreateHybridMonitorTaskRequestSLSProcessConfigExpress) *CreateHybridMonitorTaskRequestSLSProcessConfig {
	s.Express = v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfig) SetFilter(v *CreateHybridMonitorTaskRequestSLSProcessConfigFilter) *CreateHybridMonitorTaskRequestSLSProcessConfig {
	s.Filter = v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfig) SetGroupBy(v []*CreateHybridMonitorTaskRequestSLSProcessConfigGroupBy) *CreateHybridMonitorTaskRequestSLSProcessConfig {
	s.GroupBy = v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfig) SetStatistics(v []*CreateHybridMonitorTaskRequestSLSProcessConfigStatistics) *CreateHybridMonitorTaskRequestSLSProcessConfig {
	s.Statistics = v
	return s
}

type CreateHybridMonitorTaskRequestSLSProcessConfigExpress struct {
	// The alias of the extended field that specifies the result of basic operations performed on aggregation results.
	//
	// example:
	//
	// SuccRate
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The extended field that specifies the result of basic operations performed on aggregation results.
	//
	// example:
	//
	// success_count
	Express *string `json:"Express,omitempty" xml:"Express,omitempty"`
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfigExpress) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfigExpress) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigExpress) SetAlias(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigExpress {
	s.Alias = &v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigExpress) SetExpress(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigExpress {
	s.Express = &v
	return s
}

type CreateHybridMonitorTaskRequestSLSProcessConfigFilter struct {
	// The conditions that are used to filter logs imported from Simple Log Service.
	Filters []*CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The relationship between multiple filter conditions. Valid values:
	//
	// 	- and (default): Logs are processed only if all filter conditions are met.
	//
	// 	- or: Logs are processed if one of the filter conditions is met.
	//
	// example:
	//
	// and
	Relation *string `json:"Relation,omitempty" xml:"Relation,omitempty"`
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfigFilter) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfigFilter) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigFilter) SetFilters(v []*CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters) *CreateHybridMonitorTaskRequestSLSProcessConfigFilter {
	s.Filters = v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigFilter) SetRelation(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigFilter {
	s.Relation = &v
	return s
}

type CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters struct {
	// The method that is used to filter logs imported from Simple Log Service. Valid values:
	//
	// 	- `contain`: contains
	//
	// 	- `notContain`: does not contain
	//
	// 	- `>`: greater than
	//
	// 	- `<`: less than
	//
	// 	- `=`: equal to
	//
	// 	- `! =`: not equal to
	//
	// 	- `>=`: greater than or equal to
	//
	// 	- `<=`: less than or equal to
	//
	// example:
	//
	// =
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The name of the key that is used to filter logs imported from Simple Log Service.
	//
	// example:
	//
	// code
	SLSKeyName *string `json:"SLSKeyName,omitempty" xml:"SLSKeyName,omitempty"`
	// The value of the key that is used to filter logs imported from Simple Log Service.
	//
	// example:
	//
	// 200
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters) SetOperator(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters {
	s.Operator = &v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters) SetSLSKeyName(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters {
	s.SLSKeyName = &v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters) SetValue(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigFilterFilters {
	s.Value = &v
	return s
}

type CreateHybridMonitorTaskRequestSLSProcessConfigGroupBy struct {
	// The alias of the aggregation result.
	//
	// example:
	//
	// ApiResult
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The name of the key that is used to aggregate logs imported from Simple Log Service.
	//
	// example:
	//
	// code
	SLSKeyName *string `json:"SLSKeyName,omitempty" xml:"SLSKeyName,omitempty"`
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfigGroupBy) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfigGroupBy) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigGroupBy) SetAlias(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigGroupBy {
	s.Alias = &v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigGroupBy) SetSLSKeyName(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigGroupBy {
	s.SLSKeyName = &v
	return s
}

type CreateHybridMonitorTaskRequestSLSProcessConfigStatistics struct {
	// The alias of the aggregation result.
	//
	// example:
	//
	// level_count
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The function that is used to aggregate the log data of a statistical period. Valid values:
	//
	// 	- count: counts the number.
	//
	// 	- sum: calculates the total value.
	//
	// 	- avg: calculates the average value.
	//
	// 	- max: calculates the maximum value.
	//
	// 	- min: calculates the minimum value.
	//
	// 	- value: collects samples within the statistical period.
	//
	// 	- countps: calculates the number of values of the specified field divided by the total number of seconds within a statistical period.
	//
	// 	- sumps: calculates the sum of the values of the specified field divided by the total number of seconds within a statistical period.
	//
	// 	- distinct: calculates the number of unique values of the specified field within a statistical period.
	//
	// 	- distribution: calculates the number of logs that meet a specified condition within the statistical period.
	//
	// 	- percentile: sorts the values of the specified field in ascending order, and then returns the value that is at the specified percentile within the statistical period. Example: P50.
	//
	// example:
	//
	// count
	Function *string `json:"Function,omitempty" xml:"Function,omitempty"`
	// The value of the function that is used to aggregate logs imported from Simple Log Service.
	//
	// 	- If the `Function` parameter is set to `distribution`, this parameter specifies the lower limit of the statistical interval. For example, if you want to calculate the number of HTTP requests whose status code is 2XX, set this parameter to 200.
	//
	// 	- If the `Function` parameter is set to `percentile`, this parameter specifies the percentile at which the expected value is. For example, 0.5 specifies P50.
	//
	// example:
	//
	// 200
	Parameter1 *string `json:"Parameter1,omitempty" xml:"Parameter1,omitempty"`
	// The value of the function that is used to aggregate logs imported from Simple Log Service.
	//
	// >  This parameter is required only if the `Function` parameter is set to `distribution`. This parameter specifies the upper limit of the statistical interval. For example, if you want to calculate the number of HTTP requests whose status code is 2XX, set this parameter to 299.
	//
	// example:
	//
	// 299
	Parameter2 *string `json:"Parameter2,omitempty" xml:"Parameter2,omitempty"`
	// The name of the key that is used to aggregate logs imported from Simple Log Service.
	//
	// example:
	//
	// name
	SLSKeyName *string `json:"SLSKeyName,omitempty" xml:"SLSKeyName,omitempty"`
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfigStatistics) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorTaskRequestSLSProcessConfigStatistics) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigStatistics) SetAlias(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigStatistics {
	s.Alias = &v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigStatistics) SetFunction(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigStatistics {
	s.Function = &v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigStatistics) SetParameter1(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigStatistics {
	s.Parameter1 = &v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigStatistics) SetParameter2(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigStatistics {
	s.Parameter2 = &v
	return s
}

func (s *CreateHybridMonitorTaskRequestSLSProcessConfigStatistics) SetSLSKeyName(v string) *CreateHybridMonitorTaskRequestSLSProcessConfigStatistics {
	s.SLSKeyName = &v
	return s
}

type CreateHybridMonitorTaskResponseBody struct {
	// The response code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// yamlConfigFail
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 28CEA2E0-3E90-51B2-A7E8-B1ED75534E49
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The ID of the monitoring task.
	//
	// example:
	//
	// 36****
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s CreateHybridMonitorTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorTaskResponseBody) SetCode(v string) *CreateHybridMonitorTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateHybridMonitorTaskResponseBody) SetMessage(v string) *CreateHybridMonitorTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateHybridMonitorTaskResponseBody) SetRequestId(v string) *CreateHybridMonitorTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateHybridMonitorTaskResponseBody) SetSuccess(v string) *CreateHybridMonitorTaskResponseBody {
	s.Success = &v
	return s
}

func (s *CreateHybridMonitorTaskResponseBody) SetTaskId(v int64) *CreateHybridMonitorTaskResponseBody {
	s.TaskId = &v
	return s
}

type CreateHybridMonitorTaskResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHybridMonitorTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHybridMonitorTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHybridMonitorTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateHybridMonitorTaskResponse) SetHeaders(v map[string]*string) *CreateHybridMonitorTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateHybridMonitorTaskResponse) SetStatusCode(v int32) *CreateHybridMonitorTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHybridMonitorTaskResponse) SetBody(v *CreateHybridMonitorTaskResponseBody) *CreateHybridMonitorTaskResponse {
	s.Body = v
	return s
}

type CreateInstantSiteMonitorRequest struct {
	// The URL or IP address that you want to test.
	//
	// This parameter is required.
	//
	// example:
	//
	// http://www.aliyun.com
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// The detection points. If you leave this parameter empty, the system randomly selects three detection points.
	//
	// The value is a `JSON array`. Example: {"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}. The values of the city field indicate Beijing, Hangzhou, and Qingdao.
	//
	// For information about how to obtain detection points, see [DescribeSiteMonitorISPCityList](https://help.aliyun.com/document_detail/115045.html).
	//
	// > You must specify one of the `IspCities` and `RandomIspCity` parameters.
	//
	// example:
	//
	// [{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]
	IspCities *string `json:"IspCities,omitempty" xml:"IspCities,omitempty"`
	// The extended options of the protocol that is used by the instant test task. The options vary based on the protocol.
	//
	// example:
	//
	// {"time_out":5000}
	OptionsJson *string `json:"OptionsJson,omitempty" xml:"OptionsJson,omitempty"`
	// The number of detection points.
	//
	// >
	//
	// 	- You must specify one of the `IspCities` and `RandomIspCity` parameters. If you specify the `RandomIspCity` parameter, the `IspCities` parameter automatically becomes invalid.
	//
	// example:
	//
	// 1
	RandomIspCity *int32  `json:"RandomIspCity,omitempty" xml:"RandomIspCity,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the instant test task.
	//
	// The name must be 4 to 100 characters in length, and can contain letters, digits, and underscores (_).
	//
	// This parameter is required.
	//
	// example:
	//
	// task1
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the instant test task. Valid values: HTTP, PING, TCP, UDP, and DNS.
	//
	// This parameter is required.
	//
	// example:
	//
	// HTTP
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s CreateInstantSiteMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstantSiteMonitorRequest) GoString() string {
	return s.String()
}

func (s *CreateInstantSiteMonitorRequest) SetAddress(v string) *CreateInstantSiteMonitorRequest {
	s.Address = &v
	return s
}

func (s *CreateInstantSiteMonitorRequest) SetIspCities(v string) *CreateInstantSiteMonitorRequest {
	s.IspCities = &v
	return s
}

func (s *CreateInstantSiteMonitorRequest) SetOptionsJson(v string) *CreateInstantSiteMonitorRequest {
	s.OptionsJson = &v
	return s
}

func (s *CreateInstantSiteMonitorRequest) SetRandomIspCity(v int32) *CreateInstantSiteMonitorRequest {
	s.RandomIspCity = &v
	return s
}

func (s *CreateInstantSiteMonitorRequest) SetRegionId(v string) *CreateInstantSiteMonitorRequest {
	s.RegionId = &v
	return s
}

func (s *CreateInstantSiteMonitorRequest) SetTaskName(v string) *CreateInstantSiteMonitorRequest {
	s.TaskName = &v
	return s
}

func (s *CreateInstantSiteMonitorRequest) SetTaskType(v string) *CreateInstantSiteMonitorRequest {
	s.TaskType = &v
	return s
}

type CreateInstantSiteMonitorResponseBody struct {
	// The error code.
	//
	// > The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The results for creating the instant test task.
	CreateResultList []*CreateInstantSiteMonitorResponseBodyCreateResultList `json:"CreateResultList,omitempty" xml:"CreateResultList,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 68192f5d-0d45-4b98-9724-892813f86c71
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateInstantSiteMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstantSiteMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstantSiteMonitorResponseBody) SetCode(v string) *CreateInstantSiteMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *CreateInstantSiteMonitorResponseBody) SetCreateResultList(v []*CreateInstantSiteMonitorResponseBodyCreateResultList) *CreateInstantSiteMonitorResponseBody {
	s.CreateResultList = v
	return s
}

func (s *CreateInstantSiteMonitorResponseBody) SetMessage(v string) *CreateInstantSiteMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *CreateInstantSiteMonitorResponseBody) SetRequestId(v string) *CreateInstantSiteMonitorResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInstantSiteMonitorResponseBody) SetSuccess(v string) *CreateInstantSiteMonitorResponseBody {
	s.Success = &v
	return s
}

type CreateInstantSiteMonitorResponseBodyCreateResultList struct {
	// The ID of the instant test task.
	//
	// example:
	//
	// 2c8dbdf9-a3ab-46a1-85a4-f094965e****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the instant test task.
	//
	// example:
	//
	// task1
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s CreateInstantSiteMonitorResponseBodyCreateResultList) String() string {
	return tea.Prettify(s)
}

func (s CreateInstantSiteMonitorResponseBodyCreateResultList) GoString() string {
	return s.String()
}

func (s *CreateInstantSiteMonitorResponseBodyCreateResultList) SetTaskId(v string) *CreateInstantSiteMonitorResponseBodyCreateResultList {
	s.TaskId = &v
	return s
}

func (s *CreateInstantSiteMonitorResponseBodyCreateResultList) SetTaskName(v string) *CreateInstantSiteMonitorResponseBodyCreateResultList {
	s.TaskName = &v
	return s
}

type CreateInstantSiteMonitorResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateInstantSiteMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateInstantSiteMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstantSiteMonitorResponse) GoString() string {
	return s.String()
}

func (s *CreateInstantSiteMonitorResponse) SetHeaders(v map[string]*string) *CreateInstantSiteMonitorResponse {
	s.Headers = v
	return s
}

func (s *CreateInstantSiteMonitorResponse) SetStatusCode(v int32) *CreateInstantSiteMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstantSiteMonitorResponse) SetBody(v *CreateInstantSiteMonitorResponseBody) *CreateInstantSiteMonitorResponse {
	s.Body = v
	return s
}

type CreateMetricRuleBlackListRequest struct {
	// The category of the cloud service. For example, ApsaraDB for Redis includes the following categories: ApsaraDB for Redis (standard architecture), ApsaraDB for Redis (cluster architecture), and ApsaraDB for Redis (read/write splitting architecture). In this case, the valid values of this parameter for ApsaraDB for Redis include `kvstore_standard`, `kvstore_sharding`, and `kvstore_splitrw`.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The time range within which the blacklist policy is effective.
	//
	// 	- If you do not configure this parameter, the blacklist policy is permanently effective.
	//
	// 	- If you configure this parameter, the blacklist policy is effective only within the specified time range. Examples:
	//
	//     	- `03:00-04:59`: The blacklist policy is effective from 03:00 to 05:00 local time. 05:00 local time is excluded.
	//
	//     	- `03:00-04:59 UTC+0700`: The blacklist policy is effective from 03:00 to 05:00 (UTC+7). 05:00 (UTC+7) is excluded.
	//
	// example:
	//
	// 03:00-04:59
	EffectiveTime *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	// The timestamp when the blacklist policy expires.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1640608200000
	EnableEndTime *string `json:"EnableEndTime,omitempty" xml:"EnableEndTime,omitempty"`
	// The timestamp when the blacklist policy starts to take effect.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1640237400000
	EnableStartTime *string `json:"EnableStartTime,omitempty" xml:"EnableStartTime,omitempty"`
	// The IDs of the instances that belong to the specified cloud service.
	//
	// This parameter is required.
	Instances []*string `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// The metrics of the instance.
	//
	// 	- If you do not configure this parameter, the blacklist policy applies to all metrics of the specified cloud service.
	//
	// 	- If you configure this parameter, the blacklist policy applies only to the current metric.
	Metrics []*CreateMetricRuleBlackListRequestMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	// The name of the blacklist policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// Blacklist-01
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of different cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The effective scope of the blacklist policy. Valid values:
	//
	// 	- USER (default): The blacklist policy takes effect only for the current Alibaba Cloud account.
	//
	// 	- GROUP: The blacklist policy takes effect only for the specified application group. For information about how to query the IDs of application groups, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// example:
	//
	// USER
	ScopeType *string `json:"ScopeType,omitempty" xml:"ScopeType,omitempty"`
	// The ID of the application group. The value of this parameter is a JSON array.
	//
	// > This parameter must be specified when `ScopeType` is set to `GROUP`.
	//
	// example:
	//
	// ["67****","78****"]
	ScopeValue *string `json:"ScopeValue,omitempty" xml:"ScopeValue,omitempty"`
}

func (s CreateMetricRuleBlackListRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleBlackListRequest) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleBlackListRequest) SetCategory(v string) *CreateMetricRuleBlackListRequest {
	s.Category = &v
	return s
}

func (s *CreateMetricRuleBlackListRequest) SetEffectiveTime(v string) *CreateMetricRuleBlackListRequest {
	s.EffectiveTime = &v
	return s
}

func (s *CreateMetricRuleBlackListRequest) SetEnableEndTime(v string) *CreateMetricRuleBlackListRequest {
	s.EnableEndTime = &v
	return s
}

func (s *CreateMetricRuleBlackListRequest) SetEnableStartTime(v string) *CreateMetricRuleBlackListRequest {
	s.EnableStartTime = &v
	return s
}

func (s *CreateMetricRuleBlackListRequest) SetInstances(v []*string) *CreateMetricRuleBlackListRequest {
	s.Instances = v
	return s
}

func (s *CreateMetricRuleBlackListRequest) SetMetrics(v []*CreateMetricRuleBlackListRequestMetrics) *CreateMetricRuleBlackListRequest {
	s.Metrics = v
	return s
}

func (s *CreateMetricRuleBlackListRequest) SetName(v string) *CreateMetricRuleBlackListRequest {
	s.Name = &v
	return s
}

func (s *CreateMetricRuleBlackListRequest) SetNamespace(v string) *CreateMetricRuleBlackListRequest {
	s.Namespace = &v
	return s
}

func (s *CreateMetricRuleBlackListRequest) SetRegionId(v string) *CreateMetricRuleBlackListRequest {
	s.RegionId = &v
	return s
}

func (s *CreateMetricRuleBlackListRequest) SetScopeType(v string) *CreateMetricRuleBlackListRequest {
	s.ScopeType = &v
	return s
}

func (s *CreateMetricRuleBlackListRequest) SetScopeValue(v string) *CreateMetricRuleBlackListRequest {
	s.ScopeValue = &v
	return s
}

type CreateMetricRuleBlackListRequestMetrics struct {
	// The metric name.
	//
	// Valid values of N: 1 to 10.
	//
	// This parameter is required.
	//
	// example:
	//
	// disk_utilization
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The extended dimension of the instance. For example, `{"device":"C:"}` specifies that the blacklist policy is applied to all C disks of the specified Elastic Compute Service (ECS) instance.
	//
	// Valid values of N: 1 to 10.
	//
	// example:
	//
	// {"device":"C:"}
	Resource *string `json:"Resource,omitempty" xml:"Resource,omitempty"`
}

func (s CreateMetricRuleBlackListRequestMetrics) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleBlackListRequestMetrics) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleBlackListRequestMetrics) SetMetricName(v string) *CreateMetricRuleBlackListRequestMetrics {
	s.MetricName = &v
	return s
}

func (s *CreateMetricRuleBlackListRequestMetrics) SetResource(v string) *CreateMetricRuleBlackListRequestMetrics {
	s.Resource = &v
	return s
}

type CreateMetricRuleBlackListResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the blacklist policy.
	//
	// example:
	//
	// 93514c96-ceb8-47d8-8ee3-93b6d98b****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The error message.
	//
	// example:
	//
	// The request has failed due to a temporary failure of the server.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 5C637FA3-3959-3352-8BE6-78CE2ED2D33D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMetricRuleBlackListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleBlackListResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleBlackListResponseBody) SetCode(v string) *CreateMetricRuleBlackListResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMetricRuleBlackListResponseBody) SetId(v string) *CreateMetricRuleBlackListResponseBody {
	s.Id = &v
	return s
}

func (s *CreateMetricRuleBlackListResponseBody) SetMessage(v string) *CreateMetricRuleBlackListResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMetricRuleBlackListResponseBody) SetRequestId(v string) *CreateMetricRuleBlackListResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMetricRuleBlackListResponseBody) SetSuccess(v bool) *CreateMetricRuleBlackListResponseBody {
	s.Success = &v
	return s
}

type CreateMetricRuleBlackListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMetricRuleBlackListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMetricRuleBlackListResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleBlackListResponse) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleBlackListResponse) SetHeaders(v map[string]*string) *CreateMetricRuleBlackListResponse {
	s.Headers = v
	return s
}

func (s *CreateMetricRuleBlackListResponse) SetStatusCode(v int32) *CreateMetricRuleBlackListResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMetricRuleBlackListResponse) SetBody(v *CreateMetricRuleBlackListResponseBody) *CreateMetricRuleBlackListResponse {
	s.Body = v
	return s
}

type CreateMetricRuleResourcesRequest struct {
	// Specifies whether to overwrite existing resources. Valid values:
	//
	// 	- true: The resources submitted this time overwrite the previously associated resources.
	//
	// 	- false: The resources submitted this time do not overwrite the previously associated resources. The associated resources after submission include the previously associated resources and the resources submitted this time.
	//
	// example:
	//
	// false
	Overwrite *string `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	// The resources that are associated with the alert rule. Set the value to a JSON array.
	//
	// >  You can add up to 100 resources each time. An alert rule can be associated with up to 3,000 resources.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{"instanceId":"i-a2d5q7pm3f9yr29e****"}]
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// i-2ze3w55tr2rcpejpcfap_59c96b85-0339-4f35-ba66-ae4e34d3****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s CreateMetricRuleResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleResourcesRequest) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleResourcesRequest) SetOverwrite(v string) *CreateMetricRuleResourcesRequest {
	s.Overwrite = &v
	return s
}

func (s *CreateMetricRuleResourcesRequest) SetResources(v string) *CreateMetricRuleResourcesRequest {
	s.Resources = &v
	return s
}

func (s *CreateMetricRuleResourcesRequest) SetRuleId(v string) *CreateMetricRuleResourcesRequest {
	s.RuleId = &v
	return s
}

type CreateMetricRuleResourcesResponseBody struct {
	// The response code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0671A721-0D7A-4F11-BB77-2416325D65AB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true: The request was successful. false: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMetricRuleResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleResourcesResponseBody) SetCode(v string) *CreateMetricRuleResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMetricRuleResourcesResponseBody) SetMessage(v string) *CreateMetricRuleResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMetricRuleResourcesResponseBody) SetRequestId(v string) *CreateMetricRuleResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMetricRuleResourcesResponseBody) SetSuccess(v bool) *CreateMetricRuleResourcesResponseBody {
	s.Success = &v
	return s
}

type CreateMetricRuleResourcesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMetricRuleResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMetricRuleResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleResourcesResponse) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleResourcesResponse) SetHeaders(v map[string]*string) *CreateMetricRuleResourcesResponse {
	s.Headers = v
	return s
}

func (s *CreateMetricRuleResourcesResponse) SetStatusCode(v int32) *CreateMetricRuleResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMetricRuleResourcesResponse) SetBody(v *CreateMetricRuleResourcesResponseBody) *CreateMetricRuleResourcesResponse {
	s.Body = v
	return s
}

type CreateMetricRuleTemplateRequest struct {
	AlertTemplates []*CreateMetricRuleTemplateRequestAlertTemplates `json:"AlertTemplates,omitempty" xml:"AlertTemplates,omitempty" type:"Repeated"`
	// The description of the alert template.
	//
	// example:
	//
	// ECS_Template1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the alert template.
	//
	// This parameter is required.
	//
	// example:
	//
	// Template1
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateMetricRuleTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleTemplateRequest) SetAlertTemplates(v []*CreateMetricRuleTemplateRequestAlertTemplates) *CreateMetricRuleTemplateRequest {
	s.AlertTemplates = v
	return s
}

func (s *CreateMetricRuleTemplateRequest) SetDescription(v string) *CreateMetricRuleTemplateRequest {
	s.Description = &v
	return s
}

func (s *CreateMetricRuleTemplateRequest) SetName(v string) *CreateMetricRuleTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateMetricRuleTemplateRequest) SetRegionId(v string) *CreateMetricRuleTemplateRequest {
	s.RegionId = &v
	return s
}

type CreateMetricRuleTemplateRequestAlertTemplates struct {
	Escalations *CreateMetricRuleTemplateRequestAlertTemplatesEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Struct"`
	// The abbreviation of the Alibaba Cloud service name.
	//
	// To obtain the abbreviation of an Alibaba Cloud service name, call the [DescribeProjectMeta](https://help.aliyun.com/document_detail/114916.html) operation. The `metricCategory` tag in the `Labels` response parameter indicates the abbreviation of the Alibaba Cloud service name.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The name of the metric. Valid values of N: 1 to 200.
	//
	// >  For more information, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/28619.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service. Valid values of N: 1 to 200.
	//
	// >  For more information, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/28619.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The aggregation period of monitoring data. Unit: seconds.
	//
	// The default value is the minimum aggregation period. Generally, you do not need to specify the minimum aggregation period.
	//
	// Valid values of N: 1 to 200.
	//
	// example:
	//
	// 60
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The name of the alert rule. Valid values of N: 1 to 200.
	//
	// This parameter is required.
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The extended field selectors. Valid values of N: 1 to 200.
	//
	// example:
	//
	// {"disk":"/"}
	Selector *string `json:"Selector,omitempty" xml:"Selector,omitempty"`
	// The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.
	//
	// example:
	//
	// http://ww.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s CreateMetricRuleTemplateRequestAlertTemplates) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleTemplateRequestAlertTemplates) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleTemplateRequestAlertTemplates) SetEscalations(v *CreateMetricRuleTemplateRequestAlertTemplatesEscalations) *CreateMetricRuleTemplateRequestAlertTemplates {
	s.Escalations = v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplates) SetCategory(v string) *CreateMetricRuleTemplateRequestAlertTemplates {
	s.Category = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplates) SetMetricName(v string) *CreateMetricRuleTemplateRequestAlertTemplates {
	s.MetricName = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplates) SetNamespace(v string) *CreateMetricRuleTemplateRequestAlertTemplates {
	s.Namespace = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplates) SetPeriod(v int32) *CreateMetricRuleTemplateRequestAlertTemplates {
	s.Period = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplates) SetRuleName(v string) *CreateMetricRuleTemplateRequestAlertTemplates {
	s.RuleName = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplates) SetSelector(v string) *CreateMetricRuleTemplateRequestAlertTemplates {
	s.Selector = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplates) SetWebhook(v string) *CreateMetricRuleTemplateRequestAlertTemplates {
	s.Webhook = &v
	return s
}

type CreateMetricRuleTemplateRequestAlertTemplatesEscalations struct {
	Critical *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	Info     *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo     `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	Warn     *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn     `json:"Warn,omitempty" xml:"Warn,omitempty" type:"Struct"`
}

func (s CreateMetricRuleTemplateRequestAlertTemplatesEscalations) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleTemplateRequestAlertTemplatesEscalations) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalations) SetCritical(v *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) *CreateMetricRuleTemplateRequestAlertTemplatesEscalations {
	s.Critical = v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalations) SetInfo(v *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) *CreateMetricRuleTemplateRequestAlertTemplatesEscalations {
	s.Info = v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalations) SetWarn(v *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) *CreateMetricRuleTemplateRequestAlertTemplatesEscalations {
	s.Warn = v
	return s
}

type CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *int32  `json:"N,omitempty" xml:"N,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) SetComparisonOperator(v string) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical {
	s.ComparisonOperator = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) SetN(v int32) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical {
	s.N = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) SetStatistics(v string) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical {
	s.Statistics = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) SetThreshold(v string) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical {
	s.Threshold = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) SetTimes(v int32) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsCritical {
	s.Times = &v
	return s
}

type CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *int32  `json:"N,omitempty" xml:"N,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) SetComparisonOperator(v string) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo {
	s.ComparisonOperator = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) SetN(v int32) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo {
	s.N = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) SetStatistics(v string) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo {
	s.Statistics = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) SetThreshold(v string) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo {
	s.Threshold = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) SetTimes(v int32) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsInfo {
	s.Times = &v
	return s
}

type CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *int32  `json:"N,omitempty" xml:"N,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) SetComparisonOperator(v string) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn {
	s.ComparisonOperator = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) SetN(v int32) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn {
	s.N = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) SetStatistics(v string) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn {
	s.Statistics = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) SetThreshold(v string) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn {
	s.Threshold = &v
	return s
}

func (s *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) SetTimes(v int32) *CreateMetricRuleTemplateRequestAlertTemplatesEscalationsWarn {
	s.Times = &v
	return s
}

type CreateMetricRuleTemplateResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the alert template.
	//
	// example:
	//
	// 12345
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 9763ED1A-4D09-41BF-851E-310421750204
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMetricRuleTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleTemplateResponseBody) SetCode(v int32) *CreateMetricRuleTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMetricRuleTemplateResponseBody) SetId(v int64) *CreateMetricRuleTemplateResponseBody {
	s.Id = &v
	return s
}

func (s *CreateMetricRuleTemplateResponseBody) SetMessage(v string) *CreateMetricRuleTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMetricRuleTemplateResponseBody) SetRequestId(v string) *CreateMetricRuleTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMetricRuleTemplateResponseBody) SetSuccess(v bool) *CreateMetricRuleTemplateResponseBody {
	s.Success = &v
	return s
}

type CreateMetricRuleTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMetricRuleTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMetricRuleTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMetricRuleTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateMetricRuleTemplateResponse) SetHeaders(v map[string]*string) *CreateMetricRuleTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateMetricRuleTemplateResponse) SetStatusCode(v int32) *CreateMetricRuleTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMetricRuleTemplateResponse) SetBody(v *CreateMetricRuleTemplateResponseBody) *CreateMetricRuleTemplateResponse {
	s.Body = v
	return s
}

type CreateMonitorAgentProcessRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-2ze2d6j5uhg20x47****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the process.
	//
	// This parameter is required.
	//
	// example:
	//
	// AliYunDun
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	// The user who launches the process.
	//
	// example:
	//
	// admin
	ProcessUser *string `json:"ProcessUser,omitempty" xml:"ProcessUser,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateMonitorAgentProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorAgentProcessRequest) GoString() string {
	return s.String()
}

func (s *CreateMonitorAgentProcessRequest) SetInstanceId(v string) *CreateMonitorAgentProcessRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateMonitorAgentProcessRequest) SetProcessName(v string) *CreateMonitorAgentProcessRequest {
	s.ProcessName = &v
	return s
}

func (s *CreateMonitorAgentProcessRequest) SetProcessUser(v string) *CreateMonitorAgentProcessRequest {
	s.ProcessUser = &v
	return s
}

func (s *CreateMonitorAgentProcessRequest) SetRegionId(v string) *CreateMonitorAgentProcessRequest {
	s.RegionId = &v
	return s
}

type CreateMonitorAgentProcessResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the process.
	//
	// example:
	//
	// 123456
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The error message.
	//
	// example:
	//
	// User not authorized to operate on the specified resource.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 971CC023-5A96-452A-BB7C-2483F948BCFD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMonitorAgentProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorAgentProcessResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMonitorAgentProcessResponseBody) SetCode(v string) *CreateMonitorAgentProcessResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMonitorAgentProcessResponseBody) SetId(v int64) *CreateMonitorAgentProcessResponseBody {
	s.Id = &v
	return s
}

func (s *CreateMonitorAgentProcessResponseBody) SetMessage(v string) *CreateMonitorAgentProcessResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMonitorAgentProcessResponseBody) SetRequestId(v string) *CreateMonitorAgentProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMonitorAgentProcessResponseBody) SetSuccess(v bool) *CreateMonitorAgentProcessResponseBody {
	s.Success = &v
	return s
}

type CreateMonitorAgentProcessResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMonitorAgentProcessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMonitorAgentProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorAgentProcessResponse) GoString() string {
	return s.String()
}

func (s *CreateMonitorAgentProcessResponse) SetHeaders(v map[string]*string) *CreateMonitorAgentProcessResponse {
	s.Headers = v
	return s
}

func (s *CreateMonitorAgentProcessResponse) SetStatusCode(v int32) *CreateMonitorAgentProcessResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMonitorAgentProcessResponse) SetBody(v *CreateMonitorAgentProcessResponseBody) *CreateMonitorAgentProcessResponse {
	s.Body = v
	return s
}

type CreateMonitorGroupRequest struct {
	// The alert contact group. The alert notifications of the application group are sent to the alert contacts that belong to the alert contact group.
	//
	// >  An alert contact group can contain one or more alert contacts. For information about how to create alert contacts and alert contact groups, see [PutContact](~~PutContact~~) and [PutContactGroup](~~PutContactGroup~~).
	//
	// example:
	//
	// ECS_Alert_Group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The name of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS_Group
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateMonitorGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupRequest) SetContactGroups(v string) *CreateMonitorGroupRequest {
	s.ContactGroups = &v
	return s
}

func (s *CreateMonitorGroupRequest) SetGroupName(v string) *CreateMonitorGroupRequest {
	s.GroupName = &v
	return s
}

func (s *CreateMonitorGroupRequest) SetRegionId(v string) *CreateMonitorGroupRequest {
	s.RegionId = &v
	return s
}

type CreateMonitorGroupResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 1234567
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 83C89BA6-ABD4-4398-A175-83E86C47A001
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMonitorGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupResponseBody) SetCode(v int32) *CreateMonitorGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMonitorGroupResponseBody) SetGroupId(v int64) *CreateMonitorGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *CreateMonitorGroupResponseBody) SetMessage(v string) *CreateMonitorGroupResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMonitorGroupResponseBody) SetRequestId(v string) *CreateMonitorGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMonitorGroupResponseBody) SetSuccess(v bool) *CreateMonitorGroupResponseBody {
	s.Success = &v
	return s
}

type CreateMonitorGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMonitorGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMonitorGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupResponse) SetHeaders(v map[string]*string) *CreateMonitorGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateMonitorGroupResponse) SetStatusCode(v int32) *CreateMonitorGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMonitorGroupResponse) SetBody(v *CreateMonitorGroupResponseBody) *CreateMonitorGroupResponse {
	s.Body = v
	return s
}

type CreateMonitorGroupByResourceGroupIdRequest struct {
	// The alert contact groups. The alert notifications of the application group are sent to the alert contacts that belong to the specified alert contact groups.
	//
	// An alert contact group can contain one or more alert contacts. For information about how to create alert contacts and alert contact groups, see [PutContact](https://help.aliyun.com/document_detail/114923.html) and [PutContactGroup](https://help.aliyun.com/document_detail/114929.html). For information about how to obtain alert contact groups, see [DescribeContactGroupList](https://help.aliyun.com/document_detail/114922.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS_Group
	ContactGroupList []*string `json:"ContactGroupList,omitempty" xml:"ContactGroupList,omitempty" type:"Repeated"`
	// Specifies whether the CloudMonitor agent is automatically installed for the application group. CloudMonitor determines whether to automatically install the CloudMonitor agent for the hosts in an application group based on the value of this parameter. Valid values:
	//
	// 	- true: The CloudMonitor agent is automatically installed.
	//
	// 	- false (default): The CloudMonitor agent is not automatically installed.
	//
	// example:
	//
	// true
	EnableInstallAgent *bool `json:"EnableInstallAgent,omitempty" xml:"EnableInstallAgent,omitempty"`
	// Specifies whether the application group automatically subscribes to event notifications. If events whose severity level is critical or warning occur on resources in an application group, CloudMonitor sends alert notifications. Valid values:
	//
	// 	- true: The application group automatically subscribes to event notifications.
	//
	// 	- false (default): The application group does not automatically subscribe to event notifications.
	//
	// example:
	//
	// true
	EnableSubscribeEvent *bool `json:"EnableSubscribeEvent,omitempty" xml:"EnableSubscribeEvent,omitempty"`
	// The ID of the region where the resource group resides.
	//
	// For information about how to obtain the ID of the region where a resource group resides, see [GetResourceGroup](https://help.aliyun.com/document_detail/158866.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the resource group.
	//
	// For information about how to obtain the ID of a resource group, see [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// rg-acfmw3ty5y7****
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The name of the resource group.
	//
	// For information about how to obtain the name of a resource group, see [ListResourceGroups](https://help.aliyun.com/document_detail/158855.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// CloudMonitor
	ResourceGroupName *string `json:"ResourceGroupName,omitempty" xml:"ResourceGroupName,omitempty"`
}

func (s CreateMonitorGroupByResourceGroupIdRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupByResourceGroupIdRequest) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupByResourceGroupIdRequest) SetContactGroupList(v []*string) *CreateMonitorGroupByResourceGroupIdRequest {
	s.ContactGroupList = v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdRequest) SetEnableInstallAgent(v bool) *CreateMonitorGroupByResourceGroupIdRequest {
	s.EnableInstallAgent = &v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdRequest) SetEnableSubscribeEvent(v bool) *CreateMonitorGroupByResourceGroupIdRequest {
	s.EnableSubscribeEvent = &v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdRequest) SetRegionId(v string) *CreateMonitorGroupByResourceGroupIdRequest {
	s.RegionId = &v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdRequest) SetResourceGroupId(v string) *CreateMonitorGroupByResourceGroupIdRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdRequest) SetResourceGroupName(v string) *CreateMonitorGroupByResourceGroupIdRequest {
	s.ResourceGroupName = &v
	return s
}

type CreateMonitorGroupByResourceGroupIdResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 3607****
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 784CAB3C-F613-5BCE-8469-6DCB29B18A20
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMonitorGroupByResourceGroupIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupByResourceGroupIdResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupByResourceGroupIdResponseBody) SetCode(v string) *CreateMonitorGroupByResourceGroupIdResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdResponseBody) SetId(v int64) *CreateMonitorGroupByResourceGroupIdResponseBody {
	s.Id = &v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdResponseBody) SetMessage(v string) *CreateMonitorGroupByResourceGroupIdResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdResponseBody) SetRequestId(v string) *CreateMonitorGroupByResourceGroupIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdResponseBody) SetSuccess(v bool) *CreateMonitorGroupByResourceGroupIdResponseBody {
	s.Success = &v
	return s
}

type CreateMonitorGroupByResourceGroupIdResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMonitorGroupByResourceGroupIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMonitorGroupByResourceGroupIdResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupByResourceGroupIdResponse) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupByResourceGroupIdResponse) SetHeaders(v map[string]*string) *CreateMonitorGroupByResourceGroupIdResponse {
	s.Headers = v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdResponse) SetStatusCode(v int32) *CreateMonitorGroupByResourceGroupIdResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMonitorGroupByResourceGroupIdResponse) SetBody(v *CreateMonitorGroupByResourceGroupIdResponseBody) *CreateMonitorGroupByResourceGroupIdResponse {
	s.Body = v
	return s
}

type CreateMonitorGroupInstancesRequest struct {
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3607****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The instances that you want to add to the application group.
	//
	// This parameter is required.
	Instances []*CreateMonitorGroupInstancesRequestInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	RegionId  *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateMonitorGroupInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupInstancesRequest) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupInstancesRequest) SetGroupId(v string) *CreateMonitorGroupInstancesRequest {
	s.GroupId = &v
	return s
}

func (s *CreateMonitorGroupInstancesRequest) SetInstances(v []*CreateMonitorGroupInstancesRequestInstances) *CreateMonitorGroupInstancesRequest {
	s.Instances = v
	return s
}

func (s *CreateMonitorGroupInstancesRequest) SetRegionId(v string) *CreateMonitorGroupInstancesRequest {
	s.RegionId = &v
	return s
}

type CreateMonitorGroupInstancesRequestInstances struct {
	// The abbreviation of the Alibaba Cloud service name.
	//
	// To obtain the abbreviation of an Alibaba Cloud service name, call the [DescribeProjectMeta](https://help.aliyun.com/document_detail/114916.html) operation. The `metricCategory` tag in the `Labels` response parameter indicates the abbreviation of the Alibaba Cloud service name.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-2ze26xj5wwy12****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The instance name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-instance-ecs
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The region ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateMonitorGroupInstancesRequestInstances) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupInstancesRequestInstances) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupInstancesRequestInstances) SetCategory(v string) *CreateMonitorGroupInstancesRequestInstances {
	s.Category = &v
	return s
}

func (s *CreateMonitorGroupInstancesRequestInstances) SetInstanceId(v string) *CreateMonitorGroupInstancesRequestInstances {
	s.InstanceId = &v
	return s
}

func (s *CreateMonitorGroupInstancesRequestInstances) SetInstanceName(v string) *CreateMonitorGroupInstancesRequestInstances {
	s.InstanceName = &v
	return s
}

func (s *CreateMonitorGroupInstancesRequestInstances) SetRegionId(v string) *CreateMonitorGroupInstancesRequestInstances {
	s.RegionId = &v
	return s
}

type CreateMonitorGroupInstancesResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1BC69FEB-56CD-4555-A0E2-02536A24A946
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMonitorGroupInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupInstancesResponseBody) SetCode(v int32) *CreateMonitorGroupInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMonitorGroupInstancesResponseBody) SetMessage(v string) *CreateMonitorGroupInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMonitorGroupInstancesResponseBody) SetRequestId(v string) *CreateMonitorGroupInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMonitorGroupInstancesResponseBody) SetSuccess(v bool) *CreateMonitorGroupInstancesResponseBody {
	s.Success = &v
	return s
}

type CreateMonitorGroupInstancesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMonitorGroupInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMonitorGroupInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupInstancesResponse) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupInstancesResponse) SetHeaders(v map[string]*string) *CreateMonitorGroupInstancesResponse {
	s.Headers = v
	return s
}

func (s *CreateMonitorGroupInstancesResponse) SetStatusCode(v int32) *CreateMonitorGroupInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMonitorGroupInstancesResponse) SetBody(v *CreateMonitorGroupInstancesResponseBody) *CreateMonitorGroupInstancesResponse {
	s.Body = v
	return s
}

type CreateMonitorGroupNotifyPolicyRequest struct {
	// The timestamp that indicates the end time of the validity period for the policy.
	//
	// This value is a UNIX timestamp that represents the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1623208500000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7301****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The type of the policy. Valid value: PauseNotify.
	//
	// This parameter is required.
	//
	// example:
	//
	// PauseNotify
	PolicyType *string `json:"PolicyType,omitempty" xml:"PolicyType,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The timestamp that indicates the start time of the validity period for the policy.
	//
	// This value is a UNIX timestamp that represents the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1622949300000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CreateMonitorGroupNotifyPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupNotifyPolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupNotifyPolicyRequest) SetEndTime(v int64) *CreateMonitorGroupNotifyPolicyRequest {
	s.EndTime = &v
	return s
}

func (s *CreateMonitorGroupNotifyPolicyRequest) SetGroupId(v string) *CreateMonitorGroupNotifyPolicyRequest {
	s.GroupId = &v
	return s
}

func (s *CreateMonitorGroupNotifyPolicyRequest) SetPolicyType(v string) *CreateMonitorGroupNotifyPolicyRequest {
	s.PolicyType = &v
	return s
}

func (s *CreateMonitorGroupNotifyPolicyRequest) SetRegionId(v string) *CreateMonitorGroupNotifyPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *CreateMonitorGroupNotifyPolicyRequest) SetStartTime(v int64) *CreateMonitorGroupNotifyPolicyRequest {
	s.StartTime = &v
	return s
}

type CreateMonitorGroupNotifyPolicyResponseBody struct {
	// The HTTP status code.
	//
	// >  The HTTP status code 200 indicates that the call succeeds.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 13356BCA-3EC3-4748-A771-2064DA69AEF1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of entries that are returned.
	//
	// example:
	//
	// 1
	Result *int32 `json:"Result,omitempty" xml:"Result,omitempty"`
	// Indicates whether the call succeeds. Valid values:
	//
	// 	- true: The call succeeds.
	//
	// 	- false: The call fails.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMonitorGroupNotifyPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupNotifyPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupNotifyPolicyResponseBody) SetCode(v string) *CreateMonitorGroupNotifyPolicyResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMonitorGroupNotifyPolicyResponseBody) SetMessage(v string) *CreateMonitorGroupNotifyPolicyResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMonitorGroupNotifyPolicyResponseBody) SetRequestId(v string) *CreateMonitorGroupNotifyPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMonitorGroupNotifyPolicyResponseBody) SetResult(v int32) *CreateMonitorGroupNotifyPolicyResponseBody {
	s.Result = &v
	return s
}

func (s *CreateMonitorGroupNotifyPolicyResponseBody) SetSuccess(v string) *CreateMonitorGroupNotifyPolicyResponseBody {
	s.Success = &v
	return s
}

type CreateMonitorGroupNotifyPolicyResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMonitorGroupNotifyPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMonitorGroupNotifyPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitorGroupNotifyPolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateMonitorGroupNotifyPolicyResponse) SetHeaders(v map[string]*string) *CreateMonitorGroupNotifyPolicyResponse {
	s.Headers = v
	return s
}

func (s *CreateMonitorGroupNotifyPolicyResponse) SetStatusCode(v int32) *CreateMonitorGroupNotifyPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMonitorGroupNotifyPolicyResponse) SetBody(v *CreateMonitorGroupNotifyPolicyResponseBody) *CreateMonitorGroupNotifyPolicyResponse {
	s.Body = v
	return s
}

type CreateMonitoringAgentProcessRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-2ze51wjtwox01r8g****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the process.
	//
	// example:
	//
	// java
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	// The user who launches the process.
	//
	// example:
	//
	// admin
	ProcessUser *string `json:"ProcessUser,omitempty" xml:"ProcessUser,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateMonitoringAgentProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitoringAgentProcessRequest) GoString() string {
	return s.String()
}

func (s *CreateMonitoringAgentProcessRequest) SetInstanceId(v string) *CreateMonitoringAgentProcessRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateMonitoringAgentProcessRequest) SetProcessName(v string) *CreateMonitoringAgentProcessRequest {
	s.ProcessName = &v
	return s
}

func (s *CreateMonitoringAgentProcessRequest) SetProcessUser(v string) *CreateMonitoringAgentProcessRequest {
	s.ProcessUser = &v
	return s
}

func (s *CreateMonitoringAgentProcessRequest) SetRegionId(v string) *CreateMonitoringAgentProcessRequest {
	s.RegionId = &v
	return s
}

type CreateMonitoringAgentProcessResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the process.
	//
	// example:
	//
	// 12345
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The error message.
	//
	// example:
	//
	// User not authorized to operate on the specified resource.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 0DFCB47D-E7E1-4CBE-A381-8339F7B300EF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateMonitoringAgentProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitoringAgentProcessResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMonitoringAgentProcessResponseBody) SetCode(v string) *CreateMonitoringAgentProcessResponseBody {
	s.Code = &v
	return s
}

func (s *CreateMonitoringAgentProcessResponseBody) SetId(v int64) *CreateMonitoringAgentProcessResponseBody {
	s.Id = &v
	return s
}

func (s *CreateMonitoringAgentProcessResponseBody) SetMessage(v string) *CreateMonitoringAgentProcessResponseBody {
	s.Message = &v
	return s
}

func (s *CreateMonitoringAgentProcessResponseBody) SetRequestId(v string) *CreateMonitoringAgentProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMonitoringAgentProcessResponseBody) SetSuccess(v bool) *CreateMonitoringAgentProcessResponseBody {
	s.Success = &v
	return s
}

type CreateMonitoringAgentProcessResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMonitoringAgentProcessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMonitoringAgentProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMonitoringAgentProcessResponse) GoString() string {
	return s.String()
}

func (s *CreateMonitoringAgentProcessResponse) SetHeaders(v map[string]*string) *CreateMonitoringAgentProcessResponse {
	s.Headers = v
	return s
}

func (s *CreateMonitoringAgentProcessResponse) SetStatusCode(v int32) *CreateMonitoringAgentProcessResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMonitoringAgentProcessResponse) SetBody(v *CreateMonitoringAgentProcessResponseBody) *CreateMonitoringAgentProcessResponse {
	s.Body = v
	return s
}

type CreateSiteMonitorRequest struct {
	// The URL or IP address that is monitored by the task.
	//
	// This parameter is required.
	//
	// example:
	//
	// https://www.aliyun.com
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// The ID of the alert rule.
	//
	// For more information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// example:
	//
	// SystemDefault_acs_ecs_dashboard_InternetOutRate_Percent
	AlertIds *string `json:"AlertIds,omitempty" xml:"AlertIds,omitempty"`
	// The custom detection period. You can only select a time period from Monday to Sunday for detection.
	//
	// example:
	//
	// {"start_hour":0,"end_hour":24, "days":[0], "time_zone":"Local"}
	CustomSchedule *string `json:"CustomSchedule,omitempty" xml:"CustomSchedule,omitempty"`
	// The interval at which detection requests are sent.
	//
	// Valid values: 1, 5, 15, 30, and 60. Unit: minutes.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The information of the detection points. If you leave this parameter empty, the system randomly selects three detection points.
	//
	// The value is a JSON array. Example: `[{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]`. The values of the city field indicate Beijing, Hangzhou, and Qingdao.
	//
	// For information about how to obtain detection points, see [DescribeSiteMonitorISPCityList](https://help.aliyun.com/document_detail/115045.html).
	//
	// example:
	//
	// [{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]
	IspCities *string `json:"IspCities,omitempty" xml:"IspCities,omitempty"`
	// The extended options of the protocol that is used by the site monitoring task. The options vary based on the protocol.
	//
	// example:
	//
	// {"time_out":5000}
	OptionsJson *string `json:"OptionsJson,omitempty" xml:"OptionsJson,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the site monitoring task.
	//
	// The name must be 4 to 100 characters in length, and can contain letters, digits, and underscores (_).
	//
	// This parameter is required.
	//
	// example:
	//
	// HanZhou_ECS1
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The protocol that is used by the site monitoring task.
	//
	// Valid values: HTTP, HTTPS, PING, TCP, UDP, DNS, SMTP, POP3, FTP, and WEBSOCKET.
	//
	// This parameter is required.
	//
	// example:
	//
	// HTTPS
	TaskType  *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	VpcConfig *string `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty"`
}

func (s CreateSiteMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSiteMonitorRequest) GoString() string {
	return s.String()
}

func (s *CreateSiteMonitorRequest) SetAddress(v string) *CreateSiteMonitorRequest {
	s.Address = &v
	return s
}

func (s *CreateSiteMonitorRequest) SetAlertIds(v string) *CreateSiteMonitorRequest {
	s.AlertIds = &v
	return s
}

func (s *CreateSiteMonitorRequest) SetCustomSchedule(v string) *CreateSiteMonitorRequest {
	s.CustomSchedule = &v
	return s
}

func (s *CreateSiteMonitorRequest) SetInterval(v string) *CreateSiteMonitorRequest {
	s.Interval = &v
	return s
}

func (s *CreateSiteMonitorRequest) SetIspCities(v string) *CreateSiteMonitorRequest {
	s.IspCities = &v
	return s
}

func (s *CreateSiteMonitorRequest) SetOptionsJson(v string) *CreateSiteMonitorRequest {
	s.OptionsJson = &v
	return s
}

func (s *CreateSiteMonitorRequest) SetRegionId(v string) *CreateSiteMonitorRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSiteMonitorRequest) SetTaskName(v string) *CreateSiteMonitorRequest {
	s.TaskName = &v
	return s
}

func (s *CreateSiteMonitorRequest) SetTaskType(v string) *CreateSiteMonitorRequest {
	s.TaskType = &v
	return s
}

func (s *CreateSiteMonitorRequest) SetVpcConfig(v string) *CreateSiteMonitorRequest {
	s.VpcConfig = &v
	return s
}

type CreateSiteMonitorResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned result.
	//
	// If a site monitoring task is created, the result is returned. If a site monitoring task fails to be created, no result is returned.
	CreateResultList *CreateSiteMonitorResponseBodyCreateResultList `json:"CreateResultList,omitempty" xml:"CreateResultList,omitempty" type:"Struct"`
	// The result of the site monitoring task.
	Data *CreateSiteMonitorResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 68192f5d-0d45-4b98-9724-892813f86c71
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSiteMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSiteMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSiteMonitorResponseBody) SetCode(v string) *CreateSiteMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSiteMonitorResponseBody) SetCreateResultList(v *CreateSiteMonitorResponseBodyCreateResultList) *CreateSiteMonitorResponseBody {
	s.CreateResultList = v
	return s
}

func (s *CreateSiteMonitorResponseBody) SetData(v *CreateSiteMonitorResponseBodyData) *CreateSiteMonitorResponseBody {
	s.Data = v
	return s
}

func (s *CreateSiteMonitorResponseBody) SetMessage(v string) *CreateSiteMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *CreateSiteMonitorResponseBody) SetRequestId(v string) *CreateSiteMonitorResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSiteMonitorResponseBody) SetSuccess(v string) *CreateSiteMonitorResponseBody {
	s.Success = &v
	return s
}

type CreateSiteMonitorResponseBodyCreateResultList struct {
	CreateResultList []*CreateSiteMonitorResponseBodyCreateResultListCreateResultList `json:"CreateResultList,omitempty" xml:"CreateResultList,omitempty" type:"Repeated"`
}

func (s CreateSiteMonitorResponseBodyCreateResultList) String() string {
	return tea.Prettify(s)
}

func (s CreateSiteMonitorResponseBodyCreateResultList) GoString() string {
	return s.String()
}

func (s *CreateSiteMonitorResponseBodyCreateResultList) SetCreateResultList(v []*CreateSiteMonitorResponseBodyCreateResultListCreateResultList) *CreateSiteMonitorResponseBodyCreateResultList {
	s.CreateResultList = v
	return s
}

type CreateSiteMonitorResponseBodyCreateResultListCreateResultList struct {
	// The ID of the site monitoring task.
	//
	// example:
	//
	// 2c8dbdf9-a3ab-46a1-85a4-f094965e****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the site monitoring task.
	//
	// example:
	//
	// HanZhou_ECS1
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s CreateSiteMonitorResponseBodyCreateResultListCreateResultList) String() string {
	return tea.Prettify(s)
}

func (s CreateSiteMonitorResponseBodyCreateResultListCreateResultList) GoString() string {
	return s.String()
}

func (s *CreateSiteMonitorResponseBodyCreateResultListCreateResultList) SetTaskId(v string) *CreateSiteMonitorResponseBodyCreateResultListCreateResultList {
	s.TaskId = &v
	return s
}

func (s *CreateSiteMonitorResponseBodyCreateResultListCreateResultList) SetTaskName(v string) *CreateSiteMonitorResponseBodyCreateResultListCreateResultList {
	s.TaskName = &v
	return s
}

type CreateSiteMonitorResponseBodyData struct {
	// The result that is returned after you associate the existing alert rule with the site monitoring task.
	AttachAlertResult *CreateSiteMonitorResponseBodyDataAttachAlertResult `json:"AttachAlertResult,omitempty" xml:"AttachAlertResult,omitempty" type:"Struct"`
}

func (s CreateSiteMonitorResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateSiteMonitorResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateSiteMonitorResponseBodyData) SetAttachAlertResult(v *CreateSiteMonitorResponseBodyDataAttachAlertResult) *CreateSiteMonitorResponseBodyData {
	s.AttachAlertResult = v
	return s
}

type CreateSiteMonitorResponseBodyDataAttachAlertResult struct {
	Contact []*CreateSiteMonitorResponseBodyDataAttachAlertResultContact `json:"Contact,omitempty" xml:"Contact,omitempty" type:"Repeated"`
}

func (s CreateSiteMonitorResponseBodyDataAttachAlertResult) String() string {
	return tea.Prettify(s)
}

func (s CreateSiteMonitorResponseBodyDataAttachAlertResult) GoString() string {
	return s.String()
}

func (s *CreateSiteMonitorResponseBodyDataAttachAlertResult) SetContact(v []*CreateSiteMonitorResponseBodyDataAttachAlertResultContact) *CreateSiteMonitorResponseBodyDataAttachAlertResult {
	s.Contact = v
	return s
}

type CreateSiteMonitorResponseBodyDataAttachAlertResultContact struct {
	// The status code that is returned after you associate the existing alert rule with the site monitoring task.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The message that is returned after you associate the existing alert rule with the site monitoring task.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request that was sent to associate the existing alert rule with the site monitoring task.
	//
	// example:
	//
	// 5dd33455-4f65-4b0c-9200-33d66f3f340b
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// SystemDefault_acs_ecs_dashboard_InternetOutRate_Percent
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// Indicates whether the existing alert rule was associated with the site monitoring task. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSiteMonitorResponseBodyDataAttachAlertResultContact) String() string {
	return tea.Prettify(s)
}

func (s CreateSiteMonitorResponseBodyDataAttachAlertResultContact) GoString() string {
	return s.String()
}

func (s *CreateSiteMonitorResponseBodyDataAttachAlertResultContact) SetCode(v string) *CreateSiteMonitorResponseBodyDataAttachAlertResultContact {
	s.Code = &v
	return s
}

func (s *CreateSiteMonitorResponseBodyDataAttachAlertResultContact) SetMessage(v string) *CreateSiteMonitorResponseBodyDataAttachAlertResultContact {
	s.Message = &v
	return s
}

func (s *CreateSiteMonitorResponseBodyDataAttachAlertResultContact) SetRequestId(v string) *CreateSiteMonitorResponseBodyDataAttachAlertResultContact {
	s.RequestId = &v
	return s
}

func (s *CreateSiteMonitorResponseBodyDataAttachAlertResultContact) SetRuleId(v string) *CreateSiteMonitorResponseBodyDataAttachAlertResultContact {
	s.RuleId = &v
	return s
}

func (s *CreateSiteMonitorResponseBodyDataAttachAlertResultContact) SetSuccess(v string) *CreateSiteMonitorResponseBodyDataAttachAlertResultContact {
	s.Success = &v
	return s
}

type CreateSiteMonitorResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSiteMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSiteMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSiteMonitorResponse) GoString() string {
	return s.String()
}

func (s *CreateSiteMonitorResponse) SetHeaders(v map[string]*string) *CreateSiteMonitorResponse {
	s.Headers = v
	return s
}

func (s *CreateSiteMonitorResponse) SetStatusCode(v int32) *CreateSiteMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSiteMonitorResponse) SetBody(v *CreateSiteMonitorResponseBody) *CreateSiteMonitorResponse {
	s.Body = v
	return s
}

type CursorRequest struct {
	// The end of the time range to query.
	//
	// Unit: milliseconds.
	//
	// >
	//
	// 	- This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. For example, 2023-01-01T00:00:00Z indicates January 1, 2023, 00:00:00 UTC.
	//
	// 	- If you do not set the end time, the end time is infinite. You can leave this parameter empty in real-time export scenarios.
	//
	// 	- In CloudMonitor, the TTL of monitoring data varies with the time granularity. Specify a proper time interval based on the TTL corresponding to the value of the `Period` parameter.
	//
	// example:
	//
	// 1641645000000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The dimension information of the metric.
	Matchers []*Matcher `json:"Matchers,omitempty" xml:"Matchers,omitempty" type:"Repeated"`
	// The metric that is used to monitor the cloud service.
	//
	// For more information about the metrics of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_idle
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The time interval based on which the metric value is measured.
	//
	// Unit: seconds.
	//
	// >  Generally, the time interval is 60 seconds. For more information about specific values, see the `Period` parameter in [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 60
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The beginning of the time range to query.
	//
	// Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. For example, 2023-01-01T00:00:00Z indicates January 1, 2023, 00:00:00 UTC.
	//
	// >  In CloudMonitor, the TTL of monitoring data varies with the time granularity. Specify a proper time interval based on the TTL corresponding to the value of the `Period` parameter.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1641627000000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CursorRequest) String() string {
	return tea.Prettify(s)
}

func (s CursorRequest) GoString() string {
	return s.String()
}

func (s *CursorRequest) SetEndTime(v string) *CursorRequest {
	s.EndTime = &v
	return s
}

func (s *CursorRequest) SetMatchers(v []*Matcher) *CursorRequest {
	s.Matchers = v
	return s
}

func (s *CursorRequest) SetMetric(v string) *CursorRequest {
	s.Metric = &v
	return s
}

func (s *CursorRequest) SetNamespace(v string) *CursorRequest {
	s.Namespace = &v
	return s
}

func (s *CursorRequest) SetPeriod(v int32) *CursorRequest {
	s.Period = &v
	return s
}

func (s *CursorRequest) SetStartTime(v string) *CursorRequest {
	s.StartTime = &v
	return s
}

type CursorShrinkRequest struct {
	// The end of the time range to query.
	//
	// Unit: milliseconds.
	//
	// >
	//
	// 	- This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. For example, 2023-01-01T00:00:00Z indicates January 1, 2023, 00:00:00 UTC.
	//
	// 	- If you do not set the end time, the end time is infinite. You can leave this parameter empty in real-time export scenarios.
	//
	// 	- In CloudMonitor, the TTL of monitoring data varies with the time granularity. Specify a proper time interval based on the TTL corresponding to the value of the `Period` parameter.
	//
	// example:
	//
	// 1641645000000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The dimension information of the metric.
	MatchersShrink *string `json:"Matchers,omitempty" xml:"Matchers,omitempty"`
	// The metric that is used to monitor the cloud service.
	//
	// For more information about the metrics of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_idle
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The time interval based on which the metric value is measured.
	//
	// Unit: seconds.
	//
	// >  Generally, the time interval is 60 seconds. For more information about specific values, see the `Period` parameter in [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 60
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The beginning of the time range to query.
	//
	// Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. For example, 2023-01-01T00:00:00Z indicates January 1, 2023, 00:00:00 UTC.
	//
	// >  In CloudMonitor, the TTL of monitoring data varies with the time granularity. Specify a proper time interval based on the TTL corresponding to the value of the `Period` parameter.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1641627000000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CursorShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CursorShrinkRequest) GoString() string {
	return s.String()
}

func (s *CursorShrinkRequest) SetEndTime(v string) *CursorShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *CursorShrinkRequest) SetMatchersShrink(v string) *CursorShrinkRequest {
	s.MatchersShrink = &v
	return s
}

func (s *CursorShrinkRequest) SetMetric(v string) *CursorShrinkRequest {
	s.Metric = &v
	return s
}

func (s *CursorShrinkRequest) SetNamespace(v string) *CursorShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *CursorShrinkRequest) SetPeriod(v int32) *CursorShrinkRequest {
	s.Period = &v
	return s
}

func (s *CursorShrinkRequest) SetStartTime(v string) *CursorShrinkRequest {
	s.StartTime = &v
	return s
}

type CursorResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Cursor is used as an input parameter for data export in the [BatchExport](https://help.aliyun.com/document_detail/2329847.html) operation.
	//
	// example:
	//
	// v2.5eyJiYXRjaGVzIjoxLCJidWNrZXRCeXRlcyI6IndBPT0iLCJidWNrZXRzIjo0LCJjdXJyZW50QnVja2V0IjotNjQsImN1cnJlbnRUYXJnZXRUaW1lU2xvdCI6MTY3ODc1MjAwMCwiZW5kVGltZSI6MTY3ODc4MjQxOTAwMCwiZXhwb3J0RW5kVGltZSI6MTY3ODc4MjQxOTAwMCwiZXhwb3J0U3RhcnRUaW1lIjoxNjc4NzgxODE5MDAwLCJleHByZXNzUmFuZ2UiOmZhbHNlLCJoYXNOZXh0Ijp0cnVlLCJpbmRleCI6MCwibGF0ZXN0TG9nVGltZSI6MCwibWF0Y2hlcnMiOnsiY2hhaW4iOlt7ImxhYmVsIjoidXNlcklkIiwib3BlcmF0b3IiOiJFUVVBTFMiLCJ2YWx1ZSI6IjEyNzA2NzY2Nzk1NDY3MDQifV0sImxvY2tlZCI6dHJ1ZX0sIm1ldHJpYyI6IlNwbGl0cndQcm94eU1heFJlc3BvbnNlU2l6ZSIsIm1ldHJpY1R5cGUiOiJNRVRSSUMiLCJuYW1lc3BhY2UiOiJhY3Nfa3ZzdG9yZV9leCIsIm5leHRQa0FkYXB0ZXIiOnsiZGltIjoiVjowXG5EOmB1c2VySWRgPTEyNzA2NzY2Nzk1NDY3MDQsYGluc3RhbmNlSWRgPXItcmo5ZjlzMTlsc3V1MXd1bnVyLGBub2RlSWRgPXItcmo5ZjlzMTlsc3V1MXd1bnVyLXByb3h5LTIsXG4iLCJtZXRhIjoiXG5WOjBcbk06YWNzX2t2c3RvcmVfZXgvU3BsaXRyd1Byb3h5TWF4UmVzcG9uc2VTaXplXG5XOjYwXG5COjRcbkk6LTFcblQ6MFxuQzpgQXZlcmFnZWAsYE1heGltdW1gLGBfX2NvdW50X19gLGBfX3RzX19gXG4iLCJyZCI6InN1YkFMU0RwWXY2K0t6aENQQUFBWkErNUFKMEpjbGErRGd2V0hFNWxDSHMvbGtqR2FXYTFJTkVwdFE9PSIsInRhZyI6IiJ9LCJvZmZzZXQiOjAsIm9mZnNldERpZ2l0Ijo0NTU0NTczNDQyMTc4NDIxMjIsInN0YXJ0VGltZSI6MTY3ODc4MTgxOTAwMCwic3RlcCI6LTEsInRhZ01hdGNoZXJzIjp7ImNoYWluIjpbXSwibG9ja2VkIjp0cnVlfSwidGFyZ2V0VGltZVNsb3RzIjpbMTY3ODY2NTYwMCwxNjc4NzUyMDAwXSwidXVpZCI6ImQwMmFhZmY1LWU3ZGQtNDUyYy0***********
	Cursor *string `json:"Cursor,omitempty" xml:"Cursor,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 915C2D7A-E6A4-17C3-8E13-4DBDD61E7919
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CursorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CursorResponseBody) GoString() string {
	return s.String()
}

func (s *CursorResponseBody) SetCode(v int32) *CursorResponseBody {
	s.Code = &v
	return s
}

func (s *CursorResponseBody) SetCursor(v string) *CursorResponseBody {
	s.Cursor = &v
	return s
}

func (s *CursorResponseBody) SetMessage(v string) *CursorResponseBody {
	s.Message = &v
	return s
}

func (s *CursorResponseBody) SetRequestId(v string) *CursorResponseBody {
	s.RequestId = &v
	return s
}

func (s *CursorResponseBody) SetSuccess(v bool) *CursorResponseBody {
	s.Success = &v
	return s
}

type CursorResponse struct {
	Headers    map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CursorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CursorResponse) String() string {
	return tea.Prettify(s)
}

func (s CursorResponse) GoString() string {
	return s.String()
}

func (s *CursorResponse) SetHeaders(v map[string]*string) *CursorResponse {
	s.Headers = v
	return s
}

func (s *CursorResponse) SetStatusCode(v int32) *CursorResponse {
	s.StatusCode = &v
	return s
}

func (s *CursorResponse) SetBody(v *CursorResponseBody) *CursorResponse {
	s.Body = v
	return s
}

type DeleteContactRequest struct {
	// The name of the alert contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-01
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
}

func (s DeleteContactRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactRequest) GoString() string {
	return s.String()
}

func (s *DeleteContactRequest) SetContactName(v string) *DeleteContactRequest {
	s.ContactName = &v
	return s
}

type DeleteContactResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 50D4CFE1-01E5-4543-939C-18BC01E3EC1C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteContactResponseBody) SetCode(v string) *DeleteContactResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteContactResponseBody) SetMessage(v string) *DeleteContactResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteContactResponseBody) SetRequestId(v string) *DeleteContactResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteContactResponseBody) SetSuccess(v bool) *DeleteContactResponseBody {
	s.Success = &v
	return s
}

type DeleteContactResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteContactResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactResponse) GoString() string {
	return s.String()
}

func (s *DeleteContactResponse) SetHeaders(v map[string]*string) *DeleteContactResponse {
	s.Headers = v
	return s
}

func (s *DeleteContactResponse) SetStatusCode(v int32) *DeleteContactResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteContactResponse) SetBody(v *DeleteContactResponseBody) *DeleteContactResponse {
	s.Body = v
	return s
}

type DeleteContactGroupRequest struct {
	// The name of the alert group.
	//
	// This parameter is required.
	//
	// example:
	//
	// contact_group_2019_templatedfkXQ
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
}

func (s DeleteContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteContactGroupRequest) SetContactGroupName(v string) *DeleteContactGroupRequest {
	s.ContactGroupName = &v
	return s
}

type DeleteContactGroupResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// F722BE59-2400-4A64-9C1A-AD886AED9A69
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteContactGroupResponseBody) SetCode(v string) *DeleteContactGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteContactGroupResponseBody) SetMessage(v string) *DeleteContactGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteContactGroupResponseBody) SetRequestId(v string) *DeleteContactGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteContactGroupResponseBody) SetSuccess(v bool) *DeleteContactGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteContactGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteContactGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteContactGroupResponse) SetHeaders(v map[string]*string) *DeleteContactGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteContactGroupResponse) SetStatusCode(v int32) *DeleteContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteContactGroupResponse) SetBody(v *DeleteContactGroupResponseBody) *DeleteContactGroupResponse {
	s.Body = v
	return s
}

type DeleteCustomMetricRequest struct {
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3607****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The MD5 value of the HTTP request body. The MD5 value is a 128-bit hash value used to verify the uniqueness of the reported monitoring data.
	//
	// >  `Md5` is returned when you query the reported monitoring data of a metric.
	//
	// example:
	//
	// 38796C8CFFEB8F89BB2A626C7BD7****
	Md5 *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	// The name of the metric.
	//
	// This parameter is required.
	//
	// example:
	//
	// AdvanceCredit
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the request for reporting monitoring data.
	//
	// >  `UUID` is returned when you query the reported monitoring data of a metric. We recommend that you specify the `Md5` parameter.
	//
	// example:
	//
	// 5497633c-66c5-4eae-abaa-89db5adb****
	UUID *string `json:"UUID,omitempty" xml:"UUID,omitempty"`
}

func (s DeleteCustomMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomMetricRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomMetricRequest) SetGroupId(v string) *DeleteCustomMetricRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteCustomMetricRequest) SetMd5(v string) *DeleteCustomMetricRequest {
	s.Md5 = &v
	return s
}

func (s *DeleteCustomMetricRequest) SetMetricName(v string) *DeleteCustomMetricRequest {
	s.MetricName = &v
	return s
}

func (s *DeleteCustomMetricRequest) SetRegionId(v string) *DeleteCustomMetricRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteCustomMetricRequest) SetUUID(v string) *DeleteCustomMetricRequest {
	s.UUID = &v
	return s
}

type DeleteCustomMetricResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call is successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 05B36C2C-5F6E-48D5-8B41-CE36DD7EE8E0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCustomMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomMetricResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomMetricResponseBody) SetCode(v string) *DeleteCustomMetricResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCustomMetricResponseBody) SetMessage(v string) *DeleteCustomMetricResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCustomMetricResponseBody) SetRequestId(v string) *DeleteCustomMetricResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCustomMetricResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomMetricResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomMetricResponse) SetHeaders(v map[string]*string) *DeleteCustomMetricResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomMetricResponse) SetStatusCode(v int32) *DeleteCustomMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomMetricResponse) SetBody(v *DeleteCustomMetricResponseBody) *DeleteCustomMetricResponse {
	s.Body = v
	return s
}

type DeleteDynamicTagGroupRequest struct {
	// The ID of the tag rule.
	//
	// For information about how to obtain the ID of a tag rule, see [DescribeDynamicTagRuleList](https://help.aliyun.com/document_detail/150126.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 6b882d9a-5117-42e2-9d0c-4749a0c6****
	DynamicTagRuleId *string `json:"DynamicTagRuleId,omitempty" xml:"DynamicTagRuleId,omitempty"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDynamicTagGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDynamicTagGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDynamicTagGroupRequest) SetDynamicTagRuleId(v string) *DeleteDynamicTagGroupRequest {
	s.DynamicTagRuleId = &v
	return s
}

func (s *DeleteDynamicTagGroupRequest) SetRegionId(v string) *DeleteDynamicTagGroupRequest {
	s.RegionId = &v
	return s
}

type DeleteDynamicTagGroupResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 08AAE67E-77B5-485B-9C79-D7C8C059150A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteDynamicTagGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDynamicTagGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDynamicTagGroupResponseBody) SetCode(v string) *DeleteDynamicTagGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDynamicTagGroupResponseBody) SetMessage(v string) *DeleteDynamicTagGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDynamicTagGroupResponseBody) SetRequestId(v string) *DeleteDynamicTagGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDynamicTagGroupResponseBody) SetSuccess(v bool) *DeleteDynamicTagGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteDynamicTagGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDynamicTagGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDynamicTagGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDynamicTagGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDynamicTagGroupResponse) SetHeaders(v map[string]*string) *DeleteDynamicTagGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteDynamicTagGroupResponse) SetStatusCode(v int32) *DeleteDynamicTagGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDynamicTagGroupResponse) SetBody(v *DeleteDynamicTagGroupResponseBody) *DeleteDynamicTagGroupResponse {
	s.Body = v
	return s
}

type DeleteEventRuleTargetsRequest struct {
	// The IDs of event-triggered alert rules.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Ids      []*string `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	RegionId *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the event-triggered alert rule.
	//
	// For information about how to obtain the name of an event-triggered alert rule, see [DescribeEventRuleList](https://help.aliyun.com/document_detail/114996.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// testRule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
}

func (s DeleteEventRuleTargetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventRuleTargetsRequest) GoString() string {
	return s.String()
}

func (s *DeleteEventRuleTargetsRequest) SetIds(v []*string) *DeleteEventRuleTargetsRequest {
	s.Ids = v
	return s
}

func (s *DeleteEventRuleTargetsRequest) SetRegionId(v string) *DeleteEventRuleTargetsRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteEventRuleTargetsRequest) SetRuleName(v string) *DeleteEventRuleTargetsRequest {
	s.RuleName = &v
	return s
}

type DeleteEventRuleTargetsResponseBody struct {
	// The response code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID. You can use the request ID to query logs and troubleshoot issues.
	//
	// example:
	//
	// 7ADD7EFB-7555-4EC1-A3D9-F9955C189CCF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteEventRuleTargetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventRuleTargetsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEventRuleTargetsResponseBody) SetCode(v string) *DeleteEventRuleTargetsResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEventRuleTargetsResponseBody) SetMessage(v string) *DeleteEventRuleTargetsResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEventRuleTargetsResponseBody) SetRequestId(v string) *DeleteEventRuleTargetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteEventRuleTargetsResponseBody) SetSuccess(v bool) *DeleteEventRuleTargetsResponseBody {
	s.Success = &v
	return s
}

type DeleteEventRuleTargetsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEventRuleTargetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEventRuleTargetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventRuleTargetsResponse) GoString() string {
	return s.String()
}

func (s *DeleteEventRuleTargetsResponse) SetHeaders(v map[string]*string) *DeleteEventRuleTargetsResponse {
	s.Headers = v
	return s
}

func (s *DeleteEventRuleTargetsResponse) SetStatusCode(v int32) *DeleteEventRuleTargetsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEventRuleTargetsResponse) SetBody(v *DeleteEventRuleTargetsResponseBody) *DeleteEventRuleTargetsResponse {
	s.Body = v
	return s
}

type DeleteEventRulesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// rule1
	RuleNames []*string `json:"RuleNames,omitempty" xml:"RuleNames,omitempty" type:"Repeated"`
}

func (s DeleteEventRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventRulesRequest) GoString() string {
	return s.String()
}

func (s *DeleteEventRulesRequest) SetRuleNames(v []*string) *DeleteEventRulesRequest {
	s.RuleNames = v
	return s
}

type DeleteEventRulesResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// E5A72B5B-4F44-438C-B68A-147FD5DC53A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteEventRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEventRulesResponseBody) SetCode(v string) *DeleteEventRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEventRulesResponseBody) SetMessage(v string) *DeleteEventRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEventRulesResponseBody) SetRequestId(v string) *DeleteEventRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteEventRulesResponseBody) SetSuccess(v bool) *DeleteEventRulesResponseBody {
	s.Success = &v
	return s
}

type DeleteEventRulesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEventRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEventRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventRulesResponse) GoString() string {
	return s.String()
}

func (s *DeleteEventRulesResponse) SetHeaders(v map[string]*string) *DeleteEventRulesResponse {
	s.Headers = v
	return s
}

func (s *DeleteEventRulesResponse) SetStatusCode(v int32) *DeleteEventRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEventRulesResponse) SetBody(v *DeleteEventRulesResponseBody) *DeleteEventRulesResponse {
	s.Body = v
	return s
}

type DeleteExporterOutputRequest struct {
	// The name of the configuration set.
	//
	// This parameter is required.
	//
	// example:
	//
	// testName
	DestName *string `json:"DestName,omitempty" xml:"DestName,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteExporterOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteExporterOutputRequest) GoString() string {
	return s.String()
}

func (s *DeleteExporterOutputRequest) SetDestName(v string) *DeleteExporterOutputRequest {
	s.DestName = &v
	return s
}

func (s *DeleteExporterOutputRequest) SetRegionId(v string) *DeleteExporterOutputRequest {
	s.RegionId = &v
	return s
}

type DeleteExporterOutputResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 2DECF751-7AFA-43BB-8C63-2B6B07E51AE1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteExporterOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteExporterOutputResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteExporterOutputResponseBody) SetCode(v string) *DeleteExporterOutputResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteExporterOutputResponseBody) SetMessage(v string) *DeleteExporterOutputResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteExporterOutputResponseBody) SetRequestId(v string) *DeleteExporterOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteExporterOutputResponseBody) SetSuccess(v bool) *DeleteExporterOutputResponseBody {
	s.Success = &v
	return s
}

type DeleteExporterOutputResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteExporterOutputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteExporterOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteExporterOutputResponse) GoString() string {
	return s.String()
}

func (s *DeleteExporterOutputResponse) SetHeaders(v map[string]*string) *DeleteExporterOutputResponse {
	s.Headers = v
	return s
}

func (s *DeleteExporterOutputResponse) SetStatusCode(v int32) *DeleteExporterOutputResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteExporterOutputResponse) SetBody(v *DeleteExporterOutputResponseBody) *DeleteExporterOutputResponse {
	s.Body = v
	return s
}

type DeleteExporterRuleRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the data export rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// myRuleName
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
}

func (s DeleteExporterRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteExporterRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteExporterRuleRequest) SetRegionId(v string) *DeleteExporterRuleRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteExporterRuleRequest) SetRuleName(v string) *DeleteExporterRuleRequest {
	s.RuleName = &v
	return s
}

type DeleteExporterRuleResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6A5F022D-AC7C-460E-94AE-B9E75083D023
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteExporterRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteExporterRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteExporterRuleResponseBody) SetCode(v string) *DeleteExporterRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteExporterRuleResponseBody) SetMessage(v string) *DeleteExporterRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteExporterRuleResponseBody) SetRequestId(v string) *DeleteExporterRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteExporterRuleResponseBody) SetSuccess(v bool) *DeleteExporterRuleResponseBody {
	s.Success = &v
	return s
}

type DeleteExporterRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteExporterRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteExporterRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteExporterRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteExporterRuleResponse) SetHeaders(v map[string]*string) *DeleteExporterRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteExporterRuleResponse) SetStatusCode(v int32) *DeleteExporterRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteExporterRuleResponse) SetBody(v *DeleteExporterRuleResponseBody) *DeleteExporterRuleResponse {
	s.Body = v
	return s
}

type DeleteGroupMonitoringAgentProcessRequest struct {
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the process monitoring task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 48F83746-C817-478C-9B06-7158F56B****
	Id       *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteGroupMonitoringAgentProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupMonitoringAgentProcessRequest) GoString() string {
	return s.String()
}

func (s *DeleteGroupMonitoringAgentProcessRequest) SetGroupId(v string) *DeleteGroupMonitoringAgentProcessRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteGroupMonitoringAgentProcessRequest) SetId(v string) *DeleteGroupMonitoringAgentProcessRequest {
	s.Id = &v
	return s
}

func (s *DeleteGroupMonitoringAgentProcessRequest) SetRegionId(v string) *DeleteGroupMonitoringAgentProcessRequest {
	s.RegionId = &v
	return s
}

type DeleteGroupMonitoringAgentProcessResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 3F6150F9-45C7-43F9-9578-A58B2E726C90
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteGroupMonitoringAgentProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupMonitoringAgentProcessResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGroupMonitoringAgentProcessResponseBody) SetCode(v string) *DeleteGroupMonitoringAgentProcessResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteGroupMonitoringAgentProcessResponseBody) SetMessage(v string) *DeleteGroupMonitoringAgentProcessResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteGroupMonitoringAgentProcessResponseBody) SetRequestId(v string) *DeleteGroupMonitoringAgentProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteGroupMonitoringAgentProcessResponseBody) SetSuccess(v bool) *DeleteGroupMonitoringAgentProcessResponseBody {
	s.Success = &v
	return s
}

type DeleteGroupMonitoringAgentProcessResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteGroupMonitoringAgentProcessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteGroupMonitoringAgentProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGroupMonitoringAgentProcessResponse) GoString() string {
	return s.String()
}

func (s *DeleteGroupMonitoringAgentProcessResponse) SetHeaders(v map[string]*string) *DeleteGroupMonitoringAgentProcessResponse {
	s.Headers = v
	return s
}

func (s *DeleteGroupMonitoringAgentProcessResponse) SetStatusCode(v int32) *DeleteGroupMonitoringAgentProcessResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGroupMonitoringAgentProcessResponse) SetBody(v *DeleteGroupMonitoringAgentProcessResponseBody) *DeleteGroupMonitoringAgentProcessResponse {
	s.Body = v
	return s
}

type DeleteHostAvailabilityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 12456
	Id       []*int64 `json:"Id,omitempty" xml:"Id,omitempty" type:"Repeated"`
	RegionId *string  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteHostAvailabilityRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostAvailabilityRequest) GoString() string {
	return s.String()
}

func (s *DeleteHostAvailabilityRequest) SetId(v []*int64) *DeleteHostAvailabilityRequest {
	s.Id = v
	return s
}

func (s *DeleteHostAvailabilityRequest) SetRegionId(v string) *DeleteHostAvailabilityRequest {
	s.RegionId = &v
	return s
}

type DeleteHostAvailabilityResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 57C782E6-B235-4842-AD2B-DB94961761EB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteHostAvailabilityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostAvailabilityResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHostAvailabilityResponseBody) SetCode(v string) *DeleteHostAvailabilityResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteHostAvailabilityResponseBody) SetMessage(v string) *DeleteHostAvailabilityResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteHostAvailabilityResponseBody) SetRequestId(v string) *DeleteHostAvailabilityResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHostAvailabilityResponseBody) SetSuccess(v bool) *DeleteHostAvailabilityResponseBody {
	s.Success = &v
	return s
}

type DeleteHostAvailabilityResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHostAvailabilityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHostAvailabilityResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHostAvailabilityResponse) GoString() string {
	return s.String()
}

func (s *DeleteHostAvailabilityResponse) SetHeaders(v map[string]*string) *DeleteHostAvailabilityResponse {
	s.Headers = v
	return s
}

func (s *DeleteHostAvailabilityResponse) SetStatusCode(v int32) *DeleteHostAvailabilityResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHostAvailabilityResponse) SetBody(v *DeleteHostAvailabilityResponseBody) *DeleteHostAvailabilityResponse {
	s.Body = v
	return s
}

type DeleteHybridMonitorNamespaceRequest struct {
	// The name of the namespace.
	//
	// For information about how to obtain the name of a namespace, see [DescribeHybridMonitorNamespaceList](https://help.aliyun.com/document_detail/428880.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// aliyun
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteHybridMonitorNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHybridMonitorNamespaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteHybridMonitorNamespaceRequest) SetNamespace(v string) *DeleteHybridMonitorNamespaceRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteHybridMonitorNamespaceRequest) SetRegionId(v string) *DeleteHybridMonitorNamespaceRequest {
	s.RegionId = &v
	return s
}

type DeleteHybridMonitorNamespaceResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// Namespace.NotFound
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3843D23A-FB9E-5DC8-BCCC-458768B79296
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteHybridMonitorNamespaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHybridMonitorNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHybridMonitorNamespaceResponseBody) SetCode(v string) *DeleteHybridMonitorNamespaceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteHybridMonitorNamespaceResponseBody) SetMessage(v string) *DeleteHybridMonitorNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteHybridMonitorNamespaceResponseBody) SetRequestId(v string) *DeleteHybridMonitorNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHybridMonitorNamespaceResponseBody) SetSuccess(v string) *DeleteHybridMonitorNamespaceResponseBody {
	s.Success = &v
	return s
}

type DeleteHybridMonitorNamespaceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHybridMonitorNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHybridMonitorNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHybridMonitorNamespaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteHybridMonitorNamespaceResponse) SetHeaders(v map[string]*string) *DeleteHybridMonitorNamespaceResponse {
	s.Headers = v
	return s
}

func (s *DeleteHybridMonitorNamespaceResponse) SetStatusCode(v int32) *DeleteHybridMonitorNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHybridMonitorNamespaceResponse) SetBody(v *DeleteHybridMonitorNamespaceResponseBody) *DeleteHybridMonitorNamespaceResponse {
	s.Body = v
	return s
}

type DeleteHybridMonitorSLSGroupRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the Logstore group.
	//
	// For information about how to obtain the name of a Logstore group, see [DescribeHybridMonitorSLSGroup](https://help.aliyun.com/document_detail/429526.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// Logstore_test
	SLSGroupName *string `json:"SLSGroupName,omitempty" xml:"SLSGroupName,omitempty"`
}

func (s DeleteHybridMonitorSLSGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHybridMonitorSLSGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteHybridMonitorSLSGroupRequest) SetRegionId(v string) *DeleteHybridMonitorSLSGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteHybridMonitorSLSGroupRequest) SetSLSGroupName(v string) *DeleteHybridMonitorSLSGroupRequest {
	s.SLSGroupName = &v
	return s
}

type DeleteHybridMonitorSLSGroupResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// RESOURCE_NOT_FOUND
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 85198BFF-1DE6-556E-B6A4-C77C51C62B8D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteHybridMonitorSLSGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHybridMonitorSLSGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHybridMonitorSLSGroupResponseBody) SetCode(v string) *DeleteHybridMonitorSLSGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteHybridMonitorSLSGroupResponseBody) SetMessage(v string) *DeleteHybridMonitorSLSGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteHybridMonitorSLSGroupResponseBody) SetRequestId(v string) *DeleteHybridMonitorSLSGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHybridMonitorSLSGroupResponseBody) SetSuccess(v string) *DeleteHybridMonitorSLSGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteHybridMonitorSLSGroupResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHybridMonitorSLSGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHybridMonitorSLSGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHybridMonitorSLSGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteHybridMonitorSLSGroupResponse) SetHeaders(v map[string]*string) *DeleteHybridMonitorSLSGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteHybridMonitorSLSGroupResponse) SetStatusCode(v int32) *DeleteHybridMonitorSLSGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHybridMonitorSLSGroupResponse) SetBody(v *DeleteHybridMonitorSLSGroupResponseBody) *DeleteHybridMonitorSLSGroupResponse {
	s.Body = v
	return s
}

type DeleteHybridMonitorTaskRequest struct {
	// The name of the namespace.
	//
	// The name can contain uppercase letters, lowercase letters, digits, and hyphens (-).
	//
	// > This parameter is required only if you call this operation to delete metric import tasks for Alibaba Cloud services. In this case, the `TaskType` parameter is set to `aliyun_fc`.
	//
	// example:
	//
	// aliyun
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the member account.
	//
	// > This parameter is required only if you use a management account to call this operation to query metric import tasks that belong to a member in a resource directory. In this case, the `TaskType` parameter is set to `aliyun_fc`.
	//
	// example:
	//
	// 120886317861****
	TargetUserId *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty"`
	// The ID of the metric import task.
	//
	// For information about how to obtain the ID of a metric import task, see [DescribeHybridMonitorTaskList](https://help.aliyun.com/document_detail/428624.html).
	//
	// > This parameter is required only if you call this operation to delete metrics for the logs that are imported from Log Service. In this case, the `TaskType` parameter is set to `aliyun_sls`.
	//
	// example:
	//
	// 36****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteHybridMonitorTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHybridMonitorTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteHybridMonitorTaskRequest) SetNamespace(v string) *DeleteHybridMonitorTaskRequest {
	s.Namespace = &v
	return s
}

func (s *DeleteHybridMonitorTaskRequest) SetRegionId(v string) *DeleteHybridMonitorTaskRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteHybridMonitorTaskRequest) SetTargetUserId(v string) *DeleteHybridMonitorTaskRequest {
	s.TargetUserId = &v
	return s
}

func (s *DeleteHybridMonitorTaskRequest) SetTaskId(v string) *DeleteHybridMonitorTaskRequest {
	s.TaskId = &v
	return s
}

type DeleteHybridMonitorTaskResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// null
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// D6B8103F-7BAD-5FEB-945F-71D991AB8834
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteHybridMonitorTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHybridMonitorTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHybridMonitorTaskResponseBody) SetCode(v string) *DeleteHybridMonitorTaskResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteHybridMonitorTaskResponseBody) SetMessage(v string) *DeleteHybridMonitorTaskResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteHybridMonitorTaskResponseBody) SetRequestId(v string) *DeleteHybridMonitorTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteHybridMonitorTaskResponseBody) SetSuccess(v string) *DeleteHybridMonitorTaskResponseBody {
	s.Success = &v
	return s
}

type DeleteHybridMonitorTaskResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHybridMonitorTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHybridMonitorTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHybridMonitorTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteHybridMonitorTaskResponse) SetHeaders(v map[string]*string) *DeleteHybridMonitorTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteHybridMonitorTaskResponse) SetStatusCode(v int32) *DeleteHybridMonitorTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHybridMonitorTaskResponse) SetBody(v *DeleteHybridMonitorTaskResponseBody) *DeleteHybridMonitorTaskResponse {
	s.Body = v
	return s
}

type DeleteLogMonitorRequest struct {
	// The ID returned by Log Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	LogId    *int64  `json:"LogId,omitempty" xml:"LogId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteLogMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogMonitorRequest) GoString() string {
	return s.String()
}

func (s *DeleteLogMonitorRequest) SetLogId(v int64) *DeleteLogMonitorRequest {
	s.LogId = &v
	return s
}

func (s *DeleteLogMonitorRequest) SetRegionId(v string) *DeleteLogMonitorRequest {
	s.RegionId = &v
	return s
}

type DeleteLogMonitorResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// metric not exist.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 42BFFC2B-5E4D-4FDE-BCC6-E91EE33C5967
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteLogMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLogMonitorResponseBody) SetCode(v string) *DeleteLogMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteLogMonitorResponseBody) SetMessage(v string) *DeleteLogMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteLogMonitorResponseBody) SetRequestId(v string) *DeleteLogMonitorResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteLogMonitorResponseBody) SetSuccess(v bool) *DeleteLogMonitorResponseBody {
	s.Success = &v
	return s
}

type DeleteLogMonitorResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLogMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLogMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogMonitorResponse) GoString() string {
	return s.String()
}

func (s *DeleteLogMonitorResponse) SetHeaders(v map[string]*string) *DeleteLogMonitorResponse {
	s.Headers = v
	return s
}

func (s *DeleteLogMonitorResponse) SetStatusCode(v int32) *DeleteLogMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLogMonitorResponse) SetBody(v *DeleteLogMonitorResponseBody) *DeleteLogMonitorResponse {
	s.Body = v
	return s
}

type DeleteMetricRuleBlackListRequest struct {
	// The IDs of the blacklist policies. Separate multiple IDs with commas (,). You can specify up to 50 IDs.
	//
	// For more information about how to obtain the ID of a blacklist policy, see [DescribeMetricRuleBlackList](https://help.aliyun.com/document_detail/457257.html).
	//
	// >  You can also set this parameter to a JSON array. Example: `["a9ad2ac2-3ed9-11ed-b878-0242ac12****","5cb8a9a4-198f-4651-a353-f8b28788****"]`.
	//
	// This parameter is required.
	//
	// example:
	//
	// a9ad2ac2-3ed9-11ed-b878-0242ac12****
	Id       *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteMetricRuleBlackListRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleBlackListRequest) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleBlackListRequest) SetId(v string) *DeleteMetricRuleBlackListRequest {
	s.Id = &v
	return s
}

func (s *DeleteMetricRuleBlackListRequest) SetRegionId(v string) *DeleteMetricRuleBlackListRequest {
	s.RegionId = &v
	return s
}

type DeleteMetricRuleBlackListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The number of blacklist policies that are deleted.
	//
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B88D233C-A004-3AB8-AD9C-30CBDD4440C5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMetricRuleBlackListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleBlackListResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleBlackListResponseBody) SetCode(v string) *DeleteMetricRuleBlackListResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMetricRuleBlackListResponseBody) SetCount(v int32) *DeleteMetricRuleBlackListResponseBody {
	s.Count = &v
	return s
}

func (s *DeleteMetricRuleBlackListResponseBody) SetMessage(v string) *DeleteMetricRuleBlackListResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMetricRuleBlackListResponseBody) SetRequestId(v string) *DeleteMetricRuleBlackListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMetricRuleBlackListResponseBody) SetSuccess(v bool) *DeleteMetricRuleBlackListResponseBody {
	s.Success = &v
	return s
}

type DeleteMetricRuleBlackListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMetricRuleBlackListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMetricRuleBlackListResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleBlackListResponse) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleBlackListResponse) SetHeaders(v map[string]*string) *DeleteMetricRuleBlackListResponse {
	s.Headers = v
	return s
}

func (s *DeleteMetricRuleBlackListResponse) SetStatusCode(v int32) *DeleteMetricRuleBlackListResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMetricRuleBlackListResponse) SetBody(v *DeleteMetricRuleBlackListResponseBody) *DeleteMetricRuleBlackListResponse {
	s.Body = v
	return s
}

type DeleteMetricRuleResourcesRequest struct {
	// The resources that are associated with the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{"instanceId":"i-uf6hm9lnlzsarrc7****"}]
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// The ID of the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// rr-bp18017n6iolv****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DeleteMetricRuleResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleResourcesRequest) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleResourcesRequest) SetResources(v string) *DeleteMetricRuleResourcesRequest {
	s.Resources = &v
	return s
}

func (s *DeleteMetricRuleResourcesRequest) SetRuleId(v string) *DeleteMetricRuleResourcesRequest {
	s.RuleId = &v
	return s
}

type DeleteMetricRuleResourcesResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The alert does not exist.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// D8A35882-90C6-4F03-BBEB-153C180398EA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMetricRuleResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleResourcesResponseBody) SetCode(v string) *DeleteMetricRuleResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMetricRuleResourcesResponseBody) SetMessage(v string) *DeleteMetricRuleResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMetricRuleResourcesResponseBody) SetRequestId(v string) *DeleteMetricRuleResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMetricRuleResourcesResponseBody) SetSuccess(v bool) *DeleteMetricRuleResourcesResponseBody {
	s.Success = &v
	return s
}

type DeleteMetricRuleResourcesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMetricRuleResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMetricRuleResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleResourcesResponse) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleResourcesResponse) SetHeaders(v map[string]*string) *DeleteMetricRuleResourcesResponse {
	s.Headers = v
	return s
}

func (s *DeleteMetricRuleResourcesResponse) SetStatusCode(v int32) *DeleteMetricRuleResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMetricRuleResourcesResponse) SetBody(v *DeleteMetricRuleResourcesResponseBody) *DeleteMetricRuleResourcesResponse {
	s.Body = v
	return s
}

type DeleteMetricRuleTargetsRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// ruleId-xxxxxx
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The resource IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	TargetIds []*string `json:"TargetIds,omitempty" xml:"TargetIds,omitempty" type:"Repeated"`
}

func (s DeleteMetricRuleTargetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleTargetsRequest) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleTargetsRequest) SetRegionId(v string) *DeleteMetricRuleTargetsRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteMetricRuleTargetsRequest) SetRuleId(v string) *DeleteMetricRuleTargetsRequest {
	s.RuleId = &v
	return s
}

func (s *DeleteMetricRuleTargetsRequest) SetTargetIds(v []*string) *DeleteMetricRuleTargetsRequest {
	s.TargetIds = v
	return s
}

type DeleteMetricRuleTargetsResponseBody struct {
	// The HTTP status code.
	//
	// **
	//
	// **Description*	- The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The IDs of the resources that failed to be deleted.
	FailIds *DeleteMetricRuleTargetsResponseBodyFailIds `json:"FailIds,omitempty" xml:"FailIds,omitempty" type:"Struct"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 786E92D2-AC66-4250-B76F-F1E2FCDDBA1C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMetricRuleTargetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleTargetsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleTargetsResponseBody) SetCode(v string) *DeleteMetricRuleTargetsResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMetricRuleTargetsResponseBody) SetFailIds(v *DeleteMetricRuleTargetsResponseBodyFailIds) *DeleteMetricRuleTargetsResponseBody {
	s.FailIds = v
	return s
}

func (s *DeleteMetricRuleTargetsResponseBody) SetMessage(v string) *DeleteMetricRuleTargetsResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMetricRuleTargetsResponseBody) SetRequestId(v string) *DeleteMetricRuleTargetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMetricRuleTargetsResponseBody) SetSuccess(v bool) *DeleteMetricRuleTargetsResponseBody {
	s.Success = &v
	return s
}

type DeleteMetricRuleTargetsResponseBodyFailIds struct {
	// The IDs of the resources that failed to be deleted.
	TargetIds *DeleteMetricRuleTargetsResponseBodyFailIdsTargetIds `json:"TargetIds,omitempty" xml:"TargetIds,omitempty" type:"Struct"`
}

func (s DeleteMetricRuleTargetsResponseBodyFailIds) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleTargetsResponseBodyFailIds) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleTargetsResponseBodyFailIds) SetTargetIds(v *DeleteMetricRuleTargetsResponseBodyFailIdsTargetIds) *DeleteMetricRuleTargetsResponseBodyFailIds {
	s.TargetIds = v
	return s
}

type DeleteMetricRuleTargetsResponseBodyFailIdsTargetIds struct {
	TargetId []*string `json:"TargetId,omitempty" xml:"TargetId,omitempty" type:"Repeated"`
}

func (s DeleteMetricRuleTargetsResponseBodyFailIdsTargetIds) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleTargetsResponseBodyFailIdsTargetIds) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleTargetsResponseBodyFailIdsTargetIds) SetTargetId(v []*string) *DeleteMetricRuleTargetsResponseBodyFailIdsTargetIds {
	s.TargetId = v
	return s
}

type DeleteMetricRuleTargetsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMetricRuleTargetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMetricRuleTargetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleTargetsResponse) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleTargetsResponse) SetHeaders(v map[string]*string) *DeleteMetricRuleTargetsResponse {
	s.Headers = v
	return s
}

func (s *DeleteMetricRuleTargetsResponse) SetStatusCode(v int32) *DeleteMetricRuleTargetsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMetricRuleTargetsResponse) SetBody(v *DeleteMetricRuleTargetsResponseBody) *DeleteMetricRuleTargetsResponse {
	s.Body = v
	return s
}

type DeleteMetricRuleTemplateRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert template.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteMetricRuleTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleTemplateRequest) SetRegionId(v string) *DeleteMetricRuleTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteMetricRuleTemplateRequest) SetTemplateId(v string) *DeleteMetricRuleTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteMetricRuleTemplateResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 7B63F8CF-D48D-4608-A402-04FB5B2B4B6A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the alert template.
	Resource *DeleteMetricRuleTemplateResponseBodyResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMetricRuleTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleTemplateResponseBody) SetCode(v int32) *DeleteMetricRuleTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMetricRuleTemplateResponseBody) SetMessage(v string) *DeleteMetricRuleTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMetricRuleTemplateResponseBody) SetRequestId(v string) *DeleteMetricRuleTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMetricRuleTemplateResponseBody) SetResource(v *DeleteMetricRuleTemplateResponseBodyResource) *DeleteMetricRuleTemplateResponseBody {
	s.Resource = v
	return s
}

func (s *DeleteMetricRuleTemplateResponseBody) SetSuccess(v bool) *DeleteMetricRuleTemplateResponseBody {
	s.Success = &v
	return s
}

type DeleteMetricRuleTemplateResponseBodyResource struct {
	// The ID of the template.
	//
	// example:
	//
	// 123****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteMetricRuleTemplateResponseBodyResource) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleTemplateResponseBodyResource) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleTemplateResponseBodyResource) SetTemplateId(v string) *DeleteMetricRuleTemplateResponseBodyResource {
	s.TemplateId = &v
	return s
}

type DeleteMetricRuleTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMetricRuleTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMetricRuleTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRuleTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteMetricRuleTemplateResponse) SetHeaders(v map[string]*string) *DeleteMetricRuleTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteMetricRuleTemplateResponse) SetStatusCode(v int32) *DeleteMetricRuleTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMetricRuleTemplateResponse) SetBody(v *DeleteMetricRuleTemplateResponseBody) *DeleteMetricRuleTemplateResponse {
	s.Body = v
	return s
}

type DeleteMetricRulesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ab05733c97b7ce239fb1b53393dc1697c7e12****
	Id       []*string `json:"Id,omitempty" xml:"Id,omitempty" type:"Repeated"`
	RegionId *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteMetricRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRulesRequest) GoString() string {
	return s.String()
}

func (s *DeleteMetricRulesRequest) SetId(v []*string) *DeleteMetricRulesRequest {
	s.Id = v
	return s
}

func (s *DeleteMetricRulesRequest) SetRegionId(v string) *DeleteMetricRulesRequest {
	s.RegionId = &v
	return s
}

type DeleteMetricRulesResponseBody struct {
	// The status code.
	//
	// >  The status code 200 indicates a success.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// E5599964-8D0D-40DC-8E90-27A619384B81
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful. Valid values:
	//
	// 	- true: successful.
	//
	// 	- false: failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMetricRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMetricRulesResponseBody) SetCode(v string) *DeleteMetricRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMetricRulesResponseBody) SetMessage(v string) *DeleteMetricRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMetricRulesResponseBody) SetRequestId(v string) *DeleteMetricRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMetricRulesResponseBody) SetSuccess(v bool) *DeleteMetricRulesResponseBody {
	s.Success = &v
	return s
}

type DeleteMetricRulesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMetricRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMetricRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMetricRulesResponse) GoString() string {
	return s.String()
}

func (s *DeleteMetricRulesResponse) SetHeaders(v map[string]*string) *DeleteMetricRulesResponse {
	s.Headers = v
	return s
}

func (s *DeleteMetricRulesResponse) SetStatusCode(v int32) *DeleteMetricRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMetricRulesResponse) SetBody(v *DeleteMetricRulesResponseBody) *DeleteMetricRulesResponse {
	s.Body = v
	return s
}

type DeleteMonitorGroupRequest struct {
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId  *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteMonitorGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupRequest) SetGroupId(v int64) *DeleteMonitorGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteMonitorGroupRequest) SetRegionId(v string) *DeleteMonitorGroupRequest {
	s.RegionId = &v
	return s
}

type DeleteMonitorGroupResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The deleted application group.
	Group *DeleteMonitorGroupResponseBodyGroup `json:"Group,omitempty" xml:"Group,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CA35B3AE-4FFD-4A33-AE67-67EF68711EFA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMonitorGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupResponseBody) SetCode(v int32) *DeleteMonitorGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMonitorGroupResponseBody) SetGroup(v *DeleteMonitorGroupResponseBodyGroup) *DeleteMonitorGroupResponseBody {
	s.Group = v
	return s
}

func (s *DeleteMonitorGroupResponseBody) SetMessage(v string) *DeleteMonitorGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMonitorGroupResponseBody) SetRequestId(v string) *DeleteMonitorGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMonitorGroupResponseBody) SetSuccess(v bool) *DeleteMonitorGroupResponseBody {
	s.Success = &v
	return s
}

type DeleteMonitorGroupResponseBodyGroup struct {
	// The alert groups that receive alert notifications for the application group.
	ContactGroups *DeleteMonitorGroupResponseBodyGroupContactGroups `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty" type:"Struct"`
	// The name of the application group.
	//
	// example:
	//
	// ECS_test
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s DeleteMonitorGroupResponseBodyGroup) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupResponseBodyGroup) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupResponseBodyGroup) SetContactGroups(v *DeleteMonitorGroupResponseBodyGroupContactGroups) *DeleteMonitorGroupResponseBodyGroup {
	s.ContactGroups = v
	return s
}

func (s *DeleteMonitorGroupResponseBodyGroup) SetGroupName(v string) *DeleteMonitorGroupResponseBodyGroup {
	s.GroupName = &v
	return s
}

type DeleteMonitorGroupResponseBodyGroupContactGroups struct {
	ContactGroup []*DeleteMonitorGroupResponseBodyGroupContactGroupsContactGroup `json:"ContactGroup,omitempty" xml:"ContactGroup,omitempty" type:"Repeated"`
}

func (s DeleteMonitorGroupResponseBodyGroupContactGroups) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupResponseBodyGroupContactGroups) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupResponseBodyGroupContactGroups) SetContactGroup(v []*DeleteMonitorGroupResponseBodyGroupContactGroupsContactGroup) *DeleteMonitorGroupResponseBodyGroupContactGroups {
	s.ContactGroup = v
	return s
}

type DeleteMonitorGroupResponseBodyGroupContactGroupsContactGroup struct {
	// The name of the alert group.
	//
	// example:
	//
	// ECS_Group
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DeleteMonitorGroupResponseBodyGroupContactGroupsContactGroup) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupResponseBodyGroupContactGroupsContactGroup) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupResponseBodyGroupContactGroupsContactGroup) SetName(v string) *DeleteMonitorGroupResponseBodyGroupContactGroupsContactGroup {
	s.Name = &v
	return s
}

type DeleteMonitorGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMonitorGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMonitorGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupResponse) SetHeaders(v map[string]*string) *DeleteMonitorGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteMonitorGroupResponse) SetStatusCode(v int32) *DeleteMonitorGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMonitorGroupResponse) SetBody(v *DeleteMonitorGroupResponseBody) *DeleteMonitorGroupResponse {
	s.Body = v
	return s
}

type DeleteMonitorGroupDynamicRuleRequest struct {
	// The service to which the rule applies. Valid values: ecs, rds, and slb.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId  *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteMonitorGroupDynamicRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupDynamicRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupDynamicRuleRequest) SetCategory(v string) *DeleteMonitorGroupDynamicRuleRequest {
	s.Category = &v
	return s
}

func (s *DeleteMonitorGroupDynamicRuleRequest) SetGroupId(v int64) *DeleteMonitorGroupDynamicRuleRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteMonitorGroupDynamicRuleRequest) SetRegionId(v string) *DeleteMonitorGroupDynamicRuleRequest {
	s.RegionId = &v
	return s
}

type DeleteMonitorGroupDynamicRuleResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 56B4516A-EB44-4C66-8854-0393B35F636B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMonitorGroupDynamicRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupDynamicRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupDynamicRuleResponseBody) SetCode(v int32) *DeleteMonitorGroupDynamicRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMonitorGroupDynamicRuleResponseBody) SetMessage(v string) *DeleteMonitorGroupDynamicRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMonitorGroupDynamicRuleResponseBody) SetRequestId(v string) *DeleteMonitorGroupDynamicRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMonitorGroupDynamicRuleResponseBody) SetSuccess(v bool) *DeleteMonitorGroupDynamicRuleResponseBody {
	s.Success = &v
	return s
}

type DeleteMonitorGroupDynamicRuleResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMonitorGroupDynamicRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMonitorGroupDynamicRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupDynamicRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupDynamicRuleResponse) SetHeaders(v map[string]*string) *DeleteMonitorGroupDynamicRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteMonitorGroupDynamicRuleResponse) SetStatusCode(v int32) *DeleteMonitorGroupDynamicRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMonitorGroupDynamicRuleResponse) SetBody(v *DeleteMonitorGroupDynamicRuleResponseBody) *DeleteMonitorGroupDynamicRuleResponse {
	s.Body = v
	return s
}

type DeleteMonitorGroupInstancesRequest struct {
	// The abbreviation of the cloud service name.
	//
	// >  For more information about how to obtain the abbreviation of a cloud service name, see `metricCategory` in the response parameter `Labels` of the [DescribeProjectMeta](https://help.aliyun.com/document_detail/114916.html) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The instances to be removed from the application group. Separate multiple instances with commas (,). You can remove a maximum of 20 instances from an application group at a time.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-a2d5q7pm3f912****,i-a2d5q7pm3f222****
	InstanceIdList *string `json:"InstanceIdList,omitempty" xml:"InstanceIdList,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteMonitorGroupInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupInstancesRequest) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupInstancesRequest) SetCategory(v string) *DeleteMonitorGroupInstancesRequest {
	s.Category = &v
	return s
}

func (s *DeleteMonitorGroupInstancesRequest) SetGroupId(v int64) *DeleteMonitorGroupInstancesRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteMonitorGroupInstancesRequest) SetInstanceIdList(v string) *DeleteMonitorGroupInstancesRequest {
	s.InstanceIdList = &v
	return s
}

func (s *DeleteMonitorGroupInstancesRequest) SetRegionId(v string) *DeleteMonitorGroupInstancesRequest {
	s.RegionId = &v
	return s
}

type DeleteMonitorGroupInstancesResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 5351B0F2-26A9-4BC9-87FF-1B74034D12C3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMonitorGroupInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupInstancesResponseBody) SetCode(v int32) *DeleteMonitorGroupInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMonitorGroupInstancesResponseBody) SetMessage(v string) *DeleteMonitorGroupInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMonitorGroupInstancesResponseBody) SetRequestId(v string) *DeleteMonitorGroupInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMonitorGroupInstancesResponseBody) SetSuccess(v bool) *DeleteMonitorGroupInstancesResponseBody {
	s.Success = &v
	return s
}

type DeleteMonitorGroupInstancesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMonitorGroupInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMonitorGroupInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupInstancesResponse) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupInstancesResponse) SetHeaders(v map[string]*string) *DeleteMonitorGroupInstancesResponse {
	s.Headers = v
	return s
}

func (s *DeleteMonitorGroupInstancesResponse) SetStatusCode(v int32) *DeleteMonitorGroupInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMonitorGroupInstancesResponse) SetBody(v *DeleteMonitorGroupInstancesResponseBody) *DeleteMonitorGroupInstancesResponse {
	s.Body = v
	return s
}

type DeleteMonitorGroupNotifyPolicyRequest struct {
	// The ID of the application group.
	//
	// example:
	//
	// 6780****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The policy type.
	//
	// Valid value: PauseNotify.
	//
	// This parameter is required.
	//
	// example:
	//
	// PauseNotify
	PolicyType *string `json:"PolicyType,omitempty" xml:"PolicyType,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteMonitorGroupNotifyPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupNotifyPolicyRequest) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupNotifyPolicyRequest) SetGroupId(v string) *DeleteMonitorGroupNotifyPolicyRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteMonitorGroupNotifyPolicyRequest) SetPolicyType(v string) *DeleteMonitorGroupNotifyPolicyRequest {
	s.PolicyType = &v
	return s
}

func (s *DeleteMonitorGroupNotifyPolicyRequest) SetRegionId(v string) *DeleteMonitorGroupNotifyPolicyRequest {
	s.RegionId = &v
	return s
}

type DeleteMonitorGroupNotifyPolicyResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B7AF834D-D38B-4A46-920B-FE974EB7E135
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of affected rows.
	//
	// example:
	//
	// 1
	Result *int32 `json:"Result,omitempty" xml:"Result,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMonitorGroupNotifyPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupNotifyPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupNotifyPolicyResponseBody) SetCode(v string) *DeleteMonitorGroupNotifyPolicyResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMonitorGroupNotifyPolicyResponseBody) SetMessage(v string) *DeleteMonitorGroupNotifyPolicyResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMonitorGroupNotifyPolicyResponseBody) SetRequestId(v string) *DeleteMonitorGroupNotifyPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMonitorGroupNotifyPolicyResponseBody) SetResult(v int32) *DeleteMonitorGroupNotifyPolicyResponseBody {
	s.Result = &v
	return s
}

func (s *DeleteMonitorGroupNotifyPolicyResponseBody) SetSuccess(v string) *DeleteMonitorGroupNotifyPolicyResponseBody {
	s.Success = &v
	return s
}

type DeleteMonitorGroupNotifyPolicyResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMonitorGroupNotifyPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMonitorGroupNotifyPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitorGroupNotifyPolicyResponse) GoString() string {
	return s.String()
}

func (s *DeleteMonitorGroupNotifyPolicyResponse) SetHeaders(v map[string]*string) *DeleteMonitorGroupNotifyPolicyResponse {
	s.Headers = v
	return s
}

func (s *DeleteMonitorGroupNotifyPolicyResponse) SetStatusCode(v int32) *DeleteMonitorGroupNotifyPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMonitorGroupNotifyPolicyResponse) SetBody(v *DeleteMonitorGroupNotifyPolicyResponseBody) *DeleteMonitorGroupNotifyPolicyResponse {
	s.Body = v
	return s
}

type DeleteMonitoringAgentProcessRequest struct {
	// The instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-KpVny6l****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The process ID.
	//
	// > You must configure either `ProcessId` or `ProcessName`.
	//
	// example:
	//
	// 123****
	ProcessId *string `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
	// The process name.
	//
	// > You must configure either `ProcessId` or `ProcessName`.
	//
	// example:
	//
	// http
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteMonitoringAgentProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitoringAgentProcessRequest) GoString() string {
	return s.String()
}

func (s *DeleteMonitoringAgentProcessRequest) SetInstanceId(v string) *DeleteMonitoringAgentProcessRequest {
	s.InstanceId = &v
	return s
}

func (s *DeleteMonitoringAgentProcessRequest) SetProcessId(v string) *DeleteMonitoringAgentProcessRequest {
	s.ProcessId = &v
	return s
}

func (s *DeleteMonitoringAgentProcessRequest) SetProcessName(v string) *DeleteMonitoringAgentProcessRequest {
	s.ProcessName = &v
	return s
}

func (s *DeleteMonitoringAgentProcessRequest) SetRegionId(v string) *DeleteMonitoringAgentProcessRequest {
	s.RegionId = &v
	return s
}

type DeleteMonitoringAgentProcessResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 971CC023-5A96-452A-BB7C-2483F948BCFD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMonitoringAgentProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitoringAgentProcessResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMonitoringAgentProcessResponseBody) SetCode(v string) *DeleteMonitoringAgentProcessResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMonitoringAgentProcessResponseBody) SetMessage(v string) *DeleteMonitoringAgentProcessResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteMonitoringAgentProcessResponseBody) SetRequestId(v string) *DeleteMonitoringAgentProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMonitoringAgentProcessResponseBody) SetSuccess(v bool) *DeleteMonitoringAgentProcessResponseBody {
	s.Success = &v
	return s
}

type DeleteMonitoringAgentProcessResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMonitoringAgentProcessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMonitoringAgentProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMonitoringAgentProcessResponse) GoString() string {
	return s.String()
}

func (s *DeleteMonitoringAgentProcessResponse) SetHeaders(v map[string]*string) *DeleteMonitoringAgentProcessResponse {
	s.Headers = v
	return s
}

func (s *DeleteMonitoringAgentProcessResponse) SetStatusCode(v int32) *DeleteMonitoringAgentProcessResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMonitoringAgentProcessResponse) SetBody(v *DeleteMonitoringAgentProcessResponseBody) *DeleteMonitoringAgentProcessResponse {
	s.Body = v
	return s
}

type DeleteSiteMonitorsRequest struct {
	// Specifies whether to delete the alert rules configured for the site monitoring tasks. Valid values:
	//
	// 	- true (default value)
	//
	// 	- false
	//
	// example:
	//
	// true
	IsDeleteAlarms *bool   `json:"IsDeleteAlarms,omitempty" xml:"IsDeleteAlarms,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The IDs of the site monitoring tasks that you want to delete. Separate multiple task IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// 01adacc2-ece5-41b6-afa2-3143ab5d****,43bd1ead-514f-4524-813e-228ce091****
	TaskIds *string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty"`
}

func (s DeleteSiteMonitorsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSiteMonitorsRequest) GoString() string {
	return s.String()
}

func (s *DeleteSiteMonitorsRequest) SetIsDeleteAlarms(v bool) *DeleteSiteMonitorsRequest {
	s.IsDeleteAlarms = &v
	return s
}

func (s *DeleteSiteMonitorsRequest) SetRegionId(v string) *DeleteSiteMonitorsRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSiteMonitorsRequest) SetTaskIds(v string) *DeleteSiteMonitorsRequest {
	s.TaskIds = &v
	return s
}

type DeleteSiteMonitorsResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the site monitoring tasks that were deleted.
	Data *DeleteSiteMonitorsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message. If the call was successful, the value success is returned. If the call failed, an error message such as `TaskId not found` is returned.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 123BCC5D-8B63-48EA-B747-9A8995BE7AA6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates success. The value false indicates failure.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteSiteMonitorsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSiteMonitorsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSiteMonitorsResponseBody) SetCode(v string) *DeleteSiteMonitorsResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSiteMonitorsResponseBody) SetData(v *DeleteSiteMonitorsResponseBodyData) *DeleteSiteMonitorsResponseBody {
	s.Data = v
	return s
}

func (s *DeleteSiteMonitorsResponseBody) SetMessage(v string) *DeleteSiteMonitorsResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSiteMonitorsResponseBody) SetRequestId(v string) *DeleteSiteMonitorsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSiteMonitorsResponseBody) SetSuccess(v string) *DeleteSiteMonitorsResponseBody {
	s.Success = &v
	return s
}

type DeleteSiteMonitorsResponseBodyData struct {
	// The number of the site monitoring tasks that were deleted.
	//
	// example:
	//
	// 0
	Count *int32 `json:"count,omitempty" xml:"count,omitempty"`
}

func (s DeleteSiteMonitorsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteSiteMonitorsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteSiteMonitorsResponseBodyData) SetCount(v int32) *DeleteSiteMonitorsResponseBodyData {
	s.Count = &v
	return s
}

type DeleteSiteMonitorsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSiteMonitorsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSiteMonitorsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSiteMonitorsResponse) GoString() string {
	return s.String()
}

func (s *DeleteSiteMonitorsResponse) SetHeaders(v map[string]*string) *DeleteSiteMonitorsResponse {
	s.Headers = v
	return s
}

func (s *DeleteSiteMonitorsResponse) SetStatusCode(v int32) *DeleteSiteMonitorsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSiteMonitorsResponse) SetBody(v *DeleteSiteMonitorsResponseBody) *DeleteSiteMonitorsResponse {
	s.Body = v
	return s
}

type DescribeActiveMetricRuleListRequest struct {
	// The abbreviation of the cloud service that supports initiative alert rules.
	//
	// For more information about how to obtain the name of a cloud service, see [DescribeProductsOfActiveMetricRule](https://help.aliyun.com/document_detail/114930.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
}

func (s DescribeActiveMetricRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListRequest) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListRequest) SetProduct(v string) *DescribeActiveMetricRuleListRequest {
	s.Product = &v
	return s
}

type DescribeActiveMetricRuleListResponseBody struct {
	// The details of the alert rules. The result is in the same structure as that returned by the DescribeMetricRuleList operation.
	AlertList *DescribeActiveMetricRuleListResponseBodyAlertList `json:"AlertList,omitempty" xml:"AlertList,omitempty" type:"Struct"`
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the alert rules.
	Datapoints *DescribeActiveMetricRuleListResponseBodyDatapoints `json:"Datapoints,omitempty" xml:"Datapoints,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// F82E6667-7811-4BA0-842F-5B2DC42BBAAD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeActiveMetricRuleListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListResponseBody) SetAlertList(v *DescribeActiveMetricRuleListResponseBodyAlertList) *DescribeActiveMetricRuleListResponseBody {
	s.AlertList = v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBody) SetCode(v string) *DescribeActiveMetricRuleListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBody) SetDatapoints(v *DescribeActiveMetricRuleListResponseBodyDatapoints) *DescribeActiveMetricRuleListResponseBody {
	s.Datapoints = v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBody) SetMessage(v string) *DescribeActiveMetricRuleListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBody) SetRequestId(v string) *DescribeActiveMetricRuleListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBody) SetSuccess(v bool) *DescribeActiveMetricRuleListResponseBody {
	s.Success = &v
	return s
}

type DescribeActiveMetricRuleListResponseBodyAlertList struct {
	Alert []*DescribeActiveMetricRuleListResponseBodyAlertListAlert `json:"Alert,omitempty" xml:"Alert,omitempty" type:"Repeated"`
}

func (s DescribeActiveMetricRuleListResponseBodyAlertList) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListResponseBodyAlertList) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertList) SetAlert(v []*DescribeActiveMetricRuleListResponseBodyAlertListAlert) *DescribeActiveMetricRuleListResponseBodyAlertList {
	s.Alert = v
	return s
}

type DescribeActiveMetricRuleListResponseBodyAlertListAlert struct {
	// The status of the alert rule. Valid values:
	//
	// 	- OK: The alert rule has no active alerts.
	//
	// 	- ALARM: The alert rule has active alerts.
	//
	// 	- INSUFFICIENT_DATA: No data is found.
	//
	// example:
	//
	// OK
	AlertState *string `json:"AlertState,omitempty" xml:"AlertState,omitempty"`
	// The alert contact group.
	//
	// example:
	//
	// ECS_Group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The monitoring data of the specified resource.
	//
	// example:
	//
	// ""
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The time period during which the alert rule is effective.
	//
	// example:
	//
	// 00:00-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// Indicates whether the alert rule is enabled. Valid values:
	//
	// 	- true: The alert rule is enabled.
	//
	// 	- false: The alert rule is disabled.
	//
	// example:
	//
	// true
	EnableState *bool `json:"EnableState,omitempty" xml:"EnableState,omitempty"`
	// The conditions for triggering different levels of alerts.
	Escalations *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Struct"`
	// The subject of the alert notification email.
	//
	// example:
	//
	// ECS_Bucket
	MailSubject *string `json:"MailSubject,omitempty" xml:"MailSubject,omitempty"`
	// The name of the metric.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the Alibaba Cloud service.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The time period during which the alert rule is ineffective.
	//
	// example:
	//
	// 00:00-06:00
	NoEffectiveInterval *string `json:"NoEffectiveInterval,omitempty" xml:"NoEffectiveInterval,omitempty"`
	// The aggregation period of monitoring data.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The resources that are associated with the alert rule.
	//
	// example:
	//
	// [{"resource":"_ALL"}]
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// ruleIdxxxx
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// myAlert
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which new alerts are not sent even if the trigger conditions are met.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 86400
	SilenceTime *string `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// http://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s DescribeActiveMetricRuleListResponseBodyAlertListAlert) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListResponseBodyAlertListAlert) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetAlertState(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.AlertState = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetContactGroups(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.ContactGroups = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetDimensions(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.Dimensions = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetEffectiveInterval(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.EffectiveInterval = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetEnableState(v bool) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.EnableState = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetEscalations(v *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.Escalations = v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetMailSubject(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.MailSubject = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetMetricName(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.MetricName = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetNamespace(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.Namespace = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetNoEffectiveInterval(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.NoEffectiveInterval = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetPeriod(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.Period = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetResources(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.Resources = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetRuleId(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.RuleId = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetRuleName(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.RuleName = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetSilenceTime(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.SilenceTime = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlert) SetWebhook(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlert {
	s.Webhook = &v
	return s
}

type DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations struct {
	// The trigger condition for Critical-level alerts.
	Critical *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	// The conditions for triggering Info-level alerts.
	Info *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	// The conditions for triggering Warn-level alerts.
	Warn *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn `json:"Warn,omitempty" xml:"Warn,omitempty" type:"Struct"`
}

func (s DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations) SetCritical(v *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations {
	s.Critical = v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations) SetInfo(v *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations {
	s.Info = v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations) SetWarn(v *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalations {
	s.Warn = v
	return s
}

type DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical struct {
	// The operator that is used to compare the metric value with the threshold for Critical-level alerts. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Critical-level alerts.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Critical-level alerts.
	//
	// example:
	//
	// 99
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Critical-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *string `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical) SetComparisonOperator(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical) SetStatistics(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical {
	s.Statistics = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical) SetThreshold(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical {
	s.Threshold = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical) SetTimes(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsCritical {
	s.Times = &v
	return s
}

type DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo struct {
	// The operator that is used to compare the metric value with the threshold for Info-level alerts. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Info-level alerts.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Info-level alerts.
	//
	// example:
	//
	// 95
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times
	//
	// for which the metric value meets the alert condition before an Info-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *string `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo) SetComparisonOperator(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo) SetStatistics(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo {
	s.Statistics = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo) SetThreshold(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo {
	s.Threshold = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo) SetTimes(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsInfo {
	s.Times = &v
	return s
}

type DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn struct {
	// The operator that is used to compare the metric value with the threshold for Warn-level alerts. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Warn-level alerts.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Warn-level alerts.
	//
	// example:
	//
	// 80
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times
	//
	// for which the metric value meets the alert condition before a Warn-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *string `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn) SetComparisonOperator(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn) SetStatistics(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn {
	s.Statistics = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn) SetThreshold(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn {
	s.Threshold = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn) SetTimes(v string) *DescribeActiveMetricRuleListResponseBodyAlertListAlertEscalationsWarn {
	s.Times = &v
	return s
}

type DescribeActiveMetricRuleListResponseBodyDatapoints struct {
	Alarm []*DescribeActiveMetricRuleListResponseBodyDatapointsAlarm `json:"Alarm,omitempty" xml:"Alarm,omitempty" type:"Repeated"`
}

func (s DescribeActiveMetricRuleListResponseBodyDatapoints) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListResponseBodyDatapoints) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapoints) SetAlarm(v []*DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) *DescribeActiveMetricRuleListResponseBodyDatapoints {
	s.Alarm = v
	return s
}

type DescribeActiveMetricRuleListResponseBodyDatapointsAlarm struct {
	// The comparison operator that is used in the alert rule. Valid values:
	//
	// 	- `>`
	//
	// 	- `<`
	//
	// 	- `>=`
	//
	// 	- `<=`
	//
	// 	- `=`
	//
	// 	- `=`
	//
	// example:
	//
	// >
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The alert contact group.
	//
	// example:
	//
	// ECS_Group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// Indicates whether the alert rule is enabled. Valid values:
	//
	// 	- true: The alert rule is enabled.
	//
	// 	- false: The alert rule is disabled.
	//
	// example:
	//
	// true
	Enable *string `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// The end of the time period during which the alert rule is effective.
	//
	// Unit: hours. For example, the value 23 indicates `23:59:59`.
	//
	// example:
	//
	// 24
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an alert is triggered.
	//
	// example:
	//
	// 3
	EvaluationCount *string `json:"EvaluationCount,omitempty" xml:"EvaluationCount,omitempty"`
	// The metric name.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The aggregation period of monitoring data.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// a151cd6023eacee2f0978e03863cc1697c89508****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// SystemDefault_acs_rds_dashboard_CpuUsage
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which new alerts are not sent even if the trigger conditions are met.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 86400
	SilenceTime *string `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The beginning of the time period during which the alert rule is effective.
	//
	// Unit: hours. For example, the value 00 indicates `00:00:00`.
	//
	// example:
	//
	// 00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// Indicates whether the alert rule is enabled.
	//
	// example:
	//
	// Enable
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The statistical method.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The alert threshold.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// http://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetComparisonOperator(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetContactGroups(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.ContactGroups = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetEnable(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.Enable = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetEndTime(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.EndTime = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetEvaluationCount(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.EvaluationCount = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetMetricName(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.MetricName = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetNamespace(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.Namespace = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetPeriod(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.Period = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetRuleId(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.RuleId = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetRuleName(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.RuleName = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetSilenceTime(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.SilenceTime = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetStartTime(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.StartTime = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetState(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.State = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetStatistics(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.Statistics = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetThreshold(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.Threshold = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm) SetWebhook(v string) *DescribeActiveMetricRuleListResponseBodyDatapointsAlarm {
	s.Webhook = &v
	return s
}

type DescribeActiveMetricRuleListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeActiveMetricRuleListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeActiveMetricRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeActiveMetricRuleListResponse) GoString() string {
	return s.String()
}

func (s *DescribeActiveMetricRuleListResponse) SetHeaders(v map[string]*string) *DescribeActiveMetricRuleListResponse {
	s.Headers = v
	return s
}

func (s *DescribeActiveMetricRuleListResponse) SetStatusCode(v int32) *DescribeActiveMetricRuleListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeActiveMetricRuleListResponse) SetBody(v *DescribeActiveMetricRuleListResponseBody) *DescribeActiveMetricRuleListResponse {
	s.Body = v
	return s
}

type DescribeAlertHistoryListRequest struct {
	// The order of alerts. Valid values:
	//
	// 	- true (default value): reverse chronological order
	//
	// 	- false: chronological order
	//
	// example:
	//
	// true
	Ascending *bool `json:"Ascending,omitempty" xml:"Ascending,omitempty"`
	// The end timestamp of the historical alerts that you want to query.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1640608200000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the application group.
	//
	// For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// example:
	//
	// 7671****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The metric that is used to monitor the cloud service.
	//
	// For information about how to query the name of a metric, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// For information about how to query the namespace of a cloud service, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The number of the page to return.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries to return on each page.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert rule.
	//
	// For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// example:
	//
	// applyTemplate61dc81b5-d357-4cf6-a9b7-9f83c1d5****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// For information about how to query the name of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// example:
	//
	// ECS_Rule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The start timestamp of the historical alerts that you want to query.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1640237400000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the alert. Valid values:
	//
	// 	- ALARM (default value): Alerts are triggered.
	//
	// 	- OK: No alerts are triggered.
	//
	// example:
	//
	// ALARM
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// Specifies whether alerts are muted. Valid values:
	//
	// 	- 2 (default value): Alerts are muted and are not triggered within the mute period, even if the condition specified in the alert rule is met.
	//
	// 	- 0: Alerts are triggered or cleared.
	//
	// 	- 1: The alert rule is ineffective.
	//
	// example:
	//
	// 2
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAlertHistoryListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertHistoryListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertHistoryListRequest) SetAscending(v bool) *DescribeAlertHistoryListRequest {
	s.Ascending = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetEndTime(v string) *DescribeAlertHistoryListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetGroupId(v string) *DescribeAlertHistoryListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetMetricName(v string) *DescribeAlertHistoryListRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetNamespace(v string) *DescribeAlertHistoryListRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetPage(v int32) *DescribeAlertHistoryListRequest {
	s.Page = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetPageSize(v int32) *DescribeAlertHistoryListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetRegionId(v string) *DescribeAlertHistoryListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetRuleId(v string) *DescribeAlertHistoryListRequest {
	s.RuleId = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetRuleName(v string) *DescribeAlertHistoryListRequest {
	s.RuleName = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetStartTime(v string) *DescribeAlertHistoryListRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetState(v string) *DescribeAlertHistoryListRequest {
	s.State = &v
	return s
}

func (s *DescribeAlertHistoryListRequest) SetStatus(v string) *DescribeAlertHistoryListRequest {
	s.Status = &v
	return s
}

type DescribeAlertHistoryListResponseBody struct {
	// The details of historical alerts.
	AlarmHistoryList *DescribeAlertHistoryListResponseBodyAlarmHistoryList `json:"AlarmHistoryList,omitempty" xml:"AlarmHistoryList,omitempty" type:"Struct"`
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C3C69FBE-2262-541F-A409-C52F380BAE63
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	Total *string `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeAlertHistoryListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertHistoryListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertHistoryListResponseBody) SetAlarmHistoryList(v *DescribeAlertHistoryListResponseBodyAlarmHistoryList) *DescribeAlertHistoryListResponseBody {
	s.AlarmHistoryList = v
	return s
}

func (s *DescribeAlertHistoryListResponseBody) SetCode(v string) *DescribeAlertHistoryListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBody) SetMessage(v string) *DescribeAlertHistoryListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBody) SetRequestId(v string) *DescribeAlertHistoryListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBody) SetSuccess(v bool) *DescribeAlertHistoryListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBody) SetTotal(v string) *DescribeAlertHistoryListResponseBody {
	s.Total = &v
	return s
}

type DescribeAlertHistoryListResponseBodyAlarmHistoryList struct {
	AlarmHistory []*DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory `json:"AlarmHistory,omitempty" xml:"AlarmHistory,omitempty" type:"Repeated"`
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryList) GoString() string {
	return s.String()
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryList) SetAlarmHistory(v []*DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) *DescribeAlertHistoryListResponseBodyAlarmHistoryList {
	s.AlarmHistory = v
	return s
}

type DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory struct {
	// The timestamp when the alert was triggered. Unit: milliseconds.
	//
	// example:
	//
	// 1640586600000
	AlertTime *int64 `json:"AlertTime,omitempty" xml:"AlertTime,omitempty"`
	// The TradeManager IDs of the alert contacts.
	//
	// > This parameter is valid only on the China site (aliyun.com).
	ContactALIIMs *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactALIIMs `json:"ContactALIIMs,omitempty" xml:"ContactALIIMs,omitempty" type:"Struct"`
	// The alert contact groups.
	ContactGroups *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactGroups `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty" type:"Struct"`
	// The email addresses of the alert contacts.
	ContactMails *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactMails `json:"ContactMails,omitempty" xml:"ContactMails,omitempty" type:"Struct"`
	// The mobile numbers of the alert contacts.
	//
	// > This parameter is valid only on the China site (aliyun.com).
	ContactSmses *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactSmses `json:"ContactSmses,omitempty" xml:"ContactSmses,omitempty" type:"Struct"`
	// The alert contacts that receive alert notifications.
	Contacts *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Struct"`
	// The resources that are monitored.
	//
	// example:
	//
	// {\\"instanceId\\":\\"i-bp1cqhiw1za2****\\"}
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an alert is triggered.
	//
	// example:
	//
	// 3
	EvaluationCount *int32 `json:"EvaluationCount,omitempty" xml:"EvaluationCount,omitempty"`
	// The expression that is used to trigger alerts.
	//
	// example:
	//
	// $Average>=10
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 7671****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The instance name.
	//
	// example:
	//
	// i-bp1cqhiw1za2****
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The duration of the alert. Unit: milliseconds.
	//
	// example:
	//
	// 360133
	LastTime *int64 `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	// The severity level and notification methods of the alert. Valid values:
	//
	// 	- P4: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// 	- OK: No alert is generated.
	//
	// example:
	//
	// P4
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The metric name.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// applyTemplate61dc81b5-d357-4cf6-a9b7-9f83c1d5****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// ECS_Rule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The alert status. Valid values:
	//
	// 	- ALARM: Alerts are triggered.
	//
	// 	- OK: No alerts are triggered.
	//
	// example:
	//
	// ALARM
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// Indicates whether alerts are muted. Valid values:
	//
	// 	- 2 (default): Alerts are muted and are not triggered within the mute period, even if the condition specified in the alert rule is met.
	//
	// 	- 0: Alerts are triggered or cleared.
	//
	// 	- 1: The alert rule is ineffective.
	//
	// example:
	//
	// 2
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The threshold of the metric value to trigger or clear an alert.
	//
	// example:
	//
	// 10.58
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// https://www.aliyun.com
	Webhooks *string `json:"Webhooks,omitempty" xml:"Webhooks,omitempty"`
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) GoString() string {
	return s.String()
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetAlertTime(v int64) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.AlertTime = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetContactALIIMs(v *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactALIIMs) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.ContactALIIMs = v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetContactGroups(v *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactGroups) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.ContactGroups = v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetContactMails(v *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactMails) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.ContactMails = v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetContactSmses(v *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactSmses) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.ContactSmses = v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetContacts(v *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContacts) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.Contacts = v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetDimensions(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.Dimensions = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetEvaluationCount(v int32) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.EvaluationCount = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetExpression(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.Expression = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetGroupId(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.GroupId = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetInstanceName(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.InstanceName = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetLastTime(v int64) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.LastTime = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetLevel(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.Level = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetMetricName(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.MetricName = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetNamespace(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.Namespace = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetRuleId(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.RuleId = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetRuleName(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.RuleName = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetState(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.State = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetStatus(v int32) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.Status = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetValue(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.Value = &v
	return s
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory) SetWebhooks(v string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistory {
	s.Webhooks = &v
	return s
}

type DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactALIIMs struct {
	ContactALIIM []*string `json:"ContactALIIM,omitempty" xml:"ContactALIIM,omitempty" type:"Repeated"`
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactALIIMs) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactALIIMs) GoString() string {
	return s.String()
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactALIIMs) SetContactALIIM(v []*string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactALIIMs {
	s.ContactALIIM = v
	return s
}

type DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactGroups struct {
	ContactGroup []*string `json:"ContactGroup,omitempty" xml:"ContactGroup,omitempty" type:"Repeated"`
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactGroups) GoString() string {
	return s.String()
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactGroups) SetContactGroup(v []*string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactGroups {
	s.ContactGroup = v
	return s
}

type DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactMails struct {
	ContactMail []*string `json:"ContactMail,omitempty" xml:"ContactMail,omitempty" type:"Repeated"`
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactMails) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactMails) GoString() string {
	return s.String()
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactMails) SetContactMail(v []*string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactMails {
	s.ContactMail = v
	return s
}

type DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactSmses struct {
	ContactSms []*string `json:"ContactSms,omitempty" xml:"ContactSms,omitempty" type:"Repeated"`
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactSmses) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactSmses) GoString() string {
	return s.String()
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactSmses) SetContactSms(v []*string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContactSmses {
	s.ContactSms = v
	return s
}

type DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContacts struct {
	Contact []*string `json:"Contact,omitempty" xml:"Contact,omitempty" type:"Repeated"`
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContacts) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContacts) GoString() string {
	return s.String()
}

func (s *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContacts) SetContact(v []*string) *DescribeAlertHistoryListResponseBodyAlarmHistoryListAlarmHistoryContacts {
	s.Contact = v
	return s
}

type DescribeAlertHistoryListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertHistoryListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertHistoryListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertHistoryListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertHistoryListResponse) SetHeaders(v map[string]*string) *DescribeAlertHistoryListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertHistoryListResponse) SetStatusCode(v int32) *DescribeAlertHistoryListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertHistoryListResponse) SetBody(v *DescribeAlertHistoryListResponseBody) *DescribeAlertHistoryListResponse {
	s.Body = v
	return s
}

type DescribeAlertLogCountRequest struct {
	// The alert group.
	//
	// example:
	//
	// ECS_Group
	ContactGroup *string `json:"ContactGroup,omitempty" xml:"ContactGroup,omitempty"`
	// The end timestamp of the alert logs to be queried.
	//
	// Unit: milliseconds.
	//
	// You can query only the alert logs within the last year. If the query time is longer than one year, the return value of the `AlertLogCount` parameter is empty.
	//
	// >  The interval between the start time (StartTime) and end time (EndTime) must be less than or equal to 15 days. The start time and end time must be specified or left empty at the same time. If you do not specify the start time and end time, the alert logs within the last 15 minutes are queried by default.
	//
	// example:
	//
	// 1610074409694
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The type of the alert event. Valid values:
	//
	// 	- TRIGGERED: The alert is triggered.
	//
	// 	- RESOLVED: The alert is resolved.
	//
	// example:
	//
	// TRIGGERED
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The dimension based on which data is aggregated. This parameter is similar to the Group By clause of SQL statements. Valid values:
	//
	// 	- `product`: aggregates data by cloud service.
	//
	// 	- `level`: aggregates data by alert level.
	//
	// 	- `groupId`: aggregates data by application group.
	//
	// 	- `contactGroup`: aggregates data by alert group.
	//
	// 	- `product,metricName`: aggregates data both by cloud service and by metric.
	//
	// This parameter is required.
	//
	// example:
	//
	// product
	GroupBy *string `json:"GroupBy,omitempty" xml:"GroupBy,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 7301****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The statistical period of alert logs. Unit: minutes.
	//
	// example:
	//
	// 360
	LastMin *string `json:"LastMin,omitempty" xml:"LastMin,omitempty"`
	// The level and notification method of the alert. Valid values:
	//
	// 	- P4: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// 	- OK: No alert is generated.
	//
	// example:
	//
	// P4
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The name of the metric.
	//
	// >  For more information about the metrics of different cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// >  For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The dimension based on which data is aggregated. This parameter is equivalent to the GROUP BY clause in SQL. Valid values:
	//
	// 	- `product`: aggregates data by cloud service.
	//
	// 	- `level`: aggregates data by alert level.
	//
	// 	- `groupId`: aggregates data by application group.
	//
	// 	- `contactGroup`: aggregates data by alert contact group.
	//
	// 	- `product,metricName`: aggregates data both by cloud service and by metric.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The abbreviation of the service name.
	//
	// example:
	//
	// ECS
	Product  *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert rule.
	//
	// For more information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// example:
	//
	// bfae2ca5b4e07d2c7278772e***********
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// test123
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The keyword based on which the alert logs to be counted are searched.
	//
	// example:
	//
	// test
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// The status of the alert. Valid values:
	//
	// 	- 0: The alert is triggered or cleared.
	//
	// 	- 1: The alert is generated not during the effective period.
	//
	// 	- 2: The alert is muted and not triggered in a specified period.
	//
	// 	- 3: The host is restarting.
	//
	// 	- 4: Notifications are not sent for the alert.
	//
	// When the value of the SendStatus parameter is 0, the value P4 of the Level parameter indicates a triggered alert and the value OK indicates a cleared alert.
	//
	// example:
	//
	// 0
	SendStatus *string `json:"SendStatus,omitempty" xml:"SendStatus,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// None
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	// The start timestamp of the alert logs to be queried.
	//
	// Unit: milliseconds.
	//
	// You can query only the alert logs within the last year. If the query time is longer than one year, the return value of the `AlertLogCount` parameter is empty.
	//
	// >  The interval between the start time (StartTime) and end time (EndTime) must be less than or equal to 15 days. The start time and end time must be specified or left empty at the same time. If you do not specify the start time and end time, the alert logs within the last 15 minutes are queried by default.
	//
	// example:
	//
	// 1609988009694
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeAlertLogCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogCountRequest) SetContactGroup(v string) *DescribeAlertLogCountRequest {
	s.ContactGroup = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetEndTime(v int64) *DescribeAlertLogCountRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetEventType(v string) *DescribeAlertLogCountRequest {
	s.EventType = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetGroupBy(v string) *DescribeAlertLogCountRequest {
	s.GroupBy = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetGroupId(v string) *DescribeAlertLogCountRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetLastMin(v string) *DescribeAlertLogCountRequest {
	s.LastMin = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetLevel(v string) *DescribeAlertLogCountRequest {
	s.Level = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetMetricName(v string) *DescribeAlertLogCountRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetNamespace(v string) *DescribeAlertLogCountRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetPageNumber(v int32) *DescribeAlertLogCountRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetPageSize(v int32) *DescribeAlertLogCountRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetProduct(v string) *DescribeAlertLogCountRequest {
	s.Product = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetRegionId(v string) *DescribeAlertLogCountRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetRuleId(v string) *DescribeAlertLogCountRequest {
	s.RuleId = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetRuleName(v string) *DescribeAlertLogCountRequest {
	s.RuleName = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetSearchKey(v string) *DescribeAlertLogCountRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetSendStatus(v string) *DescribeAlertLogCountRequest {
	s.SendStatus = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetSourceType(v string) *DescribeAlertLogCountRequest {
	s.SourceType = &v
	return s
}

func (s *DescribeAlertLogCountRequest) SetStartTime(v int64) *DescribeAlertLogCountRequest {
	s.StartTime = &v
	return s
}

type DescribeAlertLogCountResponseBody struct {
	// The statistics of alert logs.
	AlertLogCount []*DescribeAlertLogCountResponseBodyAlertLogCount `json:"AlertLogCount,omitempty" xml:"AlertLogCount,omitempty" type:"Repeated"`
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1C4A3709-BF52-42EE-87B5-7435F0929585
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAlertLogCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogCountResponseBody) SetAlertLogCount(v []*DescribeAlertLogCountResponseBodyAlertLogCount) *DescribeAlertLogCountResponseBody {
	s.AlertLogCount = v
	return s
}

func (s *DescribeAlertLogCountResponseBody) SetCode(v string) *DescribeAlertLogCountResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertLogCountResponseBody) SetMessage(v string) *DescribeAlertLogCountResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertLogCountResponseBody) SetRequestId(v string) *DescribeAlertLogCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertLogCountResponseBody) SetSuccess(v bool) *DescribeAlertLogCountResponseBody {
	s.Success = &v
	return s
}

type DescribeAlertLogCountResponseBodyAlertLogCount struct {
	// The number of alert logs.
	//
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The details about alert logs.
	Logs []*DescribeAlertLogCountResponseBodyAlertLogCountLogs `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
}

func (s DescribeAlertLogCountResponseBodyAlertLogCount) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogCountResponseBodyAlertLogCount) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogCountResponseBodyAlertLogCount) SetCount(v int32) *DescribeAlertLogCountResponseBodyAlertLogCount {
	s.Count = &v
	return s
}

func (s *DescribeAlertLogCountResponseBodyAlertLogCount) SetLogs(v []*DescribeAlertLogCountResponseBodyAlertLogCountLogs) *DescribeAlertLogCountResponseBodyAlertLogCount {
	s.Logs = v
	return s
}

type DescribeAlertLogCountResponseBodyAlertLogCountLogs struct {
	// The name of the dimension field based on which alert logs are aggregated.
	//
	// example:
	//
	// product
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the dimension field based on which alert logs are aggregated.
	//
	// example:
	//
	// ECS
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAlertLogCountResponseBodyAlertLogCountLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogCountResponseBodyAlertLogCountLogs) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogCountResponseBodyAlertLogCountLogs) SetName(v string) *DescribeAlertLogCountResponseBodyAlertLogCountLogs {
	s.Name = &v
	return s
}

func (s *DescribeAlertLogCountResponseBodyAlertLogCountLogs) SetValue(v string) *DescribeAlertLogCountResponseBodyAlertLogCountLogs {
	s.Value = &v
	return s
}

type DescribeAlertLogCountResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertLogCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertLogCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogCountResponse) SetHeaders(v map[string]*string) *DescribeAlertLogCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertLogCountResponse) SetStatusCode(v int32) *DescribeAlertLogCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertLogCountResponse) SetBody(v *DescribeAlertLogCountResponseBody) *DescribeAlertLogCountResponse {
	s.Body = v
	return s
}

type DescribeAlertLogHistogramRequest struct {
	// The alert contact group.
	//
	// example:
	//
	// ECS_Group
	ContactGroup *string `json:"ContactGroup,omitempty" xml:"ContactGroup,omitempty"`
	// The end timestamp of the alert logs to be queried.
	//
	// Unit: milliseconds.
	//
	// >
	//
	// 	- You can query only the alert logs within the last year.
	//
	// 	- The interval between the start time (`StartTime`) and end time (`EndTime`) must be less than or equal to 15 days.
	//
	// example:
	//
	// 1609989009694
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The type of the alert event. Valid values:
	//
	// 	- TRIGGERED: The alert is triggered.
	//
	// 	- RESOLVED: The alert is resolved.
	//
	// example:
	//
	// RESOLVED
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The dimensions based on which data is aggregated. This parameter is equivalent to the GROUP BY clause in SQL. Valid values:
	//
	// 	- `product`: aggregates data by cloud service.
	//
	// 	- `level`: aggregates data by alert level.
	//
	// 	- `groupId`: aggregates data by application group.
	//
	// 	- `contactGroup`: aggregates data by alert contact group.
	//
	// 	- `product,metricName`: aggregates data both by cloud service and by metric.
	//
	// example:
	//
	// product
	GroupBy *string `json:"GroupBy,omitempty" xml:"GroupBy,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 7301****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The statistical period of alert logs. Unit: minutes.
	//
	// example:
	//
	// 360
	LastMin *string `json:"LastMin,omitempty" xml:"LastMin,omitempty"`
	// The severity level and notification methods of the alert. Valid values:
	//
	// 	- P4: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// 	- OK: No alert is generated.
	//
	// example:
	//
	// P4
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The metric name.
	//
	// >  For more information about the metrics of different cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the Alibaba Cloud service.
	//
	// >  For more information about the namespaces of different cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The page number.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The abbreviation of the Alibaba Cloud service name.
	//
	// example:
	//
	// ECS
	Product  *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert rule.
	//
	// For more information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// example:
	//
	// ae06917_75a8c43178ab66****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// test123
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The keyword that is used to query alert logs.
	//
	// example:
	//
	// alert
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// The alert status. Valid values:
	//
	// 	- 0: The alert is triggered or cleared.
	//
	// 	- 1: The alert is ineffective.
	//
	// 	- 2: The alert is muted and not triggered in a specified period.
	//
	// 	- 3: The host is restarting.
	//
	// 	- 4: No alert notification is sent.
	//
	// If the value of the SendStatus parameter is 0, the value P4 of the Level parameter indicates a triggered alert and the value OK indicates a cleared alert.
	//
	// example:
	//
	// 0
	SendStatus *string `json:"SendStatus,omitempty" xml:"SendStatus,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// None
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	// The start timestamp of the alert logs to be queried.
	//
	// Unit: milliseconds.
	//
	// >
	//
	// 	- You can query only the alert logs within the last year.
	//
	// 	- The interval between the start time (`StartTime`) and end time (`EndTime`) must be less than or equal to 15 days.
	//
	// example:
	//
	// 1609988009694
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeAlertLogHistogramRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogHistogramRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogHistogramRequest) SetContactGroup(v string) *DescribeAlertLogHistogramRequest {
	s.ContactGroup = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetEndTime(v int64) *DescribeAlertLogHistogramRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetEventType(v string) *DescribeAlertLogHistogramRequest {
	s.EventType = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetGroupBy(v string) *DescribeAlertLogHistogramRequest {
	s.GroupBy = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetGroupId(v string) *DescribeAlertLogHistogramRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetLastMin(v string) *DescribeAlertLogHistogramRequest {
	s.LastMin = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetLevel(v string) *DescribeAlertLogHistogramRequest {
	s.Level = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetMetricName(v string) *DescribeAlertLogHistogramRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetNamespace(v string) *DescribeAlertLogHistogramRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetPageNumber(v int32) *DescribeAlertLogHistogramRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetPageSize(v int32) *DescribeAlertLogHistogramRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetProduct(v string) *DescribeAlertLogHistogramRequest {
	s.Product = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetRegionId(v string) *DescribeAlertLogHistogramRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetRuleId(v string) *DescribeAlertLogHistogramRequest {
	s.RuleId = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetRuleName(v string) *DescribeAlertLogHistogramRequest {
	s.RuleName = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetSearchKey(v string) *DescribeAlertLogHistogramRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetSendStatus(v string) *DescribeAlertLogHistogramRequest {
	s.SendStatus = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetSourceType(v string) *DescribeAlertLogHistogramRequest {
	s.SourceType = &v
	return s
}

func (s *DescribeAlertLogHistogramRequest) SetStartTime(v int64) *DescribeAlertLogHistogramRequest {
	s.StartTime = &v
	return s
}

type DescribeAlertLogHistogramResponseBody struct {
	// The number of alert logs that were generated during each interval of a time period.
	AlertLogHistogramList []*DescribeAlertLogHistogramResponseBodyAlertLogHistogramList `json:"AlertLogHistogramList,omitempty" xml:"AlertLogHistogramList,omitempty" type:"Repeated"`
	// The response code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1C4A3709-BF52-42EE-87B5-7435F0929585
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAlertLogHistogramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogHistogramResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogHistogramResponseBody) SetAlertLogHistogramList(v []*DescribeAlertLogHistogramResponseBodyAlertLogHistogramList) *DescribeAlertLogHistogramResponseBody {
	s.AlertLogHistogramList = v
	return s
}

func (s *DescribeAlertLogHistogramResponseBody) SetCode(v string) *DescribeAlertLogHistogramResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertLogHistogramResponseBody) SetMessage(v string) *DescribeAlertLogHistogramResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertLogHistogramResponseBody) SetRequestId(v string) *DescribeAlertLogHistogramResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertLogHistogramResponseBody) SetSuccess(v bool) *DescribeAlertLogHistogramResponseBody {
	s.Success = &v
	return s
}

type DescribeAlertLogHistogramResponseBodyAlertLogHistogramList struct {
	// The number of alert logs.
	//
	// example:
	//
	// 20
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The start timestamp of the queried alert logs.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 1610074791
	From *int64 `json:"From,omitempty" xml:"From,omitempty"`
	// The end timestamp of the queried alert logs.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 1610074800
	To *int64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s DescribeAlertLogHistogramResponseBodyAlertLogHistogramList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogHistogramResponseBodyAlertLogHistogramList) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogHistogramResponseBodyAlertLogHistogramList) SetCount(v int32) *DescribeAlertLogHistogramResponseBodyAlertLogHistogramList {
	s.Count = &v
	return s
}

func (s *DescribeAlertLogHistogramResponseBodyAlertLogHistogramList) SetFrom(v int64) *DescribeAlertLogHistogramResponseBodyAlertLogHistogramList {
	s.From = &v
	return s
}

func (s *DescribeAlertLogHistogramResponseBodyAlertLogHistogramList) SetTo(v int64) *DescribeAlertLogHistogramResponseBodyAlertLogHistogramList {
	s.To = &v
	return s
}

type DescribeAlertLogHistogramResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertLogHistogramResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertLogHistogramResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogHistogramResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogHistogramResponse) SetHeaders(v map[string]*string) *DescribeAlertLogHistogramResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertLogHistogramResponse) SetStatusCode(v int32) *DescribeAlertLogHistogramResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertLogHistogramResponse) SetBody(v *DescribeAlertLogHistogramResponseBody) *DescribeAlertLogHistogramResponse {
	s.Body = v
	return s
}

type DescribeAlertLogListRequest struct {
	// The alert contact group.
	//
	// example:
	//
	// ECS_Group
	ContactGroup *string `json:"ContactGroup,omitempty" xml:"ContactGroup,omitempty"`
	// The end timestamp of the alert logs to be queried.
	//
	// Unit: milliseconds.
	//
	// You can query only the alert logs within the last year. If the query time is longer than one year, the return value of the `AlertLogList` parameter is empty.
	//
	// >  The time period between the start time specified by `StartTime` and end time specified by `EndTime` must be less than or equal to 15 days. You must specify StartTime and EndTime at the same time, or leave StartTime and EndTime empty at the same time. If you do not specify this parameter, the alert logs within the last 15 minutes are queried by default.
	//
	// example:
	//
	// 1610074409694
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The type of the alert event. Valid values:
	//
	// 	- TRIGGERED: The alert is triggered.
	//
	// 	- RESOLVED: The alert is resolved.
	//
	// example:
	//
	// TRIGGERED
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The dimensions based on which data is aggregated. This parameter is equivalent to the GROUP BY clause in SQL. Valid values:
	//
	// 	- `product`: aggregates data by cloud service.
	//
	// 	- `level`: aggregates data by alert level.
	//
	// 	- `groupId`: aggregates data by application group.
	//
	// 	- `contactGroup`: aggregates data by alert contact group.
	//
	// 	- `product,metricName`: aggregates data both by cloud service and by metric.
	//
	// example:
	//
	// product
	GroupBy *string `json:"GroupBy,omitempty" xml:"GroupBy,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 7301****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The statistical period of alert logs. Unit: minutes.
	//
	// example:
	//
	// 360
	LastMin *string `json:"LastMin,omitempty" xml:"LastMin,omitempty"`
	// The severity level and notification methods of the alert. Valid values:
	//
	// 	- P4: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// 	- OK: No alert is generated.
	//
	// example:
	//
	// P4
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The metric name.
	//
	// > For more information about the metrics of different cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// IntranetInRate
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// >  For information about how to query the namespace of a cloud service, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The page number.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The abbreviation of the service name.
	//
	// For information about how to obtain the abbreviation of a cloud service name, see [DescribeProductsOfActiveMetricRule](https://help.aliyun.com/document_detail/114930.html).
	//
	// example:
	//
	// ECS
	Product  *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert rule.
	//
	// For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// example:
	//
	// bc369e8_30f87e517ed2fc****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// test123
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The search keyword that is used to query alert logs.
	//
	// example:
	//
	// alert
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// The status of the alert. Valid values:
	//
	// 	- 0: The alert is triggered or cleared.
	//
	// 	- 1: The alert is ineffective.
	//
	// 	- 2: The alert is muted.
	//
	// 	- 3: The host is restarting.
	//
	// 	- 4: No alert notification is sent.
	//
	// If the value of the SendStatus parameter is 0, the value P4 of the Level parameter indicates a triggered alert and the value OK indicates a cleared alert.
	//
	// example:
	//
	// 0
	SendStatus *string `json:"SendStatus,omitempty" xml:"SendStatus,omitempty"`
	// The type of the alert rule. Valid value: METRIC. This value indicates an alert rule for time series metrics.
	//
	// example:
	//
	// METRIC
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	// The start timestamp of the alert logs to be queried.
	//
	// Unit: milliseconds.
	//
	// You can query only the alert logs within the last year. If the query time is longer than one year, the return value of the `AlertLogList` parameter is empty.
	//
	// >  The time period between the start time specified by `StartTime` and the end time specified by `EndTime` must be less than or equal to 15 days. You must specify StartTime and EndTime at the same time, or leave StartTime and EndTime empty at the same time. If you do not specify this parameter, the alert logs within the last 15 minutes are queried by default.
	//
	// example:
	//
	// 1609988009694
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeAlertLogListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListRequest) SetContactGroup(v string) *DescribeAlertLogListRequest {
	s.ContactGroup = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetEndTime(v int64) *DescribeAlertLogListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetEventType(v string) *DescribeAlertLogListRequest {
	s.EventType = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetGroupBy(v string) *DescribeAlertLogListRequest {
	s.GroupBy = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetGroupId(v string) *DescribeAlertLogListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetLastMin(v string) *DescribeAlertLogListRequest {
	s.LastMin = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetLevel(v string) *DescribeAlertLogListRequest {
	s.Level = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetMetricName(v string) *DescribeAlertLogListRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetNamespace(v string) *DescribeAlertLogListRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetPageNumber(v int32) *DescribeAlertLogListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetPageSize(v int32) *DescribeAlertLogListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetProduct(v string) *DescribeAlertLogListRequest {
	s.Product = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetRegionId(v string) *DescribeAlertLogListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetRuleId(v string) *DescribeAlertLogListRequest {
	s.RuleId = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetRuleName(v string) *DescribeAlertLogListRequest {
	s.RuleName = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetSearchKey(v string) *DescribeAlertLogListRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetSendStatus(v string) *DescribeAlertLogListRequest {
	s.SendStatus = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetSourceType(v string) *DescribeAlertLogListRequest {
	s.SourceType = &v
	return s
}

func (s *DescribeAlertLogListRequest) SetStartTime(v int64) *DescribeAlertLogListRequest {
	s.StartTime = &v
	return s
}

type DescribeAlertLogListResponseBody struct {
	// The queried alert logs.
	AlertLogList []*DescribeAlertLogListResponseBodyAlertLogList `json:"AlertLogList,omitempty" xml:"AlertLogList,omitempty" type:"Repeated"`
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1C4A3709-BF52-42EE-87B5-7435F0929585
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAlertLogListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponseBody) SetAlertLogList(v []*DescribeAlertLogListResponseBodyAlertLogList) *DescribeAlertLogListResponseBody {
	s.AlertLogList = v
	return s
}

func (s *DescribeAlertLogListResponseBody) SetCode(v string) *DescribeAlertLogListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertLogListResponseBody) SetMessage(v string) *DescribeAlertLogListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertLogListResponseBody) SetPageNumber(v int32) *DescribeAlertLogListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAlertLogListResponseBody) SetPageSize(v int32) *DescribeAlertLogListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAlertLogListResponseBody) SetRequestId(v string) *DescribeAlertLogListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertLogListResponseBody) SetSuccess(v bool) *DescribeAlertLogListResponseBody {
	s.Success = &v
	return s
}

type DescribeAlertLogListResponseBodyAlertLogList struct {
	// The timestamp that was generated when the alert was triggered.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1610043776621
	AlertTime *string `json:"AlertTime,omitempty" xml:"AlertTime,omitempty"`
	// The details of the blacklist policy.
	//
	// example:
	//
	// BlackListDetail
	BlackListDetail *string `json:"BlackListDetail,omitempty" xml:"BlackListDetail,omitempty"`
	// The name of the blacklist policy.
	//
	// example:
	//
	// {"id":123,"metricProject":"acs_ecs_dashboard","userId":1736511134389110,"uuid":"8410dbbd-7d30-41c5-94cb-***","name":"alert-***","productCategory":"ecs","instances":[{"instanceId":"host-***"}],"metrics":null,"scopeType":"USER","scopeValue":"","startTime":"0001-01-01T00:00:00Z","endTime":"9999-12-31T23:59:59.999999999+08:00","effectiveTime":null,"isEnable":true,"status":1,"gmtCreate":"2021-11-02T16:35:59+08:00","gmtModified":"2021-11-02T16:35:59+08:00","loadTime":"2021-11-02T16:36:15.213072177+08:00"}
	BlackListName *string `json:"BlackListName,omitempty" xml:"BlackListName,omitempty"`
	// The ID of the blacklist policy.
	//
	// example:
	//
	// 8410dbbd-7d30-41c5-94cb-*****
	BlackListUUID     *string   `json:"BlackListUUID,omitempty" xml:"BlackListUUID,omitempty"`
	ContactALIIWWList []*string `json:"ContactALIIWWList,omitempty" xml:"ContactALIIWWList,omitempty" type:"Repeated"`
	ContactDingList   []*string `json:"ContactDingList,omitempty" xml:"ContactDingList,omitempty" type:"Repeated"`
	ContactGroups     []*string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty" type:"Repeated"`
	ContactMailList   []*string `json:"ContactMailList,omitempty" xml:"ContactMailList,omitempty" type:"Repeated"`
	ContactOnCallList []*string `json:"ContactOnCallList,omitempty" xml:"ContactOnCallList,omitempty" type:"Repeated"`
	ContactSMSList    []*string `json:"ContactSMSList,omitempty" xml:"ContactSMSList,omitempty" type:"Repeated"`
	// The dimensions of the resource that triggered alerts.
	Dimensions          []*DescribeAlertLogListResponseBodyAlertLogListDimensions `json:"Dimensions,omitempty" xml:"Dimensions,omitempty" type:"Repeated"`
	DingdingWebhookList []*string                                                 `json:"DingdingWebhookList,omitempty" xml:"DingdingWebhookList,omitempty" type:"Repeated"`
	// The alert rule based on which the alert is triggered.
	Escalation *DescribeAlertLogListResponseBodyAlertLogListEscalation `json:"Escalation,omitempty" xml:"Escalation,omitempty" type:"Struct"`
	// The event name.
	//
	// example:
	//
	// IOHang
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The extended fields.
	ExtendedInfo []*DescribeAlertLogListResponseBodyAlertLogListExtendedInfo `json:"ExtendedInfo,omitempty" xml:"ExtendedInfo,omitempty" type:"Repeated"`
	// The ID of the application group.
	//
	// example:
	//
	// 7301****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the application group.
	//
	// example:
	//
	// ECS_Instances
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The resource ID.
	//
	// example:
	//
	// i-m5e1qg6uo38rztr4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The resource name.
	//
	// example:
	//
	// portalHost
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The alert level and the methods that are used to send alert notifications. Valid values:
	//
	// 	- P4: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// 	- OK: No alert is generated.
	//
	// example:
	//
	// P4
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// Indicates whether the alert level was changed. Valid values:
	//
	// 	- `P4->OK`: The alert level was changed from P4 to OK.
	//
	// 	- `P4->P4`: The alert level was still P4.
	//
	// example:
	//
	// P4->OK
	LevelChange *string `json:"LevelChange,omitempty" xml:"LevelChange,omitempty"`
	// The log ID.
	//
	// example:
	//
	// 7818361[1523]@1671593992[1]
	LogId *string `json:"LogId,omitempty" xml:"LogId,omitempty"`
	// The alert information in a JSON string.
	//
	// example:
	//
	// {"alertName":"e47aa0ac-4076-44db-a47d-d1083968****_Availability"}
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The metric name.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The identifier of the cloud service. Valid values:
	//
	// 	- If the cloud service is provided by Alibaba Cloud, the abbreviation of the service name is returned. Example: ECS.
	//
	// 	- If the cloud service is not provided by Alibaba Cloud, a value in the `acs_Service keyword` format is returned. Example: acs_networkmonitor.
	//
	// example:
	//
	// ECS
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// d582b9e9-b1c1-4f17-9279-0fe7333a****_ResponseTime
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The details about the sending results of alert notifications.
	SendDetail *DescribeAlertLogListResponseBodyAlertLogListSendDetail `json:"SendDetail,omitempty" xml:"SendDetail,omitempty" type:"Struct"`
	// The sending results of alert notifications.
	SendResultList []*DescribeAlertLogListResponseBodyAlertLogListSendResultList `json:"SendResultList,omitempty" xml:"SendResultList,omitempty" type:"Repeated"`
	// The status of the alert. Valid values:
	//
	// 	- 0: The alert is triggered or cleared.
	//
	// 	- 1: The alert is ineffective.
	//
	// 	- 2: The alert is muted.
	//
	// 	- 3: The host is restarting.
	//
	// 	- 4: No alert notification is sent.
	//
	// If the value of the SendStatus parameter is 0, the value P4 of the Level parameter indicates a triggered alert and the value OK indicates a cleared alert.
	//
	// example:
	//
	// 0
	SendStatus *string `json:"SendStatus,omitempty" xml:"SendStatus,omitempty"`
	// The callback URLs.
	WebhookList []*DescribeAlertLogListResponseBodyAlertLogListWebhookList `json:"WebhookList,omitempty" xml:"WebhookList,omitempty" type:"Repeated"`
}

func (s DescribeAlertLogListResponseBodyAlertLogList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponseBodyAlertLogList) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetAlertTime(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.AlertTime = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetBlackListDetail(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.BlackListDetail = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetBlackListName(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.BlackListName = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetBlackListUUID(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.BlackListUUID = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetContactALIIWWList(v []*string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.ContactALIIWWList = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetContactDingList(v []*string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.ContactDingList = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetContactGroups(v []*string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.ContactGroups = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetContactMailList(v []*string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.ContactMailList = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetContactOnCallList(v []*string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.ContactOnCallList = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetContactSMSList(v []*string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.ContactSMSList = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetDimensions(v []*DescribeAlertLogListResponseBodyAlertLogListDimensions) *DescribeAlertLogListResponseBodyAlertLogList {
	s.Dimensions = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetDingdingWebhookList(v []*string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.DingdingWebhookList = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetEscalation(v *DescribeAlertLogListResponseBodyAlertLogListEscalation) *DescribeAlertLogListResponseBodyAlertLogList {
	s.Escalation = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetEventName(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.EventName = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetExtendedInfo(v []*DescribeAlertLogListResponseBodyAlertLogListExtendedInfo) *DescribeAlertLogListResponseBodyAlertLogList {
	s.ExtendedInfo = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetGroupId(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.GroupId = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetGroupName(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.GroupName = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetInstanceId(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.InstanceId = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetInstanceName(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.InstanceName = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetLevel(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.Level = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetLevelChange(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.LevelChange = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetLogId(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.LogId = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetMessage(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.Message = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetMetricName(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.MetricName = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetNamespace(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.Namespace = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetProduct(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.Product = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetRuleId(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.RuleId = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetRuleName(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.RuleName = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetSendDetail(v *DescribeAlertLogListResponseBodyAlertLogListSendDetail) *DescribeAlertLogListResponseBodyAlertLogList {
	s.SendDetail = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetSendResultList(v []*DescribeAlertLogListResponseBodyAlertLogListSendResultList) *DescribeAlertLogListResponseBodyAlertLogList {
	s.SendResultList = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetSendStatus(v string) *DescribeAlertLogListResponseBodyAlertLogList {
	s.SendStatus = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogList) SetWebhookList(v []*DescribeAlertLogListResponseBodyAlertLogListWebhookList) *DescribeAlertLogListResponseBodyAlertLogList {
	s.WebhookList = v
	return s
}

type DescribeAlertLogListResponseBodyAlertLogListDimensions struct {
	// The key of the dimension.
	//
	// example:
	//
	// instanceId
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the dimension.
	//
	// example:
	//
	// i-m5e1qg6uo38rztr4****
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAlertLogListResponseBodyAlertLogListDimensions) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponseBodyAlertLogListDimensions) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponseBodyAlertLogListDimensions) SetKey(v string) *DescribeAlertLogListResponseBodyAlertLogListDimensions {
	s.Key = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListDimensions) SetValue(v string) *DescribeAlertLogListResponseBodyAlertLogListDimensions {
	s.Value = &v
	return s
}

type DescribeAlertLogListResponseBodyAlertLogListEscalation struct {
	// The description of the alert rule.
	//
	// >  The content of the alert rule. This parameter indicates the conditions that trigger an alert.
	//
	// example:
	//
	// $Average<90
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The alert level and the methods that are used to send alert notifications. Valid values:
	//
	// 	- P4: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// 	- OK: No alert is generated.
	//
	// example:
	//
	// P4
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an alert is triggered.
	//
	// example:
	//
	// 1
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeAlertLogListResponseBodyAlertLogListEscalation) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponseBodyAlertLogListEscalation) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponseBodyAlertLogListEscalation) SetExpression(v string) *DescribeAlertLogListResponseBodyAlertLogListEscalation {
	s.Expression = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListEscalation) SetLevel(v string) *DescribeAlertLogListResponseBodyAlertLogListEscalation {
	s.Level = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListEscalation) SetTimes(v int32) *DescribeAlertLogListResponseBodyAlertLogListEscalation {
	s.Times = &v
	return s
}

type DescribeAlertLogListResponseBodyAlertLogListExtendedInfo struct {
	// The name of the extended field.
	//
	// example:
	//
	// userId
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the extended field.
	//
	// example:
	//
	// 120886317861****
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAlertLogListResponseBodyAlertLogListExtendedInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponseBodyAlertLogListExtendedInfo) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponseBodyAlertLogListExtendedInfo) SetName(v string) *DescribeAlertLogListResponseBodyAlertLogListExtendedInfo {
	s.Name = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListExtendedInfo) SetValue(v string) *DescribeAlertLogListResponseBodyAlertLogListExtendedInfo {
	s.Value = &v
	return s
}

type DescribeAlertLogListResponseBodyAlertLogListSendDetail struct {
	// The list of sending results that are categorized by notification method.
	ChannelResultList []*DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultList `json:"ChannelResultList,omitempty" xml:"ChannelResultList,omitempty" type:"Repeated"`
	// Indicates whether the alert notifications are sent.
	//
	// 	- If the alert notifications are sent, the value "success" is returned.
	//
	// 	- If the configuration is invalid, no alert notification is sent and an error code is returned.
	//
	// example:
	//
	// success
	ResultCode *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
}

func (s DescribeAlertLogListResponseBodyAlertLogListSendDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponseBodyAlertLogListSendDetail) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendDetail) SetChannelResultList(v []*DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultList) *DescribeAlertLogListResponseBodyAlertLogListSendDetail {
	s.ChannelResultList = v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendDetail) SetResultCode(v string) *DescribeAlertLogListResponseBodyAlertLogListSendDetail {
	s.ResultCode = &v
	return s
}

type DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultList struct {
	// The method that is used to send alert notifications. Valid values:
	//
	// 	- MAIL: email
	//
	// 	- SMS: text message
	//
	// 	- WEBHOOK: alert callback
	//
	// 	- SLS: Simple Log Service
	//
	// 	- ONCALL: phone call
	//
	// 	- FC: Function Compute
	//
	// 	- MNS: Message Service queue
	//
	// example:
	//
	// MAIL
	Channel *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	// The sending results of alert notifications.
	ResultList []*DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList `json:"ResultList,omitempty" xml:"ResultList,omitempty" type:"Repeated"`
}

func (s DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultList) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultList) SetChannel(v string) *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultList {
	s.Channel = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultList) SetResultList(v []*DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList) *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultList {
	s.ResultList = v
	return s
}

type DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList struct {
	// The HTTP status code.
	//
	// 	- If the value of the `Channel` parameter is `WEBHOOK`, the status code is 200 or 500.
	//
	// 	- If the value of the `Channel` parameter is `MAIL`, `SMS`, `SLS`, `ONCALL`, `FC`, or `MNS`, this parameter is empty or not returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the returned results.
	//
	// example:
	//
	// { }
	Detail *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	// The request ID returned when CloudMonitor calls another cloud service.
	//
	// example:
	//
	// 0BDAF8A8-04DC-5F0C-90E4-724D42C4****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success          *bool     `json:"Success,omitempty" xml:"Success,omitempty"`
	NotifyTargetList []*string `json:"notifyTargetList,omitempty" xml:"notifyTargetList,omitempty" type:"Repeated"`
}

func (s DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList) SetCode(v string) *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList {
	s.Code = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList) SetDetail(v string) *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList {
	s.Detail = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList) SetRequestId(v string) *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList) SetSuccess(v bool) *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList {
	s.Success = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList) SetNotifyTargetList(v []*string) *DescribeAlertLogListResponseBodyAlertLogListSendDetailChannelResultListResultList {
	s.NotifyTargetList = v
	return s
}

type DescribeAlertLogListResponseBodyAlertLogListSendResultList struct {
	// The category of the alert notification method. Valid values:
	//
	// 	- MAIL: email
	//
	// 	- ALIIM: TradeManager
	//
	// 	- SMS: text message
	//
	// 	- CALL: phone call
	//
	// 	- DING: DingTalk chatbot
	//
	// 	- Merged: alert merging
	//
	// example:
	//
	// Mail
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The notification object corresponding to the alert notification method.
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeAlertLogListResponseBodyAlertLogListSendResultList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponseBodyAlertLogListSendResultList) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendResultList) SetKey(v string) *DescribeAlertLogListResponseBodyAlertLogListSendResultList {
	s.Key = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListSendResultList) SetValue(v []*string) *DescribeAlertLogListResponseBodyAlertLogListSendResultList {
	s.Value = v
	return s
}

type DescribeAlertLogListResponseBodyAlertLogListWebhookList struct {
	// The status code of the alert callback.
	//
	// example:
	//
	// 200
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// The message returned for the alert callback.
	//
	// example:
	//
	// success
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// https://www.aliyun.com/webhook.html
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s DescribeAlertLogListResponseBodyAlertLogListWebhookList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponseBodyAlertLogListWebhookList) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponseBodyAlertLogListWebhookList) SetCode(v string) *DescribeAlertLogListResponseBodyAlertLogListWebhookList {
	s.Code = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListWebhookList) SetMessage(v string) *DescribeAlertLogListResponseBodyAlertLogListWebhookList {
	s.Message = &v
	return s
}

func (s *DescribeAlertLogListResponseBodyAlertLogListWebhookList) SetUrl(v string) *DescribeAlertLogListResponseBodyAlertLogListWebhookList {
	s.Url = &v
	return s
}

type DescribeAlertLogListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertLogListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertLogListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertLogListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertLogListResponse) SetHeaders(v map[string]*string) *DescribeAlertLogListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertLogListResponse) SetStatusCode(v int32) *DescribeAlertLogListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertLogListResponse) SetBody(v *DescribeAlertLogListResponseBody) *DescribeAlertLogListResponse {
	s.Body = v
	return s
}

type DescribeAlertingMetricRuleResourcesRequest struct {
	// Queries the alerts that were triggered before the specified time. Timestamps in milliseconds are supported.
	//
	// example:
	//
	// 1698827400000
	AlertBeforeTime *string `json:"AlertBeforeTime,omitempty" xml:"AlertBeforeTime,omitempty"`
	// The dimensions that specify the resources whose monitoring data you want to query.
	//
	// example:
	//
	// {\\"userId\\":\\"120886317861****\\",\\"region\\":\\"cn-huhehaote\\",\\"queue\\":\\"test-0128\\"}
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The ID of the application group. For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// example:
	//
	// 7671****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_mns_new
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The page number.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries per page.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert rule. For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// example:
	//
	// putNewAlarm_user_7e78d765-0e3e-4671-ba6d-7ce39108****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribeAlertingMetricRuleResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertingMetricRuleResourcesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAlertingMetricRuleResourcesRequest) SetAlertBeforeTime(v string) *DescribeAlertingMetricRuleResourcesRequest {
	s.AlertBeforeTime = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesRequest) SetDimensions(v string) *DescribeAlertingMetricRuleResourcesRequest {
	s.Dimensions = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesRequest) SetGroupId(v string) *DescribeAlertingMetricRuleResourcesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesRequest) SetNamespace(v string) *DescribeAlertingMetricRuleResourcesRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesRequest) SetPage(v int32) *DescribeAlertingMetricRuleResourcesRequest {
	s.Page = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesRequest) SetPageSize(v int32) *DescribeAlertingMetricRuleResourcesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesRequest) SetRegionId(v string) *DescribeAlertingMetricRuleResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesRequest) SetRuleId(v string) *DescribeAlertingMetricRuleResourcesRequest {
	s.RuleId = &v
	return s
}

type DescribeAlertingMetricRuleResourcesResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The request processing has failed due to some unknown error.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0724011B-D9E0-4B2F-8C51-F17A894CC42C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The resources that are associated with the alert rule.
	Resources *DescribeAlertingMetricRuleResourcesResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeAlertingMetricRuleResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertingMetricRuleResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAlertingMetricRuleResourcesResponseBody) SetCode(v int32) *DescribeAlertingMetricRuleResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBody) SetMessage(v string) *DescribeAlertingMetricRuleResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBody) SetRequestId(v string) *DescribeAlertingMetricRuleResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBody) SetResources(v *DescribeAlertingMetricRuleResourcesResponseBodyResources) *DescribeAlertingMetricRuleResourcesResponseBody {
	s.Resources = v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBody) SetSuccess(v bool) *DescribeAlertingMetricRuleResourcesResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBody) SetTotal(v int32) *DescribeAlertingMetricRuleResourcesResponseBody {
	s.Total = &v
	return s
}

type DescribeAlertingMetricRuleResourcesResponseBodyResources struct {
	Resource []*DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResources) GoString() string {
	return s.String()
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResources) SetResource(v []*DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) *DescribeAlertingMetricRuleResourcesResponseBodyResources {
	s.Resource = v
	return s
}

type DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource struct {
	// The dimensions based on which the resources are queried.
	//
	// example:
	//
	// {\\"region\\":\\"cn-huhehaote\\",\\"queue\\":\\"test-0128\\",\\"userId\\":\\"120886317861****\\"}
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// Indicates whether the alert rule is enabled. Valid values:
	//
	// 	- true: The alert rule is enabled.
	//
	// 	- false: The alert rule is disabled.
	//
	// example:
	//
	// true
	Enable *string `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// The alert rule based on which the alert is triggered.
	Escalation *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalation `json:"Escalation,omitempty" xml:"Escalation,omitempty" type:"Struct"`
	// The ID of the application group.
	//
	// >  If the alert rule is associated with an application group, the ID of the application group is returned in this parameter.
	//
	// example:
	//
	// 7671****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The time when the last alert was triggered for the resource based on the alert rule. The value is a timestamp.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1622427900000
	LastAlertTime *string `json:"LastAlertTime,omitempty" xml:"LastAlertTime,omitempty"`
	// The time when the alert rule was last modified. The value is a timestamp.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1622827900000
	LastModifyTime *string `json:"LastModifyTime,omitempty" xml:"LastModifyTime,omitempty"`
	// The severity level and notification methods of the alert. Valid values:
	//
	// 	- 4: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// 	- OK: No alert is generated.
	//
	// example:
	//
	// 3
	Level *int32 `json:"Level,omitempty" xml:"Level,omitempty"`
	// The metric name.
	//
	// example:
	//
	// ActiveMessages
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The metric value that triggered the alert based on the alert rule. The value is a JSON string.
	//
	// example:
	//
	// {\\"timestamp\\":1623727500000,\\"Sum\\":926,\\"value\\":463,\\"Maximum\\":463,\\"Minimum\\":463,\\"Average\\":463,\\"SampleCount\\":2,\\"userId\\":\\"120886317861****\\",\\"region\\":\\"cn-huhehaote\\",\\"queue\\":\\"test-0128\\"}
	MetricValues *string `json:"MetricValues,omitempty" xml:"MetricValues,omitempty"`
	// The namespace of the cloud service.
	//
	// example:
	//
	// acs_mns_new
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The type of the cloud service.
	//
	// example:
	//
	// mns
	ProductCategory *string `json:"ProductCategory,omitempty" xml:"ProductCategory,omitempty"`
	// The resources that are monitored.
	//
	// example:
	//
	// userId=120886317861****,region=cn-huhehaote,queue=test-0128
	Resource *string `json:"Resource,omitempty" xml:"Resource,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an alert is triggered.
	//
	// example:
	//
	// 3
	RetryTimes *string `json:"RetryTimes,omitempty" xml:"RetryTimes,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// putNewAlarm_user_7e78d765-0e3e-4671-ba6d-7ce39108****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// test123456789
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The time when the resource was associated with the alert rule. The value is a timestamp.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1622427900000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The method used to calculate the metric values that trigger alerts.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The alert threshold.
	//
	// example:
	//
	// 10
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) GoString() string {
	return s.String()
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetDimensions(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.Dimensions = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetEnable(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.Enable = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetEscalation(v *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalation) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.Escalation = v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetGroupId(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.GroupId = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetLastAlertTime(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.LastAlertTime = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetLastModifyTime(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.LastModifyTime = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetLevel(v int32) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.Level = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetMetricName(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.MetricName = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetMetricValues(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.MetricValues = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetNamespace(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.Namespace = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetProductCategory(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.ProductCategory = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetResource(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.Resource = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetRetryTimes(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.RetryTimes = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetRuleId(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.RuleId = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetRuleName(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.RuleName = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetStartTime(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.StartTime = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetStatistics(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.Statistics = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource) SetThreshold(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResource {
	s.Threshold = &v
	return s
}

type DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalation struct {
	Resource []*DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalation) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalation) GoString() string {
	return s.String()
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalation) SetResource(v []*DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalation {
	s.Resource = v
	return s
}

type DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource struct {
	// The operator that is used to compare the metric value with the threshold. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The description of the alert rule.
	//
	// >  This parameter indicates the content of the alert rule. If the metric value meets the alert condition, an alert is triggered.
	//
	// example:
	//
	// $Average>=10
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The description of the multi-metric alert rule.
	ExpressionList *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionList `json:"ExpressionList,omitempty" xml:"ExpressionList,omitempty" type:"Struct"`
	// The relationship between multiple metrics. Valid values:
	//
	// 	- &&: If all metrics meet the alert conditions, CloudMonitor sends alert notifications.
	//
	// 	- ||: If one of the metrics meets the alert conditions, CloudMonitor sends alert notifications.
	//
	// example:
	//
	// &&
	ExpressionListJoin *string `json:"ExpressionListJoin,omitempty" xml:"ExpressionListJoin,omitempty"`
	// The trigger conditions that are created by using expressions. You can use expressions to create trigger conditions in the following scenarios:
	//
	// 	- Set an alert blacklist for specific resources. For example, if you specify `$instanceId != \\"i-io8kfvcpp7x5****\\" ``&&`` $Average > 50`, no alert is triggered when the `average metric value` of the `i-io8kfvcpp7x5****` instance exceeds 50.
	//
	// 	- Set a special alert threshold for a specified instance in the rule. For example, if you specify `$Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)`, an alert is triggered when the `average metric value` of the `i-io8kfvcpp7x5****` instance exceeds 80 or the `average metric value` of other instances exceeds 50.
	//
	// 	- Limit the number of instances whose metric values exceed the threshold. For example, if you specify `count($Average > 20) > 3`, an alert is triggered only when the `average metric value` of more than three instances exceeds 20.
	//
	// example:
	//
	// $Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)
	ExpressionRaw *string `json:"ExpressionRaw,omitempty" xml:"ExpressionRaw,omitempty"`
	// The severity level and notification methods of the alert. Valid values:
	//
	// 	- 4: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// 	- OK: No alert is generated.
	//
	// example:
	//
	// 3
	Level *int32 `json:"Level,omitempty" xml:"Level,omitempty"`
	// The operator that is used to compare the metric value with the threshold. Valid values:
	//
	// 	- `>=`
	//
	// 	- `=`
	//
	// 	- `<=`
	//
	// 	- `>`
	//
	// 	- `<`
	//
	// 	- `!=`
	//
	// example:
	//
	// >=
	PreCondition *string `json:"PreCondition,omitempty" xml:"PreCondition,omitempty"`
	// This parameter is deprecated.
	//
	// example:
	//
	// mns
	Tag *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// The alert threshold.
	//
	// example:
	//
	// 10
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an alert is triggered.
	//
	// example:
	//
	// 1
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) GoString() string {
	return s.String()
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) SetComparisonOperator(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) SetExpression(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource {
	s.Expression = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) SetExpressionList(v *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionList) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource {
	s.ExpressionList = v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) SetExpressionListJoin(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource {
	s.ExpressionListJoin = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) SetExpressionRaw(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource {
	s.ExpressionRaw = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) SetLevel(v int32) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource {
	s.Level = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) SetPreCondition(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource {
	s.PreCondition = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) SetTag(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource {
	s.Tag = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) SetThreshold(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource {
	s.Threshold = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource) SetTimes(v int32) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResource {
	s.Times = &v
	return s
}

type DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionList struct {
	ExpressionList []*DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList `json:"ExpressionList,omitempty" xml:"ExpressionList,omitempty" type:"Repeated"`
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionList) GoString() string {
	return s.String()
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionList) SetExpressionList(v []*DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionList {
	s.ExpressionList = v
	return s
}

type DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList struct {
	// The operator that is used to compare the metric value with the threshold. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The metric name.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The statistical period of the metric. Unit: seconds. The default value is the interval at which the monitoring data of the metric is collected.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The statistical method of the alert level. Valid values:
	//
	// 	- Maximum
	//
	// 	- Minimum
	//
	// 	- Average
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The alert threshold.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList) GoString() string {
	return s.String()
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList) SetComparisonOperator(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList) SetMetricName(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList {
	s.MetricName = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList) SetPeriod(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList {
	s.Period = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList) SetStatistics(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList {
	s.Statistics = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList) SetThreshold(v string) *DescribeAlertingMetricRuleResourcesResponseBodyResourcesResourceEscalationResourceExpressionListExpressionList {
	s.Threshold = &v
	return s
}

type DescribeAlertingMetricRuleResourcesResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAlertingMetricRuleResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAlertingMetricRuleResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAlertingMetricRuleResourcesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAlertingMetricRuleResourcesResponse) SetHeaders(v map[string]*string) *DescribeAlertingMetricRuleResourcesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponse) SetStatusCode(v int32) *DescribeAlertingMetricRuleResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAlertingMetricRuleResourcesResponse) SetBody(v *DescribeAlertingMetricRuleResourcesResponseBody) *DescribeAlertingMetricRuleResourcesResponse {
	s.Body = v
	return s
}

type DescribeContactGroupListRequest struct {
	// The number of the page to return.
	//
	// example:
	//
	// 10
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 1
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeContactGroupListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupListRequest) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupListRequest) SetPageNumber(v int32) *DescribeContactGroupListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeContactGroupListRequest) SetPageSize(v int32) *DescribeContactGroupListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeContactGroupListRequest) SetRegionId(v string) *DescribeContactGroupListRequest {
	s.RegionId = &v
	return s
}

type DescribeContactGroupListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about alert groups that were queried.
	ContactGroupList *DescribeContactGroupListResponseBodyContactGroupList `json:"ContactGroupList,omitempty" xml:"ContactGroupList,omitempty" type:"Struct"`
	// The names of alert groups.
	ContactGroups *DescribeContactGroupListResponseBodyContactGroups `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 916EE694-03C2-47B6-85EE-5054E3C168D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of the returned entries.
	//
	// example:
	//
	// 22
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeContactGroupListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupListResponseBody) SetCode(v string) *DescribeContactGroupListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeContactGroupListResponseBody) SetContactGroupList(v *DescribeContactGroupListResponseBodyContactGroupList) *DescribeContactGroupListResponseBody {
	s.ContactGroupList = v
	return s
}

func (s *DescribeContactGroupListResponseBody) SetContactGroups(v *DescribeContactGroupListResponseBodyContactGroups) *DescribeContactGroupListResponseBody {
	s.ContactGroups = v
	return s
}

func (s *DescribeContactGroupListResponseBody) SetMessage(v string) *DescribeContactGroupListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeContactGroupListResponseBody) SetRequestId(v string) *DescribeContactGroupListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeContactGroupListResponseBody) SetSuccess(v bool) *DescribeContactGroupListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeContactGroupListResponseBody) SetTotal(v int32) *DescribeContactGroupListResponseBody {
	s.Total = &v
	return s
}

type DescribeContactGroupListResponseBodyContactGroupList struct {
	ContactGroup []*DescribeContactGroupListResponseBodyContactGroupListContactGroup `json:"ContactGroup,omitempty" xml:"ContactGroup,omitempty" type:"Repeated"`
}

func (s DescribeContactGroupListResponseBodyContactGroupList) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupListResponseBodyContactGroupList) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupListResponseBodyContactGroupList) SetContactGroup(v []*DescribeContactGroupListResponseBodyContactGroupListContactGroup) *DescribeContactGroupListResponseBodyContactGroupList {
	s.ContactGroup = v
	return s
}

type DescribeContactGroupListResponseBodyContactGroupListContactGroup struct {
	// The alert contacts in the alert group.
	Contacts *DescribeContactGroupListResponseBodyContactGroupListContactGroupContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Struct"`
	// The time when the alert group was created. This value is a UNIX timestamp that represents the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1507070598000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the alert group.
	Describe *string `json:"Describe,omitempty" xml:"Describe,omitempty"`
	// Indicates whether the alert group subscribes to weekly reports. Valid values:
	//
	// 	- true: The alert group subscribes to weekly reports.
	//
	// 	- false: The alert group does not subscribe to weekly reports.
	//
	// example:
	//
	// true
	EnableSubscribed *bool `json:"EnableSubscribed,omitempty" xml:"EnableSubscribed,omitempty"`
	// Indicates whether the alert group can subscribe to weekly reports. Valid values:
	//
	// 	- true: The alert group can subscribe to weekly reports.
	//
	// 	- false: The alert group cannot subscribe to weekly reports.
	//
	// >  The weekly report subscription feature is only available for Alibaba Cloud accounts with more than five Elastic Compute Service (ECS) instances.
	//
	// example:
	//
	// true
	EnabledWeeklyReport *bool `json:"EnabledWeeklyReport,omitempty" xml:"EnabledWeeklyReport,omitempty"`
	// The name of the alert group.
	//
	// example:
	//
	// Contact1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The time when the alert group was modified. This value is a UNIX timestamp that represents the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1589447759000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeContactGroupListResponseBodyContactGroupListContactGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupListResponseBodyContactGroupListContactGroup) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupListResponseBodyContactGroupListContactGroup) SetContacts(v *DescribeContactGroupListResponseBodyContactGroupListContactGroupContacts) *DescribeContactGroupListResponseBodyContactGroupListContactGroup {
	s.Contacts = v
	return s
}

func (s *DescribeContactGroupListResponseBodyContactGroupListContactGroup) SetCreateTime(v int64) *DescribeContactGroupListResponseBodyContactGroupListContactGroup {
	s.CreateTime = &v
	return s
}

func (s *DescribeContactGroupListResponseBodyContactGroupListContactGroup) SetDescribe(v string) *DescribeContactGroupListResponseBodyContactGroupListContactGroup {
	s.Describe = &v
	return s
}

func (s *DescribeContactGroupListResponseBodyContactGroupListContactGroup) SetEnableSubscribed(v bool) *DescribeContactGroupListResponseBodyContactGroupListContactGroup {
	s.EnableSubscribed = &v
	return s
}

func (s *DescribeContactGroupListResponseBodyContactGroupListContactGroup) SetEnabledWeeklyReport(v bool) *DescribeContactGroupListResponseBodyContactGroupListContactGroup {
	s.EnabledWeeklyReport = &v
	return s
}

func (s *DescribeContactGroupListResponseBodyContactGroupListContactGroup) SetName(v string) *DescribeContactGroupListResponseBodyContactGroupListContactGroup {
	s.Name = &v
	return s
}

func (s *DescribeContactGroupListResponseBodyContactGroupListContactGroup) SetUpdateTime(v int64) *DescribeContactGroupListResponseBodyContactGroupListContactGroup {
	s.UpdateTime = &v
	return s
}

type DescribeContactGroupListResponseBodyContactGroupListContactGroupContacts struct {
	Contact []*string `json:"Contact,omitempty" xml:"Contact,omitempty" type:"Repeated"`
}

func (s DescribeContactGroupListResponseBodyContactGroupListContactGroupContacts) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupListResponseBodyContactGroupListContactGroupContacts) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupListResponseBodyContactGroupListContactGroupContacts) SetContact(v []*string) *DescribeContactGroupListResponseBodyContactGroupListContactGroupContacts {
	s.Contact = v
	return s
}

type DescribeContactGroupListResponseBodyContactGroups struct {
	ContactGroup []*string `json:"ContactGroup,omitempty" xml:"ContactGroup,omitempty" type:"Repeated"`
}

func (s DescribeContactGroupListResponseBodyContactGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupListResponseBodyContactGroups) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupListResponseBodyContactGroups) SetContactGroup(v []*string) *DescribeContactGroupListResponseBodyContactGroups {
	s.ContactGroup = v
	return s
}

type DescribeContactGroupListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeContactGroupListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeContactGroupListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactGroupListResponse) GoString() string {
	return s.String()
}

func (s *DescribeContactGroupListResponse) SetHeaders(v map[string]*string) *DescribeContactGroupListResponse {
	s.Headers = v
	return s
}

func (s *DescribeContactGroupListResponse) SetStatusCode(v int32) *DescribeContactGroupListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeContactGroupListResponse) SetBody(v *DescribeContactGroupListResponseBody) *DescribeContactGroupListResponse {
	s.Body = v
	return s
}

type DescribeContactListRequest struct {
	// The alert notification method. Valid values:
	//
	// 	- Mail: emails
	//
	// 	- DingWebHook: DingTalk chatbots
	//
	// example:
	//
	// Mail
	ChanelType *string `json:"ChanelType,omitempty" xml:"ChanelType,omitempty"`
	// The value specified for the alert notification method.
	//
	// >  This parameter is required only if you set the `ChanelType` parameter to `Mail`.
	//
	// example:
	//
	// Alice@example.com
	ChanelValue *string `json:"ChanelValue,omitempty" xml:"ChanelValue,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// Alice
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The page number.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Default value: 100.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeContactListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListRequest) GoString() string {
	return s.String()
}

func (s *DescribeContactListRequest) SetChanelType(v string) *DescribeContactListRequest {
	s.ChanelType = &v
	return s
}

func (s *DescribeContactListRequest) SetChanelValue(v string) *DescribeContactListRequest {
	s.ChanelValue = &v
	return s
}

func (s *DescribeContactListRequest) SetContactName(v string) *DescribeContactListRequest {
	s.ContactName = &v
	return s
}

func (s *DescribeContactListRequest) SetPageNumber(v int32) *DescribeContactListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeContactListRequest) SetPageSize(v int32) *DescribeContactListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeContactListRequest) SetRegionId(v string) *DescribeContactListRequest {
	s.RegionId = &v
	return s
}

type DescribeContactListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The alert contacts.
	Contacts *DescribeContactListResponseBodyContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Struct"`
	// The error message returned.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 06D5ECC2-B9BE-42A4-8FA3-1A610FB08B83
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true: The request was successful.
	//
	// 	- false: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 15
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeContactListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeContactListResponseBody) SetCode(v string) *DescribeContactListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeContactListResponseBody) SetContacts(v *DescribeContactListResponseBodyContacts) *DescribeContactListResponseBody {
	s.Contacts = v
	return s
}

func (s *DescribeContactListResponseBody) SetMessage(v string) *DescribeContactListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeContactListResponseBody) SetRequestId(v string) *DescribeContactListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeContactListResponseBody) SetSuccess(v bool) *DescribeContactListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeContactListResponseBody) SetTotal(v int32) *DescribeContactListResponseBody {
	s.Total = &v
	return s
}

type DescribeContactListResponseBodyContacts struct {
	Contact []*DescribeContactListResponseBodyContactsContact `json:"Contact,omitempty" xml:"Contact,omitempty" type:"Repeated"`
}

func (s DescribeContactListResponseBodyContacts) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListResponseBodyContacts) GoString() string {
	return s.String()
}

func (s *DescribeContactListResponseBodyContacts) SetContact(v []*DescribeContactListResponseBodyContactsContact) *DescribeContactListResponseBodyContacts {
	s.Contact = v
	return s
}

type DescribeContactListResponseBodyContactsContact struct {
	// The alert notification method.
	Channels *DescribeContactListResponseBodyContactsContactChannels `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Struct"`
	// The status of the alert notification method. Valid values: PENDING and OK.
	//
	// The email address must be activated after it is added as the value specified for the alert notification method. The value PENDING indicates that the email address is not activated. The value OK indicates that the email address is activated.
	ChannelsState *DescribeContactListResponseBodyContactsContactChannelsState `json:"ChannelsState,omitempty" xml:"ChannelsState,omitempty" type:"Struct"`
	// None.
	ContactGroups *DescribeContactListResponseBodyContactsContactContactGroups `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty" type:"Struct"`
	// The timestamp when the alert contact was created.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1552356159000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description.
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// The language in which the alert information is displayed. Valid values:
	//
	// 	- zh-cn: simplified Chinese
	//
	// 	- en: English
	//
	// example:
	//
	// zh-cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// Alice
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The timestamp when the alert contact was updated.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1552356159000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeContactListResponseBodyContactsContact) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListResponseBodyContactsContact) GoString() string {
	return s.String()
}

func (s *DescribeContactListResponseBodyContactsContact) SetChannels(v *DescribeContactListResponseBodyContactsContactChannels) *DescribeContactListResponseBodyContactsContact {
	s.Channels = v
	return s
}

func (s *DescribeContactListResponseBodyContactsContact) SetChannelsState(v *DescribeContactListResponseBodyContactsContactChannelsState) *DescribeContactListResponseBodyContactsContact {
	s.ChannelsState = v
	return s
}

func (s *DescribeContactListResponseBodyContactsContact) SetContactGroups(v *DescribeContactListResponseBodyContactsContactContactGroups) *DescribeContactListResponseBodyContactsContact {
	s.ContactGroups = v
	return s
}

func (s *DescribeContactListResponseBodyContactsContact) SetCreateTime(v int64) *DescribeContactListResponseBodyContactsContact {
	s.CreateTime = &v
	return s
}

func (s *DescribeContactListResponseBodyContactsContact) SetDesc(v string) *DescribeContactListResponseBodyContactsContact {
	s.Desc = &v
	return s
}

func (s *DescribeContactListResponseBodyContactsContact) SetLang(v string) *DescribeContactListResponseBodyContactsContact {
	s.Lang = &v
	return s
}

func (s *DescribeContactListResponseBodyContactsContact) SetName(v string) *DescribeContactListResponseBodyContactsContact {
	s.Name = &v
	return s
}

func (s *DescribeContactListResponseBodyContactsContact) SetUpdateTime(v int64) *DescribeContactListResponseBodyContactsContact {
	s.UpdateTime = &v
	return s
}

type DescribeContactListResponseBodyContactsContactChannels struct {
	// The TradeManager ID of the alert contact.
	//
	// example:
	//
	// Alice
	AliIM *string `json:"AliIM,omitempty" xml:"AliIM,omitempty"`
	// The webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=9bf44f8189597d07dfdd7a123455ffc112****
	DingWebHook *string `json:"DingWebHook,omitempty" xml:"DingWebHook,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// Alice@example.com
	Mail *string `json:"Mail,omitempty" xml:"Mail,omitempty"`
	// The phone number of the alert contac.
	//
	// example:
	//
	// 1333333****
	SMS *string `json:"SMS,omitempty" xml:"SMS,omitempty"`
}

func (s DescribeContactListResponseBodyContactsContactChannels) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListResponseBodyContactsContactChannels) GoString() string {
	return s.String()
}

func (s *DescribeContactListResponseBodyContactsContactChannels) SetAliIM(v string) *DescribeContactListResponseBodyContactsContactChannels {
	s.AliIM = &v
	return s
}

func (s *DescribeContactListResponseBodyContactsContactChannels) SetDingWebHook(v string) *DescribeContactListResponseBodyContactsContactChannels {
	s.DingWebHook = &v
	return s
}

func (s *DescribeContactListResponseBodyContactsContactChannels) SetMail(v string) *DescribeContactListResponseBodyContactsContactChannels {
	s.Mail = &v
	return s
}

func (s *DescribeContactListResponseBodyContactsContactChannels) SetSMS(v string) *DescribeContactListResponseBodyContactsContactChannels {
	s.SMS = &v
	return s
}

type DescribeContactListResponseBodyContactsContactChannelsState struct {
	// The status of the TradeManager ID.
	//
	// Valid value: OK. The value OK indicates that the TradeManager ID is valid and can receive alert notifications.
	//
	// >  This parameter applies only to the Alibaba Cloud China site (aliyun.com).
	//
	// example:
	//
	// OK
	AliIM *string `json:"AliIM,omitempty" xml:"AliIM,omitempty"`
	// The status of the DingTalk chatbot.
	//
	// Valid value: OK. The value OK indicates that the DingTalk chatbot is normal and alert notifications can be received in a DingTalk group.
	//
	// example:
	//
	// OK
	DingWebHook *string `json:"DingWebHook,omitempty" xml:"DingWebHook,omitempty"`
	// The status of the email address. Valid values:
	//
	// 	- PENDING: The phone number is not activated. Alert notifications can be sent to the phone number by using text messages only after the phone number is activated.
	//
	// 	- OK: The phone number is activated and can receive alert notifications.
	//
	// example:
	//
	// PENDING
	Mail *string `json:"Mail,omitempty" xml:"Mail,omitempty"`
	// The status of the phone number. Valid values:
	//
	// 	- PENDING: The phone number is not activated. Alert notifications can be sent to the phone number by using text messages only after the phone number is activated.
	//
	// 	- OK: The phone number is activated and can receive alert notifications.
	//
	// >  This parameter applies only to the Alibaba Cloud China site (aliyun.com).
	//
	// example:
	//
	// OK
	SMS *string `json:"SMS,omitempty" xml:"SMS,omitempty"`
}

func (s DescribeContactListResponseBodyContactsContactChannelsState) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListResponseBodyContactsContactChannelsState) GoString() string {
	return s.String()
}

func (s *DescribeContactListResponseBodyContactsContactChannelsState) SetAliIM(v string) *DescribeContactListResponseBodyContactsContactChannelsState {
	s.AliIM = &v
	return s
}

func (s *DescribeContactListResponseBodyContactsContactChannelsState) SetDingWebHook(v string) *DescribeContactListResponseBodyContactsContactChannelsState {
	s.DingWebHook = &v
	return s
}

func (s *DescribeContactListResponseBodyContactsContactChannelsState) SetMail(v string) *DescribeContactListResponseBodyContactsContactChannelsState {
	s.Mail = &v
	return s
}

func (s *DescribeContactListResponseBodyContactsContactChannelsState) SetSMS(v string) *DescribeContactListResponseBodyContactsContactChannelsState {
	s.SMS = &v
	return s
}

type DescribeContactListResponseBodyContactsContactContactGroups struct {
	ContactGroup []*string `json:"ContactGroup,omitempty" xml:"ContactGroup,omitempty" type:"Repeated"`
}

func (s DescribeContactListResponseBodyContactsContactContactGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListResponseBodyContactsContactContactGroups) GoString() string {
	return s.String()
}

func (s *DescribeContactListResponseBodyContactsContactContactGroups) SetContactGroup(v []*string) *DescribeContactListResponseBodyContactsContactContactGroups {
	s.ContactGroup = v
	return s
}

type DescribeContactListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeContactListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeContactListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListResponse) GoString() string {
	return s.String()
}

func (s *DescribeContactListResponse) SetHeaders(v map[string]*string) *DescribeContactListResponse {
	s.Headers = v
	return s
}

func (s *DescribeContactListResponse) SetStatusCode(v int32) *DescribeContactListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeContactListResponse) SetBody(v *DescribeContactListResponseBody) *DescribeContactListResponse {
	s.Body = v
	return s
}

type DescribeContactListByContactGroupRequest struct {
	// The name of the alert contact group.
	//
	// This parameter is required.
	//
	// example:
	//
	// CloudMonitor
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeContactListByContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListByContactGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeContactListByContactGroupRequest) SetContactGroupName(v string) *DescribeContactListByContactGroupRequest {
	s.ContactGroupName = &v
	return s
}

func (s *DescribeContactListByContactGroupRequest) SetRegionId(v string) *DescribeContactListByContactGroupRequest {
	s.RegionId = &v
	return s
}

type DescribeContactListByContactGroupResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The alert contacts that receive alert notifications.
	Contacts *DescribeContactListByContactGroupResponseBodyContacts `json:"Contacts,omitempty" xml:"Contacts,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// The group is not exists.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 06D5ECC2-B9BE-42A4-8FA3-1A610FB08B83
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeContactListByContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListByContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeContactListByContactGroupResponseBody) SetCode(v string) *DescribeContactListByContactGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeContactListByContactGroupResponseBody) SetContacts(v *DescribeContactListByContactGroupResponseBodyContacts) *DescribeContactListByContactGroupResponseBody {
	s.Contacts = v
	return s
}

func (s *DescribeContactListByContactGroupResponseBody) SetMessage(v string) *DescribeContactListByContactGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeContactListByContactGroupResponseBody) SetRequestId(v string) *DescribeContactListByContactGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeContactListByContactGroupResponseBody) SetSuccess(v bool) *DescribeContactListByContactGroupResponseBody {
	s.Success = &v
	return s
}

type DescribeContactListByContactGroupResponseBodyContacts struct {
	Contact []*DescribeContactListByContactGroupResponseBodyContactsContact `json:"Contact,omitempty" xml:"Contact,omitempty" type:"Repeated"`
}

func (s DescribeContactListByContactGroupResponseBodyContacts) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListByContactGroupResponseBodyContacts) GoString() string {
	return s.String()
}

func (s *DescribeContactListByContactGroupResponseBodyContacts) SetContact(v []*DescribeContactListByContactGroupResponseBodyContactsContact) *DescribeContactListByContactGroupResponseBodyContacts {
	s.Contact = v
	return s
}

type DescribeContactListByContactGroupResponseBodyContactsContact struct {
	// The alert notification methods.
	Channels *DescribeContactListByContactGroupResponseBodyContactsContactChannels `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Struct"`
	// The time when the alert contact was created.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1552314252000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the alert contact.
	//
	// example:
	//
	// ECS
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// The name of the alert contact.
	//
	// example:
	//
	// Alice
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The time when the alert contact was modified.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1552314252000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeContactListByContactGroupResponseBodyContactsContact) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListByContactGroupResponseBodyContactsContact) GoString() string {
	return s.String()
}

func (s *DescribeContactListByContactGroupResponseBodyContactsContact) SetChannels(v *DescribeContactListByContactGroupResponseBodyContactsContactChannels) *DescribeContactListByContactGroupResponseBodyContactsContact {
	s.Channels = v
	return s
}

func (s *DescribeContactListByContactGroupResponseBodyContactsContact) SetCreateTime(v int64) *DescribeContactListByContactGroupResponseBodyContactsContact {
	s.CreateTime = &v
	return s
}

func (s *DescribeContactListByContactGroupResponseBodyContactsContact) SetDesc(v string) *DescribeContactListByContactGroupResponseBodyContactsContact {
	s.Desc = &v
	return s
}

func (s *DescribeContactListByContactGroupResponseBodyContactsContact) SetName(v string) *DescribeContactListByContactGroupResponseBodyContactsContact {
	s.Name = &v
	return s
}

func (s *DescribeContactListByContactGroupResponseBodyContactsContact) SetUpdateTime(v int64) *DescribeContactListByContactGroupResponseBodyContactsContact {
	s.UpdateTime = &v
	return s
}

type DescribeContactListByContactGroupResponseBodyContactsContactChannels struct {
	// The TradeManager ID of the alert contact.
	//
	// >  This parameter can be returned only on the China site (aliyun.com).
	//
	// example:
	//
	// Alice
	AliIM *string `json:"AliIM,omitempty" xml:"AliIM,omitempty"`
	// The webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=9bf44f8189597d07dfdd7a123455ffc112****
	DingWebHook *string `json:"DingWebHook,omitempty" xml:"DingWebHook,omitempty"`
	// The email address of the alert contact.
	//
	// example:
	//
	// alice@example.com
	Mail *string `json:"Mail,omitempty" xml:"Mail,omitempty"`
	// The mobile number of the alert contact.
	//
	// >  This parameter can be returned only on the China site (aliyun.com).
	//
	// example:
	//
	// 1333333****
	SMS *string `json:"SMS,omitempty" xml:"SMS,omitempty"`
}

func (s DescribeContactListByContactGroupResponseBodyContactsContactChannels) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListByContactGroupResponseBodyContactsContactChannels) GoString() string {
	return s.String()
}

func (s *DescribeContactListByContactGroupResponseBodyContactsContactChannels) SetAliIM(v string) *DescribeContactListByContactGroupResponseBodyContactsContactChannels {
	s.AliIM = &v
	return s
}

func (s *DescribeContactListByContactGroupResponseBodyContactsContactChannels) SetDingWebHook(v string) *DescribeContactListByContactGroupResponseBodyContactsContactChannels {
	s.DingWebHook = &v
	return s
}

func (s *DescribeContactListByContactGroupResponseBodyContactsContactChannels) SetMail(v string) *DescribeContactListByContactGroupResponseBodyContactsContactChannels {
	s.Mail = &v
	return s
}

func (s *DescribeContactListByContactGroupResponseBodyContactsContactChannels) SetSMS(v string) *DescribeContactListByContactGroupResponseBodyContactsContactChannels {
	s.SMS = &v
	return s
}

type DescribeContactListByContactGroupResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeContactListByContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeContactListByContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeContactListByContactGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeContactListByContactGroupResponse) SetHeaders(v map[string]*string) *DescribeContactListByContactGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeContactListByContactGroupResponse) SetStatusCode(v int32) *DescribeContactListByContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeContactListByContactGroupResponse) SetBody(v *DescribeContactListByContactGroupResponseBody) *DescribeContactListByContactGroupResponse {
	s.Body = v
	return s
}

type DescribeCustomEventAttributeRequest struct {
	// The end of the time range to query.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552227965971
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the custom event.
	//
	// example:
	//
	// 123****
	EventId *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 123****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the custom event.
	//
	// example:
	//
	// test123
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of the page to return.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 50
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The keywords that are contained in the content of the custom event to query. You can use a logical operator between keywords.
	//
	// 	- If you need to query the custom event whose content contains a and b, set the value to a and b.
	//
	// 	- If you need to query the custom event whose content contains a or b, set the value to a or b.
	//
	// example:
	//
	// cms
	SearchKeywords *string `json:"SearchKeywords,omitempty" xml:"SearchKeywords,omitempty"`
	// The beginning of the time range to query.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552224365971
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeCustomEventAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventAttributeRequest) SetEndTime(v string) *DescribeCustomEventAttributeRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCustomEventAttributeRequest) SetEventId(v string) *DescribeCustomEventAttributeRequest {
	s.EventId = &v
	return s
}

func (s *DescribeCustomEventAttributeRequest) SetGroupId(v string) *DescribeCustomEventAttributeRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeCustomEventAttributeRequest) SetName(v string) *DescribeCustomEventAttributeRequest {
	s.Name = &v
	return s
}

func (s *DescribeCustomEventAttributeRequest) SetPageNumber(v int32) *DescribeCustomEventAttributeRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCustomEventAttributeRequest) SetPageSize(v int32) *DescribeCustomEventAttributeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCustomEventAttributeRequest) SetRegionId(v string) *DescribeCustomEventAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCustomEventAttributeRequest) SetSearchKeywords(v string) *DescribeCustomEventAttributeRequest {
	s.SearchKeywords = &v
	return s
}

func (s *DescribeCustomEventAttributeRequest) SetStartTime(v string) *DescribeCustomEventAttributeRequest {
	s.StartTime = &v
	return s
}

type DescribeCustomEventAttributeResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the custom event.
	CustomEvents *DescribeCustomEventAttributeResponseBodyCustomEvents `json:"CustomEvents,omitempty" xml:"CustomEvents,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// userId:173651113438***	- and name:"BABEL_CHECK"
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 60912C8D-B340-4253-ADE7-61ACDFD25CFC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCustomEventAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventAttributeResponseBody) SetCode(v string) *DescribeCustomEventAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCustomEventAttributeResponseBody) SetCustomEvents(v *DescribeCustomEventAttributeResponseBodyCustomEvents) *DescribeCustomEventAttributeResponseBody {
	s.CustomEvents = v
	return s
}

func (s *DescribeCustomEventAttributeResponseBody) SetMessage(v string) *DescribeCustomEventAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCustomEventAttributeResponseBody) SetRequestId(v string) *DescribeCustomEventAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCustomEventAttributeResponseBody) SetSuccess(v string) *DescribeCustomEventAttributeResponseBody {
	s.Success = &v
	return s
}

type DescribeCustomEventAttributeResponseBodyCustomEvents struct {
	CustomEvent []*DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent `json:"CustomEvent,omitempty" xml:"CustomEvent,omitempty" type:"Repeated"`
}

func (s DescribeCustomEventAttributeResponseBodyCustomEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventAttributeResponseBodyCustomEvents) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventAttributeResponseBodyCustomEvents) SetCustomEvent(v []*DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent) *DescribeCustomEventAttributeResponseBodyCustomEvents {
	s.CustomEvent = v
	return s
}

type DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent struct {
	// The content of the custom event.
	//
	// example:
	//
	// requestId:4975A6F3-19AC-4C01-BAD2-034DA07FEBB5, info:{"autoPay":false,"autoUseCoupon":false,"bid":"26842","buyerId":118935342242****,"commodities":[{"aliyunProduceCode":"cms","chargeType":"PREPAY","commodityCode":"cms_call_num","components":[{"componentCode":"phone_count","instanceProperty":[{"code":"phone_count","value":"500"}],"moduleAttrStatus":1}],"duration":6,"free":false,"orderParams":{"aliyunProduceCode":"cms"},"orderType":"BUY","prePayPostCharge":false,"pricingCycle":"Month","quantity":1,"refundSpecCode":"","renewChange":false,"specCode":"cms_call_num","specUpdate":false,"syncToSubscription":false,"upgradeInquireFinancialValue":true}],"fromApp":"commonbuy","orderParams":{"priceCheck":"true"},"payerId":118935342242****,"requestId":"ade3ad32-f58b-45d7-add4-ac542be3d8ec","skipChannel":false,"userId":118935342242****}
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the custom event.
	//
	// example:
	//
	// 123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the custom event.
	//
	// example:
	//
	// BABEL_CHECK
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The time when the custom event occurred.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552199984000
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent) SetContent(v string) *DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent {
	s.Content = &v
	return s
}

func (s *DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent) SetGroupId(v string) *DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent {
	s.GroupId = &v
	return s
}

func (s *DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent) SetId(v string) *DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent {
	s.Id = &v
	return s
}

func (s *DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent) SetName(v string) *DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent {
	s.Name = &v
	return s
}

func (s *DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent) SetTime(v string) *DescribeCustomEventAttributeResponseBodyCustomEventsCustomEvent {
	s.Time = &v
	return s
}

type DescribeCustomEventAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCustomEventAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCustomEventAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventAttributeResponse) SetHeaders(v map[string]*string) *DescribeCustomEventAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeCustomEventAttributeResponse) SetStatusCode(v int32) *DescribeCustomEventAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCustomEventAttributeResponse) SetBody(v *DescribeCustomEventAttributeResponseBody) *DescribeCustomEventAttributeResponse {
	s.Body = v
	return s
}

type DescribeCustomEventCountRequest struct {
	// The end of the time range to query.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552220485596
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the custom event.
	//
	// example:
	//
	// 123
	EventId *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the custom event.
	//
	// example:
	//
	// BABEL_BUY
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The keywords that are contained in the content of the custom event to query. You can use a logical operator between keywords.
	//
	// 	- If you need to query the custom event whose content contains a and b, set the value to a and b.
	//
	// 	- If you need to query the custom event whose content contains a or b, set the value to a or b.
	//
	// example:
	//
	// cms
	SearchKeywords *string `json:"SearchKeywords,omitempty" xml:"SearchKeywords,omitempty"`
	// The beginning of the time range to query.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552209685596
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeCustomEventCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventCountRequest) SetEndTime(v string) *DescribeCustomEventCountRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCustomEventCountRequest) SetEventId(v string) *DescribeCustomEventCountRequest {
	s.EventId = &v
	return s
}

func (s *DescribeCustomEventCountRequest) SetGroupId(v string) *DescribeCustomEventCountRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeCustomEventCountRequest) SetName(v string) *DescribeCustomEventCountRequest {
	s.Name = &v
	return s
}

func (s *DescribeCustomEventCountRequest) SetRegionId(v string) *DescribeCustomEventCountRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCustomEventCountRequest) SetSearchKeywords(v string) *DescribeCustomEventCountRequest {
	s.SearchKeywords = &v
	return s
}

func (s *DescribeCustomEventCountRequest) SetStartTime(v string) *DescribeCustomEventCountRequest {
	s.StartTime = &v
	return s
}

type DescribeCustomEventCountResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the custom event.
	CustomEventCounts *DescribeCustomEventCountResponseBodyCustomEventCounts `json:"CustomEventCounts,omitempty" xml:"CustomEventCounts,omitempty" type:"Struct"`
	// The returned message. If the call was successful, the value success is returned. If the call failed, an error message is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 60912C8D-B340-4253-ADE7-61ACDFD25CFC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCustomEventCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventCountResponseBody) SetCode(v string) *DescribeCustomEventCountResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCustomEventCountResponseBody) SetCustomEventCounts(v *DescribeCustomEventCountResponseBodyCustomEventCounts) *DescribeCustomEventCountResponseBody {
	s.CustomEventCounts = v
	return s
}

func (s *DescribeCustomEventCountResponseBody) SetMessage(v string) *DescribeCustomEventCountResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCustomEventCountResponseBody) SetRequestId(v string) *DescribeCustomEventCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCustomEventCountResponseBody) SetSuccess(v bool) *DescribeCustomEventCountResponseBody {
	s.Success = &v
	return s
}

type DescribeCustomEventCountResponseBodyCustomEventCounts struct {
	CustomEventCount []*DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount `json:"CustomEventCount,omitempty" xml:"CustomEventCount,omitempty" type:"Repeated"`
}

func (s DescribeCustomEventCountResponseBodyCustomEventCounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventCountResponseBodyCustomEventCounts) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventCountResponseBodyCustomEventCounts) SetCustomEventCount(v []*DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount) *DescribeCustomEventCountResponseBodyCustomEventCounts {
	s.CustomEventCount = v
	return s
}

type DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount struct {
	// The name of the custom event.
	//
	// example:
	//
	// BABEL_BUY
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of times that the custom event occurred in the specified time period.
	//
	// example:
	//
	// 20
	Num *int32 `json:"Num,omitempty" xml:"Num,omitempty"`
	// The time when the custom event occurred.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552267615000
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount) SetName(v string) *DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount {
	s.Name = &v
	return s
}

func (s *DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount) SetNum(v int32) *DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount {
	s.Num = &v
	return s
}

func (s *DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount) SetTime(v int64) *DescribeCustomEventCountResponseBodyCustomEventCountsCustomEventCount {
	s.Time = &v
	return s
}

type DescribeCustomEventCountResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCustomEventCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCustomEventCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventCountResponse) SetHeaders(v map[string]*string) *DescribeCustomEventCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeCustomEventCountResponse) SetStatusCode(v int32) *DescribeCustomEventCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCustomEventCountResponse) SetBody(v *DescribeCustomEventCountResponseBody) *DescribeCustomEventCountResponse {
	s.Body = v
	return s
}

type DescribeCustomEventHistogramRequest struct {
	// The end of the time range to query.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552220485596
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the custom event.
	//
	// example:
	//
	// 123
	EventId *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The level of the custom event. Valid values:
	//
	// 	- CRITICAL
	//
	// 	- WARN
	//
	// 	- INFO
	//
	// example:
	//
	// CRITICAL
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The name of the custom event.
	//
	// example:
	//
	// BucketIngressBandwidth
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The keywords that are contained in the content of the custom event to query. You can use a logical operator between keywords.
	//
	// 	- If you need to query the custom event whose content contains a and b, set the value to a and b.
	//
	// 	- If you need to query the custom event whose content contains a or b, set the value to a or b.
	//
	// example:
	//
	// cms
	SearchKeywords *string `json:"SearchKeywords,omitempty" xml:"SearchKeywords,omitempty"`
	// The beginning of the time range to query.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552209685596
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeCustomEventHistogramRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventHistogramRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventHistogramRequest) SetEndTime(v string) *DescribeCustomEventHistogramRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCustomEventHistogramRequest) SetEventId(v string) *DescribeCustomEventHistogramRequest {
	s.EventId = &v
	return s
}

func (s *DescribeCustomEventHistogramRequest) SetGroupId(v string) *DescribeCustomEventHistogramRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeCustomEventHistogramRequest) SetLevel(v string) *DescribeCustomEventHistogramRequest {
	s.Level = &v
	return s
}

func (s *DescribeCustomEventHistogramRequest) SetName(v string) *DescribeCustomEventHistogramRequest {
	s.Name = &v
	return s
}

func (s *DescribeCustomEventHistogramRequest) SetRegionId(v string) *DescribeCustomEventHistogramRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeCustomEventHistogramRequest) SetSearchKeywords(v string) *DescribeCustomEventHistogramRequest {
	s.SearchKeywords = &v
	return s
}

func (s *DescribeCustomEventHistogramRequest) SetStartTime(v string) *DescribeCustomEventHistogramRequest {
	s.StartTime = &v
	return s
}

type DescribeCustomEventHistogramResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the number of times that the custom event occurred during each interval of a time period.
	EventHistograms *DescribeCustomEventHistogramResponseBodyEventHistograms `json:"EventHistograms,omitempty" xml:"EventHistograms,omitempty" type:"Struct"`
	// The returned message. If the call was successful, the value success is returned. If the call failed, an error message is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 486029C9-53E1-44B4-85A8-16A571A043FD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCustomEventHistogramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventHistogramResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventHistogramResponseBody) SetCode(v string) *DescribeCustomEventHistogramResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCustomEventHistogramResponseBody) SetEventHistograms(v *DescribeCustomEventHistogramResponseBodyEventHistograms) *DescribeCustomEventHistogramResponseBody {
	s.EventHistograms = v
	return s
}

func (s *DescribeCustomEventHistogramResponseBody) SetMessage(v string) *DescribeCustomEventHistogramResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCustomEventHistogramResponseBody) SetRequestId(v string) *DescribeCustomEventHistogramResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCustomEventHistogramResponseBody) SetSuccess(v string) *DescribeCustomEventHistogramResponseBody {
	s.Success = &v
	return s
}

type DescribeCustomEventHistogramResponseBodyEventHistograms struct {
	EventHistogram []*DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram `json:"EventHistogram,omitempty" xml:"EventHistogram,omitempty" type:"Repeated"`
}

func (s DescribeCustomEventHistogramResponseBodyEventHistograms) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventHistogramResponseBodyEventHistograms) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventHistogramResponseBodyEventHistograms) SetEventHistogram(v []*DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram) *DescribeCustomEventHistogramResponseBodyEventHistograms {
	s.EventHistogram = v
	return s
}

type DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram struct {
	// The information about the number of times that the custom event occurred during an interval of a time period.
	//
	// example:
	//
	// 3
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The end of an interval.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552226750000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The beginning of an interval.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552226740000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram) SetCount(v int64) *DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram {
	s.Count = &v
	return s
}

func (s *DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram) SetEndTime(v int64) *DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram {
	s.EndTime = &v
	return s
}

func (s *DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram) SetStartTime(v int64) *DescribeCustomEventHistogramResponseBodyEventHistogramsEventHistogram {
	s.StartTime = &v
	return s
}

type DescribeCustomEventHistogramResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCustomEventHistogramResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCustomEventHistogramResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomEventHistogramResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustomEventHistogramResponse) SetHeaders(v map[string]*string) *DescribeCustomEventHistogramResponse {
	s.Headers = v
	return s
}

func (s *DescribeCustomEventHistogramResponse) SetStatusCode(v int32) *DescribeCustomEventHistogramResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCustomEventHistogramResponse) SetBody(v *DescribeCustomEventHistogramResponseBody) *DescribeCustomEventHistogramResponse {
	s.Body = v
	return s
}

type DescribeCustomMetricListRequest struct {
	// The dimensions based on which the resources are queried.
	//
	// example:
	//
	// {sampleName1=value1&amp;sampleName2=value2}
	Dimension *string `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// The ID of the application group.
	//
	// For information about how to query the IDs of application groups, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// example:
	//
	// 7378****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The MD5 value of the HTTP request body. The MD5 value is a 128-bit hash value used to verify the uniqueness of the reported monitoring data.
	//
	// example:
	//
	// 97c25982d9745a231276bff27469****
	Md5 *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	// The name of the custom metric.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The page number.
	//
	// Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Pages start from page 1. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCustomMetricListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomMetricListRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustomMetricListRequest) SetDimension(v string) *DescribeCustomMetricListRequest {
	s.Dimension = &v
	return s
}

func (s *DescribeCustomMetricListRequest) SetGroupId(v string) *DescribeCustomMetricListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeCustomMetricListRequest) SetMd5(v string) *DescribeCustomMetricListRequest {
	s.Md5 = &v
	return s
}

func (s *DescribeCustomMetricListRequest) SetMetricName(v string) *DescribeCustomMetricListRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeCustomMetricListRequest) SetPageNumber(v string) *DescribeCustomMetricListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCustomMetricListRequest) SetPageSize(v string) *DescribeCustomMetricListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCustomMetricListRequest) SetRegionId(v string) *DescribeCustomMetricListRequest {
	s.RegionId = &v
	return s
}

type DescribeCustomMetricListResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1AF425E4-1DEA-54F2-910A-8117C9686140
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The reported custom metrics that are found in the query.
	//
	// example:
	//
	// {\\"all\\":0,\\"size\\":10,\\"param\\":{\\"metric\\":\\"{\\\\\\"metricName\\\\\\":\\\\\\"cpu_total\\\\\\",\\\\\\"groupId\\\\\\":7378****,\\\\\\"project\\\\\\":\\\\\\"acs_customMetric_120886317861****\\\\\\",\\\\\\"dimension\\\\\\":\\\\\\"sampleName1=value1&sampleName2=value2\\\\\\",\\\\\\"status\\\\\\":1}\\",\\"service\\":\\"metric-center.aliyun-inc.com\\"},\\"page\\":1,\\"list\\":[]}
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DescribeCustomMetricListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomMetricListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCustomMetricListResponseBody) SetCode(v string) *DescribeCustomMetricListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCustomMetricListResponseBody) SetMessage(v string) *DescribeCustomMetricListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCustomMetricListResponseBody) SetRequestId(v string) *DescribeCustomMetricListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCustomMetricListResponseBody) SetResult(v string) *DescribeCustomMetricListResponseBody {
	s.Result = &v
	return s
}

type DescribeCustomMetricListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCustomMetricListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCustomMetricListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomMetricListResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustomMetricListResponse) SetHeaders(v map[string]*string) *DescribeCustomMetricListResponse {
	s.Headers = v
	return s
}

func (s *DescribeCustomMetricListResponse) SetStatusCode(v int32) *DescribeCustomMetricListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCustomMetricListResponse) SetBody(v *DescribeCustomMetricListResponseBody) *DescribeCustomMetricListResponse {
	s.Body = v
	return s
}

type DescribeDynamicTagRuleListRequest struct {
	// The ID of the tag rule.
	//
	// example:
	//
	// 004155fa-15ba-466d-b61a-***********
	DynamicTagRuleId *string `json:"DynamicTagRuleId,omitempty" xml:"DynamicTagRuleId,omitempty"`
	// The number of the page to return.
	//
	// Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// Minimum value: 1. Default value: 30.
	//
	// example:
	//
	// 30
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The tag key.
	//
	// For more information about how to obtain a tag key, see [DescribeTagKeyList](https://help.aliyun.com/document_detail/145558.html).
	//
	// example:
	//
	// tagkey1
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The ID of the region to which the tags belong.
	//
	// example:
	//
	// cn-hangzhou
	TagRegionId *string `json:"TagRegionId,omitempty" xml:"TagRegionId,omitempty"`
	// The tag value.
	//
	// For more information about how to obtain a tag value, see [DescribeTagKeyList](https://help.aliyun.com/document_detail/145557.html).
	//
	// example:
	//
	// *
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeDynamicTagRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDynamicTagRuleListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDynamicTagRuleListRequest) SetDynamicTagRuleId(v string) *DescribeDynamicTagRuleListRequest {
	s.DynamicTagRuleId = &v
	return s
}

func (s *DescribeDynamicTagRuleListRequest) SetPageNumber(v string) *DescribeDynamicTagRuleListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDynamicTagRuleListRequest) SetPageSize(v string) *DescribeDynamicTagRuleListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDynamicTagRuleListRequest) SetTagKey(v string) *DescribeDynamicTagRuleListRequest {
	s.TagKey = &v
	return s
}

func (s *DescribeDynamicTagRuleListRequest) SetTagRegionId(v string) *DescribeDynamicTagRuleListRequest {
	s.TagRegionId = &v
	return s
}

func (s *DescribeDynamicTagRuleListRequest) SetTagValue(v string) *DescribeDynamicTagRuleListRequest {
	s.TagValue = &v
	return s
}

type DescribeDynamicTagRuleListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 30
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 0D50523D-8D59-4A61-B58E-E2286ECFB3A9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The tag rules of application groups.
	TagGroupList *DescribeDynamicTagRuleListResponseBodyTagGroupList `json:"TagGroupList,omitempty" xml:"TagGroupList,omitempty" type:"Struct"`
	// The total number of returned entries.
	//
	// example:
	//
	// 2
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeDynamicTagRuleListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDynamicTagRuleListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDynamicTagRuleListResponseBody) SetCode(v string) *DescribeDynamicTagRuleListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBody) SetMessage(v string) *DescribeDynamicTagRuleListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBody) SetPageNumber(v string) *DescribeDynamicTagRuleListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBody) SetPageSize(v string) *DescribeDynamicTagRuleListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBody) SetRequestId(v string) *DescribeDynamicTagRuleListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBody) SetSuccess(v bool) *DescribeDynamicTagRuleListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBody) SetTagGroupList(v *DescribeDynamicTagRuleListResponseBodyTagGroupList) *DescribeDynamicTagRuleListResponseBody {
	s.TagGroupList = v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBody) SetTotal(v int32) *DescribeDynamicTagRuleListResponseBody {
	s.Total = &v
	return s
}

type DescribeDynamicTagRuleListResponseBodyTagGroupList struct {
	TagGroup []*DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup `json:"TagGroup,omitempty" xml:"TagGroup,omitempty" type:"Repeated"`
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupList) GoString() string {
	return s.String()
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupList) SetTagGroup(v []*DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) *DescribeDynamicTagRuleListResponseBodyTagGroupList {
	s.TagGroup = v
	return s
}

type DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup struct {
	// The alert contact group.
	ContactGroupList *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupContactGroupList `json:"ContactGroupList,omitempty" xml:"ContactGroupList,omitempty" type:"Struct"`
	// The ID of the tag rule.
	//
	// example:
	//
	// 1536df65-a719-429d-8813-73cc40d7****
	DynamicTagRuleId *string `json:"DynamicTagRuleId,omitempty" xml:"DynamicTagRuleId,omitempty"`
	// The conditional expressions used to create an application group based on the tag.
	MatchExpress *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpress `json:"MatchExpress,omitempty" xml:"MatchExpress,omitempty" type:"Struct"`
	// The logical operator that is used between conditional expressions. Valid values:
	//
	// 	- `and`
	//
	// 	- `or`
	//
	// >  Only one logical operator can be used in a request.
	//
	// example:
	//
	// or
	MatchExpressFilterRelation *string `json:"MatchExpressFilterRelation,omitempty" xml:"MatchExpressFilterRelation,omitempty"`
	// The ID of the region to which the tags belong.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of adding instances that meet the tag rule to the application group. Valid values:
	//
	// 	- `RUNNING`
	//
	// 	- `FINISH`
	//
	// example:
	//
	// FINISH
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tag key.
	//
	// example:
	//
	// tagkey1
	TagKey            *string                                                                      `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValueBlacklist *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTagValueBlacklist `json:"TagValueBlacklist,omitempty" xml:"TagValueBlacklist,omitempty" type:"Struct"`
	// The IDs of the alert templates.
	TemplateIdList *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTemplateIdList `json:"TemplateIdList,omitempty" xml:"TemplateIdList,omitempty" type:"Struct"`
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) GoString() string {
	return s.String()
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) SetContactGroupList(v *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupContactGroupList) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup {
	s.ContactGroupList = v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) SetDynamicTagRuleId(v string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup {
	s.DynamicTagRuleId = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) SetMatchExpress(v *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpress) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup {
	s.MatchExpress = v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) SetMatchExpressFilterRelation(v string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup {
	s.MatchExpressFilterRelation = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) SetRegionId(v string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup {
	s.RegionId = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) SetStatus(v string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup {
	s.Status = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) SetTagKey(v string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup {
	s.TagKey = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) SetTagValueBlacklist(v *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTagValueBlacklist) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup {
	s.TagValueBlacklist = v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup) SetTemplateIdList(v *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTemplateIdList) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroup {
	s.TemplateIdList = v
	return s
}

type DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupContactGroupList struct {
	ContactGroupList []*string `json:"ContactGroupList,omitempty" xml:"ContactGroupList,omitempty" type:"Repeated"`
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupContactGroupList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupContactGroupList) GoString() string {
	return s.String()
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupContactGroupList) SetContactGroupList(v []*string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupContactGroupList {
	s.ContactGroupList = v
	return s
}

type DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpress struct {
	MatchExpress []*DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress `json:"MatchExpress,omitempty" xml:"MatchExpress,omitempty" type:"Repeated"`
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpress) String() string {
	return tea.Prettify(s)
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpress) GoString() string {
	return s.String()
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpress) SetMatchExpress(v []*DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpress {
	s.MatchExpress = v
	return s
}

type DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress struct {
	// The tag key.
	//
	// example:
	//
	// azone-version
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	//
	// The `TagValue` and `TagValueMatchFunction` parameters must be used in pairs.
	//
	// example:
	//
	// *
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	// The method that is used to match tag values. Valid values:
	//
	// 	- all: includes all
	//
	// 	- startWith: starts with a prefix
	//
	// 	- endWith: ends with a suffix
	//
	// 	- contains: contains
	//
	// 	- notContains: does not contain
	//
	// 	- equals: equals
	//
	// example:
	//
	// all
	TagValueMatchFunction *string `json:"TagValueMatchFunction,omitempty" xml:"TagValueMatchFunction,omitempty"`
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress) String() string {
	return tea.Prettify(s)
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress) GoString() string {
	return s.String()
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress) SetTagKey(v string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress {
	s.TagKey = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress) SetTagValue(v string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress {
	s.TagValue = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress) SetTagValueMatchFunction(v string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupMatchExpressMatchExpress {
	s.TagValueMatchFunction = &v
	return s
}

type DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTagValueBlacklist struct {
	TagValueBlacklist []*string `json:"TagValueBlacklist,omitempty" xml:"TagValueBlacklist,omitempty" type:"Repeated"`
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTagValueBlacklist) String() string {
	return tea.Prettify(s)
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTagValueBlacklist) GoString() string {
	return s.String()
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTagValueBlacklist) SetTagValueBlacklist(v []*string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTagValueBlacklist {
	s.TagValueBlacklist = v
	return s
}

type DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTemplateIdList struct {
	TemplateIdList []*string `json:"TemplateIdList,omitempty" xml:"TemplateIdList,omitempty" type:"Repeated"`
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTemplateIdList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTemplateIdList) GoString() string {
	return s.String()
}

func (s *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTemplateIdList) SetTemplateIdList(v []*string) *DescribeDynamicTagRuleListResponseBodyTagGroupListTagGroupTemplateIdList {
	s.TemplateIdList = v
	return s
}

type DescribeDynamicTagRuleListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDynamicTagRuleListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDynamicTagRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDynamicTagRuleListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDynamicTagRuleListResponse) SetHeaders(v map[string]*string) *DescribeDynamicTagRuleListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDynamicTagRuleListResponse) SetStatusCode(v int32) *DescribeDynamicTagRuleListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDynamicTagRuleListResponse) SetBody(v *DescribeDynamicTagRuleListResponseBody) *DescribeDynamicTagRuleListResponse {
	s.Body = v
	return s
}

type DescribeEventRuleAttributeRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the event-triggered alert rule.
	//
	// For information about how to obtain the name of an event-triggered alert rule, see [DescribeEventRuleList](https://help.aliyun.com/document_detail/114996.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// testRule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which new alert notifications are not sent even if the trigger conditions are met.
	//
	// Unit: seconds. Default value: 86400, which indicates one day.
	//
	// >  Only one alert notification is sent during each mute period even if the metric value exceeds the alert threshold several times.
	//
	// example:
	//
	// 86400
	SilenceTime *string `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
}

func (s DescribeEventRuleAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeRequest) SetRegionId(v string) *DescribeEventRuleAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEventRuleAttributeRequest) SetRuleName(v string) *DescribeEventRuleAttributeRequest {
	s.RuleName = &v
	return s
}

func (s *DescribeEventRuleAttributeRequest) SetSilenceTime(v string) *DescribeEventRuleAttributeRequest {
	s.SilenceTime = &v
	return s
}

type DescribeEventRuleAttributeResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The alert does not exist.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9AA3F210-C03D-4C86-8DB6-21C84FF692A1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the event-triggered alert rule.
	Result *DescribeEventRuleAttributeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEventRuleAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeResponseBody) SetCode(v string) *DescribeEventRuleAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEventRuleAttributeResponseBody) SetMessage(v string) *DescribeEventRuleAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEventRuleAttributeResponseBody) SetRequestId(v string) *DescribeEventRuleAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventRuleAttributeResponseBody) SetResult(v *DescribeEventRuleAttributeResponseBodyResult) *DescribeEventRuleAttributeResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEventRuleAttributeResponseBody) SetSuccess(v bool) *DescribeEventRuleAttributeResponseBody {
	s.Success = &v
	return s
}

type DescribeEventRuleAttributeResponseBodyResult struct {
	// The description of the event-triggered alert rule.
	//
	// example:
	//
	// Default group event rule.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The event pattern. This parameter describes the trigger conditions of an event.
	EventPattern *DescribeEventRuleAttributeResponseBodyResultEventPattern `json:"EventPattern,omitempty" xml:"EventPattern,omitempty" type:"Struct"`
	// The event type. Valid values:
	//
	// 	- SYSTEM: system event
	//
	// 	- CUSTOM: custom event
	//
	// example:
	//
	// SYSTEM
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 3607****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the event-triggered alert rule.
	//
	// example:
	//
	// test_DefaultEventRule_7378****
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The status of the event-triggered alert rule. Valid values:
	//
	// 	- ENABLED
	//
	// 	- DISABLED
	//
	// example:
	//
	// ENABLED
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeEventRuleAttributeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeResponseBodyResult) SetDescription(v string) *DescribeEventRuleAttributeResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResult) SetEventPattern(v *DescribeEventRuleAttributeResponseBodyResultEventPattern) *DescribeEventRuleAttributeResponseBodyResult {
	s.EventPattern = v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResult) SetEventType(v string) *DescribeEventRuleAttributeResponseBodyResult {
	s.EventType = &v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResult) SetGroupId(v string) *DescribeEventRuleAttributeResponseBodyResult {
	s.GroupId = &v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResult) SetName(v string) *DescribeEventRuleAttributeResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResult) SetState(v string) *DescribeEventRuleAttributeResponseBodyResult {
	s.State = &v
	return s
}

type DescribeEventRuleAttributeResponseBodyResultEventPattern struct {
	// The types of the event-triggered alert rules.
	EventTypeList *DescribeEventRuleAttributeResponseBodyResultEventPatternEventTypeList `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty" type:"Struct"`
	// The keyword for filtering.
	KeywordFilterObj *DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObj `json:"KeywordFilterObj,omitempty" xml:"KeywordFilterObj,omitempty" type:"Struct"`
	LevelList        *DescribeEventRuleAttributeResponseBodyResultEventPatternLevelList        `json:"LevelList,omitempty" xml:"LevelList,omitempty" type:"Struct"`
	NameList         *DescribeEventRuleAttributeResponseBodyResultEventPatternNameList         `json:"NameList,omitempty" xml:"NameList,omitempty" type:"Struct"`
	// The name of the cloud service.
	//
	// example:
	//
	// CloudMonitor
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// Indicates that logs are filtered based on the specified SQL statement. If the specified conditions are met, an alert is triggered.
	//
	// example:
	//
	// ycccluster1 and (i-23ij0o82612 or Executed1) or Asimulated not 222
	SQLFilter  *string                                                             `json:"SQLFilter,omitempty" xml:"SQLFilter,omitempty"`
	StatusList *DescribeEventRuleAttributeResponseBodyResultEventPatternStatusList `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Struct"`
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPattern) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPattern) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPattern) SetEventTypeList(v *DescribeEventRuleAttributeResponseBodyResultEventPatternEventTypeList) *DescribeEventRuleAttributeResponseBodyResultEventPattern {
	s.EventTypeList = v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPattern) SetKeywordFilterObj(v *DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObj) *DescribeEventRuleAttributeResponseBodyResultEventPattern {
	s.KeywordFilterObj = v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPattern) SetLevelList(v *DescribeEventRuleAttributeResponseBodyResultEventPatternLevelList) *DescribeEventRuleAttributeResponseBodyResultEventPattern {
	s.LevelList = v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPattern) SetNameList(v *DescribeEventRuleAttributeResponseBodyResultEventPatternNameList) *DescribeEventRuleAttributeResponseBodyResultEventPattern {
	s.NameList = v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPattern) SetProduct(v string) *DescribeEventRuleAttributeResponseBodyResultEventPattern {
	s.Product = &v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPattern) SetSQLFilter(v string) *DescribeEventRuleAttributeResponseBodyResultEventPattern {
	s.SQLFilter = &v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPattern) SetStatusList(v *DescribeEventRuleAttributeResponseBodyResultEventPatternStatusList) *DescribeEventRuleAttributeResponseBodyResultEventPattern {
	s.StatusList = v
	return s
}

type DescribeEventRuleAttributeResponseBodyResultEventPatternEventTypeList struct {
	EventTypeList []*string `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternEventTypeList) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternEventTypeList) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPatternEventTypeList) SetEventTypeList(v []*string) *DescribeEventRuleAttributeResponseBodyResultEventPatternEventTypeList {
	s.EventTypeList = v
	return s
}

type DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObj struct {
	// The keywords that are used to match events.
	Keywords *DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObjKeywords `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Struct"`
	// The relationship between multiple keywords in a condition. Valid values:
	//
	// 	- OR: The relationship between keywords is OR.
	//
	// 	- NOT: The keyword is excluded. The value NOT indicates that all events that do not contain the keywords are matched.
	//
	// example:
	//
	// OR
	Relation *string `json:"Relation,omitempty" xml:"Relation,omitempty"`
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObj) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObj) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObj) SetKeywords(v *DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObjKeywords) *DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObj {
	s.Keywords = v
	return s
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObj) SetRelation(v string) *DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObj {
	s.Relation = &v
	return s
}

type DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObjKeywords struct {
	Keyword []*string `json:"keyword,omitempty" xml:"keyword,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObjKeywords) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObjKeywords) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObjKeywords) SetKeyword(v []*string) *DescribeEventRuleAttributeResponseBodyResultEventPatternKeywordFilterObjKeywords {
	s.Keyword = v
	return s
}

type DescribeEventRuleAttributeResponseBodyResultEventPatternLevelList struct {
	LevelList []*string `json:"LevelList,omitempty" xml:"LevelList,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternLevelList) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternLevelList) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPatternLevelList) SetLevelList(v []*string) *DescribeEventRuleAttributeResponseBodyResultEventPatternLevelList {
	s.LevelList = v
	return s
}

type DescribeEventRuleAttributeResponseBodyResultEventPatternNameList struct {
	NameList []*string `json:"NameList,omitempty" xml:"NameList,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternNameList) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternNameList) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPatternNameList) SetNameList(v []*string) *DescribeEventRuleAttributeResponseBodyResultEventPatternNameList {
	s.NameList = v
	return s
}

type DescribeEventRuleAttributeResponseBodyResultEventPatternStatusList struct {
	StatusList []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternStatusList) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeResponseBodyResultEventPatternStatusList) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeResponseBodyResultEventPatternStatusList) SetStatusList(v []*string) *DescribeEventRuleAttributeResponseBodyResultEventPatternStatusList {
	s.StatusList = v
	return s
}

type DescribeEventRuleAttributeResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventRuleAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventRuleAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleAttributeResponse) SetHeaders(v map[string]*string) *DescribeEventRuleAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventRuleAttributeResponse) SetStatusCode(v int32) *DescribeEventRuleAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventRuleAttributeResponse) SetBody(v *DescribeEventRuleAttributeResponseBody) *DescribeEventRuleAttributeResponse {
	s.Body = v
	return s
}

type DescribeEventRuleListRequest struct {
	// The ID of the application group.
	//
	// example:
	//
	// 7378****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies whether to enable the event-triggered alert rule. Valid values:
	//
	// - true (default)
	//
	// - false
	//
	// example:
	//
	// true
	IsEnable *bool `json:"IsEnable,omitempty" xml:"IsEnable,omitempty"`
	// The prefix in the name of the event-triggered alert rule.
	//
	// example:
	//
	// test
	NamePrefix *string `json:"NamePrefix,omitempty" xml:"NamePrefix,omitempty"`
	// The page number.
	//
	// Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Pages start from page 1. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeEventRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListRequest) SetGroupId(v string) *DescribeEventRuleListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeEventRuleListRequest) SetIsEnable(v bool) *DescribeEventRuleListRequest {
	s.IsEnable = &v
	return s
}

func (s *DescribeEventRuleListRequest) SetNamePrefix(v string) *DescribeEventRuleListRequest {
	s.NamePrefix = &v
	return s
}

func (s *DescribeEventRuleListRequest) SetPageNumber(v string) *DescribeEventRuleListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEventRuleListRequest) SetPageSize(v string) *DescribeEventRuleListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEventRuleListRequest) SetRegionId(v string) *DescribeEventRuleListRequest {
	s.RegionId = &v
	return s
}

type DescribeEventRuleListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The event-triggered alert rule.
	EventRules *DescribeEventRuleListResponseBodyEventRules `json:"EventRules,omitempty" xml:"EventRules,omitempty" type:"Struct"`
	// The error message returned.
	//
	// example:
	//
	// User not authorized to operate on the specified resource.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// D0E6D82B-16B5-422A-8136-EE5BDC01E415
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 21
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeEventRuleListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponseBody) SetCode(v string) *DescribeEventRuleListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEventRuleListResponseBody) SetEventRules(v *DescribeEventRuleListResponseBodyEventRules) *DescribeEventRuleListResponseBody {
	s.EventRules = v
	return s
}

func (s *DescribeEventRuleListResponseBody) SetMessage(v string) *DescribeEventRuleListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEventRuleListResponseBody) SetRequestId(v string) *DescribeEventRuleListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventRuleListResponseBody) SetSuccess(v bool) *DescribeEventRuleListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeEventRuleListResponseBody) SetTotal(v int32) *DescribeEventRuleListResponseBody {
	s.Total = &v
	return s
}

type DescribeEventRuleListResponseBodyEventRules struct {
	EventRule []*DescribeEventRuleListResponseBodyEventRulesEventRule `json:"EventRule,omitempty" xml:"EventRule,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleListResponseBodyEventRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponseBodyEventRules) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponseBodyEventRules) SetEventRule(v []*DescribeEventRuleListResponseBodyEventRulesEventRule) *DescribeEventRuleListResponseBodyEventRules {
	s.EventRule = v
	return s
}

type DescribeEventRuleListResponseBodyEventRulesEventRule struct {
	// The description of the event-triggered alert rule.
	//
	// example:
	//
	// Default group event rule.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The mode of the event-triggered alert rule.
	EventPattern *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPattern `json:"EventPattern,omitempty" xml:"EventPattern,omitempty" type:"Struct"`
	// The type of the event-triggered alert rule. Valid values:
	//
	// 	- SYSTEM: system event-triggered alert rule
	//
	// 	- CUSTOM: custom event-triggered alert rule
	//
	// example:
	//
	// SYSTEM
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 7378****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the event-triggered alert rule.
	//
	// example:
	//
	// test_DefaultEventRule_7378****
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The mute period during which new alert notifications are not sent even if the trigger conditions are met.
	//
	// example:
	//
	// 86400
	SilenceTime *int64 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The status of the event-triggered alert rule. Valid values:
	//
	// 	- ENABLED
	//
	// 	- DISABLED
	//
	// example:
	//
	// ENABLED
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRule) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRule) SetDescription(v string) *DescribeEventRuleListResponseBodyEventRulesEventRule {
	s.Description = &v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRule) SetEventPattern(v *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPattern) *DescribeEventRuleListResponseBodyEventRulesEventRule {
	s.EventPattern = v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRule) SetEventType(v string) *DescribeEventRuleListResponseBodyEventRulesEventRule {
	s.EventType = &v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRule) SetGroupId(v string) *DescribeEventRuleListResponseBodyEventRulesEventRule {
	s.GroupId = &v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRule) SetName(v string) *DescribeEventRuleListResponseBodyEventRulesEventRule {
	s.Name = &v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRule) SetSilenceTime(v int64) *DescribeEventRuleListResponseBodyEventRulesEventRule {
	s.SilenceTime = &v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRule) SetState(v string) *DescribeEventRuleListResponseBodyEventRulesEventRule {
	s.State = &v
	return s
}

type DescribeEventRuleListResponseBodyEventRulesEventRuleEventPattern struct {
	EventPattern []*DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern `json:"EventPattern,omitempty" xml:"EventPattern,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPattern) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPattern) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPattern) SetEventPattern(v []*DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPattern {
	s.EventPattern = v
	return s
}

type DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern struct {
	// The custom filter conditions.
	//
	// example:
	//
	// ECS123
	CustomFilters *string `json:"CustomFilters,omitempty" xml:"CustomFilters,omitempty"`
	// The types of the event-triggered alert rules.
	EventTypeList *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternEventTypeList `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty" type:"Struct"`
	// The keyword for filtering.
	KeywordFilter *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilter `json:"KeywordFilter,omitempty" xml:"KeywordFilter,omitempty" type:"Struct"`
	// The levels of the event-triggered alerts.
	LevelList *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternLevelList `json:"LevelList,omitempty" xml:"LevelList,omitempty" type:"Struct"`
	// The event names.
	NameList *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternNameList `json:"NameList,omitempty" xml:"NameList,omitempty" type:"Struct"`
	// The abbreviation of the Alibaba Cloud service name.
	//
	// example:
	//
	// CloudMonitor
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// Indicates that logs are filtered based on the specified SQL statement. If the specified conditions are met, an alert is triggered.
	//
	// example:
	//
	// ycccluster1 and (i-23ij0o82612 or Executed1) or Asimulated not 222
	SQLFilter *string `json:"SQLFilter,omitempty" xml:"SQLFilter,omitempty"`
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern) SetCustomFilters(v string) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern {
	s.CustomFilters = &v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern) SetEventTypeList(v *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternEventTypeList) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern {
	s.EventTypeList = v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern) SetKeywordFilter(v *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilter) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern {
	s.KeywordFilter = v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern) SetLevelList(v *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternLevelList) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern {
	s.LevelList = v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern) SetNameList(v *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternNameList) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern {
	s.NameList = v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern) SetProduct(v string) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern {
	s.Product = &v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern) SetSQLFilter(v string) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPattern {
	s.SQLFilter = &v
	return s
}

type DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternEventTypeList struct {
	EventTypeList []*string `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternEventTypeList) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternEventTypeList) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternEventTypeList) SetEventTypeList(v []*string) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternEventTypeList {
	s.EventTypeList = v
	return s
}

type DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilter struct {
	// The keywords that are used to match events.
	Keywords *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilterKeywords `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Struct"`
	// The relationship between multiple keywords in a condition. Valid values:
	//
	// 	- OR: The relationship between keywords is OR.
	//
	// 	- NOT: The keyword is excluded. The value NOT indicates that all events that do not contain the keywords are matched.
	//
	// example:
	//
	// OR
	Relation *string `json:"Relation,omitempty" xml:"Relation,omitempty"`
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilter) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilter) SetKeywords(v *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilterKeywords) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilter {
	s.Keywords = v
	return s
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilter) SetRelation(v string) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilter {
	s.Relation = &v
	return s
}

type DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilterKeywords struct {
	Keywords []*string `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilterKeywords) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilterKeywords) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilterKeywords) SetKeywords(v []*string) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternKeywordFilterKeywords {
	s.Keywords = v
	return s
}

type DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternLevelList struct {
	LevelList []*string `json:"LevelList,omitempty" xml:"LevelList,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternLevelList) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternLevelList) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternLevelList) SetLevelList(v []*string) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternLevelList {
	s.LevelList = v
	return s
}

type DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternNameList struct {
	NameList []*string `json:"NameList,omitempty" xml:"NameList,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternNameList) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternNameList) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternNameList) SetNameList(v []*string) *DescribeEventRuleListResponseBodyEventRulesEventRuleEventPatternEventPatternNameList {
	s.NameList = v
	return s
}

type DescribeEventRuleListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventRuleListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleListResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleListResponse) SetHeaders(v map[string]*string) *DescribeEventRuleListResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventRuleListResponse) SetStatusCode(v int32) *DescribeEventRuleListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventRuleListResponse) SetBody(v *DescribeEventRuleListResponseBody) *DescribeEventRuleListResponse {
	s.Body = v
	return s
}

type DescribeEventRuleTargetListRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the event-triggered alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// testRule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
}

func (s DescribeEventRuleTargetListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListRequest) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListRequest) SetRegionId(v string) *DescribeEventRuleTargetListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeEventRuleTargetListRequest) SetRuleName(v string) *DescribeEventRuleTargetListRequest {
	s.RuleName = &v
	return s
}

type DescribeEventRuleTargetListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the recipients if alert notifications are sent to the alert contacts of an alert contact group.
	ContactParameters *DescribeEventRuleTargetListResponseBodyContactParameters `json:"ContactParameters,omitempty" xml:"ContactParameters,omitempty" type:"Struct"`
	// The information about the recipients in Function Compute.
	FcParameters *DescribeEventRuleTargetListResponseBodyFcParameters `json:"FcParameters,omitempty" xml:"FcParameters,omitempty" type:"Struct"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The notifications of Simple Message Queue (formerly MNS) (SMQ).
	MnsParameters *DescribeEventRuleTargetListResponseBodyMnsParameters `json:"MnsParameters,omitempty" xml:"MnsParameters,omitempty" type:"Struct"`
	// The information about the recipients in OpenAPI Explorer.
	OpenApiParameters *DescribeEventRuleTargetListResponseBodyOpenApiParameters `json:"OpenApiParameters,omitempty" xml:"OpenApiParameters,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 87170bc7-e28a-4c93-b9bf-90a1dbe84736
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the recipients in Log Service.
	SlsParameters *DescribeEventRuleTargetListResponseBodySlsParameters `json:"SlsParameters,omitempty" xml:"SlsParameters,omitempty" type:"Struct"`
	// The information about the recipients if alert notifications are sent by sending a request to a callback URL.
	WebhookParameters *DescribeEventRuleTargetListResponseBodyWebhookParameters `json:"WebhookParameters,omitempty" xml:"WebhookParameters,omitempty" type:"Struct"`
}

func (s DescribeEventRuleTargetListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBody) SetCode(v string) *DescribeEventRuleTargetListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBody) SetContactParameters(v *DescribeEventRuleTargetListResponseBodyContactParameters) *DescribeEventRuleTargetListResponseBody {
	s.ContactParameters = v
	return s
}

func (s *DescribeEventRuleTargetListResponseBody) SetFcParameters(v *DescribeEventRuleTargetListResponseBodyFcParameters) *DescribeEventRuleTargetListResponseBody {
	s.FcParameters = v
	return s
}

func (s *DescribeEventRuleTargetListResponseBody) SetMessage(v string) *DescribeEventRuleTargetListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBody) SetMnsParameters(v *DescribeEventRuleTargetListResponseBodyMnsParameters) *DescribeEventRuleTargetListResponseBody {
	s.MnsParameters = v
	return s
}

func (s *DescribeEventRuleTargetListResponseBody) SetOpenApiParameters(v *DescribeEventRuleTargetListResponseBodyOpenApiParameters) *DescribeEventRuleTargetListResponseBody {
	s.OpenApiParameters = v
	return s
}

func (s *DescribeEventRuleTargetListResponseBody) SetRequestId(v string) *DescribeEventRuleTargetListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBody) SetSlsParameters(v *DescribeEventRuleTargetListResponseBodySlsParameters) *DescribeEventRuleTargetListResponseBody {
	s.SlsParameters = v
	return s
}

func (s *DescribeEventRuleTargetListResponseBody) SetWebhookParameters(v *DescribeEventRuleTargetListResponseBodyWebhookParameters) *DescribeEventRuleTargetListResponseBody {
	s.WebhookParameters = v
	return s
}

type DescribeEventRuleTargetListResponseBodyContactParameters struct {
	ContactParameter []*DescribeEventRuleTargetListResponseBodyContactParametersContactParameter `json:"ContactParameter,omitempty" xml:"ContactParameter,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleTargetListResponseBodyContactParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodyContactParameters) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodyContactParameters) SetContactParameter(v []*DescribeEventRuleTargetListResponseBodyContactParametersContactParameter) *DescribeEventRuleTargetListResponseBodyContactParameters {
	s.ContactParameter = v
	return s
}

type DescribeEventRuleTargetListResponseBodyContactParametersContactParameter struct {
	// The name of the alert group.
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The ID of the recipient.
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The alert notification methods. Valid values:
	//
	// 4: Alert notifications are sent by using DingTalk chatbots and emails.
	//
	// example:
	//
	// 3
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s DescribeEventRuleTargetListResponseBodyContactParametersContactParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodyContactParametersContactParameter) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodyContactParametersContactParameter) SetContactGroupName(v string) *DescribeEventRuleTargetListResponseBodyContactParametersContactParameter {
	s.ContactGroupName = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyContactParametersContactParameter) SetId(v string) *DescribeEventRuleTargetListResponseBodyContactParametersContactParameter {
	s.Id = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyContactParametersContactParameter) SetLevel(v string) *DescribeEventRuleTargetListResponseBodyContactParametersContactParameter {
	s.Level = &v
	return s
}

type DescribeEventRuleTargetListResponseBodyFcParameters struct {
	FCParameter []*DescribeEventRuleTargetListResponseBodyFcParametersFCParameter `json:"FCParameter,omitempty" xml:"FCParameter,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleTargetListResponseBodyFcParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodyFcParameters) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodyFcParameters) SetFCParameter(v []*DescribeEventRuleTargetListResponseBodyFcParametersFCParameter) *DescribeEventRuleTargetListResponseBodyFcParameters {
	s.FCParameter = v
	return s
}

type DescribeEventRuleTargetListResponseBodyFcParametersFCParameter struct {
	// The Alibaba Cloud Resource Name (ARN) of the function.
	//
	// Format: `arn:acs:${Service}:${Region}:${Account}:${ResourceType}/${ResourceId}`. Fields:
	//
	// - Service: the code of an Alibaba Cloud service
	//
	// - Region: the region ID
	//
	// - Account: the ID of an Alibaba Cloud account
	//
	// - ResourceType: the resource type
	//
	// - ResourceId: the resource ID
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The name of the function.
	//
	// example:
	//
	// fcTest1
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The ID of the recipient.
	//
	// example:
	//
	// 3
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The region where Function Compute is deployed.
	//
	// example:
	//
	// cn-qingdao
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The name of the Function Compute service.
	//
	// example:
	//
	// service1
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeEventRuleTargetListResponseBodyFcParametersFCParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodyFcParametersFCParameter) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodyFcParametersFCParameter) SetArn(v string) *DescribeEventRuleTargetListResponseBodyFcParametersFCParameter {
	s.Arn = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyFcParametersFCParameter) SetFunctionName(v string) *DescribeEventRuleTargetListResponseBodyFcParametersFCParameter {
	s.FunctionName = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyFcParametersFCParameter) SetId(v string) *DescribeEventRuleTargetListResponseBodyFcParametersFCParameter {
	s.Id = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyFcParametersFCParameter) SetRegion(v string) *DescribeEventRuleTargetListResponseBodyFcParametersFCParameter {
	s.Region = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyFcParametersFCParameter) SetServiceName(v string) *DescribeEventRuleTargetListResponseBodyFcParametersFCParameter {
	s.ServiceName = &v
	return s
}

type DescribeEventRuleTargetListResponseBodyMnsParameters struct {
	MnsParameter []*DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter `json:"MnsParameter,omitempty" xml:"MnsParameter,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleTargetListResponseBodyMnsParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodyMnsParameters) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodyMnsParameters) SetMnsParameter(v []*DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter) *DescribeEventRuleTargetListResponseBodyMnsParameters {
	s.MnsParameter = v
	return s
}

type DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter struct {
	// The ARN of the MNS queue.
	//
	// Format: `arn:acs:${Service}:${Region}:${Account}:${ResourceType}/${ResourceId}`. Fields:
	//
	// - Service: the code of an Alibaba Cloud service
	//
	// - Region: the region ID
	//
	// - Account: the ID of an Alibaba Cloud account
	//
	// - ResourceType: the resource type
	//
	// - ResourceId: the resource ID
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the recipient.
	//
	// example:
	//
	// 2
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the SMQ queue.
	//
	// example:
	//
	// testQueue
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
	// The region for SMQ.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The SMQ topic.
	//
	// example:
	//
	// topic_sample
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter) SetArn(v string) *DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter {
	s.Arn = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter) SetId(v string) *DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter {
	s.Id = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter) SetQueue(v string) *DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter {
	s.Queue = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter) SetRegion(v string) *DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter {
	s.Region = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter) SetTopic(v string) *DescribeEventRuleTargetListResponseBodyMnsParametersMnsParameter {
	s.Topic = &v
	return s
}

type DescribeEventRuleTargetListResponseBodyOpenApiParameters struct {
	OpenApiParameters []*DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters `json:"OpenApiParameters,omitempty" xml:"OpenApiParameters,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleTargetListResponseBodyOpenApiParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodyOpenApiParameters) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodyOpenApiParameters) SetOpenApiParameters(v []*DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters) *DescribeEventRuleTargetListResponseBodyOpenApiParameters {
	s.OpenApiParameters = v
	return s
}

type DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters struct {
	// The name of the API operation.
	//
	// example:
	//
	// PutLogs
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The ARN of the API operation.
	//
	// Format: `arn:acs:${Service}:${Region}:${Account}:${ResourceType}/${ResourceId}`. Fields:
	//
	// - Service: the code of an Alibaba Cloud service
	//
	// - Region: the region ID
	//
	// - Account: the ID of an Alibaba Cloud account
	//
	// - ResourceType: the resource type
	//
	// - ResourceId: the resource ID The ARN of the Log Service Logstore.
	//
	// Format: `arn:acs:${Service}:${Region}:${Account}:${ResourceType}/${ResourceId}`. Fields:
	//
	// - Service: the code of an Alibaba Cloud service
	//
	// - Region: the region ID
	//
	// - Account: the ID of an Alibaba Cloud account
	//
	// - ResourceType: the resource type
	//
	// - ResourceId: the resource ID
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the recipient.
	//
	// example:
	//
	// 3
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ID of the cloud service to which the API operation belongs.
	//
	// example:
	//
	// log
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// The region where the resource resides.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The name of the role.
	//
	// example:
	//
	// MyRole
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The version of the API.
	//
	// example:
	//
	// 2019-01-01
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters) SetAction(v string) *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters {
	s.Action = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters) SetArn(v string) *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters {
	s.Arn = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters) SetId(v string) *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters {
	s.Id = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters) SetProduct(v string) *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters {
	s.Product = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters) SetRegion(v string) *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters {
	s.Region = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters) SetRole(v string) *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters {
	s.Role = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters) SetVersion(v string) *DescribeEventRuleTargetListResponseBodyOpenApiParametersOpenApiParameters {
	s.Version = &v
	return s
}

type DescribeEventRuleTargetListResponseBodySlsParameters struct {
	SlsParameter []*DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter `json:"SlsParameter,omitempty" xml:"SlsParameter,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleTargetListResponseBodySlsParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodySlsParameters) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodySlsParameters) SetSlsParameter(v []*DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter) *DescribeEventRuleTargetListResponseBodySlsParameters {
	s.SlsParameter = v
	return s
}

type DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter struct {
	// The ARN of the Log Service Logstore.
	//
	// Format: `arn:acs:${Service}:${Region}:${Account}:${ResourceType}/${ResourceId}`. Fields:
	//
	// - Service: the code of an Alibaba Cloud service
	//
	// - Region: the region ID
	//
	// - Account: the ID of an Alibaba Cloud account
	//
	// - ResourceType: the resource type
	//
	// - ResourceId: the resource ID
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the recipient.
	//
	// example:
	//
	// 4
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the Logstore.
	//
	// example:
	//
	// logstore_test
	LogStore *string `json:"LogStore,omitempty" xml:"LogStore,omitempty"`
	// The name of the project.
	//
	// example:
	//
	// project_test
	Project *string `json:"Project,omitempty" xml:"Project,omitempty"`
	// The ID of the region where the Log Service project resides.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter) SetArn(v string) *DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter {
	s.Arn = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter) SetId(v string) *DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter {
	s.Id = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter) SetLogStore(v string) *DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter {
	s.LogStore = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter) SetProject(v string) *DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter {
	s.Project = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter) SetRegion(v string) *DescribeEventRuleTargetListResponseBodySlsParametersSlsParameter {
	s.Region = &v
	return s
}

type DescribeEventRuleTargetListResponseBodyWebhookParameters struct {
	WebhookParameter []*DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter `json:"WebhookParameter,omitempty" xml:"WebhookParameter,omitempty" type:"Repeated"`
}

func (s DescribeEventRuleTargetListResponseBodyWebhookParameters) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodyWebhookParameters) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodyWebhookParameters) SetWebhookParameter(v []*DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter) *DescribeEventRuleTargetListResponseBodyWebhookParameters {
	s.WebhookParameter = v
	return s
}

type DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter struct {
	// The ID of the recipient.
	//
	// example:
	//
	// 5
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The HTTP request method. Valid values: GET and POST.
	//
	// example:
	//
	// GET
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The protocol type.
	//
	// example:
	//
	// HTTP
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// http://www.aliyun.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter) SetId(v string) *DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter {
	s.Id = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter) SetMethod(v string) *DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter {
	s.Method = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter) SetProtocol(v string) *DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter {
	s.Protocol = &v
	return s
}

func (s *DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter) SetUrl(v string) *DescribeEventRuleTargetListResponseBodyWebhookParametersWebhookParameter {
	s.Url = &v
	return s
}

type DescribeEventRuleTargetListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEventRuleTargetListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEventRuleTargetListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEventRuleTargetListResponse) GoString() string {
	return s.String()
}

func (s *DescribeEventRuleTargetListResponse) SetHeaders(v map[string]*string) *DescribeEventRuleTargetListResponse {
	s.Headers = v
	return s
}

func (s *DescribeEventRuleTargetListResponse) SetStatusCode(v int32) *DescribeEventRuleTargetListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEventRuleTargetListResponse) SetBody(v *DescribeEventRuleTargetListResponseBody) *DescribeEventRuleTargetListResponse {
	s.Body = v
	return s
}

type DescribeExporterOutputListRequest struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeExporterOutputListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterOutputListRequest) GoString() string {
	return s.String()
}

func (s *DescribeExporterOutputListRequest) SetPageNumber(v int32) *DescribeExporterOutputListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeExporterOutputListRequest) SetPageSize(v int32) *DescribeExporterOutputListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeExporterOutputListRequest) SetRegionId(v string) *DescribeExporterOutputListRequest {
	s.RegionId = &v
	return s
}

type DescribeExporterOutputListResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The configuration sets for exporting monitoring data.
	Datapoints *DescribeExporterOutputListResponseBodyDatapoints `json:"Datapoints,omitempty" xml:"Datapoints,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// sucess
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0E657631-CD6C-4C24-9637-98D000B9272C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 25
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeExporterOutputListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterOutputListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExporterOutputListResponseBody) SetCode(v string) *DescribeExporterOutputListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeExporterOutputListResponseBody) SetDatapoints(v *DescribeExporterOutputListResponseBodyDatapoints) *DescribeExporterOutputListResponseBody {
	s.Datapoints = v
	return s
}

func (s *DescribeExporterOutputListResponseBody) SetMessage(v string) *DescribeExporterOutputListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeExporterOutputListResponseBody) SetPageNumber(v int32) *DescribeExporterOutputListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeExporterOutputListResponseBody) SetRequestId(v string) *DescribeExporterOutputListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExporterOutputListResponseBody) SetSuccess(v bool) *DescribeExporterOutputListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeExporterOutputListResponseBody) SetTotal(v int32) *DescribeExporterOutputListResponseBody {
	s.Total = &v
	return s
}

type DescribeExporterOutputListResponseBodyDatapoints struct {
	Datapoint []*DescribeExporterOutputListResponseBodyDatapointsDatapoint `json:"Datapoint,omitempty" xml:"Datapoint,omitempty" type:"Repeated"`
}

func (s DescribeExporterOutputListResponseBodyDatapoints) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterOutputListResponseBodyDatapoints) GoString() string {
	return s.String()
}

func (s *DescribeExporterOutputListResponseBodyDatapoints) SetDatapoint(v []*DescribeExporterOutputListResponseBodyDatapointsDatapoint) *DescribeExporterOutputListResponseBodyDatapoints {
	s.Datapoint = v
	return s
}

type DescribeExporterOutputListResponseBodyDatapointsDatapoint struct {
	// The JSON object that contains the details about the destination to which the monitoring data is exported.
	ConfigJson *DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson `json:"ConfigJson,omitempty" xml:"ConfigJson,omitempty" type:"Struct"`
	// The time when the configuration set was created. The value is a UNIX timestamp.
	//
	// example:
	//
	// 1584016495498
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The name of the configuration set.
	//
	// example:
	//
	// exporterOut
	DestName *string `json:"DestName,omitempty" xml:"DestName,omitempty"`
	// The service to which the monitoring data is exported.
	//
	// > Only Log Service is supported. More services will be supported in the future.
	//
	// example:
	//
	// SLS
	DestType *string `json:"DestType,omitempty" xml:"DestType,omitempty"`
}

func (s DescribeExporterOutputListResponseBodyDatapointsDatapoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterOutputListResponseBodyDatapointsDatapoint) GoString() string {
	return s.String()
}

func (s *DescribeExporterOutputListResponseBodyDatapointsDatapoint) SetConfigJson(v *DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson) *DescribeExporterOutputListResponseBodyDatapointsDatapoint {
	s.ConfigJson = v
	return s
}

func (s *DescribeExporterOutputListResponseBodyDatapointsDatapoint) SetCreateTime(v int64) *DescribeExporterOutputListResponseBodyDatapointsDatapoint {
	s.CreateTime = &v
	return s
}

func (s *DescribeExporterOutputListResponseBodyDatapointsDatapoint) SetDestName(v string) *DescribeExporterOutputListResponseBodyDatapointsDatapoint {
	s.DestName = &v
	return s
}

func (s *DescribeExporterOutputListResponseBodyDatapointsDatapoint) SetDestType(v string) *DescribeExporterOutputListResponseBodyDatapointsDatapoint {
	s.DestType = &v
	return s
}

type DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson struct {
	// The AccessKey ID.
	//
	// example:
	//
	// LTAIpY33********
	Ak *string `json:"ak,omitempty" xml:"ak,omitempty"`
	// The Log Service endpoint to which the monitoring data is exported.
	//
	// example:
	//
	// http://cn-qingdao-share.log.aliyuncs.com
	Endpoint *string `json:"endpoint,omitempty" xml:"endpoint,omitempty"`
	// The Logstore.
	//
	// example:
	//
	// monitorlogstore
	Logstore *string `json:"logstore,omitempty" xml:"logstore,omitempty"`
	// The Log Service project to which the monitoring data is exported.
	//
	// example:
	//
	// exporter
	Project *string `json:"project,omitempty" xml:"project,omitempty"`
}

func (s DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson) GoString() string {
	return s.String()
}

func (s *DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson) SetAk(v string) *DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson {
	s.Ak = &v
	return s
}

func (s *DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson) SetEndpoint(v string) *DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson {
	s.Endpoint = &v
	return s
}

func (s *DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson) SetLogstore(v string) *DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson {
	s.Logstore = &v
	return s
}

func (s *DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson) SetProject(v string) *DescribeExporterOutputListResponseBodyDatapointsDatapointConfigJson {
	s.Project = &v
	return s
}

type DescribeExporterOutputListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExporterOutputListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExporterOutputListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterOutputListResponse) GoString() string {
	return s.String()
}

func (s *DescribeExporterOutputListResponse) SetHeaders(v map[string]*string) *DescribeExporterOutputListResponse {
	s.Headers = v
	return s
}

func (s *DescribeExporterOutputListResponse) SetStatusCode(v int32) *DescribeExporterOutputListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExporterOutputListResponse) SetBody(v *DescribeExporterOutputListResponseBody) *DescribeExporterOutputListResponse {
	s.Body = v
	return s
}

type DescribeExporterRuleListRequest struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 1000.
	//
	// example:
	//
	// 1000
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeExporterRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterRuleListRequest) GoString() string {
	return s.String()
}

func (s *DescribeExporterRuleListRequest) SetPageNumber(v int32) *DescribeExporterRuleListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeExporterRuleListRequest) SetPageSize(v int32) *DescribeExporterRuleListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeExporterRuleListRequest) SetRegionId(v string) *DescribeExporterRuleListRequest {
	s.RegionId = &v
	return s
}

type DescribeExporterRuleListResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful. Other status codes indicate that the request failed.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the data export rules.
	Datapoints *DescribeExporterRuleListResponseBodyDatapoints `json:"Datapoints,omitempty" xml:"Datapoints,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// susscess
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6BA047CA-8BC6-40BC-BC8F-FBECF35F1993
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- `true`
	//
	// 	- `false`
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1000
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeExporterRuleListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterRuleListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExporterRuleListResponseBody) SetCode(v string) *DescribeExporterRuleListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeExporterRuleListResponseBody) SetDatapoints(v *DescribeExporterRuleListResponseBodyDatapoints) *DescribeExporterRuleListResponseBody {
	s.Datapoints = v
	return s
}

func (s *DescribeExporterRuleListResponseBody) SetMessage(v string) *DescribeExporterRuleListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeExporterRuleListResponseBody) SetPageNumber(v int32) *DescribeExporterRuleListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeExporterRuleListResponseBody) SetRequestId(v string) *DescribeExporterRuleListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExporterRuleListResponseBody) SetSuccess(v bool) *DescribeExporterRuleListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeExporterRuleListResponseBody) SetTotal(v int32) *DescribeExporterRuleListResponseBody {
	s.Total = &v
	return s
}

type DescribeExporterRuleListResponseBodyDatapoints struct {
	Datapoint []*DescribeExporterRuleListResponseBodyDatapointsDatapoint `json:"Datapoint,omitempty" xml:"Datapoint,omitempty" type:"Repeated"`
}

func (s DescribeExporterRuleListResponseBodyDatapoints) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterRuleListResponseBodyDatapoints) GoString() string {
	return s.String()
}

func (s *DescribeExporterRuleListResponseBodyDatapoints) SetDatapoint(v []*DescribeExporterRuleListResponseBodyDatapointsDatapoint) *DescribeExporterRuleListResponseBodyDatapoints {
	s.Datapoint = v
	return s
}

type DescribeExporterRuleListResponseBodyDatapointsDatapoint struct {
	// The time when the rule was created. The value is a UNIX timestamp.
	//
	// example:
	//
	// 1584024616228
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the rule.
	//
	// example:
	//
	// Export monitoring data
	Describe *string `json:"Describe,omitempty" xml:"Describe,omitempty"`
	// The associated dimensions.
	//
	// example:
	//
	// {"instanceId":"xxxxx"}
	Dimension *string                                                         `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	DstName   *DescribeExporterRuleListResponseBodyDatapointsDatapointDstName `json:"DstName,omitempty" xml:"DstName,omitempty" type:"Struct"`
	// Indicates whether the rule is enabled.
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The name of the metric.
	//
	// > For more information, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/28619.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the service.
	//
	// > For more information, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/28619.html).
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The name of the data export rule.
	//
	// example:
	//
	// myRuleName
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The time window of the exported data.\\
	//
	// Multiple windows are separated with commas (,).
	//
	// > Data in a time window of less than 60 seconds cannot be exported.
	//
	// example:
	//
	// 60,300
	TargetWindows *string `json:"TargetWindows,omitempty" xml:"TargetWindows,omitempty"`
}

func (s DescribeExporterRuleListResponseBodyDatapointsDatapoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterRuleListResponseBodyDatapointsDatapoint) GoString() string {
	return s.String()
}

func (s *DescribeExporterRuleListResponseBodyDatapointsDatapoint) SetCreateTime(v int64) *DescribeExporterRuleListResponseBodyDatapointsDatapoint {
	s.CreateTime = &v
	return s
}

func (s *DescribeExporterRuleListResponseBodyDatapointsDatapoint) SetDescribe(v string) *DescribeExporterRuleListResponseBodyDatapointsDatapoint {
	s.Describe = &v
	return s
}

func (s *DescribeExporterRuleListResponseBodyDatapointsDatapoint) SetDimension(v string) *DescribeExporterRuleListResponseBodyDatapointsDatapoint {
	s.Dimension = &v
	return s
}

func (s *DescribeExporterRuleListResponseBodyDatapointsDatapoint) SetDstName(v *DescribeExporterRuleListResponseBodyDatapointsDatapointDstName) *DescribeExporterRuleListResponseBodyDatapointsDatapoint {
	s.DstName = v
	return s
}

func (s *DescribeExporterRuleListResponseBodyDatapointsDatapoint) SetEnabled(v bool) *DescribeExporterRuleListResponseBodyDatapointsDatapoint {
	s.Enabled = &v
	return s
}

func (s *DescribeExporterRuleListResponseBodyDatapointsDatapoint) SetMetricName(v string) *DescribeExporterRuleListResponseBodyDatapointsDatapoint {
	s.MetricName = &v
	return s
}

func (s *DescribeExporterRuleListResponseBodyDatapointsDatapoint) SetNamespace(v string) *DescribeExporterRuleListResponseBodyDatapointsDatapoint {
	s.Namespace = &v
	return s
}

func (s *DescribeExporterRuleListResponseBodyDatapointsDatapoint) SetRuleName(v string) *DescribeExporterRuleListResponseBodyDatapointsDatapoint {
	s.RuleName = &v
	return s
}

func (s *DescribeExporterRuleListResponseBodyDatapointsDatapoint) SetTargetWindows(v string) *DescribeExporterRuleListResponseBodyDatapointsDatapoint {
	s.TargetWindows = &v
	return s
}

type DescribeExporterRuleListResponseBodyDatapointsDatapointDstName struct {
	DstName []*string `json:"DstName,omitempty" xml:"DstName,omitempty" type:"Repeated"`
}

func (s DescribeExporterRuleListResponseBodyDatapointsDatapointDstName) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterRuleListResponseBodyDatapointsDatapointDstName) GoString() string {
	return s.String()
}

func (s *DescribeExporterRuleListResponseBodyDatapointsDatapointDstName) SetDstName(v []*string) *DescribeExporterRuleListResponseBodyDatapointsDatapointDstName {
	s.DstName = v
	return s
}

type DescribeExporterRuleListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExporterRuleListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExporterRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExporterRuleListResponse) GoString() string {
	return s.String()
}

func (s *DescribeExporterRuleListResponse) SetHeaders(v map[string]*string) *DescribeExporterRuleListResponse {
	s.Headers = v
	return s
}

func (s *DescribeExporterRuleListResponse) SetStatusCode(v int32) *DescribeExporterRuleListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExporterRuleListResponse) SetBody(v *DescribeExporterRuleListResponseBody) *DescribeExporterRuleListResponse {
	s.Body = v
	return s
}

type DescribeGroupMonitoringAgentProcessRequest struct {
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The page number. Default value: 1
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The process name.
	//
	// example:
	//
	// sshd
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeGroupMonitoringAgentProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessRequest) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessRequest) SetGroupId(v string) *DescribeGroupMonitoringAgentProcessRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessRequest) SetPageNumber(v int32) *DescribeGroupMonitoringAgentProcessRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessRequest) SetPageSize(v int32) *DescribeGroupMonitoringAgentProcessRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessRequest) SetProcessName(v string) *DescribeGroupMonitoringAgentProcessRequest {
	s.ProcessName = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessRequest) SetRegionId(v string) *DescribeGroupMonitoringAgentProcessRequest {
	s.RegionId = &v
	return s
}

type DescribeGroupMonitoringAgentProcessResponseBody struct {
	// The HTTP status codes.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number. Default value: 1
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The process monitoring tasks.
	Processes *DescribeGroupMonitoringAgentProcessResponseBodyProcesses `json:"Processes,omitempty" xml:"Processes,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 7985D471-3FA8-4EE9-8F4B-45C19DF3D36F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: Valid values: true and false.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 28
	Total *string `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeGroupMonitoringAgentProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessResponseBody) SetCode(v string) *DescribeGroupMonitoringAgentProcessResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBody) SetMessage(v string) *DescribeGroupMonitoringAgentProcessResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBody) SetPageNumber(v string) *DescribeGroupMonitoringAgentProcessResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBody) SetPageSize(v string) *DescribeGroupMonitoringAgentProcessResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBody) SetProcesses(v *DescribeGroupMonitoringAgentProcessResponseBodyProcesses) *DescribeGroupMonitoringAgentProcessResponseBody {
	s.Processes = v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBody) SetRequestId(v string) *DescribeGroupMonitoringAgentProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBody) SetSuccess(v bool) *DescribeGroupMonitoringAgentProcessResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBody) SetTotal(v string) *DescribeGroupMonitoringAgentProcessResponseBody {
	s.Total = &v
	return s
}

type DescribeGroupMonitoringAgentProcessResponseBodyProcesses struct {
	Process []*DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess `json:"Process,omitempty" xml:"Process,omitempty" type:"Repeated"`
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcesses) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcesses) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcesses) SetProcess(v []*DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess) *DescribeGroupMonitoringAgentProcessResponseBodyProcesses {
	s.Process = v
	return s
}

type DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess struct {
	// The alert rule configurations.
	AlertConfig *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfig `json:"AlertConfig,omitempty" xml:"AlertConfig,omitempty" type:"Struct"`
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the process monitoring task.
	//
	// example:
	//
	// 3F6150F9-45C7-43F9-9578-A58B2E72****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The matching conditions.
	//
	// >  Only the instances that meet the conditional expressions are monitored by the process monitoring task.
	MatchExpress *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpress `json:"MatchExpress,omitempty" xml:"MatchExpress,omitempty" type:"Struct"`
	// The logical operator used between conditional expressions that are used to match instances. Valid values:
	//
	// 	- all
	//
	// 	- and
	//
	// 	- or
	//
	// example:
	//
	// and
	MatchExpressFilterRelation *string `json:"MatchExpressFilterRelation,omitempty" xml:"MatchExpressFilterRelation,omitempty"`
	// The process name.
	//
	// example:
	//
	// sshd
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess) SetAlertConfig(v *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfig) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess {
	s.AlertConfig = v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess) SetGroupId(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess {
	s.GroupId = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess) SetId(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess {
	s.Id = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess) SetMatchExpress(v *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpress) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess {
	s.MatchExpress = v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess) SetMatchExpressFilterRelation(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess {
	s.MatchExpressFilterRelation = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess) SetProcessName(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcess {
	s.ProcessName = &v
	return s
}

type DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfig struct {
	AlertConfig []*DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig `json:"AlertConfig,omitempty" xml:"AlertConfig,omitempty" type:"Repeated"`
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfig) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfig) SetAlertConfig(v []*DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfig {
	s.AlertConfig = v
	return s
}

type DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig struct {
	// The comparison operator that is used to compare the metric value with the threshold. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday.
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The time period during which the alert rule is effective.
	//
	// example:
	//
	// 00:00-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// The level of the alert. Valid values:
	//
	// 	- critical
	//
	// 	- warn
	//
	// 	- Info
	//
	// example:
	//
	// warn
	EscalationsLevel *string `json:"EscalationsLevel,omitempty" xml:"EscalationsLevel,omitempty"`
	// The time period during which the alert rule is ineffective.
	//
	// example:
	//
	// 00:00-23:59
	NoEffectiveInterval *string `json:"NoEffectiveInterval,omitempty" xml:"NoEffectiveInterval,omitempty"`
	// The mute period during which new alert notifications are not sent even if the trigger conditions are met. Unit: seconds. Minimum value: 3600, which is equivalent to one hour. Default value: 86400, which is equivalent to one day.
	//
	// >  Only one alert notification is sent during each mute period even if the metric value exceeds the alert threshold several times.
	//
	// example:
	//
	// 86400
	SilenceTime *string `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The method used to calculate metric values that trigger alerts.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The resources for which alerts are triggered.
	TargetList *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetList `json:"TargetList,omitempty" xml:"TargetList,omitempty" type:"Struct"`
	// The alert threshold.
	//
	// example:
	//
	// 5
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The number of times for which the threshold can be consecutively exceeded.
	//
	// >  A metric triggers an alert only after the metric value reaches the threshold consecutively for the specified times.
	//
	// example:
	//
	// 3
	Times *string `json:"Times,omitempty" xml:"Times,omitempty"`
	// The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.
	//
	// example:
	//
	// http://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) SetComparisonOperator(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) SetEffectiveInterval(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig {
	s.EffectiveInterval = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) SetEscalationsLevel(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig {
	s.EscalationsLevel = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) SetNoEffectiveInterval(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig {
	s.NoEffectiveInterval = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) SetSilenceTime(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig {
	s.SilenceTime = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) SetStatistics(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig {
	s.Statistics = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) SetTargetList(v *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetList) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig {
	s.TargetList = v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) SetThreshold(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig {
	s.Threshold = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) SetTimes(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig {
	s.Times = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig) SetWebhook(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfig {
	s.Webhook = &v
	return s
}

type DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetList struct {
	Target []*DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Repeated"`
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetList) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetList) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetList) SetTarget(v []*DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetList {
	s.Target = v
	return s
}

type DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget struct {
	// The Alibaba Cloud Resource Name (ARN) of the resource. Format: acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message. Example: acs:mns:cn-hangzhou:120886317861\\*\\*\\*\\*:/queues/test123/message. Fields:
	//
	// 	- {Service name abbreviation}: the abbreviation of the service name. Set the value to Simple Message Queue (formerly MNS) (SMQ).
	//
	// 	- {userId}: the ID of the Alibaba Cloud account.
	//
	// 	- {regionId}: the region ID of the SMQ queue or topic.
	//
	// 	- {Resource type}: the type of the resource for which alerts are triggered. Valid values:
	//
	//     	- **queues**
	//
	//     	- **topics**
	//
	// 	- {Resource name}: the resource name.
	//
	//     	- If the resource type is **queues**, the resource name is the queue name.
	//
	//     	- If the resource type is **topics**, the resource name is the topic name.
	//
	// example:
	//
	// acs:mns:cn-hangzhou:120886317861****:/queues/test/message
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the resource for which alerts are triggered.
	//
	// example:
	//
	// 123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The parameters of the alert callback. The parameters are in the JSON format.
	//
	// example:
	//
	// {"customField1":"value1","customField2":"$.name"}
	JsonParmas *string `json:"JsonParmas,omitempty" xml:"JsonParmas,omitempty"`
	// The alert level. Valid values:
	//
	// 	- INFO
	//
	// 	- WARN
	//
	// 	- CRITICAL
	//
	// example:
	//
	// CRITICAL
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget) SetArn(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget {
	s.Arn = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget) SetId(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget {
	s.Id = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget) SetJsonParmas(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget {
	s.JsonParmas = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget) SetLevel(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessAlertConfigAlertConfigTargetListTarget {
	s.Level = &v
	return s
}

type DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpress struct {
	MatchExpress []*DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress `json:"MatchExpress,omitempty" xml:"MatchExpress,omitempty" type:"Repeated"`
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpress) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpress) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpress) SetMatchExpress(v []*DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpress {
	s.MatchExpress = v
	return s
}

type DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress struct {
	// The matching condition. Valid values:
	//
	// 	- all (default): matches all
	//
	// 	- startWith: starts with a prefix
	//
	// 	- endWith: ends with a suffix
	//
	// 	- contains: contains
	//
	// 	- notContains: excludes
	//
	// 	- equals: equals
	//
	// >  The matched instances are monitored by the process monitoring task.
	//
	// example:
	//
	// all
	Function *string `json:"Function,omitempty" xml:"Function,omitempty"`
	// The criteria based on which the instances are matched.
	//
	// >  Set the value to `name`. The value name indicates that the instances are matched based on the instance name.
	//
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The keyword used to match the instance name.
	//
	// example:
	//
	// portalHost
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress) SetFunction(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress {
	s.Function = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress) SetName(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress {
	s.Name = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress) SetValue(v string) *DescribeGroupMonitoringAgentProcessResponseBodyProcessesProcessMatchExpressMatchExpress {
	s.Value = &v
	return s
}

type DescribeGroupMonitoringAgentProcessResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGroupMonitoringAgentProcessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGroupMonitoringAgentProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGroupMonitoringAgentProcessResponse) GoString() string {
	return s.String()
}

func (s *DescribeGroupMonitoringAgentProcessResponse) SetHeaders(v map[string]*string) *DescribeGroupMonitoringAgentProcessResponse {
	s.Headers = v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponse) SetStatusCode(v int32) *DescribeGroupMonitoringAgentProcessResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGroupMonitoringAgentProcessResponse) SetBody(v *DescribeGroupMonitoringAgentProcessResponseBody) *DescribeGroupMonitoringAgentProcessResponse {
	s.Body = v
	return s
}

type DescribeHostAvailabilityListRequest struct {
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the availability monitoring task.
	//
	// example:
	//
	// 123456
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The IDs of the availability monitoring tasks. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// 123456,345678
	Ids *string `json:"Ids,omitempty" xml:"Ids,omitempty"`
	// The page number.
	//
	// Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Minimum value: 1. Default value: 10
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the availability monitoring task.
	//
	// example:
	//
	// ecs_instance
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s DescribeHostAvailabilityListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListRequest) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListRequest) SetGroupId(v int64) *DescribeHostAvailabilityListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeHostAvailabilityListRequest) SetId(v int64) *DescribeHostAvailabilityListRequest {
	s.Id = &v
	return s
}

func (s *DescribeHostAvailabilityListRequest) SetIds(v string) *DescribeHostAvailabilityListRequest {
	s.Ids = &v
	return s
}

func (s *DescribeHostAvailabilityListRequest) SetPageNumber(v int32) *DescribeHostAvailabilityListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHostAvailabilityListRequest) SetPageSize(v int32) *DescribeHostAvailabilityListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHostAvailabilityListRequest) SetRegionId(v string) *DescribeHostAvailabilityListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHostAvailabilityListRequest) SetTaskName(v string) *DescribeHostAvailabilityListRequest {
	s.TaskName = &v
	return s
}

type DescribeHostAvailabilityListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4A288E86-45C3-4858-9DB0-6D85B10BD92A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The details of the availability monitoring tasks.
	TaskList *DescribeHostAvailabilityListResponseBodyTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Struct"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeHostAvailabilityListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponseBody) SetCode(v string) *DescribeHostAvailabilityListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBody) SetMessage(v string) *DescribeHostAvailabilityListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBody) SetRequestId(v string) *DescribeHostAvailabilityListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBody) SetSuccess(v bool) *DescribeHostAvailabilityListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBody) SetTaskList(v *DescribeHostAvailabilityListResponseBodyTaskList) *DescribeHostAvailabilityListResponseBody {
	s.TaskList = v
	return s
}

func (s *DescribeHostAvailabilityListResponseBody) SetTotal(v int32) *DescribeHostAvailabilityListResponseBody {
	s.Total = &v
	return s
}

type DescribeHostAvailabilityListResponseBodyTaskList struct {
	NodeTaskConfig []*DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig `json:"NodeTaskConfig,omitempty" xml:"NodeTaskConfig,omitempty" type:"Repeated"`
}

func (s DescribeHostAvailabilityListResponseBodyTaskList) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponseBodyTaskList) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponseBodyTaskList) SetNodeTaskConfig(v []*DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) *DescribeHostAvailabilityListResponseBodyTaskList {
	s.NodeTaskConfig = v
	return s
}

type DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig struct {
	// The configurations of the alert rule.
	AlertConfig *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig `json:"AlertConfig,omitempty" xml:"AlertConfig,omitempty" type:"Struct"`
	// Indicates whether the availability monitoring task is disabled. Valid values:
	//
	// 	- true: The availability monitoring task is disabled.
	//
	// 	- false: The availability monitoring task is enabled.
	//
	// example:
	//
	// false
	Disabled *bool `json:"Disabled,omitempty" xml:"Disabled,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the application group.
	//
	// example:
	//
	// Group_ECS
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The ID of the availability monitoring task.
	//
	// example:
	//
	// 123456
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ECS instances that are monitored.
	Instances *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	// The name of the availability monitoring task.
	//
	// example:
	//
	// ecs_instance
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The optional parameters of the availability monitoring task.
	TaskOption *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption `json:"TaskOption,omitempty" xml:"TaskOption,omitempty" type:"Struct"`
	// The range of instances that are monitored by the availability monitoring task. Valid values:
	//
	// 	- GROUP: All ECS instances in the application group are monitored.
	//
	// 	- GROUP_SPEC_INSTANCE: Specified ECS instances in the application group are monitored.
	//
	// example:
	//
	// GROUP
	TaskScope *string `json:"TaskScope,omitempty" xml:"TaskScope,omitempty"`
	// The task type. Valid values:
	//
	// 	- PING
	//
	// 	- TELNET
	//
	// 	- HTTP
	//
	// example:
	//
	// HTTP
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) SetAlertConfig(v *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig {
	s.AlertConfig = v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) SetDisabled(v bool) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig {
	s.Disabled = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) SetGroupId(v int64) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig {
	s.GroupId = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) SetGroupName(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig {
	s.GroupName = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) SetId(v int64) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig {
	s.Id = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) SetInstances(v *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigInstances) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig {
	s.Instances = v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) SetTaskName(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig {
	s.TaskName = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) SetTaskOption(v *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig {
	s.TaskOption = v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) SetTaskScope(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig {
	s.TaskScope = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig) SetTaskType(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfig {
	s.TaskType = &v
	return s
}

type DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig struct {
	// The end of the time period during which the alert rule is effective. Valid values: 0 to 23.
	//
	// For example, if the `AlertConfig.StartTime` parameter is set to 0 and the `AlertConfig.EndTime` parameter is set to 22, the alert rule is effective from 00:00:00 to 22:00:00.
	//
	// >  Alert notifications are sent based on the specified threshold only if the alert rule is effective.
	//
	// example:
	//
	// 22
	EndTime *int32 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The trigger conditions of the alert rule.
	EscalationList *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationList `json:"EscalationList,omitempty" xml:"EscalationList,omitempty" type:"Struct"`
	// The alert notification methods. Valid values:
	//
	// 	- 2: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// 	- 1: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// 	- 0: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// example:
	//
	// 0
	NotifyType *int32 `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	// The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400.
	//
	// example:
	//
	// 86400
	SilenceTime *int32 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The beginning of the time period during which the alert rule is effective. Valid values: 0 to 23.
	//
	// For example, if the `AlertConfig.StartTime` parameter is set to 0 and the `AlertConfig.EndTime` parameter is set to 22, the alert rule is effective from 00:00:00 to 22:00:00.
	//
	// >  Alert notifications are sent based on the specified threshold only if the alert rule is effective.
	//
	// example:
	//
	// 0
	StartTime *int32 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The monitored resources.
	TargetList *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetList `json:"TargetList,omitempty" xml:"TargetList,omitempty" type:"Struct"`
	// The callback URL.
	//
	// CloudMonitor pushes an alert notification to the specified callback URL by sending an HTTP POST request. Only the HTTP protocol is supported.
	//
	// example:
	//
	// https://www.aliyun.com
	WebHook *string `json:"WebHook,omitempty" xml:"WebHook,omitempty"`
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig) SetEndTime(v int32) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig {
	s.EndTime = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig) SetEscalationList(v *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationList) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig {
	s.EscalationList = v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig) SetNotifyType(v int32) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig {
	s.NotifyType = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig) SetSilenceTime(v int32) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig {
	s.SilenceTime = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig) SetStartTime(v int32) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig {
	s.StartTime = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig) SetTargetList(v *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetList) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig {
	s.TargetList = v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig) SetWebHook(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfig {
	s.WebHook = &v
	return s
}

type DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationList struct {
	EscalationList []*DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList `json:"escalationList,omitempty" xml:"escalationList,omitempty" type:"Repeated"`
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationList) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationList) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationList) SetEscalationList(v []*DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationList {
	s.EscalationList = v
	return s
}

type DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList struct {
	// The method used to calculate metric values that trigger alerts. Valid values:
	//
	// 	- Value: the value of the HTTP status code
	//
	// 	- Average: the average HTTP response time
	//
	// 	- Value: the value of the Telnet status code
	//
	// 	- TelnetLatency: the average Telnet response time
	//
	// 	- Average: the average Ping packet loss rate
	//
	// example:
	//
	// Value
	Aggregate *string `json:"Aggregate,omitempty" xml:"Aggregate,omitempty"`
	// The name of the metric. Valid values:
	//
	// 	- HttpStatus
	//
	// 	- HttpLatency
	//
	// 	- TelnetStatus
	//
	// 	- TelnetLatency
	//
	// 	- PingLostRate
	//
	// example:
	//
	// HttpStatus
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The comparison operator that is used in the alert rule. Valid values:
	//
	// 	- `>`
	//
	// 	- `>=`
	//
	// 	- `<`
	//
	// 	- `<=`
	//
	// 	- `=`
	//
	// example:
	//
	// =
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The consecutive number of times for which the metric value is measured before an alert is triggered.
	//
	// example:
	//
	// 3
	Times *string `json:"Times,omitempty" xml:"Times,omitempty"`
	// The alert threshold.
	//
	// example:
	//
	// 400
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList) SetAggregate(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList {
	s.Aggregate = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList) SetMetricName(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList {
	s.MetricName = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList) SetOperator(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList {
	s.Operator = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList) SetTimes(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList {
	s.Times = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList) SetValue(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigEscalationListEscalationList {
	s.Value = &v
	return s
}

type DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetList struct {
	Target []*DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Repeated"`
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetList) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetList) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetList) SetTarget(v []*DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetList {
	s.Target = v
	return s
}

type DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget struct {
	// The Alibaba Cloud Resource Name (ARN) of the function.
	//
	// Format: `arn:acs:${Service}:${Region}:${Account}:${ResourceType}/${ResourceId}`. Fields:
	//
	// 	- Service: the service code
	//
	// 	- Region: the region ID
	//
	// 	- Account: the ID of the Alibaba Cloud account
	//
	// 	- ResourceType: the resource type
	//
	// 	- ResourceId: the resource ID.
	//
	// example:
	//
	// acs:mns:cn-hangzhou:17754132319*****:/queues/test/messages
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the resource that triggers the alert.
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The JSON-formatted parameters of the alert callback.
	//
	// example:
	//
	// {"key1":"value1"}
	JsonParams *string `json:"JsonParams,omitempty" xml:"JsonParams,omitempty"`
	// The alert level. Valid values:
	//
	// 	- INFO
	//
	// 	- WARN
	//
	// 	- CRITICAL
	//
	// example:
	//
	// INFO
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget) SetArn(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget {
	s.Arn = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget) SetId(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget {
	s.Id = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget) SetJsonParams(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget {
	s.JsonParams = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget) SetLevel(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigAlertConfigTargetListTarget {
	s.Level = &v
	return s
}

type DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigInstances struct {
	Instance []*string `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Repeated"`
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigInstances) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigInstances) SetInstance(v []*string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigInstances {
	s.Instance = v
	return s
}

type DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption struct {
	// The response to the HTTP request.
	//
	// example:
	//
	// OK
	HttpKeyword *string `json:"HttpKeyword,omitempty" xml:"HttpKeyword,omitempty"`
	// The HTTP request method. Valid values:
	//
	// 	- GET
	//
	// 	- POST
	//
	// 	- HEAD
	//
	// example:
	//
	// GET
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The method to trigger an alert. The alert can be triggered based on whether the specified alert rule is included in the response body. Valid values:
	//
	// 	- true: If the HTTP response body includes the alert rule, an alert is triggered.
	//
	// 	- false: If the HTTP response does not include the alert rule, an alert is triggered.
	//
	// example:
	//
	// true
	HttpNegative *bool `json:"HttpNegative,omitempty" xml:"HttpNegative,omitempty"`
	// The content of the HTTP POST request.
	//
	// example:
	//
	// params1=paramsValue1
	HttpPostContent *string `json:"HttpPostContent,omitempty" xml:"HttpPostContent,omitempty"`
	// The character set that is used in the HTTP response.
	//
	// example:
	//
	// UTF-8
	HttpResponseCharset *string `json:"HttpResponseCharset,omitempty" xml:"HttpResponseCharset,omitempty"`
	// The URI that you want to monitor. If the TaskType parameter is set to HTTP, this parameter is required.
	//
	// example:
	//
	// https://www.aliyun.com
	HttpURI *string `json:"HttpURI,omitempty" xml:"HttpURI,omitempty"`
	// The interval at which detection requests are sent. Unit: seconds.
	//
	// example:
	//
	// 60
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The domain name or IP address that you want to monitor.
	//
	// example:
	//
	// ssh.aliyun.com
	TelnetOrPingHost *string `json:"TelnetOrPingHost,omitempty" xml:"TelnetOrPingHost,omitempty"`
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) SetHttpKeyword(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption {
	s.HttpKeyword = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) SetHttpMethod(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption {
	s.HttpMethod = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) SetHttpNegative(v bool) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption {
	s.HttpNegative = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) SetHttpPostContent(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption {
	s.HttpPostContent = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) SetHttpResponseCharset(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption {
	s.HttpResponseCharset = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) SetHttpURI(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption {
	s.HttpURI = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) SetInterval(v int32) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption {
	s.Interval = &v
	return s
}

func (s *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption) SetTelnetOrPingHost(v string) *DescribeHostAvailabilityListResponseBodyTaskListNodeTaskConfigTaskOption {
	s.TelnetOrPingHost = &v
	return s
}

type DescribeHostAvailabilityListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHostAvailabilityListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHostAvailabilityListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHostAvailabilityListResponse) GoString() string {
	return s.String()
}

func (s *DescribeHostAvailabilityListResponse) SetHeaders(v map[string]*string) *DescribeHostAvailabilityListResponse {
	s.Headers = v
	return s
}

func (s *DescribeHostAvailabilityListResponse) SetStatusCode(v int32) *DescribeHostAvailabilityListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHostAvailabilityListResponse) SetBody(v *DescribeHostAvailabilityListResponseBody) *DescribeHostAvailabilityListResponse {
	s.Body = v
	return s
}

type DescribeHybridMonitorDataListRequest struct {
	// The end of the time range to query.
	//
	// Unit: seconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1653805225
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The name of the namespace.
	//
	// For more information about how to query the names of namespaces, see [DescribeHybridMonitorNamespaceList](https://help.aliyun.com/document_detail/428880.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// default-aliyun
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The statistical period of the monitoring data.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The metric name.
	//
	// >  PromQL statements are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// AliyunEcs_cpu_total
	PromSQL  *string `json:"PromSQL,omitempty" xml:"PromSQL,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The start of the time range to query.
	//
	// Unit: seconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1653804865
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s DescribeHybridMonitorDataListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorDataListRequest) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorDataListRequest) SetEnd(v int64) *DescribeHybridMonitorDataListRequest {
	s.End = &v
	return s
}

func (s *DescribeHybridMonitorDataListRequest) SetNamespace(v string) *DescribeHybridMonitorDataListRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeHybridMonitorDataListRequest) SetPeriod(v string) *DescribeHybridMonitorDataListRequest {
	s.Period = &v
	return s
}

func (s *DescribeHybridMonitorDataListRequest) SetPromSQL(v string) *DescribeHybridMonitorDataListRequest {
	s.PromSQL = &v
	return s
}

func (s *DescribeHybridMonitorDataListRequest) SetRegionId(v string) *DescribeHybridMonitorDataListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHybridMonitorDataListRequest) SetStart(v int64) *DescribeHybridMonitorDataListRequest {
	s.Start = &v
	return s
}

type DescribeHybridMonitorDataListResponseBody struct {
	// The response code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// end timestamp must not be before start time.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C240412F-3F5F-50E2-ACEC-DE808EF9C4BE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The returned monitoring data.
	TimeSeries []*DescribeHybridMonitorDataListResponseBodyTimeSeries `json:"TimeSeries,omitempty" xml:"TimeSeries,omitempty" type:"Repeated"`
}

func (s DescribeHybridMonitorDataListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorDataListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorDataListResponseBody) SetCode(v string) *DescribeHybridMonitorDataListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHybridMonitorDataListResponseBody) SetMessage(v string) *DescribeHybridMonitorDataListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHybridMonitorDataListResponseBody) SetRequestId(v string) *DescribeHybridMonitorDataListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHybridMonitorDataListResponseBody) SetSuccess(v string) *DescribeHybridMonitorDataListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeHybridMonitorDataListResponseBody) SetTimeSeries(v []*DescribeHybridMonitorDataListResponseBodyTimeSeries) *DescribeHybridMonitorDataListResponseBody {
	s.TimeSeries = v
	return s
}

type DescribeHybridMonitorDataListResponseBodyTimeSeries struct {
	// The tags of the time dimension.
	Labels []*DescribeHybridMonitorDataListResponseBodyTimeSeriesLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The metric name.
	//
	// example:
	//
	// AliyunEcs_cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The metric values that are collected at different timestamps.
	Values []*DescribeHybridMonitorDataListResponseBodyTimeSeriesValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
}

func (s DescribeHybridMonitorDataListResponseBodyTimeSeries) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorDataListResponseBodyTimeSeries) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorDataListResponseBodyTimeSeries) SetLabels(v []*DescribeHybridMonitorDataListResponseBodyTimeSeriesLabels) *DescribeHybridMonitorDataListResponseBodyTimeSeries {
	s.Labels = v
	return s
}

func (s *DescribeHybridMonitorDataListResponseBodyTimeSeries) SetMetricName(v string) *DescribeHybridMonitorDataListResponseBodyTimeSeries {
	s.MetricName = &v
	return s
}

func (s *DescribeHybridMonitorDataListResponseBodyTimeSeries) SetValues(v []*DescribeHybridMonitorDataListResponseBodyTimeSeriesValues) *DescribeHybridMonitorDataListResponseBodyTimeSeries {
	s.Values = v
	return s
}

type DescribeHybridMonitorDataListResponseBodyTimeSeriesLabels struct {
	// The tag key.
	//
	// example:
	//
	// instanceId
	K *string `json:"K,omitempty" xml:"K,omitempty"`
	// The tag value.
	//
	// example:
	//
	// i-rj99xc6cptkk64ml****
	V *string `json:"V,omitempty" xml:"V,omitempty"`
}

func (s DescribeHybridMonitorDataListResponseBodyTimeSeriesLabels) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorDataListResponseBodyTimeSeriesLabels) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorDataListResponseBodyTimeSeriesLabels) SetK(v string) *DescribeHybridMonitorDataListResponseBodyTimeSeriesLabels {
	s.K = &v
	return s
}

func (s *DescribeHybridMonitorDataListResponseBodyTimeSeriesLabels) SetV(v string) *DescribeHybridMonitorDataListResponseBodyTimeSeriesLabels {
	s.V = &v
	return s
}

type DescribeHybridMonitorDataListResponseBodyTimeSeriesValues struct {
	// The timestamp that indicates the time when the metric value is collected.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 1653804865
	Ts *string `json:"Ts,omitempty" xml:"Ts,omitempty"`
	// The metric value.
	//
	// example:
	//
	// 0.13
	V *string `json:"V,omitempty" xml:"V,omitempty"`
}

func (s DescribeHybridMonitorDataListResponseBodyTimeSeriesValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorDataListResponseBodyTimeSeriesValues) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorDataListResponseBodyTimeSeriesValues) SetTs(v string) *DescribeHybridMonitorDataListResponseBodyTimeSeriesValues {
	s.Ts = &v
	return s
}

func (s *DescribeHybridMonitorDataListResponseBodyTimeSeriesValues) SetV(v string) *DescribeHybridMonitorDataListResponseBodyTimeSeriesValues {
	s.V = &v
	return s
}

type DescribeHybridMonitorDataListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHybridMonitorDataListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHybridMonitorDataListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorDataListResponse) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorDataListResponse) SetHeaders(v map[string]*string) *DescribeHybridMonitorDataListResponse {
	s.Headers = v
	return s
}

func (s *DescribeHybridMonitorDataListResponse) SetStatusCode(v int32) *DescribeHybridMonitorDataListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHybridMonitorDataListResponse) SetBody(v *DescribeHybridMonitorDataListResponseBody) *DescribeHybridMonitorDataListResponse {
	s.Body = v
	return s
}

type DescribeHybridMonitorNamespaceListRequest struct {
	// The search keyword.
	//
	// example:
	//
	// aliyun
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The name of the namespace.
	//
	// The name can contain letters, digits, and hyphens (-).
	//
	// example:
	//
	// aliyun-test
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The page number.
	//
	// Page numbers start from 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Page numbers start from 1. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to return the configuration details of metric import tasks for Alibaba Cloud services and the number of metric import tasks for third-party services. Valid values:
	//
	// 	- true
	//
	// 	- false (default)
	//
	// example:
	//
	// false
	ShowTaskStatistic *bool `json:"ShowTaskStatistic,omitempty" xml:"ShowTaskStatistic,omitempty"`
}

func (s DescribeHybridMonitorNamespaceListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorNamespaceListRequest) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorNamespaceListRequest) SetKeyword(v string) *DescribeHybridMonitorNamespaceListRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListRequest) SetNamespace(v string) *DescribeHybridMonitorNamespaceListRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListRequest) SetPageNumber(v int32) *DescribeHybridMonitorNamespaceListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListRequest) SetPageSize(v int32) *DescribeHybridMonitorNamespaceListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListRequest) SetRegionId(v string) *DescribeHybridMonitorNamespaceListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListRequest) SetShowTaskStatistic(v bool) *DescribeHybridMonitorNamespaceListRequest {
	s.ShowTaskStatistic = &v
	return s
}

type DescribeHybridMonitorNamespaceListResponseBody struct {
	// The response code.
	//
	// example:
	//
	// Success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the namespaces.
	DescribeHybridMonitorNamespace []*DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace `json:"DescribeHybridMonitorNamespace,omitempty" xml:"DescribeHybridMonitorNamespace,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// Specified parameter PageSize is not valid.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1EC450A4-3221-5148-B77E-2827576CFE48
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeHybridMonitorNamespaceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorNamespaceListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorNamespaceListResponseBody) SetCode(v string) *DescribeHybridMonitorNamespaceListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBody) SetDescribeHybridMonitorNamespace(v []*DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) *DescribeHybridMonitorNamespaceListResponseBody {
	s.DescribeHybridMonitorNamespace = v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBody) SetMessage(v string) *DescribeHybridMonitorNamespaceListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBody) SetPageNumber(v int32) *DescribeHybridMonitorNamespaceListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBody) SetPageSize(v int32) *DescribeHybridMonitorNamespaceListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBody) SetRequestId(v string) *DescribeHybridMonitorNamespaceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBody) SetSuccess(v string) *DescribeHybridMonitorNamespaceListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBody) SetTotal(v int32) *DescribeHybridMonitorNamespaceListResponseBody {
	s.Total = &v
	return s
}

type DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace struct {
	// The configuration details of metric import tasks for Alibaba Cloud services.
	AliyunProductMetricList []*DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList `json:"AliyunProductMetricList,omitempty" xml:"AliyunProductMetricList,omitempty" type:"Repeated"`
	// The timestamp that was generated when the namespace was created.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1652682744000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the namespace.
	//
	// example:
	//
	// aliyun-test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The details of the data retention period.
	Detail *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail `json:"Detail,omitempty" xml:"Detail,omitempty" type:"Struct"`
	// The ID of the namespace.
	//
	// example:
	//
	// 3****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Indicates whether the namespace is deleted. Valid values:
	//
	// 	- 0: The namespace is not deleted.
	//
	// 	- 1: The namespace is deleted.
	//
	// example:
	//
	// 0
	IsDelete *int32 `json:"IsDelete,omitempty" xml:"IsDelete,omitempty"`
	// The timestamp that was generated when the namespace was last modified.
	//
	// example:
	//
	// 1652682744000
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// aliyun-test
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The storage scheme of metric data. Valid values:
	//
	// 	- m_prom_user: The metric data is stored in Simple Log Service.
	//
	// 	- m_prom_pool: The metric data is stored in the storage space provided by CloudMonitor.
	//
	// example:
	//
	// m_prom_user
	NamespaceType *string `json:"NamespaceType,omitempty" xml:"NamespaceType,omitempty"`
	// The number of metric import tasks for third-party services.
	//
	// example:
	//
	// 0
	NotAliyunTaskNumber *int64 `json:"NotAliyunTaskNumber,omitempty" xml:"NotAliyunTaskNumber,omitempty"`
}

func (s DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) SetAliyunProductMetricList(v []*DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace {
	s.AliyunProductMetricList = v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) SetCreateTime(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace {
	s.CreateTime = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) SetDescription(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace {
	s.Description = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) SetDetail(v *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace {
	s.Detail = v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) SetId(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace {
	s.Id = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) SetIsDelete(v int32) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace {
	s.IsDelete = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) SetModifyTime(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace {
	s.ModifyTime = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) SetNamespace(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace {
	s.Namespace = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) SetNamespaceType(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace {
	s.NamespaceType = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace) SetNotAliyunTaskNumber(v int64) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespace {
	s.NotAliyunTaskNumber = &v
	return s
}

type DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList struct {
	// The namespaces.
	NamespaceList []*DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceList `json:"NamespaceList,omitempty" xml:"NamespaceList,omitempty" type:"Repeated"`
	// The account that is used to create the namespace.
	//
	// example:
	//
	// 120886317861****
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.
	//
	// 	- namespace: the namespace of the Alibaba Cloud service.
	//
	// 	- metric_list: the metrics of the Alibaba Cloud service.
	//
	// 	- dimension: the resources of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring. If you do not specify a dimension, all resources of the Alibaba Cloud service are monitored.
	//
	// example:
	//
	// products:- namespace: acs_ecs_dashboard metric_info: - metric_list: - cpu_total dimension: \\"\\"
	YAMLConfig *string `json:"YAMLConfig,omitempty" xml:"YAMLConfig,omitempty"`
}

func (s DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList) SetNamespaceList(v []*DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceList) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList {
	s.NamespaceList = v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList) SetUserId(v int64) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList {
	s.UserId = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList) SetYAMLConfig(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricList {
	s.YAMLConfig = &v
	return s
}

type DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceList struct {
	// The metrics for the Alibaba Cloud service.
	MetricList []*DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceListMetricList `json:"MetricList,omitempty" xml:"MetricList,omitempty" type:"Repeated"`
	// The namespace for the Alibaba Cloud service.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceList) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceList) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceList) SetMetricList(v []*DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceListMetricList) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceList {
	s.MetricList = v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceList) SetNamespace(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceList {
	s.Namespace = &v
	return s
}

type DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceListMetricList struct {
	// The metrics.
	List []*string `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The collection period of the metric.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 60
	Period *int64 `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceListMetricList) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceListMetricList) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceListMetricList) SetList(v []*string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceListMetricList {
	s.List = v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceListMetricList) SetPeriod(v int64) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceAliyunProductMetricListNamespaceListMetricList {
	s.Period = &v
	return s
}

type DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail struct {
	// The region where the metric data is stored.
	//
	// >  This parameter is returned if you select `m_prom_user` for `NamespaceType` when you create a namespace.
	//
	// example:
	//
	// cn-hangzhou
	NamespaceRegion *string `json:"NamespaceRegion,omitempty" xml:"NamespaceRegion,omitempty"`
	// The project where the metric data is located.
	//
	// >  This parameter is returned if you select `m_prom_user` for `NamespaceType` when you create a namespace.
	//
	// example:
	//
	// cms-hybrid-120886317861****-cn-hangzhou-a83d
	SLSProject *string `json:"SLSProject,omitempty" xml:"SLSProject,omitempty"`
	// The data retention period. Valid values:
	//
	// 	- cms.s1.large (Retention Period 15 Days)
	//
	// 	- cms.s1.xlarge (Retention Period 32 Days)
	//
	// 	- cms.s1.2xlarge (Retention Period 63 Days)
	//
	// 	- cms.s1.3xlarge (Retention Period 93 Days)
	//
	// 	- cms.s1.6xlarge (Retention Period 185 Days)
	//
	// 	- cms.s1.12xlarge (Retention Period 367 Days)
	//
	// example:
	//
	// cms.s1.3xlarge
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail) SetNamespaceRegion(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail {
	s.NamespaceRegion = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail) SetSLSProject(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail {
	s.SLSProject = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail) SetSpec(v string) *DescribeHybridMonitorNamespaceListResponseBodyDescribeHybridMonitorNamespaceDetail {
	s.Spec = &v
	return s
}

type DescribeHybridMonitorNamespaceListResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHybridMonitorNamespaceListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHybridMonitorNamespaceListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorNamespaceListResponse) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorNamespaceListResponse) SetHeaders(v map[string]*string) *DescribeHybridMonitorNamespaceListResponse {
	s.Headers = v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponse) SetStatusCode(v int32) *DescribeHybridMonitorNamespaceListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHybridMonitorNamespaceListResponse) SetBody(v *DescribeHybridMonitorNamespaceListResponseBody) *DescribeHybridMonitorNamespaceListResponse {
	s.Body = v
	return s
}

type DescribeHybridMonitorSLSGroupRequest struct {
	// The keyword that is used to search for Logstore groups.
	//
	// example:
	//
	// Logstore
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number.
	//
	// Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Minimum value: 1. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the Logstore group.
	//
	// example:
	//
	// Logstore_test
	SLSGroupName *string `json:"SLSGroupName,omitempty" xml:"SLSGroupName,omitempty"`
}

func (s DescribeHybridMonitorSLSGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorSLSGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorSLSGroupRequest) SetKeyword(v string) *DescribeHybridMonitorSLSGroupRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupRequest) SetPageNumber(v string) *DescribeHybridMonitorSLSGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupRequest) SetPageSize(v string) *DescribeHybridMonitorSLSGroupRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupRequest) SetRegionId(v string) *DescribeHybridMonitorSLSGroupRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupRequest) SetSLSGroupName(v string) *DescribeHybridMonitorSLSGroupRequest {
	s.SLSGroupName = &v
	return s
}

type DescribeHybridMonitorSLSGroupResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The queried Logstore groups.
	List []*DescribeHybridMonitorSLSGroupResponseBodyList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The error message.
	//
	// example:
	//
	// NotFound.SLSGroup
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 66683237-7126-50F8-BBF8-D67ACC919A17
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeHybridMonitorSLSGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorSLSGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorSLSGroupResponseBody) SetCode(v string) *DescribeHybridMonitorSLSGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBody) SetList(v []*DescribeHybridMonitorSLSGroupResponseBodyList) *DescribeHybridMonitorSLSGroupResponseBody {
	s.List = v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBody) SetMessage(v string) *DescribeHybridMonitorSLSGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBody) SetPageNumber(v int64) *DescribeHybridMonitorSLSGroupResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBody) SetPageSize(v int64) *DescribeHybridMonitorSLSGroupResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBody) SetRequestId(v string) *DescribeHybridMonitorSLSGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBody) SetSuccess(v string) *DescribeHybridMonitorSLSGroupResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBody) SetTotal(v int64) *DescribeHybridMonitorSLSGroupResponseBody {
	s.Total = &v
	return s
}

type DescribeHybridMonitorSLSGroupResponseBodyList struct {
	// The time when the Logstore group was created.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1652845630000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The configurations of the Logstore group.
	SLSGroupConfig []*DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig `json:"SLSGroupConfig,omitempty" xml:"SLSGroupConfig,omitempty" type:"Repeated"`
	// The description of the Logstore group.
	SLSGroupDescription *string `json:"SLSGroupDescription,omitempty" xml:"SLSGroupDescription,omitempty"`
	// The name of the Logstore group.
	//
	// example:
	//
	// Logstore_test
	SLSGroupName *string `json:"SLSGroupName,omitempty" xml:"SLSGroupName,omitempty"`
	// The time when the Logstore group was modified.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1652845630000
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeHybridMonitorSLSGroupResponseBodyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorSLSGroupResponseBodyList) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorSLSGroupResponseBodyList) SetCreateTime(v string) *DescribeHybridMonitorSLSGroupResponseBodyList {
	s.CreateTime = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBodyList) SetSLSGroupConfig(v []*DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig) *DescribeHybridMonitorSLSGroupResponseBodyList {
	s.SLSGroupConfig = v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBodyList) SetSLSGroupDescription(v string) *DescribeHybridMonitorSLSGroupResponseBodyList {
	s.SLSGroupDescription = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBodyList) SetSLSGroupName(v string) *DescribeHybridMonitorSLSGroupResponseBodyList {
	s.SLSGroupName = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBodyList) SetUpdateTime(v string) *DescribeHybridMonitorSLSGroupResponseBodyList {
	s.UpdateTime = &v
	return s
}

type DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig struct {
	// The Logstore.
	//
	// example:
	//
	// Logstore-aliyun-all
	SLSLogstore *string `json:"SLSLogstore,omitempty" xml:"SLSLogstore,omitempty"`
	// The Simple Log Service project.
	//
	// example:
	//
	// aliyun-project
	SLSProject *string `json:"SLSProject,omitempty" xml:"SLSProject,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	SLSRegion *string `json:"SLSRegion,omitempty" xml:"SLSRegion,omitempty"`
	// The member ID.
	//
	// **Description*	- This parameter is returned when you call the operation by using an administrative account.
	//
	// example:
	//
	// 120886317861****
	SLSUserId *string `json:"SLSUserId,omitempty" xml:"SLSUserId,omitempty"`
}

func (s DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig) SetSLSLogstore(v string) *DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig {
	s.SLSLogstore = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig) SetSLSProject(v string) *DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig {
	s.SLSProject = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig) SetSLSRegion(v string) *DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig {
	s.SLSRegion = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig) SetSLSUserId(v string) *DescribeHybridMonitorSLSGroupResponseBodyListSLSGroupConfig {
	s.SLSUserId = &v
	return s
}

type DescribeHybridMonitorSLSGroupResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHybridMonitorSLSGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHybridMonitorSLSGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorSLSGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorSLSGroupResponse) SetHeaders(v map[string]*string) *DescribeHybridMonitorSLSGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponse) SetStatusCode(v int32) *DescribeHybridMonitorSLSGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHybridMonitorSLSGroupResponse) SetBody(v *DescribeHybridMonitorSLSGroupResponseBody) *DescribeHybridMonitorSLSGroupResponse {
	s.Body = v
	return s
}

type DescribeHybridMonitorTaskListRequest struct {
	// The ID of the application group.
	//
	// For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// example:
	//
	// 3607****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// Specifies whether the returned result includes metric import tasks for Alibaba Cloud services. Valid values:
	//
	// 	- true (default): The returned result includes metric import tasks for Alibaba Cloud services.
	//
	// 	- false: The returned result excludes metric import tasks for Alibaba Cloud services.
	//
	// example:
	//
	// true
	IncludeAliyunTask *bool `json:"IncludeAliyunTask,omitempty" xml:"IncludeAliyunTask,omitempty"`
	// The keyword that is used for the search.
	//
	// example:
	//
	// task
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The name of the namespace.
	//
	// For information about how to obtain the name of a namespace, see [DescribeHybridMonitorNamespaceList](https://help.aliyun.com/document_detail/428880.html).
	//
	// example:
	//
	// aliyun
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The page number.
	//
	// Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Pages start from page 1. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the member account.
	//
	// > This parameter is required only if you use a management account to call this operation to delete the metric import tasks that belong to a member in a resource directory. In this case, the `TaskType` parameter is set to `aliyun_fc`.
	//
	// example:
	//
	// 120886317861****
	TargetUserId *int64 `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty"`
	// The ID of the metric import task.
	//
	// example:
	//
	// 36****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The type of the metric import task. Valid values:
	//
	// 	- aliyun_fc: metric import tasks for Alibaba Cloud services
	//
	// 	- aliyun_sls: metrics for logs imported from Log Service
	//
	// example:
	//
	// aliyun_fc
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeHybridMonitorTaskListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListRequest) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListRequest) SetGroupId(v string) *DescribeHybridMonitorTaskListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeHybridMonitorTaskListRequest) SetIncludeAliyunTask(v bool) *DescribeHybridMonitorTaskListRequest {
	s.IncludeAliyunTask = &v
	return s
}

func (s *DescribeHybridMonitorTaskListRequest) SetKeyword(v string) *DescribeHybridMonitorTaskListRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeHybridMonitorTaskListRequest) SetNamespace(v string) *DescribeHybridMonitorTaskListRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeHybridMonitorTaskListRequest) SetPageNumber(v int32) *DescribeHybridMonitorTaskListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHybridMonitorTaskListRequest) SetPageSize(v int32) *DescribeHybridMonitorTaskListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHybridMonitorTaskListRequest) SetRegionId(v string) *DescribeHybridMonitorTaskListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeHybridMonitorTaskListRequest) SetTargetUserId(v int64) *DescribeHybridMonitorTaskListRequest {
	s.TargetUserId = &v
	return s
}

func (s *DescribeHybridMonitorTaskListRequest) SetTaskId(v string) *DescribeHybridMonitorTaskListRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeHybridMonitorTaskListRequest) SetTaskType(v string) *DescribeHybridMonitorTaskListRequest {
	s.TaskType = &v
	return s
}

type DescribeHybridMonitorTaskListResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// 	- If the request was successful, the value `successful` is returned.
	//
	// 	- If the request failed, an error message is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 11145B76-566A-5D80-A8A3-FAD98D310079
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The metric import tasks.
	TaskList []*DescribeHybridMonitorTaskListResponseBodyTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeHybridMonitorTaskListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponseBody) SetCode(v string) *DescribeHybridMonitorTaskListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBody) SetMessage(v string) *DescribeHybridMonitorTaskListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBody) SetPageNumber(v int32) *DescribeHybridMonitorTaskListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBody) SetPageSize(v int32) *DescribeHybridMonitorTaskListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBody) SetRequestId(v string) *DescribeHybridMonitorTaskListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBody) SetSuccess(v string) *DescribeHybridMonitorTaskListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBody) SetTaskList(v []*DescribeHybridMonitorTaskListResponseBodyTaskList) *DescribeHybridMonitorTaskListResponseBody {
	s.TaskList = v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBody) SetTotal(v int32) *DescribeHybridMonitorTaskListResponseBody {
	s.Total = &v
	return s
}

type DescribeHybridMonitorTaskListResponseBodyTaskList struct {
	// The tags of the metric import task.
	AttachLabels []*DescribeHybridMonitorTaskListResponseBodyTaskListAttachLabels `json:"AttachLabels,omitempty" xml:"AttachLabels,omitempty" type:"Repeated"`
	// The interval at which the CloudMonitor agent collects host monitoring data. Valid values:
	//
	// 	- 15
	//
	// 	- 30
	//
	// 	- 60
	//
	// Unit: seconds.
	//
	// example:
	//
	// 60
	CollectInterval *int32 `json:"CollectInterval,omitempty" xml:"CollectInterval,omitempty"`
	// The URL of the destination from which the CloudMonitor agent collects host monitoring data.
	//
	// example:
	//
	// http://localhost
	CollectTargetEndpoint *string `json:"CollectTargetEndpoint,omitempty" xml:"CollectTargetEndpoint,omitempty"`
	// The relative path from which the CloudMonitor agent collects monitoring data.
	//
	// example:
	//
	// /metrics
	CollectTargetPath *string `json:"CollectTargetPath,omitempty" xml:"CollectTargetPath,omitempty"`
	// The type of the monitoring data. Valid values: Spring, Tomcat, Nginx, Tengine, JVM, Redis, and MySQL.
	//
	// example:
	//
	// nginx
	CollectTargetType *string `json:"CollectTargetType,omitempty" xml:"CollectTargetType,omitempty"`
	// The timeout period during which the CloudMonitor agent collects host monitoring data. Valid values:
	//
	// 	- 0
	//
	// 	- 15
	//
	// 	- 30
	//
	// 	- 60
	//
	// Unit: seconds.
	//
	// example:
	//
	// 15
	CollectTimout *int32 `json:"CollectTimout,omitempty" xml:"CollectTimout,omitempty"`
	// The timestamp when the metric import task was created.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1639382496000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the metric import task.
	//
	// example:
	//
	// aliyun
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The additional information of the instance.
	//
	// example:
	//
	// test
	ExtraInfo *string `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 3607****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The instances where monitoring data is collected in batches.
	Instances []*string `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// example:
	//
	// C:\\UserData\\log\\*.Log
	LogFilePath *string `json:"LogFilePath,omitempty" xml:"LogFilePath,omitempty"`
	// The method that is used to aggregate on-premises log data.
	//
	// example:
	//
	// [{"metric": "metric1","filters": [{"column": "filed2","type": "include","values": ["222222"]}],"groupBys": [{"column": "filed3","name": "filed3"}],"calculates": [{"column": "field1","name": "avg","type": "avg"}]},{"metric": "metric2","filters": [{"column": "field1","type": "include","values": ["11111"]}],"groupBys": [{"column": "filed2","name": "filed2"}],"calculates": [{"column": "field1","name": "avg","type": "avg"}]}]
	LogProcess *string `json:"LogProcess,omitempty" xml:"LogProcess,omitempty"`
	// The sample on-premises log.
	//
	// example:
	//
	// {"logContent":"100.116.134.26 1119 - [13/Aug/2019:16:55:46 +0800] POST metrichub-cn-hongkong.aliyun.com /agent/metrics/putLines 200 0 \\"-\\" \\"127.0.0.1:7001\\" \\"Go-http-client/1.1\\" \\"-\\" \\"-\\" \\"0a98a21a15656865460656276e\\"","addData":{"field1":["1119","1119"],"filed2":["POSTx","POST"],"filed3":["true","200"]}}
	LogSample *string `json:"LogSample,omitempty" xml:"LogSample,omitempty"`
	// The result that is returned after on-premises log data is split based on the specified matching mode.
	//
	// > The matching modes of on-premises log data include full regex mode, delimiter mode, and JSON mode.
	//
	// example:
	//
	// {"type": "regex","regex": "\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\s+(\\\\d+)\\\\s+\\\\S+\\\\s+\[\\\\d+/\\\\S+/\\\\d+:\\\\d+:\\\\d+:\\\\d+\\\\s+\\\\+\\\\d+\\\\]\\\\s+(\\\\S+)\\\\s+\\\\S+\\\\s+/\\\\S+/\\\\S+/\\\\S+\\\\s+(\\\\d+)","columns": [{"name": "field1"},{"name": "filed2","translate": {"default": "-","mappings": [{"from": "(\\\\w+)","to": "$1x","type": "regex"}]}},{"name": "filed3","translate": {"default": "-","mappings": [{"from": "NumberRange(100,300)","to": "true","type": "function"}]}}]}
	LogSplit *string `json:"LogSplit,omitempty" xml:"LogSplit,omitempty"`
	// The conditions that are used to match the instances in the application group.
	MatchExpress []*DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress `json:"MatchExpress,omitempty" xml:"MatchExpress,omitempty" type:"Repeated"`
	// The relationship between the conditions that are used to filter metric import tasks. Valid values:
	//
	// 	- or
	//
	// 	- and
	//
	// example:
	//
	// or
	MatchExpressRelation *string `json:"MatchExpressRelation,omitempty" xml:"MatchExpressRelation,omitempty"`
	// The namespace to which the host belongs.
	//
	// example:
	//
	// aliyun
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The network type of the host. Valid values:
	//
	// 	- `vpc`
	//
	// 	- `Internet`
	//
	// example:
	//
	// vpc
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	// The configurations of the logs that are imported from Log Service.
	//
	// example:
	//
	// {"express": [],"filter": {"filters": [{"key": "task_type","operator": "=","value": "1"}]},"groupby": [{"alias": "isp","key": "isp","sqlKey": "t.`isp`","valueKey": "isp"}],"interval": 60,"labels": [{"name": "__cms_app__","type": 0,"value": "sitemonitor"}],"statistics": [{"alias": "http_dns_time_avg","function": "avg","key": "http_dns_time"}]}
	SLSProcess *string `json:"SLSProcess,omitempty" xml:"SLSProcess,omitempty"`
	// The configurations of the logs that are imported from Log Service.
	//
	// > This parameter is returned only if the `TaskType` parameter is set to `aliyun_sls`.
	SLSProcessConfig *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig `json:"SLSProcessConfig,omitempty" xml:"SLSProcessConfig,omitempty" type:"Struct"`
	// The ID of the member account.
	//
	// > This parameter is displayed only when you call this operation by using a management account.
	//
	// example:
	//
	// 120886317861****
	TargetUserId *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty"`
	// The ID of the metric import task.
	//
	// example:
	//
	// 36****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the metric import task.
	//
	// example:
	//
	// aliyun_task
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The type of the metric import task. Valid values:
	//
	// 	- aliyun_fc: metric import tasks for Alibaba Cloud services
	//
	// 	- aliyun_sls: metrics for logs imported from Log Service
	//
	// example:
	//
	// aliyun_sls
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The region where the host resides.
	//
	// example:
	//
	// cn-hangzhou
	UploadRegion *string `json:"UploadRegion,omitempty" xml:"UploadRegion,omitempty"`
	// The configuration file of the Alibaba Cloud service that you want to monitor by using Hybrid Cloud Monitoring.
	//
	// 	- namespace: the namespace of the Alibaba Cloud service.
	//
	// 	- metric_list: the metrics of the Alibaba Cloud service.
	//
	// example:
	//
	// products:- namespace: acs_ecs_dashboard metric_info: - metric_list: - cpu_total
	YARMConfig *string `json:"YARMConfig,omitempty" xml:"YARMConfig,omitempty"`
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskList) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskList) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetAttachLabels(v []*DescribeHybridMonitorTaskListResponseBodyTaskListAttachLabels) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.AttachLabels = v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetCollectInterval(v int32) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.CollectInterval = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetCollectTargetEndpoint(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.CollectTargetEndpoint = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetCollectTargetPath(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.CollectTargetPath = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetCollectTargetType(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.CollectTargetType = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetCollectTimout(v int32) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.CollectTimout = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetCreateTime(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.CreateTime = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetDescription(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.Description = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetExtraInfo(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.ExtraInfo = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetGroupId(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.GroupId = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetInstances(v []*string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.Instances = v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetLogFilePath(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.LogFilePath = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetLogProcess(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.LogProcess = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetLogSample(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.LogSample = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetLogSplit(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.LogSplit = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetMatchExpress(v []*DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.MatchExpress = v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetMatchExpressRelation(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.MatchExpressRelation = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetNamespace(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.Namespace = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetNetworkType(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.NetworkType = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetSLSProcess(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.SLSProcess = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetSLSProcessConfig(v *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.SLSProcessConfig = v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetTargetUserId(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.TargetUserId = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetTaskId(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.TaskId = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetTaskName(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.TaskName = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetTaskType(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.TaskType = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetUploadRegion(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.UploadRegion = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskList) SetYARMConfig(v string) *DescribeHybridMonitorTaskListResponseBodyTaskList {
	s.YARMConfig = &v
	return s
}

type DescribeHybridMonitorTaskListResponseBodyTaskListAttachLabels struct {
	// The tag key.
	//
	// example:
	//
	// key1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListAttachLabels) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListAttachLabels) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListAttachLabels) SetName(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListAttachLabels {
	s.Name = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListAttachLabels) SetValue(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListAttachLabels {
	s.Value = &v
	return s
}

type DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress struct {
	// The method that is used to match the instance name. Valid values:
	//
	// 	- startWith: starts with a prefix
	//
	// 	- endWith: ends with a suffix
	//
	// 	- all: matches all
	//
	// 	- equals: equals
	//
	// 	- contains: contains
	//
	// 	- notContains: does not contain
	//
	// example:
	//
	// all
	Function *string `json:"Function,omitempty" xml:"Function,omitempty"`
	// The instance name.
	//
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The keyword that corresponds to the instance name.
	//
	// example:
	//
	// ECS_instance1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress) SetFunction(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress {
	s.Function = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress) SetName(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress {
	s.Name = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress) SetValue(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListMatchExpress {
	s.Value = &v
	return s
}

type DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig struct {
	// The extended fields that indicate the results of basic operations that are performed on aggregation results.
	Express []*DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigExpress `json:"Express,omitempty" xml:"Express,omitempty" type:"Repeated"`
	// The conditions that are used to filter logs imported from Log Service.
	Filter *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Struct"`
	// The dimensions based on which data is aggregated. This parameter is equivalent to the GROUP BY clause in SQL.
	GroupBy []*DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigGroupBy `json:"GroupBy,omitempty" xml:"GroupBy,omitempty" type:"Repeated"`
	// The methods that are used to aggregate logs imported from Log Service.
	Statistics []*DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics `json:"Statistics,omitempty" xml:"Statistics,omitempty" type:"Repeated"`
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig) SetExpress(v []*DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigExpress) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig {
	s.Express = v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig) SetFilter(v *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilter) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig {
	s.Filter = v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig) SetGroupBy(v []*DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigGroupBy) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig {
	s.GroupBy = v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig) SetStatistics(v []*DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfig {
	s.Statistics = v
	return s
}

type DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigExpress struct {
	// The alias of the extended field that indicates the result of basic operations that are performed on aggregation results.
	//
	// example:
	//
	// SuccRate
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The extended field that indicates the result of basic operations that are performed on aggregation results.
	//
	// example:
	//
	// success_count
	Express *string `json:"Express,omitempty" xml:"Express,omitempty"`
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigExpress) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigExpress) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigExpress) SetAlias(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigExpress {
	s.Alias = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigExpress) SetExpress(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigExpress {
	s.Express = &v
	return s
}

type DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilter struct {
	// The conditions that are used to filter logs imported from Log Service.
	Filters []*DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The relationship between multiple filter conditions. Valid values:
	//
	// 	- and (default): Logs are processed only if all filter conditions are met.
	//
	// 	- or: Logs are processed if one of the filter conditions is met.
	//
	// example:
	//
	// and
	Relation *string `json:"Relation,omitempty" xml:"Relation,omitempty"`
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilter) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilter) SetFilters(v []*DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilter {
	s.Filters = v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilter) SetRelation(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilter {
	s.Relation = &v
	return s
}

type DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters struct {
	// The method that is used to filter logs imported from Log Service. Valid values:
	//
	// 	- `contain`: contains
	//
	// 	- `notContain`: does not contain
	//
	// 	- `>`: greater than
	//
	// 	- `<`: less than
	//
	// 	- `=`: equal to
	//
	// 	- `! =`: not equal to
	//
	// 	- `>=`: greater than or equal to
	//
	// 	- `<=`: less than or equal to
	//
	// example:
	//
	// =
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The name of the key that is used to filter logs imported from Log Service.
	//
	// example:
	//
	// host
	SLSKeyName *string `json:"SLSKeyName,omitempty" xml:"SLSKeyName,omitempty"`
	// The value of the key that is used to filter logs imported from Log Service.
	//
	// example:
	//
	// 200
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters) SetOperator(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters {
	s.Operator = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters) SetSLSKeyName(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters {
	s.SLSKeyName = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters) SetValue(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigFilterFilters {
	s.Value = &v
	return s
}

type DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigGroupBy struct {
	// The alias of the aggregation result.
	//
	// example:
	//
	// ApiResult
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The name of the key that is used to aggregate logs imported from Log Service.
	//
	// example:
	//
	// code
	SLSKeyName *string `json:"SLSKeyName,omitempty" xml:"SLSKeyName,omitempty"`
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigGroupBy) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigGroupBy) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigGroupBy) SetAlias(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigGroupBy {
	s.Alias = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigGroupBy) SetSLSKeyName(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigGroupBy {
	s.SLSKeyName = &v
	return s
}

type DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics struct {
	// The alias of the aggregation result.
	//
	// example:
	//
	// level_count
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The function that is used to aggregate log data within a statistical period. Valid values:
	//
	// 	- count: counts the number.
	//
	// 	- sum: calculates the total value.
	//
	// 	- avg: calculates the average value.
	//
	// 	- max: calculates the maximum value.
	//
	// 	- min: calculates the minimum value.
	//
	// 	- value: collects samples within the statistical period.
	//
	// 	- countps: calculates the average number of the specified field per second by using the following formula: Counted number of the specified field/Total number of seconds within the statistical period.
	//
	// 	- sumps: calculates the average number of the specified field per second by using the following formula: Total value of the specified field/Total number of seconds within the statistical period.
	//
	// 	- distinct: counts the number of logs where the specified field appears within the statistical period.
	//
	// 	- distribution: counts the number of logs that meet a specified condition within the statistical period.
	//
	// 	- percentile: sorts the values of the specified field in ascending order, and then returns the value that is at the specified percentile within the statistical period. Example: P50.
	//
	// example:
	//
	// count
	Function *string `json:"Function,omitempty" xml:"Function,omitempty"`
	// The value of the function that is used to aggregate logs imported from Log Service.
	//
	// 	- If the `Function` parameter is set to `distribution`, this parameter indicates the lower limit of the statistical interval. For example, 200 indicates that the number of HTTP requests whose status code is 2XX is calculated.
	//
	// 	- If the `Function` parameter is set to `percentile`, this parameter specifies the percentile at which the expected value is. For example, 0.5 specifies P50.
	//
	// example:
	//
	// 200
	Parameter1 *string `json:"Parameter1,omitempty" xml:"Parameter1,omitempty"`
	// The value of the function that is used to aggregate logs imported from Log Service.
	//
	// > This parameter is returned only if the `Function` parameter is set to `distribution`. This parameter indicates the upper limit of the statistical interval. For example, 299 indicates that the number of HTTP requests whose status code is 2XX is calculated.
	//
	// example:
	//
	// 299
	Parameter2 *string `json:"Parameter2,omitempty" xml:"Parameter2,omitempty"`
	// The name of the key that is used to aggregate logs imported from Log Service.
	//
	// example:
	//
	// name
	SLSKeyName *string `json:"SLSKeyName,omitempty" xml:"SLSKeyName,omitempty"`
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics) SetAlias(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics {
	s.Alias = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics) SetFunction(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics {
	s.Function = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics) SetParameter1(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics {
	s.Parameter1 = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics) SetParameter2(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics {
	s.Parameter2 = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics) SetSLSKeyName(v string) *DescribeHybridMonitorTaskListResponseBodyTaskListSLSProcessConfigStatistics {
	s.SLSKeyName = &v
	return s
}

type DescribeHybridMonitorTaskListResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHybridMonitorTaskListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHybridMonitorTaskListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHybridMonitorTaskListResponse) GoString() string {
	return s.String()
}

func (s *DescribeHybridMonitorTaskListResponse) SetHeaders(v map[string]*string) *DescribeHybridMonitorTaskListResponse {
	s.Headers = v
	return s
}

func (s *DescribeHybridMonitorTaskListResponse) SetStatusCode(v int32) *DescribeHybridMonitorTaskListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHybridMonitorTaskListResponse) SetBody(v *DescribeHybridMonitorTaskListResponseBody) *DescribeHybridMonitorTaskListResponse {
	s.Body = v
	return s
}

type DescribeLogMonitorAttributeRequest struct {
	// The name of the log monitoring metric. Exact match is supported.
	//
	// For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeLogMonitorAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorAttributeRequest) SetMetricName(v string) *DescribeLogMonitorAttributeRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeLogMonitorAttributeRequest) SetRegionId(v string) *DescribeLogMonitorAttributeRequest {
	s.RegionId = &v
	return s
}

type DescribeLogMonitorAttributeResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the log monitoring metric.
	LogMonitor *DescribeLogMonitorAttributeResponseBodyLogMonitor `json:"LogMonitor,omitempty" xml:"LogMonitor,omitempty" type:"Struct"`
	// The returned message. If the call was successful, the value success is returned. If the call failed, an error message is returned.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// C6718537-E673-4A58-8EE1-24B8B38C7AAE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeLogMonitorAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorAttributeResponseBody) SetCode(v string) *DescribeLogMonitorAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBody) SetLogMonitor(v *DescribeLogMonitorAttributeResponseBodyLogMonitor) *DescribeLogMonitorAttributeResponseBody {
	s.LogMonitor = v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBody) SetMessage(v string) *DescribeLogMonitorAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBody) SetRequestId(v string) *DescribeLogMonitorAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBody) SetSuccess(v bool) *DescribeLogMonitorAttributeResponseBody {
	s.Success = &v
	return s
}

type DescribeLogMonitorAttributeResponseBodyLogMonitor struct {
	// The aggregate functions.
	Aggregates []*DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates `json:"Aggregates,omitempty" xml:"Aggregates,omitempty" type:"Repeated"`
	// The time when the log monitoring metric was created.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1547431398000
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The dimension based on which the data is grouped. This parameter is equivalent to the GROUP BY clause in SQL statements. If no dimension is specified, all data is aggregated based on the aggregate function.
	Groupbys []*string `json:"Groupbys,omitempty" xml:"Groupbys,omitempty" type:"Repeated"`
	// The ID returned by Log Service.
	//
	// example:
	//
	// 1234
	LogId *int64 `json:"LogId,omitempty" xml:"LogId,omitempty"`
	// The extended field. The extended field allows you to perform basic operations on the aggregation results.
	//
	// Assume that you have calculated TotalNumber and 5XXNumber by aggregating the data. TotalNumber indicates the total number of HTTP requests, and 5XXNumber indicates the number of HTTP requests whose status code is greater than 499. You can calculate the server error rate by adding the following formula to the extended field: 5XXNumber/TotalNumber\\*100.
	//
	// example:
	//
	// {"extend":{"errorPercent":"5XXNumber/TotalNumber*100"}}
	MetricExpress *string `json:"MetricExpress,omitempty" xml:"MetricExpress,omitempty"`
	// The name of the log monitoring metric. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The name of the Log Service Logstore.
	//
	// example:
	//
	// test-logstore
	SlsLogstore *string `json:"SlsLogstore,omitempty" xml:"SlsLogstore,omitempty"`
	// The name of the Log Service project.
	//
	// example:
	//
	// test-project
	SlsProject *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
	// The ID of the region where the Log Service Logstore resides.
	//
	// example:
	//
	// cn-hangzhou
	SlsRegionId *string `json:"SlsRegionId,omitempty" xml:"SlsRegionId,omitempty"`
	// The size of the tumbling window for calculation. Unit: seconds. The system performs an aggregation for each tumbling window.
	Tumblingwindows []*string `json:"Tumblingwindows,omitempty" xml:"Tumblingwindows,omitempty" type:"Repeated"`
	// The condition that is used to filter logs. The ValueFilter and ValueFilterRelation parameters are used in pair. The filter condition is equivalent to the WHERE clause in SQL statements.
	//
	// If no filter condition is specified, all logs are processed. Assume that logs contain the Level field, which may be set to Error. If you need to calculate the number of times that logs of the Error level appear every minute, you can set the filter condition to Level=Error and count the number of logs that meet this condition.
	ValueFilter []*DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter `json:"ValueFilter,omitempty" xml:"ValueFilter,omitempty" type:"Repeated"`
	// The logical operator that is used between log filter conditions. The ValueFilter and ValueFilterRelation parameters are used in pair. Valid values:
	//
	// 	- and
	//
	// 	- or
	//
	// example:
	//
	// and
	ValueFilterRelation *string `json:"ValueFilterRelation,omitempty" xml:"ValueFilterRelation,omitempty"`
}

func (s DescribeLogMonitorAttributeResponseBodyLogMonitor) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorAttributeResponseBodyLogMonitor) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetAggregates(v []*DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.Aggregates = v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetGmtCreate(v int64) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.GmtCreate = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetGroupId(v int64) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.GroupId = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetGroupbys(v []*string) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.Groupbys = v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetLogId(v int64) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.LogId = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetMetricExpress(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.MetricExpress = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetMetricName(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.MetricName = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetSlsLogstore(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.SlsLogstore = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetSlsProject(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.SlsProject = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetSlsRegionId(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.SlsRegionId = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetTumblingwindows(v []*string) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.Tumblingwindows = v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetValueFilter(v []*DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.ValueFilter = v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitor) SetValueFilterRelation(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitor {
	s.ValueFilterRelation = &v
	return s
}

type DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates struct {
	// The alias of the aggregate function.
	//
	// example:
	//
	// HostName
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The name of the field in logs.
	//
	// example:
	//
	// hostName
	FieldName *string `json:"FieldName,omitempty" xml:"FieldName,omitempty"`
	// The function that is used to aggregate the monitoring data of logs within an aggregation period. Valid values:
	//
	// 	- count: counts the number.
	//
	// 	- sum: calculates the total value.
	//
	// 	- avg: calculates the average value.
	//
	// 	- max: selects the maximum value.
	//
	// 	- min: selects the minimum value.
	//
	// 	- countps: calculates the counted number of the specified field divided by the total number of seconds of the aggregation period.
	//
	// 	- sumps: calculates the total value of the specified field divided by the total number of seconds of the aggregation period.
	//
	// 	- distinct: counts the number of logs where the specified field appears within the aggregation period.
	//
	// example:
	//
	// count
	Function *string `json:"Function,omitempty" xml:"Function,omitempty"`
	// The maximum value.
	//
	// example:
	//
	// 10
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	// The minimum value.
	//
	// example:
	//
	// 0
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates) SetAlias(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates {
	s.Alias = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates) SetFieldName(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates {
	s.FieldName = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates) SetFunction(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates {
	s.Function = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates) SetMax(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates {
	s.Max = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates) SetMin(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitorAggregates {
	s.Min = &v
	return s
}

type DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter struct {
	// The name of the log field used for matching in the filter condition.
	//
	// example:
	//
	// hostName
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The method that is used to match the field value. Valid values:
	//
	// 	- `contain`
	//
	// 	- `notContain`
	//
	// 	- `>`: greater than
	//
	// 	- `<`: less than
	//
	// 	- `>=`: greater than or equal to
	//
	// 	- `<=`: less than or equal to
	//
	// example:
	//
	// contain
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The field value to be matched in the filter condition.
	//
	// example:
	//
	// portal
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter) SetKey(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter {
	s.Key = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter) SetOperator(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter {
	s.Operator = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter) SetValue(v string) *DescribeLogMonitorAttributeResponseBodyLogMonitorValueFilter {
	s.Value = &v
	return s
}

type DescribeLogMonitorAttributeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLogMonitorAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLogMonitorAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorAttributeResponse) SetHeaders(v map[string]*string) *DescribeLogMonitorAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLogMonitorAttributeResponse) SetStatusCode(v int32) *DescribeLogMonitorAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLogMonitorAttributeResponse) SetBody(v *DescribeLogMonitorAttributeResponseBody) *DescribeLogMonitorAttributeResponse {
	s.Body = v
	return s
}

type DescribeLogMonitorListRequest struct {
	// The ID of the application group.
	//
	// example:
	//
	// 123456
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of the page to return.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: 10
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The keyword that is used to search for log monitoring metrics. Fuzzy match is supported.
	//
	// example:
	//
	// test
	SearchValue *string `json:"SearchValue,omitempty" xml:"SearchValue,omitempty"`
}

func (s DescribeLogMonitorListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorListRequest) SetGroupId(v int64) *DescribeLogMonitorListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeLogMonitorListRequest) SetPageNumber(v int32) *DescribeLogMonitorListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLogMonitorListRequest) SetPageSize(v int32) *DescribeLogMonitorListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLogMonitorListRequest) SetRegionId(v string) *DescribeLogMonitorListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeLogMonitorListRequest) SetSearchValue(v string) *DescribeLogMonitorListRequest {
	s.SearchValue = &v
	return s
}

type DescribeLogMonitorListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The log monitoring metrics.
	LogMonitorList []*DescribeLogMonitorListResponseBodyLogMonitorList `json:"LogMonitorList,omitempty" xml:"LogMonitorList,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 01E90080-4300-4FAA-B9AE-161956BC350D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of the returned entries.
	//
	// example:
	//
	// 15
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeLogMonitorListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorListResponseBody) SetCode(v string) *DescribeLogMonitorListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeLogMonitorListResponseBody) SetLogMonitorList(v []*DescribeLogMonitorListResponseBodyLogMonitorList) *DescribeLogMonitorListResponseBody {
	s.LogMonitorList = v
	return s
}

func (s *DescribeLogMonitorListResponseBody) SetMessage(v string) *DescribeLogMonitorListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeLogMonitorListResponseBody) SetPageNumber(v int32) *DescribeLogMonitorListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLogMonitorListResponseBody) SetPageSize(v int32) *DescribeLogMonitorListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLogMonitorListResponseBody) SetRequestId(v string) *DescribeLogMonitorListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLogMonitorListResponseBody) SetSuccess(v bool) *DescribeLogMonitorListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeLogMonitorListResponseBody) SetTotal(v int64) *DescribeLogMonitorListResponseBody {
	s.Total = &v
	return s
}

type DescribeLogMonitorListResponseBodyLogMonitorList struct {
	// The time when the log monitoring metric was created.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since the epoch time January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1577766395000
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID returned by Log Service.
	//
	// example:
	//
	// 12345
	LogId *int64 `json:"LogId,omitempty" xml:"LogId,omitempty"`
	// The name of the log monitoring metric. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The name of the Log Service Logstore.
	//
	// example:
	//
	// testSlS****
	SlsLogstore *string `json:"SlsLogstore,omitempty" xml:"SlsLogstore,omitempty"`
	// The name of the Log Service project.
	//
	// example:
	//
	// sls-project-test****
	SlsProject *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
	// The ID of the region where the Log Service Logstore resides.
	//
	// example:
	//
	// cn-hangzhou
	SlsRegionId *string `json:"SlsRegionId,omitempty" xml:"SlsRegionId,omitempty"`
	// The condition that is used to filter logs. The ValueFilter and ValueFilterRelation parameters are used in pair. The filter condition is equivalent to the WHERE clause in SQL statements.
	//
	// If no filter condition is specified, all logs are processed. Assume that logs contain the Level field, which may be set to Error. If you need to calculate the number of times that logs of the Error level appear every minute, you can set the filter condition to Level=Error and count the number of logs that meet this condition.
	ValueFilter []*DescribeLogMonitorListResponseBodyLogMonitorListValueFilter `json:"ValueFilter,omitempty" xml:"ValueFilter,omitempty" type:"Repeated"`
	// The logical operator that is used between log filter conditions. The ValueFilter and ValueFilterRelation parameters are used in pair. Valid values:
	//
	// 	- and
	//
	// 	- or
	//
	// example:
	//
	// and
	ValueFilterRelation *string `json:"ValueFilterRelation,omitempty" xml:"ValueFilterRelation,omitempty"`
}

func (s DescribeLogMonitorListResponseBodyLogMonitorList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorListResponseBodyLogMonitorList) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorList) SetGmtCreate(v int64) *DescribeLogMonitorListResponseBodyLogMonitorList {
	s.GmtCreate = &v
	return s
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorList) SetGroupId(v int64) *DescribeLogMonitorListResponseBodyLogMonitorList {
	s.GroupId = &v
	return s
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorList) SetLogId(v int64) *DescribeLogMonitorListResponseBodyLogMonitorList {
	s.LogId = &v
	return s
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorList) SetMetricName(v string) *DescribeLogMonitorListResponseBodyLogMonitorList {
	s.MetricName = &v
	return s
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorList) SetSlsLogstore(v string) *DescribeLogMonitorListResponseBodyLogMonitorList {
	s.SlsLogstore = &v
	return s
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorList) SetSlsProject(v string) *DescribeLogMonitorListResponseBodyLogMonitorList {
	s.SlsProject = &v
	return s
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorList) SetSlsRegionId(v string) *DescribeLogMonitorListResponseBodyLogMonitorList {
	s.SlsRegionId = &v
	return s
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorList) SetValueFilter(v []*DescribeLogMonitorListResponseBodyLogMonitorListValueFilter) *DescribeLogMonitorListResponseBodyLogMonitorList {
	s.ValueFilter = v
	return s
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorList) SetValueFilterRelation(v string) *DescribeLogMonitorListResponseBodyLogMonitorList {
	s.ValueFilterRelation = &v
	return s
}

type DescribeLogMonitorListResponseBodyLogMonitorListValueFilter struct {
	// The name of the log field used for matching in the filter condition.
	//
	// example:
	//
	// hostName
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The method that is used to match the field value. Valid values:
	//
	// 	- contain
	//
	// 	- notContain
	//
	// 	- `>`: greater than
	//
	// 	- `<`: less than
	//
	// 	- `>=`: greater than or equal to
	//
	// 	- `<=`: less than or equal to
	//
	// example:
	//
	// contain
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The field value to be matched in the filter condition.
	//
	// example:
	//
	// portal
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeLogMonitorListResponseBodyLogMonitorListValueFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorListResponseBodyLogMonitorListValueFilter) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorListValueFilter) SetKey(v string) *DescribeLogMonitorListResponseBodyLogMonitorListValueFilter {
	s.Key = &v
	return s
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorListValueFilter) SetOperator(v string) *DescribeLogMonitorListResponseBodyLogMonitorListValueFilter {
	s.Operator = &v
	return s
}

func (s *DescribeLogMonitorListResponseBodyLogMonitorListValueFilter) SetValue(v string) *DescribeLogMonitorListResponseBodyLogMonitorListValueFilter {
	s.Value = &v
	return s
}

type DescribeLogMonitorListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLogMonitorListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLogMonitorListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLogMonitorListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLogMonitorListResponse) SetHeaders(v map[string]*string) *DescribeLogMonitorListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLogMonitorListResponse) SetStatusCode(v int32) *DescribeLogMonitorListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLogMonitorListResponse) SetBody(v *DescribeLogMonitorListResponseBody) *DescribeLogMonitorListResponse {
	s.Body = v
	return s
}

type DescribeMetricDataRequest struct {
	// The dimensions based on which the resources are queried.
	//
	// Set the value to a collection of key-value pairs. A typical key-value pair is `instanceId:i-2ze2d6j5uhg20x47****`.
	//
	// >  You can query a maximum of 50 instances in a single request.
	//
	// example:
	//
	// [{"instanceId": "i-abcdefgh12****"}]
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The end of the time range to query monitoring data.
	//
	// 	- If the `StartTime` and `EndTime` parameters are not specified, the monitoring data of the last statistical period is queried.``
	//
	// 	- If the `StartTime` and `EndTime` parameters are specified, the monitoring data of the last statistical period in the specified time range is queried.```` The following examples demonstrate how to determine the period in which monitoring data is queried:
	//
	//     	- If you set the `Period` parameter to 15, the specified time range must be less than or equal to 20 minutes. For example, if you set the StartTime parameter to 2021-05-08 08:10:00 and the EndTime parameter to 2021-05-08 08:30:00, the monitoring data of the last 15 seconds in the time range is queried.
	//
	//     	- If you set the `Period` to 60 or 900, the specified time range must be less than or equal to 2 hours. For example, if you set the Period parameter to 60, the StartTime parameter to 2021-05-08 08:00:00, and the EndTime parameter to 2021-05-08 10:00:00, the monitoring data of the last 60 seconds in the time range is queried.
	//
	//     	- If you set the `Period` parameter to 3600, the specified time range must be less than or equal to 2 days. For example, if you set the StartTime parameter to 2021-05-08 08:00:00 and the EndTime parameter to 2021-05-10 08:00:00, the monitoring data of the last 3,600 seconds in the time range is queried.
	//
	// The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 UTC on Thursday, January 1, 1970.
	//
	// 	- UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format.
	//
	// >  We recommend that you use UNIX timestamps to prevent time zone-related issues.
	//
	// example:
	//
	// 1618368960000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The expression that is used to compute the query results in real time.
	//
	// >  Only the `groupby` expression is supported. This expression is similar to the `GROUP BY` statement that is used in databases.
	//
	// example:
	//
	// {"groupby":["userId","instanceId"]}
	Express *string `json:"Express,omitempty" xml:"Express,omitempty"`
	// The number of entries per page.
	//
	// Default value: 1000.
	//
	// >  The maximum value of the Length parameter in a request is 1440.
	//
	// example:
	//
	// 1000
	Length *string `json:"Length,omitempty" xml:"Length,omitempty"`
	// The metric that is used to monitor the cloud service.
	//
	// For more information about the metrics of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_idle
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The statistical period of the metric.
	//
	// Valid values: 15, 60, 900, and 3600.
	//
	// Unit: seconds.
	//
	// >
	//
	// 	- If this parameter is not specified, monitoring data is queried based on the period in which metric values are reported.
	//
	// 	- For more information about the statistical period of a metric that is specified by the `MetricName` parameter, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// 60
	Period   *string `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The start of the time range to query monitoring data.
	//
	// 	- If the `StartTime` and `EndTime` parameters are not specified, the monitoring data of the last statistical period is queried.``
	//
	// 	- If the `StartTime` and `EndTime` parameters are specified, the monitoring data of the last statistical period in the specified time range is queried.```` The following examples demonstrate how to determine the period in which monitoring data is queried:
	//
	//     	- If you set the `Period` parameter to 15, the specified time range must be less than or equal to 20 minutes. For example, if you set the StartTime parameter to 2021-05-08 08:10:00 and the EndTime parameter to 2021-05-08 08:30:00, the monitoring data of the last 15 seconds in the time range is queried.
	//
	//     	- If you set the `Period` to 60 or 900, the specified time range must be less than or equal to 2 hours. For example, if you set the Period parameter to 60, the StartTime parameter to 2021-05-08 08:00:00, and the EndTime parameter to 2021-05-08 10:00:00, the monitoring data of the last 60 seconds in the time range is queried.
	//
	//     	- If you set the `Period` parameter to 3600, the specified time range must be less than or equal to 2 days. For example, if you set the StartTime parameter to 2021-05-08 08:00:00 and the EndTime parameter to 2021-05-10 08:00:00, the monitoring data of the last 3,600 seconds in the time range is queried.
	//
	// The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 UTC on Thursday, January 1, 1970.
	//
	// 	- UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format.
	//
	// >
	//
	// 	- You must set the `StartTime` parameter to a point in time that is later than 00:00:00 UTC on Thursday, January 1, 1970. Otherwise, this parameter is invalid.
	//
	// 	- We recommend that you use UNIX timestamps to prevent time zone-related issues.
	//
	// example:
	//
	// 1618368900000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeMetricDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricDataRequest) SetDimensions(v string) *DescribeMetricDataRequest {
	s.Dimensions = &v
	return s
}

func (s *DescribeMetricDataRequest) SetEndTime(v string) *DescribeMetricDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMetricDataRequest) SetExpress(v string) *DescribeMetricDataRequest {
	s.Express = &v
	return s
}

func (s *DescribeMetricDataRequest) SetLength(v string) *DescribeMetricDataRequest {
	s.Length = &v
	return s
}

func (s *DescribeMetricDataRequest) SetMetricName(v string) *DescribeMetricDataRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricDataRequest) SetNamespace(v string) *DescribeMetricDataRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricDataRequest) SetPeriod(v string) *DescribeMetricDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeMetricDataRequest) SetRegionId(v string) *DescribeMetricDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMetricDataRequest) SetStartTime(v string) *DescribeMetricDataRequest {
	s.StartTime = &v
	return s
}

type DescribeMetricDataResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The monitoring data. The value includes the following fields:
	//
	// 	- `timestamp`: the time when the alert was triggered.
	//
	// 	- `userId`: the ID of the user for which the alert was triggered.
	//
	// 	- `instanceId`: the ID of the instance for which the alert was triggered.
	//
	// 	- `Minimum`, `Average`, and `Maximum`: the aggregation methods.
	//
	// example:
	//
	// [{\\"timestamp\\":1618368900000,\\"Average\\":95.8291666666667,\\"Minimum\\":65.48,\\"Maximum\\":100.0},{\\"timestamp\\":1618368960000,\\"Average\\":95.8683333333333,\\"Minimum\\":67.84,\\"Maximum\\":100.0}]
	Datapoints *string `json:"Datapoints,omitempty" xml:"Datapoints,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The statistical period of the monitoring data.
	//
	// Valid values: 15, 60, 900, and 3600.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6A5F022D-AC7C-460E-94AE-B9E75083D027
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMetricDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricDataResponseBody) SetCode(v string) *DescribeMetricDataResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricDataResponseBody) SetDatapoints(v string) *DescribeMetricDataResponseBody {
	s.Datapoints = &v
	return s
}

func (s *DescribeMetricDataResponseBody) SetMessage(v string) *DescribeMetricDataResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricDataResponseBody) SetPeriod(v string) *DescribeMetricDataResponseBody {
	s.Period = &v
	return s
}

func (s *DescribeMetricDataResponseBody) SetRequestId(v string) *DescribeMetricDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMetricDataResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricDataResponse) SetHeaders(v map[string]*string) *DescribeMetricDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricDataResponse) SetStatusCode(v int32) *DescribeMetricDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricDataResponse) SetBody(v *DescribeMetricDataResponseBody) *DescribeMetricDataResponse {
	s.Body = v
	return s
}

type DescribeMetricLastRequest struct {
	// The monitoring dimensions of the specified resource.
	//
	// Set the value to a collection of `key:value` pairs. Example: `{"userId":"120886317861****"}` or `{"instanceId":"i-2ze2d6j5uhg20x47****"}`.
	//
	// >  You can query a maximum of 50 instances in each request.
	//
	// example:
	//
	// [{"instanceId":"i-abcdefgh12****"}]
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The end of the time range to query monitoring data.
	//
	// 	- For second-level data, the start time is obtained by comparing the time that is specified by the StartTime parameter and 20 minutes earlier of the time that is specified by the EndTime parameter. The earlier one of the compared points in time is used as the start time.
	//
	// 	- For minute-level data, the start time is obtained by comparing the time that is specified by the StartTime parameter and 2 hours earlier of the time that is specified by the EndTime parameter. The earlier one of the compared points in time is used as the start time.
	//
	// 	- For hour-level data, the start time is obtained by comparing the time that is specified by the StartTime parameter and two days earlier of the time that is specified by the EndTime parameter. The earlier one of the compared points in time is used as the start time.
	//
	// example:
	//
	// 2019-01-31 10:10:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The expression that is used to calculate the query results in real time.
	//
	// example:
	//
	// {"groupby":["userId","instanceId"]}
	Express *string `json:"Express,omitempty" xml:"Express,omitempty"`
	// The number of entries per page.
	//
	// Default value: 1000. This value indicates that a maximum of 1,000 entries of monitoring data can be returned on each page.
	//
	// >  The maximum value of the Length parameter for each request is 1440.
	//
	// example:
	//
	// 1000
	Length *string `json:"Length,omitempty" xml:"Length,omitempty"`
	// The metric that is used to monitor the cloud service.
	//
	// For more information about metric names, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// CPUUtilization
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The pagination token.
	//
	// 	- If the number of results exceeds the maximum number of entries allowed on a single page, a pagination token is returned.
	//
	// 	- This token can be used as an input parameter to obtain the next page of results. If all results are obtained, no token is returned.
	//
	// example:
	//
	// 15761432850009dd70bb64cff1f0fff6c0b08ffff073be5fb1e785e2b020f7fed9b5e137bd810a6d6cff5ae****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The statistical period of the monitoring data.
	//
	// Valid values: 15, 60, 900, and 3600.
	//
	// Unit: seconds.
	//
	// >
	//
	// 	- If this parameter is not specified, monitoring data is queried based on the period in which metric values are reported. The statistical period of metrics (`MetricName`) varies for each cloud service. The statistical period of metrics is displayed in the `MinPeriods` column on the **Metrics*	- page for each cloud service. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// 60
	Period   *string `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The start of the time range to query monitoring data.
	//
	// example:
	//
	// 2019-01-31 10:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeMetricLastRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricLastRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricLastRequest) SetDimensions(v string) *DescribeMetricLastRequest {
	s.Dimensions = &v
	return s
}

func (s *DescribeMetricLastRequest) SetEndTime(v string) *DescribeMetricLastRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMetricLastRequest) SetExpress(v string) *DescribeMetricLastRequest {
	s.Express = &v
	return s
}

func (s *DescribeMetricLastRequest) SetLength(v string) *DescribeMetricLastRequest {
	s.Length = &v
	return s
}

func (s *DescribeMetricLastRequest) SetMetricName(v string) *DescribeMetricLastRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricLastRequest) SetNamespace(v string) *DescribeMetricLastRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricLastRequest) SetNextToken(v string) *DescribeMetricLastRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeMetricLastRequest) SetPeriod(v string) *DescribeMetricLastRequest {
	s.Period = &v
	return s
}

func (s *DescribeMetricLastRequest) SetRegionId(v string) *DescribeMetricLastRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMetricLastRequest) SetStartTime(v string) *DescribeMetricLastRequest {
	s.StartTime = &v
	return s
}

type DescribeMetricLastResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The monitoring data.
	//
	// example:
	//
	// [{"timestamp":1548777660000,"userId":"123456789876****","instanceId":"i-abcdefgh12****","Minimum":93.1,"Average":99.52,"Maximum":100}]
	Datapoints *string `json:"Datapoints,omitempty" xml:"Datapoints,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The pagination token.
	//
	// example:
	//
	// xxxxxx
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The time interval.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 021472A6-25E3-4094-8D00-BA4B6A5486C3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMetricLastResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricLastResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricLastResponseBody) SetCode(v string) *DescribeMetricLastResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricLastResponseBody) SetDatapoints(v string) *DescribeMetricLastResponseBody {
	s.Datapoints = &v
	return s
}

func (s *DescribeMetricLastResponseBody) SetMessage(v string) *DescribeMetricLastResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricLastResponseBody) SetNextToken(v string) *DescribeMetricLastResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeMetricLastResponseBody) SetPeriod(v string) *DescribeMetricLastResponseBody {
	s.Period = &v
	return s
}

func (s *DescribeMetricLastResponseBody) SetRequestId(v string) *DescribeMetricLastResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricLastResponseBody) SetSuccess(v bool) *DescribeMetricLastResponseBody {
	s.Success = &v
	return s
}

type DescribeMetricLastResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricLastResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricLastResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricLastResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricLastResponse) SetHeaders(v map[string]*string) *DescribeMetricLastResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricLastResponse) SetStatusCode(v int32) *DescribeMetricLastResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricLastResponse) SetBody(v *DescribeMetricLastResponseBody) *DescribeMetricLastResponse {
	s.Body = v
	return s
}

type DescribeMetricListRequest struct {
	// The dimensions that specify the resources whose monitoring data you want to query.
	//
	// Set the value to a collection of key-value pairs. A typical key-value pair is `instanceId:i-2ze2d6j5uhg20x47****`.
	//
	// >  You can query a maximum of 50 instances in a single request.
	//
	// example:
	//
	// [{"instanceId": "i-abcdefgh12****"}]
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The end of the time range to query. The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
	//
	// 	- UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format
	//
	// example:
	//
	// 2019-01-30 00:10:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The expression that is used to compute the query results in real time.
	//
	// >  Only the groupby expression is supported. This expression is similar to the GROUP BY statement that is used in databases.
	//
	// example:
	//
	// {"groupby":["userId","instanceId"]}
	Express *string `json:"Express,omitempty" xml:"Express,omitempty"`
	// The number of entries to return on each page.
	//
	// >  The maximum value of the Length parameter in a request is 1440.
	//
	// example:
	//
	// 1000
	Length *string `json:"Length,omitempty" xml:"Length,omitempty"`
	// The name of the metric.
	//
	// For more information about metric names, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_idle
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service. Format: acs_service name.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The paging token.
	//
	// >  If this parameter is not specified, the data on the first page is returned. A return value other than Null of this parameter indicates that not all entries have been returned. You can use this value as an input parameter to obtain entries on the next page. The value Null indicates that all query results have been returned.
	//
	// example:
	//
	// 15761485350009dd70bb64cff1f0fff750b08ffff073be5fb1e785e2b020f1a949d5ea14aea7fed82f01dd8****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The interval at which the monitoring data is queried.
	//
	// Valid values: 60, 300, and 900.
	//
	// Unit: seconds.
	//
	// >  Configure this parameter based on your business scenario.
	//
	// example:
	//
	// 60
	Period   *string `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
	//
	// 	- UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format
	//
	// >  The specified period includes the end time and excludes the start time. The start time must be earlier than the end time.
	//
	// example:
	//
	// 2019-01-30 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeMetricListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricListRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricListRequest) SetDimensions(v string) *DescribeMetricListRequest {
	s.Dimensions = &v
	return s
}

func (s *DescribeMetricListRequest) SetEndTime(v string) *DescribeMetricListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMetricListRequest) SetExpress(v string) *DescribeMetricListRequest {
	s.Express = &v
	return s
}

func (s *DescribeMetricListRequest) SetLength(v string) *DescribeMetricListRequest {
	s.Length = &v
	return s
}

func (s *DescribeMetricListRequest) SetMetricName(v string) *DescribeMetricListRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricListRequest) SetNamespace(v string) *DescribeMetricListRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricListRequest) SetNextToken(v string) *DescribeMetricListRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeMetricListRequest) SetPeriod(v string) *DescribeMetricListRequest {
	s.Period = &v
	return s
}

func (s *DescribeMetricListRequest) SetRegionId(v string) *DescribeMetricListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMetricListRequest) SetStartTime(v string) *DescribeMetricListRequest {
	s.StartTime = &v
	return s
}

type DescribeMetricListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The monitoring data.
	//
	// example:
	//
	// [{"timestamp":1548777660000,"userId":"120886317861****","instanceId":"i-abc","Minimum":9.92,"Average":9.92,"Maximum":9.92}]
	Datapoints *string `json:"Datapoints,omitempty" xml:"Datapoints,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The paging token.
	//
	// example:
	//
	// 15761441850009dd70bb64cff1f0fff6d0b08ffff073be5fb1e785e2b020f7fed9b5e137bd810a6d6cff5ae****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The interval at which the monitoring data is queried. Unit: seconds. Valid values: 60, 300, and 900.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 3121AE7D-4AFF-4C25-8F1D-C8226EBB1F42
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMetricListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricListResponseBody) SetCode(v string) *DescribeMetricListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetDatapoints(v string) *DescribeMetricListResponseBody {
	s.Datapoints = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetMessage(v string) *DescribeMetricListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetNextToken(v string) *DescribeMetricListResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetPeriod(v string) *DescribeMetricListResponseBody {
	s.Period = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetRequestId(v string) *DescribeMetricListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricListResponseBody) SetSuccess(v bool) *DescribeMetricListResponseBody {
	s.Success = &v
	return s
}

type DescribeMetricListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricListResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricListResponse) SetHeaders(v map[string]*string) *DescribeMetricListResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricListResponse) SetStatusCode(v int32) *DescribeMetricListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricListResponse) SetBody(v *DescribeMetricListResponseBody) *DescribeMetricListResponse {
	s.Body = v
	return s
}

type DescribeMetricMetaListRequest struct {
	// The tags for filtering metrics. Specify a JSON string.
	//
	// Format: ` [{"name":"tag key","value":"tag value"},{"name":"tag key","value":"tag value"}]  `. The following tags are available:
	//
	// 	- metricCategory: the category of the metric.
	//
	// 	- alertEnable: specifies whether to report alerts for the metric.
	//
	// 	- alertUnit: the unit of the metric in the alerts.
	//
	// 	- unitFactor: the factor for metric unit conversion.
	//
	// 	- minAlertPeriod: the minimum interval at which the alert is reported.
	//
	// 	- productCategory: the category of the service.
	//
	// example:
	//
	// [{"name":"productCategory","value":"kvstore_old"}]
	Labels *string `json:"Labels,omitempty" xml:"Labels,omitempty"`
	// The metric name. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// CPUUtilization
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_kvstore
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 30.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeMetricMetaListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricMetaListRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricMetaListRequest) SetLabels(v string) *DescribeMetricMetaListRequest {
	s.Labels = &v
	return s
}

func (s *DescribeMetricMetaListRequest) SetMetricName(v string) *DescribeMetricMetaListRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricMetaListRequest) SetNamespace(v string) *DescribeMetricMetaListRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricMetaListRequest) SetPageNumber(v int32) *DescribeMetricMetaListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMetricMetaListRequest) SetPageSize(v int32) *DescribeMetricMetaListRequest {
	s.PageSize = &v
	return s
}

type DescribeMetricMetaListResponseBody struct {
	// The response code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 0CCE0AF0-053C-4B13-A583-DC9A85785D49
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The configuration of the metrics in the resources.
	Resources *DescribeMetricMetaListResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 12
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeMetricMetaListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricMetaListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricMetaListResponseBody) SetCode(v string) *DescribeMetricMetaListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricMetaListResponseBody) SetMessage(v string) *DescribeMetricMetaListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricMetaListResponseBody) SetRequestId(v string) *DescribeMetricMetaListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricMetaListResponseBody) SetResources(v *DescribeMetricMetaListResponseBodyResources) *DescribeMetricMetaListResponseBody {
	s.Resources = v
	return s
}

func (s *DescribeMetricMetaListResponseBody) SetSuccess(v bool) *DescribeMetricMetaListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMetricMetaListResponseBody) SetTotalCount(v string) *DescribeMetricMetaListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeMetricMetaListResponseBodyResources struct {
	Resource []*DescribeMetricMetaListResponseBodyResourcesResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeMetricMetaListResponseBodyResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricMetaListResponseBodyResources) GoString() string {
	return s.String()
}

func (s *DescribeMetricMetaListResponseBodyResources) SetResource(v []*DescribeMetricMetaListResponseBodyResourcesResource) *DescribeMetricMetaListResponseBodyResources {
	s.Resource = v
	return s
}

type DescribeMetricMetaListResponseBodyResourcesResource struct {
	// The metric description.
	//
	// example:
	//
	// CPUUtilization
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The monitoring dimensions of the resource. Multiple monitoring dimensions are separated with commas (,).
	//
	// example:
	//
	// instanceId
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The tags of the metric, including one or more JSON strings.
	//
	// Format: `[{"name":"tag key","value":"tag value"}]`. The `name` can be repeated. The following tags are available:
	//
	// 	- metricCategory: the category of the metric.
	//
	// 	- alertEnable: indicates whether to report alerts for the metric.
	//
	// 	- alertUnit: the unit of the metric in the alerts.
	//
	// 	- unitFactor: the factor for metric unit conversion.
	//
	// 	- minAlertPeriod: the minimum interval at which the alert is reported.
	//
	// 	- productCategory: the category of the service.
	//
	// example:
	//
	// [{\\"name\\":\\"alertUnit\\",\\"value\\":\\"Bytes\\"},{\\"name\\":\\"minAlertPeriod\\",\\"value\\":\\"60\\"},{\\"name\\":\\"metricCategory\\",\\"value\\":\\"instanceId\\"},{\\"name\\":\\"instanceType\\",\\"value\\":\\"disaster\\"},{\\"name\\":\\"is_alarm\\",\\"value\\":\\"true\\"},{\\"name\\":\\"productCategory\\",\\"value\\":\\"kvstore_old\\"}]
	Labels *string `json:"Labels,omitempty" xml:"Labels,omitempty"`
	// The metric name.
	//
	// example:
	//
	// CPUUtilization
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// example:
	//
	// acs_kvstore
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The statistical periods of the metric. Multiple statistical periods are separated with commas (,).
	//
	// Unit: seconds.
	//
	// example:
	//
	// 60,300
	Periods *string `json:"Periods,omitempty" xml:"Periods,omitempty"`
	// The statistical method. Multiple statistical methods are separated with commas (,).
	//
	// example:
	//
	// Average,Minimum,Maximum
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The unit of the metric.
	//
	// example:
	//
	// %
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s DescribeMetricMetaListResponseBodyResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricMetaListResponseBodyResourcesResource) GoString() string {
	return s.String()
}

func (s *DescribeMetricMetaListResponseBodyResourcesResource) SetDescription(v string) *DescribeMetricMetaListResponseBodyResourcesResource {
	s.Description = &v
	return s
}

func (s *DescribeMetricMetaListResponseBodyResourcesResource) SetDimensions(v string) *DescribeMetricMetaListResponseBodyResourcesResource {
	s.Dimensions = &v
	return s
}

func (s *DescribeMetricMetaListResponseBodyResourcesResource) SetLabels(v string) *DescribeMetricMetaListResponseBodyResourcesResource {
	s.Labels = &v
	return s
}

func (s *DescribeMetricMetaListResponseBodyResourcesResource) SetMetricName(v string) *DescribeMetricMetaListResponseBodyResourcesResource {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricMetaListResponseBodyResourcesResource) SetNamespace(v string) *DescribeMetricMetaListResponseBodyResourcesResource {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricMetaListResponseBodyResourcesResource) SetPeriods(v string) *DescribeMetricMetaListResponseBodyResourcesResource {
	s.Periods = &v
	return s
}

func (s *DescribeMetricMetaListResponseBodyResourcesResource) SetStatistics(v string) *DescribeMetricMetaListResponseBodyResourcesResource {
	s.Statistics = &v
	return s
}

func (s *DescribeMetricMetaListResponseBodyResourcesResource) SetUnit(v string) *DescribeMetricMetaListResponseBodyResourcesResource {
	s.Unit = &v
	return s
}

type DescribeMetricMetaListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricMetaListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricMetaListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricMetaListResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricMetaListResponse) SetHeaders(v map[string]*string) *DescribeMetricMetaListResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricMetaListResponse) SetStatusCode(v int32) *DescribeMetricMetaListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricMetaListResponse) SetBody(v *DescribeMetricMetaListResponseBody) *DescribeMetricMetaListResponse {
	s.Body = v
	return s
}

type DescribeMetricRuleBlackListRequest struct {
	// The ID of the blacklist policy.
	//
	// example:
	//
	// ecs
	Category *string   `json:"Category,omitempty" xml:"Category,omitempty"`
	Ids      []*string `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The IDs of the instances in the blacklist policy.
	//
	// Valid values of N: 0 to 10.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The status of the blacklist policy. Valid values:
	//
	// 	- true: The blacklist policy is enabled.
	//
	// 	- false: The blacklist policy is disabled.
	//
	// example:
	//
	// true
	IsEnable *bool `json:"IsEnable,omitempty" xml:"IsEnable,omitempty"`
	// The name of the blacklist policy.
	//
	// This parameter supports fuzzy match.
	//
	// example:
	//
	// Blacklist-01
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The timestamp when the blacklist policy expired.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// DESC
	Order *int32 `json:"Order,omitempty" xml:"Order,omitempty"`
	// The name of the metric.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The categories of the Alibaba Cloud service. For example, ApsaraDB for Redis includes the following categories: ApsaraDB for Redis (standard architecture), ApsaraDB for Redis (cluster architecture), and ApsaraDB for Redis (read/write splitting architecture). In this case, the valid values of this parameter for ApsaraDB for Redis include `kvstore_standard`, `kvstore_sharding`, and `kvstore_splitrw`.
	//
	// example:
	//
	// 100
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The effective scope of the blacklist policy. Valid values:
	//
	// 	- USER: The blacklist policy takes effect only within the current Alibaba Cloud account.
	//
	// 	- GROUP: The blacklist policy takes effect only within the specified application group.
	//
	// example:
	//
	// USER
	ScopeType *string `json:"ScopeType,omitempty" xml:"ScopeType,omitempty"`
}

func (s DescribeMetricRuleBlackListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleBlackListRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleBlackListRequest) SetCategory(v string) *DescribeMetricRuleBlackListRequest {
	s.Category = &v
	return s
}

func (s *DescribeMetricRuleBlackListRequest) SetIds(v []*string) *DescribeMetricRuleBlackListRequest {
	s.Ids = v
	return s
}

func (s *DescribeMetricRuleBlackListRequest) SetInstanceIds(v []*string) *DescribeMetricRuleBlackListRequest {
	s.InstanceIds = v
	return s
}

func (s *DescribeMetricRuleBlackListRequest) SetIsEnable(v bool) *DescribeMetricRuleBlackListRequest {
	s.IsEnable = &v
	return s
}

func (s *DescribeMetricRuleBlackListRequest) SetName(v string) *DescribeMetricRuleBlackListRequest {
	s.Name = &v
	return s
}

func (s *DescribeMetricRuleBlackListRequest) SetNamespace(v string) *DescribeMetricRuleBlackListRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricRuleBlackListRequest) SetOrder(v int32) *DescribeMetricRuleBlackListRequest {
	s.Order = &v
	return s
}

func (s *DescribeMetricRuleBlackListRequest) SetPageNumber(v int32) *DescribeMetricRuleBlackListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMetricRuleBlackListRequest) SetPageSize(v int32) *DescribeMetricRuleBlackListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMetricRuleBlackListRequest) SetRegionId(v string) *DescribeMetricRuleBlackListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMetricRuleBlackListRequest) SetScopeType(v string) *DescribeMetricRuleBlackListRequest {
	s.ScopeType = &v
	return s
}

type DescribeMetricRuleBlackListResponseBody struct {
	// The categories of the Alibaba Cloud service. For example, ApsaraDB for Redis includes the following categories: ApsaraDB for Redis (standard architecture), ApsaraDB for Redis (cluster architecture), and ApsaraDB for Redis (read/write splitting architecture). In this case, the valid values of this parameter for ApsaraDB for Redis include `kvstore_standard`, `kvstore_sharding`, and `kvstore_splitrw`.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The queried blacklist policies.
	DescribeMetricRuleBlackList []*DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList `json:"DescribeMetricRuleBlackList,omitempty" xml:"DescribeMetricRuleBlackList,omitempty" type:"Repeated"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The namespace of the cloud service.
	//
	// example:
	//
	// D63E76CB-29AA-5B9F-88CE-400A6F28D428
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of different cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The timestamp when the blacklist policy was created.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMetricRuleBlackListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleBlackListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleBlackListResponseBody) SetCode(v string) *DescribeMetricRuleBlackListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBody) SetDescribeMetricRuleBlackList(v []*DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) *DescribeMetricRuleBlackListResponseBody {
	s.DescribeMetricRuleBlackList = v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBody) SetMessage(v string) *DescribeMetricRuleBlackListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBody) SetRequestId(v string) *DescribeMetricRuleBlackListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBody) SetSuccess(v bool) *DescribeMetricRuleBlackListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBody) SetTotal(v int32) *DescribeMetricRuleBlackListResponseBody {
	s.Total = &v
	return s
}

type DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList struct {
	// The category of the cloud service. For example, ApsaraDB for Redis includes the following categories: ApsaraDB for Redis (standard architecture), ApsaraDB for Redis (cluster architecture), and ApsaraDB for Redis (read/write splitting architecture). In this case, the valid values of this parameter for ApsaraDB for Redis include `kvstore_standard`, `kvstore_sharding`, and `kvstore_splitrw`.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The timestamp when the blacklist policy was created.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1665714561000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time range within which the blacklist policy is effective.
	//
	// example:
	//
	// 00:00-23:59
	EffectiveTime *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	// The timestamp when the blacklist policy started to take effect.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1640608200000
	EnableEndTime *int64 `json:"EnableEndTime,omitempty" xml:"EnableEndTime,omitempty"`
	// The timestamp when the blacklist policy expired.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1640237400000
	EnableStartTime *int64 `json:"EnableStartTime,omitempty" xml:"EnableStartTime,omitempty"`
	// The ID of the blacklist policy.
	//
	// example:
	//
	// 93514c96-ceb8-47d8-8ee3-93b6d98b****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The IDs of the instances that belong to the specified cloud service.
	Instances []*string `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// The status of the blacklist policy. Valid values:
	//
	// 	- true: The blacklist policy is enabled.
	//
	// 	- false: The blacklist policy is disabled.
	//
	// example:
	//
	// true
	IsEnable *bool `json:"IsEnable,omitempty" xml:"IsEnable,omitempty"`
	// The metrics of the instance.
	Metrics []*DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackListMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	// The name of the blacklist policy.
	//
	// example:
	//
	// Blacklist-01
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace of the cloud service.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The effective scope of the blacklist policy. Valid values:
	//
	// 	- USER: The blacklist policy takes effect only within the current Alibaba Cloud account.
	//
	// 	- GROUP: The blacklist policy takes effect only within the specified application group.
	//
	// example:
	//
	// USER
	ScopeType *string `json:"ScopeType,omitempty" xml:"ScopeType,omitempty"`
	// The IDs of the application groups.
	ScopeValue []*string `json:"ScopeValue,omitempty" xml:"ScopeValue,omitempty" type:"Repeated"`
	// The timestamp when the blacklist policy was modified.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1665718373000
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetCategory(v string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.Category = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetCreateTime(v string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.CreateTime = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetEffectiveTime(v string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.EffectiveTime = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetEnableEndTime(v int64) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.EnableEndTime = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetEnableStartTime(v int64) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.EnableStartTime = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetId(v string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.Id = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetInstances(v []*string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.Instances = v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetIsEnable(v bool) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.IsEnable = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetMetrics(v []*DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackListMetrics) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.Metrics = v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetName(v string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.Name = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetNamespace(v string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetScopeType(v string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.ScopeType = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetScopeValue(v []*string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.ScopeValue = v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList) SetUpdateTime(v string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackList {
	s.UpdateTime = &v
	return s
}

type DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackListMetrics struct {
	// The metric name.
	//
	// example:
	//
	// disk_utilization
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The extended dimension of the instance. For example, `{"device":"C:"}` specifies that the blacklist policy is applied to all C disks of the specified Elastic Compute Service (ECS) instance.
	//
	// example:
	//
	// [{"device":"C:"}]
	Resource *string `json:"Resource,omitempty" xml:"Resource,omitempty"`
}

func (s DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackListMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackListMetrics) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackListMetrics) SetMetricName(v string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackListMetrics {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackListMetrics) SetResource(v string) *DescribeMetricRuleBlackListResponseBodyDescribeMetricRuleBlackListMetrics {
	s.Resource = &v
	return s
}

type DescribeMetricRuleBlackListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricRuleBlackListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricRuleBlackListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleBlackListResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleBlackListResponse) SetHeaders(v map[string]*string) *DescribeMetricRuleBlackListResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricRuleBlackListResponse) SetStatusCode(v int32) *DescribeMetricRuleBlackListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricRuleBlackListResponse) SetBody(v *DescribeMetricRuleBlackListResponseBody) *DescribeMetricRuleBlackListResponse {
	s.Body = v
	return s
}

type DescribeMetricRuleCountRequest struct {
	// The metric name. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMetricRuleCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleCountRequest) SetMetricName(v string) *DescribeMetricRuleCountRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricRuleCountRequest) SetNamespace(v string) *DescribeMetricRuleCountRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricRuleCountRequest) SetRegionId(v string) *DescribeMetricRuleCountRequest {
	s.RegionId = &v
	return s
}

type DescribeMetricRuleCountResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The number of alert rules in each state.
	MetricRuleCount *DescribeMetricRuleCountResponseBodyMetricRuleCount `json:"MetricRuleCount,omitempty" xml:"MetricRuleCount,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// FF38D33A-67C1-40EB-AB65-FAEE51EDB644
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMetricRuleCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleCountResponseBody) SetCode(v string) *DescribeMetricRuleCountResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricRuleCountResponseBody) SetMessage(v string) *DescribeMetricRuleCountResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricRuleCountResponseBody) SetMetricRuleCount(v *DescribeMetricRuleCountResponseBodyMetricRuleCount) *DescribeMetricRuleCountResponseBody {
	s.MetricRuleCount = v
	return s
}

func (s *DescribeMetricRuleCountResponseBody) SetRequestId(v string) *DescribeMetricRuleCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricRuleCountResponseBody) SetSuccess(v bool) *DescribeMetricRuleCountResponseBody {
	s.Success = &v
	return s
}

type DescribeMetricRuleCountResponseBodyMetricRuleCount struct {
	// The number of alert rules with active alerts.
	//
	// example:
	//
	// 5
	Alarm *int32 `json:"Alarm,omitempty" xml:"Alarm,omitempty"`
	// The number of disabled alert rules.
	//
	// example:
	//
	// 0
	Disable *int32 `json:"Disable,omitempty" xml:"Disable,omitempty"`
	// The number of alert rules without data.
	//
	// example:
	//
	// 0
	Nodata *int32 `json:"Nodata,omitempty" xml:"Nodata,omitempty"`
	// The number of alert rules without active alerts.
	//
	// example:
	//
	// 40
	Ok *int32 `json:"Ok,omitempty" xml:"Ok,omitempty"`
	// The total number of alert rules.
	//
	// example:
	//
	// 45
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMetricRuleCountResponseBodyMetricRuleCount) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleCountResponseBodyMetricRuleCount) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleCountResponseBodyMetricRuleCount) SetAlarm(v int32) *DescribeMetricRuleCountResponseBodyMetricRuleCount {
	s.Alarm = &v
	return s
}

func (s *DescribeMetricRuleCountResponseBodyMetricRuleCount) SetDisable(v int32) *DescribeMetricRuleCountResponseBodyMetricRuleCount {
	s.Disable = &v
	return s
}

func (s *DescribeMetricRuleCountResponseBodyMetricRuleCount) SetNodata(v int32) *DescribeMetricRuleCountResponseBodyMetricRuleCount {
	s.Nodata = &v
	return s
}

func (s *DescribeMetricRuleCountResponseBodyMetricRuleCount) SetOk(v int32) *DescribeMetricRuleCountResponseBodyMetricRuleCount {
	s.Ok = &v
	return s
}

func (s *DescribeMetricRuleCountResponseBodyMetricRuleCount) SetTotal(v int32) *DescribeMetricRuleCountResponseBodyMetricRuleCount {
	s.Total = &v
	return s
}

type DescribeMetricRuleCountResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricRuleCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricRuleCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleCountResponse) SetHeaders(v map[string]*string) *DescribeMetricRuleCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricRuleCountResponse) SetStatusCode(v int32) *DescribeMetricRuleCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricRuleCountResponse) SetBody(v *DescribeMetricRuleCountResponseBody) *DescribeMetricRuleCountResponse {
	s.Body = v
	return s
}

type DescribeMetricRuleListRequest struct {
	// The status of the alert rule. Valid values:
	//
	// 	- OK: The alert rule has no active alerts.
	//
	// 	- ALARM: The alert rule has active alerts.
	//
	// 	- INSUFFICIENT_DATA: No data is available.
	//
	// example:
	//
	// OK
	AlertState *string `json:"AlertState,omitempty" xml:"AlertState,omitempty"`
	// The monitoring dimensions of the specified resource.
	//
	// Set the value to a collection of `key:value` pairs. Example: `{"userId":"120886317861****"}` or `{"instanceId":"i-2ze2d6j5uhg20x47****"}`.
	//
	// example:
	//
	// {"instanceId":"i-2ze2d6j5uhg20x47****"}
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// Specifies whether to query enabled or disabled alert rules. Valid values:
	//
	// 	- true: queries enabled alert rules.
	//
	// 	- false: queries disabled alert rules.
	//
	// example:
	//
	// true
	EnableState *bool `json:"EnableState,omitempty" xml:"EnableState,omitempty"`
	// The ID of the application group.
	//
	// For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// example:
	//
	// 7301****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the metric.
	//
	// For information about how to obtain the name of a metric, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// For information about how to obtain the namespace of a cloud service, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The page number of the page to return.
	//
	// Minimum value: 1. Default value: 1.
	//
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries to return on each page.
	//
	// Minimum value: 1. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert rule. You can specify up to 20 IDs at a time. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// applyTemplate344cfd42-0f32-4fd6-805a-88d7908a****
	RuleIds *string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty"`
	// The name of the alert rule.
	//
	// This parameter supports fuzzy match.
	//
	// example:
	//
	// Rule_01
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
}

func (s DescribeMetricRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListRequest) SetAlertState(v string) *DescribeMetricRuleListRequest {
	s.AlertState = &v
	return s
}

func (s *DescribeMetricRuleListRequest) SetDimensions(v string) *DescribeMetricRuleListRequest {
	s.Dimensions = &v
	return s
}

func (s *DescribeMetricRuleListRequest) SetEnableState(v bool) *DescribeMetricRuleListRequest {
	s.EnableState = &v
	return s
}

func (s *DescribeMetricRuleListRequest) SetGroupId(v string) *DescribeMetricRuleListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeMetricRuleListRequest) SetMetricName(v string) *DescribeMetricRuleListRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricRuleListRequest) SetNamespace(v string) *DescribeMetricRuleListRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricRuleListRequest) SetPage(v int32) *DescribeMetricRuleListRequest {
	s.Page = &v
	return s
}

func (s *DescribeMetricRuleListRequest) SetPageSize(v int32) *DescribeMetricRuleListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMetricRuleListRequest) SetRegionId(v string) *DescribeMetricRuleListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMetricRuleListRequest) SetRuleIds(v string) *DescribeMetricRuleListRequest {
	s.RuleIds = &v
	return s
}

func (s *DescribeMetricRuleListRequest) SetRuleName(v string) *DescribeMetricRuleListRequest {
	s.RuleName = &v
	return s
}

type DescribeMetricRuleListResponseBody struct {
	// The alert rules.
	Alarms *DescribeMetricRuleListResponseBodyAlarms `json:"Alarms,omitempty" xml:"Alarms,omitempty" type:"Struct"`
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call is successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 386C6712-335F-5054-930A-CC92B851ECBA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. Valid values:
	//
	// 	- true: The call is successful.
	//
	// 	- false: The call fails.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 1
	Total *string `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMetricRuleListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBody) SetAlarms(v *DescribeMetricRuleListResponseBodyAlarms) *DescribeMetricRuleListResponseBody {
	s.Alarms = v
	return s
}

func (s *DescribeMetricRuleListResponseBody) SetCode(v int32) *DescribeMetricRuleListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricRuleListResponseBody) SetMessage(v string) *DescribeMetricRuleListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricRuleListResponseBody) SetRequestId(v string) *DescribeMetricRuleListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricRuleListResponseBody) SetSuccess(v bool) *DescribeMetricRuleListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMetricRuleListResponseBody) SetTotal(v string) *DescribeMetricRuleListResponseBody {
	s.Total = &v
	return s
}

type DescribeMetricRuleListResponseBodyAlarms struct {
	Alarm []*DescribeMetricRuleListResponseBodyAlarmsAlarm `json:"Alarm,omitempty" xml:"Alarm,omitempty" type:"Repeated"`
}

func (s DescribeMetricRuleListResponseBodyAlarms) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarms) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarms) SetAlarm(v []*DescribeMetricRuleListResponseBodyAlarmsAlarm) *DescribeMetricRuleListResponseBodyAlarms {
	s.Alarm = v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarm struct {
	// The status of the alert rule. Valid values:
	//
	// 	- OK: The alert rule has no active alerts.
	//
	// 	- ALARM: The alert rule has active alerts.
	//
	// 	- INSUFFICIENT_DATA: No data is available.
	//
	// example:
	//
	// OK
	AlertState *string `json:"AlertState,omitempty" xml:"AlertState,omitempty"`
	// The trigger conditions for multiple metrics.
	//
	// >  The trigger conditions for a single metric and multiple metrics are mutually exclusive. You cannot specify trigger conditions for a single metric and multiple metrics at the same time.
	CompositeExpression *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression `json:"CompositeExpression,omitempty" xml:"CompositeExpression,omitempty" type:"Struct"`
	// The alert contact group.
	//
	// example:
	//
	// ECS_Alarm
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The dimensions of the alert rule.
	//
	// example:
	//
	// [{"instanceId":"i-2ze2d6j5uhg20x47****"}]
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The time period during which the alert rule is effective.
	//
	// example:
	//
	// 05:31-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// Indicates whether the alert rule is enabled. Valid values:
	//
	// 	- true: The alert rule is enabled.
	//
	// 	- false: The alert rule is disabled.
	//
	// example:
	//
	// true
	EnableState *bool `json:"EnableState,omitempty" xml:"EnableState,omitempty"`
	// The conditions for triggering different levels of alerts.
	Escalations *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Struct"`
	// The ID of the application group.
	//
	// example:
	//
	// 7301****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the application group.
	//
	// >  If the alert rule is associated with an application group, the name of the application group is returned in this parameter.
	//
	// example:
	//
	// ECS_Group
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The tags of the alert rule.
	Labels *DescribeMetricRuleListResponseBodyAlarmsAlarmLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Struct"`
	// The subject of the alert notification email.
	//
	// example:
	//
	// "${serviceType}-${metricName}-${levelDescription}Notification(${dimensions})"
	MailSubject *string `json:"MailSubject,omitempty" xml:"MailSubject,omitempty"`
	// The name of the metric.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The method that is used to handle alerts when no monitoring data is found. Valid values:
	//
	// 	- KEEP_LAST_STATE (default value): No operation is performed.
	//
	// 	- INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
	//
	// 	- OK: The status is considered normal.
	//
	// example:
	//
	// KEEP_LAST_STATE
	NoDataPolicy *string `json:"NoDataPolicy,omitempty" xml:"NoDataPolicy,omitempty"`
	// The time period during which the alert rule is ineffective.
	//
	// example:
	//
	// 00:00-05:30
	NoEffectiveInterval *string `json:"NoEffectiveInterval,omitempty" xml:"NoEffectiveInterval,omitempty"`
	// The statistical period.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The Prometheus alerts.
	//
	// >  This parameter is required only if you create a Prometheus alert rule for Hybrid Cloud Monitoring.
	Prometheus *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus `json:"Prometheus,omitempty" xml:"Prometheus,omitempty" type:"Struct"`
	// The resources that are associated with the alert rule.
	//
	// example:
	//
	// [{\\"instanceId\\":\\"i-2ze2d6j5uhg20x47****\\"}]
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// applyTemplate344cfd42-0f32-4fd6-805a-88d7908a****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// Rule_01
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which new alert notifications are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400. Minimum value: 3600.
	//
	// Only one alert is reported during each mute period even if the metric value consecutively exceeds the alert rule threshold several times.
	//
	// example:
	//
	// 86400
	SilenceTime *int32 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The type of the alert rule. Valid value: METRIC. This value indicates an alert rule for time series metrics.
	//
	// example:
	//
	// METRIC
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	// The callback URL. CloudMonitor pushes an alert notification to the specified callback URL by sending an HTTP POST request. Only the HTTP protocol is supported.
	//
	// example:
	//
	// https://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarm) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarm) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetAlertState(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.AlertState = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetCompositeExpression(v *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.CompositeExpression = v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetContactGroups(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.ContactGroups = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetDimensions(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.Dimensions = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetEffectiveInterval(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.EffectiveInterval = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetEnableState(v bool) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.EnableState = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetEscalations(v *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.Escalations = v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetGroupId(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.GroupId = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetGroupName(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.GroupName = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetLabels(v *DescribeMetricRuleListResponseBodyAlarmsAlarmLabels) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.Labels = v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetMailSubject(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.MailSubject = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetMetricName(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetNamespace(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetNoDataPolicy(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.NoDataPolicy = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetNoEffectiveInterval(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.NoEffectiveInterval = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetPeriod(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.Period = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetPrometheus(v *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.Prometheus = v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetResources(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.Resources = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetRuleId(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.RuleId = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetRuleName(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.RuleName = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetSilenceTime(v int32) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.SilenceTime = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetSourceType(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.SourceType = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarm) SetWebhook(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarm {
	s.Webhook = &v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression struct {
	// The trigger conditions that are created in standard mode.
	ExpressionList *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionList `json:"ExpressionList,omitempty" xml:"ExpressionList,omitempty" type:"Struct"`
	// The relationship between the trigger conditions for multiple metrics. Valid values:
	//
	// 	- `&&`: An alert is triggered only if all metrics meet the trigger conditions. An alert is triggered only if the results of all expressions specified in the ExpressionList parameter are `true`.
	//
	// 	- `||`: An alert is triggered if one of the metrics meets the trigger conditions.
	//
	// example:
	//
	// ||
	ExpressionListJoin *string `json:"ExpressionListJoin,omitempty" xml:"ExpressionListJoin,omitempty"`
	// The trigger conditions that are created by using expressions. You can use expressions to create trigger conditions in the following scenarios:
	//
	// 	- Set an alert blacklist for specific resources. For example, if you specify `$instanceId != \\"i-io8kfvcpp7x5****\\" ``&&`` $Average > 50`, no alert is triggered when the `average metric value` of the `i-io8kfvcpp7x5****` instance exceeds 50.
	//
	// 	- Set a special alert threshold for a specified instance in the rule. For example, if you specify `$Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)`, an alert is triggered when the `average metric value` of the `i-io8kfvcpp7x5****` instance exceeds 80 or the `average metric value` of other instances exceeds 50.
	//
	// 	- Limit the number of instances whose metric values exceed the threshold. For example, if you specify `count($Average > 20) > 3`, an alert is triggered only when the number of instances whose `average metric value` exceeds 20 exceeds three.
	//
	// example:
	//
	// $Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)
	ExpressionRaw *string `json:"ExpressionRaw,omitempty" xml:"ExpressionRaw,omitempty"`
	// The alert level. Valid values:
	//
	// 	- CRITICAL
	//
	// 	- WARN
	//
	// 	- INFO
	//
	// example:
	//
	// Critical
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The number of consecutive triggers. If the number of times that the metric values meet the trigger conditions reaches the value of this parameter, CloudMonitor sends alert notifications.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression) SetExpressionList(v *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionList) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression {
	s.ExpressionList = v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression) SetExpressionListJoin(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression {
	s.ExpressionListJoin = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression) SetExpressionRaw(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression {
	s.ExpressionRaw = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression) SetLevel(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression {
	s.Level = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression) SetTimes(v int32) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpression {
	s.Times = &v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionList struct {
	ExpressionList []*DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList `json:"ExpressionList,omitempty" xml:"ExpressionList,omitempty" type:"Repeated"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionList) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionList) SetExpressionList(v []*DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionList {
	s.ExpressionList = v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList struct {
	// The operator that is used to compare the metric value with the threshold. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The metric that is used to monitor the cloud service.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The aggregation period of the metric.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 60
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The statistical method of the metric. Valid values:
	//
	// 	- $Maximum: the maximum value
	//
	// 	- $Minimum: the minimum value
	//
	// 	- $Average: the average value
	//
	// 	- $Availability: the availability rate (usually used for site monitoring)
	//
	// >  `$` is the prefix of the metric. For information about the Alibaba Cloud services that are supported by CloudMonitor, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// $Maximum
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The alert threshold.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList) SetComparisonOperator(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList) SetMetricName(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList) SetPeriod(v int32) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList {
	s.Period = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList) SetStatistics(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList {
	s.Statistics = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList) SetThreshold(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmCompositeExpressionExpressionListExpressionList {
	s.Threshold = &v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations struct {
	// The conditions for triggering Critical-level alerts.
	Critical *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	// The conditions for triggering Info-level alerts.
	Info *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	// The conditions for triggering Warn-level alerts.
	Warn *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn `json:"Warn,omitempty" xml:"Warn,omitempty" type:"Struct"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations) SetCritical(v *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations {
	s.Critical = v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations) SetInfo(v *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations {
	s.Info = v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations) SetWarn(v *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalations {
	s.Warn = v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical struct {
	// The comparison operator that is used to compare the metric value with the threshold. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The additional conditions for triggering Critical-level alerts. The additional conditions take effect when the value of the ComparisonOperator parameter is GreaterThanYesterday, LessThanYesterday, GreaterThanLastWeek, LessThanLastWeek, GreaterThanLastPeriod, or LessThanLastPeriod.
	//
	// For example, the values of the PreCondition, ComparisonOperator, and Threshold parameters are set to $Average>80, GreaterThanYesterday, and 10, respectively. An alert is triggered only when the average metric value is greater than 80 and 10% greater than the average metric value at the same time yesterday.
	//
	// >  $Average is a placeholder that consists of `a dollar sign ($) and the statistical method`. CloudMonitor replaces the placeholder with the aggregated value or original value before value comparison.
	//
	// example:
	//
	// $Average>80
	PreCondition *string `json:"PreCondition,omitempty" xml:"PreCondition,omitempty"`
	// The statistical methods for Critical-level alerts.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Critical-level alerts.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Critical-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical) SetComparisonOperator(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical) SetPreCondition(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical {
	s.PreCondition = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical) SetStatistics(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical {
	s.Statistics = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical) SetThreshold(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical {
	s.Threshold = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical) SetTimes(v int32) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsCritical {
	s.Times = &v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo struct {
	// The comparison operator that is used to compare the metric value with the threshold. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The additional conditions for triggering Info-level alerts. The additional conditions take effect when the value of the ComparisonOperator parameter is GreaterThanYesterday, LessThanYesterday, GreaterThanLastWeek, LessThanLastWeek, GreaterThanLastPeriod, or LessThanLastPeriod.
	//
	// For example, the values of the PreCondition, ComparisonOperator, and Threshold parameters are set to $Average>80, GreaterThanYesterday, and 10, respectively. An alert is triggered only when the average metric value is greater than 80 and 10% greater than the average metric value at the same time yesterday.
	//
	// >  $Average is a placeholder that consists of `a dollar sign ($) and the statistical method`. CloudMonitor replaces the placeholder with the aggregated value or original value before value comparison.
	//
	// example:
	//
	// $Average>80
	PreCondition *string `json:"PreCondition,omitempty" xml:"PreCondition,omitempty"`
	// The statistical methods for Info-level alerts.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Info-level alerts.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an Info-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo) SetComparisonOperator(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo) SetPreCondition(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo {
	s.PreCondition = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo) SetStatistics(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo {
	s.Statistics = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo) SetThreshold(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo {
	s.Threshold = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo) SetTimes(v int32) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsInfo {
	s.Times = &v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn struct {
	// The comparison operator that is used to compare the metric value with the threshold. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The additional conditions for triggering Warn-level alerts. The additional conditions take effect when the value of the ComparisonOperator parameter is GreaterThanYesterday, LessThanYesterday, GreaterThanLastWeek, LessThanLastWeek, GreaterThanLastPeriod, or LessThanLastPeriod.
	//
	// For example, the values of the PreCondition, ComparisonOperator, and Threshold parameters are set to $Average>80, GreaterThanYesterday, and 10, respectively. An alert is triggered only when the average metric value is greater than 80 and 10% greater than the average metric value at the same time yesterday.
	//
	// >  $Average is a placeholder that consists of `a dollar sign ($) and the statistical method`. CloudMonitor replaces the placeholder with the aggregated value or original value before value comparison.
	//
	// example:
	//
	// $Average>80
	PreCondition *string `json:"PreCondition,omitempty" xml:"PreCondition,omitempty"`
	// The statistical methods for Warn-level alerts.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Warn-level alerts.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Warn-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn) SetComparisonOperator(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn) SetPreCondition(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn {
	s.PreCondition = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn) SetStatistics(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn {
	s.Statistics = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn) SetThreshold(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn {
	s.Threshold = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn) SetTimes(v int32) *DescribeMetricRuleListResponseBodyAlarmsAlarmEscalationsWarn {
	s.Times = &v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmLabels struct {
	Labels []*DescribeMetricRuleListResponseBodyAlarmsAlarmLabelsLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmLabels) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmLabels) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmLabels) SetLabels(v []*DescribeMetricRuleListResponseBodyAlarmsAlarmLabelsLabels) *DescribeMetricRuleListResponseBodyAlarmsAlarmLabels {
	s.Labels = v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmLabelsLabels struct {
	// The tag key of the alert rule.
	//
	// example:
	//
	// cmsRuleKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the alert rule.
	//
	// example:
	//
	// cmsRuleValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmLabelsLabels) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmLabelsLabels) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmLabelsLabels) SetKey(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmLabelsLabels {
	s.Key = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmLabelsLabels) SetValue(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmLabelsLabels {
	s.Value = &v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus struct {
	// The annotations of the Prometheus alert rule. When a Prometheus alert is triggered, the system renders the annotated keys and values to help you understand the metrics and alert rule.
	//
	// >  This parameter is equivalent to the annotations parameter of open source Prometheus.
	Annotations *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Struct"`
	// The alert level. Valid values:
	//
	// 	- CRITICAL
	//
	// 	- WARN
	//
	// 	- INFO
	//
	// example:
	//
	// Critical
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The PromQL query statement.
	//
	// >  The data obtained by using the PromQL query statement is the monitoring data. You must include the alert threshold in this statement.
	//
	// example:
	//
	// CpuUsage{instanceId="xxxx"}[1m]>90
	PromQL *string `json:"PromQL,omitempty" xml:"PromQL,omitempty"`
	// The number of consecutive triggers. If the number of times that the metric values meet the trigger conditions reaches the value of this parameter, CloudMonitor sends alert notifications.
	//
	// example:
	//
	// 3
	Times *int64 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus) SetAnnotations(v *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotations) *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus {
	s.Annotations = v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus) SetLevel(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus {
	s.Level = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus) SetPromQL(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus {
	s.PromQL = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus) SetTimes(v int64) *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheus {
	s.Times = &v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotations struct {
	Annotations []*DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotationsAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Repeated"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotations) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotations) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotations) SetAnnotations(v []*DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotationsAnnotations) *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotations {
	s.Annotations = v
	return s
}

type DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotationsAnnotations struct {
	// The key of the annotation.
	//
	// example:
	//
	// summary
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the annotation.
	//
	// example:
	//
	// {{ $labels.instance }} CPU usage above 10% {current value: {{ humanizePercentage $value }} }
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotationsAnnotations) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotationsAnnotations) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotationsAnnotations) SetKey(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotationsAnnotations {
	s.Key = &v
	return s
}

func (s *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotationsAnnotations) SetValue(v string) *DescribeMetricRuleListResponseBodyAlarmsAlarmPrometheusAnnotationsAnnotations {
	s.Value = &v
	return s
}

type DescribeMetricRuleListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricRuleListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleListResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleListResponse) SetHeaders(v map[string]*string) *DescribeMetricRuleListResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricRuleListResponse) SetStatusCode(v int32) *DescribeMetricRuleListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricRuleListResponse) SetBody(v *DescribeMetricRuleListResponseBody) *DescribeMetricRuleListResponse {
	s.Body = v
	return s
}

type DescribeMetricRuleTargetsRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert rule.
	//
	// For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ae06917_75a8c43178ab66****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribeMetricRuleTargetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTargetsRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTargetsRequest) SetRegionId(v string) *DescribeMetricRuleTargetsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMetricRuleTargetsRequest) SetRuleId(v string) *DescribeMetricRuleTargetsRequest {
	s.RuleId = &v
	return s
}

type DescribeMetricRuleTargetsResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// User not authorized to operate on the specified resource.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 786E92D2-AC66-4250-B76F-F1E2FCDDBA1C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The information about the resource for which alerts are triggered.
	Targets *DescribeMetricRuleTargetsResponseBodyTargets `json:"Targets,omitempty" xml:"Targets,omitempty" type:"Struct"`
}

func (s DescribeMetricRuleTargetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTargetsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTargetsResponseBody) SetCode(v string) *DescribeMetricRuleTargetsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricRuleTargetsResponseBody) SetMessage(v string) *DescribeMetricRuleTargetsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricRuleTargetsResponseBody) SetRequestId(v string) *DescribeMetricRuleTargetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricRuleTargetsResponseBody) SetSuccess(v bool) *DescribeMetricRuleTargetsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMetricRuleTargetsResponseBody) SetTargets(v *DescribeMetricRuleTargetsResponseBodyTargets) *DescribeMetricRuleTargetsResponseBody {
	s.Targets = v
	return s
}

type DescribeMetricRuleTargetsResponseBodyTargets struct {
	Target []*DescribeMetricRuleTargetsResponseBodyTargetsTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Repeated"`
}

func (s DescribeMetricRuleTargetsResponseBodyTargets) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTargetsResponseBodyTargets) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTargetsResponseBodyTargets) SetTarget(v []*DescribeMetricRuleTargetsResponseBodyTargetsTarget) *DescribeMetricRuleTargetsResponseBodyTargets {
	s.Target = v
	return s
}

type DescribeMetricRuleTargetsResponseBodyTargetsTarget struct {
	// The Alibaba Cloud Resource Name (ARN) of the resource. Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:
	//
	// 	- {Service name abbreviation}: the abbreviation of the service name. Valid value: mns.
	//
	// 	- {userId}: the ID of the Alibaba Cloud account.
	//
	// 	- {regionId}: the region ID of the message queue or topic.
	//
	// 	- {Resource type}`: the type of the resource for which alerts are triggered. Valid values: - **queues*	- - **topics*	- {Resource name}: the name of the resource. - If the resource type is set to **queues**, the resource name is the name of the message queue. - If the resource type is set to **topics**, the resource name is the name of the topic.`
	//
	// example:
	//
	// acs:mns:cn-hangzhou:120886317861****:/queues/test/message
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the resource for which alerts are triggered.
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The parameters of the alert callback. The parameters are in the JSON format.
	//
	// example:
	//
	// {"customField1":"value1","customField2":"$.name"}
	JsonParams *string `json:"JsonParams,omitempty" xml:"JsonParams,omitempty"`
	// The level of the alert. Valid values:
	//
	// 	- INFO: information
	//
	// 	- WARN: warning
	//
	// 	- CRITICAL: critical
	//
	// example:
	//
	// ["INFO", "WARN", "CRITICAL"]
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s DescribeMetricRuleTargetsResponseBodyTargetsTarget) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTargetsResponseBodyTargetsTarget) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTargetsResponseBodyTargetsTarget) SetArn(v string) *DescribeMetricRuleTargetsResponseBodyTargetsTarget {
	s.Arn = &v
	return s
}

func (s *DescribeMetricRuleTargetsResponseBodyTargetsTarget) SetId(v string) *DescribeMetricRuleTargetsResponseBodyTargetsTarget {
	s.Id = &v
	return s
}

func (s *DescribeMetricRuleTargetsResponseBodyTargetsTarget) SetJsonParams(v string) *DescribeMetricRuleTargetsResponseBodyTargetsTarget {
	s.JsonParams = &v
	return s
}

func (s *DescribeMetricRuleTargetsResponseBodyTargetsTarget) SetLevel(v string) *DescribeMetricRuleTargetsResponseBodyTargetsTarget {
	s.Level = &v
	return s
}

type DescribeMetricRuleTargetsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricRuleTargetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricRuleTargetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTargetsResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTargetsResponse) SetHeaders(v map[string]*string) *DescribeMetricRuleTargetsResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricRuleTargetsResponse) SetStatusCode(v int32) *DescribeMetricRuleTargetsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricRuleTargetsResponse) SetBody(v *DescribeMetricRuleTargetsResponseBody) *DescribeMetricRuleTargetsResponse {
	s.Body = v
	return s
}

type DescribeMetricRuleTemplateAttributeRequest struct {
	// The name of the alert template. You must specify at least one of the `Name` and `TemplateId` parameters.
	//
	// For information about how to obtain the name of an alert template, see [DescribeMetricRuleTemplateList](https://help.aliyun.com/document_detail/114982.html).
	//
	// example:
	//
	// ECS_Template1
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert template. You must specify at least one of the `Name` and `TemplateId` parameters.
	//
	// For information about how to obtain the ID of an alert template, see [DescribeMetricRuleTemplateList](https://help.aliyun.com/document_detail/114982.html).
	//
	// example:
	//
	// 70****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DescribeMetricRuleTemplateAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeRequest) SetName(v string) *DescribeMetricRuleTemplateAttributeRequest {
	s.Name = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeRequest) SetRegionId(v string) *DescribeMetricRuleTemplateAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeRequest) SetTemplateId(v string) *DescribeMetricRuleTemplateAttributeRequest {
	s.TemplateId = &v
	return s
}

type DescribeMetricRuleTemplateAttributeResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 8F3A82AD-DA92-52B0-8EC6-C059D1C3839F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the alert template.
	Resource *DescribeMetricRuleTemplateAttributeResponseBodyResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMetricRuleTemplateAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponseBody) SetCode(v int32) *DescribeMetricRuleTemplateAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBody) SetMessage(v string) *DescribeMetricRuleTemplateAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBody) SetRequestId(v string) *DescribeMetricRuleTemplateAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBody) SetResource(v *DescribeMetricRuleTemplateAttributeResponseBodyResource) *DescribeMetricRuleTemplateAttributeResponseBody {
	s.Resource = v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBody) SetSuccess(v bool) *DescribeMetricRuleTemplateAttributeResponseBody {
	s.Success = &v
	return s
}

type DescribeMetricRuleTemplateAttributeResponseBodyResource struct {
	// The queried alert templates.
	AlertTemplates *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplates `json:"AlertTemplates,omitempty" xml:"AlertTemplates,omitempty" type:"Struct"`
	// The description of the alert template.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the alert template.
	//
	// example:
	//
	// ECS_Template1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The version of the alert template.
	//
	// example:
	//
	// 1
	RestVersion *string `json:"RestVersion,omitempty" xml:"RestVersion,omitempty"`
	// The ID of the alert template.
	//
	// example:
	//
	// 70****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResource) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResource) SetAlertTemplates(v *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplates) *DescribeMetricRuleTemplateAttributeResponseBodyResource {
	s.AlertTemplates = v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResource) SetDescription(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResource {
	s.Description = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResource) SetName(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResource {
	s.Name = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResource) SetRestVersion(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResource {
	s.RestVersion = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResource) SetTemplateId(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResource {
	s.TemplateId = &v
	return s
}

type DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplates struct {
	AlertTemplate []*DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate `json:"AlertTemplate,omitempty" xml:"AlertTemplate,omitempty" type:"Repeated"`
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplates) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplates) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplates) SetAlertTemplate(v []*DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplates {
	s.AlertTemplate = v
	return s
}

type DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate struct {
	// The abbreviation of the Alibaba Cloud service name.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The threshold and the alert level.
	Escalations *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Struct"`
	// The tags of the alert template.
	Labels *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Struct"`
	// The metric name.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the Alibaba Cloud service.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The method that is used to handle alerts when no monitoring data is found. Valid values:
	//
	// 	- KEEP_LAST_STATE (default): No operation is performed.
	//
	// 	- INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
	//
	// 	- OK: The status is considered normal.
	//
	// example:
	//
	// KEEP_LAST_STATE
	NoDataPolicy *string `json:"NoDataPolicy,omitempty" xml:"NoDataPolicy,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// ECS_Rule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The dimension of the alert. It is an extended field.
	//
	// example:
	//
	// {"disk":"/"}
	Selector *string `json:"Selector,omitempty" xml:"Selector,omitempty"`
	// The callback URL to which a request is sent when an alert is triggered.
	//
	// example:
	//
	// https://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) SetCategory(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate {
	s.Category = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) SetEscalations(v *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate {
	s.Escalations = v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) SetLabels(v *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabels) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate {
	s.Labels = v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) SetMetricName(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) SetNamespace(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) SetNoDataPolicy(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate {
	s.NoDataPolicy = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) SetRuleName(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate {
	s.RuleName = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) SetSelector(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate {
	s.Selector = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate) SetWebhook(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplate {
	s.Webhook = &v
	return s
}

type DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations struct {
	// The conditions for triggering Critical-level alerts.
	Critical *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	// The conditions for triggering Info-level alerts.
	Info *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	// The conditions for triggering Warn-level alerts.
	Warn *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn `json:"Warn,omitempty" xml:"Warn,omitempty" type:"Struct"`
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations) SetCritical(v *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations {
	s.Critical = v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations) SetInfo(v *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations {
	s.Info = v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations) SetWarn(v *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalations {
	s.Warn = v
	return s
}

type DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical struct {
	// The comparison operator that is used to compare the metric value with the threshold for Critical-level alerts. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical method for Critical-level alerts.
	//
	// The value of the `Statistics` parameter varies with the cloud service. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Critical-level alerts.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Critical-level alert is triggered.
	//
	// example:
	//
	// 5
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical) SetComparisonOperator(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical) SetStatistics(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical {
	s.Statistics = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical) SetThreshold(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical {
	s.Threshold = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical) SetTimes(v int32) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsCritical {
	s.Times = &v
	return s
}

type DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo struct {
	// The comparison operator that is used to compare the metric value with the threshold for Info-level alerts. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical method for Info-level alerts.
	//
	// The value of the `Statistics` parameter varies with the cloud service. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Info-level alerts.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an Info-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo) SetComparisonOperator(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo) SetStatistics(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo {
	s.Statistics = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo) SetThreshold(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo {
	s.Threshold = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo) SetTimes(v int32) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsInfo {
	s.Times = &v
	return s
}

type DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn struct {
	// The comparison operator that is used to compare the metric value with the threshold for Warn-level alerts. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical method for Warn-level alerts.
	//
	// The value of the `Statistics` parameter varies with the cloud service. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Warn-level alerts.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Warn-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn) SetComparisonOperator(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn) SetStatistics(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn {
	s.Statistics = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn) SetThreshold(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn {
	s.Threshold = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn) SetTimes(v int32) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateEscalationsWarn {
	s.Times = &v
	return s
}

type DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabels struct {
	Labels []*DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabelsLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabels) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabels) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabels) SetLabels(v []*DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabelsLabels) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabels {
	s.Labels = v
	return s
}

type DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabelsLabels struct {
	// The tag key of the alert template.
	//
	// example:
	//
	// label1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the alert template.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabelsLabels) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabelsLabels) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabelsLabels) SetKey(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabelsLabels {
	s.Key = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabelsLabels) SetValue(v string) *DescribeMetricRuleTemplateAttributeResponseBodyResourceAlertTemplatesAlertTemplateLabelsLabels {
	s.Value = &v
	return s
}

type DescribeMetricRuleTemplateAttributeResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricRuleTemplateAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricRuleTemplateAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateAttributeResponse) SetHeaders(v map[string]*string) *DescribeMetricRuleTemplateAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponse) SetStatusCode(v int32) *DescribeMetricRuleTemplateAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricRuleTemplateAttributeResponse) SetBody(v *DescribeMetricRuleTemplateAttributeResponseBody) *DescribeMetricRuleTemplateAttributeResponse {
	s.Body = v
	return s
}

type DescribeMetricRuleTemplateListRequest struct {
	// Specifies whether to display the history of applying the alert templates to application groups. Valid values:
	//
	// 	- true
	//
	// 	- false (default)
	//
	// example:
	//
	// false
	History *bool `json:"History,omitempty" xml:"History,omitempty"`
	// The keyword of the alert template name.
	//
	// example:
	//
	// ECS
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The name of the alert template.
	//
	// example:
	//
	// ECS_Template1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The sorting order. Valid values:
	//
	// 	- true (default): ascending order
	//
	// 	- false: descending order
	//
	// example:
	//
	// true
	Order *bool `json:"Order,omitempty" xml:"Order,omitempty"`
	// The sorting basis. Valid values:
	//
	// 	- gmtMotified: sorts alert templates by modification time
	//
	// 	- gmtCreate (default): sorts alert templates by creation time
	//
	// example:
	//
	// gmtCreate
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert template.
	//
	// example:
	//
	// 70****
	TemplateId *int64 `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DescribeMetricRuleTemplateListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateListRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateListRequest) SetHistory(v bool) *DescribeMetricRuleTemplateListRequest {
	s.History = &v
	return s
}

func (s *DescribeMetricRuleTemplateListRequest) SetKeyword(v string) *DescribeMetricRuleTemplateListRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeMetricRuleTemplateListRequest) SetName(v string) *DescribeMetricRuleTemplateListRequest {
	s.Name = &v
	return s
}

func (s *DescribeMetricRuleTemplateListRequest) SetOrder(v bool) *DescribeMetricRuleTemplateListRequest {
	s.Order = &v
	return s
}

func (s *DescribeMetricRuleTemplateListRequest) SetOrderBy(v string) *DescribeMetricRuleTemplateListRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeMetricRuleTemplateListRequest) SetPageNumber(v int64) *DescribeMetricRuleTemplateListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMetricRuleTemplateListRequest) SetPageSize(v int64) *DescribeMetricRuleTemplateListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMetricRuleTemplateListRequest) SetRegionId(v string) *DescribeMetricRuleTemplateListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMetricRuleTemplateListRequest) SetTemplateId(v int64) *DescribeMetricRuleTemplateListRequest {
	s.TemplateId = &v
	return s
}

type DescribeMetricRuleTemplateListResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 659401C0-6214-5C02-972A-CFA929D717B7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The queried alert templates.
	Templates *DescribeMetricRuleTemplateListResponseBodyTemplates `json:"Templates,omitempty" xml:"Templates,omitempty" type:"Struct"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMetricRuleTemplateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateListResponseBody) SetCode(v int32) *DescribeMetricRuleTemplateListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBody) SetMessage(v string) *DescribeMetricRuleTemplateListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBody) SetRequestId(v string) *DescribeMetricRuleTemplateListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBody) SetSuccess(v bool) *DescribeMetricRuleTemplateListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBody) SetTemplates(v *DescribeMetricRuleTemplateListResponseBodyTemplates) *DescribeMetricRuleTemplateListResponseBody {
	s.Templates = v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBody) SetTotal(v int64) *DescribeMetricRuleTemplateListResponseBody {
	s.Total = &v
	return s
}

type DescribeMetricRuleTemplateListResponseBodyTemplates struct {
	Template []*DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s DescribeMetricRuleTemplateListResponseBodyTemplates) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateListResponseBodyTemplates) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplates) SetTemplate(v []*DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate) *DescribeMetricRuleTemplateListResponseBodyTemplates {
	s.Template = v
	return s
}

type DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate struct {
	// The history of applying the alert templates to application groups.
	ApplyHistories *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistories `json:"ApplyHistories,omitempty" xml:"ApplyHistories,omitempty" type:"Struct"`
	// The description of the alert template.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The timestamp when the alert template was created.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1646018798000
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The timestamp when the alert template was modified.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1646054798000
	GmtModified *int64 `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The name of the alert template.
	//
	// example:
	//
	// ECS_Template1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The version of the alert template.
	//
	// Default value: 0.
	//
	// example:
	//
	// 0
	RestVersion *int64 `json:"RestVersion,omitempty" xml:"RestVersion,omitempty"`
	// The ID of the alert template.
	//
	// example:
	//
	// 70****
	TemplateId *int64 `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate) SetApplyHistories(v *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistories) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate {
	s.ApplyHistories = v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate) SetDescription(v string) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate {
	s.Description = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate) SetGmtCreate(v int64) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate {
	s.GmtCreate = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate) SetGmtModified(v int64) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate {
	s.GmtModified = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate) SetName(v string) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate {
	s.Name = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate) SetRestVersion(v int64) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate {
	s.RestVersion = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate) SetTemplateId(v int64) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplate {
	s.TemplateId = &v
	return s
}

type DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistories struct {
	ApplyHistory []*DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory `json:"ApplyHistory,omitempty" xml:"ApplyHistory,omitempty" type:"Repeated"`
}

func (s DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistories) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistories) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistories) SetApplyHistory(v []*DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistories {
	s.ApplyHistory = v
	return s
}

type DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory struct {
	// The timestamp when the alert template was applied to the application group.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1646055898000
	ApplyTime *int64 `json:"ApplyTime,omitempty" xml:"ApplyTime,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 3607****
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the application group.
	//
	// example:
	//
	// ECS_Group
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
}

func (s DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory) SetApplyTime(v int64) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory {
	s.ApplyTime = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory) SetGroupId(v int64) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory {
	s.GroupId = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory) SetGroupName(v string) *DescribeMetricRuleTemplateListResponseBodyTemplatesTemplateApplyHistoriesApplyHistory {
	s.GroupName = &v
	return s
}

type DescribeMetricRuleTemplateListResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricRuleTemplateListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricRuleTemplateListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRuleTemplateListResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricRuleTemplateListResponse) SetHeaders(v map[string]*string) *DescribeMetricRuleTemplateListResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricRuleTemplateListResponse) SetStatusCode(v int32) *DescribeMetricRuleTemplateListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricRuleTemplateListResponse) SetBody(v *DescribeMetricRuleTemplateListResponseBody) *DescribeMetricRuleTemplateListResponse {
	s.Body = v
	return s
}

type DescribeMetricTopRequest struct {
	// The monitoring dimensions of the specified resource.
	//
	// Set the value to a collection of `key:value` pairs. Example: `{"userId":"120886317861****"}` or `{"instanceId":"i-2ze2d6j5uhg20x47****"}`.
	//
	// >  You can query a maximum of 50 instances in each request.
	//
	// example:
	//
	// [{"instanceId": "i-abcdefgh12****"}]
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The end of the time range to query monitoring data.
	//
	// 	- If the `StartTime` and `EndTime` parameters are not specified, the monitoring data of the last statistical period is queried.``
	//
	// 	- If the `StartTime` and `EndTime` parameters are specified, the monitoring data of the last statistical period in the specified time range is queried.````
	//
	//     	- If you set the `Period` parameter to 15, the specified time range must be less than or equal to 20 minutes. For example, if you set the StartTime parameter to 2021-05-08 08:10:00 and the EndTime parameter to 2021-05-08 08:30:00, the monitoring data of the last 15 seconds in the time range is queried.
	//
	//     	- If you set the `Period` parameter to 60 or 900, the specified time range must be less than or equal to 2 hours. For example, if you set the Period parameter to 60, the StartTime parameter to 2021-05-08 08:00:00, and the EndTime parameter to 2021-05-08 10:00:00, the monitoring data of the last 60 seconds in the time range is queried.
	//
	//     	- If you set the `Period` parameter to 3600, the specified time range must be less than or equal to two days. For example, if you set the StartTime parameter to 2021-05-08 08:00:00 and the EndTime parameter to 2021-05-10 08:00:00, the monitoring data of the last 3,600 seconds in the time range is queried.
	//
	// The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
	//
	// 	- Time format: YYYY-MM-DDThh:mm:ssZ
	//
	// >  We recommend that you use UNIX timestamps to prevent time zone-related issues.
	//
	// example:
	//
	// 2021-05-08 10:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The expression that is used to compute the query results in real time.
	//
	// >  Only the `groupby` expression is supported. This expression is similar to the GROUP BY statement used in databases.
	//
	// example:
	//
	// {"groupby":["userId","instanceId"]}
	Express *string `json:"Express,omitempty" xml:"Express,omitempty"`
	// The number of entries per page.
	//
	// Default value: 10.
	//
	// >  The maximum value of the Length parameter in a request is 1440.
	//
	// example:
	//
	// 10
	Length *string `json:"Length,omitempty" xml:"Length,omitempty"`
	// The metric that is used to monitor the cloud service.
	//
	// For more information about metric names, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_idle
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The order in which data is sorted. Valid values:
	//
	// 	- True: sorts data in ascending order.
	//
	// 	- False (default): sorts data in descending order.
	//
	// example:
	//
	// False
	OrderDesc *string `json:"OrderDesc,omitempty" xml:"OrderDesc,omitempty"`
	// The field based on which data is sorted. Valid values:
	//
	// 	- Average
	//
	// 	- Minimum
	//
	// 	- Maximum
	//
	// This parameter is required.
	//
	// example:
	//
	// Average
	Orderby *string `json:"Orderby,omitempty" xml:"Orderby,omitempty"`
	// The statistical period of the monitoring data.
	//
	// Valid values: 15, 60, 900, and 3600.
	//
	// Unit: seconds.
	//
	// >
	//
	// 	- If this parameter is not specified, monitoring data is queried based on the period in which metric values are reported.
	//
	// 	- Statistical periods vary based on the metrics that are specified by `MetricName`. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// 60
	Period   *string `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The start of the time range to query monitoring data.
	//
	// 	- If the `StartTime` and `EndTime` parameters are not specified, the monitoring data of the last statistical period is queried.``
	//
	// 	- If the `StartTime` and `EndTime` parameters are specified, the monitoring data of the last statistical period in the specified time range is queried.````
	//
	//     	- If you set the `Period` parameter to 15, the specified time range must be less than or equal to 20 minutes. For example, if you set the StartTime parameter to 2021-05-08 08:10:00 and the EndTime parameter to 2021-05-08 08:30:00, the monitoring data of the last 15 seconds in the time range is queried.
	//
	//     	- If you set the `Period` parameter to 60 or 900, the specified time range must be less than or equal to 2 hours. For example, if you set the Period parameter to 60, the StartTime parameter to 2021-05-08 08:00:00, and the EndTime parameter to 2021-05-08 10:00:00, the monitoring data of the last 60 seconds in the time range is queried.
	//
	//     	- If you set the `Period` parameter to 3600, the specified time range must be less than or equal to two days. For example, if you set the StartTime parameter to 2021-05-08 08:00:00 and the EndTime parameter to 2021-05-10 08:00:00, the monitoring data of the last 3,600 seconds in the time range is queried.
	//
	// The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
	//
	// 	- Time format: YYYY-MM-DDThh:mm:ssZ
	//
	// >
	//
	// 	- You must set the `StartTime` parameter to a point in time that is later than 00:00:00 Thursday, January 1, 1970. Otherwise, this parameter is invalid.
	//
	// 	- We recommend that you use UNIX timestamps to prevent time zone-related issues.
	//
	// example:
	//
	// 2021-05-08 08:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeMetricTopRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricTopRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricTopRequest) SetDimensions(v string) *DescribeMetricTopRequest {
	s.Dimensions = &v
	return s
}

func (s *DescribeMetricTopRequest) SetEndTime(v string) *DescribeMetricTopRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeMetricTopRequest) SetExpress(v string) *DescribeMetricTopRequest {
	s.Express = &v
	return s
}

func (s *DescribeMetricTopRequest) SetLength(v string) *DescribeMetricTopRequest {
	s.Length = &v
	return s
}

func (s *DescribeMetricTopRequest) SetMetricName(v string) *DescribeMetricTopRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeMetricTopRequest) SetNamespace(v string) *DescribeMetricTopRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeMetricTopRequest) SetOrderDesc(v string) *DescribeMetricTopRequest {
	s.OrderDesc = &v
	return s
}

func (s *DescribeMetricTopRequest) SetOrderby(v string) *DescribeMetricTopRequest {
	s.Orderby = &v
	return s
}

func (s *DescribeMetricTopRequest) SetPeriod(v string) *DescribeMetricTopRequest {
	s.Period = &v
	return s
}

func (s *DescribeMetricTopRequest) SetRegionId(v string) *DescribeMetricTopRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMetricTopRequest) SetStartTime(v string) *DescribeMetricTopRequest {
	s.StartTime = &v
	return s
}

type DescribeMetricTopResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The monitoring data.
	//
	// example:
	//
	// [{\\"order\\":1,\\"timestamp\\":1620287520000,\\"userId\\":\\"120886317861****\\",\\"instanceId\\":\\"i-j6ccf7d5fn335qpo****\\",\\"Average\\":99.92,\\"Minimum\\":99.5,\\"Maximum\\":100.0,\\"_count\\":1.0},{\\"order\\":2,\\"timestamp\\":1620287520000,\\"userId\\":\\"120886317861****\\",\\"instanceId\\":\\"i-0xii2bvf42iqvxbp****\\",\\"Average\\":99.91,\\"Minimum\\":99.0,\\"Maximum\\":100.0,\\"_count\\":1.0}]
	Datapoints *string `json:"Datapoints,omitempty" xml:"Datapoints,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The statistical period of the monitoring data. Unit: seconds. Valid values: 15, 60, 900, and 3600.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3121AE7D-4AFF-4C25-8F1D-C8226EBB1F42
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMetricTopResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricTopResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricTopResponseBody) SetCode(v string) *DescribeMetricTopResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMetricTopResponseBody) SetDatapoints(v string) *DescribeMetricTopResponseBody {
	s.Datapoints = &v
	return s
}

func (s *DescribeMetricTopResponseBody) SetMessage(v string) *DescribeMetricTopResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMetricTopResponseBody) SetPeriod(v string) *DescribeMetricTopResponseBody {
	s.Period = &v
	return s
}

func (s *DescribeMetricTopResponseBody) SetRequestId(v string) *DescribeMetricTopResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMetricTopResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricTopResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricTopResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricTopResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricTopResponse) SetHeaders(v map[string]*string) *DescribeMetricTopResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricTopResponse) SetStatusCode(v int32) *DescribeMetricTopResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricTopResponse) SetBody(v *DescribeMetricTopResponseBody) *DescribeMetricTopResponse {
	s.Body = v
	return s
}

type DescribeMonitorGroupCategoriesRequest struct {
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId  *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitorGroupCategoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupCategoriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupCategoriesRequest) SetGroupId(v int64) *DescribeMonitorGroupCategoriesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeMonitorGroupCategoriesRequest) SetRegionId(v string) *DescribeMonitorGroupCategoriesRequest {
	s.RegionId = &v
	return s
}

type DescribeMonitorGroupCategoriesResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The cloud services to which the resources in the application group belong and the number of resources that belong to the cloud service.
	MonitorGroupCategories *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategories `json:"MonitorGroupCategories,omitempty" xml:"MonitorGroupCategories,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 9E0347B0-EBC3-4769-A78D-D96F21C6BB52
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true: The request was successful.
	//
	// 	- false: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMonitorGroupCategoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupCategoriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupCategoriesResponseBody) SetCode(v int32) *DescribeMonitorGroupCategoriesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitorGroupCategoriesResponseBody) SetMessage(v string) *DescribeMonitorGroupCategoriesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitorGroupCategoriesResponseBody) SetMonitorGroupCategories(v *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategories) *DescribeMonitorGroupCategoriesResponseBody {
	s.MonitorGroupCategories = v
	return s
}

func (s *DescribeMonitorGroupCategoriesResponseBody) SetRequestId(v string) *DescribeMonitorGroupCategoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitorGroupCategoriesResponseBody) SetSuccess(v bool) *DescribeMonitorGroupCategoriesResponseBody {
	s.Success = &v
	return s
}

type DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategories struct {
	// The ID of the application group.
	//
	// example:
	//
	// 123456
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The cloud services to which the resources in the application group belong and the number of resources that belong to the cloud service.
	MonitorGroupCategory *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategory `json:"MonitorGroupCategory,omitempty" xml:"MonitorGroupCategory,omitempty" type:"Struct"`
}

func (s DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategories) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategories) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategories) SetGroupId(v int64) *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategories {
	s.GroupId = &v
	return s
}

func (s *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategories) SetMonitorGroupCategory(v *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategory) *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategories {
	s.MonitorGroupCategory = v
	return s
}

type DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategory struct {
	CategoryItem []*DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategoryCategoryItem `json:"CategoryItem,omitempty" xml:"CategoryItem,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategory) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategory) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategory) SetCategoryItem(v []*DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategoryCategoryItem) *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategory {
	s.CategoryItem = v
	return s
}

type DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategoryCategoryItem struct {
	// The abbreviation of the cloud service name.
	//
	// >  For more information about how to obtain the abbreviation of a cloud service name, see `metricCategory` in the response parameter `Labels` of the [DescribeProjectMeta](https://help.aliyun.com/document_detail/114916.html) operation.
	//
	// example:
	//
	// ECS
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The number of resources that belong to the cloud service.
	//
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategoryCategoryItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategoryCategoryItem) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategoryCategoryItem) SetCategory(v string) *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategoryCategoryItem {
	s.Category = &v
	return s
}

func (s *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategoryCategoryItem) SetCount(v int32) *DescribeMonitorGroupCategoriesResponseBodyMonitorGroupCategoriesMonitorGroupCategoryCategoryItem {
	s.Count = &v
	return s
}

type DescribeMonitorGroupCategoriesResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitorGroupCategoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitorGroupCategoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupCategoriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupCategoriesResponse) SetHeaders(v map[string]*string) *DescribeMonitorGroupCategoriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitorGroupCategoriesResponse) SetStatusCode(v int32) *DescribeMonitorGroupCategoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitorGroupCategoriesResponse) SetBody(v *DescribeMonitorGroupCategoriesResponseBody) *DescribeMonitorGroupCategoriesResponse {
	s.Body = v
	return s
}

type DescribeMonitorGroupDynamicRulesRequest struct {
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId  *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitorGroupDynamicRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupDynamicRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupDynamicRulesRequest) SetGroupId(v int64) *DescribeMonitorGroupDynamicRulesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesRequest) SetRegionId(v string) *DescribeMonitorGroupDynamicRulesRequest {
	s.RegionId = &v
	return s
}

type DescribeMonitorGroupDynamicRulesResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 2170B94A-1576-4D65-900E-2093037CDAF3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The resources that are associated with the application group.
	Resource *DescribeMonitorGroupDynamicRulesResponseBodyResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMonitorGroupDynamicRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupDynamicRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupDynamicRulesResponseBody) SetCode(v int32) *DescribeMonitorGroupDynamicRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesResponseBody) SetMessage(v string) *DescribeMonitorGroupDynamicRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesResponseBody) SetRequestId(v string) *DescribeMonitorGroupDynamicRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesResponseBody) SetResource(v *DescribeMonitorGroupDynamicRulesResponseBodyResource) *DescribeMonitorGroupDynamicRulesResponseBody {
	s.Resource = v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesResponseBody) SetSuccess(v bool) *DescribeMonitorGroupDynamicRulesResponseBody {
	s.Success = &v
	return s
}

type DescribeMonitorGroupDynamicRulesResponseBodyResource struct {
	Resource []*DescribeMonitorGroupDynamicRulesResponseBodyResourceResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupDynamicRulesResponseBodyResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupDynamicRulesResponseBodyResource) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupDynamicRulesResponseBodyResource) SetResource(v []*DescribeMonitorGroupDynamicRulesResponseBodyResourceResource) *DescribeMonitorGroupDynamicRulesResponseBodyResource {
	s.Resource = v
	return s
}

type DescribeMonitorGroupDynamicRulesResponseBodyResourceResource struct {
	// The type of the cloud service to which the dynamic rule belongs. Valid values:
	//
	// 	- ecs: Elastic Compute Service (ECS)
	//
	// 	- rds: ApsaraDB RDS
	//
	// 	- slb: Server Load Balancer (SLB)
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The filter condition. Valid values:
	//
	// 	- and: queries the instances that meet all alert rules.
	//
	// 	- or: queries the instances that meet any alert rule.
	//
	// example:
	//
	// and
	FilterRelation *string `json:"FilterRelation,omitempty" xml:"FilterRelation,omitempty"`
	// The dynamic rules of the application group.
	Filters *DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Struct"`
}

func (s DescribeMonitorGroupDynamicRulesResponseBodyResourceResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupDynamicRulesResponseBodyResourceResource) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupDynamicRulesResponseBodyResourceResource) SetCategory(v string) *DescribeMonitorGroupDynamicRulesResponseBodyResourceResource {
	s.Category = &v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesResponseBodyResourceResource) SetFilterRelation(v string) *DescribeMonitorGroupDynamicRulesResponseBodyResourceResource {
	s.FilterRelation = &v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesResponseBodyResourceResource) SetFilters(v *DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFilters) *DescribeMonitorGroupDynamicRulesResponseBodyResourceResource {
	s.Filters = v
	return s
}

type DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFilters struct {
	Filter []*DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFilters) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFilters) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFilters) SetFilter(v []*DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter) *DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFilters {
	s.Filter = v
	return s
}

type DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter struct {
	// The method that is used to filter the instances. Valid values:
	//
	// 	- contains: contains
	//
	// 	- startWith: starts with a prefix
	//
	// 	- endWith: ends with a suffix
	//
	// example:
	//
	// contains
	Function *string `json:"Function,omitempty" xml:"Function,omitempty"`
	// The instance name.
	//
	// example:
	//
	// hostName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value of the dynamic rule.
	//
	// example:
	//
	// 1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter) SetFunction(v string) *DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter {
	s.Function = &v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter) SetName(v string) *DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter {
	s.Name = &v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter) SetValue(v string) *DescribeMonitorGroupDynamicRulesResponseBodyResourceResourceFiltersFilter {
	s.Value = &v
	return s
}

type DescribeMonitorGroupDynamicRulesResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitorGroupDynamicRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitorGroupDynamicRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupDynamicRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupDynamicRulesResponse) SetHeaders(v map[string]*string) *DescribeMonitorGroupDynamicRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesResponse) SetStatusCode(v int32) *DescribeMonitorGroupDynamicRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitorGroupDynamicRulesResponse) SetBody(v *DescribeMonitorGroupDynamicRulesResponseBody) *DescribeMonitorGroupDynamicRulesResponse {
	s.Body = v
	return s
}

type DescribeMonitorGroupInstanceAttributeRequest struct {
	// The abbreviation of the cloud service name.
	//
	// For more information about how to obtain the abbreviation of a cloud service name, see `metricCategory` in the response parameter `Labels` of the [DescribeProjectMeta](https://help.aliyun.com/document_detail/114916.html) operation.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The resource ID. Separate multiple resource IDs with commas (,). You can query the details about a maximum of 20 resources at a time.
	//
	// example:
	//
	// i-m5e0k0bexac8tykr****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The keyword that is used to search for resources.
	//
	// example:
	//
	// portal
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number.
	//
	// Valid values: 1 to 1000000000.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Valid values: 1 to 1000000000.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to return the total number of resources in the specified application group. Valid values:
	//
	// 	- true (default)
	//
	// 	- false
	//
	// example:
	//
	// true
	Total *bool `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMonitorGroupInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstanceAttributeRequest) SetCategory(v string) *DescribeMonitorGroupInstanceAttributeRequest {
	s.Category = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeRequest) SetGroupId(v int64) *DescribeMonitorGroupInstanceAttributeRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeRequest) SetInstanceIds(v string) *DescribeMonitorGroupInstanceAttributeRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeRequest) SetKeyword(v string) *DescribeMonitorGroupInstanceAttributeRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeRequest) SetPageNumber(v int32) *DescribeMonitorGroupInstanceAttributeRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeRequest) SetPageSize(v int32) *DescribeMonitorGroupInstanceAttributeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeRequest) SetRegionId(v string) *DescribeMonitorGroupInstanceAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeRequest) SetTotal(v bool) *DescribeMonitorGroupInstanceAttributeRequest {
	s.Total = &v
	return s
}

type DescribeMonitorGroupInstanceAttributeResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 2
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9FB8EA79-7279-4482-8D6D-3D28EEDD871A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The resources that are associated with the application group.
	Resources *DescribeMonitorGroupInstanceAttributeResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 12
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMonitorGroupInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBody) SetCode(v int32) *DescribeMonitorGroupInstanceAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBody) SetMessage(v string) *DescribeMonitorGroupInstanceAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBody) SetPageNumber(v int32) *DescribeMonitorGroupInstanceAttributeResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBody) SetPageSize(v int32) *DescribeMonitorGroupInstanceAttributeResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBody) SetRequestId(v string) *DescribeMonitorGroupInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBody) SetResources(v *DescribeMonitorGroupInstanceAttributeResponseBodyResources) *DescribeMonitorGroupInstanceAttributeResponseBody {
	s.Resources = v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBody) SetSuccess(v bool) *DescribeMonitorGroupInstanceAttributeResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBody) SetTotal(v int32) *DescribeMonitorGroupInstanceAttributeResponseBody {
	s.Total = &v
	return s
}

type DescribeMonitorGroupInstanceAttributeResponseBodyResources struct {
	Resource []*DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResources) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResources) SetResource(v []*DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) *DescribeMonitorGroupInstanceAttributeResponseBodyResources {
	s.Resource = v
	return s
}

type DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource struct {
	// The name of the cloud service.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The resource description.
	//
	// example:
	//
	// desc_test
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// The dimensions of the resource that is associated with the application group.
	//
	// example:
	//
	// {"instanceId":"i-m5e0k0bexac8tykr****"}
	Dimension *string `json:"Dimension,omitempty" xml:"Dimension,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// i-m5e0k0bexac8tykr****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The instance name.
	//
	// example:
	//
	// hostName
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The network type.
	//
	// example:
	//
	// vpc
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	// The region.
	Region *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceRegion `json:"Region,omitempty" xml:"Region,omitempty" type:"Struct"`
	// The tag of the resource.
	Tags *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	// The VPC description.
	Vpc *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceVpc `json:"Vpc,omitempty" xml:"Vpc,omitempty" type:"Struct"`
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) SetCategory(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource {
	s.Category = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) SetDesc(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource {
	s.Desc = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) SetDimension(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource {
	s.Dimension = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) SetInstanceId(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource {
	s.InstanceId = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) SetInstanceName(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource {
	s.InstanceName = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) SetNetworkType(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource {
	s.NetworkType = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) SetRegion(v *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceRegion) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource {
	s.Region = v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) SetTags(v *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTags) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource {
	s.Tags = v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource) SetVpc(v *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceVpc) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResource {
	s.Vpc = v
	return s
}

type DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceRegion struct {
	// The zone.
	//
	// example:
	//
	// cn-hangzhou-f
	AvailabilityZone *string `json:"AvailabilityZone,omitempty" xml:"AvailabilityZone,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceRegion) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceRegion) SetAvailabilityZone(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceRegion {
	s.AvailabilityZone = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceRegion) SetRegionId(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceRegion {
	s.RegionId = &v
	return s
}

type DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTags struct {
	Tag []*DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTags) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTags) SetTag(v []*DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTagsTag) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTags {
	s.Tag = v
	return s
}

type DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTagsTag struct {
	// The tag key.
	//
	// example:
	//
	// instanceNetworkType
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// VPC
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTagsTag) SetKey(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTagsTag) SetValue(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceTagsTag {
	s.Value = &v
	return s
}

type DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceVpc struct {
	// The VPC ID.
	//
	// example:
	//
	// vpc-2zew7etgiceg21****
	VpcInstanceId *string `json:"VpcInstanceId,omitempty" xml:"VpcInstanceId,omitempty"`
	// The vSwitch ID.
	//
	// example:
	//
	// vsw-2ze36seq79n992****
	VswitchInstanceId *string `json:"VswitchInstanceId,omitempty" xml:"VswitchInstanceId,omitempty"`
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceVpc) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceVpc) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceVpc) SetVpcInstanceId(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceVpc {
	s.VpcInstanceId = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceVpc) SetVswitchInstanceId(v string) *DescribeMonitorGroupInstanceAttributeResponseBodyResourcesResourceVpc {
	s.VswitchInstanceId = &v
	return s
}

type DescribeMonitorGroupInstanceAttributeResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitorGroupInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitorGroupInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstanceAttributeResponse) SetHeaders(v map[string]*string) *DescribeMonitorGroupInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponse) SetStatusCode(v int32) *DescribeMonitorGroupInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitorGroupInstanceAttributeResponse) SetBody(v *DescribeMonitorGroupInstanceAttributeResponseBody) *DescribeMonitorGroupInstanceAttributeResponse {
	s.Body = v
	return s
}

type DescribeMonitorGroupInstancesRequest struct {
	// The abbreviation of the cloud service name. Valid values of N: 1 to 200.
	//
	// >  For more information about how to obtain the abbreviation of a cloud service name, see `metricCategory` in the response parameter `Labels` of the [DescribeProjectMeta](https://help.aliyun.com/document_detail/114916.html) operation.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The instance ID. You can query multiple instances by specifying multiple IDs.
	//
	// example:
	//
	// i-x1234568
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The keyword used to search for instances. Fuzzy search based on instance names is supported.
	//
	// example:
	//
	// s1
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitorGroupInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstancesRequest) SetCategory(v string) *DescribeMonitorGroupInstancesRequest {
	s.Category = &v
	return s
}

func (s *DescribeMonitorGroupInstancesRequest) SetGroupId(v int64) *DescribeMonitorGroupInstancesRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeMonitorGroupInstancesRequest) SetInstanceIds(v string) *DescribeMonitorGroupInstancesRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeMonitorGroupInstancesRequest) SetKeyword(v string) *DescribeMonitorGroupInstancesRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeMonitorGroupInstancesRequest) SetPageNumber(v int32) *DescribeMonitorGroupInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMonitorGroupInstancesRequest) SetPageSize(v int32) *DescribeMonitorGroupInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMonitorGroupInstancesRequest) SetRegionId(v string) *DescribeMonitorGroupInstancesRequest {
	s.RegionId = &v
	return s
}

type DescribeMonitorGroupInstancesResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 97F2A410-9412-499C-9AD1-76EF7EC02DF2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the resources in the application group.
	Resources *DescribeMonitorGroupInstancesResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Struct"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 12
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMonitorGroupInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstancesResponseBody) SetCode(v int32) *DescribeMonitorGroupInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBody) SetMessage(v string) *DescribeMonitorGroupInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBody) SetPageNumber(v int32) *DescribeMonitorGroupInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBody) SetPageSize(v int32) *DescribeMonitorGroupInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBody) SetRequestId(v string) *DescribeMonitorGroupInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBody) SetResources(v *DescribeMonitorGroupInstancesResponseBodyResources) *DescribeMonitorGroupInstancesResponseBody {
	s.Resources = v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBody) SetSuccess(v bool) *DescribeMonitorGroupInstancesResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBody) SetTotal(v int32) *DescribeMonitorGroupInstancesResponseBody {
	s.Total = &v
	return s
}

type DescribeMonitorGroupInstancesResponseBodyResources struct {
	Resource []*DescribeMonitorGroupInstancesResponseBodyResourcesResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupInstancesResponseBodyResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstancesResponseBodyResources) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstancesResponseBodyResources) SetResource(v []*DescribeMonitorGroupInstancesResponseBodyResourcesResource) *DescribeMonitorGroupInstancesResponseBodyResources {
	s.Resource = v
	return s
}

type DescribeMonitorGroupInstancesResponseBodyResourcesResource struct {
	// The abbreviation of the service name.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The resource ID.
	//
	// example:
	//
	// 12345
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// i-2ze3w55tr2r****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The instance name.
	//
	// example:
	//
	// hostIP
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The ID of the region where the instance resides.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitorGroupInstancesResponseBodyResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstancesResponseBodyResourcesResource) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstancesResponseBodyResourcesResource) SetCategory(v string) *DescribeMonitorGroupInstancesResponseBodyResourcesResource {
	s.Category = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBodyResourcesResource) SetId(v int64) *DescribeMonitorGroupInstancesResponseBodyResourcesResource {
	s.Id = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBodyResourcesResource) SetInstanceId(v string) *DescribeMonitorGroupInstancesResponseBodyResourcesResource {
	s.InstanceId = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBodyResourcesResource) SetInstanceName(v string) *DescribeMonitorGroupInstancesResponseBodyResourcesResource {
	s.InstanceName = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponseBodyResourcesResource) SetRegionId(v string) *DescribeMonitorGroupInstancesResponseBodyResourcesResource {
	s.RegionId = &v
	return s
}

type DescribeMonitorGroupInstancesResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitorGroupInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitorGroupInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupInstancesResponse) SetHeaders(v map[string]*string) *DescribeMonitorGroupInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitorGroupInstancesResponse) SetStatusCode(v int32) *DescribeMonitorGroupInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitorGroupInstancesResponse) SetBody(v *DescribeMonitorGroupInstancesResponseBody) *DescribeMonitorGroupInstancesResponse {
	s.Body = v
	return s
}

type DescribeMonitorGroupNotifyPolicyListRequest struct {
	// The ID of the application group.
	//
	// example:
	//
	// 6780****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The policy type.
	//
	// Valid value: PauseNotify.
	//
	// This parameter is required.
	//
	// example:
	//
	// PauseNotify
	PolicyType *string `json:"PolicyType,omitempty" xml:"PolicyType,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitorGroupNotifyPolicyListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupNotifyPolicyListRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupNotifyPolicyListRequest) SetGroupId(v string) *DescribeMonitorGroupNotifyPolicyListRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListRequest) SetPageNumber(v int32) *DescribeMonitorGroupNotifyPolicyListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListRequest) SetPageSize(v int32) *DescribeMonitorGroupNotifyPolicyListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListRequest) SetPolicyType(v string) *DescribeMonitorGroupNotifyPolicyListRequest {
	s.PolicyType = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListRequest) SetRegionId(v string) *DescribeMonitorGroupNotifyPolicyListRequest {
	s.RegionId = &v
	return s
}

type DescribeMonitorGroupNotifyPolicyListResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The returned policies.
	NotifyPolicyList *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyList `json:"NotifyPolicyList,omitempty" xml:"NotifyPolicyList,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 6072F026-C441-41A6-B114-35A1E8F8FDD3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 11
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMonitorGroupNotifyPolicyListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupNotifyPolicyListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBody) SetCode(v string) *DescribeMonitorGroupNotifyPolicyListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBody) SetMessage(v string) *DescribeMonitorGroupNotifyPolicyListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBody) SetNotifyPolicyList(v *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyList) *DescribeMonitorGroupNotifyPolicyListResponseBody {
	s.NotifyPolicyList = v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBody) SetRequestId(v string) *DescribeMonitorGroupNotifyPolicyListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBody) SetSuccess(v string) *DescribeMonitorGroupNotifyPolicyListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBody) SetTotal(v int32) *DescribeMonitorGroupNotifyPolicyListResponseBody {
	s.Total = &v
	return s
}

type DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyList struct {
	NotifyPolicy []*DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy `json:"NotifyPolicy,omitempty" xml:"NotifyPolicy,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyList) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyList) SetNotifyPolicy(v []*DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy) *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyList {
	s.NotifyPolicy = v
	return s
}

type DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy struct {
	// The end of the time range to query.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1551761781273
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 6780****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The policy ID.
	//
	// example:
	//
	// 123****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The beginning of the time range to query.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1551761781273
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The policy type.
	//
	// example:
	//
	// PauseNotify
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy) SetEndTime(v int64) *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy {
	s.EndTime = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy) SetGroupId(v string) *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy {
	s.GroupId = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy) SetId(v string) *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy {
	s.Id = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy) SetStartTime(v int64) *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy {
	s.StartTime = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy) SetType(v string) *DescribeMonitorGroupNotifyPolicyListResponseBodyNotifyPolicyListNotifyPolicy {
	s.Type = &v
	return s
}

type DescribeMonitorGroupNotifyPolicyListResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitorGroupNotifyPolicyListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitorGroupNotifyPolicyListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupNotifyPolicyListResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupNotifyPolicyListResponse) SetHeaders(v map[string]*string) *DescribeMonitorGroupNotifyPolicyListResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponse) SetStatusCode(v int32) *DescribeMonitorGroupNotifyPolicyListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitorGroupNotifyPolicyListResponse) SetBody(v *DescribeMonitorGroupNotifyPolicyListResponseBody) *DescribeMonitorGroupNotifyPolicyListResponse {
	s.Body = v
	return s
}

type DescribeMonitorGroupsRequest struct {
	// The ID of the tag rule.
	//
	// example:
	//
	// 6b882d9a-5117-42e2-9d0c-4749a0c6****
	DynamicTagRuleId *string `json:"DynamicTagRuleId,omitempty" xml:"DynamicTagRuleId,omitempty"`
	// The tag key that is created for the application group by using the tag rule.
	//
	// example:
	//
	// GroupKey1
	GroupFounderTagKey *string `json:"GroupFounderTagKey,omitempty" xml:"GroupFounderTagKey,omitempty"`
	// The tag value that is created for the application group by using the tag rule.
	//
	// example:
	//
	// GroupValue1
	GroupFounderTagValue *string `json:"GroupFounderTagValue,omitempty" xml:"GroupFounderTagValue,omitempty"`
	// The ID of the application group. Separate multiple application group IDs with commas (,).
	//
	// example:
	//
	// 92****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the application group.
	//
	// example:
	//
	// testGroup124
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// Specifies whether to include the historical alert templates that are applied to the application group in the response. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	IncludeTemplateHistory *bool `json:"IncludeTemplateHistory,omitempty" xml:"IncludeTemplateHistory,omitempty"`
	// The instance ID. This parameter is used to query the application group to which the specified instance belongs.
	//
	// example:
	//
	// i-abcdefgh12****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The keyword that is used for the search.
	//
	// example:
	//
	// test
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The number of the page to return.
	//
	// Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// Pages start from page 1. Default value: 30.
	//
	// example:
	//
	// 30
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to include the alert contact groups in the response. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	SelectContactGroups *bool `json:"SelectContactGroups,omitempty" xml:"SelectContactGroups,omitempty"`
	// The tags of the application group.
	Tag []*DescribeMonitorGroupsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The type of the application group. Valid values:
	//
	// 	- custom: a self-managed application group
	//
	// 	- ehpc_cluster: an application group that is synchronized from an Elastic High Performance Computing (E-HPC) cluster
	//
	// 	- kubernetes: an application group that is synchronized from a Container Service for Kubernetes (ACK) cluster
	//
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The type of the application group. Valid values:
	//
	// 	- custom: a self-managed application group
	//
	// 	- ehpc_cluster: an application group that is synchronized from an Elastic High Performance Computing (E-HPC) cluster
	//
	// 	- kubernetes: an application group that is synchronized from a Container Service for Kubernetes (ACK) cluster
	//
	// 	- tag: an application group that is automatically created by using tags
	//
	// 	- resMgr: an application group that is created by using resource groups
	//
	// 	- ess: an application group that is synchronized from Auto Scaling (ESS)
	//
	// example:
	//
	// custom
	Types *string `json:"Types,omitempty" xml:"Types,omitempty"`
}

func (s DescribeMonitorGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsRequest) SetDynamicTagRuleId(v string) *DescribeMonitorGroupsRequest {
	s.DynamicTagRuleId = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetGroupFounderTagKey(v string) *DescribeMonitorGroupsRequest {
	s.GroupFounderTagKey = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetGroupFounderTagValue(v string) *DescribeMonitorGroupsRequest {
	s.GroupFounderTagValue = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetGroupId(v string) *DescribeMonitorGroupsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetGroupName(v string) *DescribeMonitorGroupsRequest {
	s.GroupName = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetIncludeTemplateHistory(v bool) *DescribeMonitorGroupsRequest {
	s.IncludeTemplateHistory = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetInstanceId(v string) *DescribeMonitorGroupsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetKeyword(v string) *DescribeMonitorGroupsRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetPageNumber(v int32) *DescribeMonitorGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetPageSize(v int32) *DescribeMonitorGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetRegionId(v string) *DescribeMonitorGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetSelectContactGroups(v bool) *DescribeMonitorGroupsRequest {
	s.SelectContactGroups = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetTag(v []*DescribeMonitorGroupsRequestTag) *DescribeMonitorGroupsRequest {
	s.Tag = v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetType(v string) *DescribeMonitorGroupsRequest {
	s.Type = &v
	return s
}

func (s *DescribeMonitorGroupsRequest) SetTypes(v string) *DescribeMonitorGroupsRequest {
	s.Types = &v
	return s
}

type DescribeMonitorGroupsRequestTag struct {
	// The tag key of the application group. Valid values of N: 1 to 5.
	//
	// example:
	//
	// tagKey1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the application group. Valid values of N: 1 to 5.
	//
	// example:
	//
	// tagValue1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeMonitorGroupsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsRequestTag) SetKey(v string) *DescribeMonitorGroupsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeMonitorGroupsRequestTag) SetValue(v string) *DescribeMonitorGroupsRequestTag {
	s.Value = &v
	return s
}

type DescribeMonitorGroupsResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// F02B299A-D374-4595-9F55-7534D604F132
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The resources that are associated with the application group.
	Resources *DescribeMonitorGroupsResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 10
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMonitorGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsResponseBody) SetCode(v int32) *DescribeMonitorGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBody) SetMessage(v string) *DescribeMonitorGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBody) SetPageNumber(v int32) *DescribeMonitorGroupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBody) SetPageSize(v int32) *DescribeMonitorGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBody) SetRequestId(v string) *DescribeMonitorGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBody) SetResources(v *DescribeMonitorGroupsResponseBodyResources) *DescribeMonitorGroupsResponseBody {
	s.Resources = v
	return s
}

func (s *DescribeMonitorGroupsResponseBody) SetSuccess(v bool) *DescribeMonitorGroupsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBody) SetTotal(v int32) *DescribeMonitorGroupsResponseBody {
	s.Total = &v
	return s
}

type DescribeMonitorGroupsResponseBodyResources struct {
	Resource []*DescribeMonitorGroupsResponseBodyResourcesResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupsResponseBodyResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsResponseBodyResources) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsResponseBodyResources) SetResource(v []*DescribeMonitorGroupsResponseBodyResourcesResource) *DescribeMonitorGroupsResponseBodyResources {
	s.Resource = v
	return s
}

type DescribeMonitorGroupsResponseBodyResourcesResource struct {
	// The URL of the ACK cluster from which the application group is synchronized.
	//
	// example:
	//
	// https://aliyun.com
	BindUrl *string `json:"BindUrl,omitempty" xml:"BindUrl,omitempty"`
	// The alert contact groups.
	ContactGroups *DescribeMonitorGroupsResponseBodyResourcesResourceContactGroups `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty" type:"Struct"`
	// The ID of the tag rule.
	//
	// example:
	//
	// 6b882d9a-5117-42e2-9d0c-4749a0c6****
	DynamicTagRuleId *string `json:"DynamicTagRuleId,omitempty" xml:"DynamicTagRuleId,omitempty"`
	// The timestamp when the application group was created. Unit: milliseconds.
	//
	// example:
	//
	// 1603181891000
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The timestamp when the application group was modified. Unit: milliseconds.
	//
	// example:
	//
	// 1603181891000
	GmtModified *int64 `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	// The tag key that is created for the application group by using the tag rule.
	//
	// example:
	//
	// GroupKey1
	GroupFounderTagKey *string `json:"GroupFounderTagKey,omitempty" xml:"GroupFounderTagKey,omitempty"`
	// The tag value that is created for the application group by using the tag rule.
	//
	// example:
	//
	// GroupValue1
	GroupFounderTagValue *string `json:"GroupFounderTagValue,omitempty" xml:"GroupFounderTagValue,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the application group.
	//
	// example:
	//
	// test123
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The resource ID.
	//
	// example:
	//
	// rg-aek2hopjh*******
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The ID of the Alibaba Cloud service.
	//
	// example:
	//
	// 49****
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The tags that are attached to the application group.
	Tags *DescribeMonitorGroupsResponseBodyResourcesResourceTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	// The ID of the template.
	TemplateIds *DescribeMonitorGroupsResponseBodyResourcesResourceTemplateIds `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty" type:"Struct"`
	// The type of the application group. Valid values:
	//
	// 	- custom: a self-managed application group
	//
	// 	- ehpc_cluster: an application group that is synchronized from an E-HPC cluster
	//
	// 	- kubernetes: an application group that is synchronized from an ACK cluster
	//
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeMonitorGroupsResponseBodyResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsResponseBodyResourcesResource) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetBindUrl(v string) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.BindUrl = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetContactGroups(v *DescribeMonitorGroupsResponseBodyResourcesResourceContactGroups) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.ContactGroups = v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetDynamicTagRuleId(v string) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.DynamicTagRuleId = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetGmtCreate(v int64) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.GmtCreate = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetGmtModified(v int64) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.GmtModified = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetGroupFounderTagKey(v string) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.GroupFounderTagKey = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetGroupFounderTagValue(v string) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.GroupFounderTagValue = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetGroupId(v int64) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.GroupId = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetGroupName(v string) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.GroupName = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetResourceGroupId(v string) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetServiceId(v string) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.ServiceId = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetTags(v *DescribeMonitorGroupsResponseBodyResourcesResourceTags) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.Tags = v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetTemplateIds(v *DescribeMonitorGroupsResponseBodyResourcesResourceTemplateIds) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.TemplateIds = v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResource) SetType(v string) *DescribeMonitorGroupsResponseBodyResourcesResource {
	s.Type = &v
	return s
}

type DescribeMonitorGroupsResponseBodyResourcesResourceContactGroups struct {
	ContactGroup []*DescribeMonitorGroupsResponseBodyResourcesResourceContactGroupsContactGroup `json:"ContactGroup,omitempty" xml:"ContactGroup,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupsResponseBodyResourcesResourceContactGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsResponseBodyResourcesResourceContactGroups) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResourceContactGroups) SetContactGroup(v []*DescribeMonitorGroupsResponseBodyResourcesResourceContactGroupsContactGroup) *DescribeMonitorGroupsResponseBodyResourcesResourceContactGroups {
	s.ContactGroup = v
	return s
}

type DescribeMonitorGroupsResponseBodyResourcesResourceContactGroupsContactGroup struct {
	// The name of the alert contact group.
	//
	// example:
	//
	// CloudMonitor
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeMonitorGroupsResponseBodyResourcesResourceContactGroupsContactGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsResponseBodyResourcesResourceContactGroupsContactGroup) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResourceContactGroupsContactGroup) SetName(v string) *DescribeMonitorGroupsResponseBodyResourcesResourceContactGroupsContactGroup {
	s.Name = &v
	return s
}

type DescribeMonitorGroupsResponseBodyResourcesResourceTags struct {
	Tag []*DescribeMonitorGroupsResponseBodyResourcesResourceTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupsResponseBodyResourcesResourceTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsResponseBodyResourcesResourceTags) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResourceTags) SetTag(v []*DescribeMonitorGroupsResponseBodyResourcesResourceTagsTag) *DescribeMonitorGroupsResponseBodyResourcesResourceTags {
	s.Tag = v
	return s
}

type DescribeMonitorGroupsResponseBodyResourcesResourceTagsTag struct {
	// The tag key of the application group.
	//
	// example:
	//
	// tagKey1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the application group.
	//
	// example:
	//
	// tagValue1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeMonitorGroupsResponseBodyResourcesResourceTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsResponseBodyResourcesResourceTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResourceTagsTag) SetKey(v string) *DescribeMonitorGroupsResponseBodyResourcesResourceTagsTag {
	s.Key = &v
	return s
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResourceTagsTag) SetValue(v string) *DescribeMonitorGroupsResponseBodyResourcesResourceTagsTag {
	s.Value = &v
	return s
}

type DescribeMonitorGroupsResponseBodyResourcesResourceTemplateIds struct {
	TemplateId []*string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty" type:"Repeated"`
}

func (s DescribeMonitorGroupsResponseBodyResourcesResourceTemplateIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsResponseBodyResourcesResourceTemplateIds) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsResponseBodyResourcesResourceTemplateIds) SetTemplateId(v []*string) *DescribeMonitorGroupsResponseBodyResourcesResourceTemplateIds {
	s.TemplateId = v
	return s
}

type DescribeMonitorGroupsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitorGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitorGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitorGroupsResponse) SetHeaders(v map[string]*string) *DescribeMonitorGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitorGroupsResponse) SetStatusCode(v int32) *DescribeMonitorGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitorGroupsResponse) SetBody(v *DescribeMonitorGroupsResponseBody) *DescribeMonitorGroupsResponse {
	s.Body = v
	return s
}

type DescribeMonitorResourceQuotaAttributeRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to return information about used quotas. Valid values:
	//
	// 	- true (default): yes
	//
	// 	- false: no
	//
	// example:
	//
	// true
	ShowUsed *bool `json:"ShowUsed,omitempty" xml:"ShowUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeRequest) SetRegionId(v string) *DescribeMonitorResourceQuotaAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeRequest) SetShowUsed(v bool) *DescribeMonitorResourceQuotaAttributeRequest {
	s.ShowUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 31BC7201-00F2-47B2-B7B9-6A173076ACE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details about the resource quotas of CloudMonitor.
	ResourceQuota *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota `json:"ResourceQuota,omitempty" xml:"ResourceQuota,omitempty" type:"Struct"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBody) SetCode(v string) *DescribeMonitorResourceQuotaAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBody) SetMessage(v string) *DescribeMonitorResourceQuotaAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBody) SetRequestId(v string) *DescribeMonitorResourceQuotaAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBody) SetResourceQuota(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) *DescribeMonitorResourceQuotaAttributeResponseBody {
	s.ResourceQuota = v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota struct {
	// The details about the quota of API calls.
	Api *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi `json:"Api,omitempty" xml:"Api,omitempty" type:"Struct"`
	// The details about the quota for custom monitoring.
	CustomMonitor *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor `json:"CustomMonitor,omitempty" xml:"CustomMonitor,omitempty" type:"Struct"`
	// The details about the quota of Hybrid Cloud Monitoring.
	EnterpriseQuota *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEnterpriseQuota `json:"EnterpriseQuota,omitempty" xml:"EnterpriseQuota,omitempty" type:"Struct"`
	// The details about the quota for event monitoring.
	EventMonitor *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor `json:"EventMonitor,omitempty" xml:"EventMonitor,omitempty" type:"Struct"`
	// The time when the resource plan expires.
	//
	// example:
	//
	// 2021-02-28
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The ID of the resource plan.
	//
	// example:
	//
	// cms_edition-cn-n6w20rn****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The details about the quota for log monitoring.
	LogMonitor *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor `json:"LogMonitor,omitempty" xml:"LogMonitor,omitempty" type:"Struct"`
	// The details about the quota of alert phone calls.
	Phone *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone `json:"Phone,omitempty" xml:"Phone,omitempty" type:"Struct"`
	// The details about the quota of alert text messages.
	SMS *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS `json:"SMS,omitempty" xml:"SMS,omitempty" type:"Struct"`
	// The quota of browser detection tasks.
	SiteMonitorBrowser *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser `json:"SiteMonitorBrowser,omitempty" xml:"SiteMonitorBrowser,omitempty" type:"Struct"`
	// The details about the quota of ECS detection points for site monitoring.
	SiteMonitorEcsProbe *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe `json:"SiteMonitorEcsProbe,omitempty" xml:"SiteMonitorEcsProbe,omitempty" type:"Struct"`
	// The quota of mobile detection tasks.
	SiteMonitorMobile *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile `json:"SiteMonitorMobile,omitempty" xml:"SiteMonitorMobile,omitempty" type:"Struct"`
	// The details about the quota of carrier detection points for site monitoring.
	SiteMonitorOperatorProbe *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe `json:"SiteMonitorOperatorProbe,omitempty" xml:"SiteMonitorOperatorProbe,omitempty" type:"Struct"`
	// The quota of site monitoring tasks.
	SiteMonitorTask *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask `json:"SiteMonitorTask,omitempty" xml:"SiteMonitorTask,omitempty" type:"Struct"`
	// The current edition of CloudMonitor. Valid values:
	//
	// 	- free: Free Edition
	//
	// 	- pro: Pro Edition
	//
	// 	- cms_post: pay-as-you-go
	//
	// example:
	//
	// pro
	SuitInfo *string `json:"SuitInfo,omitempty" xml:"SuitInfo,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetApi(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.Api = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetCustomMonitor(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.CustomMonitor = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetEnterpriseQuota(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEnterpriseQuota) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.EnterpriseQuota = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetEventMonitor(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.EventMonitor = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetExpireTime(v string) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.ExpireTime = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetInstanceId(v string) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.InstanceId = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetLogMonitor(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.LogMonitor = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetPhone(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.Phone = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetSMS(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.SMS = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetSiteMonitorBrowser(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.SiteMonitorBrowser = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetSiteMonitorEcsProbe(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.SiteMonitorEcsProbe = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetSiteMonitorMobile(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.SiteMonitorMobile = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetSiteMonitorOperatorProbe(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.SiteMonitorOperatorProbe = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetSiteMonitorTask(v *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.SiteMonitorTask = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota) SetSuitInfo(v string) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuota {
	s.SuitInfo = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi struct {
	// The total quota of API calls. Unit: 10,000 calls.
	//
	// example:
	//
	// 500
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of API calls in your resource plan. Unit: 10,000 calls.
	//
	// example:
	//
	// 500
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of API calls in your resource plan. Unit: calls.
	//
	// example:
	//
	// 9987
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaApi {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor struct {
	// The total quota of the time series for custom monitoring.
	//
	// example:
	//
	// 1200
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of the time series for custom monitoring in your resource plan.
	//
	// example:
	//
	// 1000
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of the time series for custom monitoring in your resource plan.
	//
	// example:
	//
	// 8
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaCustomMonitor {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEnterpriseQuota struct {
	// The ID of the instance monitored by Hybrid Cloud Monitoring.
	//
	// example:
	//
	// cms_enterprise_public_cn-7mz27pd****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The description of Hybrid Cloud Monitoring.
	//
	// example:
	//
	// ENTERPRISE
	SuitInfo *string `json:"SuitInfo,omitempty" xml:"SuitInfo,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEnterpriseQuota) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEnterpriseQuota) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEnterpriseQuota) SetInstanceId(v string) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEnterpriseQuota {
	s.InstanceId = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEnterpriseQuota) SetSuitInfo(v string) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEnterpriseQuota {
	s.SuitInfo = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor struct {
	// The total quota of events that can be reported in event monitoring. The total quota is the value that is multiplied by 10,000.
	//
	// example:
	//
	// 55
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of events that can be reported in event monitoring in your resource plan. The total quota is the value that is multiplied by 10,000.
	//
	// example:
	//
	// 50
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of events that can be reported in event monitoring in your resource plan. The total quota is the value that is multiplied by 10,000.
	//
	// example:
	//
	// 2
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaEventMonitor {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor struct {
	// The total quota of processed log data in log monitoring. Unit: MB/min.
	//
	// example:
	//
	// 150
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of processed log data in log monitoring in your resource plan. Unit: MB/min.
	//
	// example:
	//
	// 150
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of processed log data in log monitoring in your resource plan. Unit: MB/min.
	//
	// example:
	//
	// 80
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaLogMonitor {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone struct {
	// The total quota of alert phone calls. Unit: calls.
	//
	// example:
	//
	// 550
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of alert phone calls in your resource plan. Unit: calls.
	//
	// example:
	//
	// 500
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of alert phone calls in your resource plan. Unit: calls.
	//
	// example:
	//
	// 100
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaPhone {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS struct {
	// The total quota of alert text messages. Unit: messages.
	//
	// example:
	//
	// 550
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of alert text messages in your resource plan. Unit: messages.
	//
	// example:
	//
	// 500
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of alert text messages in your resource plan. Unit: messages.
	//
	// example:
	//
	// 38
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSMS {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser struct {
	// The total quota of browser detection tasks.
	//
	// example:
	//
	// 50
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of browser detection tasks in your resource plan.
	//
	// example:
	//
	// 50
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of browser detection tasks in your resource plan.
	//
	// example:
	//
	// 15
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorBrowser {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe struct {
	// The total quota of ECS detection points for site monitoring.
	//
	// > The value indicates the maximum number of ECS detection points that you can select for a site monitoring task.
	//
	// example:
	//
	// 5
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of ECS detection points for site monitoring in your resource plan.
	//
	// example:
	//
	// 5
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of ECS detection points for site monitoring in your resource plan.
	//
	// > The value indicates the total number of ECS detection points that are used by existing site monitoring tasks.
	//
	// example:
	//
	// 20
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorEcsProbe {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile struct {
	// The total quota of mobile detection tasks.
	//
	// example:
	//
	// 50
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of mobile detection tasks in your resource plan.
	//
	// example:
	//
	// 50
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of mobile detection tasks in your resource plan.
	//
	// example:
	//
	// 15
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorMobile {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe struct {
	// The total quota of carrier detection points for site monitoring.
	//
	// example:
	//
	// 5
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of carrier detection points for site monitoring in your resource plan.
	//
	// example:
	//
	// 5
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of carrier detection points for site monitoring in your resource plan.
	//
	// example:
	//
	// 0
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorOperatorProbe {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask struct {
	// The total quota of site monitoring tasks.
	//
	// example:
	//
	// 25
	QuotaLimit *int32 `json:"QuotaLimit,omitempty" xml:"QuotaLimit,omitempty"`
	// The quota of site monitoring tasks in your resource plan.
	//
	// example:
	//
	// 20
	QuotaPackage *int32 `json:"QuotaPackage,omitempty" xml:"QuotaPackage,omitempty"`
	// The used quota of site monitoring tasks in your resource plan.
	//
	// example:
	//
	// 15
	QuotaUsed *int32 `json:"QuotaUsed,omitempty" xml:"QuotaUsed,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask) SetQuotaLimit(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask {
	s.QuotaLimit = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask) SetQuotaPackage(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask {
	s.QuotaPackage = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask) SetQuotaUsed(v int32) *DescribeMonitorResourceQuotaAttributeResponseBodyResourceQuotaSiteMonitorTask {
	s.QuotaUsed = &v
	return s
}

type DescribeMonitorResourceQuotaAttributeResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitorResourceQuotaAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitorResourceQuotaAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitorResourceQuotaAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitorResourceQuotaAttributeResponse) SetHeaders(v map[string]*string) *DescribeMonitorResourceQuotaAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponse) SetStatusCode(v int32) *DescribeMonitorResourceQuotaAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitorResourceQuotaAttributeResponse) SetBody(v *DescribeMonitorResourceQuotaAttributeResponseBody) *DescribeMonitorResourceQuotaAttributeResponse {
	s.Body = v
	return s
}

type DescribeMonitoringAgentAccessKeyRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitoringAgentAccessKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentAccessKeyRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentAccessKeyRequest) SetRegionId(v string) *DescribeMonitoringAgentAccessKeyRequest {
	s.RegionId = &v
	return s
}

type DescribeMonitoringAgentAccessKeyResponseBody struct {
	// The AccessKey ID that is required to install the agent.
	//
	// example:
	//
	// E7A27f9****
	AccessKey *string `json:"AccessKey,omitempty" xml:"AccessKey,omitempty"`
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C0F655E9-D793-51E6-BD78-CABBCCFC1047
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The AccessKey secret that is required to install the agent.
	//
	// example:
	//
	// sBjNOUhLylrxMX-Xv1****
	SecretKey *string `json:"SecretKey,omitempty" xml:"SecretKey,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMonitoringAgentAccessKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentAccessKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentAccessKeyResponseBody) SetAccessKey(v string) *DescribeMonitoringAgentAccessKeyResponseBody {
	s.AccessKey = &v
	return s
}

func (s *DescribeMonitoringAgentAccessKeyResponseBody) SetCode(v int32) *DescribeMonitoringAgentAccessKeyResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitoringAgentAccessKeyResponseBody) SetMessage(v string) *DescribeMonitoringAgentAccessKeyResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitoringAgentAccessKeyResponseBody) SetRequestId(v string) *DescribeMonitoringAgentAccessKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitoringAgentAccessKeyResponseBody) SetSecretKey(v string) *DescribeMonitoringAgentAccessKeyResponseBody {
	s.SecretKey = &v
	return s
}

func (s *DescribeMonitoringAgentAccessKeyResponseBody) SetSuccess(v bool) *DescribeMonitoringAgentAccessKeyResponseBody {
	s.Success = &v
	return s
}

type DescribeMonitoringAgentAccessKeyResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitoringAgentAccessKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitoringAgentAccessKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentAccessKeyResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentAccessKeyResponse) SetHeaders(v map[string]*string) *DescribeMonitoringAgentAccessKeyResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitoringAgentAccessKeyResponse) SetStatusCode(v int32) *DescribeMonitoringAgentAccessKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitoringAgentAccessKeyResponse) SetBody(v *DescribeMonitoringAgentAccessKeyResponseBody) *DescribeMonitoringAgentAccessKeyResponse {
	s.Body = v
	return s
}

type DescribeMonitoringAgentConfigRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitoringAgentConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentConfigRequest) SetRegionId(v string) *DescribeMonitoringAgentConfigRequest {
	s.RegionId = &v
	return s
}

type DescribeMonitoringAgentConfigResponseBody struct {
	// Indicates whether the Cloud Monitor agent is automatically installed on existing Elastic Compute Service (ECS) instances. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	AutoInstall *bool `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	// The status code.
	//
	// >  The status code 200 indicates a success.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The service for which one-click alert is enabled.
	//
	// example:
	//
	// redis,rds,ecs
	EnableActiveAlert *string `json:"EnableActiveAlert,omitempty" xml:"EnableActiveAlert,omitempty"`
	// Indicates whether the Cloud Monitor agent is automatically installed on new ECS instances. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	EnableInstallAgentNewECS *bool `json:"EnableInstallAgentNewECS,omitempty" xml:"EnableInstallAgentNewECS,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// E9F4FA2A-54BE-4EF9-9D1D-1A0B1DC86B8D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful. Valid values:
	//
	// 	- true: successful.
	//
	// 	- false: failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMonitoringAgentConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentConfigResponseBody) SetAutoInstall(v bool) *DescribeMonitoringAgentConfigResponseBody {
	s.AutoInstall = &v
	return s
}

func (s *DescribeMonitoringAgentConfigResponseBody) SetCode(v string) *DescribeMonitoringAgentConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitoringAgentConfigResponseBody) SetEnableActiveAlert(v string) *DescribeMonitoringAgentConfigResponseBody {
	s.EnableActiveAlert = &v
	return s
}

func (s *DescribeMonitoringAgentConfigResponseBody) SetEnableInstallAgentNewECS(v bool) *DescribeMonitoringAgentConfigResponseBody {
	s.EnableInstallAgentNewECS = &v
	return s
}

func (s *DescribeMonitoringAgentConfigResponseBody) SetMessage(v string) *DescribeMonitoringAgentConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitoringAgentConfigResponseBody) SetRequestId(v string) *DescribeMonitoringAgentConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitoringAgentConfigResponseBody) SetSuccess(v bool) *DescribeMonitoringAgentConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeMonitoringAgentConfigResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitoringAgentConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitoringAgentConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentConfigResponse) SetHeaders(v map[string]*string) *DescribeMonitoringAgentConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitoringAgentConfigResponse) SetStatusCode(v int32) *DescribeMonitoringAgentConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitoringAgentConfigResponse) SetBody(v *DescribeMonitoringAgentConfigResponseBody) *DescribeMonitoringAgentConfigResponse {
	s.Body = v
	return s
}

type DescribeMonitoringAgentHostsRequest struct {
	// Specifies whether to query Elastic Compute Service (ECS) instances that are provided by Alibaba Cloud or to query hosts that are not provided by Alibaba Cloud. Valid values:
	//
	// 	- true (default value): queries all the ECS instances that are provided by Alibaba Cloud.
	//
	// 	- false: queries all the hosts that are not provided by Alibaba Cloud.
	//
	// example:
	//
	// true
	AliyunHost *bool `json:"AliyunHost,omitempty" xml:"AliyunHost,omitempty"`
	// The name of the host.
	//
	// example:
	//
	// hostNam1
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-a3d1q1pm2f9yr29e****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou
	InstanceRegionId *string `json:"InstanceRegionId,omitempty" xml:"InstanceRegionId,omitempty"`
	// The keyword that is used in fuzzy match.
	//
	// example:
	//
	// host1
	KeyWord *string `json:"KeyWord,omitempty" xml:"KeyWord,omitempty"`
	// The number of the page to return.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Valid values:
	//
	// 	- 10
	//
	// 	- 20
	//
	// 	- 50
	//
	// 	- 100
	//
	// > Although Alibaba Cloud does not limit the maximum value of this parameter, we recommend that you do not set it to an excessively large value. If you set it to an excessively large value, a timeout error may occur.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The serial number of the host.
	//
	// After the CloudMonitor agent is installed on a host, a globally unique serial number is generated. A host that is not provided by Alibaba Cloud has a serial number instead of an instance ID.
	//
	// > This parameter can be used to accurately search for a monitored host.
	//
	// example:
	//
	// a1ab31a3-1234-40f2-9e95-c8caa8f0****
	SerialNumbers *string `json:"SerialNumbers,omitempty" xml:"SerialNumbers,omitempty"`
	// The status of the hosts that you want to query. Valid values:
	//
	// 	- Running: queries the hosts that are running.
	//
	// 	- Stopped: queries the hosts that are stopped, are not installed, or fail to be installed.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The status of SysOM. Valid values:
	//
	// 	- installing: SysOM is being installed.
	//
	// 	- running: SysOM is running.
	//
	// 	- stopped: SysOM is stopped.
	//
	// 	- uninstalling: SysOM is being uninstalled.
	//
	// example:
	//
	// running
	SysomStatus *string `json:"SysomStatus,omitempty" xml:"SysomStatus,omitempty"`
}

func (s DescribeMonitoringAgentHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentHostsRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentHostsRequest) SetAliyunHost(v bool) *DescribeMonitoringAgentHostsRequest {
	s.AliyunHost = &v
	return s
}

func (s *DescribeMonitoringAgentHostsRequest) SetHostName(v string) *DescribeMonitoringAgentHostsRequest {
	s.HostName = &v
	return s
}

func (s *DescribeMonitoringAgentHostsRequest) SetInstanceIds(v string) *DescribeMonitoringAgentHostsRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeMonitoringAgentHostsRequest) SetInstanceRegionId(v string) *DescribeMonitoringAgentHostsRequest {
	s.InstanceRegionId = &v
	return s
}

func (s *DescribeMonitoringAgentHostsRequest) SetKeyWord(v string) *DescribeMonitoringAgentHostsRequest {
	s.KeyWord = &v
	return s
}

func (s *DescribeMonitoringAgentHostsRequest) SetPageNumber(v int32) *DescribeMonitoringAgentHostsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMonitoringAgentHostsRequest) SetPageSize(v int32) *DescribeMonitoringAgentHostsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeMonitoringAgentHostsRequest) SetRegionId(v string) *DescribeMonitoringAgentHostsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMonitoringAgentHostsRequest) SetSerialNumbers(v string) *DescribeMonitoringAgentHostsRequest {
	s.SerialNumbers = &v
	return s
}

func (s *DescribeMonitoringAgentHostsRequest) SetStatus(v string) *DescribeMonitoringAgentHostsRequest {
	s.Status = &v
	return s
}

func (s *DescribeMonitoringAgentHostsRequest) SetSysomStatus(v string) *DescribeMonitoringAgentHostsRequest {
	s.SysomStatus = &v
	return s
}

type DescribeMonitoringAgentHostsResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the call is successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the hosts.
	Hosts *DescribeMonitoringAgentHostsResponseBodyHosts `json:"Hosts,omitempty" xml:"Hosts,omitempty" type:"Struct"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of returned pages.
	//
	// example:
	//
	// 50
	PageTotal *int32 `json:"PageTotal,omitempty" xml:"PageTotal,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 63EEBB2A-9E51-41E4-9E83-5DE7F3B292E0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. Valid values:
	//
	// 	- true: The call is successful.
	//
	// 	- false: The call fails.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of returned entries.
	//
	// example:
	//
	// 10
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMonitoringAgentHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentHostsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentHostsResponseBody) SetCode(v string) *DescribeMonitoringAgentHostsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBody) SetHosts(v *DescribeMonitoringAgentHostsResponseBodyHosts) *DescribeMonitoringAgentHostsResponseBody {
	s.Hosts = v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBody) SetMessage(v string) *DescribeMonitoringAgentHostsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBody) SetPageNumber(v int32) *DescribeMonitoringAgentHostsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBody) SetPageSize(v int32) *DescribeMonitoringAgentHostsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBody) SetPageTotal(v int32) *DescribeMonitoringAgentHostsResponseBody {
	s.PageTotal = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBody) SetRequestId(v string) *DescribeMonitoringAgentHostsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBody) SetSuccess(v bool) *DescribeMonitoringAgentHostsResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBody) SetTotal(v int32) *DescribeMonitoringAgentHostsResponseBody {
	s.Total = &v
	return s
}

type DescribeMonitoringAgentHostsResponseBodyHosts struct {
	Host []*DescribeMonitoringAgentHostsResponseBodyHostsHost `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s DescribeMonitoringAgentHostsResponseBodyHosts) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentHostsResponseBodyHosts) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentHostsResponseBodyHosts) SetHost(v []*DescribeMonitoringAgentHostsResponseBodyHostsHost) *DescribeMonitoringAgentHostsResponseBodyHosts {
	s.Host = v
	return s
}

type DescribeMonitoringAgentHostsResponseBodyHostsHost struct {
	// The version of the CloudMonitor agent.
	//
	// example:
	//
	// 3.4.6
	AgentVersion *string `json:"AgentVersion,omitempty" xml:"AgentVersion,omitempty"`
	// The ID of the Alibaba Cloud account.
	//
	// example:
	//
	// 103201326074****
	AliUid *int64 `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	// The elastic IP address (EIP) of the host.
	//
	// example:
	//
	// 192.168.XX.XX
	EipAddress *string `json:"EipAddress,omitempty" xml:"EipAddress,omitempty"`
	// The ID of the EIP.
	//
	// example:
	//
	// eip-bp16i16k9gcezyfrp****
	EipId *string `json:"EipId,omitempty" xml:"EipId,omitempty"`
	// The name of the host.
	//
	// example:
	//
	// hostIP
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-a2d5q7pm3f9yr212****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the ECS instance.
	//
	// example:
	//
	// ecs.n4
	InstanceTypeFamily *string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	// The IP address of the host.
	//
	// > Multiple IP addresses are separated with commas (,).
	//
	// example:
	//
	// 192.168.XX.XX
	IpGroup *string `json:"IpGroup,omitempty" xml:"IpGroup,omitempty"`
	// The IP address of the Network Address Translation (NAT) gateway.
	//
	// example:
	//
	// 192.168.XX.XX
	NatIp *string `json:"NatIp,omitempty" xml:"NatIp,omitempty"`
	// The network type.
	//
	// example:
	//
	// vpc
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	// The operating system.
	//
	// example:
	//
	// Linux
	OperatingSystem *string `json:"OperatingSystem,omitempty" xml:"OperatingSystem,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The serial number of the host. A host that is not provided by Alibaba Cloud has a serial number instead of an instance ID.
	//
	// > This parameter can be used to accurately search for a monitored host.
	//
	// example:
	//
	// x12335-6cc8-4a22-9f21-1a00a719****
	SerialNumber *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	// Indicates whether the host is provided by Alibaba Cloud. Valid values:
	//
	// 	- true: The host is provided by Alibaba Cloud.
	//
	// 	- false: The host is not provided by Alibaba Cloud.
	//
	// example:
	//
	// true
	IsAliyunHost *bool `json:"isAliyunHost,omitempty" xml:"isAliyunHost,omitempty"`
}

func (s DescribeMonitoringAgentHostsResponseBodyHostsHost) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentHostsResponseBodyHostsHost) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetAgentVersion(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.AgentVersion = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetAliUid(v int64) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.AliUid = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetEipAddress(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.EipAddress = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetEipId(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.EipId = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetHostName(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.HostName = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetInstanceId(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.InstanceId = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetInstanceTypeFamily(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetIpGroup(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.IpGroup = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetNatIp(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.NatIp = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetNetworkType(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.NetworkType = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetOperatingSystem(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.OperatingSystem = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetRegion(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.Region = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetSerialNumber(v string) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.SerialNumber = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponseBodyHostsHost) SetIsAliyunHost(v bool) *DescribeMonitoringAgentHostsResponseBodyHostsHost {
	s.IsAliyunHost = &v
	return s
}

type DescribeMonitoringAgentHostsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitoringAgentHostsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitoringAgentHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentHostsResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentHostsResponse) SetHeaders(v map[string]*string) *DescribeMonitoringAgentHostsResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitoringAgentHostsResponse) SetStatusCode(v int32) *DescribeMonitoringAgentHostsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitoringAgentHostsResponse) SetBody(v *DescribeMonitoringAgentHostsResponseBody) *DescribeMonitoringAgentHostsResponse {
	s.Body = v
	return s
}

type DescribeMonitoringAgentProcessesRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-hp3hl3cx1pbahzy8****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitoringAgentProcessesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentProcessesRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentProcessesRequest) SetInstanceId(v string) *DescribeMonitoringAgentProcessesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeMonitoringAgentProcessesRequest) SetRegionId(v string) *DescribeMonitoringAgentProcessesRequest {
	s.RegionId = &v
	return s
}

type DescribeMonitoringAgentProcessesResponseBody struct {
	// The HTTP status code.
	//
	// >  The value 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The information about the processes.
	NodeProcesses *DescribeMonitoringAgentProcessesResponseBodyNodeProcesses `json:"NodeProcesses,omitempty" xml:"NodeProcesses,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// C11C0E85-6862-4F25-8D66-D6A5E0882984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMonitoringAgentProcessesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentProcessesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentProcessesResponseBody) SetCode(v string) *DescribeMonitoringAgentProcessesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponseBody) SetMessage(v string) *DescribeMonitoringAgentProcessesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponseBody) SetNodeProcesses(v *DescribeMonitoringAgentProcessesResponseBodyNodeProcesses) *DescribeMonitoringAgentProcessesResponseBody {
	s.NodeProcesses = v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponseBody) SetRequestId(v string) *DescribeMonitoringAgentProcessesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponseBody) SetSuccess(v bool) *DescribeMonitoringAgentProcessesResponseBody {
	s.Success = &v
	return s
}

type DescribeMonitoringAgentProcessesResponseBodyNodeProcesses struct {
	NodeProcess []*DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess `json:"NodeProcess,omitempty" xml:"NodeProcess,omitempty" type:"Repeated"`
}

func (s DescribeMonitoringAgentProcessesResponseBodyNodeProcesses) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentProcessesResponseBodyNodeProcesses) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentProcessesResponseBodyNodeProcesses) SetNodeProcess(v []*DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess) *DescribeMonitoringAgentProcessesResponseBodyNodeProcesses {
	s.NodeProcess = v
	return s
}

type DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess struct {
	// The command used to obtain the number of processes. Valid value: `number`.
	//
	// >  The `number` command obtains the number of processes that match the condition.
	//
	// example:
	//
	// number
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 3619****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-hp3hl3cx1pbahzy8****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the process.
	//
	// example:
	//
	// 234567
	ProcessId *int64 `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
	// The name of the process.
	//
	// example:
	//
	// Nginx
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	// The user who launched the process.
	//
	// example:
	//
	// alice
	ProcessUser *string `json:"ProcessUser,omitempty" xml:"ProcessUser,omitempty"`
}

func (s DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess) SetCommand(v string) *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess {
	s.Command = &v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess) SetGroupId(v string) *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess {
	s.GroupId = &v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess) SetInstanceId(v string) *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess {
	s.InstanceId = &v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess) SetProcessId(v int64) *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess {
	s.ProcessId = &v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess) SetProcessName(v string) *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess {
	s.ProcessName = &v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess) SetProcessUser(v string) *DescribeMonitoringAgentProcessesResponseBodyNodeProcessesNodeProcess {
	s.ProcessUser = &v
	return s
}

type DescribeMonitoringAgentProcessesResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitoringAgentProcessesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitoringAgentProcessesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentProcessesResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentProcessesResponse) SetHeaders(v map[string]*string) *DescribeMonitoringAgentProcessesResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponse) SetStatusCode(v int32) *DescribeMonitoringAgentProcessesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitoringAgentProcessesResponse) SetBody(v *DescribeMonitoringAgentProcessesResponseBody) *DescribeMonitoringAgentProcessesResponse {
	s.Body = v
	return s
}

type DescribeMonitoringAgentStatusesRequest struct {
	// The ID of the availability monitoring task.
	//
	// example:
	//
	// 126****
	HostAvailabilityTaskId *string `json:"HostAvailabilityTaskId,omitempty" xml:"HostAvailabilityTaskId,omitempty"`
	// The instance IDs. Separate multiple instance IDs with commas (,).
	//
	// example:
	//
	// i-hp3dunahluwajv6f****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitoringAgentStatusesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentStatusesRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentStatusesRequest) SetHostAvailabilityTaskId(v string) *DescribeMonitoringAgentStatusesRequest {
	s.HostAvailabilityTaskId = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesRequest) SetInstanceIds(v string) *DescribeMonitoringAgentStatusesRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesRequest) SetRegionId(v string) *DescribeMonitoringAgentStatusesRequest {
	s.RegionId = &v
	return s
}

type DescribeMonitoringAgentStatusesResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The host status information.
	NodeStatusList *DescribeMonitoringAgentStatusesResponseBodyNodeStatusList `json:"NodeStatusList,omitempty" xml:"NodeStatusList,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 6F8371DF-AB81-41B8-9E1B-5493B3FF0E4F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMonitoringAgentStatusesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentStatusesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentStatusesResponseBody) SetCode(v string) *DescribeMonitoringAgentStatusesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBody) SetMessage(v string) *DescribeMonitoringAgentStatusesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBody) SetNodeStatusList(v *DescribeMonitoringAgentStatusesResponseBodyNodeStatusList) *DescribeMonitoringAgentStatusesResponseBody {
	s.NodeStatusList = v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBody) SetRequestId(v string) *DescribeMonitoringAgentStatusesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBody) SetSuccess(v bool) *DescribeMonitoringAgentStatusesResponseBody {
	s.Success = &v
	return s
}

type DescribeMonitoringAgentStatusesResponseBodyNodeStatusList struct {
	NodeStatus []*DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus `json:"NodeStatus,omitempty" xml:"NodeStatus,omitempty" type:"Repeated"`
}

func (s DescribeMonitoringAgentStatusesResponseBodyNodeStatusList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentStatusesResponseBodyNodeStatusList) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentStatusesResponseBodyNodeStatusList) SetNodeStatus(v []*DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) *DescribeMonitoringAgentStatusesResponseBodyNodeStatusList {
	s.NodeStatus = v
	return s
}

type DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus struct {
	// The error code returned when the CloudMonitor agent is installed. Valid values:
	//
	// 	- Common.Timeout: The installation timed out.
	//
	// 	- Common.SLR: The service-linked role for CloudMonitor is unauthorized.
	//
	// 	- Common.OS: The operating system is not supported.
	//
	// 	- Assist.Invalid: Cloud Assistant is not running.
	//
	// 	- Assist.Invoke: An error occurred when the installation program is started.
	//
	// 	- Assist.Execute: An error occurred when the installation program is running.
	AgentInstallErrorCode *string `json:"AgentInstallErrorCode,omitempty" xml:"AgentInstallErrorCode,omitempty"`
	// Indicates whether the CloudMonitor agent is automatically installed. Valid values:
	//
	// 	- true: The CloudMonitor agent is automatically installed.
	//
	// 	- false: The CloudMonitor agent is not automatically installed.
	//
	// example:
	//
	// true
	AutoInstall *bool `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	// The instance ID.
	//
	// example:
	//
	// i-hp3dunahluwajv6f****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Indicates whether the SysAK monitoring feature is enabled.`` Valid values:
	//
	// 	- `true`: The SysAK monitoring feature is enabled.
	//
	// 	- `false`: the SysAK monitoring feature is disabled.
	//
	// example:
	//
	// {"sysak":true}
	OsMonitorConfig *string `json:"OsMonitorConfig,omitempty" xml:"OsMonitorConfig,omitempty"`
	// The error status of SysOM. Valid values:
	//
	// 	- `install_fail`: SysOM fails to be installed or an unknown error occurs.
	//
	// 	- `install_assist_invalid`: SysOM fails to be installed because the status of Cloud Assistant is invalid.
	//
	// 	- `install_assist_command_fail`: SysOM fails to be installed because the installation command fails to run.
	//
	// 	- `uninstall_fail`: SysOM fails to be uninstalled or an unknown error occurs.
	//
	// 	- `uninstall_assist_invalid`: SysOM fails to be uninstalled because the status of Cloud Assistant is invalid.
	//
	// 	- `uninstall_assist_command_fail`: SysOM fails to be uninstalled because the uninstallation command fails to run.
	//
	// example:
	//
	// install_fail
	OsMonitorErrorCode *string `json:"OsMonitorErrorCode,omitempty" xml:"OsMonitorErrorCode,omitempty"`
	// The details of the execution error. Valid values:
	//
	// 	- `Command.ErrorCode.Fail.Downlaod.REGIN_ID`: Failed to obtain the region ID.
	//
	// 	- `Command.ErrorCode.Fail.Downlaod.SYSAK`: Failed to download the .rpm package of System Analyse Kit (SysAK).
	//
	// 	- `Command.ErrorCode.Fail.Downlaod.CMON_FILE`: Failed to download the CMON file.
	//
	// 	- `Command.ErrorCode.Fail.Downlaod.BTF`: Failed to start SysAK because the BTF file is not found.
	//
	// 	- `Command.ErrorCode.Fail.Start.SYSAK`: Failed to start SysAK due to an unknown error.
	//
	// example:
	//
	// Command.ErrorCode.Fail.Downlaod.REGIN_ID
	OsMonitorErrorDetail *string `json:"OsMonitorErrorDetail,omitempty" xml:"OsMonitorErrorDetail,omitempty"`
	// The status of SysOM. Valid values:
	//
	// 	- installing: SysOM is being installed.
	//
	// 	- running: SysOM is running.
	//
	// 	- stopped: SysOM is stopped.
	//
	// 	- uninstalling: SysOM is being uninstalled.
	//
	// example:
	//
	// running
	OsMonitorStatus *string `json:"OsMonitorStatus,omitempty" xml:"OsMonitorStatus,omitempty"`
	// The SysOM version.
	//
	// example:
	//
	// 1.3.0-12
	OsMonitorVersion *string `json:"OsMonitorVersion,omitempty" xml:"OsMonitorVersion,omitempty"`
	// The status of the CloudMonitor agent. Valid values:
	//
	// 	- running: The CloudMonitor agent is running.
	//
	// 	- stopped: The CloudMonitor agent is stopped.
	//
	// 	- installing: The CloudMonitor agent is being installed.
	//
	// 	- install_faild: The CloudMonitor agent fails to be installed.
	//
	// 	- abnormal: The CloudMonitor agent is not properly installed.
	//
	// 	- not_installed: The CloudMonitor agent is not installed.
	//
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) SetAgentInstallErrorCode(v string) *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus {
	s.AgentInstallErrorCode = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) SetAutoInstall(v bool) *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus {
	s.AutoInstall = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) SetInstanceId(v string) *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus {
	s.InstanceId = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) SetOsMonitorConfig(v string) *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus {
	s.OsMonitorConfig = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) SetOsMonitorErrorCode(v string) *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus {
	s.OsMonitorErrorCode = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) SetOsMonitorErrorDetail(v string) *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus {
	s.OsMonitorErrorDetail = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) SetOsMonitorStatus(v string) *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus {
	s.OsMonitorStatus = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) SetOsMonitorVersion(v string) *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus {
	s.OsMonitorVersion = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus) SetStatus(v string) *DescribeMonitoringAgentStatusesResponseBodyNodeStatusListNodeStatus {
	s.Status = &v
	return s
}

type DescribeMonitoringAgentStatusesResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitoringAgentStatusesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitoringAgentStatusesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringAgentStatusesResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringAgentStatusesResponse) SetHeaders(v map[string]*string) *DescribeMonitoringAgentStatusesResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponse) SetStatusCode(v int32) *DescribeMonitoringAgentStatusesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitoringAgentStatusesResponse) SetBody(v *DescribeMonitoringAgentStatusesResponseBody) *DescribeMonitoringAgentStatusesResponse {
	s.Body = v
	return s
}

type DescribeMonitoringConfigRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeMonitoringConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringConfigRequest) SetRegionId(v string) *DescribeMonitoringConfigRequest {
	s.RegionId = &v
	return s
}

type DescribeMonitoringConfigResponseBody struct {
	// Indicates whether the Cloud Monitor agent is automatically installed on existing ECS instances. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// false
	AutoInstall *bool `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the Cloud Monitor agent is automatically installed on new Elastic Compute Service (ECS) instances. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	EnableInstallAgentNewECS *bool `json:"EnableInstallAgentNewECS,omitempty" xml:"EnableInstallAgentNewECS,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// F35654DB-0C9D-4FB3-903F-479BA7663061
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeMonitoringConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringConfigResponseBody) SetAutoInstall(v bool) *DescribeMonitoringConfigResponseBody {
	s.AutoInstall = &v
	return s
}

func (s *DescribeMonitoringConfigResponseBody) SetCode(v string) *DescribeMonitoringConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeMonitoringConfigResponseBody) SetEnableInstallAgentNewECS(v bool) *DescribeMonitoringConfigResponseBody {
	s.EnableInstallAgentNewECS = &v
	return s
}

func (s *DescribeMonitoringConfigResponseBody) SetMessage(v string) *DescribeMonitoringConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeMonitoringConfigResponseBody) SetRequestId(v string) *DescribeMonitoringConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMonitoringConfigResponseBody) SetSuccess(v bool) *DescribeMonitoringConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeMonitoringConfigResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMonitoringConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMonitoringConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMonitoringConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeMonitoringConfigResponse) SetHeaders(v map[string]*string) *DescribeMonitoringConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeMonitoringConfigResponse) SetStatusCode(v int32) *DescribeMonitoringConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMonitoringConfigResponse) SetBody(v *DescribeMonitoringConfigResponseBody) *DescribeMonitoringConfigResponse {
	s.Body = v
	return s
}

type DescribeProductResourceTagKeyListRequest struct {
	// The pagination cursor.
	//
	// example:
	//
	// dbc2826f237e****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeProductResourceTagKeyListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductResourceTagKeyListRequest) GoString() string {
	return s.String()
}

func (s *DescribeProductResourceTagKeyListRequest) SetNextToken(v string) *DescribeProductResourceTagKeyListRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeProductResourceTagKeyListRequest) SetRegionId(v string) *DescribeProductResourceTagKeyListRequest {
	s.RegionId = &v
	return s
}

type DescribeProductResourceTagKeyListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The request processing has failed due to some unknown error.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The pagination cursor. If more entries are to be returned on the next page, a pagination cursor is returned.
	//
	// >  If the value of this parameter is not null, more entries are to be returned on the next page. You can use the returned pagination cursor as a request parameter to obtain entries on the next page. If the value of this parameter is null, all the entries have been returned.
	//
	// example:
	//
	// dbc2826f237e****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 945ACAA9-89F2-4A62-8913-076FDEDAA8DB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The keys of tags.
	TagKeys *DescribeProductResourceTagKeyListResponseBodyTagKeys `json:"TagKeys,omitempty" xml:"TagKeys,omitempty" type:"Struct"`
}

func (s DescribeProductResourceTagKeyListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductResourceTagKeyListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProductResourceTagKeyListResponseBody) SetCode(v string) *DescribeProductResourceTagKeyListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProductResourceTagKeyListResponseBody) SetMessage(v string) *DescribeProductResourceTagKeyListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProductResourceTagKeyListResponseBody) SetNextToken(v string) *DescribeProductResourceTagKeyListResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeProductResourceTagKeyListResponseBody) SetRequestId(v string) *DescribeProductResourceTagKeyListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProductResourceTagKeyListResponseBody) SetSuccess(v bool) *DescribeProductResourceTagKeyListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeProductResourceTagKeyListResponseBody) SetTagKeys(v *DescribeProductResourceTagKeyListResponseBodyTagKeys) *DescribeProductResourceTagKeyListResponseBody {
	s.TagKeys = v
	return s
}

type DescribeProductResourceTagKeyListResponseBodyTagKeys struct {
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s DescribeProductResourceTagKeyListResponseBodyTagKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductResourceTagKeyListResponseBodyTagKeys) GoString() string {
	return s.String()
}

func (s *DescribeProductResourceTagKeyListResponseBodyTagKeys) SetTagKey(v []*string) *DescribeProductResourceTagKeyListResponseBodyTagKeys {
	s.TagKey = v
	return s
}

type DescribeProductResourceTagKeyListResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProductResourceTagKeyListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProductResourceTagKeyListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductResourceTagKeyListResponse) GoString() string {
	return s.String()
}

func (s *DescribeProductResourceTagKeyListResponse) SetHeaders(v map[string]*string) *DescribeProductResourceTagKeyListResponse {
	s.Headers = v
	return s
}

func (s *DescribeProductResourceTagKeyListResponse) SetStatusCode(v int32) *DescribeProductResourceTagKeyListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProductResourceTagKeyListResponse) SetBody(v *DescribeProductResourceTagKeyListResponseBody) *DescribeProductResourceTagKeyListResponse {
	s.Body = v
	return s
}

type DescribeProductsOfActiveMetricRuleRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeProductsOfActiveMetricRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductsOfActiveMetricRuleRequest) GoString() string {
	return s.String()
}

func (s *DescribeProductsOfActiveMetricRuleRequest) SetRegionId(v string) *DescribeProductsOfActiveMetricRuleRequest {
	s.RegionId = &v
	return s
}

type DescribeProductsOfActiveMetricRuleResponseBody struct {
	// The information about the services for which one-click alert is enabled.
	AllProductInitMetricRuleList *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleList `json:"AllProductInitMetricRuleList,omitempty" xml:"AllProductInitMetricRuleList,omitempty" type:"Struct"`
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the services for which one-click alert is enabled. Services are separated with commas (,). Valid values:
	//
	// 	- ecs: Elastic Compute Service (ECS)
	//
	// 	- rds: ApsaraDB RDS
	//
	// 	- slb: Server Load Balancer (SLB)
	//
	// 	- redis_standard: ApsaraDB for Redis of the standard architecture
	//
	// 	- redis_sharding: ApsaraDB for Redis of the cluster architecture
	//
	// 	- redis_splitrw: ApsaraDB for Redis of the read/write splitting architecture
	//
	// 	- mongodb: ApsaraDB for MongoDB of the replica set architecture
	//
	// 	- mongodb_sharding: ApsaraDB for MongoDB of the sharded cluster architecture
	//
	// 	- hbase: ApsaraDB for HBase
	//
	// 	- elasticsearch: Elasticsearch
	//
	// 	- opensearch: OpenSearch
	//
	// example:
	//
	// ecs,rds
	Datapoints *string `json:"Datapoints,omitempty" xml:"Datapoints,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// F82E6667-7811-4BA0-842F-5B2DC42BBAAD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true: The request was successful.
	//
	// 	- false: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeProductsOfActiveMetricRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductsOfActiveMetricRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProductsOfActiveMetricRuleResponseBody) SetAllProductInitMetricRuleList(v *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleList) *DescribeProductsOfActiveMetricRuleResponseBody {
	s.AllProductInitMetricRuleList = v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBody) SetCode(v int32) *DescribeProductsOfActiveMetricRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBody) SetDatapoints(v string) *DescribeProductsOfActiveMetricRuleResponseBody {
	s.Datapoints = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBody) SetMessage(v string) *DescribeProductsOfActiveMetricRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBody) SetRequestId(v string) *DescribeProductsOfActiveMetricRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBody) SetSuccess(v bool) *DescribeProductsOfActiveMetricRuleResponseBody {
	s.Success = &v
	return s
}

type DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleList struct {
	AllProductInitMetricRule []*DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRule `json:"AllProductInitMetricRule,omitempty" xml:"AllProductInitMetricRule,omitempty" type:"Repeated"`
}

func (s DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleList) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleList) GoString() string {
	return s.String()
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleList) SetAllProductInitMetricRule(v []*DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRule) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleList {
	s.AllProductInitMetricRule = v
	return s
}

type DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRule struct {
	// The initial alert rules that are generated after one-click alert is enabled for a service.
	AlertInitConfigList *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigList `json:"AlertInitConfigList,omitempty" xml:"AlertInitConfigList,omitempty" type:"Struct"`
	// The abbreviation of the service name.
	//
	// example:
	//
	// ecs
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
}

func (s DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRule) GoString() string {
	return s.String()
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRule) SetAlertInitConfigList(v *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigList) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRule {
	s.AlertInitConfigList = v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRule) SetProduct(v string) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRule {
	s.Product = &v
	return s
}

type DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigList struct {
	AlertInitConfig []*DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig `json:"AlertInitConfig,omitempty" xml:"AlertInitConfig,omitempty" type:"Repeated"`
}

func (s DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigList) GoString() string {
	return s.String()
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigList) SetAlertInitConfig(v []*DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigList {
	s.AlertInitConfig = v
	return s
}

type DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig struct {
	// The operator that is used to compare the metric value with the threshold for Warn-level alerts.
	//
	// Valid values:
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- NotEqualToThreshold: does not equal to the threshold
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an alert is triggered.
	//
	// example:
	//
	// 3
	EvaluationCount *string `json:"EvaluationCount,omitempty" xml:"EvaluationCount,omitempty"`
	// The alert level.
	//
	// Valid values:
	//
	// 	- INFO
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- WARN
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CRITICAL
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// CRITICAL
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The metric name. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the service. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_rds_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The aggregation period of monitoring data. Unit: minutes. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// 1m
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The method used to calculate metric values that trigger alerts. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The alert threshold.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
}

func (s DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) GoString() string {
	return s.String()
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) SetComparisonOperator(v string) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) SetEvaluationCount(v string) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig {
	s.EvaluationCount = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) SetLevel(v string) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig {
	s.Level = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) SetMetricName(v string) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig {
	s.MetricName = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) SetNamespace(v string) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig {
	s.Namespace = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) SetPeriod(v string) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig {
	s.Period = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) SetStatistics(v string) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig {
	s.Statistics = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig) SetThreshold(v string) *DescribeProductsOfActiveMetricRuleResponseBodyAllProductInitMetricRuleListAllProductInitMetricRuleAlertInitConfigListAlertInitConfig {
	s.Threshold = &v
	return s
}

type DescribeProductsOfActiveMetricRuleResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProductsOfActiveMetricRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProductsOfActiveMetricRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProductsOfActiveMetricRuleResponse) GoString() string {
	return s.String()
}

func (s *DescribeProductsOfActiveMetricRuleResponse) SetHeaders(v map[string]*string) *DescribeProductsOfActiveMetricRuleResponse {
	s.Headers = v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponse) SetStatusCode(v int32) *DescribeProductsOfActiveMetricRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProductsOfActiveMetricRuleResponse) SetBody(v *DescribeProductsOfActiveMetricRuleResponseBody) *DescribeProductsOfActiveMetricRuleResponse {
	s.Body = v
	return s
}

type DescribeProjectMetaRequest struct {
	// The tags. Tags are used to filter services.
	//
	// You can filter services only by the tag whose `name` is `product`. Example: {"name":"product","value":"ECS"}.
	//
	// > We recommend that you do not use the special tags in the CloudMonitor console.
	//
	// example:
	//
	// [{"name":"product","value":"ECS"}]
	Labels *string `json:"Labels,omitempty" xml:"Labels,omitempty"`
	// The page number.
	//
	// Valid values: 1 to 100.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Valid values: 1 to 10000.
	//
	// Default value: 30.
	//
	// > The value of this parameter is not limited. You can view a large number of entries per page.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeProjectMetaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectMetaRequest) GoString() string {
	return s.String()
}

func (s *DescribeProjectMetaRequest) SetLabels(v string) *DescribeProjectMetaRequest {
	s.Labels = &v
	return s
}

func (s *DescribeProjectMetaRequest) SetPageNumber(v int32) *DescribeProjectMetaRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeProjectMetaRequest) SetPageSize(v int32) *DescribeProjectMetaRequest {
	s.PageSize = &v
	return s
}

type DescribeProjectMetaResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 5
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4C2061B2-3B1B-43BF-A4A4-C53426F479C0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the cloud service.
	Resources *DescribeProjectMetaResponseBodyResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values: true: The request was successful. false: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 12
	Total *string `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeProjectMetaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectMetaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeProjectMetaResponseBody) SetCode(v string) *DescribeProjectMetaResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeProjectMetaResponseBody) SetMessage(v string) *DescribeProjectMetaResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeProjectMetaResponseBody) SetPageNumber(v string) *DescribeProjectMetaResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeProjectMetaResponseBody) SetPageSize(v string) *DescribeProjectMetaResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeProjectMetaResponseBody) SetRequestId(v string) *DescribeProjectMetaResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeProjectMetaResponseBody) SetResources(v *DescribeProjectMetaResponseBodyResources) *DescribeProjectMetaResponseBody {
	s.Resources = v
	return s
}

func (s *DescribeProjectMetaResponseBody) SetSuccess(v bool) *DescribeProjectMetaResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeProjectMetaResponseBody) SetTotal(v string) *DescribeProjectMetaResponseBody {
	s.Total = &v
	return s
}

type DescribeProjectMetaResponseBodyResources struct {
	Resource []*DescribeProjectMetaResponseBodyResourcesResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeProjectMetaResponseBodyResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectMetaResponseBodyResources) GoString() string {
	return s.String()
}

func (s *DescribeProjectMetaResponseBodyResources) SetResource(v []*DescribeProjectMetaResponseBodyResourcesResource) *DescribeProjectMetaResponseBodyResources {
	s.Resource = v
	return s
}

type DescribeProjectMetaResponseBodyResourcesResource struct {
	// The description.
	//
	// example:
	//
	// CDN
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The tags. Tags are used to filter services.
	//
	// Tags are returned in the following format: `[{"name":"Tag key","value":"Tag value"}, {"name":"Tag key","value":"Tag value"}]`. The following tags are commonly used:
	//
	// 	- alertUnit: the unit of the metric value in alerts. If the unit is small, the original metric value may be too large. In this case, you can use the `alertUnit` tag to specify an appropriate unit. This tag is used in CloudMonitor.
	//
	// 	- minAlertPeriod: the minimum time interval to report a new alert. The interval at which monitoring data is reported. The value is usually 1 minute.
	//
	// 	- metricCategory: the service specification. Example: kvstore_sharding. Some Alibaba Cloud services have multiple specifications that are defined in the same namespace. This parameter is used to identify the specifications.
	//
	// 	- is_alarm: indicates whether an alert rule can be configured. We recommend that you do not use the special tags in the CloudMonitor console.
	//
	// example:
	//
	// [{"groupFlag":true}]
	Labels *string `json:"Labels,omitempty" xml:"Labels,omitempty"`
	// The namespace of the cloud service. Format: `acs_Service name abbreviation`. For more information about namespaces, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_cdn
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s DescribeProjectMetaResponseBodyResourcesResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectMetaResponseBodyResourcesResource) GoString() string {
	return s.String()
}

func (s *DescribeProjectMetaResponseBodyResourcesResource) SetDescription(v string) *DescribeProjectMetaResponseBodyResourcesResource {
	s.Description = &v
	return s
}

func (s *DescribeProjectMetaResponseBodyResourcesResource) SetLabels(v string) *DescribeProjectMetaResponseBodyResourcesResource {
	s.Labels = &v
	return s
}

func (s *DescribeProjectMetaResponseBodyResourcesResource) SetNamespace(v string) *DescribeProjectMetaResponseBodyResourcesResource {
	s.Namespace = &v
	return s
}

type DescribeProjectMetaResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeProjectMetaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeProjectMetaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeProjectMetaResponse) GoString() string {
	return s.String()
}

func (s *DescribeProjectMetaResponse) SetHeaders(v map[string]*string) *DescribeProjectMetaResponse {
	s.Headers = v
	return s
}

func (s *DescribeProjectMetaResponse) SetStatusCode(v int32) *DescribeProjectMetaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeProjectMetaResponse) SetBody(v *DescribeProjectMetaResponseBody) *DescribeProjectMetaResponse {
	s.Body = v
	return s
}

type DescribeSiteMonitorAttributeRequest struct {
	// Specifies whether to return the information of the alert rules that are configured for the site monitoring task. Valid values:
	//
	// 	- true: The system returns the information of the alert rules that are configured for the site monitoring task.
	//
	// 	- false (default): The system does not return the information of the alert rules that are configured for the site monitoring task.
	//
	// example:
	//
	// false
	IncludeAlert *bool   `json:"IncludeAlert,omitempty" xml:"IncludeAlert,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the site monitoring task.
	//
	// This parameter is required.
	//
	// example:
	//
	// cc641dff-c19d-45f3-ad0a-818a0c4f****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeSiteMonitorAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeRequest) SetIncludeAlert(v bool) *DescribeSiteMonitorAttributeRequest {
	s.IncludeAlert = &v
	return s
}

func (s *DescribeSiteMonitorAttributeRequest) SetRegionId(v string) *DescribeSiteMonitorAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSiteMonitorAttributeRequest) SetTaskId(v string) *DescribeSiteMonitorAttributeRequest {
	s.TaskId = &v
	return s
}

type DescribeSiteMonitorAttributeResponseBody struct {
	// The response code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The information of the alert rules that are configured for the site monitoring task.
	MetricRules *DescribeSiteMonitorAttributeResponseBodyMetricRules `json:"MetricRules,omitempty" xml:"MetricRules,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// D17DF650-7EBD-54D0-903A-1D4E624D7402
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the site monitoring task.
	SiteMonitors *DescribeSiteMonitorAttributeResponseBodySiteMonitors `json:"SiteMonitors,omitempty" xml:"SiteMonitors,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSiteMonitorAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBody) SetCode(v string) *DescribeSiteMonitorAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBody) SetMessage(v string) *DescribeSiteMonitorAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBody) SetMetricRules(v *DescribeSiteMonitorAttributeResponseBodyMetricRules) *DescribeSiteMonitorAttributeResponseBody {
	s.MetricRules = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBody) SetRequestId(v string) *DescribeSiteMonitorAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBody) SetSiteMonitors(v *DescribeSiteMonitorAttributeResponseBodySiteMonitors) *DescribeSiteMonitorAttributeResponseBody {
	s.SiteMonitors = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBody) SetSuccess(v bool) *DescribeSiteMonitorAttributeResponseBody {
	s.Success = &v
	return s
}

type DescribeSiteMonitorAttributeResponseBodyMetricRules struct {
	MetricRule []*DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule `json:"MetricRule,omitempty" xml:"MetricRule,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodyMetricRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodyMetricRules) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRules) SetMetricRule(v []*DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) *DescribeSiteMonitorAttributeResponseBodyMetricRules {
	s.MetricRule = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule struct {
	// Indicates whether the alert rule is enabled. Valid values:
	//
	// 	- true: The alert rule is enabled.
	//
	// 	- false: The alert rule is disabled.
	//
	// example:
	//
	// true
	ActionEnable *string `json:"ActionEnable,omitempty" xml:"ActionEnable,omitempty"`
	// The alert contact group to which alert notifications are sent.
	//
	// example:
	//
	// CloudMonitor
	AlarmActions *string `json:"AlarmActions,omitempty" xml:"AlarmActions,omitempty"`
	// The operator that is used to compare the metric value with the threshold in the alert rule. Valid values:
	//
	// 	- `>=`
	//
	// 	- `>`
	//
	// 	- `<=`
	//
	// 	- `<`
	//
	// 	- `=`
	//
	// 	- `!=`
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanYesterday
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The dimension of the alert rule.
	//
	// example:
	//
	// [{"taskId": "cc641dff-c19d-45f3-ad0a-818a0c4f****" }]
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an alert is triggered.
	//
	// example:
	//
	// 3
	EvaluationCount *string `json:"EvaluationCount,omitempty" xml:"EvaluationCount,omitempty"`
	// The expression that is used to trigger alerts.
	//
	// example:
	//
	// $Availability=30
	Expression *string `json:"Expression,omitempty" xml:"Expression,omitempty"`
	// The alert severity. Valid values:
	//
	// 	- 1: critical
	//
	// 	- 2: warning
	//
	// 	- 3: information
	//
	// example:
	//
	// 2
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The metric name.
	//
	// example:
	//
	// Availability
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// The value is in the following format: acs_service name.
	//
	// example:
	//
	// acs_networkmonitor
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The alert contact group that receives alert notifications.
	//
	// example:
	//
	// [ "CloudMonitor"]
	OkActions *string `json:"OkActions,omitempty" xml:"OkActions,omitempty"`
	// The time interval. The value is the same as the interval at which metric data is reported. Unit: seconds.
	//
	// >  If you specify a statistical period for the alert rule, data is queried based on the statistical period.
	//
	// example:
	//
	// 15s
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The ID of the alert rule.
	//
	// example:
	//
	// bf071ae_7b7aec3817b0fdf****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// rule1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The alert status. Valid values:
	//
	// 	- OK: The alert rule has no active alerts.
	//
	// 	- ALARM: The alert rule has active alerts.
	//
	// example:
	//
	// OK
	StateValue *string `json:"StateValue,omitempty" xml:"StateValue,omitempty"`
	// The statistical method of the alert rule. Valid values:
	//
	// 	- Availability: the percentage of available detection points
	//
	// 	- AvailableNumber: the number of available detection points
	//
	// 	- ErrorCodeMaximum: a status code for an alert
	//
	// 	- ErrorCodeMinimum: all status codes for a set of alerts
	//
	// 	- Average: response time
	//
	// example:
	//
	// Availability
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The alert threshold.
	//
	// example:
	//
	// 30
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
}

func (s DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetActionEnable(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.ActionEnable = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetAlarmActions(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.AlarmActions = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetComparisonOperator(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetDimensions(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.Dimensions = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetEvaluationCount(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.EvaluationCount = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetExpression(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.Expression = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetLevel(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.Level = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetMetricName(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.MetricName = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetNamespace(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.Namespace = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetOkActions(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.OkActions = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetPeriod(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.Period = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetRuleId(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.RuleId = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetRuleName(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.RuleName = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetStateValue(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.StateValue = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetStatistics(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.Statistics = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule) SetThreshold(v string) *DescribeSiteMonitorAttributeResponseBodyMetricRulesMetricRule {
	s.Threshold = &v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitors struct {
	// The URL that is monitored by the site monitoring task.
	//
	// example:
	//
	// https://aliyun.com
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// example:
	//
	// PC
	AgentGroup     *string                                                             `json:"AgentGroup,omitempty" xml:"AgentGroup,omitempty"`
	CustomSchedule *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule `json:"CustomSchedule,omitempty" xml:"CustomSchedule,omitempty" type:"Struct"`
	// The interval at which the site monitoring task is executed. Unit: minutes. Valid values: 1, 5, 15, 30, and 60.
	//
	// example:
	//
	// 1
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The information of detection points. The information includes the carriers that provide the detection points and the cities where the detection points reside.
	IspCities *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCities `json:"IspCities,omitempty" xml:"IspCities,omitempty" type:"Struct"`
	// The extended options of the site monitoring task. The options vary based on the specified protocol. For more information, see [CreateSiteMonitor](https://help.aliyun.com/document_detail/115048.html).
	OptionJson *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson `json:"OptionJson,omitempty" xml:"OptionJson,omitempty" type:"Struct"`
	// The ID of the site monitoring task.
	//
	// example:
	//
	// cc641dff-c19d-45f3-ad0a-818a0c4f****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the site monitoring task.
	//
	// example:
	//
	// test123
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The status of the site monitoring task. Valid values:
	//
	// 	- 1: The task is enabled.
	//
	// 	- 2: The task is disabled.
	//
	// example:
	//
	// 1
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	// The protocol that is used by the site monitoring task. Valid values: HTTP, HTTPS, PING, TCP, UDP, DNS, SMTP, POP3, and FTP.
	//
	// example:
	//
	// HTTP
	TaskType  *string                                                        `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	VpcConfig *DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig `json:"VpcConfig,omitempty" xml:"VpcConfig,omitempty" type:"Struct"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitors) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitors) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetAddress(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.Address = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetAgentGroup(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.AgentGroup = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetCustomSchedule(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.CustomSchedule = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetInterval(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.Interval = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetIspCities(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCities) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.IspCities = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetOptionJson(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.OptionJson = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetTaskId(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.TaskId = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetTaskName(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.TaskName = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetTaskState(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.TaskState = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetTaskType(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.TaskType = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitors) SetVpcConfig(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig) *DescribeSiteMonitorAttributeResponseBodySiteMonitors {
	s.VpcConfig = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule struct {
	Days *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomScheduleDays `json:"days,omitempty" xml:"days,omitempty" type:"Struct"`
	// example:
	//
	// 18
	EndHour *int32 `json:"end_hour,omitempty" xml:"end_hour,omitempty"`
	// example:
	//
	// 8
	StartHour *int32 `json:"start_hour,omitempty" xml:"start_hour,omitempty"`
	// example:
	//
	// local
	TimeZone *string `json:"time_zone,omitempty" xml:"time_zone,omitempty"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule) SetDays(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomScheduleDays) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule {
	s.Days = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule) SetEndHour(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule {
	s.EndHour = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule) SetStartHour(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule {
	s.StartHour = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule) SetTimeZone(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomSchedule {
	s.TimeZone = &v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomScheduleDays struct {
	Days []*int32 `json:"days,omitempty" xml:"days,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomScheduleDays) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomScheduleDays) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomScheduleDays) SetDays(v []*int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsCustomScheduleDays {
	s.Days = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCities struct {
	IspCity []*DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity `json:"IspCity,omitempty" xml:"IspCity,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCities) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCities) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCities) SetIspCity(v []*DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCities {
	s.IspCity = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity struct {
	// The city ID.
	//
	// example:
	//
	// 738
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// The city name.
	CityName *string `json:"CityName,omitempty" xml:"CityName,omitempty"`
	// The carrier ID.
	//
	// example:
	//
	// 465
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The carrier name.
	IspName *string `json:"IspName,omitempty" xml:"IspName,omitempty"`
	// 探测点网络类型。取值：
	//
	// IDC: IDC机房
	//
	// LASTMILE: 网民家宽
	//
	// MOBILE: 移动蜂窝网
	//
	// example:
	//
	// IDC
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity) SetCity(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity {
	s.City = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity) SetCityName(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity {
	s.CityName = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity) SetIsp(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity {
	s.Isp = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity) SetIspName(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity {
	s.IspName = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity) SetType(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsIspCitiesIspCity {
	s.Type = &v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson struct {
	Assertions *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertions `json:"assertions,omitempty" xml:"assertions,omitempty" type:"Struct"`
	// The number of retries after a DNS failure occurred.
	//
	// example:
	//
	// 3
	Attempts *int64 `json:"attempts,omitempty" xml:"attempts,omitempty"`
	// Indicates whether the security authentication feature is enabled. Valid values:
	//
	// 	- 0: The feature is disabled.
	//
	// 	- 1: The feature is enabled.
	//
	// example:
	//
	// 1
	Authentication *int32                                                                        `json:"authentication,omitempty" xml:"authentication,omitempty"`
	BlockedUrlList *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBlockedUrlList `json:"blocked_url_list,omitempty" xml:"blocked_url_list,omitempty" type:"Struct"`
	BrowserHeaders *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHeaders `json:"browser_headers,omitempty" xml:"browser_headers,omitempty" type:"Struct"`
	BrowserHosts   *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHosts   `json:"browser_hosts,omitempty" xml:"browser_hosts,omitempty" type:"Struct"`
	BrowserInfo    *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfo    `json:"browser_info,omitempty" xml:"browser_info,omitempty" type:"Struct"`
	// example:
	//
	// false
	BrowserInsecure *bool `json:"browser_insecure,omitempty" xml:"browser_insecure,omitempty"`
	// example:
	//
	// 1
	BrowserTaskVersion *string `json:"browser_task_version,omitempty" xml:"browser_task_version,omitempty"`
	// The cookie of the HTTP request.
	//
	// example:
	//
	// lang=en
	Cookie *string `json:"cookie,omitempty" xml:"cookie,omitempty"`
	// example:
	//
	// false
	DiagnosisMtr *bool `json:"diagnosis_mtr,omitempty" xml:"diagnosis_mtr,omitempty"`
	// example:
	//
	// false
	DiagnosisPing *bool `json:"diagnosis_ping,omitempty" xml:"diagnosis_ping,omitempty"`
	// example:
	//
	// www.taobao.com:www.taobao.com.danuoyi.tbcache.com
	DnsHijackWhitelist *string `json:"dns_hijack_whitelist,omitempty" xml:"dns_hijack_whitelist,omitempty"`
	// The relationship between the list of expected aliases or IP addresses and the list of DNS results. Valid values:
	//
	// 	- IN_DNS: The list of expected values is a subset of the list of DNS results.
	//
	// 	- DNS_IN: The list of DNS results is a subset of the list of expected values.
	//
	// 	- EQUAL: The list of DNS results is the same as the list of expected values.
	//
	// 	- ANY: The list of DNS results intersects with the list of expected values.
	//
	// example:
	//
	// IN_DNS
	DnsMatchRule *string `json:"dns_match_rule,omitempty" xml:"dns_match_rule,omitempty"`
	// The IP address of the DNS server.
	//
	// >  This parameter is returned only if the TaskType parameter is set to DNS.
	//
	// example:
	//
	// 192.168.XX.XX
	DnsServer *string `json:"dns_server,omitempty" xml:"dns_server,omitempty"`
	// The type of the DNS record. This parameter is returned only if the TaskType parameter is set to DNS. Valid values:
	//
	// 	- A (default): a record that specifies an IP address related to the specified host name or domain name.
	//
	// 	- CNAME: a record that maps multiple domain names to a domain name.
	//
	// 	- NS: a record that specifies a DNS server used to parse domain names.
	//
	// 	- MX: a record that links domain names to the address of a mail server.
	//
	// 	- TXT: a record that stores the text information of host name or domain names. The text must be 1 to 512 bytes in length. The TXT record serves as a Sender Policy Framework (SPF) record to fight against spam.
	//
	// example:
	//
	// A
	DnsType *string `json:"dns_type,omitempty" xml:"dns_type,omitempty"`
	// example:
	//
	// false
	EmptyMessage         *bool                                                                               `json:"empty_message,omitempty" xml:"empty_message,omitempty"`
	ExpectExistString    *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectExistString    `json:"expect_exist_string,omitempty" xml:"expect_exist_string,omitempty" type:"Struct"`
	ExpectNonExistString *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectNonExistString `json:"expect_non_exist_string,omitempty" xml:"expect_non_exist_string,omitempty" type:"Struct"`
	// The domain name or alias to be parsed.
	//
	// >  This parameter is returned only if the TaskType parameter is set to DNS.
	//
	// example:
	//
	// dns_server
	ExpectValue *string `json:"expect_value,omitempty" xml:"expect_value,omitempty"`
	// The packet loss rate.
	//
	// >  This parameter is returned only if the TaskType parameter is set to PING.
	//
	// example:
	//
	// 0.4
	FailureRate *float32 `json:"failure_rate,omitempty" xml:"failure_rate,omitempty"`
	// The header of the HTTP request.
	//
	// example:
	//
	// testKey:testValue
	Header          *string `json:"header,omitempty" xml:"header,omitempty"`
	HostBinding     *string `json:"host_binding,omitempty" xml:"host_binding,omitempty"`
	HostBindingType *int32  `json:"host_binding_type,omitempty" xml:"host_binding_type,omitempty"`
	// The HTTP request method. Valid values:
	//
	// 	- get
	//
	// 	- post
	//
	// 	- head
	//
	// example:
	//
	// get
	HttpMethod *string `json:"http_method,omitempty" xml:"http_method,omitempty"`
	// ip_network indicates the network type of the task. Valid values: v4, v6, and auto. Default value: v4.
	//
	// example:
	//
	// v4
	IpNetwork *string `json:"ip_network,omitempty" xml:"ip_network,omitempty"`
	// example:
	//
	// true
	IsBase64Encode *string `json:"isBase64Encode,omitempty" xml:"isBase64Encode,omitempty"`
	// Indicates whether the alert rule is included. Valid values:
	//
	// 	- 0: The alert rule is included.
	//
	// 	- 1: The alert rule is excluded.
	//
	// example:
	//
	// 1
	MatchRule *int32 `json:"match_rule,omitempty" xml:"match_rule,omitempty"`
	// example:
	//
	// tlsv1.2
	MinTlsVersion *string `json:"min_tls_version,omitempty" xml:"min_tls_version,omitempty"`
	// The password of the SMTP, POP3, or FTP protocol.
	//
	// example:
	//
	// 123****
	Password *string `json:"password,omitempty" xml:"password,omitempty"`
	// The heartbeat of the PING protocol.
	//
	// example:
	//
	// 29
	PingNum *int32 `json:"ping_num,omitempty" xml:"ping_num,omitempty"`
	// example:
	//
	// 80
	PingPort *int32 `json:"ping_port,omitempty" xml:"ping_port,omitempty"`
	// The PING protocol type. Valid values:
	//
	// 	- icmp
	//
	// 	- tcp
	//
	// 	- udp
	//
	// example:
	//
	// icmp,tcp,udp
	PingType *string `json:"ping_type,omitempty" xml:"ping_type,omitempty"`
	// The port number of the TCP, UDP, SMTP, or POP3 protocol.
	//
	// example:
	//
	// 110
	Port *int32 `json:"port,omitempty" xml:"port,omitempty"`
	// The protocol that is used to send the request.
	//
	// example:
	//
	// TCP
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// Indicates whether the Quick UDP Internet Connections (QUIC) protocol is used for browser detection. Valid values: true false Default value: false.
	//
	// example:
	//
	// true
	QuicEnabled *bool `json:"quic_enabled,omitempty" xml:"quic_enabled,omitempty"`
	// The sites for which the QUIC protocol is forcibly used.
	QuicTarget *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonQuicTarget `json:"quic_target,omitempty" xml:"quic_target,omitempty" type:"Struct"`
	// The content of the HTTP request.
	//
	// example:
	//
	// aa=bb
	RequestContent *string `json:"request_content,omitempty" xml:"request_content,omitempty"`
	// The format of the HTTP request. Valid values:
	//
	// 	- hex: hexadecimal
	//
	// 	- txt: text
	//
	// example:
	//
	// txt
	RequestFormat *string `json:"request_format,omitempty" xml:"request_format,omitempty"`
	// The response to the HTTP request.
	//
	// example:
	//
	// txt
	ResponseContent *string `json:"response_content,omitempty" xml:"response_content,omitempty"`
	// The format of the HTTP response. Valid values:
	//
	// 	- hex: hexadecimal
	//
	// 	- txt: text
	//
	// example:
	//
	// txt
	ResponseFormat *string `json:"response_format,omitempty" xml:"response_format,omitempty"`
	// example:
	//
	// 0
	RetryDelay *int32 `json:"retry_delay,omitempty" xml:"retry_delay,omitempty"`
	// 是否开启页面截图
	//
	// example:
	//
	// false
	ScreenShot *bool `json:"screen_shot,omitempty" xml:"screen_shot,omitempty"`
	ScrollEnd  *bool `json:"scroll_end,omitempty" xml:"scroll_end,omitempty"`
	// example:
	//
	// false
	StrictMode *bool `json:"strict_mode,omitempty" xml:"strict_mode,omitempty"`
	// The timeout period. Unit: milliseconds.
	//
	// example:
	//
	// 3
	TimeOut                       *int64                                                                                       `json:"time_out,omitempty" xml:"time_out,omitempty"`
	TrafficHijackElementBlacklist *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementBlacklist `json:"traffic_hijack_element_blacklist,omitempty" xml:"traffic_hijack_element_blacklist,omitempty" type:"Struct"`
	// example:
	//
	// 0
	TrafficHijackElementCount     *int32                                                                                       `json:"traffic_hijack_element_count,omitempty" xml:"traffic_hijack_element_count,omitempty"`
	TrafficHijackElementWhitelist *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementWhitelist `json:"traffic_hijack_element_whitelist,omitempty" xml:"traffic_hijack_element_whitelist,omitempty" type:"Struct"`
	// The username of the FTP, SMTP, or POP3 protocol.
	//
	// example:
	//
	// testUser
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
	// example:
	//
	// 3
	WaitTimeAfterCompletion *int32 `json:"waitTime_after_completion,omitempty" xml:"waitTime_after_completion,omitempty"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetAssertions(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertions) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.Assertions = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetAttempts(v int64) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.Attempts = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetAuthentication(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.Authentication = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetBlockedUrlList(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBlockedUrlList) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.BlockedUrlList = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetBrowserHeaders(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHeaders) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.BrowserHeaders = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetBrowserHosts(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHosts) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.BrowserHosts = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetBrowserInfo(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfo) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.BrowserInfo = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetBrowserInsecure(v bool) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.BrowserInsecure = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetBrowserTaskVersion(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.BrowserTaskVersion = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetCookie(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.Cookie = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetDiagnosisMtr(v bool) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.DiagnosisMtr = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetDiagnosisPing(v bool) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.DiagnosisPing = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetDnsHijackWhitelist(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.DnsHijackWhitelist = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetDnsMatchRule(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.DnsMatchRule = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetDnsServer(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.DnsServer = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetDnsType(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.DnsType = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetEmptyMessage(v bool) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.EmptyMessage = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetExpectExistString(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectExistString) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.ExpectExistString = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetExpectNonExistString(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectNonExistString) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.ExpectNonExistString = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetExpectValue(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.ExpectValue = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetFailureRate(v float32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.FailureRate = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetHeader(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.Header = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetHostBinding(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.HostBinding = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetHostBindingType(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.HostBindingType = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetHttpMethod(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.HttpMethod = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetIpNetwork(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.IpNetwork = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetIsBase64Encode(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.IsBase64Encode = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetMatchRule(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.MatchRule = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetMinTlsVersion(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.MinTlsVersion = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetPassword(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.Password = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetPingNum(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.PingNum = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetPingPort(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.PingPort = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetPingType(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.PingType = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetPort(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.Port = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetProtocol(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.Protocol = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetQuicEnabled(v bool) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.QuicEnabled = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetQuicTarget(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonQuicTarget) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.QuicTarget = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetRequestContent(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.RequestContent = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetRequestFormat(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.RequestFormat = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetResponseContent(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.ResponseContent = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetResponseFormat(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.ResponseFormat = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetRetryDelay(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.RetryDelay = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetScreenShot(v bool) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.ScreenShot = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetScrollEnd(v bool) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.ScrollEnd = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetStrictMode(v bool) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.StrictMode = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetTimeOut(v int64) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.TimeOut = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetTrafficHijackElementBlacklist(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementBlacklist) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.TrafficHijackElementBlacklist = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetTrafficHijackElementCount(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.TrafficHijackElementCount = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetTrafficHijackElementWhitelist(v *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementWhitelist) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.TrafficHijackElementWhitelist = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetUsername(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.Username = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson) SetWaitTimeAfterCompletion(v int32) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJson {
	s.WaitTimeAfterCompletion = &v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertions struct {
	Assertions []*DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions `json:"assertions,omitempty" xml:"assertions,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertions) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertions) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertions) SetAssertions(v []*DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertions {
	s.Assertions = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions struct {
	// example:
	//
	// lessThan
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// example:
	//
	// json path
	Property *string `json:"property,omitempty" xml:"property,omitempty"`
	// example:
	//
	// 0
	Target *string `json:"target,omitempty" xml:"target,omitempty"`
	// example:
	//
	// response_time
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions) SetOperator(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions {
	s.Operator = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions) SetProperty(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions {
	s.Property = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions) SetTarget(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions {
	s.Target = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions) SetType(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonAssertionsAssertions {
	s.Type = &v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBlockedUrlList struct {
	BlockedUrlList []*string `json:"blocked_url_list,omitempty" xml:"blocked_url_list,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBlockedUrlList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBlockedUrlList) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBlockedUrlList) SetBlockedUrlList(v []*string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBlockedUrlList {
	s.BlockedUrlList = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHeaders struct {
	BrowserHeaders []map[string]interface{} `json:"browser_headers,omitempty" xml:"browser_headers,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHeaders) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHeaders) SetBrowserHeaders(v []map[string]interface{}) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHeaders {
	s.BrowserHeaders = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHosts struct {
	BrowserHosts []*string `json:"browser_hosts,omitempty" xml:"browser_hosts,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHosts) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHosts) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHosts) SetBrowserHosts(v []*string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserHosts {
	s.BrowserHosts = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfo struct {
	BrowserInfo []*DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfoBrowserInfo `json:"browser_info,omitempty" xml:"browser_info,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfo) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfo) SetBrowserInfo(v []*DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfoBrowserInfo) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfo {
	s.BrowserInfo = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfoBrowserInfo struct {
	// example:
	//
	// Chrome
	Browser *string `json:"browser,omitempty" xml:"browser,omitempty"`
	// example:
	//
	// laptop
	Device *string `json:"device,omitempty" xml:"device,omitempty"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfoBrowserInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfoBrowserInfo) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfoBrowserInfo) SetBrowser(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfoBrowserInfo {
	s.Browser = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfoBrowserInfo) SetDevice(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonBrowserInfoBrowserInfo {
	s.Device = &v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectExistString struct {
	ExpectExistString []*string `json:"expect_exist_string,omitempty" xml:"expect_exist_string,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectExistString) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectExistString) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectExistString) SetExpectExistString(v []*string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectExistString {
	s.ExpectExistString = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectNonExistString struct {
	ExpectNonExistString []*string `json:"expect_non_exist_string,omitempty" xml:"expect_non_exist_string,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectNonExistString) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectNonExistString) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectNonExistString) SetExpectNonExistString(v []*string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonExpectNonExistString {
	s.ExpectNonExistString = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonQuicTarget struct {
	QuicTarget []*string `json:"quic_target,omitempty" xml:"quic_target,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonQuicTarget) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonQuicTarget) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonQuicTarget) SetQuicTarget(v []*string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonQuicTarget {
	s.QuicTarget = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementBlacklist struct {
	TrafficHijackElementBlacklist []*string `json:"traffic_hijack_element_blacklist,omitempty" xml:"traffic_hijack_element_blacklist,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementBlacklist) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementBlacklist) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementBlacklist) SetTrafficHijackElementBlacklist(v []*string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementBlacklist {
	s.TrafficHijackElementBlacklist = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementWhitelist struct {
	TrafficHijackElementWhitelist []*string `json:"traffic_hijack_element_whitelist,omitempty" xml:"traffic_hijack_element_whitelist,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementWhitelist) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementWhitelist) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementWhitelist) SetTrafficHijackElementWhitelist(v []*string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsOptionJsonTrafficHijackElementWhitelist {
	s.TrafficHijackElementWhitelist = v
	return s
}

type DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig struct {
	// 内网拨测任务的目标站点所在地域。
	//
	// example:
	//
	// cn-beijing
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// sg-xxxxxx
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// example:
	//
	// vpc-xxxxxx
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// example:
	//
	// vsw-xxxxxx
	VswitchId *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig) SetRegion(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig {
	s.Region = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig) SetSecurityGroupId(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig) SetVpcId(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig {
	s.VpcId = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig) SetVswitchId(v string) *DescribeSiteMonitorAttributeResponseBodySiteMonitorsVpcConfig {
	s.VswitchId = &v
	return s
}

type DescribeSiteMonitorAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSiteMonitorAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSiteMonitorAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorAttributeResponse) SetHeaders(v map[string]*string) *DescribeSiteMonitorAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeSiteMonitorAttributeResponse) SetStatusCode(v int32) *DescribeSiteMonitorAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSiteMonitorAttributeResponse) SetBody(v *DescribeSiteMonitorAttributeResponseBody) *DescribeSiteMonitorAttributeResponse {
	s.Body = v
	return s
}

type DescribeSiteMonitorDataRequest struct {
	// The end of the time range to query. The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 UTC on Thursday, January 1, 1970.
	//
	// 	- UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format.
	//
	// example:
	//
	// 1551581437000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The number of data points to return.
	//
	// example:
	//
	// 1000
	Length *int32 `json:"Length,omitempty" xml:"Length,omitempty"`
	// The metric name. Valid values:
	//
	// 	- Availability
	//
	// 	- ResponseTime
	//
	// This parameter is required.
	//
	// example:
	//
	// Availability
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The pagination token.
	//
	// example:
	//
	// 49f7b317-7645-4cc9-94fd-ea42e5220930ea42e5220930ea42e522****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The statistical period. The value is an integral multiple of 60. Unit: seconds.
	//
	// >  The default value equals the minimum interval at which detection requests are sent to the monitored address.
	//
	// example:
	//
	// 60
	Period   *string `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The start of the time range to query. The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 UTC on Thursday, January 1, 1970.
	//
	// 	- UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format.
	//
	// example:
	//
	// 1551579637000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The job ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 49f7b317-7645-4cc9-94fd-ea42e522****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The type of the monitored object whose monitoring data is to be queried. Valid values:
	//
	// 	- metric
	//
	// 	- event
	//
	// example:
	//
	// metric
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSiteMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorDataRequest) SetEndTime(v string) *DescribeSiteMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSiteMonitorDataRequest) SetLength(v int32) *DescribeSiteMonitorDataRequest {
	s.Length = &v
	return s
}

func (s *DescribeSiteMonitorDataRequest) SetMetricName(v string) *DescribeSiteMonitorDataRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeSiteMonitorDataRequest) SetNextToken(v string) *DescribeSiteMonitorDataRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeSiteMonitorDataRequest) SetPeriod(v string) *DescribeSiteMonitorDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeSiteMonitorDataRequest) SetRegionId(v string) *DescribeSiteMonitorDataRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSiteMonitorDataRequest) SetStartTime(v string) *DescribeSiteMonitorDataRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSiteMonitorDataRequest) SetTaskId(v string) *DescribeSiteMonitorDataRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeSiteMonitorDataRequest) SetType(v string) *DescribeSiteMonitorDataRequest {
	s.Type = &v
	return s
}

type DescribeSiteMonitorDataResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The monitoring data.
	//
	// example:
	//
	// [{"Maximum":247,"Mimimum":61,"Average":154,"userId":"127067667954****","taskId":"49f7b317-7645-4cc9-94fd-ea42e522****","timestamp":1551581760000}]
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The pagination token.
	//
	// example:
	//
	// ea42e5220930ea42e522****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3febb181-0d98-4af9-8b04-7faf36b048b9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true: The request was successful. false: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSiteMonitorDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorDataResponseBody) SetCode(v string) *DescribeSiteMonitorDataResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSiteMonitorDataResponseBody) SetData(v string) *DescribeSiteMonitorDataResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeSiteMonitorDataResponseBody) SetMessage(v string) *DescribeSiteMonitorDataResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSiteMonitorDataResponseBody) SetNextToken(v string) *DescribeSiteMonitorDataResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeSiteMonitorDataResponseBody) SetRequestId(v string) *DescribeSiteMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSiteMonitorDataResponseBody) SetSuccess(v string) *DescribeSiteMonitorDataResponseBody {
	s.Success = &v
	return s
}

type DescribeSiteMonitorDataResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSiteMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSiteMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorDataResponse) SetHeaders(v map[string]*string) *DescribeSiteMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeSiteMonitorDataResponse) SetStatusCode(v int32) *DescribeSiteMonitorDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSiteMonitorDataResponse) SetBody(v *DescribeSiteMonitorDataResponseBody) *DescribeSiteMonitorDataResponse {
	s.Body = v
	return s
}

type DescribeSiteMonitorISPCityListRequest struct {
	// The name or ID of the city.
	//
	// > City names support fuzzy match.
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// Specifies whether to query IPv4 probes. Valid values:
	//
	// 	- true (default): IPv4 probes are queried.
	//
	// 	- false: IPv4 probes are not queried.
	//
	// example:
	//
	// true
	IPV4 *bool `json:"IPV4,omitempty" xml:"IPV4,omitempty"`
	// Specifies whether to query IPv6 probes. Valid values:
	//
	// 	- true (default): IPv6 probes are queried.
	//
	// 	- false: IPv6 probes are not queried.
	//
	// example:
	//
	// true
	IPV6 *bool `json:"IPV6,omitempty" xml:"IPV6,omitempty"`
	// The name or ID of the carrier.
	//
	// > Carrier names support fuzzy match.
	Isp      *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to return all detection points. Valid values:
	//
	// 	- true (default): returns all detection points.
	//
	// 	- false: returns only available detection points.
	//
	// example:
	//
	// true
	ViewAll *bool `json:"ViewAll,omitempty" xml:"ViewAll,omitempty"`
}

func (s DescribeSiteMonitorISPCityListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorISPCityListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorISPCityListRequest) SetCity(v string) *DescribeSiteMonitorISPCityListRequest {
	s.City = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListRequest) SetIPV4(v bool) *DescribeSiteMonitorISPCityListRequest {
	s.IPV4 = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListRequest) SetIPV6(v bool) *DescribeSiteMonitorISPCityListRequest {
	s.IPV6 = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListRequest) SetIsp(v string) *DescribeSiteMonitorISPCityListRequest {
	s.Isp = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListRequest) SetRegionId(v string) *DescribeSiteMonitorISPCityListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListRequest) SetViewAll(v bool) *DescribeSiteMonitorISPCityListRequest {
	s.ViewAll = &v
	return s
}

type DescribeSiteMonitorISPCityListResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The queried detection points.
	IspCityList *DescribeSiteMonitorISPCityListResponseBodyIspCityList `json:"IspCityList,omitempty" xml:"IspCityList,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// B35D7D84-547B-4E61-B909-48A1F8A0C756
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSiteMonitorISPCityListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorISPCityListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorISPCityListResponseBody) SetCode(v string) *DescribeSiteMonitorISPCityListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBody) SetIspCityList(v *DescribeSiteMonitorISPCityListResponseBodyIspCityList) *DescribeSiteMonitorISPCityListResponseBody {
	s.IspCityList = v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBody) SetMessage(v string) *DescribeSiteMonitorISPCityListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBody) SetRequestId(v string) *DescribeSiteMonitorISPCityListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBody) SetSuccess(v string) *DescribeSiteMonitorISPCityListResponseBody {
	s.Success = &v
	return s
}

type DescribeSiteMonitorISPCityListResponseBodyIspCityList struct {
	IspCity []*DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity `json:"IspCity,omitempty" xml:"IspCity,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorISPCityListResponseBodyIspCityList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorISPCityListResponseBodyIspCityList) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityList) SetIspCity(v []*DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) *DescribeSiteMonitorISPCityListResponseBodyIspCityList {
	s.IspCity = v
	return s
}

type DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity struct {
	Area_en    *string `json:"Area.en,omitempty" xml:"Area.en,omitempty"`
	Area_zh_cN *string `json:"Area.zh_CN,omitempty" xml:"Area.zh_CN,omitempty"`
	// The city ID.
	//
	// example:
	//
	// 4
	City           *string `json:"City,omitempty" xml:"City,omitempty"`
	CityName_en    *string `json:"CityName.en,omitempty" xml:"CityName.en,omitempty"`
	CityName_zh_cN *string `json:"CityName.zh_CN,omitempty" xml:"CityName.zh_CN,omitempty"`
	// The country name.
	//
	// > This parameter is valid only on the China site (aliyun.com).
	//
	// example:
	//
	// 629
	Country       *string `json:"Country,omitempty" xml:"Country,omitempty"`
	Country_en    *string `json:"Country.en,omitempty" xml:"Country.en,omitempty"`
	Country_zh_cN *string `json:"Country.zh_CN,omitempty" xml:"Country.zh_CN,omitempty"`
	// The IP address pool.
	IPPool *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCityIPPool `json:"IPPool,omitempty" xml:"IPPool,omitempty" type:"Struct"`
	// The number of IPv4 probes.
	//
	// example:
	//
	// 4
	IPV4ProbeCount *string `json:"IPV4ProbeCount,omitempty" xml:"IPV4ProbeCount,omitempty"`
	// The number of IPv6 probes.
	//
	// example:
	//
	// 3
	IPV6ProbeCount *string `json:"IPV6ProbeCount,omitempty" xml:"IPV6ProbeCount,omitempty"`
	// The carrier ID.
	//
	// example:
	//
	// 232
	Isp           *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	IspName_en    *string `json:"IspName.en,omitempty" xml:"IspName.en,omitempty"`
	IspName_zh_cN *string `json:"IspName.zh_CN,omitempty" xml:"IspName.zh_CN,omitempty"`
	// The province name.
	//
	// example:
	//
	// 264
	Region       *string `json:"Region,omitempty" xml:"Region,omitempty"`
	Region_en    *string `json:"Region.en,omitempty" xml:"Region.en,omitempty"`
	Region_zh_cN *string `json:"Region.zh_CN,omitempty" xml:"Region.zh_CN,omitempty"`
}

func (s DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetArea_en(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.Area_en = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetArea_zh_cN(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.Area_zh_cN = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetCity(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.City = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetCityName_en(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.CityName_en = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetCityName_zh_cN(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.CityName_zh_cN = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetCountry(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.Country = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetCountry_en(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.Country_en = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetCountry_zh_cN(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.Country_zh_cN = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetIPPool(v *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCityIPPool) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.IPPool = v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetIPV4ProbeCount(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.IPV4ProbeCount = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetIPV6ProbeCount(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.IPV6ProbeCount = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetIsp(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.Isp = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetIspName_en(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.IspName_en = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetIspName_zh_cN(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.IspName_zh_cN = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetRegion(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.Region = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetRegion_en(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.Region_en = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity) SetRegion_zh_cN(v string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCity {
	s.Region_zh_cN = &v
	return s
}

type DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCityIPPool struct {
	IPPool []*string `json:"IPPool,omitempty" xml:"IPPool,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCityIPPool) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCityIPPool) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCityIPPool) SetIPPool(v []*string) *DescribeSiteMonitorISPCityListResponseBodyIspCityListIspCityIPPool {
	s.IPPool = v
	return s
}

type DescribeSiteMonitorISPCityListResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSiteMonitorISPCityListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSiteMonitorISPCityListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorISPCityListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorISPCityListResponse) SetHeaders(v map[string]*string) *DescribeSiteMonitorISPCityListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponse) SetStatusCode(v int32) *DescribeSiteMonitorISPCityListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSiteMonitorISPCityListResponse) SetBody(v *DescribeSiteMonitorISPCityListResponseBody) *DescribeSiteMonitorISPCityListResponse {
	s.Body = v
	return s
}

type DescribeSiteMonitorListRequest struct {
	// The keyword to be matched.
	//
	// >  You can search for tasks by name or address. Fuzzy search is supported.
	//
	// example:
	//
	// site
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	Page *int32 `json:"Page,omitempty" xml:"Page,omitempty"`
	// The number of entries per page. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the site monitoring task.
	//
	// example:
	//
	// a1ecd34a-8157-44d9-b060-14950837****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The task status. Valid values:
	//
	// 	- 1: The task is enabled.
	//
	// 	- 2: The task is disabled.
	//
	// example:
	//
	// 1
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	// The protocol that is used by the site monitoring task. Valid values: HTTP, PING, TCP, UDP, DNS, SMTP, POP3, and FTP.
	//
	// example:
	//
	// HTTP
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeSiteMonitorListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorListRequest) SetKeyword(v string) *DescribeSiteMonitorListRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeSiteMonitorListRequest) SetPage(v int32) *DescribeSiteMonitorListRequest {
	s.Page = &v
	return s
}

func (s *DescribeSiteMonitorListRequest) SetPageSize(v int32) *DescribeSiteMonitorListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSiteMonitorListRequest) SetRegionId(v string) *DescribeSiteMonitorListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSiteMonitorListRequest) SetTaskId(v string) *DescribeSiteMonitorListRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeSiteMonitorListRequest) SetTaskState(v string) *DescribeSiteMonitorListRequest {
	s.TaskState = &v
	return s
}

func (s *DescribeSiteMonitorListRequest) SetTaskType(v string) *DescribeSiteMonitorListRequest {
	s.TaskType = &v
	return s
}

type DescribeSiteMonitorListResponseBody struct {
	// The status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A80DB41C-AF6C-50E1-ADB5-66DCBA3D266B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The site monitoring tasks that are returned.
	SiteMonitors *DescribeSiteMonitorListResponseBodySiteMonitors `json:"SiteMonitors,omitempty" xml:"SiteMonitors,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSiteMonitorListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorListResponseBody) SetCode(v string) *DescribeSiteMonitorListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBody) SetMessage(v string) *DescribeSiteMonitorListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBody) SetPageNumber(v int32) *DescribeSiteMonitorListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBody) SetPageSize(v int32) *DescribeSiteMonitorListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBody) SetRequestId(v string) *DescribeSiteMonitorListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBody) SetSiteMonitors(v *DescribeSiteMonitorListResponseBodySiteMonitors) *DescribeSiteMonitorListResponseBody {
	s.SiteMonitors = v
	return s
}

func (s *DescribeSiteMonitorListResponseBody) SetSuccess(v string) *DescribeSiteMonitorListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBody) SetTotalCount(v int32) *DescribeSiteMonitorListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSiteMonitorListResponseBodySiteMonitors struct {
	SiteMonitor []*DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor `json:"SiteMonitor,omitempty" xml:"SiteMonitor,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorListResponseBodySiteMonitors) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorListResponseBodySiteMonitors) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitors) SetSiteMonitor(v []*DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) *DescribeSiteMonitorListResponseBodySiteMonitors {
	s.SiteMonitor = v
	return s
}

type DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor struct {
	// The URL or IP address that is monitored by the site monitoring task.
	//
	// example:
	//
	// https://aliyun.com
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// The detection point type. Valid values:
	//
	// 	- PC
	//
	// 	- MOBILE
	//
	// example:
	//
	// PC
	AgentGroup *string `json:"AgentGroup,omitempty" xml:"AgentGroup,omitempty"`
	// The time when the site monitoring task was created.
	//
	// example:
	//
	// 2021-11-01 11:05:18
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The interval at which detection requests are sent. Unit: minutes.
	//
	// example:
	//
	// 1
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The extended options of the site monitoring task. The options vary based on the specified protocol. For more information, see [CreateSiteMonitor](https://help.aliyun.com/document_detail/115048.html).
	OptionsJson *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson `json:"OptionsJson,omitempty" xml:"OptionsJson,omitempty" type:"Struct"`
	// The ID of the site monitoring task.
	//
	// example:
	//
	// f5783760-1b39-4b6b-80e8-453d962a****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the site monitoring task.
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The task status. Valid values:
	//
	// 	- 1: The task is enabled.
	//
	// 	- 2: The task is disabled.
	//
	// example:
	//
	// 1
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	// The protocol that is used by the site monitoring task. Valid values: HTTP, PING, TCP, UDP, DNS, SMTP, POP3, and FTP.
	//
	// example:
	//
	// TCP
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The time when the site monitoring task was updated.
	//
	// example:
	//
	// 2022-03-08 17:14:31
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) SetAddress(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor {
	s.Address = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) SetAgentGroup(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor {
	s.AgentGroup = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) SetCreateTime(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor {
	s.CreateTime = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) SetInterval(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor {
	s.Interval = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) SetOptionsJson(v *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor {
	s.OptionsJson = v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) SetTaskId(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor {
	s.TaskId = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) SetTaskName(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor {
	s.TaskName = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) SetTaskState(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor {
	s.TaskState = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) SetTaskType(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor {
	s.TaskType = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor) SetUpdateTime(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitor {
	s.UpdateTime = &v
	return s
}

type DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson struct {
	// The acceptable status code.
	//
	// >  We recommend that you configure assertions.
	//
	// example:
	//
	// 400
	AcceptableResponseCode *string `json:"acceptable_response_code,omitempty" xml:"acceptable_response_code,omitempty"`
	// The assertions.
	Assertions *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertions `json:"assertions,omitempty" xml:"assertions,omitempty" type:"Struct"`
	// The number of retries after a DNS failure occurred.
	//
	// example:
	//
	// 3
	Attempts *int64 `json:"attempts,omitempty" xml:"attempts,omitempty"`
	// Indicates whether the security authentication feature is enabled. Valid values:
	//
	// 	- 0: The feature is enabled.
	//
	// 	- 1: The feature is disabled.
	//
	// example:
	//
	// 1
	Authentication *int32 `json:"authentication,omitempty" xml:"authentication,omitempty"`
	// Indicates whether the certificate is verified. Valid values:
	//
	// 	- false (default): The certificate is not verified.
	//
	// 	- true: The certificate is verified.
	//
	// example:
	//
	// false
	CertVerify *bool `json:"cert_verify,omitempty" xml:"cert_verify,omitempty"`
	// The cookie of the HTTP request.
	//
	// example:
	//
	// lang=en
	Cookie *string `json:"cookie,omitempty" xml:"cookie,omitempty"`
	// Indicates whether MTR is automatically used to diagnose network issues if a task fails. Valid values:
	//
	// 	- false (default): MTR is not automatically used to diagnose network issues if a task fails.
	//
	// 	- true: MTR is automatically used to diagnose network issues if a task fails.
	//
	// example:
	//
	// false
	DiagnosisMtr *bool `json:"diagnosis_mtr,omitempty" xml:"diagnosis_mtr,omitempty"`
	// Indicates whether ping requests are automatically sent to detect network latency if a detection task fails. Valid values:
	//
	// 	- false (default): Ping requests are not automatically sent to detect network latency if a detection task fails.
	//
	// 	- true: Ping requests are automatically sent to detect network latency if a detection task fails.
	//
	// example:
	//
	// false
	DiagnosisPing *bool `json:"diagnosis_ping,omitempty" xml:"diagnosis_ping,omitempty"`
	// The relationship between the list of expected aliases or IP addresses and the list of DNS results. Valid values:
	//
	// 	- IN_DNS: The list of expected values is a subset of the list of DNS results.
	//
	// 	- DNS_IN: The list of DNS results is a subset of the list of expected values.
	//
	// 	- EQUAL: The list of DNS results is the same as the list of expected values.
	//
	// 	- ANY: The list of DNS results intersects with the list of expected values.
	//
	// example:
	//
	// IN_DNS
	DnsMatchRule *string `json:"dns_match_rule,omitempty" xml:"dns_match_rule,omitempty"`
	// The domain name or IP address of the DNS server.
	//
	// example:
	//
	// 192.168.XX.XX
	DnsServer *string `json:"dns_server,omitempty" xml:"dns_server,omitempty"`
	// The type of the DNS record. This parameter is returned only if the TaskType parameter is set to DNS. Valid values:
	//
	// 	- A (default): a record that specifies an IP address related to the specified host name or domain name.
	//
	// 	- CNAME: a record that maps multiple domain names to a domain name.
	//
	// 	- NS: a record that specifies a DNS server used to parse domain names.
	//
	// 	- MX: a record that links domain names to the address of a mail server.
	//
	// 	- TXT: a record that stores the text information of host name or domain names. The text must be 1 to 512 bytes in length. The TXT record serves as a Sender Policy Framework (SPF) record to fight against spam.
	//
	// 	- AAAA: a record that maps a domain name to the relevant IPv6 address.
	//
	// example:
	//
	// A
	DnsType *string `json:"dns_type,omitempty" xml:"dns_type,omitempty"`
	// Indicates whether the DNS server of the carrier is used.
	//
	// 	- true (default): The DNS server of the carrier is used.
	//
	// 	- false: The DNS server of the carrier is not used. The default DNS server or the specified DNS server is used.
	//
	// example:
	//
	// true
	EnableOperatorDns *bool `json:"enable_operator_dns,omitempty" xml:"enable_operator_dns,omitempty"`
	// The packet loss rate.
	//
	// >  This parameter is returned only if the TaskType parameter is set to PING.
	//
	// example:
	//
	// 0.5
	FailureRate *float32 `json:"failure_rate,omitempty" xml:"failure_rate,omitempty"`
	// The header of the HTTP request. An HTTP header is a key-value pair in which the key and the value are separated by a colon (:). The format is `key1:value1`. Each HTTP header occupies a line.
	//
	// example:
	//
	// testKey:testValue
	Header *string `json:"header,omitempty" xml:"header,omitempty"`
	// The HTTP request method. Valid values:
	//
	// 	- get
	//
	// 	- post
	//
	// 	- head
	//
	// example:
	//
	// get
	HttpMethod *string `json:"http_method,omitempty" xml:"http_method,omitempty"`
	// Indicates whether the password is decoded by using the Base64 algorithm. Valid values:
	//
	// 	- true: The password is decoded by using the Base64 algorithm.
	//
	// 	- false (default): The password is not decoded by using the Base64 algorithm.
	//
	// example:
	//
	// false
	IsBase64Encode *string `json:"isBase64Encode,omitempty" xml:"isBase64Encode,omitempty"`
	// Indicates whether the alert rule is included. Valid values:
	//
	// 	- 0: The alert rule is included.
	//
	// 	- 1: The alert rule is not included.
	//
	// example:
	//
	// 0
	MatchRule *int32 `json:"match_rule,omitempty" xml:"match_rule,omitempty"`
	// The password of the SMTP, POP3, or FTP protocol.
	//
	// example:
	//
	// 123****
	Password *string `json:"password,omitempty" xml:"password,omitempty"`
	// The number of hops for the PING protocol.
	//
	// example:
	//
	// 20
	PingNum *int32 `json:"ping_num,omitempty" xml:"ping_num,omitempty"`
	// The port number of the TCP, UDP, SMTP, or POP3 protocol.
	//
	// example:
	//
	// 80
	Port *int32 `json:"port,omitempty" xml:"port,omitempty"`
	// The protocol type of DNS detection. Valid values:
	//
	// 	- udp (default)
	//
	// 	- tcp
	//
	// 	- tcp-tls
	//
	// example:
	//
	// udp
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// Indicates whether the PROXY protocol is enabled. Valid values:
	//
	// 	- false (default): The PROXY protocol is disabled.
	//
	// 	- true: The PROXY protocol is enabled.
	//
	// example:
	//
	// false
	ProxyProtocol *bool `json:"proxy_protocol,omitempty" xml:"proxy_protocol,omitempty"`
	// The content of the HTTP request.
	//
	// example:
	//
	// cf0f85
	RequestContent *string `json:"request_content,omitempty" xml:"request_content,omitempty"`
	// The format of the HTTP request. Valid values:
	//
	// 	- hex: hexadecimal
	//
	// 	- txt: text
	//
	// example:
	//
	// hex
	RequestFormat *string `json:"request_format,omitempty" xml:"request_format,omitempty"`
	// The response to the HTTP request.
	//
	// 	- Hexadecimal format: If the request content is a byte string and cannot be represented in printable characters, you can convert the byte string to printable characters in the hexadecimal format. If you convert the byte string to printable characters in the hexadecimal format, one byte is converted to two hexadecimal characters. For example, (byte)1 is converted to `01` and (byte)27 is converted to `1B`. If the request content is a binary array in the Java format, for example, `{(byte)1, (byte)27}`, you can convert the binary array to `011b` or `011B`. Hexadecimal characters are not case-sensitive in site monitoring tasks. You can enter `011B` in the request content and set the request_format parameter to hex.
	//
	// 	- Text format: Common text refers to strings that consist of printable characters.
	//
	// example:
	//
	// cf0f85
	ResponseContent *string `json:"response_content,omitempty" xml:"response_content,omitempty"`
	// The format of the HTTP response. Valid values:
	//
	// 	- hex: hexadecimal
	//
	// 	- txt: text
	//
	// example:
	//
	// hex
	ResponseFormat *string `json:"response_format,omitempty" xml:"response_format,omitempty"`
	// The number of times a failed detection request is retried.
	//
	// example:
	//
	// 1
	RetryDelay *int32 `json:"retry_delay,omitempty" xml:"retry_delay,omitempty"`
	// The timeout period. Unit: milliseconds.
	//
	// example:
	//
	// 3000
	TimeOut *int64 `json:"time_out,omitempty" xml:"time_out,omitempty"`
	// Indicates whether redirects are followed if the status code 301 or 302 is returned. Valid values:
	//
	// 	- true: Redirects are not followed.
	//
	// 	- false (default): Redirects are followed.
	//
	// example:
	//
	// false
	UnfollowRedirect *bool `json:"unfollow_redirect,omitempty" xml:"unfollow_redirect,omitempty"`
	// The username of the FTP, SMTP, or POP3 protocol.
	//
	// example:
	//
	// testUser
	Username *string `json:"username,omitempty" xml:"username,omitempty"`
}

func (s DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetAcceptableResponseCode(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.AcceptableResponseCode = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetAssertions(v *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertions) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.Assertions = v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetAttempts(v int64) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.Attempts = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetAuthentication(v int32) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.Authentication = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetCertVerify(v bool) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.CertVerify = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetCookie(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.Cookie = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetDiagnosisMtr(v bool) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.DiagnosisMtr = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetDiagnosisPing(v bool) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.DiagnosisPing = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetDnsMatchRule(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.DnsMatchRule = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetDnsServer(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.DnsServer = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetDnsType(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.DnsType = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetEnableOperatorDns(v bool) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.EnableOperatorDns = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetFailureRate(v float32) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.FailureRate = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetHeader(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.Header = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetHttpMethod(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.HttpMethod = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetIsBase64Encode(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.IsBase64Encode = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetMatchRule(v int32) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.MatchRule = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetPassword(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.Password = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetPingNum(v int32) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.PingNum = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetPort(v int32) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.Port = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetProtocol(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.Protocol = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetProxyProtocol(v bool) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.ProxyProtocol = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetRequestContent(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.RequestContent = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetRequestFormat(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.RequestFormat = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetResponseContent(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.ResponseContent = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetResponseFormat(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.ResponseFormat = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetRetryDelay(v int32) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.RetryDelay = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetTimeOut(v int64) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.TimeOut = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetUnfollowRedirect(v bool) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.UnfollowRedirect = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson) SetUsername(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJson {
	s.Username = &v
	return s
}

type DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertions struct {
	Assertions []*DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions `json:"assertions,omitempty" xml:"assertions,omitempty" type:"Repeated"`
}

func (s DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertions) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertions) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertions) SetAssertions(v []*DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertions {
	s.Assertions = v
	return s
}

type DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions struct {
	// The comparison operator of the assertion. Valid values:
	//
	// 	- contains: contains
	//
	// 	- doesNotContain: does not contain
	//
	// 	- matches: matches regular expressions
	//
	// 	- doesNotMatch: does not match regular expressions
	//
	// 	- is: equal to a numeric value or matches a character
	//
	// 	- isNot: not equal to
	//
	// 	- lessThan: less than
	//
	// 	- moreThan: greater than
	//
	// example:
	//
	// lessThan
	Operator *string `json:"operator,omitempty" xml:"operator,omitempty"`
	// The parsing path of the assertion.
	//
	// 	- If the assertion type is `body_json`, the path is `json path`.
	//
	// 	- If the assertion type is `body_xml`, the path is `xml path`.
	//
	// example:
	//
	// json path
	Property *string `json:"property,omitempty" xml:"property,omitempty"`
	// The numeric value or character used for matching.
	//
	// example:
	//
	// 1000
	Target *string `json:"target,omitempty" xml:"target,omitempty"`
	// The assertion type. Valid values:
	//
	// 	- response_time: checks whether the response time meets expectations.
	//
	// 	- status_code: checks whether the HTTP status code meets expectations.
	//
	// 	- header: checks whether the fields in the response header meet expectations.
	//
	// 	- body_text: checks whether the content in the response body meets expectations by using text matching.
	//
	// 	- body_json: checks whether the content in the response body meets expectations by using JSON parsing (JSONPath).
	//
	// 	- body_xml: checks whether the content in the response body meets expectations by using XML parsing (XPath).
	//
	// example:
	//
	// response_time
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions) SetOperator(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions {
	s.Operator = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions) SetProperty(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions {
	s.Property = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions) SetTarget(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions {
	s.Target = &v
	return s
}

func (s *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions) SetType(v string) *DescribeSiteMonitorListResponseBodySiteMonitorsSiteMonitorOptionsJsonAssertionsAssertions {
	s.Type = &v
	return s
}

type DescribeSiteMonitorListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSiteMonitorListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSiteMonitorListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorListResponse) SetHeaders(v map[string]*string) *DescribeSiteMonitorListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSiteMonitorListResponse) SetStatusCode(v int32) *DescribeSiteMonitorListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSiteMonitorListResponse) SetBody(v *DescribeSiteMonitorListResponseBody) *DescribeSiteMonitorListResponse {
	s.Body = v
	return s
}

type DescribeSiteMonitorLogRequest struct {
	// example:
	//
	// Chrome
	Browser     *string `json:"Browser,omitempty" xml:"Browser,omitempty"`
	BrowserInfo *string `json:"BrowserInfo,omitempty" xml:"BrowserInfo,omitempty"`
	// The city identification code.
	//
	// example:
	//
	// 546
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// laptop
	Device *string `json:"Device,omitempty" xml:"Device,omitempty"`
	// The end of the time range to query. Valid values:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
	//
	// 	- UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format
	//
	// >  We recommend that you use UNIX timestamps to prevent time zone-related issues.
	//
	// example:
	//
	// 1638422475687
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The filter condition.
	//
	// You can specify a simple expression, for example, `TotalTime>100`. In this case, the operation returns only the data for instant test tasks whose total response time exceeds 100 milliseconds.
	//
	// example:
	//
	// TotalTime>100
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// The carrier identification code.
	//
	// example:
	//
	// 465
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The number of entries to return on each page. Valid values: 1 to 1440.
	//
	// example:
	//
	// 1000
	Length *int32 `json:"Length,omitempty" xml:"Length,omitempty"`
	// The name of the metric.
	//
	// Only the `ProbeLog` metric is supported.
	//
	// example:
	//
	// ProbeLog
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The token that is used to initiate the next request if the response of the current request is truncated. You can use the token to initiate another request and obtain the remaining records.``
	//
	// example:
	//
	// IWBjqMYSy0is7zSMGu16****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The start of the time range to query. The following formats are supported:
	//
	// 	- UNIX timestamp: the number of milliseconds that have elapsed since 00:00:00 Thursday, January 1, 1970
	//
	// 	- UTC time: the UTC time that follows the YYYY-MM-DDThh:mm:ssZ format
	//
	// >
	//
	// 	- The specified time range includes the end time and excludes the start time. The start time must be earlier than the end time.\\
	//
	//     We recommend that you use UNIX timestamps to prevent time zone-related issues.
	//
	// example:
	//
	// 1638422474389
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The IDs of the instant test tasks. Separate multiple task IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// afa5c3ce-f944-4363-9edb-ce919a29****
	TaskIds *string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty"`
}

func (s DescribeSiteMonitorLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorLogRequest) SetBrowser(v string) *DescribeSiteMonitorLogRequest {
	s.Browser = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetBrowserInfo(v string) *DescribeSiteMonitorLogRequest {
	s.BrowserInfo = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetCity(v string) *DescribeSiteMonitorLogRequest {
	s.City = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetDevice(v string) *DescribeSiteMonitorLogRequest {
	s.Device = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetEndTime(v string) *DescribeSiteMonitorLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetFilter(v string) *DescribeSiteMonitorLogRequest {
	s.Filter = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetIsp(v string) *DescribeSiteMonitorLogRequest {
	s.Isp = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetLength(v int32) *DescribeSiteMonitorLogRequest {
	s.Length = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetMetricName(v string) *DescribeSiteMonitorLogRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetNextToken(v string) *DescribeSiteMonitorLogRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetRegionId(v string) *DescribeSiteMonitorLogRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetStartTime(v string) *DescribeSiteMonitorLogRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSiteMonitorLogRequest) SetTaskIds(v string) *DescribeSiteMonitorLogRequest {
	s.TaskIds = &v
	return s
}

type DescribeSiteMonitorLogResponseBody struct {
	// The HTTP status code.
	//
	// **
	//
	// **Description*	- The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The logs of the instant test tasks.
	//
	// example:
	//
	// [{\\\\"redirectCount\\\\":0.0,\\\\"SSLConnectTime\\\\":0.0,\\\\"pingDetail\\\\":\\\\"\\\\",\\\\"HTTPConnectTime\\\\":0.0,\\\\"isp\\\\":\\\\"465\\\\",\\\\"errorCode\\\\":611,\\\\"ispCN\\\\":\\\\"Alibaba\\\\",\\\\"resolution\\\\":\\\\"\\\\",\\\\"areaEN\\\\":\\\\"HuaBei\\\\",\\\\"taskEndTimestamp\\\\":1638422475687,\\\\"targetIspEN\\\\":\\\\"\\\\",\\\\"TotalTime\\\\":1.0,\\\\"taskStartTimestamp\\\\":1638422474389,\\\\"countryCN\\\\":\\\\"China\\\\",\\\\"provinceEN\\\\":\\\\"Beijing\\\\",\\\\"countryEN\\\\":\\\\"China\\\\",\\\\"targetCityEN\\\\":\\\\"\\\\",\\\\"curlConnectTime\\\\":0.0,\\\\"ips\\\\":\\\\"\\\\",\\\\"route\\\\":\\\\"\\\\",\\\\"tcpConnectTime\\\\":0.0,\\\\"cityEN\\\\":\\\\"Beijing\\\\",\\\\"HTTPDownloadSpeed\\\\":0.0,\\\\"HTTPDownloadTime\\\\":0.0,\\\\"HTTPResponseCode\\\\":0.0,\\\\"areaCN\\\\":\\\\"North China\\\\",\\\\"city\\\\":\\\\"546\\\\",\\\\"expection\\\\":\\\\"\\\\",\\\\"suorceIp\\\\":\\\\"192.168.XX.XX \\\\",\\\\"ispEN\\\\":\\\\"Alibaba\\\\",\\\\"HTTPDNSTime\\\\":1.0,\\\\"targetIsp\\\\":\\\\"\\\\",\\\\"curlStarttransferTime\\\\":0.0,\\\\"provinceCN\\\\":\\\\"Beijing\\\\",\\\\"timestamp\\\\":1638422474000,\\\\"redirectTime\\\\":0.0,\\\\"targetCity\\\\":\\\\"\\\\", \\\\"expect\\\\":\\\\"\\\\",\\\\"HTTPDownloadSize\\\\":0.0,\\\\"localDns\\\\":\\\\"192.168.XX.XX\\\\",\\\\"cityCN\\\\":\\\\"Beijing\\\\",\\\\"taskId\\\\":\\\\"afa5c3ce-f944-4363-9edb-ce919a29\\*\\*\\*\\*\\\\"}]
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// IWBjqMYSy0is7zSMGu16****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 67F646FA-ED8A-58C2-B461-451DB52C8B14
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSiteMonitorLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorLogResponseBody) SetCode(v string) *DescribeSiteMonitorLogResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSiteMonitorLogResponseBody) SetData(v string) *DescribeSiteMonitorLogResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeSiteMonitorLogResponseBody) SetMessage(v string) *DescribeSiteMonitorLogResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSiteMonitorLogResponseBody) SetNextToken(v string) *DescribeSiteMonitorLogResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeSiteMonitorLogResponseBody) SetRequestId(v string) *DescribeSiteMonitorLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSiteMonitorLogResponseBody) SetSuccess(v string) *DescribeSiteMonitorLogResponseBody {
	s.Success = &v
	return s
}

type DescribeSiteMonitorLogResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSiteMonitorLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSiteMonitorLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorLogResponse) SetHeaders(v map[string]*string) *DescribeSiteMonitorLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeSiteMonitorLogResponse) SetStatusCode(v int32) *DescribeSiteMonitorLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSiteMonitorLogResponse) SetBody(v *DescribeSiteMonitorLogResponseBody) *DescribeSiteMonitorLogResponse {
	s.Body = v
	return s
}

type DescribeSiteMonitorQuotaRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeSiteMonitorQuotaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorQuotaRequest) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorQuotaRequest) SetRegionId(v string) *DescribeSiteMonitorQuotaRequest {
	s.RegionId = &v
	return s
}

type DescribeSiteMonitorQuotaResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The quota.
	Data *DescribeSiteMonitorQuotaResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 26860260-76C6-404E-AB7A-EB98D36A6885
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSiteMonitorQuotaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorQuotaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorQuotaResponseBody) SetCode(v string) *DescribeSiteMonitorQuotaResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSiteMonitorQuotaResponseBody) SetData(v *DescribeSiteMonitorQuotaResponseBodyData) *DescribeSiteMonitorQuotaResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSiteMonitorQuotaResponseBody) SetMessage(v string) *DescribeSiteMonitorQuotaResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSiteMonitorQuotaResponseBody) SetRequestId(v string) *DescribeSiteMonitorQuotaResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSiteMonitorQuotaResponseBody) SetSuccess(v string) *DescribeSiteMonitorQuotaResponseBody {
	s.Success = &v
	return s
}

type DescribeSiteMonitorQuotaResponseBodyData struct {
	// Indicates whether second-level monitoring is enabled. Valid values:
	//
	// 	- true: Second-level monitoring is enabled.
	//
	// 	- false: Second-level monitoring is disabled.
	//
	// example:
	//
	// false
	SecondMonitor *bool `json:"SecondMonitor,omitempty" xml:"SecondMonitor,omitempty"`
	// The quota of detection points that are provided by Alibaba Cloud. Five detection points are provided for free.
	//
	// example:
	//
	// 5
	SiteMonitorIdcQuota *int32 `json:"SiteMonitorIdcQuota,omitempty" xml:"SiteMonitorIdcQuota,omitempty"`
	// The quota of detection points that are not provided by Alibaba Cloud. Default value: 0.
	//
	// example:
	//
	// 0
	SiteMonitorOperatorQuotaQuota *int32 `json:"SiteMonitorOperatorQuotaQuota,omitempty" xml:"SiteMonitorOperatorQuotaQuota,omitempty"`
	// The used quota of site monitoring tasks.
	//
	// example:
	//
	// 6
	SiteMonitorQuotaTaskUsed *int32 `json:"SiteMonitorQuotaTaskUsed,omitempty" xml:"SiteMonitorQuotaTaskUsed,omitempty"`
	// The quota of site monitoring tasks.
	//
	// example:
	//
	// 10
	SiteMonitorTaskQuota *int32 `json:"SiteMonitorTaskQuota,omitempty" xml:"SiteMonitorTaskQuota,omitempty"`
	// The version of site monitoring. Valid values:
	//
	// 	- V1
	//
	// 	- V2
	//
	// example:
	//
	// V1
	SiteMonitorVersion *string `json:"SiteMonitorVersion,omitempty" xml:"SiteMonitorVersion,omitempty"`
}

func (s DescribeSiteMonitorQuotaResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorQuotaResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorQuotaResponseBodyData) SetSecondMonitor(v bool) *DescribeSiteMonitorQuotaResponseBodyData {
	s.SecondMonitor = &v
	return s
}

func (s *DescribeSiteMonitorQuotaResponseBodyData) SetSiteMonitorIdcQuota(v int32) *DescribeSiteMonitorQuotaResponseBodyData {
	s.SiteMonitorIdcQuota = &v
	return s
}

func (s *DescribeSiteMonitorQuotaResponseBodyData) SetSiteMonitorOperatorQuotaQuota(v int32) *DescribeSiteMonitorQuotaResponseBodyData {
	s.SiteMonitorOperatorQuotaQuota = &v
	return s
}

func (s *DescribeSiteMonitorQuotaResponseBodyData) SetSiteMonitorQuotaTaskUsed(v int32) *DescribeSiteMonitorQuotaResponseBodyData {
	s.SiteMonitorQuotaTaskUsed = &v
	return s
}

func (s *DescribeSiteMonitorQuotaResponseBodyData) SetSiteMonitorTaskQuota(v int32) *DescribeSiteMonitorQuotaResponseBodyData {
	s.SiteMonitorTaskQuota = &v
	return s
}

func (s *DescribeSiteMonitorQuotaResponseBodyData) SetSiteMonitorVersion(v string) *DescribeSiteMonitorQuotaResponseBodyData {
	s.SiteMonitorVersion = &v
	return s
}

type DescribeSiteMonitorQuotaResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSiteMonitorQuotaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSiteMonitorQuotaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorQuotaResponse) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorQuotaResponse) SetHeaders(v map[string]*string) *DescribeSiteMonitorQuotaResponse {
	s.Headers = v
	return s
}

func (s *DescribeSiteMonitorQuotaResponse) SetStatusCode(v int32) *DescribeSiteMonitorQuotaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSiteMonitorQuotaResponse) SetBody(v *DescribeSiteMonitorQuotaResponseBody) *DescribeSiteMonitorQuotaResponse {
	s.Body = v
	return s
}

type DescribeSiteMonitorStatisticsRequest struct {
	// The metric name. Valid values:
	//
	// 	- Availability
	//
	// 	- ErrorRate
	//
	// 	- ResponseTime
	//
	// This parameter is required.
	//
	// example:
	//
	// Availability
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query.
	//
	// Unit: milliseconds. The default value is 1 hour ahead of the current time.
	//
	// example:
	//
	// 1576142850527
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The ID of the site monitoring task.
	//
	// For more information about how to obtain the ID of a site monitoring task, see [DescribeSiteMonitorList](https://help.aliyun.com/document_detail/115052.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ef4cdc8b-9dc7-43e7-810e-f950e56c****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The statistical period.
	//
	// Unit: minutes. Default value: 1440 (one day). Maximum value: 43200 (30 days).
	//
	// example:
	//
	// 1440
	TimeRange *string `json:"TimeRange,omitempty" xml:"TimeRange,omitempty"`
}

func (s DescribeSiteMonitorStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorStatisticsRequest) SetMetricName(v string) *DescribeSiteMonitorStatisticsRequest {
	s.MetricName = &v
	return s
}

func (s *DescribeSiteMonitorStatisticsRequest) SetRegionId(v string) *DescribeSiteMonitorStatisticsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSiteMonitorStatisticsRequest) SetStartTime(v string) *DescribeSiteMonitorStatisticsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSiteMonitorStatisticsRequest) SetTaskId(v string) *DescribeSiteMonitorStatisticsRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeSiteMonitorStatisticsRequest) SetTimeRange(v string) *DescribeSiteMonitorStatisticsRequest {
	s.TimeRange = &v
	return s
}

type DescribeSiteMonitorStatisticsResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The statistics.
	//
	// example:
	//
	// 100
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Succcessful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3AD2724D-E317-4BFB-B422-D6691D071BE1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSiteMonitorStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorStatisticsResponseBody) SetCode(v string) *DescribeSiteMonitorStatisticsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSiteMonitorStatisticsResponseBody) SetData(v string) *DescribeSiteMonitorStatisticsResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeSiteMonitorStatisticsResponseBody) SetMessage(v string) *DescribeSiteMonitorStatisticsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSiteMonitorStatisticsResponseBody) SetRequestId(v string) *DescribeSiteMonitorStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSiteMonitorStatisticsResponseBody) SetSuccess(v string) *DescribeSiteMonitorStatisticsResponseBody {
	s.Success = &v
	return s
}

type DescribeSiteMonitorStatisticsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSiteMonitorStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSiteMonitorStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSiteMonitorStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSiteMonitorStatisticsResponse) SetHeaders(v map[string]*string) *DescribeSiteMonitorStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSiteMonitorStatisticsResponse) SetStatusCode(v int32) *DescribeSiteMonitorStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSiteMonitorStatisticsResponse) SetBody(v *DescribeSiteMonitorStatisticsResponseBody) *DescribeSiteMonitorStatisticsResponse {
	s.Body = v
	return s
}

type DescribeSyntheticProbeListRequest struct {
	City *string `json:"City,omitempty" xml:"City,omitempty"`
	// example:
	//
	// false
	IdcProbe *bool `json:"IdcProbe,omitempty" xml:"IdcProbe,omitempty"`
	// example:
	//
	// false
	Ipv4 *bool `json:"Ipv4,omitempty" xml:"Ipv4,omitempty"`
	// example:
	//
	// false
	Ipv6 *bool   `json:"Ipv6,omitempty" xml:"Ipv6,omitempty"`
	Isp  *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// example:
	//
	// false
	LmProbe *bool `json:"LmProbe,omitempty" xml:"LmProbe,omitempty"`
	// example:
	//
	// false
	MbProbe  *bool   `json:"MbProbe,omitempty" xml:"MbProbe,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// true
	ViewAll *bool `json:"ViewAll,omitempty" xml:"ViewAll,omitempty"`
}

func (s DescribeSyntheticProbeListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSyntheticProbeListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSyntheticProbeListRequest) SetCity(v string) *DescribeSyntheticProbeListRequest {
	s.City = &v
	return s
}

func (s *DescribeSyntheticProbeListRequest) SetIdcProbe(v bool) *DescribeSyntheticProbeListRequest {
	s.IdcProbe = &v
	return s
}

func (s *DescribeSyntheticProbeListRequest) SetIpv4(v bool) *DescribeSyntheticProbeListRequest {
	s.Ipv4 = &v
	return s
}

func (s *DescribeSyntheticProbeListRequest) SetIpv6(v bool) *DescribeSyntheticProbeListRequest {
	s.Ipv6 = &v
	return s
}

func (s *DescribeSyntheticProbeListRequest) SetIsp(v string) *DescribeSyntheticProbeListRequest {
	s.Isp = &v
	return s
}

func (s *DescribeSyntheticProbeListRequest) SetLmProbe(v bool) *DescribeSyntheticProbeListRequest {
	s.LmProbe = &v
	return s
}

func (s *DescribeSyntheticProbeListRequest) SetMbProbe(v bool) *DescribeSyntheticProbeListRequest {
	s.MbProbe = &v
	return s
}

func (s *DescribeSyntheticProbeListRequest) SetRegionId(v string) *DescribeSyntheticProbeListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSyntheticProbeListRequest) SetViewAll(v bool) *DescribeSyntheticProbeListRequest {
	s.ViewAll = &v
	return s
}

type DescribeSyntheticProbeListResponseBody struct {
	// example:
	//
	// 200
	Code        *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	IspCityList []*DescribeSyntheticProbeListResponseBodyIspCityList `json:"IspCityList,omitempty" xml:"IspCityList,omitempty" type:"Repeated"`
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 87170bc7-e28a-4c93-b9bf-90a1dbe84736
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSyntheticProbeListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSyntheticProbeListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSyntheticProbeListResponseBody) SetCode(v string) *DescribeSyntheticProbeListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBody) SetIspCityList(v []*DescribeSyntheticProbeListResponseBodyIspCityList) *DescribeSyntheticProbeListResponseBody {
	s.IspCityList = v
	return s
}

func (s *DescribeSyntheticProbeListResponseBody) SetMessage(v string) *DescribeSyntheticProbeListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBody) SetRequestId(v string) *DescribeSyntheticProbeListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBody) SetSuccess(v string) *DescribeSyntheticProbeListResponseBody {
	s.Success = &v
	return s
}

type DescribeSyntheticProbeListResponseBodyIspCityList struct {
	AreaCn *string `json:"AreaCn,omitempty" xml:"AreaCn,omitempty"`
	// example:
	//
	// Huabei
	AreaEn *string `json:"AreaEn,omitempty" xml:"AreaEn,omitempty"`
	// example:
	//
	// 738
	City   *string `json:"City,omitempty" xml:"City,omitempty"`
	CityCn *string `json:"CityCn,omitempty" xml:"CityCn,omitempty"`
	// example:
	//
	// Beijing
	CityEn *string `json:"CityEn,omitempty" xml:"CityEn,omitempty"`
	// example:
	//
	// 629
	Country   *string `json:"Country,omitempty" xml:"Country,omitempty"`
	CountryCn *string `json:"CountryCn,omitempty" xml:"CountryCn,omitempty"`
	// example:
	//
	// China
	CountryEn *string `json:"CountryEn,omitempty" xml:"CountryEn,omitempty"`
	// example:
	//
	// 1
	IdcV4ProbeCount *int32    `json:"IdcV4ProbeCount,omitempty" xml:"IdcV4ProbeCount,omitempty"`
	IdcV6ProbeCount *int32    `json:"IdcV6ProbeCount,omitempty" xml:"IdcV6ProbeCount,omitempty"`
	IpPool          []*string `json:"IpPool,omitempty" xml:"IpPool,omitempty" type:"Repeated"`
	// example:
	//
	// 232
	Isp   *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	IspCn *string `json:"IspCn,omitempty" xml:"IspCn,omitempty"`
	// example:
	//
	// China-Unicom
	IspEn *string `json:"IspEn,omitempty" xml:"IspEn,omitempty"`
	// example:
	//
	// 1
	LmProbeCount *int32 `json:"LmProbeCount,omitempty" xml:"LmProbeCount,omitempty"`
	// example:
	//
	// 1
	MbProbeCount *int32 `json:"MbProbeCount,omitempty" xml:"MbProbeCount,omitempty"`
	// example:
	//
	// 264
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
	RegionCn *string `json:"RegionCn,omitempty" xml:"RegionCn,omitempty"`
	// example:
	//
	// Jiangxi
	RegionEn *string `json:"RegionEn,omitempty" xml:"RegionEn,omitempty"`
}

func (s DescribeSyntheticProbeListResponseBodyIspCityList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSyntheticProbeListResponseBodyIspCityList) GoString() string {
	return s.String()
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetAreaCn(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.AreaCn = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetAreaEn(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.AreaEn = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetCity(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.City = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetCityCn(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.CityCn = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetCityEn(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.CityEn = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetCountry(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.Country = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetCountryCn(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.CountryCn = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetCountryEn(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.CountryEn = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetIdcV4ProbeCount(v int32) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.IdcV4ProbeCount = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetIdcV6ProbeCount(v int32) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.IdcV6ProbeCount = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetIpPool(v []*string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.IpPool = v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetIsp(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.Isp = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetIspCn(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.IspCn = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetIspEn(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.IspEn = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetLmProbeCount(v int32) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.LmProbeCount = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetMbProbeCount(v int32) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.MbProbeCount = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetRegion(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.Region = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetRegionCn(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.RegionCn = &v
	return s
}

func (s *DescribeSyntheticProbeListResponseBodyIspCityList) SetRegionEn(v string) *DescribeSyntheticProbeListResponseBodyIspCityList {
	s.RegionEn = &v
	return s
}

type DescribeSyntheticProbeListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSyntheticProbeListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSyntheticProbeListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSyntheticProbeListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSyntheticProbeListResponse) SetHeaders(v map[string]*string) *DescribeSyntheticProbeListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSyntheticProbeListResponse) SetStatusCode(v int32) *DescribeSyntheticProbeListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSyntheticProbeListResponse) SetBody(v *DescribeSyntheticProbeListResponseBody) *DescribeSyntheticProbeListResponse {
	s.Body = v
	return s
}

type DescribeSystemEventAttributeRequest struct {
	// The end of the time range to query.
	//
	// The value must be a UNIX timestamp. It is the number of seconds that have elapsed since 00:00:00 UTC, January 1, 1970.
	//
	// example:
	//
	// 1552221584949
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The type of the system event.
	//
	// >  You can call the [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html) operation to query the types of system events.
	//
	// example:
	//
	// Exception
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 12346
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The level of the system event. Valid values:
	//
	// 	- CRITICAL: critical
	//
	// 	- WARN: warning
	//
	// 	- INFO: information
	//
	// example:
	//
	// CRITICAL
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The name of the system event.
	//
	// >  You can call the [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html) operation to query the names of system events.
	//
	// example:
	//
	// BucketIngressBandwidth
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of the page to return.
	//
	// Valid values: 1 to 100000000.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// Valid values: 1 to 100.
	//
	// Default value: 10
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The abbreviation of the service name.
	//
	// >  You can call the [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html) operation to query the abbreviations of service names.
	//
	// example:
	//
	// oss
	Product  *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The keywords that are used to search for the system event. Valid values:
	//
	// 	- If you want to search for the system event whose content contains a and b, set the value to `a and b`.
	//
	// 	- If you want to search for the system event whose content contains a or b, set the value to `a or b`.
	//
	// example:
	//
	// cms
	SearchKeywords *string `json:"SearchKeywords,omitempty" xml:"SearchKeywords,omitempty"`
	// The beginning of the time range to query.
	//
	// The value must be a UNIX timestamp. It is the number of seconds that have elapsed since 00:00:00 UTC, January 1, 1970.
	//
	// example:
	//
	// 1552199984949
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the system event.
	//
	// >  You can call the [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html) operation to query the statuses of system events.
	//
	// example:
	//
	// normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSystemEventAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventAttributeRequest) SetEndTime(v string) *DescribeSystemEventAttributeRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetEventType(v string) *DescribeSystemEventAttributeRequest {
	s.EventType = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetGroupId(v string) *DescribeSystemEventAttributeRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetLevel(v string) *DescribeSystemEventAttributeRequest {
	s.Level = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetName(v string) *DescribeSystemEventAttributeRequest {
	s.Name = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetPageNumber(v int32) *DescribeSystemEventAttributeRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetPageSize(v int32) *DescribeSystemEventAttributeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetProduct(v string) *DescribeSystemEventAttributeRequest {
	s.Product = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetRegionId(v string) *DescribeSystemEventAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetSearchKeywords(v string) *DescribeSystemEventAttributeRequest {
	s.SearchKeywords = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetStartTime(v string) *DescribeSystemEventAttributeRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSystemEventAttributeRequest) SetStatus(v string) *DescribeSystemEventAttributeRequest {
	s.Status = &v
	return s
}

type DescribeSystemEventAttributeResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call is successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The message that is returned. If the call is successful, `success` is returned. If the call fails, an error message is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 60912C8D-B340-4253-ADE7-61ACDFD25CFC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call is successful. Valid values: True: The call is successful. false: The call fails.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The details of the event.
	SystemEvents *DescribeSystemEventAttributeResponseBodySystemEvents `json:"SystemEvents,omitempty" xml:"SystemEvents,omitempty" type:"Struct"`
}

func (s DescribeSystemEventAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventAttributeResponseBody) SetCode(v string) *DescribeSystemEventAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBody) SetMessage(v string) *DescribeSystemEventAttributeResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBody) SetRequestId(v string) *DescribeSystemEventAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBody) SetSuccess(v string) *DescribeSystemEventAttributeResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBody) SetSystemEvents(v *DescribeSystemEventAttributeResponseBodySystemEvents) *DescribeSystemEventAttributeResponseBody {
	s.SystemEvents = v
	return s
}

type DescribeSystemEventAttributeResponseBodySystemEvents struct {
	SystemEvent []*DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent `json:"SystemEvent,omitempty" xml:"SystemEvent,omitempty" type:"Repeated"`
}

func (s DescribeSystemEventAttributeResponseBodySystemEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventAttributeResponseBodySystemEvents) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventAttributeResponseBodySystemEvents) SetSystemEvent(v []*DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) *DescribeSystemEventAttributeResponseBodySystemEvents {
	s.SystemEvent = v
	return s
}

type DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent struct {
	// The details of the event.
	//
	// example:
	//
	// [{"product":"CloudMonitor","content":"{\\"ipGroup\\":\\"112.126.XX.XX,10.163.XX.XX\\",\\"tianjimonVersion\\":\\"1.2.22\\"}","groupId":"176,177,178,179,180,692,120812,1663836,96,2028302","time":"1552209568000","resourceId":"acs:ecs:cn-beijing:173651113438****:instance/i-25k35****","level":"CRITICAL","status":"stopped","instanceName":"cmssiteprobebj-6","name":"Agent_Status_Stopped","regionId":"cn-beijing"}]
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The event ID.
	//
	// example:
	//
	// b936efc9-f621-4e8a-a6eb-076be40e****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance name.
	//
	// example:
	//
	// instanceId1
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The level of the event. Valid values:
	//
	// 	- CRITICAL
	//
	// 	- WARN
	//
	// 	- INFO
	//
	// example:
	//
	// WARN
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The event name.
	//
	// example:
	//
	// Agent_Status_Stopped
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The abbreviation of the service name.
	//
	// example:
	//
	// CloudMonitor
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource ID.
	//
	// example:
	//
	// xxxxx-1
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The status of the event.
	//
	// example:
	//
	// normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the event occurred. The value is a timestamp.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1552199984000
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetContent(v string) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.Content = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetGroupId(v string) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.GroupId = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetId(v string) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.Id = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetInstanceName(v string) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.InstanceName = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetLevel(v string) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.Level = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetName(v string) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.Name = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetProduct(v string) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.Product = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetRegionId(v string) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.RegionId = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetResourceId(v string) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.ResourceId = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetStatus(v string) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.Status = &v
	return s
}

func (s *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent) SetTime(v int64) *DescribeSystemEventAttributeResponseBodySystemEventsSystemEvent {
	s.Time = &v
	return s
}

type DescribeSystemEventAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSystemEventAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSystemEventAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventAttributeResponse) SetHeaders(v map[string]*string) *DescribeSystemEventAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeSystemEventAttributeResponse) SetStatusCode(v int32) *DescribeSystemEventAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSystemEventAttributeResponse) SetBody(v *DescribeSystemEventAttributeResponseBody) *DescribeSystemEventAttributeResponse {
	s.Body = v
	return s
}

type DescribeSystemEventCountRequest struct {
	// The end of the time range to query. Unit: milliseconds.
	//
	// example:
	//
	// 1635993921000
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The type of the system event.
	//
	// You can call the DescribeSystemEventMetaList operation to obtain the value of the response parameter `EventType`. The value of the EventType parameter indicates the types of system events that occurred for all cloud services in your Alibaba Cloud account. For more information, see [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html).
	//
	// example:
	//
	// StatusNotification
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 17285****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The level of the system event. Valid values:
	//
	// 	- Critical
	//
	// 	- Warn
	//
	// 	- Info
	//
	// You can call the DescribeSystemEventMetaList operation to obtain the value of the response parameter `Level`. The value of the Level parameter indicates the levels of system events that occurred for all cloud services in your Alibaba Cloud account. For more information, see [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html).
	//
	// example:
	//
	// Info
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The name of the system event.
	//
	// You can call the DescribeSystemEventMetaList operation to obtain the value of the response parameter `Name`. The value of the Name parameter indicates the names of system events that occurred for all cloud services in your Alibaba Cloud account. For more information, see [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html).
	//
	// example:
	//
	// Instance:StateChange
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The name of the cloud service.
	//
	// You can call the DescribeSystemEventMetaList operation to obtain the value of the response parameter `Product`. The value of the Product parameter indicates the names of all cloud services in which the system events of your Alibaba Cloud account occurred. For more information, see [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html).
	//
	// example:
	//
	// ECS
	Product  *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The keywords that are used to search for the system event. Valid values:
	//
	// 	- If you want to search for the system event whose content contains a and b, set the value to `a and b`.
	//
	// 	- If you want to search for the system event whose content contains a or b, set the value to `a or b`.
	//
	// example:
	//
	// ECS
	SearchKeywords *string `json:"SearchKeywords,omitempty" xml:"SearchKeywords,omitempty"`
	// The beginning of the time range to query. Unit: milliseconds.
	//
	// example:
	//
	// 1635993541000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the system event.
	//
	// You can call the DescribeSystemEventMetaList operation to obtain the value of the response parameter `Status`. The value of the Status parameter indicates the status of system events that occurred for all cloud services in your Alibaba Cloud account. For more information, see [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html).
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSystemEventCountRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventCountRequest) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventCountRequest) SetEndTime(v string) *DescribeSystemEventCountRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSystemEventCountRequest) SetEventType(v string) *DescribeSystemEventCountRequest {
	s.EventType = &v
	return s
}

func (s *DescribeSystemEventCountRequest) SetGroupId(v string) *DescribeSystemEventCountRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeSystemEventCountRequest) SetLevel(v string) *DescribeSystemEventCountRequest {
	s.Level = &v
	return s
}

func (s *DescribeSystemEventCountRequest) SetName(v string) *DescribeSystemEventCountRequest {
	s.Name = &v
	return s
}

func (s *DescribeSystemEventCountRequest) SetProduct(v string) *DescribeSystemEventCountRequest {
	s.Product = &v
	return s
}

func (s *DescribeSystemEventCountRequest) SetRegionId(v string) *DescribeSystemEventCountRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSystemEventCountRequest) SetSearchKeywords(v string) *DescribeSystemEventCountRequest {
	s.SearchKeywords = &v
	return s
}

func (s *DescribeSystemEventCountRequest) SetStartTime(v string) *DescribeSystemEventCountRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSystemEventCountRequest) SetStatus(v string) *DescribeSystemEventCountRequest {
	s.Status = &v
	return s
}

type DescribeSystemEventCountResponseBody struct {
	// The HTTP status codes.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// If the request was successful, a success message is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C7A7B776-0ACE-5A93-9B07-DE8008D9CCDF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The details of the system event.
	SystemEventCounts *DescribeSystemEventCountResponseBodySystemEventCounts `json:"SystemEventCounts,omitempty" xml:"SystemEventCounts,omitempty" type:"Struct"`
}

func (s DescribeSystemEventCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventCountResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventCountResponseBody) SetCode(v string) *DescribeSystemEventCountResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSystemEventCountResponseBody) SetMessage(v string) *DescribeSystemEventCountResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSystemEventCountResponseBody) SetRequestId(v string) *DescribeSystemEventCountResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSystemEventCountResponseBody) SetSuccess(v string) *DescribeSystemEventCountResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSystemEventCountResponseBody) SetSystemEventCounts(v *DescribeSystemEventCountResponseBodySystemEventCounts) *DescribeSystemEventCountResponseBody {
	s.SystemEventCounts = v
	return s
}

type DescribeSystemEventCountResponseBodySystemEventCounts struct {
	SystemEventCount []*DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount `json:"SystemEventCount,omitempty" xml:"SystemEventCount,omitempty" type:"Repeated"`
}

func (s DescribeSystemEventCountResponseBodySystemEventCounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventCountResponseBodySystemEventCounts) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventCountResponseBodySystemEventCounts) SetSystemEventCount(v []*DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) *DescribeSystemEventCountResponseBodySystemEventCounts {
	s.SystemEventCount = v
	return s
}

type DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount struct {
	// The description of the system event.
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 17285****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// ECS-test
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The level of the system event. Valid values:
	//
	// 	- Critical
	//
	// 	- Warn
	//
	// 	- Info
	//
	// example:
	//
	// Info
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The name of the system event.
	//
	// example:
	//
	// Instance:StateChange
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The number of times that the system event has occurred.
	//
	// example:
	//
	// 3
	Num *int64 `json:"Num,omitempty" xml:"Num,omitempty"`
	// The name of the cloud service in which the system event occurred.
	//
	// example:
	//
	// ECS
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource ID.
	//
	// example:
	//
	// i-rj99xc6cptkk64ml****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The status of the system event.
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the system event occurred. The value is a timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1635993751000
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetContent(v string) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.Content = &v
	return s
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetGroupId(v string) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.GroupId = &v
	return s
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetInstanceName(v string) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.InstanceName = &v
	return s
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetLevel(v string) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.Level = &v
	return s
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetName(v string) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.Name = &v
	return s
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetNum(v int64) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.Num = &v
	return s
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetProduct(v string) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.Product = &v
	return s
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetRegionId(v string) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.RegionId = &v
	return s
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetResourceId(v string) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.ResourceId = &v
	return s
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetStatus(v string) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.Status = &v
	return s
}

func (s *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount) SetTime(v int64) *DescribeSystemEventCountResponseBodySystemEventCountsSystemEventCount {
	s.Time = &v
	return s
}

type DescribeSystemEventCountResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSystemEventCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSystemEventCountResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventCountResponse) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventCountResponse) SetHeaders(v map[string]*string) *DescribeSystemEventCountResponse {
	s.Headers = v
	return s
}

func (s *DescribeSystemEventCountResponse) SetStatusCode(v int32) *DescribeSystemEventCountResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSystemEventCountResponse) SetBody(v *DescribeSystemEventCountResponseBody) *DescribeSystemEventCountResponse {
	s.Body = v
	return s
}

type DescribeSystemEventHistogramRequest struct {
	// The end time.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552220485596
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The event type.
	//
	// >  You can call the [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html) operation to query the types of system events.
	//
	// example:
	//
	// Exception
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 12345
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The level of the event. Valid values:
	//
	// 	- CRITICAL
	//
	// 	- WARN
	//
	// 	- INFO
	//
	// example:
	//
	// CRITICAL
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The event name.
	//
	// >  You can call the [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html) operation to query the names of system events.
	//
	// example:
	//
	// BucketIngressBandwidth
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The abbreviation of the service name.
	//
	// >  You can call the [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html) operation to query the abbreviations of service names.
	//
	// example:
	//
	// OSS
	Product  *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The keywords that are used to search for the system event. Valid values:
	//
	// 	- If you want to search for the system event whose content contains a and b, set the value to `a and b`.
	//
	// 	- If you want to search for the system event whose content contains a or b, set the value to `a or b`.
	//
	// example:
	//
	// cms
	SearchKeywords *string `json:"SearchKeywords,omitempty" xml:"SearchKeywords,omitempty"`
	// The start time.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552209685596
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The event status.
	//
	// >  You can call the [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html) operation to query the status of system events.
	//
	// example:
	//
	// normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSystemEventHistogramRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventHistogramRequest) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventHistogramRequest) SetEndTime(v string) *DescribeSystemEventHistogramRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSystemEventHistogramRequest) SetEventType(v string) *DescribeSystemEventHistogramRequest {
	s.EventType = &v
	return s
}

func (s *DescribeSystemEventHistogramRequest) SetGroupId(v string) *DescribeSystemEventHistogramRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeSystemEventHistogramRequest) SetLevel(v string) *DescribeSystemEventHistogramRequest {
	s.Level = &v
	return s
}

func (s *DescribeSystemEventHistogramRequest) SetName(v string) *DescribeSystemEventHistogramRequest {
	s.Name = &v
	return s
}

func (s *DescribeSystemEventHistogramRequest) SetProduct(v string) *DescribeSystemEventHistogramRequest {
	s.Product = &v
	return s
}

func (s *DescribeSystemEventHistogramRequest) SetRegionId(v string) *DescribeSystemEventHistogramRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSystemEventHistogramRequest) SetSearchKeywords(v string) *DescribeSystemEventHistogramRequest {
	s.SearchKeywords = &v
	return s
}

func (s *DescribeSystemEventHistogramRequest) SetStartTime(v string) *DescribeSystemEventHistogramRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeSystemEventHistogramRequest) SetStatus(v string) *DescribeSystemEventHistogramRequest {
	s.Status = &v
	return s
}

type DescribeSystemEventHistogramResponseBody struct {
	// The response code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 486029C9-53E1-44B4-85A8-16A571A043FD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true: The request was successful. false: The request failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The information about the number of times the system event occurred during each interval of a time period.
	SystemEventHistograms *DescribeSystemEventHistogramResponseBodySystemEventHistograms `json:"SystemEventHistograms,omitempty" xml:"SystemEventHistograms,omitempty" type:"Struct"`
}

func (s DescribeSystemEventHistogramResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventHistogramResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventHistogramResponseBody) SetCode(v string) *DescribeSystemEventHistogramResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSystemEventHistogramResponseBody) SetMessage(v string) *DescribeSystemEventHistogramResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSystemEventHistogramResponseBody) SetRequestId(v string) *DescribeSystemEventHistogramResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSystemEventHistogramResponseBody) SetSuccess(v string) *DescribeSystemEventHistogramResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeSystemEventHistogramResponseBody) SetSystemEventHistograms(v *DescribeSystemEventHistogramResponseBodySystemEventHistograms) *DescribeSystemEventHistogramResponseBody {
	s.SystemEventHistograms = v
	return s
}

type DescribeSystemEventHistogramResponseBodySystemEventHistograms struct {
	SystemEventHistogram []*DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram `json:"SystemEventHistogram,omitempty" xml:"SystemEventHistogram,omitempty" type:"Repeated"`
}

func (s DescribeSystemEventHistogramResponseBodySystemEventHistograms) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventHistogramResponseBodySystemEventHistograms) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventHistogramResponseBodySystemEventHistograms) SetSystemEventHistogram(v []*DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram) *DescribeSystemEventHistogramResponseBodySystemEventHistograms {
	s.SystemEventHistogram = v
	return s
}

type DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram struct {
	// The number of times the system event occurred.
	//
	// example:
	//
	// 2
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The end time.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552225753000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The start time.
	//
	// This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// example:
	//
	// 1552225770000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram) SetCount(v int64) *DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram {
	s.Count = &v
	return s
}

func (s *DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram) SetEndTime(v int64) *DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram {
	s.EndTime = &v
	return s
}

func (s *DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram) SetStartTime(v int64) *DescribeSystemEventHistogramResponseBodySystemEventHistogramsSystemEventHistogram {
	s.StartTime = &v
	return s
}

type DescribeSystemEventHistogramResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSystemEventHistogramResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSystemEventHistogramResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventHistogramResponse) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventHistogramResponse) SetHeaders(v map[string]*string) *DescribeSystemEventHistogramResponse {
	s.Headers = v
	return s
}

func (s *DescribeSystemEventHistogramResponse) SetStatusCode(v int32) *DescribeSystemEventHistogramResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSystemEventHistogramResponse) SetBody(v *DescribeSystemEventHistogramResponseBody) *DescribeSystemEventHistogramResponse {
	s.Body = v
	return s
}

type DescribeSystemEventMetaListRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeSystemEventMetaListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventMetaListRequest) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventMetaListRequest) SetRegionId(v string) *DescribeSystemEventMetaListRequest {
	s.RegionId = &v
	return s
}

type DescribeSystemEventMetaListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed meta information.
	Data *DescribeSystemEventMetaListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// A6582C8B-E67C-4A19-BC15-EAEFEBDC7995
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSystemEventMetaListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventMetaListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventMetaListResponseBody) SetCode(v int32) *DescribeSystemEventMetaListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSystemEventMetaListResponseBody) SetData(v *DescribeSystemEventMetaListResponseBodyData) *DescribeSystemEventMetaListResponseBody {
	s.Data = v
	return s
}

func (s *DescribeSystemEventMetaListResponseBody) SetMessage(v string) *DescribeSystemEventMetaListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeSystemEventMetaListResponseBody) SetRequestId(v string) *DescribeSystemEventMetaListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSystemEventMetaListResponseBody) SetSuccess(v bool) *DescribeSystemEventMetaListResponseBody {
	s.Success = &v
	return s
}

type DescribeSystemEventMetaListResponseBodyData struct {
	Resource []*DescribeSystemEventMetaListResponseBodyDataResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeSystemEventMetaListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventMetaListResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventMetaListResponseBodyData) SetResource(v []*DescribeSystemEventMetaListResponseBodyDataResource) *DescribeSystemEventMetaListResponseBodyData {
	s.Resource = v
	return s
}

type DescribeSystemEventMetaListResponseBodyDataResource struct {
	// The type of the system event. Valid values:
	//
	// 	- StatusNotification
	//
	// 	- Exception
	//
	// 	- Maintenance
	//
	// example:
	//
	// Exception
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The level of the alert. Valid values:
	//
	// 	- CRITICAL
	//
	// 	- WARN
	//
	// 	- INFO
	//
	// example:
	//
	// INFO
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The name of the system event.
	//
	// example:
	//
	// SelectFailureRate
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The description of the system event, in Chinese.
	//
	// example:
	//
	// High query failure rate
	NameDesc    *string `json:"NameDesc,omitempty" xml:"NameDesc,omitempty"`
	NameDesc_en *string `json:"NameDesc.En,omitempty" xml:"NameDesc.En,omitempty"`
	// The abbreviation of the service name.
	//
	// example:
	//
	// ADS
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// The status of the system event.
	//
	// example:
	//
	// failed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The description of the event status.
	//
	// example:
	//
	// Operation Failed
	StatusDesc *string `json:"StatusDesc,omitempty" xml:"StatusDesc,omitempty"`
}

func (s DescribeSystemEventMetaListResponseBodyDataResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventMetaListResponseBodyDataResource) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventMetaListResponseBodyDataResource) SetEventType(v string) *DescribeSystemEventMetaListResponseBodyDataResource {
	s.EventType = &v
	return s
}

func (s *DescribeSystemEventMetaListResponseBodyDataResource) SetLevel(v string) *DescribeSystemEventMetaListResponseBodyDataResource {
	s.Level = &v
	return s
}

func (s *DescribeSystemEventMetaListResponseBodyDataResource) SetName(v string) *DescribeSystemEventMetaListResponseBodyDataResource {
	s.Name = &v
	return s
}

func (s *DescribeSystemEventMetaListResponseBodyDataResource) SetNameDesc(v string) *DescribeSystemEventMetaListResponseBodyDataResource {
	s.NameDesc = &v
	return s
}

func (s *DescribeSystemEventMetaListResponseBodyDataResource) SetNameDesc_en(v string) *DescribeSystemEventMetaListResponseBodyDataResource {
	s.NameDesc_en = &v
	return s
}

func (s *DescribeSystemEventMetaListResponseBodyDataResource) SetProduct(v string) *DescribeSystemEventMetaListResponseBodyDataResource {
	s.Product = &v
	return s
}

func (s *DescribeSystemEventMetaListResponseBodyDataResource) SetStatus(v string) *DescribeSystemEventMetaListResponseBodyDataResource {
	s.Status = &v
	return s
}

func (s *DescribeSystemEventMetaListResponseBodyDataResource) SetStatusDesc(v string) *DescribeSystemEventMetaListResponseBodyDataResource {
	s.StatusDesc = &v
	return s
}

type DescribeSystemEventMetaListResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSystemEventMetaListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSystemEventMetaListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSystemEventMetaListResponse) GoString() string {
	return s.String()
}

func (s *DescribeSystemEventMetaListResponse) SetHeaders(v map[string]*string) *DescribeSystemEventMetaListResponse {
	s.Headers = v
	return s
}

func (s *DescribeSystemEventMetaListResponse) SetStatusCode(v int32) *DescribeSystemEventMetaListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSystemEventMetaListResponse) SetBody(v *DescribeSystemEventMetaListResponseBody) *DescribeSystemEventMetaListResponse {
	s.Body = v
	return s
}

type DescribeTagKeyListRequest struct {
	// The number of the page to return.
	//
	// Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// Maximum value: 100. Default value: 50.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeTagKeyListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagKeyListRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagKeyListRequest) SetPageNumber(v int32) *DescribeTagKeyListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTagKeyListRequest) SetPageSize(v int32) *DescribeTagKeyListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTagKeyListRequest) SetRegionId(v string) *DescribeTagKeyListRequest {
	s.RegionId = &v
	return s
}

type DescribeTagKeyListResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// Specified parameter PageSize is not valid.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B04B8CF3-4489-432D-83BA-6F128E5F2293
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The tag keys returned.
	TagKeys *DescribeTagKeyListResponseBodyTagKeys `json:"TagKeys,omitempty" xml:"TagKeys,omitempty" type:"Struct"`
}

func (s DescribeTagKeyListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagKeyListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagKeyListResponseBody) SetCode(v string) *DescribeTagKeyListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTagKeyListResponseBody) SetMessage(v string) *DescribeTagKeyListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTagKeyListResponseBody) SetRequestId(v string) *DescribeTagKeyListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagKeyListResponseBody) SetSuccess(v bool) *DescribeTagKeyListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeTagKeyListResponseBody) SetTagKeys(v *DescribeTagKeyListResponseBodyTagKeys) *DescribeTagKeyListResponseBody {
	s.TagKeys = v
	return s
}

type DescribeTagKeyListResponseBodyTagKeys struct {
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s DescribeTagKeyListResponseBodyTagKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagKeyListResponseBodyTagKeys) GoString() string {
	return s.String()
}

func (s *DescribeTagKeyListResponseBodyTagKeys) SetTagKey(v []*string) *DescribeTagKeyListResponseBodyTagKeys {
	s.TagKey = v
	return s
}

type DescribeTagKeyListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagKeyListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagKeyListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagKeyListResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagKeyListResponse) SetHeaders(v map[string]*string) *DescribeTagKeyListResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagKeyListResponse) SetStatusCode(v int32) *DescribeTagKeyListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagKeyListResponse) SetBody(v *DescribeTagKeyListResponseBody) *DescribeTagKeyListResponse {
	s.Body = v
	return s
}

type DescribeTagValueListRequest struct {
	// The number of the page to return.
	//
	// Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// Valid values: 1 to 100. Pages start from page 1. Default value: 50.
	//
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The key of the tag whose values you want to query.
	//
	// For more information about how to obtain a tag key, see [DescribeTagKeyList](https://help.aliyun.com/document_detail/145558.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// tagKey1
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeTagValueListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagValueListRequest) GoString() string {
	return s.String()
}

func (s *DescribeTagValueListRequest) SetPageNumber(v int32) *DescribeTagValueListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeTagValueListRequest) SetPageSize(v int32) *DescribeTagValueListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeTagValueListRequest) SetRegionId(v string) *DescribeTagValueListRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeTagValueListRequest) SetTagKey(v string) *DescribeTagValueListRequest {
	s.TagKey = &v
	return s
}

type DescribeTagValueListResponseBody struct {
	// The HTTP status code.
	//
	// >  The value 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B04B8CF3-4489-432D-83BA-6F128E4F2295
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The tag values returned.
	TagValues *DescribeTagValueListResponseBodyTagValues `json:"TagValues,omitempty" xml:"TagValues,omitempty" type:"Struct"`
}

func (s DescribeTagValueListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagValueListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTagValueListResponseBody) SetCode(v string) *DescribeTagValueListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTagValueListResponseBody) SetMessage(v string) *DescribeTagValueListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTagValueListResponseBody) SetRequestId(v string) *DescribeTagValueListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTagValueListResponseBody) SetSuccess(v bool) *DescribeTagValueListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeTagValueListResponseBody) SetTagValues(v *DescribeTagValueListResponseBodyTagValues) *DescribeTagValueListResponseBody {
	s.TagValues = v
	return s
}

type DescribeTagValueListResponseBodyTagValues struct {
	TagValue []*string `json:"TagValue,omitempty" xml:"TagValue,omitempty" type:"Repeated"`
}

func (s DescribeTagValueListResponseBodyTagValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagValueListResponseBodyTagValues) GoString() string {
	return s.String()
}

func (s *DescribeTagValueListResponseBodyTagValues) SetTagValue(v []*string) *DescribeTagValueListResponseBodyTagValues {
	s.TagValue = v
	return s
}

type DescribeTagValueListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTagValueListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTagValueListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTagValueListResponse) GoString() string {
	return s.String()
}

func (s *DescribeTagValueListResponse) SetHeaders(v map[string]*string) *DescribeTagValueListResponse {
	s.Headers = v
	return s
}

func (s *DescribeTagValueListResponse) SetStatusCode(v int32) *DescribeTagValueListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTagValueListResponse) SetBody(v *DescribeTagValueListResponseBody) *DescribeTagValueListResponse {
	s.Body = v
	return s
}

type DescribeUnhealthyHostAvailabilityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 123456
	Id       []*int64 `json:"Id,omitempty" xml:"Id,omitempty" type:"Repeated"`
	RegionId *string  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeUnhealthyHostAvailabilityRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnhealthyHostAvailabilityRequest) GoString() string {
	return s.String()
}

func (s *DescribeUnhealthyHostAvailabilityRequest) SetId(v []*int64) *DescribeUnhealthyHostAvailabilityRequest {
	s.Id = v
	return s
}

func (s *DescribeUnhealthyHostAvailabilityRequest) SetRegionId(v string) *DescribeUnhealthyHostAvailabilityRequest {
	s.RegionId = &v
	return s
}

type DescribeUnhealthyHostAvailabilityResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// User not authorized to operate on the specified resource.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ACBDBB40-DFB6-4F4C-8957-51FFB233969C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The unhealthy instances that are detected by the specified availability monitoring tasks.
	UnhealthyList *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyList `json:"UnhealthyList,omitempty" xml:"UnhealthyList,omitempty" type:"Struct"`
}

func (s DescribeUnhealthyHostAvailabilityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnhealthyHostAvailabilityResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUnhealthyHostAvailabilityResponseBody) SetCode(v string) *DescribeUnhealthyHostAvailabilityResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeUnhealthyHostAvailabilityResponseBody) SetMessage(v string) *DescribeUnhealthyHostAvailabilityResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeUnhealthyHostAvailabilityResponseBody) SetRequestId(v string) *DescribeUnhealthyHostAvailabilityResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUnhealthyHostAvailabilityResponseBody) SetSuccess(v bool) *DescribeUnhealthyHostAvailabilityResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeUnhealthyHostAvailabilityResponseBody) SetUnhealthyList(v *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyList) *DescribeUnhealthyHostAvailabilityResponseBody {
	s.UnhealthyList = v
	return s
}

type DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyList struct {
	NodeTaskInstance []*DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstance `json:"NodeTaskInstance,omitempty" xml:"NodeTaskInstance,omitempty" type:"Repeated"`
}

func (s DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyList) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyList) GoString() string {
	return s.String()
}

func (s *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyList) SetNodeTaskInstance(v []*DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstance) *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyList {
	s.NodeTaskInstance = v
	return s
}

type DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstance struct {
	// The ID of the availability monitoring task.
	//
	// example:
	//
	// 123456
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The unhealthy instances that are detected by the availability monitoring task.
	InstanceList *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstanceInstanceList `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Struct"`
}

func (s DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstance) GoString() string {
	return s.String()
}

func (s *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstance) SetId(v int64) *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstance {
	s.Id = &v
	return s
}

func (s *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstance) SetInstanceList(v *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstanceInstanceList) *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstance {
	s.InstanceList = v
	return s
}

type DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstanceInstanceList struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstanceInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstanceInstanceList) GoString() string {
	return s.String()
}

func (s *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstanceInstanceList) SetString_(v []*string) *DescribeUnhealthyHostAvailabilityResponseBodyUnhealthyListNodeTaskInstanceInstanceList {
	s.String_ = v
	return s
}

type DescribeUnhealthyHostAvailabilityResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUnhealthyHostAvailabilityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUnhealthyHostAvailabilityResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUnhealthyHostAvailabilityResponse) GoString() string {
	return s.String()
}

func (s *DescribeUnhealthyHostAvailabilityResponse) SetHeaders(v map[string]*string) *DescribeUnhealthyHostAvailabilityResponse {
	s.Headers = v
	return s
}

func (s *DescribeUnhealthyHostAvailabilityResponse) SetStatusCode(v int32) *DescribeUnhealthyHostAvailabilityResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUnhealthyHostAvailabilityResponse) SetBody(v *DescribeUnhealthyHostAvailabilityResponseBody) *DescribeUnhealthyHostAvailabilityResponse {
	s.Body = v
	return s
}

type DisableActiveMetricRuleRequest struct {
	// The service for which you want to disable one-click alert. Valid values:
	//
	// 	- ecs: Elastic Compute Service (ECS)
	//
	// 	- rds: ApsaraDB RDS
	//
	// 	- slb: Server Load Balancer (SLB)
	//
	// 	- redis_standard: ApsaraDB for Redis of the standard architecture
	//
	// 	- redis_sharding: ApsaraDB for Redis of the cluster architecture
	//
	// 	- redis_splitrw: ApsaraDB for Redis of the read/write splitting architecture
	//
	// 	- mongodb: ApsaraDB for MongoDB of the replica set architecture
	//
	// 	- mongodb_sharding: ApsaraDB for MongoDB of the sharded cluster architecture
	//
	// 	- hbase: ApsaraDB for HBase
	//
	// 	- elasticsearch: Elasticsearch
	//
	// 	- opensearch: Open Search
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Product  *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DisableActiveMetricRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableActiveMetricRuleRequest) GoString() string {
	return s.String()
}

func (s *DisableActiveMetricRuleRequest) SetProduct(v string) *DisableActiveMetricRuleRequest {
	s.Product = &v
	return s
}

func (s *DisableActiveMetricRuleRequest) SetRegionId(v string) *DisableActiveMetricRuleRequest {
	s.RegionId = &v
	return s
}

type DisableActiveMetricRuleResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// F82E6667-7811-4BA0-842F-5B2DC42BBAAD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableActiveMetricRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableActiveMetricRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DisableActiveMetricRuleResponseBody) SetCode(v string) *DisableActiveMetricRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DisableActiveMetricRuleResponseBody) SetMessage(v string) *DisableActiveMetricRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DisableActiveMetricRuleResponseBody) SetRequestId(v string) *DisableActiveMetricRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableActiveMetricRuleResponseBody) SetSuccess(v bool) *DisableActiveMetricRuleResponseBody {
	s.Success = &v
	return s
}

type DisableActiveMetricRuleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableActiveMetricRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableActiveMetricRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableActiveMetricRuleResponse) GoString() string {
	return s.String()
}

func (s *DisableActiveMetricRuleResponse) SetHeaders(v map[string]*string) *DisableActiveMetricRuleResponse {
	s.Headers = v
	return s
}

func (s *DisableActiveMetricRuleResponse) SetStatusCode(v int32) *DisableActiveMetricRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableActiveMetricRuleResponse) SetBody(v *DisableActiveMetricRuleResponseBody) *DisableActiveMetricRuleResponse {
	s.Body = v
	return s
}

type DisableEventRulesRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ruleName1
	RuleNames []*string `json:"RuleNames,omitempty" xml:"RuleNames,omitempty" type:"Repeated"`
}

func (s DisableEventRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableEventRulesRequest) GoString() string {
	return s.String()
}

func (s *DisableEventRulesRequest) SetRegionId(v string) *DisableEventRulesRequest {
	s.RegionId = &v
	return s
}

func (s *DisableEventRulesRequest) SetRuleNames(v []*string) *DisableEventRulesRequest {
	s.RuleNames = v
	return s
}

type DisableEventRulesResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 3FD0E8B5-F132-4F4E-A081-2878AF378B12
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableEventRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableEventRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DisableEventRulesResponseBody) SetCode(v string) *DisableEventRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DisableEventRulesResponseBody) SetMessage(v string) *DisableEventRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DisableEventRulesResponseBody) SetRequestId(v string) *DisableEventRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableEventRulesResponseBody) SetSuccess(v bool) *DisableEventRulesResponseBody {
	s.Success = &v
	return s
}

type DisableEventRulesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableEventRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableEventRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableEventRulesResponse) GoString() string {
	return s.String()
}

func (s *DisableEventRulesResponse) SetHeaders(v map[string]*string) *DisableEventRulesResponse {
	s.Headers = v
	return s
}

func (s *DisableEventRulesResponse) SetStatusCode(v int32) *DisableEventRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableEventRulesResponse) SetBody(v *DisableEventRulesResponseBody) *DisableEventRulesResponse {
	s.Body = v
	return s
}

type DisableHostAvailabilityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 12345
	Id       []*int64 `json:"Id,omitempty" xml:"Id,omitempty" type:"Repeated"`
	RegionId *string  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DisableHostAvailabilityRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableHostAvailabilityRequest) GoString() string {
	return s.String()
}

func (s *DisableHostAvailabilityRequest) SetId(v []*int64) *DisableHostAvailabilityRequest {
	s.Id = v
	return s
}

func (s *DisableHostAvailabilityRequest) SetRegionId(v string) *DisableHostAvailabilityRequest {
	s.RegionId = &v
	return s
}

type DisableHostAvailabilityResponseBody struct {
	// The status code.
	//
	// >  The status code 200 indicates a success.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// User not authorized to operate on the specified resource.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ACBDBB40-DFB6-4F4C-8957-51FFB233969C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful. Valid values:
	//
	// 	- true: successful.
	//
	// 	- false: failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableHostAvailabilityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableHostAvailabilityResponseBody) GoString() string {
	return s.String()
}

func (s *DisableHostAvailabilityResponseBody) SetCode(v string) *DisableHostAvailabilityResponseBody {
	s.Code = &v
	return s
}

func (s *DisableHostAvailabilityResponseBody) SetMessage(v string) *DisableHostAvailabilityResponseBody {
	s.Message = &v
	return s
}

func (s *DisableHostAvailabilityResponseBody) SetRequestId(v string) *DisableHostAvailabilityResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableHostAvailabilityResponseBody) SetSuccess(v bool) *DisableHostAvailabilityResponseBody {
	s.Success = &v
	return s
}

type DisableHostAvailabilityResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableHostAvailabilityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableHostAvailabilityResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableHostAvailabilityResponse) GoString() string {
	return s.String()
}

func (s *DisableHostAvailabilityResponse) SetHeaders(v map[string]*string) *DisableHostAvailabilityResponse {
	s.Headers = v
	return s
}

func (s *DisableHostAvailabilityResponse) SetStatusCode(v int32) *DisableHostAvailabilityResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableHostAvailabilityResponse) SetBody(v *DisableHostAvailabilityResponseBody) *DisableHostAvailabilityResponse {
	s.Body = v
	return s
}

type DisableMetricRulesRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert rule. Valid values of N: 1 to 20.
	//
	// This parameter is required.
	//
	// example:
	//
	// detect_87****_HTTP_HttpLatency
	RuleId []*string `json:"RuleId,omitempty" xml:"RuleId,omitempty" type:"Repeated"`
}

func (s DisableMetricRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableMetricRulesRequest) GoString() string {
	return s.String()
}

func (s *DisableMetricRulesRequest) SetRegionId(v string) *DisableMetricRulesRequest {
	s.RegionId = &v
	return s
}

func (s *DisableMetricRulesRequest) SetRuleId(v []*string) *DisableMetricRulesRequest {
	s.RuleId = v
	return s
}

type DisableMetricRulesResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// RuleId is mandatory for this action.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// FF38D33A-67C1-40EB-AB65-FAEE51EDB644
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableMetricRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableMetricRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DisableMetricRulesResponseBody) SetCode(v string) *DisableMetricRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DisableMetricRulesResponseBody) SetMessage(v string) *DisableMetricRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DisableMetricRulesResponseBody) SetRequestId(v string) *DisableMetricRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableMetricRulesResponseBody) SetSuccess(v bool) *DisableMetricRulesResponseBody {
	s.Success = &v
	return s
}

type DisableMetricRulesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableMetricRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableMetricRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableMetricRulesResponse) GoString() string {
	return s.String()
}

func (s *DisableMetricRulesResponse) SetHeaders(v map[string]*string) *DisableMetricRulesResponse {
	s.Headers = v
	return s
}

func (s *DisableMetricRulesResponse) SetStatusCode(v int32) *DisableMetricRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableMetricRulesResponse) SetBody(v *DisableMetricRulesResponseBody) *DisableMetricRulesResponse {
	s.Body = v
	return s
}

type DisableSiteMonitorsRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the site monitoring task. Separate multiple IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// 49f7b317-7645-4cc9-94fd-ea42e522****,49f7b317-7645-4cc9-94fd-ea42e522****
	TaskIds *string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty"`
}

func (s DisableSiteMonitorsRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableSiteMonitorsRequest) GoString() string {
	return s.String()
}

func (s *DisableSiteMonitorsRequest) SetRegionId(v string) *DisableSiteMonitorsRequest {
	s.RegionId = &v
	return s
}

func (s *DisableSiteMonitorsRequest) SetTaskIds(v string) *DisableSiteMonitorsRequest {
	s.TaskIds = &v
	return s
}

type DisableSiteMonitorsResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The number of detection points that are affected by the site monitoring tasks.
	Data *DisableSiteMonitorsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3fcd12e7-d387-42ee-b77e-661c775bb17f
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableSiteMonitorsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableSiteMonitorsResponseBody) GoString() string {
	return s.String()
}

func (s *DisableSiteMonitorsResponseBody) SetCode(v string) *DisableSiteMonitorsResponseBody {
	s.Code = &v
	return s
}

func (s *DisableSiteMonitorsResponseBody) SetData(v *DisableSiteMonitorsResponseBodyData) *DisableSiteMonitorsResponseBody {
	s.Data = v
	return s
}

func (s *DisableSiteMonitorsResponseBody) SetMessage(v string) *DisableSiteMonitorsResponseBody {
	s.Message = &v
	return s
}

func (s *DisableSiteMonitorsResponseBody) SetRequestId(v string) *DisableSiteMonitorsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableSiteMonitorsResponseBody) SetSuccess(v string) *DisableSiteMonitorsResponseBody {
	s.Success = &v
	return s
}

type DisableSiteMonitorsResponseBodyData struct {
	// The number of detection points.
	//
	// example:
	//
	// 0
	Count *int32 `json:"count,omitempty" xml:"count,omitempty"`
}

func (s DisableSiteMonitorsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DisableSiteMonitorsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DisableSiteMonitorsResponseBodyData) SetCount(v int32) *DisableSiteMonitorsResponseBodyData {
	s.Count = &v
	return s
}

type DisableSiteMonitorsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableSiteMonitorsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableSiteMonitorsResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableSiteMonitorsResponse) GoString() string {
	return s.String()
}

func (s *DisableSiteMonitorsResponse) SetHeaders(v map[string]*string) *DisableSiteMonitorsResponse {
	s.Headers = v
	return s
}

func (s *DisableSiteMonitorsResponse) SetStatusCode(v int32) *DisableSiteMonitorsResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableSiteMonitorsResponse) SetBody(v *DisableSiteMonitorsResponseBody) *DisableSiteMonitorsResponse {
	s.Body = v
	return s
}

type EnableActiveMetricRuleRequest struct {
	// The cloud service for which you want to enable initiative alert. Valid values:
	//
	// 	- ecs: Elastic Compute Service (ECS)
	//
	// 	- rds: ApsaraDB RDS
	//
	// 	- slb: Server Load Balancer (SLB)
	//
	// 	- redis_standard: ApsaraDB for Redis of the standard architecture
	//
	// 	- redis_sharding: ApsaraDB for Redis of the cluster architecture
	//
	// 	- redis_splitrw: ApsaraDB for Redis of the read/write splitting architecture
	//
	// 	- mongodb: ApsaraDB for MongoDB of the replica set architecture
	//
	// 	- mongodb_sharding: ApsaraDB for MongoDB of the sharded cluster architecture
	//
	// 	- hbase: ApsaraDB for HBase
	//
	// 	- elasticsearch: Elasticsearch
	//
	// 	- opensearch: OpenSearch
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Product  *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s EnableActiveMetricRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableActiveMetricRuleRequest) GoString() string {
	return s.String()
}

func (s *EnableActiveMetricRuleRequest) SetProduct(v string) *EnableActiveMetricRuleRequest {
	s.Product = &v
	return s
}

func (s *EnableActiveMetricRuleRequest) SetRegionId(v string) *EnableActiveMetricRuleRequest {
	s.RegionId = &v
	return s
}

type EnableActiveMetricRuleResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// F82E6667-7811-4BA0-842F-5B2DC42BBAAD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableActiveMetricRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableActiveMetricRuleResponseBody) GoString() string {
	return s.String()
}

func (s *EnableActiveMetricRuleResponseBody) SetCode(v string) *EnableActiveMetricRuleResponseBody {
	s.Code = &v
	return s
}

func (s *EnableActiveMetricRuleResponseBody) SetMessage(v string) *EnableActiveMetricRuleResponseBody {
	s.Message = &v
	return s
}

func (s *EnableActiveMetricRuleResponseBody) SetRequestId(v string) *EnableActiveMetricRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableActiveMetricRuleResponseBody) SetSuccess(v bool) *EnableActiveMetricRuleResponseBody {
	s.Success = &v
	return s
}

type EnableActiveMetricRuleResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableActiveMetricRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableActiveMetricRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableActiveMetricRuleResponse) GoString() string {
	return s.String()
}

func (s *EnableActiveMetricRuleResponse) SetHeaders(v map[string]*string) *EnableActiveMetricRuleResponse {
	s.Headers = v
	return s
}

func (s *EnableActiveMetricRuleResponse) SetStatusCode(v int32) *EnableActiveMetricRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableActiveMetricRuleResponse) SetBody(v *EnableActiveMetricRuleResponseBody) *EnableActiveMetricRuleResponse {
	s.Body = v
	return s
}

type EnableEventRulesRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ruleName1
	RuleNames []*string `json:"RuleNames,omitempty" xml:"RuleNames,omitempty" type:"Repeated"`
}

func (s EnableEventRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableEventRulesRequest) GoString() string {
	return s.String()
}

func (s *EnableEventRulesRequest) SetRegionId(v string) *EnableEventRulesRequest {
	s.RegionId = &v
	return s
}

func (s *EnableEventRulesRequest) SetRuleNames(v []*string) *EnableEventRulesRequest {
	s.RuleNames = v
	return s
}

type EnableEventRulesResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 20F2896A-6684-4A04-8255-4155B1593C70
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableEventRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableEventRulesResponseBody) GoString() string {
	return s.String()
}

func (s *EnableEventRulesResponseBody) SetCode(v string) *EnableEventRulesResponseBody {
	s.Code = &v
	return s
}

func (s *EnableEventRulesResponseBody) SetMessage(v string) *EnableEventRulesResponseBody {
	s.Message = &v
	return s
}

func (s *EnableEventRulesResponseBody) SetRequestId(v string) *EnableEventRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableEventRulesResponseBody) SetSuccess(v bool) *EnableEventRulesResponseBody {
	s.Success = &v
	return s
}

type EnableEventRulesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableEventRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableEventRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableEventRulesResponse) GoString() string {
	return s.String()
}

func (s *EnableEventRulesResponse) SetHeaders(v map[string]*string) *EnableEventRulesResponse {
	s.Headers = v
	return s
}

func (s *EnableEventRulesResponse) SetStatusCode(v int32) *EnableEventRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableEventRulesResponse) SetBody(v *EnableEventRulesResponseBody) *EnableEventRulesResponse {
	s.Body = v
	return s
}

type EnableHostAvailabilityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 123456
	Id       []*int64 `json:"Id,omitempty" xml:"Id,omitempty" type:"Repeated"`
	RegionId *string  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s EnableHostAvailabilityRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableHostAvailabilityRequest) GoString() string {
	return s.String()
}

func (s *EnableHostAvailabilityRequest) SetId(v []*int64) *EnableHostAvailabilityRequest {
	s.Id = v
	return s
}

func (s *EnableHostAvailabilityRequest) SetRegionId(v string) *EnableHostAvailabilityRequest {
	s.RegionId = &v
	return s
}

type EnableHostAvailabilityResponseBody struct {
	// The status code.
	//
	// >  The HTTP status code 200 indicates a success.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// User not authorized to operate on the specified resource.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// ACBDBB40-DFB6-4F4C-8957-51FFB233969C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the operation was successful. Valid values:
	//
	// 	- true: successful.
	//
	// 	- false: failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableHostAvailabilityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableHostAvailabilityResponseBody) GoString() string {
	return s.String()
}

func (s *EnableHostAvailabilityResponseBody) SetCode(v string) *EnableHostAvailabilityResponseBody {
	s.Code = &v
	return s
}

func (s *EnableHostAvailabilityResponseBody) SetMessage(v string) *EnableHostAvailabilityResponseBody {
	s.Message = &v
	return s
}

func (s *EnableHostAvailabilityResponseBody) SetRequestId(v string) *EnableHostAvailabilityResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableHostAvailabilityResponseBody) SetSuccess(v bool) *EnableHostAvailabilityResponseBody {
	s.Success = &v
	return s
}

type EnableHostAvailabilityResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableHostAvailabilityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableHostAvailabilityResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableHostAvailabilityResponse) GoString() string {
	return s.String()
}

func (s *EnableHostAvailabilityResponse) SetHeaders(v map[string]*string) *EnableHostAvailabilityResponse {
	s.Headers = v
	return s
}

func (s *EnableHostAvailabilityResponse) SetStatusCode(v int32) *EnableHostAvailabilityResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableHostAvailabilityResponse) SetBody(v *EnableHostAvailabilityResponseBody) *EnableHostAvailabilityResponse {
	s.Body = v
	return s
}

type EnableMetricRuleBlackListRequest struct {
	// The IDs of the blacklist policies. Separate multiple IDs with commas (,). You can specify up to 50 IDs.
	//
	// For information about how to obtain the ID of a blacklist policy, see [DescribeMetricRuleBlackList](https://help.aliyun.com/document_detail/457257.html).
	//
	// > You can also set this parameter to a JSON array. Example: `["a9ad2ac2-3ed9-11ed-b878-0242ac12****","5cb8a9a4-198f-4651-a353-f8b28788****"]`.
	//
	// This parameter is required.
	//
	// example:
	//
	// a9ad2ac2-3ed9-11ed-b878-0242ac12****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// Specifies whether to enable the blacklist policy. Valid values:
	//
	// 	- true: The blacklist policy is enabled.
	//
	// 	- false (default): The blacklist policy is disabled.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	IsEnable *bool   `json:"IsEnable,omitempty" xml:"IsEnable,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s EnableMetricRuleBlackListRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableMetricRuleBlackListRequest) GoString() string {
	return s.String()
}

func (s *EnableMetricRuleBlackListRequest) SetId(v string) *EnableMetricRuleBlackListRequest {
	s.Id = &v
	return s
}

func (s *EnableMetricRuleBlackListRequest) SetIsEnable(v bool) *EnableMetricRuleBlackListRequest {
	s.IsEnable = &v
	return s
}

func (s *EnableMetricRuleBlackListRequest) SetRegionId(v string) *EnableMetricRuleBlackListRequest {
	s.RegionId = &v
	return s
}

type EnableMetricRuleBlackListResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The number of blacklist policies that are enabled or disabled.
	//
	// example:
	//
	// 1
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 94869866-1621-3652-BBC9-72A47B2AC2F5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableMetricRuleBlackListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableMetricRuleBlackListResponseBody) GoString() string {
	return s.String()
}

func (s *EnableMetricRuleBlackListResponseBody) SetCode(v string) *EnableMetricRuleBlackListResponseBody {
	s.Code = &v
	return s
}

func (s *EnableMetricRuleBlackListResponseBody) SetCount(v int32) *EnableMetricRuleBlackListResponseBody {
	s.Count = &v
	return s
}

func (s *EnableMetricRuleBlackListResponseBody) SetMessage(v string) *EnableMetricRuleBlackListResponseBody {
	s.Message = &v
	return s
}

func (s *EnableMetricRuleBlackListResponseBody) SetRequestId(v string) *EnableMetricRuleBlackListResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableMetricRuleBlackListResponseBody) SetSuccess(v bool) *EnableMetricRuleBlackListResponseBody {
	s.Success = &v
	return s
}

type EnableMetricRuleBlackListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableMetricRuleBlackListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableMetricRuleBlackListResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableMetricRuleBlackListResponse) GoString() string {
	return s.String()
}

func (s *EnableMetricRuleBlackListResponse) SetHeaders(v map[string]*string) *EnableMetricRuleBlackListResponse {
	s.Headers = v
	return s
}

func (s *EnableMetricRuleBlackListResponse) SetStatusCode(v int32) *EnableMetricRuleBlackListResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableMetricRuleBlackListResponse) SetBody(v *EnableMetricRuleBlackListResponseBody) *EnableMetricRuleBlackListResponse {
	s.Body = v
	return s
}

type EnableMetricRulesRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The IDs of the alert rules.
	//
	// Valid values of N: 1 to 100.
	//
	// For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ab05733c97b7ce239fb1b53393dc1697c123****
	RuleId []*string `json:"RuleId,omitempty" xml:"RuleId,omitempty" type:"Repeated"`
}

func (s EnableMetricRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableMetricRulesRequest) GoString() string {
	return s.String()
}

func (s *EnableMetricRulesRequest) SetRegionId(v string) *EnableMetricRulesRequest {
	s.RegionId = &v
	return s
}

func (s *EnableMetricRulesRequest) SetRuleId(v []*string) *EnableMetricRulesRequest {
	s.RuleId = v
	return s
}

type EnableMetricRulesResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// FF38D33A-67C1-40EB-AB65-FAEE51EDB644
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableMetricRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableMetricRulesResponseBody) GoString() string {
	return s.String()
}

func (s *EnableMetricRulesResponseBody) SetCode(v string) *EnableMetricRulesResponseBody {
	s.Code = &v
	return s
}

func (s *EnableMetricRulesResponseBody) SetMessage(v string) *EnableMetricRulesResponseBody {
	s.Message = &v
	return s
}

func (s *EnableMetricRulesResponseBody) SetRequestId(v string) *EnableMetricRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableMetricRulesResponseBody) SetSuccess(v bool) *EnableMetricRulesResponseBody {
	s.Success = &v
	return s
}

type EnableMetricRulesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableMetricRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableMetricRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableMetricRulesResponse) GoString() string {
	return s.String()
}

func (s *EnableMetricRulesResponse) SetHeaders(v map[string]*string) *EnableMetricRulesResponse {
	s.Headers = v
	return s
}

func (s *EnableMetricRulesResponse) SetStatusCode(v int32) *EnableMetricRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableMetricRulesResponse) SetBody(v *EnableMetricRulesResponseBody) *EnableMetricRulesResponse {
	s.Body = v
	return s
}

type EnableSiteMonitorsRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the site monitoring task. Separate multiple IDs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// 49f7b317-7645-4cc9-94fd-ea42e522****,49f7b317-7645-4cc9-94fd-ea42e522****
	TaskIds *string `json:"TaskIds,omitempty" xml:"TaskIds,omitempty"`
}

func (s EnableSiteMonitorsRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableSiteMonitorsRequest) GoString() string {
	return s.String()
}

func (s *EnableSiteMonitorsRequest) SetRegionId(v string) *EnableSiteMonitorsRequest {
	s.RegionId = &v
	return s
}

func (s *EnableSiteMonitorsRequest) SetTaskIds(v string) *EnableSiteMonitorsRequest {
	s.TaskIds = &v
	return s
}

type EnableSiteMonitorsResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The number of detection points that are affected by the site monitoring tasks.
	Data *EnableSiteMonitorsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3fcd12e7-d387-42ee-b77e-661c775bb17f
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableSiteMonitorsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableSiteMonitorsResponseBody) GoString() string {
	return s.String()
}

func (s *EnableSiteMonitorsResponseBody) SetCode(v string) *EnableSiteMonitorsResponseBody {
	s.Code = &v
	return s
}

func (s *EnableSiteMonitorsResponseBody) SetData(v *EnableSiteMonitorsResponseBodyData) *EnableSiteMonitorsResponseBody {
	s.Data = v
	return s
}

func (s *EnableSiteMonitorsResponseBody) SetMessage(v string) *EnableSiteMonitorsResponseBody {
	s.Message = &v
	return s
}

func (s *EnableSiteMonitorsResponseBody) SetRequestId(v string) *EnableSiteMonitorsResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableSiteMonitorsResponseBody) SetSuccess(v string) *EnableSiteMonitorsResponseBody {
	s.Success = &v
	return s
}

type EnableSiteMonitorsResponseBodyData struct {
	// The number of detection points.
	//
	// example:
	//
	// 0
	Count *int32 `json:"count,omitempty" xml:"count,omitempty"`
}

func (s EnableSiteMonitorsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s EnableSiteMonitorsResponseBodyData) GoString() string {
	return s.String()
}

func (s *EnableSiteMonitorsResponseBodyData) SetCount(v int32) *EnableSiteMonitorsResponseBodyData {
	s.Count = &v
	return s
}

type EnableSiteMonitorsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *EnableSiteMonitorsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s EnableSiteMonitorsResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableSiteMonitorsResponse) GoString() string {
	return s.String()
}

func (s *EnableSiteMonitorsResponse) SetHeaders(v map[string]*string) *EnableSiteMonitorsResponse {
	s.Headers = v
	return s
}

func (s *EnableSiteMonitorsResponse) SetStatusCode(v int32) *EnableSiteMonitorsResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableSiteMonitorsResponse) SetBody(v *EnableSiteMonitorsResponseBody) *EnableSiteMonitorsResponse {
	s.Body = v
	return s
}

type InstallMonitoringAgentRequest struct {
	// Specifies whether to install the CloudMonitor agent. Valid values:
	//
	// 	- true (default value): yes
	//
	// 	- false: no
	//
	// example:
	//
	// true
	Force *bool `json:"Force,omitempty" xml:"Force,omitempty"`
	// Specifies whether to install the CloudMonitor agent on all ECS instances that belong to the current Alibaba Cloud account. Valid values:
	//
	// 	- `onlyInstallNotHasAgent`: installs the latest version of the CloudMonitor agent only on ECS instances on which the agent is not installed.
	//
	// 	- `onlyUpgradeAgent`: upgrades the CloudMonitor agent to the latest version only for ECS instances on which an earlier version of the agent is installed.
	//
	// 	- `installAndUpgrade`: installs the latest version of the CloudMonitor agent on ECS instances on which the agent is not installed, and upgrades the CloudMonitor agent to the latest version for ECS instances on which an earlier version of the agent is installed.
	//
	// >  If you set the InstallCommand parameter, the `InstanceIds` parameter does not take effect.
	//
	// example:
	//
	// onlyInstallNotHasAgent
	InstallCommand *string `json:"InstallCommand,omitempty" xml:"InstallCommand,omitempty"`
	// example:
	//
	// i-m5e0k0bexac8tykr****
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	RegionId    *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s InstallMonitoringAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallMonitoringAgentRequest) GoString() string {
	return s.String()
}

func (s *InstallMonitoringAgentRequest) SetForce(v bool) *InstallMonitoringAgentRequest {
	s.Force = &v
	return s
}

func (s *InstallMonitoringAgentRequest) SetInstallCommand(v string) *InstallMonitoringAgentRequest {
	s.InstallCommand = &v
	return s
}

func (s *InstallMonitoringAgentRequest) SetInstanceIds(v []*string) *InstallMonitoringAgentRequest {
	s.InstanceIds = v
	return s
}

func (s *InstallMonitoringAgentRequest) SetRegionId(v string) *InstallMonitoringAgentRequest {
	s.RegionId = &v
	return s
}

type InstallMonitoringAgentResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 0BDAF8A8-04DC-5F0C-90E4-724D42C41945
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InstallMonitoringAgentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallMonitoringAgentResponseBody) GoString() string {
	return s.String()
}

func (s *InstallMonitoringAgentResponseBody) SetCode(v string) *InstallMonitoringAgentResponseBody {
	s.Code = &v
	return s
}

func (s *InstallMonitoringAgentResponseBody) SetMessage(v string) *InstallMonitoringAgentResponseBody {
	s.Message = &v
	return s
}

func (s *InstallMonitoringAgentResponseBody) SetRequestId(v string) *InstallMonitoringAgentResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallMonitoringAgentResponseBody) SetSuccess(v bool) *InstallMonitoringAgentResponseBody {
	s.Success = &v
	return s
}

type InstallMonitoringAgentResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstallMonitoringAgentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstallMonitoringAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallMonitoringAgentResponse) GoString() string {
	return s.String()
}

func (s *InstallMonitoringAgentResponse) SetHeaders(v map[string]*string) *InstallMonitoringAgentResponse {
	s.Headers = v
	return s
}

func (s *InstallMonitoringAgentResponse) SetStatusCode(v int32) *InstallMonitoringAgentResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallMonitoringAgentResponse) SetBody(v *InstallMonitoringAgentResponseBody) *InstallMonitoringAgentResponse {
	s.Body = v
	return s
}

type ModifyGroupMonitoringAgentProcessRequest struct {
	// The alert rule configurations.
	//
	// This parameter is required.
	AlertConfig []*ModifyGroupMonitoringAgentProcessRequestAlertConfig `json:"AlertConfig,omitempty" xml:"AlertConfig,omitempty" type:"Repeated"`
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6780****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the process monitoring task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 92E3065F-0980-4E31-9AA0-BA6****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The logical operator used between conditional expressions that are used to match instances. Valid values:
	//
	// 	- all
	//
	// 	- and
	//
	// 	- or
	//
	// example:
	//
	// and
	MatchExpressFilterRelation *string `json:"MatchExpressFilterRelation,omitempty" xml:"MatchExpressFilterRelation,omitempty"`
	RegionId                   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyGroupMonitoringAgentProcessRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupMonitoringAgentProcessRequest) GoString() string {
	return s.String()
}

func (s *ModifyGroupMonitoringAgentProcessRequest) SetAlertConfig(v []*ModifyGroupMonitoringAgentProcessRequestAlertConfig) *ModifyGroupMonitoringAgentProcessRequest {
	s.AlertConfig = v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequest) SetGroupId(v string) *ModifyGroupMonitoringAgentProcessRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequest) SetId(v string) *ModifyGroupMonitoringAgentProcessRequest {
	s.Id = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequest) SetMatchExpressFilterRelation(v string) *ModifyGroupMonitoringAgentProcessRequest {
	s.MatchExpressFilterRelation = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequest) SetRegionId(v string) *ModifyGroupMonitoringAgentProcessRequest {
	s.RegionId = &v
	return s
}

type ModifyGroupMonitoringAgentProcessRequestAlertConfig struct {
	// The comparison operator that is used to compare the metric value with the threshold. Valid values of N: 1 to 200. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold.
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday.
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// This parameter is required.
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The time period during which the alert rule is effective. Valid values of N: 1 to 200.
	//
	// example:
	//
	// 00:00-22:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// The level of the alert. Valid values of N: 1 to 200. Valid values:
	//
	// 	- critical (default value): critical
	//
	// 	- warn: warning
	//
	// 	- info: information
	//
	// This parameter is required.
	//
	// example:
	//
	// warn
	EscalationsLevel *string `json:"EscalationsLevel,omitempty" xml:"EscalationsLevel,omitempty"`
	// The time period during which the alert rule is ineffective. Valid values of N: 1 to 200.
	//
	// example:
	//
	// 23:00-23:59
	NoEffectiveInterval *string `json:"NoEffectiveInterval,omitempty" xml:"NoEffectiveInterval,omitempty"`
	// The mute period during which new alerts are not sent even if the trigger conditions are met. Valid values of N: 1 to 200.
	//
	// Unit: seconds. Minimum value: 3600, which is equivalent to one hour. Default value: 86400, which is equivalent to one day.
	//
	// >  Only one alert notification is sent during a mute period even if the metric value exceeds the alert threshold during consecutive checks.
	//
	// example:
	//
	// 86400
	SilenceTime *string `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The statistical aggregation method that is used to calculate the metric values. Valid values of N: 1 to 200.
	//
	// >  Set the value to Average.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The alert trigger.
	TargetList []*ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList `json:"TargetList,omitempty" xml:"TargetList,omitempty" type:"Repeated"`
	// The alert threshold. Valid values of N: 1 to 200.
	//
	// This parameter is required.
	//
	// example:
	//
	// 5
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The number of times for which the threshold can be consecutively exceeded. Valid values of N: 1 to 200. Default value: 3.
	//
	// >  A metric triggers an alert only after the metric value reaches the threshold consecutively for the specified times.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	Times *string `json:"Times,omitempty" xml:"Times,omitempty"`
	// The callback URL to which a POST request is sent when an alert is triggered based on the alert rule. Valid values of N: 1 to 200.
	//
	// example:
	//
	// http://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s ModifyGroupMonitoringAgentProcessRequestAlertConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupMonitoringAgentProcessRequestAlertConfig) GoString() string {
	return s.String()
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfig) SetComparisonOperator(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfig {
	s.ComparisonOperator = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfig) SetEffectiveInterval(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfig {
	s.EffectiveInterval = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfig) SetEscalationsLevel(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfig {
	s.EscalationsLevel = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfig) SetNoEffectiveInterval(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfig {
	s.NoEffectiveInterval = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfig) SetSilenceTime(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfig {
	s.SilenceTime = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfig) SetStatistics(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfig {
	s.Statistics = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfig) SetTargetList(v []*ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList) *ModifyGroupMonitoringAgentProcessRequestAlertConfig {
	s.TargetList = v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfig) SetThreshold(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfig {
	s.Threshold = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfig) SetTimes(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfig {
	s.Times = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfig) SetWebhook(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfig {
	s.Webhook = &v
	return s
}

type ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList struct {
	// The Alibaba Cloud Resource Name (ARN) of the resource.
	//
	// For information about how to obtain the ARN of a resource, see [DescribeMetricRuleTargets](https://help.aliyun.com/document_detail/121592.html).
	//
	// Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:
	//
	// - {Service name abbreviation}: the abbreviation of the service name. Valid value: mns.
	//
	// - {userId}: the ID of the Alibaba Cloud account.
	//
	// - {regionId}: the region ID of the message queue or topic.
	//
	// - {Resource type}: the type of the resource for which alerts are triggered. Valid values:
	//
	//     - **queues*	-
	//
	//     - **topics*	-
	//
	// - {Resourcename}: the name of the resource.
	//
	//   - If the resource type is set to **queues**, the resource name is the name of the message queue.
	//
	//   - If the resource type is set to **topics**, the resource name is the name of the topic.`
	//
	// example:
	//
	// acs:mns:cn-hangzhou:120886317861****:/queues/test/message
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the resource for which alerts are triggered.
	//
	// For information about how to obtain the ID of a resource for which alerts are triggered, see [DescribeMetricRuleTargets](https://help.aliyun.com/document_detail/121592.html).
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The parameters of the alert callback. The parameters are in the JSON format.
	//
	// example:
	//
	// {"customField1":"value1","customField2":"$.name"}
	JsonParams *string `json:"JsonParams,omitempty" xml:"JsonParams,omitempty"`
	// The level of the alert. Valid values:
	//
	// 	- INFO: information
	//
	// 	- WARN: warning
	//
	// 	- CRITICAL: critical
	//
	// example:
	//
	// ["INFO", "WARN", "CRITICAL"]
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList) GoString() string {
	return s.String()
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList) SetArn(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList {
	s.Arn = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList) SetId(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList {
	s.Id = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList) SetJsonParams(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList {
	s.JsonParams = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList) SetLevel(v string) *ModifyGroupMonitoringAgentProcessRequestAlertConfigTargetList {
	s.Level = &v
	return s
}

type ModifyGroupMonitoringAgentProcessResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 7985D471-3FA8-4EE9-8F4B-45C19DF3D36F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyGroupMonitoringAgentProcessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupMonitoringAgentProcessResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyGroupMonitoringAgentProcessResponseBody) SetCode(v string) *ModifyGroupMonitoringAgentProcessResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessResponseBody) SetMessage(v string) *ModifyGroupMonitoringAgentProcessResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessResponseBody) SetRequestId(v string) *ModifyGroupMonitoringAgentProcessResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessResponseBody) SetSuccess(v bool) *ModifyGroupMonitoringAgentProcessResponseBody {
	s.Success = &v
	return s
}

type ModifyGroupMonitoringAgentProcessResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyGroupMonitoringAgentProcessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyGroupMonitoringAgentProcessResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyGroupMonitoringAgentProcessResponse) GoString() string {
	return s.String()
}

func (s *ModifyGroupMonitoringAgentProcessResponse) SetHeaders(v map[string]*string) *ModifyGroupMonitoringAgentProcessResponse {
	s.Headers = v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessResponse) SetStatusCode(v int32) *ModifyGroupMonitoringAgentProcessResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyGroupMonitoringAgentProcessResponse) SetBody(v *ModifyGroupMonitoringAgentProcessResponseBody) *ModifyGroupMonitoringAgentProcessResponse {
	s.Body = v
	return s
}

type ModifyHostAvailabilityRequest struct {
	AlertConfig *ModifyHostAvailabilityRequestAlertConfig `json:"AlertConfig,omitempty" xml:"AlertConfig,omitempty" type:"Struct"`
	TaskOption  *ModifyHostAvailabilityRequestTaskOption  `json:"TaskOption,omitempty" xml:"TaskOption,omitempty" type:"Struct"`
	// The alert configurations.
	//
	// This parameter is required.
	AlertConfigEscalationList []*ModifyHostAvailabilityRequestAlertConfigEscalationList `json:"AlertConfigEscalationList,omitempty" xml:"AlertConfigEscalationList,omitempty" type:"Repeated"`
	// The information about the resources for which alerts are triggered.
	AlertConfigTargetList []*ModifyHostAvailabilityRequestAlertConfigTargetList `json:"AlertConfigTargetList,omitempty" xml:"AlertConfigTargetList,omitempty" type:"Repeated"`
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the availability monitoring task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The ECS instances that are monitored. Valid values of N: 1 to 21.
	//
	// > This parameter must be specified when `TaskScope` is set to `GROUP_SPEC_INSTANCE`.
	//
	// example:
	//
	// i-absdfkwl321****
	InstanceList []*string `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" type:"Repeated"`
	RegionId     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the availability monitoring task.
	//
	// This parameter is required.
	//
	// example:
	//
	// task2
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	// The range of instances that are monitored by the availability monitoring task. Valid values:
	//
	// 	- GROUP: All Elastic Compute Service (ECS) instances in the application group are monitored.
	//
	// 	- GROUP_SPEC_INSTANCE: Specified ECS instances in the application group are monitored. The TaskScope parameter must be used in combination with the InstanceList.N parameter. The InstanceList.N parameter specifies the ECS instances to be monitored.
	//
	// example:
	//
	// GROUP
	TaskScope *string `json:"TaskScope,omitempty" xml:"TaskScope,omitempty"`
}

func (s ModifyHostAvailabilityRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostAvailabilityRequest) GoString() string {
	return s.String()
}

func (s *ModifyHostAvailabilityRequest) SetAlertConfig(v *ModifyHostAvailabilityRequestAlertConfig) *ModifyHostAvailabilityRequest {
	s.AlertConfig = v
	return s
}

func (s *ModifyHostAvailabilityRequest) SetTaskOption(v *ModifyHostAvailabilityRequestTaskOption) *ModifyHostAvailabilityRequest {
	s.TaskOption = v
	return s
}

func (s *ModifyHostAvailabilityRequest) SetAlertConfigEscalationList(v []*ModifyHostAvailabilityRequestAlertConfigEscalationList) *ModifyHostAvailabilityRequest {
	s.AlertConfigEscalationList = v
	return s
}

func (s *ModifyHostAvailabilityRequest) SetAlertConfigTargetList(v []*ModifyHostAvailabilityRequestAlertConfigTargetList) *ModifyHostAvailabilityRequest {
	s.AlertConfigTargetList = v
	return s
}

func (s *ModifyHostAvailabilityRequest) SetGroupId(v int64) *ModifyHostAvailabilityRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyHostAvailabilityRequest) SetId(v int64) *ModifyHostAvailabilityRequest {
	s.Id = &v
	return s
}

func (s *ModifyHostAvailabilityRequest) SetInstanceList(v []*string) *ModifyHostAvailabilityRequest {
	s.InstanceList = v
	return s
}

func (s *ModifyHostAvailabilityRequest) SetRegionId(v string) *ModifyHostAvailabilityRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHostAvailabilityRequest) SetTaskName(v string) *ModifyHostAvailabilityRequest {
	s.TaskName = &v
	return s
}

func (s *ModifyHostAvailabilityRequest) SetTaskScope(v string) *ModifyHostAvailabilityRequest {
	s.TaskScope = &v
	return s
}

type ModifyHostAvailabilityRequestAlertConfig struct {
	// The end of the time range during which the alert rule is effective. Valid values: 0 to 23.
	//
	// For example, if the `AlertConfig.StartTime` parameter is set to 0 and the `AlertConfig.EndTime` parameter is set to 22, the alert rule is effective from 00:00:00 to 22:00:00.
	//
	// > Alert notifications are sent based on the specified threshold only if the alert rule is effective.
	//
	// example:
	//
	// 22
	EndTime *int32 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The alert notification methods. Valid values:
	//
	// 0: Alert notifications are sent by using emails and DingTalk chatbots.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0
	NotifyType *int32 `json:"NotifyType,omitempty" xml:"NotifyType,omitempty"`
	// The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400. The default value indicates one day.
	//
	// example:
	//
	// 86400
	SilenceTime *int32 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The beginning of the time range during which the alert rule is effective. Valid values: 0 to 23.
	//
	// For example, if the `AlertConfig.StartTime` parameter is set to 0 and the `AlertConfig.EndTime` parameter is set to 22, the alert rule is effective from 00:00:00 to 22:00:00.
	//
	// > Alert notifications are sent based on the specified threshold only if the alert rule is effective.
	//
	// example:
	//
	// 0
	StartTime *int32 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The callback URL.
	//
	// example:
	//
	// https://www.aliyun.com/webhook.json
	WebHook *string `json:"WebHook,omitempty" xml:"WebHook,omitempty"`
}

func (s ModifyHostAvailabilityRequestAlertConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostAvailabilityRequestAlertConfig) GoString() string {
	return s.String()
}

func (s *ModifyHostAvailabilityRequestAlertConfig) SetEndTime(v int32) *ModifyHostAvailabilityRequestAlertConfig {
	s.EndTime = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfig) SetNotifyType(v int32) *ModifyHostAvailabilityRequestAlertConfig {
	s.NotifyType = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfig) SetSilenceTime(v int32) *ModifyHostAvailabilityRequestAlertConfig {
	s.SilenceTime = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfig) SetStartTime(v int32) *ModifyHostAvailabilityRequestAlertConfig {
	s.StartTime = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfig) SetWebHook(v string) *ModifyHostAvailabilityRequestAlertConfig {
	s.WebHook = &v
	return s
}

type ModifyHostAvailabilityRequestTaskOption struct {
	// The header of the HTTP request. Format: `Parameter name:Parameter value`. Separate multiple parameters with carriage return characters. Example:
	//
	//     params1:value1
	//
	//     params2:value2
	//
	// example:
	//
	// params1:value1
	HttpHeader *string `json:"HttpHeader,omitempty" xml:"HttpHeader,omitempty"`
	// The HTTP request method. Valid values:
	//
	// 	- GET
	//
	// 	- POST
	//
	// 	- HEAD
	//
	// > This parameter must be specified when TaskType is set to HTTP. For more information about how to configure the TaskType parameter, see [CreateHostAvailability](https://help.aliyun.com/document_detail/115317.html).
	//
	// example:
	//
	// GET
	HttpMethod *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	// The method to trigger an alert. The alert can be triggered based on whether the specified alert rule is included in the response body. Valid values:
	//
	// 	- true: If the HTTP response body includes the alert rule, an alert is triggered.
	//
	// 	- false: If the HTTP response does not include the alert rule, an alert is triggered.
	//
	// > This parameter must be specified when TaskType is set to HTTP. For more information about how to configure the TaskType parameter, see [CreateHostAvailability](https://help.aliyun.com/document_detail/115317.html).
	//
	// example:
	//
	// true
	HttpNegative *bool `json:"HttpNegative,omitempty" xml:"HttpNegative,omitempty"`
	// The content of the HTTP POST request.
	//
	// example:
	//
	// params1=value1
	HttpPostContent *string `json:"HttpPostContent,omitempty" xml:"HttpPostContent,omitempty"`
	// The character set that is used in the HTTP response.
	//
	// > Only UTF-8 is supported.
	//
	// example:
	//
	// UTF-8
	HttpResponseCharset *string `json:"HttpResponseCharset,omitempty" xml:"HttpResponseCharset,omitempty"`
	// The response to the HTTP request.
	//
	// example:
	//
	// ok
	HttpResponseMatchContent *string `json:"HttpResponseMatchContent,omitempty" xml:"HttpResponseMatchContent,omitempty"`
	// The URI that you want to monitor. This parameter is required if the TaskType parameter is set to HTTP or Telnet.
	//
	// example:
	//
	// https://www.aliyun.com
	HttpURI *string `json:"HttpURI,omitempty" xml:"HttpURI,omitempty"`
	// The interval at which detection requests are sent. Unit: seconds. Valid values: 15, 30, 60, 120, 300, 900, 1800, and 3600.
	//
	// > This parameter is available only for the CloudMonitor agent V3.5.1 or later.
	//
	// example:
	//
	// 60
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The domain name or IP address that you want to monitor.
	//
	// >  This parameter is required if the TaskType parameter is set to PING. For more information about how to set the TaskType parameter, see [CreateHostAvailability](https://help.aliyun.com/document_detail/115317.html).
	//
	// example:
	//
	// www.aliyun.com
	TelnetOrPingHost *string `json:"TelnetOrPingHost,omitempty" xml:"TelnetOrPingHost,omitempty"`
}

func (s ModifyHostAvailabilityRequestTaskOption) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostAvailabilityRequestTaskOption) GoString() string {
	return s.String()
}

func (s *ModifyHostAvailabilityRequestTaskOption) SetHttpHeader(v string) *ModifyHostAvailabilityRequestTaskOption {
	s.HttpHeader = &v
	return s
}

func (s *ModifyHostAvailabilityRequestTaskOption) SetHttpMethod(v string) *ModifyHostAvailabilityRequestTaskOption {
	s.HttpMethod = &v
	return s
}

func (s *ModifyHostAvailabilityRequestTaskOption) SetHttpNegative(v bool) *ModifyHostAvailabilityRequestTaskOption {
	s.HttpNegative = &v
	return s
}

func (s *ModifyHostAvailabilityRequestTaskOption) SetHttpPostContent(v string) *ModifyHostAvailabilityRequestTaskOption {
	s.HttpPostContent = &v
	return s
}

func (s *ModifyHostAvailabilityRequestTaskOption) SetHttpResponseCharset(v string) *ModifyHostAvailabilityRequestTaskOption {
	s.HttpResponseCharset = &v
	return s
}

func (s *ModifyHostAvailabilityRequestTaskOption) SetHttpResponseMatchContent(v string) *ModifyHostAvailabilityRequestTaskOption {
	s.HttpResponseMatchContent = &v
	return s
}

func (s *ModifyHostAvailabilityRequestTaskOption) SetHttpURI(v string) *ModifyHostAvailabilityRequestTaskOption {
	s.HttpURI = &v
	return s
}

func (s *ModifyHostAvailabilityRequestTaskOption) SetInterval(v int32) *ModifyHostAvailabilityRequestTaskOption {
	s.Interval = &v
	return s
}

func (s *ModifyHostAvailabilityRequestTaskOption) SetTelnetOrPingHost(v string) *ModifyHostAvailabilityRequestTaskOption {
	s.TelnetOrPingHost = &v
	return s
}

type ModifyHostAvailabilityRequestAlertConfigEscalationList struct {
	// The method used to calculate the metric values that trigger alerts. Valid values of N: 1 to 21. The value of this parameter varies based on the metric. The following items show the correspondence between metrics and calculation methods:
	//
	// 	- HttpStatus: Value
	//
	// 	- HttpLatency: Average
	//
	// 	- TelnetStatus: Value
	//
	// 	- TelnetLatency: Average
	//
	// 	- PingLostRate: Average
	//
	// > The value Value indicates the original value and is used for metrics such as status codes. The value Average indicates the average value and is used for metrics such as the latency and packet loss rate.
	//
	// example:
	//
	// Value
	Aggregate *string `json:"Aggregate,omitempty" xml:"Aggregate,omitempty"`
	// The metric for which the alert feature is enabled. Valid values of N: 1 to 21. Valid values:
	//
	// 	- HttpStatus: HTTP status code
	//
	// 	- HttpLatency: HTTP response time
	//
	// 	- TelnetStatus: Telnet status code
	//
	// 	- TelnetLatency: Telnet response time
	//
	// 	- PingLostRate: Ping packet loss rate
	//
	// This parameter is required.
	//
	// example:
	//
	// HttpStatus
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The comparison operator that is used in the alert rule. Valid values of N: 1 to 21. Valid values:
	//
	// 	- `>`
	//
	// 	- `>=`
	//
	// 	- `<`
	//
	// 	- `<=`
	//
	// 	- `=`
	//
	// example:
	//
	// >
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an alert is triggered. Valid values of N: 1 to 21.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
	// The alert threshold. Valid values of N: 1 to 21.
	//
	// example:
	//
	// 3
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyHostAvailabilityRequestAlertConfigEscalationList) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostAvailabilityRequestAlertConfigEscalationList) GoString() string {
	return s.String()
}

func (s *ModifyHostAvailabilityRequestAlertConfigEscalationList) SetAggregate(v string) *ModifyHostAvailabilityRequestAlertConfigEscalationList {
	s.Aggregate = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfigEscalationList) SetMetricName(v string) *ModifyHostAvailabilityRequestAlertConfigEscalationList {
	s.MetricName = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfigEscalationList) SetOperator(v string) *ModifyHostAvailabilityRequestAlertConfigEscalationList {
	s.Operator = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfigEscalationList) SetTimes(v int32) *ModifyHostAvailabilityRequestAlertConfigEscalationList {
	s.Times = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfigEscalationList) SetValue(v string) *ModifyHostAvailabilityRequestAlertConfigEscalationList {
	s.Value = &v
	return s
}

type ModifyHostAvailabilityRequestAlertConfigTargetList struct {
	// The Alibaba Cloud Resource Name (ARN) of the resource.
	//
	// Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. Fields:
	//
	// 	- {Service name abbreviation}: the abbreviation of the service name. Set the value to Simple Message Queue (formerly MNS) (SMQ).
	//
	// 	- {userId}: the ID of the Alibaba Cloud account.
	//
	// 	- {regionId}: the region ID of the SMQ queue or topic.
	//
	// 	- {Resource type}: the type of the resource for which alerts are triggered. Valid values:
	//
	//     	- **queues**
	//
	//     	- **topics**
	//
	// 	- {Resource name}: the resource name.
	//
	//     	- If the resource type is **queues**, the resource name is the queue name.
	//
	//     	- If the resource type is **topics**, the resource name is the topic name.
	//
	// example:
	//
	// acs:mns:cn-hangzhou:111:/queues/test/message
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the resource for which alerts are triggered.
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The parameters of the alert callback. The parameters are in the JSON format.
	//
	// example:
	//
	// {"customField1":"value1","customField2":"$.name"}
	JsonParams *string `json:"JsonParams,omitempty" xml:"JsonParams,omitempty"`
	// The alert level. Valid values:
	//
	// 	- INFO
	//
	// 	- WARN
	//
	// 	- CRITICAL
	//
	// example:
	//
	// ["INFO", "WARN", "CRITICAL"]
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s ModifyHostAvailabilityRequestAlertConfigTargetList) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostAvailabilityRequestAlertConfigTargetList) GoString() string {
	return s.String()
}

func (s *ModifyHostAvailabilityRequestAlertConfigTargetList) SetArn(v string) *ModifyHostAvailabilityRequestAlertConfigTargetList {
	s.Arn = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfigTargetList) SetId(v string) *ModifyHostAvailabilityRequestAlertConfigTargetList {
	s.Id = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfigTargetList) SetJsonParams(v string) *ModifyHostAvailabilityRequestAlertConfigTargetList {
	s.JsonParams = &v
	return s
}

func (s *ModifyHostAvailabilityRequestAlertConfigTargetList) SetLevel(v string) *ModifyHostAvailabilityRequestAlertConfigTargetList {
	s.Level = &v
	return s
}

type ModifyHostAvailabilityResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 16E815A3-47E1-4290-87F9-D5C99471FF45
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyHostAvailabilityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostAvailabilityResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHostAvailabilityResponseBody) SetCode(v string) *ModifyHostAvailabilityResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyHostAvailabilityResponseBody) SetMessage(v string) *ModifyHostAvailabilityResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyHostAvailabilityResponseBody) SetRequestId(v string) *ModifyHostAvailabilityResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyHostAvailabilityResponseBody) SetSuccess(v bool) *ModifyHostAvailabilityResponseBody {
	s.Success = &v
	return s
}

type ModifyHostAvailabilityResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHostAvailabilityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHostAvailabilityResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostAvailabilityResponse) GoString() string {
	return s.String()
}

func (s *ModifyHostAvailabilityResponse) SetHeaders(v map[string]*string) *ModifyHostAvailabilityResponse {
	s.Headers = v
	return s
}

func (s *ModifyHostAvailabilityResponse) SetStatusCode(v int32) *ModifyHostAvailabilityResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHostAvailabilityResponse) SetBody(v *ModifyHostAvailabilityResponseBody) *ModifyHostAvailabilityResponse {
	s.Body = v
	return s
}

type ModifyHostInfoRequest struct {
	// The name of the host.
	//
	// example:
	//
	// portalHost
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the instance. Only hosts not on Alibaba Cloud are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// host-R_NSWNV****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyHostInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostInfoRequest) GoString() string {
	return s.String()
}

func (s *ModifyHostInfoRequest) SetHostName(v string) *ModifyHostInfoRequest {
	s.HostName = &v
	return s
}

func (s *ModifyHostInfoRequest) SetInstanceId(v string) *ModifyHostInfoRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyHostInfoRequest) SetRegionId(v string) *ModifyHostInfoRequest {
	s.RegionId = &v
	return s
}

type ModifyHostInfoResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// EBB5215C-44AB-4000-A2D7-48634FDC4F04
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyHostInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostInfoResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHostInfoResponseBody) SetCode(v string) *ModifyHostInfoResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyHostInfoResponseBody) SetMessage(v string) *ModifyHostInfoResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyHostInfoResponseBody) SetRequestId(v string) *ModifyHostInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyHostInfoResponseBody) SetSuccess(v bool) *ModifyHostInfoResponseBody {
	s.Success = &v
	return s
}

type ModifyHostInfoResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHostInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHostInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHostInfoResponse) GoString() string {
	return s.String()
}

func (s *ModifyHostInfoResponse) SetHeaders(v map[string]*string) *ModifyHostInfoResponse {
	s.Headers = v
	return s
}

func (s *ModifyHostInfoResponse) SetStatusCode(v int32) *ModifyHostInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHostInfoResponse) SetBody(v *ModifyHostInfoResponseBody) *ModifyHostInfoResponse {
	s.Body = v
	return s
}

type ModifyHybridMonitorNamespaceRequest struct {
	// The description of the namespace.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the namespace.
	//
	// The name can contain letters, digits, and hyphens (-).
	//
	// For information about how to obtain the name of a namespace, see [DescribeHybridMonitorNamespaceList](https://help.aliyun.com/document_detail/428880.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// aliyun
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The data retention period. Valid values:
	//
	// 	- cms.s1.large: Data is stored for 15 days.
	//
	// 	- cms.s1.xlarge: Data is stored for 32 days.
	//
	// 	- cms.s1.2xlarge: Data is stored for 63 days.
	//
	// 	- cms.s1.3xlarge: Data is stored for 93 days.
	//
	// 	- cms.s1.6xlarge: Data is stored for 185 days.
	//
	// 	- cms.s1.12xlarge: Data is stored for 376 days.
	//
	// For information about the pricing for different retention periods, see the **Pricing*	- section in [Billing of the dashboard feature](https://help.aliyun.com/document_detail/223532.html).
	//
	// example:
	//
	// cms.s1.2xlarge
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
}

func (s ModifyHybridMonitorNamespaceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorNamespaceRequest) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorNamespaceRequest) SetDescription(v string) *ModifyHybridMonitorNamespaceRequest {
	s.Description = &v
	return s
}

func (s *ModifyHybridMonitorNamespaceRequest) SetNamespace(v string) *ModifyHybridMonitorNamespaceRequest {
	s.Namespace = &v
	return s
}

func (s *ModifyHybridMonitorNamespaceRequest) SetRegionId(v string) *ModifyHybridMonitorNamespaceRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHybridMonitorNamespaceRequest) SetSpec(v string) *ModifyHybridMonitorNamespaceRequest {
	s.Spec = &v
	return s
}

type ModifyHybridMonitorNamespaceResponseBody struct {
	// The returned message.
	//
	// example:
	//
	// Success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// %s
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// E190AB2E-7BF9-59B7-9DDC-7CB1782C5ECD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyHybridMonitorNamespaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorNamespaceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorNamespaceResponseBody) SetCode(v string) *ModifyHybridMonitorNamespaceResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyHybridMonitorNamespaceResponseBody) SetMessage(v string) *ModifyHybridMonitorNamespaceResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyHybridMonitorNamespaceResponseBody) SetRequestId(v string) *ModifyHybridMonitorNamespaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyHybridMonitorNamespaceResponseBody) SetSuccess(v string) *ModifyHybridMonitorNamespaceResponseBody {
	s.Success = &v
	return s
}

type ModifyHybridMonitorNamespaceResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHybridMonitorNamespaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHybridMonitorNamespaceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorNamespaceResponse) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorNamespaceResponse) SetHeaders(v map[string]*string) *ModifyHybridMonitorNamespaceResponse {
	s.Headers = v
	return s
}

func (s *ModifyHybridMonitorNamespaceResponse) SetStatusCode(v int32) *ModifyHybridMonitorNamespaceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHybridMonitorNamespaceResponse) SetBody(v *ModifyHybridMonitorNamespaceResponseBody) *ModifyHybridMonitorNamespaceResponse {
	s.Body = v
	return s
}

type ModifyHybridMonitorSLSGroupRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The configurations of the Logstore group.
	//
	// Valid values of N: 1 to 25.
	//
	// This parameter is required.
	SLSGroupConfig []*ModifyHybridMonitorSLSGroupRequestSLSGroupConfig `json:"SLSGroupConfig,omitempty" xml:"SLSGroupConfig,omitempty" type:"Repeated"`
	// The description of the Logstore group.
	SLSGroupDescription *string `json:"SLSGroupDescription,omitempty" xml:"SLSGroupDescription,omitempty"`
	// The name of the Logstore group.
	//
	// For information about how to obtain the name of a Logstore group, see [DescribeHybridMonitorSLSGroup](https://help.aliyun.com/document_detail/429526.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// Logstore_test
	SLSGroupName *string `json:"SLSGroupName,omitempty" xml:"SLSGroupName,omitempty"`
}

func (s ModifyHybridMonitorSLSGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorSLSGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorSLSGroupRequest) SetRegionId(v string) *ModifyHybridMonitorSLSGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHybridMonitorSLSGroupRequest) SetSLSGroupConfig(v []*ModifyHybridMonitorSLSGroupRequestSLSGroupConfig) *ModifyHybridMonitorSLSGroupRequest {
	s.SLSGroupConfig = v
	return s
}

func (s *ModifyHybridMonitorSLSGroupRequest) SetSLSGroupDescription(v string) *ModifyHybridMonitorSLSGroupRequest {
	s.SLSGroupDescription = &v
	return s
}

func (s *ModifyHybridMonitorSLSGroupRequest) SetSLSGroupName(v string) *ModifyHybridMonitorSLSGroupRequest {
	s.SLSGroupName = &v
	return s
}

type ModifyHybridMonitorSLSGroupRequestSLSGroupConfig struct {
	// The Logstore.
	//
	// Valid values of N: 1 to 25.
	//
	// This parameter is required.
	//
	// example:
	//
	// Logstore-aliyun-all
	SLSLogstore *string `json:"SLSLogstore,omitempty" xml:"SLSLogstore,omitempty"`
	// The Simple Log Service project.
	//
	// Valid values of N: 1 to 25.
	//
	// This parameter is required.
	//
	// example:
	//
	// aliyun-project
	SLSProject *string `json:"SLSProject,omitempty" xml:"SLSProject,omitempty"`
	// The region ID.
	//
	// Valid values of N: 1 to 25.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	SLSRegion *string `json:"SLSRegion,omitempty" xml:"SLSRegion,omitempty"`
	// The member ID.
	//
	// Valid values of N: 1 to 25.
	//
	// If you call this operation by using the management account of a resource directory, you can connect the Alibaba Cloud services that are activated for all members in the resource directory to Hybrid Cloud Monitoring. You can use the resource directory to monitor Alibaba Cloud services across enterprise accounts.
	//
	// > If a member uses CloudMonitor for the first time, you must make sure that the service-linked role AliyunServiceRoleForCloudMonitor is attached to the member. For more information, see [Manage the service-linked role for CloudMonitor](https://help.aliyun.com/document_detail/170423.html).
	//
	// example:
	//
	// 120886317861****
	SLSUserId *string `json:"SLSUserId,omitempty" xml:"SLSUserId,omitempty"`
}

func (s ModifyHybridMonitorSLSGroupRequestSLSGroupConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorSLSGroupRequestSLSGroupConfig) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorSLSGroupRequestSLSGroupConfig) SetSLSLogstore(v string) *ModifyHybridMonitorSLSGroupRequestSLSGroupConfig {
	s.SLSLogstore = &v
	return s
}

func (s *ModifyHybridMonitorSLSGroupRequestSLSGroupConfig) SetSLSProject(v string) *ModifyHybridMonitorSLSGroupRequestSLSGroupConfig {
	s.SLSProject = &v
	return s
}

func (s *ModifyHybridMonitorSLSGroupRequestSLSGroupConfig) SetSLSRegion(v string) *ModifyHybridMonitorSLSGroupRequestSLSGroupConfig {
	s.SLSRegion = &v
	return s
}

func (s *ModifyHybridMonitorSLSGroupRequestSLSGroupConfig) SetSLSUserId(v string) *ModifyHybridMonitorSLSGroupRequestSLSGroupConfig {
	s.SLSUserId = &v
	return s
}

type ModifyHybridMonitorSLSGroupResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// NotFound.SLSGroup
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 66683237-7126-50F8-BBF8-D67ACC919A17
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyHybridMonitorSLSGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorSLSGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorSLSGroupResponseBody) SetCode(v string) *ModifyHybridMonitorSLSGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyHybridMonitorSLSGroupResponseBody) SetMessage(v string) *ModifyHybridMonitorSLSGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyHybridMonitorSLSGroupResponseBody) SetRequestId(v string) *ModifyHybridMonitorSLSGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyHybridMonitorSLSGroupResponseBody) SetSuccess(v string) *ModifyHybridMonitorSLSGroupResponseBody {
	s.Success = &v
	return s
}

type ModifyHybridMonitorSLSGroupResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHybridMonitorSLSGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHybridMonitorSLSGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorSLSGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorSLSGroupResponse) SetHeaders(v map[string]*string) *ModifyHybridMonitorSLSGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyHybridMonitorSLSGroupResponse) SetStatusCode(v int32) *ModifyHybridMonitorSLSGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHybridMonitorSLSGroupResponse) SetBody(v *ModifyHybridMonitorSLSGroupResponseBody) *ModifyHybridMonitorSLSGroupResponse {
	s.Body = v
	return s
}

type ModifyHybridMonitorTaskRequest struct {
	// The tags of the metric.
	AttachLabels []*ModifyHybridMonitorTaskRequestAttachLabels `json:"AttachLabels,omitempty" xml:"AttachLabels,omitempty" type:"Repeated"`
	// The collection period of the metric. Valid values:
	//
	// 	- 15
	//
	// 	- 60
	//
	// Unit: seconds.
	//
	// example:
	//
	// 15
	CollectInterval *string `json:"CollectInterval,omitempty" xml:"CollectInterval,omitempty"`
	// The description of the metric import task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The configurations of the logs that are imported from Log Service.
	SLSProcessConfig *ModifyHybridMonitorTaskRequestSLSProcessConfig `json:"SLSProcessConfig,omitempty" xml:"SLSProcessConfig,omitempty" type:"Struct"`
	// The ID of the metric import task.
	//
	// For information about how to obtain the ID of a metric import task, see [DescribeHybridMonitorTaskList](https://help.aliyun.com/document_detail/428624.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 36****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the metric import task.
	//
	// For information about how to obtain the ID of a metric import task, see [DescribeHybridMonitorTaskList](https://help.aliyun.com/document_detail/428624.html).
	//
	// example:
	//
	// SLS_task
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s ModifyHybridMonitorTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorTaskRequest) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorTaskRequest) SetAttachLabels(v []*ModifyHybridMonitorTaskRequestAttachLabels) *ModifyHybridMonitorTaskRequest {
	s.AttachLabels = v
	return s
}

func (s *ModifyHybridMonitorTaskRequest) SetCollectInterval(v string) *ModifyHybridMonitorTaskRequest {
	s.CollectInterval = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequest) SetDescription(v string) *ModifyHybridMonitorTaskRequest {
	s.Description = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequest) SetRegionId(v string) *ModifyHybridMonitorTaskRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequest) SetSLSProcessConfig(v *ModifyHybridMonitorTaskRequestSLSProcessConfig) *ModifyHybridMonitorTaskRequest {
	s.SLSProcessConfig = v
	return s
}

func (s *ModifyHybridMonitorTaskRequest) SetTaskId(v string) *ModifyHybridMonitorTaskRequest {
	s.TaskId = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequest) SetTaskName(v string) *ModifyHybridMonitorTaskRequest {
	s.TaskName = &v
	return s
}

type ModifyHybridMonitorTaskRequestAttachLabels struct {
	// The tag key of the metric.
	//
	// example:
	//
	// app_service
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The tag value of the metric.
	//
	// example:
	//
	// testValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyHybridMonitorTaskRequestAttachLabels) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorTaskRequestAttachLabels) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorTaskRequestAttachLabels) SetName(v string) *ModifyHybridMonitorTaskRequestAttachLabels {
	s.Name = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequestAttachLabels) SetValue(v string) *ModifyHybridMonitorTaskRequestAttachLabels {
	s.Value = &v
	return s
}

type ModifyHybridMonitorTaskRequestSLSProcessConfig struct {
	// The extended fields that specify the results of basic operations performed on aggregation results.
	Express []*ModifyHybridMonitorTaskRequestSLSProcessConfigExpress `json:"Express,omitempty" xml:"Express,omitempty" type:"Repeated"`
	// The conditions that are used to filter logs imported from Log Service.
	Filter *ModifyHybridMonitorTaskRequestSLSProcessConfigFilter `json:"Filter,omitempty" xml:"Filter,omitempty" type:"Struct"`
	// The dimensions based on which data is aggregated. This parameter is equivalent to the GROUP BY clause in SQL.
	GroupBy []*ModifyHybridMonitorTaskRequestSLSProcessConfigGroupBy `json:"GroupBy,omitempty" xml:"GroupBy,omitempty" type:"Repeated"`
	// None
	Statistics []*ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics `json:"Statistics,omitempty" xml:"Statistics,omitempty" type:"Repeated"`
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfig) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfig) SetExpress(v []*ModifyHybridMonitorTaskRequestSLSProcessConfigExpress) *ModifyHybridMonitorTaskRequestSLSProcessConfig {
	s.Express = v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfig) SetFilter(v *ModifyHybridMonitorTaskRequestSLSProcessConfigFilter) *ModifyHybridMonitorTaskRequestSLSProcessConfig {
	s.Filter = v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfig) SetGroupBy(v []*ModifyHybridMonitorTaskRequestSLSProcessConfigGroupBy) *ModifyHybridMonitorTaskRequestSLSProcessConfig {
	s.GroupBy = v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfig) SetStatistics(v []*ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics) *ModifyHybridMonitorTaskRequestSLSProcessConfig {
	s.Statistics = v
	return s
}

type ModifyHybridMonitorTaskRequestSLSProcessConfigExpress struct {
	// The alias of the extended field that specifies the result of basic operations performed on aggregation results.
	//
	// example:
	//
	// SuccRate
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The extended field that specifies the result of basic operations performed on aggregation results.
	//
	// example:
	//
	// success_count
	Express *string `json:"Express,omitempty" xml:"Express,omitempty"`
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfigExpress) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfigExpress) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigExpress) SetAlias(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigExpress {
	s.Alias = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigExpress) SetExpress(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigExpress {
	s.Express = &v
	return s
}

type ModifyHybridMonitorTaskRequestSLSProcessConfigFilter struct {
	// None
	Filters []*ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
	// The relationship between multiple filter conditions. Valid values:
	//
	// 	- and (default): Logs are processed only if all filter conditions are met.
	//
	// 	- or: Logs are processed if one of the filter conditions is met.
	//
	// example:
	//
	// and
	Relation *string `json:"Relation,omitempty" xml:"Relation,omitempty"`
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfigFilter) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfigFilter) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigFilter) SetFilters(v []*ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters) *ModifyHybridMonitorTaskRequestSLSProcessConfigFilter {
	s.Filters = v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigFilter) SetRelation(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigFilter {
	s.Relation = &v
	return s
}

type ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters struct {
	// The method that is used to filter logs imported from Log Service. Valid values:
	//
	// 	- `contain`: contains
	//
	// 	- `notContain`: does not contain
	//
	// 	- `>`: greater than
	//
	// 	- `<`: less than
	//
	// 	- `=`: equal to
	//
	// 	- `! =`: not equal to
	//
	// 	- `>=`: greater than or equal to
	//
	// 	- `<=`: less than or equal to
	//
	// example:
	//
	// =
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The name of the key that is used to filter logs imported from Log Service.
	//
	// example:
	//
	// code
	SLSKeyName *string `json:"SLSKeyName,omitempty" xml:"SLSKeyName,omitempty"`
	// The value of the key that is used to filter logs imported from Log Service.
	//
	// example:
	//
	// 200
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters) SetOperator(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters {
	s.Operator = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters) SetSLSKeyName(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters {
	s.SLSKeyName = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters) SetValue(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigFilterFilters {
	s.Value = &v
	return s
}

type ModifyHybridMonitorTaskRequestSLSProcessConfigGroupBy struct {
	// The alias of the aggregation result.
	//
	// example:
	//
	// ApiResult
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The name of the key that is used to aggregate logs imported from Log Service.
	//
	// example:
	//
	// code
	SLSKeyName *string `json:"SLSKeyName,omitempty" xml:"SLSKeyName,omitempty"`
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfigGroupBy) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfigGroupBy) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigGroupBy) SetAlias(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigGroupBy {
	s.Alias = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigGroupBy) SetSLSKeyName(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigGroupBy {
	s.SLSKeyName = &v
	return s
}

type ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics struct {
	// The alias of the aggregation result.
	//
	// example:
	//
	// level_count
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The function that is used to aggregate the log data of a statistical period. Valid values:
	//
	// 	- count: counts the number.
	//
	// 	- sum: calculates the total value.
	//
	// 	- avg: calculates the average value.
	//
	// 	- max: calculates the maximum value.
	//
	// 	- min: calculates the minimum value.
	//
	// 	- value: collects samples within the statistical period.
	//
	// 	- countps: calculates the counted number of the specified field divided by the total number of seconds within the statistical period.
	//
	// 	- sumps: calculates the total value of the specified field divided by the total number of seconds within the statistical period.
	//
	// 	- distinct: counts the number of logs where the specified field appears within the statistical period.
	//
	// 	- distribution: counts the number of logs that meet a specified condition within the statistical period.
	//
	// 	- percentile: sorts the values of the specified field in ascending order, and then returns the value that is at the specified percentile within the statistical period. Example: P50.
	//
	// example:
	//
	// count
	Function *string `json:"Function,omitempty" xml:"Function,omitempty"`
	// The value of the function that is used to aggregate logs imported from Log Service.
	//
	// 	- If the `Function` parameter is set to `distribution`, this parameter specifies the lower limit of the statistical interval. For example, if you want to calculate the number of HTTP requests whose status code is 2XX, set this parameter to 200.
	//
	// 	- If you set the `Function` parameter to `percentile`, this parameter specifies the percentile at which the expected value is. For example, 0.5 specifies P50.
	//
	// example:
	//
	// 200
	Parameter1 *string `json:"Parameter1,omitempty" xml:"Parameter1,omitempty"`
	// The value of the function that is used to aggregate logs imported from Log Service.
	//
	// > This parameter must be specified when `Function` is set to `distribution`. This parameter specifies the upper limit of the statistical interval. For example, if you want to calculate the number of HTTP requests whose status code is 2XX, set this parameter to 299.
	//
	// example:
	//
	// 299
	Parameter2 *string `json:"Parameter2,omitempty" xml:"Parameter2,omitempty"`
	// The name of the key that is used to aggregate logs imported from Log Service.
	//
	// example:
	//
	// name
	SLSKeyName *string `json:"SLSKeyName,omitempty" xml:"SLSKeyName,omitempty"`
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics) SetAlias(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics {
	s.Alias = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics) SetFunction(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics {
	s.Function = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics) SetParameter1(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics {
	s.Parameter1 = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics) SetParameter2(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics {
	s.Parameter2 = &v
	return s
}

func (s *ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics) SetSLSKeyName(v string) *ModifyHybridMonitorTaskRequestSLSProcessConfigStatistics {
	s.SLSKeyName = &v
	return s
}

type ModifyHybridMonitorTaskResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// Invalid.SLSConfig
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 11145B76-566A-5D80-A8A3-FAD98D310079
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyHybridMonitorTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorTaskResponseBody) SetCode(v string) *ModifyHybridMonitorTaskResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyHybridMonitorTaskResponseBody) SetMessage(v string) *ModifyHybridMonitorTaskResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyHybridMonitorTaskResponseBody) SetRequestId(v string) *ModifyHybridMonitorTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyHybridMonitorTaskResponseBody) SetSuccess(v string) *ModifyHybridMonitorTaskResponseBody {
	s.Success = &v
	return s
}

type ModifyHybridMonitorTaskResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHybridMonitorTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHybridMonitorTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHybridMonitorTaskResponse) GoString() string {
	return s.String()
}

func (s *ModifyHybridMonitorTaskResponse) SetHeaders(v map[string]*string) *ModifyHybridMonitorTaskResponse {
	s.Headers = v
	return s
}

func (s *ModifyHybridMonitorTaskResponse) SetStatusCode(v int32) *ModifyHybridMonitorTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHybridMonitorTaskResponse) SetBody(v *ModifyHybridMonitorTaskResponseBody) *ModifyHybridMonitorTaskResponse {
	s.Body = v
	return s
}

type ModifyMetricRuleBlackListRequest struct {
	// The category of the cloud service. For example, ApsaraDB for Redis supports the standard architecture, the cluster architecture, and the read/write splitting architecture. In this case, the valid values of this parameter for ApsaraDB for Redis include `kvstore_standard`, `kvstore_sharding`, and `kvstore_splitrw`.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The time range within which the blacklist policy is effective. Take note of the following information:
	//
	// 	- If you do not configure this parameter, the blacklist policy is permanently effective.
	//
	// 	- If you configure this parameter, the blacklist policy is effective only within the specified time range. Examples:
	//
	//     	- `03:00-04:59`: The blacklist policy is effective from 03:00 to 05:00 local time. 05:00 local time is excluded.
	//
	//     	- `03:00-04:59 UTC+0700`: The blacklist policy is effective from 03:00 to 05:00 (UTC+7). 05:00 (UTC+7) is excluded.
	//
	// example:
	//
	// 03:00-04:59
	EffectiveTime *string `json:"EffectiveTime,omitempty" xml:"EffectiveTime,omitempty"`
	// The timestamp when the blacklist policy expires.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1640608200000
	EnableEndTime *string `json:"EnableEndTime,omitempty" xml:"EnableEndTime,omitempty"`
	// The timestamp when the blacklist policy starts to take effect.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// 1640237400000
	EnableStartTime *string `json:"EnableStartTime,omitempty" xml:"EnableStartTime,omitempty"`
	// The ID of the blacklist policy.
	//
	// For information about how to obtain the ID of a blacklist policy, see [DescribeMetricRuleBlackList](https://help.aliyun.com/document_detail/457257.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 93514c96-ceb8-47d8-8ee3-93b6d98b****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The IDs of the instances that belong to the specified cloud service.
	//
	// This parameter is required.
	Instances []*string `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// The metrics of the instance.
	//
	// 	- If you do not configure this parameter, the blacklist policy applies to all metrics of the specified cloud service.
	//
	// 	- If you configure this parameter, the blacklist policy applies only to the current metric.
	Metrics []*ModifyMetricRuleBlackListRequestMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" type:"Repeated"`
	// The name of the blacklist policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// Blacklist-02
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The effective scope of the blacklist policy. Valid values:
	//
	// 	- USER: The blacklist policy takes effect only within the current Alibaba Cloud account.
	//
	// 	- GROUP (default): The blacklist policy takes effect only within the specified application group. For information about how to obtain the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// example:
	//
	// USER
	ScopeType *string `json:"ScopeType,omitempty" xml:"ScopeType,omitempty"`
	// The IDs of the application groups.
	//
	// >  This parameter is required only when `ScopeType` is set to `GROUP`.
	//
	// example:
	//
	// ["67****","78****"]
	ScopeValue *string `json:"ScopeValue,omitempty" xml:"ScopeValue,omitempty"`
}

func (s ModifyMetricRuleBlackListRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleBlackListRequest) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleBlackListRequest) SetCategory(v string) *ModifyMetricRuleBlackListRequest {
	s.Category = &v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetEffectiveTime(v string) *ModifyMetricRuleBlackListRequest {
	s.EffectiveTime = &v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetEnableEndTime(v string) *ModifyMetricRuleBlackListRequest {
	s.EnableEndTime = &v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetEnableStartTime(v string) *ModifyMetricRuleBlackListRequest {
	s.EnableStartTime = &v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetId(v string) *ModifyMetricRuleBlackListRequest {
	s.Id = &v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetInstances(v []*string) *ModifyMetricRuleBlackListRequest {
	s.Instances = v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetMetrics(v []*ModifyMetricRuleBlackListRequestMetrics) *ModifyMetricRuleBlackListRequest {
	s.Metrics = v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetName(v string) *ModifyMetricRuleBlackListRequest {
	s.Name = &v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetNamespace(v string) *ModifyMetricRuleBlackListRequest {
	s.Namespace = &v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetRegionId(v string) *ModifyMetricRuleBlackListRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetScopeType(v string) *ModifyMetricRuleBlackListRequest {
	s.ScopeType = &v
	return s
}

func (s *ModifyMetricRuleBlackListRequest) SetScopeValue(v string) *ModifyMetricRuleBlackListRequest {
	s.ScopeValue = &v
	return s
}

type ModifyMetricRuleBlackListRequestMetrics struct {
	// The name of the metric.
	//
	// Valid values of N: 1 to 10.
	//
	// This parameter is required.
	//
	// example:
	//
	// disk_utilization
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The extended dimension of the instance. For example, `{"device":"C:"}` specifies that the blacklist policy is applied to all C disks of the specified Elastic Compute Service (ECS) instance.
	//
	// Valid values of N: 1 to 10.
	//
	// example:
	//
	// {"device":"C:"}
	Resource *string `json:"Resource,omitempty" xml:"Resource,omitempty"`
}

func (s ModifyMetricRuleBlackListRequestMetrics) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleBlackListRequestMetrics) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleBlackListRequestMetrics) SetMetricName(v string) *ModifyMetricRuleBlackListRequestMetrics {
	s.MetricName = &v
	return s
}

func (s *ModifyMetricRuleBlackListRequestMetrics) SetResource(v string) *ModifyMetricRuleBlackListRequestMetrics {
	s.Resource = &v
	return s
}

type ModifyMetricRuleBlackListResponseBody struct {
	// The error code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The number of blacklist policies that are modified.
	//
	// example:
	//
	// 1
	Count *string `json:"Count,omitempty" xml:"Count,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 008773AE-1D86-3231-90F9-1AF7F808F9CE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyMetricRuleBlackListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleBlackListResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleBlackListResponseBody) SetCode(v string) *ModifyMetricRuleBlackListResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyMetricRuleBlackListResponseBody) SetCount(v string) *ModifyMetricRuleBlackListResponseBody {
	s.Count = &v
	return s
}

func (s *ModifyMetricRuleBlackListResponseBody) SetMessage(v string) *ModifyMetricRuleBlackListResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyMetricRuleBlackListResponseBody) SetRequestId(v string) *ModifyMetricRuleBlackListResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyMetricRuleBlackListResponseBody) SetSuccess(v bool) *ModifyMetricRuleBlackListResponseBody {
	s.Success = &v
	return s
}

type ModifyMetricRuleBlackListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyMetricRuleBlackListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyMetricRuleBlackListResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleBlackListResponse) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleBlackListResponse) SetHeaders(v map[string]*string) *ModifyMetricRuleBlackListResponse {
	s.Headers = v
	return s
}

func (s *ModifyMetricRuleBlackListResponse) SetStatusCode(v int32) *ModifyMetricRuleBlackListResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyMetricRuleBlackListResponse) SetBody(v *ModifyMetricRuleBlackListResponseBody) *ModifyMetricRuleBlackListResponse {
	s.Body = v
	return s
}

type ModifyMetricRuleTemplateRequest struct {
	// The details of the alert template.
	AlertTemplates []*ModifyMetricRuleTemplateRequestAlertTemplates `json:"AlertTemplates,omitempty" xml:"AlertTemplates,omitempty" type:"Repeated"`
	// The description of the alert template.
	//
	// example:
	//
	// ECS_template1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The name of the alert template.
	//
	// For information about how to obtain the name of an alert template, see [DescribeMetricRuleTemplateList](https://help.aliyun.com/document_detail/114982.html).
	//
	// example:
	//
	// test123
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The version of the alert template. The version changes with the number of times that the alert template is modified.
	//
	// For information about how to obtain the version of an alert template, see [DescribeMetricRuleTemplateList](https://help.aliyun.com/document_detail/114982.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 0
	RestVersion *int64 `json:"RestVersion,omitempty" xml:"RestVersion,omitempty"`
	// The ID of the alert template.
	//
	// For information about how to obtain the ID of an alert template, see [DescribeMetricRuleTemplateList](https://help.aliyun.com/document_detail/114982.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	TemplateId *int64 `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ModifyMetricRuleTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleTemplateRequest) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleTemplateRequest) SetAlertTemplates(v []*ModifyMetricRuleTemplateRequestAlertTemplates) *ModifyMetricRuleTemplateRequest {
	s.AlertTemplates = v
	return s
}

func (s *ModifyMetricRuleTemplateRequest) SetDescription(v string) *ModifyMetricRuleTemplateRequest {
	s.Description = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequest) SetName(v string) *ModifyMetricRuleTemplateRequest {
	s.Name = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequest) SetRegionId(v string) *ModifyMetricRuleTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequest) SetRestVersion(v int64) *ModifyMetricRuleTemplateRequest {
	s.RestVersion = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequest) SetTemplateId(v int64) *ModifyMetricRuleTemplateRequest {
	s.TemplateId = &v
	return s
}

type ModifyMetricRuleTemplateRequestAlertTemplates struct {
	Escalations *ModifyMetricRuleTemplateRequestAlertTemplatesEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Struct"`
	// The abbreviation of the cloud service name.
	//
	// Valid values of N: 1 to 200.
	//
	// For more information about how to obtain the abbreviation of a cloud service name, see `metricCategory` in the response parameter `Labels` of the [DescribeProjectMeta](https://help.aliyun.com/document_detail/114916.html) operation.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The metric name.
	//
	// Valid values of N: 1 to 200.
	//
	// For information about how to obtain metrics, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// Valid values of N: 1 to 200.
	//
	// For information about how to obtain the namespace of a cloud service, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The statistical period of the monitoring data.
	//
	// Valid values of N: 1 to 200.
	//
	// > If the value is set to 300 seconds, the monitoring data is collected every 300 seconds. If the monitoring data is reported every 1 minute, the alert system calculates the average, maximum, and minimum values of the monitoring data of 5 minutes and checks whether the aggregated values exceed the threshold. To prevent unexpected alerts, we recommend that you set this parameter together with other parameters.
	//
	// example:
	//
	// 60
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The name of the alert rule.
	//
	// Valid values of N: 1 to 200.
	//
	// example:
	//
	// rule1
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The dimension of the alert. It is an extended field.
	//
	// Valid values of N: 1 to 200.
	//
	// For example, an alert template is applied to an application group, this parameter is set to `{"disk":"/"}`, and the MetricName parameter is set to `DiskUtilization`. In this case, the generated alert rule is applied to the root disk partition (`"/"`) of all instances in the application group to which the alert template is applied.
	//
	// > For more information about the values of extended fields, see [DescribeMetricRuleTemplateAttribute](https://help.aliyun.com/document_detail/114979.html).
	//
	// example:
	//
	// {"disk":"/"}
	Selector *string `json:"Selector,omitempty" xml:"Selector,omitempty"`
	// The callback URL.
	//
	// Valid values of N: 1 to 200.
	//
	// The callback URL must be accessible over the Internet. CloudMonitor pushes an alert notification to the specified callback URL by sending an HTTP POST request. Only the HTTP protocol is supported.
	//
	// example:
	//
	// https://apiwebhook.hipac.cn/api/v1/alarm/aly/eregfeeferrtbnmkdszp
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s ModifyMetricRuleTemplateRequestAlertTemplates) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleTemplateRequestAlertTemplates) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplates) SetEscalations(v *ModifyMetricRuleTemplateRequestAlertTemplatesEscalations) *ModifyMetricRuleTemplateRequestAlertTemplates {
	s.Escalations = v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplates) SetCategory(v string) *ModifyMetricRuleTemplateRequestAlertTemplates {
	s.Category = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplates) SetMetricName(v string) *ModifyMetricRuleTemplateRequestAlertTemplates {
	s.MetricName = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplates) SetNamespace(v string) *ModifyMetricRuleTemplateRequestAlertTemplates {
	s.Namespace = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplates) SetPeriod(v int32) *ModifyMetricRuleTemplateRequestAlertTemplates {
	s.Period = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplates) SetRuleName(v string) *ModifyMetricRuleTemplateRequestAlertTemplates {
	s.RuleName = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplates) SetSelector(v string) *ModifyMetricRuleTemplateRequestAlertTemplates {
	s.Selector = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplates) SetWebhook(v string) *ModifyMetricRuleTemplateRequestAlertTemplates {
	s.Webhook = &v
	return s
}

type ModifyMetricRuleTemplateRequestAlertTemplatesEscalations struct {
	Critical *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	Info     *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo     `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	Warn     *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn     `json:"Warn,omitempty" xml:"Warn,omitempty" type:"Struct"`
}

func (s ModifyMetricRuleTemplateRequestAlertTemplatesEscalations) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleTemplateRequestAlertTemplatesEscalations) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalations) SetCritical(v *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalations {
	s.Critical = v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalations) SetInfo(v *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalations {
	s.Info = v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalations) SetWarn(v *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalations {
	s.Warn = v
	return s
}

type ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *int32  `json:"N,omitempty" xml:"N,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) SetComparisonOperator(v string) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical {
	s.ComparisonOperator = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) SetN(v int32) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical {
	s.N = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) SetStatistics(v string) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical {
	s.Statistics = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) SetThreshold(v string) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical {
	s.Threshold = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical) SetTimes(v int32) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsCritical {
	s.Times = &v
	return s
}

type ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *int32  `json:"N,omitempty" xml:"N,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) SetComparisonOperator(v string) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo {
	s.ComparisonOperator = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) SetN(v int32) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo {
	s.N = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) SetStatistics(v string) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo {
	s.Statistics = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) SetThreshold(v string) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo {
	s.Threshold = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo) SetTimes(v int32) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsInfo {
	s.Times = &v
	return s
}

type ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *int32  `json:"N,omitempty" xml:"N,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) SetComparisonOperator(v string) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn {
	s.ComparisonOperator = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) SetN(v int32) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn {
	s.N = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) SetStatistics(v string) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn {
	s.Statistics = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) SetThreshold(v string) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn {
	s.Threshold = &v
	return s
}

func (s *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn) SetTimes(v int32) *ModifyMetricRuleTemplateRequestAlertTemplatesEscalationsWarn {
	s.Times = &v
	return s
}

type ModifyMetricRuleTemplateResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9E07117F-F6AE-4F1C-81E8-36FBB4892235
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyMetricRuleTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleTemplateResponseBody) SetCode(v int32) *ModifyMetricRuleTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyMetricRuleTemplateResponseBody) SetMessage(v string) *ModifyMetricRuleTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyMetricRuleTemplateResponseBody) SetRequestId(v string) *ModifyMetricRuleTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyMetricRuleTemplateResponseBody) SetSuccess(v bool) *ModifyMetricRuleTemplateResponseBody {
	s.Success = &v
	return s
}

type ModifyMetricRuleTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyMetricRuleTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyMetricRuleTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyMetricRuleTemplateResponse) GoString() string {
	return s.String()
}

func (s *ModifyMetricRuleTemplateResponse) SetHeaders(v map[string]*string) *ModifyMetricRuleTemplateResponse {
	s.Headers = v
	return s
}

func (s *ModifyMetricRuleTemplateResponse) SetStatusCode(v int32) *ModifyMetricRuleTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyMetricRuleTemplateResponse) SetBody(v *ModifyMetricRuleTemplateResponseBody) *ModifyMetricRuleTemplateResponse {
	s.Body = v
	return s
}

type ModifyMonitorGroupRequest struct {
	// The alert groups that can receive alert notifications for the application group.
	//
	// example:
	//
	// alarm_ecs_group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the application group.
	//
	// example:
	//
	// ecs_group
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyMonitorGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyMonitorGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyMonitorGroupRequest) SetContactGroups(v string) *ModifyMonitorGroupRequest {
	s.ContactGroups = &v
	return s
}

func (s *ModifyMonitorGroupRequest) SetGroupId(v string) *ModifyMonitorGroupRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyMonitorGroupRequest) SetGroupName(v string) *ModifyMonitorGroupRequest {
	s.GroupName = &v
	return s
}

func (s *ModifyMonitorGroupRequest) SetRegionId(v string) *ModifyMonitorGroupRequest {
	s.RegionId = &v
	return s
}

type ModifyMonitorGroupResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// C85A2870-5DF4-4269-BC50-ECB5E4591A80
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyMonitorGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyMonitorGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyMonitorGroupResponseBody) SetCode(v int32) *ModifyMonitorGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyMonitorGroupResponseBody) SetMessage(v string) *ModifyMonitorGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyMonitorGroupResponseBody) SetRequestId(v string) *ModifyMonitorGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyMonitorGroupResponseBody) SetSuccess(v bool) *ModifyMonitorGroupResponseBody {
	s.Success = &v
	return s
}

type ModifyMonitorGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyMonitorGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyMonitorGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyMonitorGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyMonitorGroupResponse) SetHeaders(v map[string]*string) *ModifyMonitorGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyMonitorGroupResponse) SetStatusCode(v int32) *ModifyMonitorGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyMonitorGroupResponse) SetBody(v *ModifyMonitorGroupResponseBody) *ModifyMonitorGroupResponse {
	s.Body = v
	return s
}

type ModifyMonitorGroupInstancesRequest struct {
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// This parameter is required.
	Instances []*ModifyMonitorGroupInstancesRequestInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	RegionId  *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyMonitorGroupInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyMonitorGroupInstancesRequest) GoString() string {
	return s.String()
}

func (s *ModifyMonitorGroupInstancesRequest) SetGroupId(v int64) *ModifyMonitorGroupInstancesRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyMonitorGroupInstancesRequest) SetInstances(v []*ModifyMonitorGroupInstancesRequestInstances) *ModifyMonitorGroupInstancesRequest {
	s.Instances = v
	return s
}

func (s *ModifyMonitorGroupInstancesRequest) SetRegionId(v string) *ModifyMonitorGroupInstancesRequest {
	s.RegionId = &v
	return s
}

type ModifyMonitorGroupInstancesRequestInstances struct {
	// The abbreviation of the name of the service to which the instances to be added to the application group belong. Valid values:
	//
	// 	- ECS: Elastic Compute Service (ECS) instances provided by Alibaba Cloud and hosts not provided by Alibaba Cloud
	//
	// 	- RDS: ApsaraDB for RDS
	//
	// 	- ADS: AnalyticDB
	//
	// 	- SLB: Server Load Balancer (SLB)
	//
	// 	- VPC: Virtual Private Cloud (VPC)
	//
	// 	- APIGATEWAY: API Gateway
	//
	// 	- CDN: Alibaba Cloud Content Delivery Network (CDN)
	//
	// 	- CS: Container Service for Swarm
	//
	// 	- DCDN: Dynamic Route for CDN
	//
	// 	- DDoS: Anti-DDoS Pro
	//
	// 	- EIP: Elastic IP Address (EIP)
	//
	// 	- ELASTICSEARCH: Elasticsearch
	//
	// 	- EMR: E-MapReduce
	//
	// 	- ESS: Auto Scaling
	//
	// 	- HBASE: ApsaraDB for Hbase
	//
	// 	- IOT_EDGE: IoT Edge
	//
	// 	- K8S_POD: pods in Container Service for Kubernetes
	//
	// 	- KVSTORE_SHARDING: ApsaraDB for Redis of the cluster architecture
	//
	// 	- KVSTORE_SPLITRW: ApsaraDB for Redis of the read/write splitting architecture
	//
	// 	- KVSTORE_STANDARD: ApsaraDB for Redis of the standard architecture
	//
	// 	- MEMCACHE: ApsaraDB for Memcache
	//
	// 	- MNS: Message Service (MNS)
	//
	// 	- MONGODB: ApsaraDB for MongoDB of the replica set architecture
	//
	// 	- MONGODB_CLUSTER: ApsaraDB for MongoDB of the cluster architecture
	//
	// 	- MONGODB_SHARDING: ApsaraDB for MongoDB of the sharded cluster architecture
	//
	// 	- MQ_TOPIC: MNS topics
	//
	// 	- OCS: ApsaraDB for Memcache of earlier versions
	//
	// 	- OPENSEARCH: Open Search
	//
	// 	- OSS: Object Storage Service (OSS)
	//
	// 	- POLARDB: PolarDB
	//
	// 	- PETADATA: HybridDB for MySQL
	//
	// 	- SCDN: Secure Content Delivery Network (SCDN)
	//
	// 	- SHAREBANDWIDTHPACKAGES: EIP Bandwidth Plan
	//
	// 	- SLS: Log Service
	//
	// 	- VPN: VPN Gateway
	//
	//     Valid values of N: 1 to 2000.
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The ID of the instance. Valid values of N: 1 to 2000.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-a2d5q7pm12****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the instance. Valid values of N: 1 to 2000.
	//
	// This parameter is required.
	//
	// example:
	//
	// HostName
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The ID of the region where the instance resides. Valid values of N: 1 to 2000.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyMonitorGroupInstancesRequestInstances) String() string {
	return tea.Prettify(s)
}

func (s ModifyMonitorGroupInstancesRequestInstances) GoString() string {
	return s.String()
}

func (s *ModifyMonitorGroupInstancesRequestInstances) SetCategory(v string) *ModifyMonitorGroupInstancesRequestInstances {
	s.Category = &v
	return s
}

func (s *ModifyMonitorGroupInstancesRequestInstances) SetInstanceId(v string) *ModifyMonitorGroupInstancesRequestInstances {
	s.InstanceId = &v
	return s
}

func (s *ModifyMonitorGroupInstancesRequestInstances) SetInstanceName(v string) *ModifyMonitorGroupInstancesRequestInstances {
	s.InstanceName = &v
	return s
}

func (s *ModifyMonitorGroupInstancesRequestInstances) SetRegionId(v string) *ModifyMonitorGroupInstancesRequestInstances {
	s.RegionId = &v
	return s
}

type ModifyMonitorGroupInstancesResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// FEC7EDB3-9B08-4AC0-A42A-329F5D14B95A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. The value true indicates a success. The value false indicates a failure.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyMonitorGroupInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyMonitorGroupInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyMonitorGroupInstancesResponseBody) SetCode(v int32) *ModifyMonitorGroupInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyMonitorGroupInstancesResponseBody) SetMessage(v string) *ModifyMonitorGroupInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyMonitorGroupInstancesResponseBody) SetRequestId(v string) *ModifyMonitorGroupInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyMonitorGroupInstancesResponseBody) SetSuccess(v bool) *ModifyMonitorGroupInstancesResponseBody {
	s.Success = &v
	return s
}

type ModifyMonitorGroupInstancesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyMonitorGroupInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyMonitorGroupInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyMonitorGroupInstancesResponse) GoString() string {
	return s.String()
}

func (s *ModifyMonitorGroupInstancesResponse) SetHeaders(v map[string]*string) *ModifyMonitorGroupInstancesResponse {
	s.Headers = v
	return s
}

func (s *ModifyMonitorGroupInstancesResponse) SetStatusCode(v int32) *ModifyMonitorGroupInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyMonitorGroupInstancesResponse) SetBody(v *ModifyMonitorGroupInstancesResponseBody) *ModifyMonitorGroupInstancesResponse {
	s.Body = v
	return s
}

type ModifySiteMonitorRequest struct {
	// The URL or IP address that is monitored by the task.
	//
	// example:
	//
	// http://www.aliyun.com
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// The ID of the alert rule. You can call the DescribeMetricRuleList operation to query the IDs of existing alert rules in CloudMonitor. For more information, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// example:
	//
	// 49f7c317-7645-4cc9-94fd-ea42e122****
	AlertIds *string `json:"AlertIds,omitempty" xml:"AlertIds,omitempty"`
	// The custom detection period. You can only select a time period from Monday to Sunday for detection.
	//
	// example:
	//
	// {"start_hour":0,"end_hour":24, "days":[0], "time_zone":"Local"}
	CustomSchedule *string `json:"CustomSchedule,omitempty" xml:"CustomSchedule,omitempty"`
	// The interval at which detection requests are sent. Valid values: 1, 5, and 15. Unit: minutes. Default value: 1.
	//
	// example:
	//
	// 1
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The unit of the metric.
	//
	// Unit: milliseconds.
	//
	// example:
	//
	// ms
	IntervalUnit *string `json:"IntervalUnit,omitempty" xml:"IntervalUnit,omitempty"`
	// The information of the detection points. The value is a JSON array. Example: `[{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]`. The values of the `city` field indicate Beijing, Hangzhou, and Qingdao.
	//
	// > You can call the DescribeSiteMonitorISPCityList operation to query the detection points. For more information, see [DescribeSiteMonitorISPCityList](https://help.aliyun.com/document_detail/115045.html). If you leave this parameter empty, the system randomly selects three detection points.
	//
	// example:
	//
	// [{"city":"546","isp":"465"},{"city":"572","isp":"465"},{"city":"738","isp":"465"}]
	IspCities *string `json:"IspCities,omitempty" xml:"IspCities,omitempty"`
	// The extended options of the protocol that is used by the site monitoring task. The options vary based on the protocol.
	//
	// example:
	//
	// {"time_out":5000}
	OptionsJson *string `json:"OptionsJson,omitempty" xml:"OptionsJson,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the site monitoring task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2c8dbdf9-a3ab-46a1-85a4-f094965e****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The name of the site monitoring task. The name must be 4 to 100 characters in length, and can contain letters, digits, and underscores (_).
	//
	// example:
	//
	// HanZhou_ECS2
	TaskName *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s ModifySiteMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySiteMonitorRequest) GoString() string {
	return s.String()
}

func (s *ModifySiteMonitorRequest) SetAddress(v string) *ModifySiteMonitorRequest {
	s.Address = &v
	return s
}

func (s *ModifySiteMonitorRequest) SetAlertIds(v string) *ModifySiteMonitorRequest {
	s.AlertIds = &v
	return s
}

func (s *ModifySiteMonitorRequest) SetCustomSchedule(v string) *ModifySiteMonitorRequest {
	s.CustomSchedule = &v
	return s
}

func (s *ModifySiteMonitorRequest) SetInterval(v string) *ModifySiteMonitorRequest {
	s.Interval = &v
	return s
}

func (s *ModifySiteMonitorRequest) SetIntervalUnit(v string) *ModifySiteMonitorRequest {
	s.IntervalUnit = &v
	return s
}

func (s *ModifySiteMonitorRequest) SetIspCities(v string) *ModifySiteMonitorRequest {
	s.IspCities = &v
	return s
}

func (s *ModifySiteMonitorRequest) SetOptionsJson(v string) *ModifySiteMonitorRequest {
	s.OptionsJson = &v
	return s
}

func (s *ModifySiteMonitorRequest) SetRegionId(v string) *ModifySiteMonitorRequest {
	s.RegionId = &v
	return s
}

func (s *ModifySiteMonitorRequest) SetTaskId(v string) *ModifySiteMonitorRequest {
	s.TaskId = &v
	return s
}

func (s *ModifySiteMonitorRequest) SetTaskName(v string) *ModifySiteMonitorRequest {
	s.TaskName = &v
	return s
}

type ModifySiteMonitorResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of modifying the task.
	Data *ModifySiteMonitorResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 68192f5d-0d45-4b98-9724-892813f86c71
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifySiteMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySiteMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySiteMonitorResponseBody) SetCode(v string) *ModifySiteMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *ModifySiteMonitorResponseBody) SetData(v *ModifySiteMonitorResponseBodyData) *ModifySiteMonitorResponseBody {
	s.Data = v
	return s
}

func (s *ModifySiteMonitorResponseBody) SetMessage(v string) *ModifySiteMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *ModifySiteMonitorResponseBody) SetRequestId(v string) *ModifySiteMonitorResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifySiteMonitorResponseBody) SetSuccess(v string) *ModifySiteMonitorResponseBody {
	s.Success = &v
	return s
}

type ModifySiteMonitorResponseBodyData struct {
	// The number of site monitoring tasks.
	//
	// example:
	//
	// 1
	Count *int32 `json:"count,omitempty" xml:"count,omitempty"`
}

func (s ModifySiteMonitorResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ModifySiteMonitorResponseBodyData) GoString() string {
	return s.String()
}

func (s *ModifySiteMonitorResponseBodyData) SetCount(v int32) *ModifySiteMonitorResponseBodyData {
	s.Count = &v
	return s
}

type ModifySiteMonitorResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySiteMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySiteMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySiteMonitorResponse) GoString() string {
	return s.String()
}

func (s *ModifySiteMonitorResponse) SetHeaders(v map[string]*string) *ModifySiteMonitorResponse {
	s.Headers = v
	return s
}

func (s *ModifySiteMonitorResponse) SetStatusCode(v int32) *ModifySiteMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySiteMonitorResponse) SetBody(v *ModifySiteMonitorResponseBody) *ModifySiteMonitorResponse {
	s.Body = v
	return s
}

type OpenCmsServiceResponseBody struct {
	// The ID of the order.
	//
	// example:
	//
	// 211206750270***
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// E5A72B5B-4F44-438C-B68A-147FD5DC53A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s OpenCmsServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OpenCmsServiceResponseBody) GoString() string {
	return s.String()
}

func (s *OpenCmsServiceResponseBody) SetOrderId(v string) *OpenCmsServiceResponseBody {
	s.OrderId = &v
	return s
}

func (s *OpenCmsServiceResponseBody) SetRequestId(v string) *OpenCmsServiceResponseBody {
	s.RequestId = &v
	return s
}

type OpenCmsServiceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OpenCmsServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OpenCmsServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s OpenCmsServiceResponse) GoString() string {
	return s.String()
}

func (s *OpenCmsServiceResponse) SetHeaders(v map[string]*string) *OpenCmsServiceResponse {
	s.Headers = v
	return s
}

func (s *OpenCmsServiceResponse) SetStatusCode(v int32) *OpenCmsServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *OpenCmsServiceResponse) SetBody(v *OpenCmsServiceResponseBody) *OpenCmsServiceResponse {
	s.Body = v
	return s
}

type PutContactRequest struct {
	Channels *PutContactRequestChannels `json:"Channels,omitempty" xml:"Channels,omitempty" type:"Struct"`
	// The name of the alert contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// Alice
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The description of the alert contact.
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS_Instance
	Describe *string `json:"Describe,omitempty" xml:"Describe,omitempty"`
	// The language in which the alert information is displayed. Valid values:
	//
	// 	- zh-cn: simplified Chinese
	//
	// 	- en: English
	//
	// >  If you do not specify a value for this parameter, Cloud Monitor identifies the language of the alert information based on the region of your Alibaba Cloud account.
	//
	// example:
	//
	// zh-cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s PutContactRequest) String() string {
	return tea.Prettify(s)
}

func (s PutContactRequest) GoString() string {
	return s.String()
}

func (s *PutContactRequest) SetChannels(v *PutContactRequestChannels) *PutContactRequest {
	s.Channels = v
	return s
}

func (s *PutContactRequest) SetContactName(v string) *PutContactRequest {
	s.ContactName = &v
	return s
}

func (s *PutContactRequest) SetDescribe(v string) *PutContactRequest {
	s.Describe = &v
	return s
}

func (s *PutContactRequest) SetLang(v string) *PutContactRequest {
	s.Lang = &v
	return s
}

type PutContactRequestChannels struct {
	// The TradeManager ID of the alert contact.
	//
	// Specify at least one of the following alert notification targets: email address or webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// Jim
	AliIM *string `json:"AliIM,omitempty" xml:"AliIM,omitempty"`
	// The webhook URL of the DingTalk chatbot.
	//
	// Specify at least one of the following alert notification targets: email address or webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// https://oapi.dingtalk.com/robot/send?access_token=7d49515e8ebf21106a80a9cc4bb3d247771305d52fb15d6201234565****
	DingWebHook *string `json:"DingWebHook,omitempty" xml:"DingWebHook,omitempty"`
	// The email address of the alert contact. After you add or modify an email address, the recipient receives an email that contains an activation link. The system adds the recipient to the list of alert contacts only after the recipient activates the email address.
	//
	// Specify at least one of the following alert notification targets: email address or webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// test@aliyun.com
	Mail *string `json:"Mail,omitempty" xml:"Mail,omitempty"`
	// The phone number of the alert contact. After you add or modify a phone number, the recipient receives a text message that contains an activation link. The system adds the recipient to the list of alert contacts only after the recipient activates the phone number.
	//
	// Specify at least one of the following alert notification targets: email address or webhook URL of the DingTalk chatbot.
	//
	// example:
	//
	// 1333333****
	SMS *string `json:"SMS,omitempty" xml:"SMS,omitempty"`
}

func (s PutContactRequestChannels) String() string {
	return tea.Prettify(s)
}

func (s PutContactRequestChannels) GoString() string {
	return s.String()
}

func (s *PutContactRequestChannels) SetAliIM(v string) *PutContactRequestChannels {
	s.AliIM = &v
	return s
}

func (s *PutContactRequestChannels) SetDingWebHook(v string) *PutContactRequestChannels {
	s.DingWebHook = &v
	return s
}

func (s *PutContactRequestChannels) SetMail(v string) *PutContactRequestChannels {
	s.Mail = &v
	return s
}

func (s *PutContactRequestChannels) SetSMS(v string) *PutContactRequestChannels {
	s.SMS = &v
	return s
}

type PutContactResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 181C406E-9DE4-484C-9C61-37AE9A1A12EE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutContactResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutContactResponseBody) GoString() string {
	return s.String()
}

func (s *PutContactResponseBody) SetCode(v string) *PutContactResponseBody {
	s.Code = &v
	return s
}

func (s *PutContactResponseBody) SetMessage(v string) *PutContactResponseBody {
	s.Message = &v
	return s
}

func (s *PutContactResponseBody) SetRequestId(v string) *PutContactResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutContactResponseBody) SetSuccess(v bool) *PutContactResponseBody {
	s.Success = &v
	return s
}

type PutContactResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutContactResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutContactResponse) String() string {
	return tea.Prettify(s)
}

func (s PutContactResponse) GoString() string {
	return s.String()
}

func (s *PutContactResponse) SetHeaders(v map[string]*string) *PutContactResponse {
	s.Headers = v
	return s
}

func (s *PutContactResponse) SetStatusCode(v int32) *PutContactResponse {
	s.StatusCode = &v
	return s
}

func (s *PutContactResponse) SetBody(v *PutContactResponseBody) *PutContactResponse {
	s.Body = v
	return s
}

type PutContactGroupRequest struct {
	// The name of the alert contact group.
	//
	// For information about how to obtain the name of an alert contact group, see [DescribeContactGroupList](https://help.aliyun.com/document_detail/114922.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS_Group
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// example:
	//
	// Alice
	ContactNames []*string `json:"ContactNames,omitempty" xml:"ContactNames,omitempty" type:"Repeated"`
	// The description of the alert contact group.
	//
	// example:
	//
	// ECS_Alert_Group
	Describe *string `json:"Describe,omitempty" xml:"Describe,omitempty"`
	// Specifies whether to enable the weekly report subscription feature. Valid values:
	//
	// 	- true: The weekly report subscription feature is enabled.
	//
	// 	- false: The weekly report subscription feature is disabled.
	//
	// >  You can enable the weekly report subscription only for an Alibaba Cloud account that has at least five Elastic Compute Service (ECS) instances.
	//
	// example:
	//
	// true
	EnableSubscribed *bool `json:"EnableSubscribed,omitempty" xml:"EnableSubscribed,omitempty"`
}

func (s PutContactGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s PutContactGroupRequest) GoString() string {
	return s.String()
}

func (s *PutContactGroupRequest) SetContactGroupName(v string) *PutContactGroupRequest {
	s.ContactGroupName = &v
	return s
}

func (s *PutContactGroupRequest) SetContactNames(v []*string) *PutContactGroupRequest {
	s.ContactNames = v
	return s
}

func (s *PutContactGroupRequest) SetDescribe(v string) *PutContactGroupRequest {
	s.Describe = &v
	return s
}

func (s *PutContactGroupRequest) SetEnableSubscribed(v bool) *PutContactGroupRequest {
	s.EnableSubscribed = &v
	return s
}

type PutContactGroupResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// Illegal parameters.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// B4E30DB6-F069-5D0B-A589-2A89F7D62A57
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutContactGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutContactGroupResponseBody) GoString() string {
	return s.String()
}

func (s *PutContactGroupResponseBody) SetCode(v string) *PutContactGroupResponseBody {
	s.Code = &v
	return s
}

func (s *PutContactGroupResponseBody) SetMessage(v string) *PutContactGroupResponseBody {
	s.Message = &v
	return s
}

func (s *PutContactGroupResponseBody) SetRequestId(v string) *PutContactGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutContactGroupResponseBody) SetSuccess(v bool) *PutContactGroupResponseBody {
	s.Success = &v
	return s
}

type PutContactGroupResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutContactGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutContactGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s PutContactGroupResponse) GoString() string {
	return s.String()
}

func (s *PutContactGroupResponse) SetHeaders(v map[string]*string) *PutContactGroupResponse {
	s.Headers = v
	return s
}

func (s *PutContactGroupResponse) SetStatusCode(v int32) *PutContactGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *PutContactGroupResponse) SetBody(v *PutContactGroupResponseBody) *PutContactGroupResponse {
	s.Body = v
	return s
}

type PutCustomEventRequest struct {
	// The event details.
	//
	// This parameter is required.
	EventInfo []*PutCustomEventRequestEventInfo `json:"EventInfo,omitempty" xml:"EventInfo,omitempty" type:"Repeated"`
	RegionId  *string                           `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s PutCustomEventRequest) String() string {
	return tea.Prettify(s)
}

func (s PutCustomEventRequest) GoString() string {
	return s.String()
}

func (s *PutCustomEventRequest) SetEventInfo(v []*PutCustomEventRequestEventInfo) *PutCustomEventRequest {
	s.EventInfo = v
	return s
}

func (s *PutCustomEventRequest) SetRegionId(v string) *PutCustomEventRequest {
	s.RegionId = &v
	return s
}

type PutCustomEventRequestEventInfo struct {
	// The event content. Valid values of N: 1 to 50.
	//
	// This parameter is required.
	//
	// example:
	//
	// IOException
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The event name. Valid values of N: 1 to 50.
	//
	// This parameter is required.
	//
	// example:
	//
	// myEvent
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The ID of the application group. Valid values of N: 1 to 50.
	//
	// Default value: 0. This value indicates that the event to be reported does not belong to any application group.
	//
	// example:
	//
	// 123456
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The time when the event occurred.
	//
	// Format: `yyyyMMddTHHmmss.SSSZ`.
	//
	// Valid values of N: 1 to 50.
	//
	// >  You can also specify a UNIX timestamp. Example: 1552199984000. Unit: milliseconds.
	//
	// example:
	//
	// 20171013T170923.456+0800
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s PutCustomEventRequestEventInfo) String() string {
	return tea.Prettify(s)
}

func (s PutCustomEventRequestEventInfo) GoString() string {
	return s.String()
}

func (s *PutCustomEventRequestEventInfo) SetContent(v string) *PutCustomEventRequestEventInfo {
	s.Content = &v
	return s
}

func (s *PutCustomEventRequestEventInfo) SetEventName(v string) *PutCustomEventRequestEventInfo {
	s.EventName = &v
	return s
}

func (s *PutCustomEventRequestEventInfo) SetGroupId(v string) *PutCustomEventRequestEventInfo {
	s.GroupId = &v
	return s
}

func (s *PutCustomEventRequestEventInfo) SetTime(v string) *PutCustomEventRequestEventInfo {
	s.Time = &v
	return s
}

type PutCustomEventResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 131DD9C8-9A32-4428-AD2E-4E3013B6E3A7
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PutCustomEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutCustomEventResponseBody) GoString() string {
	return s.String()
}

func (s *PutCustomEventResponseBody) SetCode(v string) *PutCustomEventResponseBody {
	s.Code = &v
	return s
}

func (s *PutCustomEventResponseBody) SetMessage(v string) *PutCustomEventResponseBody {
	s.Message = &v
	return s
}

func (s *PutCustomEventResponseBody) SetRequestId(v string) *PutCustomEventResponseBody {
	s.RequestId = &v
	return s
}

type PutCustomEventResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutCustomEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutCustomEventResponse) String() string {
	return tea.Prettify(s)
}

func (s PutCustomEventResponse) GoString() string {
	return s.String()
}

func (s *PutCustomEventResponse) SetHeaders(v map[string]*string) *PutCustomEventResponse {
	s.Headers = v
	return s
}

func (s *PutCustomEventResponse) SetStatusCode(v int32) *PutCustomEventResponse {
	s.StatusCode = &v
	return s
}

func (s *PutCustomEventResponse) SetBody(v *PutCustomEventResponseBody) *PutCustomEventResponse {
	s.Body = v
	return s
}

type PutCustomEventRuleRequest struct {
	// The alert contact group that receives alert notifications. Separate multiple contact groups with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS_Group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The time period during which the alert rule is effective. Valid values: 00:00 to 23:59.
	//
	// example:
	//
	// 00:00-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// The subject of the alert notification email.
	EmailSubject *string `json:"EmailSubject,omitempty" xml:"EmailSubject,omitempty"`
	// The name of the custom event. For more information about how to obtain the event name, see [DescribeCustomEventAttribute](https://help.aliyun.com/document_detail/115262.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// HostDown
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The ID of the application group. For more information about how to obtain the group ID, see [DescribeCustomEventAttribute](https://help.aliyun.com/document_detail/115262.html).
	//
	// >  The value 0 indicates that the reported custom event does not belong to any application Group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7378****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The level of the alert. Valid values:
	//
	// 	- CRITICAL: critical issue
	//
	// 	- WARN: warning
	//
	// 	- INFO: information
	//
	// This parameter is required.
	//
	// example:
	//
	// CRITICAL
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The cycle that is used to aggregate monitoring data of the custom event. Unit: seconds. Set the value to an integral multiple of 60. Default value: 300.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The ID of the alert rule.
	//
	// >  You can specify an existing ID to modify the corresponding alert rule or specify a new ID to create an alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// CustomRuleId1
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// CustomeRule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The alert threshold.
	//
	// This parameter is required.
	//
	// example:
	//
	// 99
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.
	//
	// example:
	//
	// https://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s PutCustomEventRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s PutCustomEventRuleRequest) GoString() string {
	return s.String()
}

func (s *PutCustomEventRuleRequest) SetContactGroups(v string) *PutCustomEventRuleRequest {
	s.ContactGroups = &v
	return s
}

func (s *PutCustomEventRuleRequest) SetEffectiveInterval(v string) *PutCustomEventRuleRequest {
	s.EffectiveInterval = &v
	return s
}

func (s *PutCustomEventRuleRequest) SetEmailSubject(v string) *PutCustomEventRuleRequest {
	s.EmailSubject = &v
	return s
}

func (s *PutCustomEventRuleRequest) SetEventName(v string) *PutCustomEventRuleRequest {
	s.EventName = &v
	return s
}

func (s *PutCustomEventRuleRequest) SetGroupId(v string) *PutCustomEventRuleRequest {
	s.GroupId = &v
	return s
}

func (s *PutCustomEventRuleRequest) SetLevel(v string) *PutCustomEventRuleRequest {
	s.Level = &v
	return s
}

func (s *PutCustomEventRuleRequest) SetPeriod(v string) *PutCustomEventRuleRequest {
	s.Period = &v
	return s
}

func (s *PutCustomEventRuleRequest) SetRuleId(v string) *PutCustomEventRuleRequest {
	s.RuleId = &v
	return s
}

func (s *PutCustomEventRuleRequest) SetRuleName(v string) *PutCustomEventRuleRequest {
	s.RuleName = &v
	return s
}

func (s *PutCustomEventRuleRequest) SetThreshold(v string) *PutCustomEventRuleRequest {
	s.Threshold = &v
	return s
}

func (s *PutCustomEventRuleRequest) SetWebhook(v string) *PutCustomEventRuleRequest {
	s.Webhook = &v
	return s
}

type PutCustomEventRuleResponseBody struct {
	// The HTTP status code.
	//
	// >  The value 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The request has failed due to a temporary failure of the server.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// AD5DCD82-BD1C-405F-BAED-32302DE9F498
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutCustomEventRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutCustomEventRuleResponseBody) GoString() string {
	return s.String()
}

func (s *PutCustomEventRuleResponseBody) SetCode(v string) *PutCustomEventRuleResponseBody {
	s.Code = &v
	return s
}

func (s *PutCustomEventRuleResponseBody) SetMessage(v string) *PutCustomEventRuleResponseBody {
	s.Message = &v
	return s
}

func (s *PutCustomEventRuleResponseBody) SetRequestId(v string) *PutCustomEventRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutCustomEventRuleResponseBody) SetSuccess(v bool) *PutCustomEventRuleResponseBody {
	s.Success = &v
	return s
}

type PutCustomEventRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutCustomEventRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutCustomEventRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s PutCustomEventRuleResponse) GoString() string {
	return s.String()
}

func (s *PutCustomEventRuleResponse) SetHeaders(v map[string]*string) *PutCustomEventRuleResponse {
	s.Headers = v
	return s
}

func (s *PutCustomEventRuleResponse) SetStatusCode(v int32) *PutCustomEventRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *PutCustomEventRuleResponse) SetBody(v *PutCustomEventRuleResponseBody) *PutCustomEventRuleResponse {
	s.Body = v
	return s
}

type PutCustomMetricRequest struct {
	// This parameter is required.
	MetricList []*PutCustomMetricRequestMetricList `json:"MetricList,omitempty" xml:"MetricList,omitempty" type:"Repeated"`
	RegionId   *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s PutCustomMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s PutCustomMetricRequest) GoString() string {
	return s.String()
}

func (s *PutCustomMetricRequest) SetMetricList(v []*PutCustomMetricRequestMetricList) *PutCustomMetricRequest {
	s.MetricList = v
	return s
}

func (s *PutCustomMetricRequest) SetRegionId(v string) *PutCustomMetricRequest {
	s.RegionId = &v
	return s
}

type PutCustomMetricRequestMetricList struct {
	// The dimensions that specify the resources whose monitoring data you want to query. Valid values of N: 1 to 21.
	//
	// Set the value to a collection of key-value pairs. Format:`{"Key":"Value"}`.
	//
	// The key or value must be 1 to 64 bytes in length. Excessive characters are truncated.
	//
	// The key or value can contain letters, digits, periods (.), hyphens (-), underscores (_), forward slashes (/), and backslashes (\\\\).
	//
	// >  Dimensions must be formatted as a JSON string in a specified order.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"sampleName1":"value1","sampleName2":"value2"}
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The ID of the application group. Valid values of N: 1 to 21.
	//
	// >  If the metric does not belong to any application group, enter 0.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the metric. Valid values of N: 1 to 21. For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The aggregation period. Valid values of N: 1 to 21. Unit: seconds. Valid values: 60 and 300.
	//
	// >  If the MetricList.N.Type parameter is set to 1, the MetricList.N.Period parameter is required.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The timestamp when the metric data is generated. Valid values of N: 1 to 21. The timestamp can be in one of the following formats:
	//
	// 	- The UTC timestamp that is in the YYYY-MM-DDThh:mm:ssZ format. Example: 20171012T132456.888+0800.
	//
	// 	- The UNIX timestamp of the LONG type. Example: 1508136760000.
	//
	// example:
	//
	// 1508136760000
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
	// The type of the reported data. Valid values of N: 1 to 21. Valid values:
	//
	// 	- 0: reports raw data
	//
	// 	- 1: reports aggregate data
	//
	// >  We recommend that you report aggregate data in both the aggregation periods of 60s and 300s. Otherwise, you cannot query monitoring data in a time span that is more than seven days.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The collection of metric values. Valid values of N: 1 to 21.
	//
	// >  If the MetricList.N.Type parameter is set to 0, the keys in this parameter must be set to the specified value. CloudMonitor aggregates raw data in each aggregation period to generate multiple statistical values, such as the maximum value, the count, and the total value.
	//
	// This parameter is required.
	//
	// example:
	//
	// {"value":10.5}
	Values *string `json:"Values,omitempty" xml:"Values,omitempty"`
}

func (s PutCustomMetricRequestMetricList) String() string {
	return tea.Prettify(s)
}

func (s PutCustomMetricRequestMetricList) GoString() string {
	return s.String()
}

func (s *PutCustomMetricRequestMetricList) SetDimensions(v string) *PutCustomMetricRequestMetricList {
	s.Dimensions = &v
	return s
}

func (s *PutCustomMetricRequestMetricList) SetGroupId(v string) *PutCustomMetricRequestMetricList {
	s.GroupId = &v
	return s
}

func (s *PutCustomMetricRequestMetricList) SetMetricName(v string) *PutCustomMetricRequestMetricList {
	s.MetricName = &v
	return s
}

func (s *PutCustomMetricRequestMetricList) SetPeriod(v string) *PutCustomMetricRequestMetricList {
	s.Period = &v
	return s
}

func (s *PutCustomMetricRequestMetricList) SetTime(v string) *PutCustomMetricRequestMetricList {
	s.Time = &v
	return s
}

func (s *PutCustomMetricRequestMetricList) SetType(v string) *PutCustomMetricRequestMetricList {
	s.Type = &v
	return s
}

func (s *PutCustomMetricRequestMetricList) SetValues(v string) *PutCustomMetricRequestMetricList {
	s.Values = &v
	return s
}

type PutCustomMetricResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The request has failed due to a temporary failure of the server.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 05B36C2C-5F6E-48D5-8B41-CE36DD7EE8E0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PutCustomMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutCustomMetricResponseBody) GoString() string {
	return s.String()
}

func (s *PutCustomMetricResponseBody) SetCode(v string) *PutCustomMetricResponseBody {
	s.Code = &v
	return s
}

func (s *PutCustomMetricResponseBody) SetMessage(v string) *PutCustomMetricResponseBody {
	s.Message = &v
	return s
}

func (s *PutCustomMetricResponseBody) SetRequestId(v string) *PutCustomMetricResponseBody {
	s.RequestId = &v
	return s
}

type PutCustomMetricResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutCustomMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutCustomMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s PutCustomMetricResponse) GoString() string {
	return s.String()
}

func (s *PutCustomMetricResponse) SetHeaders(v map[string]*string) *PutCustomMetricResponse {
	s.Headers = v
	return s
}

func (s *PutCustomMetricResponse) SetStatusCode(v int32) *PutCustomMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *PutCustomMetricResponse) SetBody(v *PutCustomMetricResponseBody) *PutCustomMetricResponse {
	s.Body = v
	return s
}

type PutCustomMetricRuleRequest struct {
	// The comparison operator before the threshold. Valid values:
	//
	// 	- `>=`
	//
	// 	- `=`
	//
	// 	- `<=`
	//
	// 	- `>`
	//
	// 	- `<`
	//
	// 	- `!=`
	//
	// This parameter is required.
	//
	// example:
	//
	// >=
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The alert group that receives alert notifications. Separate multiple alert groups with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS_Group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The time period during which the alert rule is effective. Valid values: 00:00 to 23:59.
	//
	// example:
	//
	// 00:00-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// The subject of the alert notification email.
	EmailSubject *string `json:"EmailSubject,omitempty" xml:"EmailSubject,omitempty"`
	// The consecutive number of times for which the metric value is measured before an alert is triggered.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3
	EvaluationCount *int32 `json:"EvaluationCount,omitempty" xml:"EvaluationCount,omitempty"`
	// The ID of the application group to which the custom monitoring data belongs.
	//
	// >  The value 0 indicates that the reported custom monitoring data does not belong to an application group.
	//
	// example:
	//
	// 7378****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The level of the alert. Valid values:
	//
	// 	- CRITICAL
	//
	// 	- WARN
	//
	// 	- INFO
	//
	// This parameter is required.
	//
	// example:
	//
	// CRITICAL
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The name of the metric.
	//
	// >  For more information about how to obtain the metric name, see [DescribeCustomMetricList](https://help.aliyun.com/document_detail/115005.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The cycle that is used to aggregate custom monitoring data. Unit: seconds. Set the value to an integral multiple of 60. The original reporting cycle of custom monitoring data is used by default.
	//
	// example:
	//
	// 300
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The custom monitoring data to which the alert rule applies. The value includes the application group ID to which the custom monitoring data belongs and the dimension to which the metric belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{"groupId":7378****,"dimension":"instanceId=i-hp3543t5e4sudb3s****"}]
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// The ID of the alert rule.
	//
	// >  You can specify an existing ID to modify the corresponding alert rule or specify a new ID to create an alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// MyRuleId1
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// example:
	//
	// CpuUsage
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which notifications are not repeatedly sent for an alert. Unit: seconds. Default value: 86400. The default value indicates one day.
	//
	// >  Only one alert notification is sent during each mute period even if the metric value consecutively exceeds the alert threshold several times.
	//
	// example:
	//
	// 86400
	SilenceTime *int32 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The method that is used to calculate the metric values that trigger alerts.
	//
	// This parameter is required.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold of the metric value.
	//
	// This parameter is required.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.
	//
	// example:
	//
	// https://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s PutCustomMetricRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s PutCustomMetricRuleRequest) GoString() string {
	return s.String()
}

func (s *PutCustomMetricRuleRequest) SetComparisonOperator(v string) *PutCustomMetricRuleRequest {
	s.ComparisonOperator = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetContactGroups(v string) *PutCustomMetricRuleRequest {
	s.ContactGroups = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetEffectiveInterval(v string) *PutCustomMetricRuleRequest {
	s.EffectiveInterval = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetEmailSubject(v string) *PutCustomMetricRuleRequest {
	s.EmailSubject = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetEvaluationCount(v int32) *PutCustomMetricRuleRequest {
	s.EvaluationCount = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetGroupId(v string) *PutCustomMetricRuleRequest {
	s.GroupId = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetLevel(v string) *PutCustomMetricRuleRequest {
	s.Level = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetMetricName(v string) *PutCustomMetricRuleRequest {
	s.MetricName = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetPeriod(v string) *PutCustomMetricRuleRequest {
	s.Period = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetResources(v string) *PutCustomMetricRuleRequest {
	s.Resources = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetRuleId(v string) *PutCustomMetricRuleRequest {
	s.RuleId = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetRuleName(v string) *PutCustomMetricRuleRequest {
	s.RuleName = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetSilenceTime(v int32) *PutCustomMetricRuleRequest {
	s.SilenceTime = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetStatistics(v string) *PutCustomMetricRuleRequest {
	s.Statistics = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetThreshold(v string) *PutCustomMetricRuleRequest {
	s.Threshold = &v
	return s
}

func (s *PutCustomMetricRuleRequest) SetWebhook(v string) *PutCustomMetricRuleRequest {
	s.Webhook = &v
	return s
}

type PutCustomMetricRuleResponseBody struct {
	// The HTTP status code.
	//
	// >  The value 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message. If the call was successful, the return value is null. If the call failed, an error message is returned.
	//
	// example:
	//
	// ComparisonOperator is mandatory for this action.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 65D50468-ECEF-48F1-A6E1-D952E89D9432
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutCustomMetricRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutCustomMetricRuleResponseBody) GoString() string {
	return s.String()
}

func (s *PutCustomMetricRuleResponseBody) SetCode(v string) *PutCustomMetricRuleResponseBody {
	s.Code = &v
	return s
}

func (s *PutCustomMetricRuleResponseBody) SetMessage(v string) *PutCustomMetricRuleResponseBody {
	s.Message = &v
	return s
}

func (s *PutCustomMetricRuleResponseBody) SetRequestId(v string) *PutCustomMetricRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutCustomMetricRuleResponseBody) SetSuccess(v bool) *PutCustomMetricRuleResponseBody {
	s.Success = &v
	return s
}

type PutCustomMetricRuleResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutCustomMetricRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutCustomMetricRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s PutCustomMetricRuleResponse) GoString() string {
	return s.String()
}

func (s *PutCustomMetricRuleResponse) SetHeaders(v map[string]*string) *PutCustomMetricRuleResponse {
	s.Headers = v
	return s
}

func (s *PutCustomMetricRuleResponse) SetStatusCode(v int32) *PutCustomMetricRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *PutCustomMetricRuleResponse) SetBody(v *PutCustomMetricRuleResponseBody) *PutCustomMetricRuleResponse {
	s.Body = v
	return s
}

type PutEventRuleRequest struct {
	// The description of the event-triggered alert rule.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	EventPattern []*PutEventRuleRequestEventPattern `json:"EventPattern,omitempty" xml:"EventPattern,omitempty" type:"Repeated"`
	// The type of the event-triggered alert rule. Valid values:
	//
	// 	- SYSTEM: system event-triggered alert rule
	//
	// 	- CUSTOM: custom event-triggered alert rule
	//
	// example:
	//
	// SYSTEM
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The ID of the application group to which the event-triggered alert rule belongs.
	//
	// example:
	//
	// 7378****
	GroupId  *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the event-triggered alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// myRuleName
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which new alerts are not sent even if the trigger conditions are met. Unit: seconds.
	//
	// example:
	//
	// 86400
	SilenceTime *int64 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The status of the event-triggered alert rule. Valid values:
	//
	// 	- ENABLED: enabled
	//
	// 	- DISABLED: disabled
	//
	// example:
	//
	// ENABLED
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s PutEventRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleRequest) GoString() string {
	return s.String()
}

func (s *PutEventRuleRequest) SetDescription(v string) *PutEventRuleRequest {
	s.Description = &v
	return s
}

func (s *PutEventRuleRequest) SetEventPattern(v []*PutEventRuleRequestEventPattern) *PutEventRuleRequest {
	s.EventPattern = v
	return s
}

func (s *PutEventRuleRequest) SetEventType(v string) *PutEventRuleRequest {
	s.EventType = &v
	return s
}

func (s *PutEventRuleRequest) SetGroupId(v string) *PutEventRuleRequest {
	s.GroupId = &v
	return s
}

func (s *PutEventRuleRequest) SetRegionId(v string) *PutEventRuleRequest {
	s.RegionId = &v
	return s
}

func (s *PutEventRuleRequest) SetRuleName(v string) *PutEventRuleRequest {
	s.RuleName = &v
	return s
}

func (s *PutEventRuleRequest) SetSilenceTime(v int64) *PutEventRuleRequest {
	s.SilenceTime = &v
	return s
}

func (s *PutEventRuleRequest) SetState(v string) *PutEventRuleRequest {
	s.State = &v
	return s
}

type PutEventRuleRequestEventPattern struct {
	// The keyword that is used to filter events. If the content of an event contains the specified keyword, an alert is automatically triggered.
	//
	// example:
	//
	// Stopping
	CustomFilters *string `json:"CustomFilters,omitempty" xml:"CustomFilters,omitempty"`
	// example:
	//
	// Exception
	EventTypeList []*string `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty" type:"Repeated"`
	// example:
	//
	// CRITICAL
	LevelList []*string `json:"LevelList,omitempty" xml:"LevelList,omitempty" type:"Repeated"`
	// example:
	//
	// Agent_Status_Stopped
	NameList []*string `json:"NameList,omitempty" xml:"NameList,omitempty" type:"Repeated"`
	// The type of the cloud service. Valid values of N: 1 to 50.
	//
	// >  You can call the DescribeSystemEventMetaList operation to query the cloud services that support event-triggered alerts. For more information, see [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// The SQL condition that is used to filter events. If the content of an event meets the specified SQL condition, an alert is automatically triggered.
	//
	// >  The syntax of SQL event filtering is consistent with the query syntax of Log Service.
	//
	// example:
	//
	// 192.168.XX.XX and Executed
	SQLFilter *string `json:"SQLFilter,omitempty" xml:"SQLFilter,omitempty"`
	// example:
	//
	// Failed
	StatusList []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s PutEventRuleRequestEventPattern) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleRequestEventPattern) GoString() string {
	return s.String()
}

func (s *PutEventRuleRequestEventPattern) SetCustomFilters(v string) *PutEventRuleRequestEventPattern {
	s.CustomFilters = &v
	return s
}

func (s *PutEventRuleRequestEventPattern) SetEventTypeList(v []*string) *PutEventRuleRequestEventPattern {
	s.EventTypeList = v
	return s
}

func (s *PutEventRuleRequestEventPattern) SetLevelList(v []*string) *PutEventRuleRequestEventPattern {
	s.LevelList = v
	return s
}

func (s *PutEventRuleRequestEventPattern) SetNameList(v []*string) *PutEventRuleRequestEventPattern {
	s.NameList = v
	return s
}

func (s *PutEventRuleRequestEventPattern) SetProduct(v string) *PutEventRuleRequestEventPattern {
	s.Product = &v
	return s
}

func (s *PutEventRuleRequestEventPattern) SetSQLFilter(v string) *PutEventRuleRequestEventPattern {
	s.SQLFilter = &v
	return s
}

func (s *PutEventRuleRequestEventPattern) SetStatusList(v []*string) *PutEventRuleRequestEventPattern {
	s.StatusList = v
	return s
}

type PutEventRuleResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The number of event-triggered alert rules that were created or modified.
	//
	// example:
	//
	// 1
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 0B47C47B-E68A-4429-BB23-370E91889C7D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutEventRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleResponseBody) GoString() string {
	return s.String()
}

func (s *PutEventRuleResponseBody) SetCode(v string) *PutEventRuleResponseBody {
	s.Code = &v
	return s
}

func (s *PutEventRuleResponseBody) SetData(v string) *PutEventRuleResponseBody {
	s.Data = &v
	return s
}

func (s *PutEventRuleResponseBody) SetMessage(v string) *PutEventRuleResponseBody {
	s.Message = &v
	return s
}

func (s *PutEventRuleResponseBody) SetRequestId(v string) *PutEventRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutEventRuleResponseBody) SetSuccess(v bool) *PutEventRuleResponseBody {
	s.Success = &v
	return s
}

type PutEventRuleResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutEventRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutEventRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleResponse) GoString() string {
	return s.String()
}

func (s *PutEventRuleResponse) SetHeaders(v map[string]*string) *PutEventRuleResponse {
	s.Headers = v
	return s
}

func (s *PutEventRuleResponse) SetStatusCode(v int32) *PutEventRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *PutEventRuleResponse) SetBody(v *PutEventRuleResponseBody) *PutEventRuleResponse {
	s.Body = v
	return s
}

type PutEventRuleTargetsRequest struct {
	// The information about the alert contact groups that receive alert notifications.
	ContactParameters []*PutEventRuleTargetsRequestContactParameters `json:"ContactParameters,omitempty" xml:"ContactParameters,omitempty" type:"Repeated"`
	// The information about the recipients in Function Compute.
	FcParameters []*PutEventRuleTargetsRequestFcParameters `json:"FcParameters,omitempty" xml:"FcParameters,omitempty" type:"Repeated"`
	// The notifications of Simple Message Queue (formerly MNS) (SMQ).
	MnsParameters []*PutEventRuleTargetsRequestMnsParameters `json:"MnsParameters,omitempty" xml:"MnsParameters,omitempty" type:"Repeated"`
	// The parameters of API callback notification.
	OpenApiParameters []*PutEventRuleTargetsRequestOpenApiParameters `json:"OpenApiParameters,omitempty" xml:"OpenApiParameters,omitempty" type:"Repeated"`
	RegionId          *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the alert rule.
	//
	// This parameter is required.
	//
	// example:
	//
	// testEventRule
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The information about the recipients in Simple Log Service.
	SlsParameters []*PutEventRuleTargetsRequestSlsParameters `json:"SlsParameters,omitempty" xml:"SlsParameters,omitempty" type:"Repeated"`
	// The information about the callback URLs that are used to receive alert notifications.
	WebhookParameters []*PutEventRuleTargetsRequestWebhookParameters `json:"WebhookParameters,omitempty" xml:"WebhookParameters,omitempty" type:"Repeated"`
}

func (s PutEventRuleTargetsRequest) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsRequest) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsRequest) SetContactParameters(v []*PutEventRuleTargetsRequestContactParameters) *PutEventRuleTargetsRequest {
	s.ContactParameters = v
	return s
}

func (s *PutEventRuleTargetsRequest) SetFcParameters(v []*PutEventRuleTargetsRequestFcParameters) *PutEventRuleTargetsRequest {
	s.FcParameters = v
	return s
}

func (s *PutEventRuleTargetsRequest) SetMnsParameters(v []*PutEventRuleTargetsRequestMnsParameters) *PutEventRuleTargetsRequest {
	s.MnsParameters = v
	return s
}

func (s *PutEventRuleTargetsRequest) SetOpenApiParameters(v []*PutEventRuleTargetsRequestOpenApiParameters) *PutEventRuleTargetsRequest {
	s.OpenApiParameters = v
	return s
}

func (s *PutEventRuleTargetsRequest) SetRegionId(v string) *PutEventRuleTargetsRequest {
	s.RegionId = &v
	return s
}

func (s *PutEventRuleTargetsRequest) SetRuleName(v string) *PutEventRuleTargetsRequest {
	s.RuleName = &v
	return s
}

func (s *PutEventRuleTargetsRequest) SetSlsParameters(v []*PutEventRuleTargetsRequestSlsParameters) *PutEventRuleTargetsRequest {
	s.SlsParameters = v
	return s
}

func (s *PutEventRuleTargetsRequest) SetWebhookParameters(v []*PutEventRuleTargetsRequestWebhookParameters) *PutEventRuleTargetsRequest {
	s.WebhookParameters = v
	return s
}

type PutEventRuleTargetsRequestContactParameters struct {
	// The name of the alert contact group. Valid values of N: 1 to 5.
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The ID of the recipient that receives alert notifications. Valid values of N: 1 to 5.
	//
	// example:
	//
	// 2
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The alert notification methods. Valid values of N: 1 to 5. Valid values:
	//
	// 4: Alert notifications are sent by using DingTalk and emails.
	//
	// example:
	//
	// 3
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s PutEventRuleTargetsRequestContactParameters) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsRequestContactParameters) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsRequestContactParameters) SetContactGroupName(v string) *PutEventRuleTargetsRequestContactParameters {
	s.ContactGroupName = &v
	return s
}

func (s *PutEventRuleTargetsRequestContactParameters) SetId(v string) *PutEventRuleTargetsRequestContactParameters {
	s.Id = &v
	return s
}

func (s *PutEventRuleTargetsRequestContactParameters) SetLevel(v string) *PutEventRuleTargetsRequestContactParameters {
	s.Level = &v
	return s
}

type PutEventRuleTargetsRequestFcParameters struct {
	// The name of the function. Valid values of N: 1 to 5.
	//
	// example:
	//
	// fc-test
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The ID of the recipient that receives alert notifications. Valid values of N: 1 to 5.
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The region where Function Compute is deployed. Valid values of N: 1 to 5.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The name of the Function Compute service. Valid values of N: 1 to 5.
	//
	// example:
	//
	// fc-test
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s PutEventRuleTargetsRequestFcParameters) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsRequestFcParameters) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsRequestFcParameters) SetFunctionName(v string) *PutEventRuleTargetsRequestFcParameters {
	s.FunctionName = &v
	return s
}

func (s *PutEventRuleTargetsRequestFcParameters) SetId(v string) *PutEventRuleTargetsRequestFcParameters {
	s.Id = &v
	return s
}

func (s *PutEventRuleTargetsRequestFcParameters) SetRegion(v string) *PutEventRuleTargetsRequestFcParameters {
	s.Region = &v
	return s
}

func (s *PutEventRuleTargetsRequestFcParameters) SetServiceName(v string) *PutEventRuleTargetsRequestFcParameters {
	s.ServiceName = &v
	return s
}

type PutEventRuleTargetsRequestMnsParameters struct {
	// The ID of the recipient that receives alert notifications. Valid values of N: 1 to 5.
	//
	// example:
	//
	// 3
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the SMQ queue. Valid values of N: 1 to 5.
	//
	// example:
	//
	// queue1
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
	// The region for SMQ. Valid values of N: 1 to 5.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The SMQ topic.
	//
	// example:
	//
	// topic_sample
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s PutEventRuleTargetsRequestMnsParameters) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsRequestMnsParameters) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsRequestMnsParameters) SetId(v string) *PutEventRuleTargetsRequestMnsParameters {
	s.Id = &v
	return s
}

func (s *PutEventRuleTargetsRequestMnsParameters) SetQueue(v string) *PutEventRuleTargetsRequestMnsParameters {
	s.Queue = &v
	return s
}

func (s *PutEventRuleTargetsRequestMnsParameters) SetRegion(v string) *PutEventRuleTargetsRequestMnsParameters {
	s.Region = &v
	return s
}

func (s *PutEventRuleTargetsRequestMnsParameters) SetTopic(v string) *PutEventRuleTargetsRequestMnsParameters {
	s.Topic = &v
	return s
}

type PutEventRuleTargetsRequestOpenApiParameters struct {
	// The API name.
	//
	// example:
	//
	// PutLogs
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the resource. Valid values of N: 1 to 5. Format: `arn:acs:${Service}:${Region}:${Account}:${ResourceType}/${ResourceId}`. Fields:
	//
	// 	- Service: the code of a cloud service
	//
	// 	- Region: the region ID
	//
	// 	- Account: the ID of an Alibaba Cloud account
	//
	// 	- ResourceType: the resource type
	//
	// 	- ResourceId: the resource ID
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the recipient that receives alert notifications sent by an API callback.
	//
	// example:
	//
	// 3
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The parameters of the alert callback. Specify the parameters in the JSON format.
	//
	// example:
	//
	// {"customField1":"value1","customField2":"$.name"}
	JsonParams *string `json:"JsonParams,omitempty" xml:"JsonParams,omitempty"`
	// The ID of the cloud service to which the API operation belongs.
	//
	// example:
	//
	// log
	Product *string `json:"Product,omitempty" xml:"Product,omitempty"`
	// The region where the resource resides.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The name of the role.
	//
	// example:
	//
	// MyRole
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The version of the API.
	//
	// example:
	//
	// 2019-01-01
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s PutEventRuleTargetsRequestOpenApiParameters) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsRequestOpenApiParameters) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsRequestOpenApiParameters) SetAction(v string) *PutEventRuleTargetsRequestOpenApiParameters {
	s.Action = &v
	return s
}

func (s *PutEventRuleTargetsRequestOpenApiParameters) SetArn(v string) *PutEventRuleTargetsRequestOpenApiParameters {
	s.Arn = &v
	return s
}

func (s *PutEventRuleTargetsRequestOpenApiParameters) SetId(v string) *PutEventRuleTargetsRequestOpenApiParameters {
	s.Id = &v
	return s
}

func (s *PutEventRuleTargetsRequestOpenApiParameters) SetJsonParams(v string) *PutEventRuleTargetsRequestOpenApiParameters {
	s.JsonParams = &v
	return s
}

func (s *PutEventRuleTargetsRequestOpenApiParameters) SetProduct(v string) *PutEventRuleTargetsRequestOpenApiParameters {
	s.Product = &v
	return s
}

func (s *PutEventRuleTargetsRequestOpenApiParameters) SetRegion(v string) *PutEventRuleTargetsRequestOpenApiParameters {
	s.Region = &v
	return s
}

func (s *PutEventRuleTargetsRequestOpenApiParameters) SetRole(v string) *PutEventRuleTargetsRequestOpenApiParameters {
	s.Role = &v
	return s
}

func (s *PutEventRuleTargetsRequestOpenApiParameters) SetVersion(v string) *PutEventRuleTargetsRequestOpenApiParameters {
	s.Version = &v
	return s
}

type PutEventRuleTargetsRequestSlsParameters struct {
	// The ID of the recipient that receives alert notifications. Valid values of N: 1 to 5.
	//
	// example:
	//
	// 5
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the Simple Log Service Logstore. Valid values of N: 1 to 5.
	//
	// example:
	//
	// testlogstore
	LogStore *string `json:"LogStore,omitempty" xml:"LogStore,omitempty"`
	// The name of the Simple Log Service project. Valid values of N: 1 to 5.
	//
	// example:
	//
	// testproject
	Project *string `json:"Project,omitempty" xml:"Project,omitempty"`
	// The region where Simple Log Service is deployed. Valid values of N: 1 to 5.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s PutEventRuleTargetsRequestSlsParameters) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsRequestSlsParameters) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsRequestSlsParameters) SetId(v string) *PutEventRuleTargetsRequestSlsParameters {
	s.Id = &v
	return s
}

func (s *PutEventRuleTargetsRequestSlsParameters) SetLogStore(v string) *PutEventRuleTargetsRequestSlsParameters {
	s.LogStore = &v
	return s
}

func (s *PutEventRuleTargetsRequestSlsParameters) SetProject(v string) *PutEventRuleTargetsRequestSlsParameters {
	s.Project = &v
	return s
}

func (s *PutEventRuleTargetsRequestSlsParameters) SetRegion(v string) *PutEventRuleTargetsRequestSlsParameters {
	s.Region = &v
	return s
}

type PutEventRuleTargetsRequestWebhookParameters struct {
	// The ID of the recipient that receives alert notifications. Valid values of N: 1 to 5.
	//
	// example:
	//
	// 4
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The HTTP request method. Valid values of N: 1 to 5.
	//
	// Valid values: GET and POST.
	//
	// example:
	//
	// GET
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// The name of the protocol. Valid values of N: 1 to 5. Valid values:
	//
	// 	- http
	//
	// 	- telnet
	//
	// 	- ping
	//
	// example:
	//
	// http
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The callback URL. Valid values of N: 1 to 5.
	//
	// example:
	//
	// http://www.aliyun.com
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s PutEventRuleTargetsRequestWebhookParameters) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsRequestWebhookParameters) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsRequestWebhookParameters) SetId(v string) *PutEventRuleTargetsRequestWebhookParameters {
	s.Id = &v
	return s
}

func (s *PutEventRuleTargetsRequestWebhookParameters) SetMethod(v string) *PutEventRuleTargetsRequestWebhookParameters {
	s.Method = &v
	return s
}

func (s *PutEventRuleTargetsRequestWebhookParameters) SetProtocol(v string) *PutEventRuleTargetsRequestWebhookParameters {
	s.Protocol = &v
	return s
}

func (s *PutEventRuleTargetsRequestWebhookParameters) SetUrl(v string) *PutEventRuleTargetsRequestWebhookParameters {
	s.Url = &v
	return s
}

type PutEventRuleTargetsResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// This parameter is returned if the specified alert contact groups in the request failed to be created or modified.
	FailedContactParameters *PutEventRuleTargetsResponseBodyFailedContactParameters `json:"FailedContactParameters,omitempty" xml:"FailedContactParameters,omitempty" type:"Struct"`
	// This parameter is returned if the specified functions in the request failed to be created or modified in Function Compute.
	FailedFcParameters *PutEventRuleTargetsResponseBodyFailedFcParameters `json:"FailedFcParameters,omitempty" xml:"FailedFcParameters,omitempty" type:"Struct"`
	// This parameter is returned if the specified queues in the request failed to be created or modified in SMQ.
	FailedMnsParameters *PutEventRuleTargetsResponseBodyFailedMnsParameters `json:"FailedMnsParameters,omitempty" xml:"FailedMnsParameters,omitempty" type:"Struct"`
	// The number of resources that failed to be created or modified.
	//
	// example:
	//
	// 2
	FailedParameterCount *string `json:"FailedParameterCount,omitempty" xml:"FailedParameterCount,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 409C64DA-CF14-45DF-B463-471C790DD15A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutEventRuleTargetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsResponseBody) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsResponseBody) SetCode(v string) *PutEventRuleTargetsResponseBody {
	s.Code = &v
	return s
}

func (s *PutEventRuleTargetsResponseBody) SetFailedContactParameters(v *PutEventRuleTargetsResponseBodyFailedContactParameters) *PutEventRuleTargetsResponseBody {
	s.FailedContactParameters = v
	return s
}

func (s *PutEventRuleTargetsResponseBody) SetFailedFcParameters(v *PutEventRuleTargetsResponseBodyFailedFcParameters) *PutEventRuleTargetsResponseBody {
	s.FailedFcParameters = v
	return s
}

func (s *PutEventRuleTargetsResponseBody) SetFailedMnsParameters(v *PutEventRuleTargetsResponseBodyFailedMnsParameters) *PutEventRuleTargetsResponseBody {
	s.FailedMnsParameters = v
	return s
}

func (s *PutEventRuleTargetsResponseBody) SetFailedParameterCount(v string) *PutEventRuleTargetsResponseBody {
	s.FailedParameterCount = &v
	return s
}

func (s *PutEventRuleTargetsResponseBody) SetMessage(v string) *PutEventRuleTargetsResponseBody {
	s.Message = &v
	return s
}

func (s *PutEventRuleTargetsResponseBody) SetRequestId(v string) *PutEventRuleTargetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutEventRuleTargetsResponseBody) SetSuccess(v bool) *PutEventRuleTargetsResponseBody {
	s.Success = &v
	return s
}

type PutEventRuleTargetsResponseBodyFailedContactParameters struct {
	ContactParameter []*PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter `json:"ContactParameter,omitempty" xml:"ContactParameter,omitempty" type:"Repeated"`
}

func (s PutEventRuleTargetsResponseBodyFailedContactParameters) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsResponseBodyFailedContactParameters) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsResponseBodyFailedContactParameters) SetContactParameter(v []*PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter) *PutEventRuleTargetsResponseBodyFailedContactParameters {
	s.ContactParameter = v
	return s
}

type PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter struct {
	// The name of the alert contact group.
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The ID of the recipient.
	//
	// example:
	//
	// 2
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The alert notification methods. Valid values:
	//
	// 4: Alert notifications are sent by using DingTalk and emails.
	//
	// example:
	//
	// 3
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter) SetContactGroupName(v string) *PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter {
	s.ContactGroupName = &v
	return s
}

func (s *PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter) SetId(v int32) *PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter {
	s.Id = &v
	return s
}

func (s *PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter) SetLevel(v string) *PutEventRuleTargetsResponseBodyFailedContactParametersContactParameter {
	s.Level = &v
	return s
}

type PutEventRuleTargetsResponseBodyFailedFcParameters struct {
	FcParameter []*PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter `json:"FcParameter,omitempty" xml:"FcParameter,omitempty" type:"Repeated"`
}

func (s PutEventRuleTargetsResponseBodyFailedFcParameters) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsResponseBodyFailedFcParameters) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsResponseBodyFailedFcParameters) SetFcParameter(v []*PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter) *PutEventRuleTargetsResponseBodyFailedFcParameters {
	s.FcParameter = v
	return s
}

type PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter struct {
	// The name of the function.
	//
	// example:
	//
	// functionTest1
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// The ID of the recipient.
	//
	// example:
	//
	// 1
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The name of the Function Compute service.
	//
	// example:
	//
	// serviceTest1
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter) SetFunctionName(v string) *PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter {
	s.FunctionName = &v
	return s
}

func (s *PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter) SetId(v int32) *PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter {
	s.Id = &v
	return s
}

func (s *PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter) SetRegion(v string) *PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter {
	s.Region = &v
	return s
}

func (s *PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter) SetServiceName(v string) *PutEventRuleTargetsResponseBodyFailedFcParametersFcParameter {
	s.ServiceName = &v
	return s
}

type PutEventRuleTargetsResponseBodyFailedMnsParameters struct {
	MnsParameter []*PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter `json:"MnsParameter,omitempty" xml:"MnsParameter,omitempty" type:"Repeated"`
}

func (s PutEventRuleTargetsResponseBodyFailedMnsParameters) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsResponseBodyFailedMnsParameters) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsResponseBodyFailedMnsParameters) SetMnsParameter(v []*PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter) *PutEventRuleTargetsResponseBodyFailedMnsParameters {
	s.MnsParameter = v
	return s
}

type PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter struct {
	// The ID of the recipient.
	//
	// example:
	//
	// 2
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The name of the MNS queue.
	//
	// example:
	//
	// testQueue
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter) SetId(v int32) *PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter {
	s.Id = &v
	return s
}

func (s *PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter) SetQueue(v string) *PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter {
	s.Queue = &v
	return s
}

func (s *PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter) SetRegion(v string) *PutEventRuleTargetsResponseBodyFailedMnsParametersMnsParameter {
	s.Region = &v
	return s
}

type PutEventRuleTargetsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutEventRuleTargetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutEventRuleTargetsResponse) String() string {
	return tea.Prettify(s)
}

func (s PutEventRuleTargetsResponse) GoString() string {
	return s.String()
}

func (s *PutEventRuleTargetsResponse) SetHeaders(v map[string]*string) *PutEventRuleTargetsResponse {
	s.Headers = v
	return s
}

func (s *PutEventRuleTargetsResponse) SetStatusCode(v int32) *PutEventRuleTargetsResponse {
	s.StatusCode = &v
	return s
}

func (s *PutEventRuleTargetsResponse) SetBody(v *PutEventRuleTargetsResponseBody) *PutEventRuleTargetsResponse {
	s.Body = v
	return s
}

type PutExporterOutputRequest struct {
	// The configuration set for exporting monitoring data. It is a JSON object string. The string must include the following fields:
	//
	// 	- endpoint: the endpoint of Log Service.
	//
	// 	- project: the Log Service project to which monitoring data is exported.
	//
	// 	- logstore: the Log Service Logstore to which the monitoring data is exported.
	//
	// 	- ak: the AccessKey ID.
	//
	// 	- as: the AccessKey secret.
	//
	// This parameter is required.
	//
	// example:
	//
	// { "endpoint": "http://cn-qingdao-share.log.aliyuncs.com", "project": "exporter", "logstore": "exporter","ak": "LTAIp*******", "userId": "17754********", "as": "TxHwuJ8yAb3AU******"}
	ConfigJson *string `json:"ConfigJson,omitempty" xml:"ConfigJson,omitempty"`
	// The description of the configuration set.
	//
	// example:
	//
	// Export CPU metrics
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// The name of the configuration set.
	//
	// This parameter is required.
	//
	// example:
	//
	// exporterConfig
	DestName *string `json:"DestName,omitempty" xml:"DestName,omitempty"`
	// The service to which the monitoring data is exported.
	//
	// example:
	//
	// sls
	DestType *string `json:"DestType,omitempty" xml:"DestType,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s PutExporterOutputRequest) String() string {
	return tea.Prettify(s)
}

func (s PutExporterOutputRequest) GoString() string {
	return s.String()
}

func (s *PutExporterOutputRequest) SetConfigJson(v string) *PutExporterOutputRequest {
	s.ConfigJson = &v
	return s
}

func (s *PutExporterOutputRequest) SetDesc(v string) *PutExporterOutputRequest {
	s.Desc = &v
	return s
}

func (s *PutExporterOutputRequest) SetDestName(v string) *PutExporterOutputRequest {
	s.DestName = &v
	return s
}

func (s *PutExporterOutputRequest) SetDestType(v string) *PutExporterOutputRequest {
	s.DestType = &v
	return s
}

func (s *PutExporterOutputRequest) SetRegionId(v string) *PutExporterOutputRequest {
	s.RegionId = &v
	return s
}

type PutExporterOutputResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6A5F022D-AC7C-460E-94AE-B9E75083D027
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. true: The request was successful. false: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutExporterOutputResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutExporterOutputResponseBody) GoString() string {
	return s.String()
}

func (s *PutExporterOutputResponseBody) SetCode(v string) *PutExporterOutputResponseBody {
	s.Code = &v
	return s
}

func (s *PutExporterOutputResponseBody) SetMessage(v string) *PutExporterOutputResponseBody {
	s.Message = &v
	return s
}

func (s *PutExporterOutputResponseBody) SetRequestId(v string) *PutExporterOutputResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutExporterOutputResponseBody) SetSuccess(v bool) *PutExporterOutputResponseBody {
	s.Success = &v
	return s
}

type PutExporterOutputResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutExporterOutputResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutExporterOutputResponse) String() string {
	return tea.Prettify(s)
}

func (s PutExporterOutputResponse) GoString() string {
	return s.String()
}

func (s *PutExporterOutputResponse) SetHeaders(v map[string]*string) *PutExporterOutputResponse {
	s.Headers = v
	return s
}

func (s *PutExporterOutputResponse) SetStatusCode(v int32) *PutExporterOutputResponse {
	s.StatusCode = &v
	return s
}

func (s *PutExporterOutputResponse) SetBody(v *PutExporterOutputResponseBody) *PutExporterOutputResponse {
	s.Body = v
	return s
}

type PutExporterRuleRequest struct {
	// The description of the data export rule.
	//
	// example:
	//
	// Export CPU metrics
	Describe *string `json:"Describe,omitempty" xml:"Describe,omitempty"`
	// The destination to which the data is exported. Valid values of N: 1 to 20.
	//
	// This parameter is required.
	//
	// example:
	//
	// distName1
	DstNames []*string `json:"DstNames,omitempty" xml:"DstNames,omitempty" type:"Repeated"`
	// The name of the metric.
	//
	// >
	//
	// For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// > For more information, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the rule.
	//
	// > If the specified rule exists, the existing rule is modified. Otherwise, a rule is created.
	//
	// example:
	//
	// MyRuleName
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The time window of the exported data. Unit: seconds.
	//
	// >
	//
	// 	- Separate multiple time windows with commas (,).
	//
	// 	- Data in a time window of less than 60 seconds cannot be exported.
	//
	// example:
	//
	// 60,300
	TargetWindows *string `json:"TargetWindows,omitempty" xml:"TargetWindows,omitempty"`
}

func (s PutExporterRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s PutExporterRuleRequest) GoString() string {
	return s.String()
}

func (s *PutExporterRuleRequest) SetDescribe(v string) *PutExporterRuleRequest {
	s.Describe = &v
	return s
}

func (s *PutExporterRuleRequest) SetDstNames(v []*string) *PutExporterRuleRequest {
	s.DstNames = v
	return s
}

func (s *PutExporterRuleRequest) SetMetricName(v string) *PutExporterRuleRequest {
	s.MetricName = &v
	return s
}

func (s *PutExporterRuleRequest) SetNamespace(v string) *PutExporterRuleRequest {
	s.Namespace = &v
	return s
}

func (s *PutExporterRuleRequest) SetRegionId(v string) *PutExporterRuleRequest {
	s.RegionId = &v
	return s
}

func (s *PutExporterRuleRequest) SetRuleName(v string) *PutExporterRuleRequest {
	s.RuleName = &v
	return s
}

func (s *PutExporterRuleRequest) SetTargetWindows(v string) *PutExporterRuleRequest {
	s.TargetWindows = &v
	return s
}

type PutExporterRuleResponseBody struct {
	// The HTTP status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message. If the request was successful, "successful" is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 461CF2CD-2FC3-4B26-8645-7BD27E7D0F1D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutExporterRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutExporterRuleResponseBody) GoString() string {
	return s.String()
}

func (s *PutExporterRuleResponseBody) SetCode(v string) *PutExporterRuleResponseBody {
	s.Code = &v
	return s
}

func (s *PutExporterRuleResponseBody) SetMessage(v string) *PutExporterRuleResponseBody {
	s.Message = &v
	return s
}

func (s *PutExporterRuleResponseBody) SetRequestId(v string) *PutExporterRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutExporterRuleResponseBody) SetSuccess(v bool) *PutExporterRuleResponseBody {
	s.Success = &v
	return s
}

type PutExporterRuleResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutExporterRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutExporterRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s PutExporterRuleResponse) GoString() string {
	return s.String()
}

func (s *PutExporterRuleResponse) SetHeaders(v map[string]*string) *PutExporterRuleResponse {
	s.Headers = v
	return s
}

func (s *PutExporterRuleResponse) SetStatusCode(v int32) *PutExporterRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *PutExporterRuleResponse) SetBody(v *PutExporterRuleResponseBody) *PutExporterRuleResponse {
	s.Body = v
	return s
}

type PutGroupMetricRuleRequest struct {
	Escalations *PutGroupMetricRuleRequestEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Struct"`
	// The abbreviation of the cloud service name.
	//
	// For more information about how to obtain the abbreviation of a cloud service name, see `metricCategory` in the response parameter `Labels` of the [DescribeProjectMeta](https://help.aliyun.com/document_detail/114916.html) operation.
	//
	// example:
	//
	// ECS
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The alert contact group.
	//
	// example:
	//
	// ECS_Group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The first-level dimension of the alert rule in the application group.
	//
	// Set the value to a set of key-value pairs, for example, `userId:120886317861****` or `instanceId:i-m5e1qg6uo38rztr4****`.
	//
	// example:
	//
	// [{"instanceId":"i-m5e1qg6uo38rztr4****"}]
	Dimensions *string `json:"Dimensions,omitempty" xml:"Dimensions,omitempty"`
	// The time period during which the alert rule is effective.
	//
	// example:
	//
	// 05:31-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// The subject of the alert notification email.
	EmailSubject *string `json:"EmailSubject,omitempty" xml:"EmailSubject,omitempty"`
	// The second-level or third-level dimension of the alert rule in the application group.
	//
	// Set the value to a set of key-value pairs, for example, `port:80` or `/dev/xvda:d-m5e6yphgzn3aprwu****`.
	//
	// If the first-level dimension of the alert rule is `instanceId:i-m5e1qg6uo38rztr4****`, its second-level dimension is the `/dev/xvda:d-m5e6yphgzn3aprwu****` disk in the instance.
	//
	// example:
	//
	// {"/dev/xvda":"d-m5e6yphgzn3aprwu****"}
	ExtraDimensionJson *string `json:"ExtraDimensionJson,omitempty" xml:"ExtraDimensionJson,omitempty"`
	// The application group ID.
	//
	// For more information about how to obtain the ID of an application group, see [DescribeMonitorGroups](https://help.aliyun.com/document_detail/115032.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 17285****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The interval at which CloudMonitor checks whether the alert rule is triggered. Unit: seconds.
	//
	// >  We recommend that you set the interval to the data aggregation period. If the interval is shorter than the data aggregation period, alerts cannot be triggered due to insufficient data.
	//
	// example:
	//
	// 60
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The tags of the alert rule.
	//
	// The specified tag is contained in alert notifications.
	Labels []*PutGroupMetricRuleRequestLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The metric name.
	//
	// For more information about how to obtain the name of a metric, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// For more information about how to obtain the namespace of a cloud service, see [DescribeMetricMetaList](https://help.aliyun.com/document_detail/98846.html) or [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The method that is used to handle alerts when no monitoring data is found. Valid values:
	//
	// 	- KEEP_LAST_STATE (default): No operation is performed.
	//
	// 	- INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
	//
	// 	- OK: The status is considered normal.
	//
	// example:
	//
	// KEEP_LAST_STATE
	NoDataPolicy *string `json:"NoDataPolicy,omitempty" xml:"NoDataPolicy,omitempty"`
	// The time period during which the alert rule is ineffective.
	//
	// example:
	//
	// 00:00-05:30
	NoEffectiveInterval *string `json:"NoEffectiveInterval,omitempty" xml:"NoEffectiveInterval,omitempty"`
	Options             *string `json:"Options,omitempty" xml:"Options,omitempty"`
	// The aggregation period of the metric data.
	//
	// Set the `Period` parameter to an integral multiple of 60. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The ID of the alert rule.
	//
	// 	- When you create an alert rule for the application group, enter the ID of the alert rule.
	//
	// 	- When you modify a specified alert rule in the application group, you must obtain the ID of the alert rule. For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// 	- When you create an alert rule for the application group, enter the name of the alert rule.
	//
	// 	- When you modify a specified alert rule in the application group, you must obtain the name of the alert rule. For more information about how to obtain the name of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// Rule_01
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which new alerts are not sent even if the trigger conditions are met.
	//
	// Unit: seconds. Default value: 86400.
	//
	// example:
	//
	// 86400
	SilenceTime *int32 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The callback URL.
	//
	// The callback URL must be accessible over the Internet. CloudMonitor sends a POST request to push an alert notification to the callback URL that you specify. Only HTTP requests are supported.
	//
	// example:
	//
	// https://www.aliyun.com
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s PutGroupMetricRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s PutGroupMetricRuleRequest) GoString() string {
	return s.String()
}

func (s *PutGroupMetricRuleRequest) SetEscalations(v *PutGroupMetricRuleRequestEscalations) *PutGroupMetricRuleRequest {
	s.Escalations = v
	return s
}

func (s *PutGroupMetricRuleRequest) SetCategory(v string) *PutGroupMetricRuleRequest {
	s.Category = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetContactGroups(v string) *PutGroupMetricRuleRequest {
	s.ContactGroups = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetDimensions(v string) *PutGroupMetricRuleRequest {
	s.Dimensions = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetEffectiveInterval(v string) *PutGroupMetricRuleRequest {
	s.EffectiveInterval = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetEmailSubject(v string) *PutGroupMetricRuleRequest {
	s.EmailSubject = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetExtraDimensionJson(v string) *PutGroupMetricRuleRequest {
	s.ExtraDimensionJson = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetGroupId(v string) *PutGroupMetricRuleRequest {
	s.GroupId = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetInterval(v string) *PutGroupMetricRuleRequest {
	s.Interval = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetLabels(v []*PutGroupMetricRuleRequestLabels) *PutGroupMetricRuleRequest {
	s.Labels = v
	return s
}

func (s *PutGroupMetricRuleRequest) SetMetricName(v string) *PutGroupMetricRuleRequest {
	s.MetricName = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetNamespace(v string) *PutGroupMetricRuleRequest {
	s.Namespace = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetNoDataPolicy(v string) *PutGroupMetricRuleRequest {
	s.NoDataPolicy = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetNoEffectiveInterval(v string) *PutGroupMetricRuleRequest {
	s.NoEffectiveInterval = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetOptions(v string) *PutGroupMetricRuleRequest {
	s.Options = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetPeriod(v string) *PutGroupMetricRuleRequest {
	s.Period = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetRuleId(v string) *PutGroupMetricRuleRequest {
	s.RuleId = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetRuleName(v string) *PutGroupMetricRuleRequest {
	s.RuleName = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetSilenceTime(v int32) *PutGroupMetricRuleRequest {
	s.SilenceTime = &v
	return s
}

func (s *PutGroupMetricRuleRequest) SetWebhook(v string) *PutGroupMetricRuleRequest {
	s.Webhook = &v
	return s
}

type PutGroupMetricRuleRequestEscalations struct {
	Critical *PutGroupMetricRuleRequestEscalationsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	Info     *PutGroupMetricRuleRequestEscalationsInfo     `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	Warn     *PutGroupMetricRuleRequestEscalationsWarn     `json:"Warn,omitempty" xml:"Warn,omitempty" type:"Struct"`
}

func (s PutGroupMetricRuleRequestEscalations) String() string {
	return tea.Prettify(s)
}

func (s PutGroupMetricRuleRequestEscalations) GoString() string {
	return s.String()
}

func (s *PutGroupMetricRuleRequestEscalations) SetCritical(v *PutGroupMetricRuleRequestEscalationsCritical) *PutGroupMetricRuleRequestEscalations {
	s.Critical = v
	return s
}

func (s *PutGroupMetricRuleRequestEscalations) SetInfo(v *PutGroupMetricRuleRequestEscalationsInfo) *PutGroupMetricRuleRequestEscalations {
	s.Info = v
	return s
}

func (s *PutGroupMetricRuleRequestEscalations) SetWarn(v *PutGroupMetricRuleRequestEscalationsWarn) *PutGroupMetricRuleRequestEscalations {
	s.Warn = v
	return s
}

type PutGroupMetricRuleRequestEscalationsCritical struct {
	// The operator that is used to compare the metric value with the threshold for Critical-level alerts. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Critical-level alerts. Separate multiple statistical methods with commas (,).
	//
	// The value of this parameter is determined by the `Statistics` column corresponding to the `MetricName` parameter of the specified cloud service. The value of this parameter can be Maximum, Minimum, or Average. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Critical-level alerts.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Critical-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutGroupMetricRuleRequestEscalationsCritical) String() string {
	return tea.Prettify(s)
}

func (s PutGroupMetricRuleRequestEscalationsCritical) GoString() string {
	return s.String()
}

func (s *PutGroupMetricRuleRequestEscalationsCritical) SetComparisonOperator(v string) *PutGroupMetricRuleRequestEscalationsCritical {
	s.ComparisonOperator = &v
	return s
}

func (s *PutGroupMetricRuleRequestEscalationsCritical) SetStatistics(v string) *PutGroupMetricRuleRequestEscalationsCritical {
	s.Statistics = &v
	return s
}

func (s *PutGroupMetricRuleRequestEscalationsCritical) SetThreshold(v string) *PutGroupMetricRuleRequestEscalationsCritical {
	s.Threshold = &v
	return s
}

func (s *PutGroupMetricRuleRequestEscalationsCritical) SetTimes(v int32) *PutGroupMetricRuleRequestEscalationsCritical {
	s.Times = &v
	return s
}

type PutGroupMetricRuleRequestEscalationsInfo struct {
	// The operator that is used to compare the metric value with the threshold for Info-level alerts. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Info-level alerts. Separate multiple statistical methods with commas (,).
	//
	// The value of this parameter is determined by the `Statistics` column corresponding to the `MetricName` parameter of the specified cloud service. The value of this parameter can be Maximum, Minimum, or Average. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Info-level alerts.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an Info-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutGroupMetricRuleRequestEscalationsInfo) String() string {
	return tea.Prettify(s)
}

func (s PutGroupMetricRuleRequestEscalationsInfo) GoString() string {
	return s.String()
}

func (s *PutGroupMetricRuleRequestEscalationsInfo) SetComparisonOperator(v string) *PutGroupMetricRuleRequestEscalationsInfo {
	s.ComparisonOperator = &v
	return s
}

func (s *PutGroupMetricRuleRequestEscalationsInfo) SetStatistics(v string) *PutGroupMetricRuleRequestEscalationsInfo {
	s.Statistics = &v
	return s
}

func (s *PutGroupMetricRuleRequestEscalationsInfo) SetThreshold(v string) *PutGroupMetricRuleRequestEscalationsInfo {
	s.Threshold = &v
	return s
}

func (s *PutGroupMetricRuleRequestEscalationsInfo) SetTimes(v int32) *PutGroupMetricRuleRequestEscalationsInfo {
	s.Times = &v
	return s
}

type PutGroupMetricRuleRequestEscalationsWarn struct {
	// The operator that is used to compare the metric value with the threshold for Warn-level alerts. Valid values:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Warn-level alerts. Separate multiple statistical methods with commas (,).
	//
	// The value of this parameter is determined by the `Statistics` column corresponding to the `MetricName` parameter of the specified cloud service. The value of this parameter can be Maximum, Minimum, or Average. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Warn-level alerts.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Warn-level alert is triggered.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutGroupMetricRuleRequestEscalationsWarn) String() string {
	return tea.Prettify(s)
}

func (s PutGroupMetricRuleRequestEscalationsWarn) GoString() string {
	return s.String()
}

func (s *PutGroupMetricRuleRequestEscalationsWarn) SetComparisonOperator(v string) *PutGroupMetricRuleRequestEscalationsWarn {
	s.ComparisonOperator = &v
	return s
}

func (s *PutGroupMetricRuleRequestEscalationsWarn) SetStatistics(v string) *PutGroupMetricRuleRequestEscalationsWarn {
	s.Statistics = &v
	return s
}

func (s *PutGroupMetricRuleRequestEscalationsWarn) SetThreshold(v string) *PutGroupMetricRuleRequestEscalationsWarn {
	s.Threshold = &v
	return s
}

func (s *PutGroupMetricRuleRequestEscalationsWarn) SetTimes(v int32) *PutGroupMetricRuleRequestEscalationsWarn {
	s.Times = &v
	return s
}

type PutGroupMetricRuleRequestLabels struct {
	// The tag key of the alert rule.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the alert rule.
	//
	// example:
	//
	// value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PutGroupMetricRuleRequestLabels) String() string {
	return tea.Prettify(s)
}

func (s PutGroupMetricRuleRequestLabels) GoString() string {
	return s.String()
}

func (s *PutGroupMetricRuleRequestLabels) SetKey(v string) *PutGroupMetricRuleRequestLabels {
	s.Key = &v
	return s
}

func (s *PutGroupMetricRuleRequestLabels) SetValue(v string) *PutGroupMetricRuleRequestLabels {
	s.Value = &v
	return s
}

type PutGroupMetricRuleResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The Request is not authorization.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 461CF2CD-2FC3-4B26-8645-7BD27E7D0F1D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The result of the request.
	Result *PutGroupMetricRuleResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutGroupMetricRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutGroupMetricRuleResponseBody) GoString() string {
	return s.String()
}

func (s *PutGroupMetricRuleResponseBody) SetCode(v string) *PutGroupMetricRuleResponseBody {
	s.Code = &v
	return s
}

func (s *PutGroupMetricRuleResponseBody) SetMessage(v string) *PutGroupMetricRuleResponseBody {
	s.Message = &v
	return s
}

func (s *PutGroupMetricRuleResponseBody) SetRequestId(v string) *PutGroupMetricRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutGroupMetricRuleResponseBody) SetResult(v *PutGroupMetricRuleResponseBodyResult) *PutGroupMetricRuleResponseBody {
	s.Result = v
	return s
}

func (s *PutGroupMetricRuleResponseBody) SetSuccess(v bool) *PutGroupMetricRuleResponseBody {
	s.Success = &v
	return s
}

type PutGroupMetricRuleResponseBodyResult struct {
	// The ID of the alert rule.
	//
	// example:
	//
	// 123456
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s PutGroupMetricRuleResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s PutGroupMetricRuleResponseBodyResult) GoString() string {
	return s.String()
}

func (s *PutGroupMetricRuleResponseBodyResult) SetRuleId(v string) *PutGroupMetricRuleResponseBodyResult {
	s.RuleId = &v
	return s
}

type PutGroupMetricRuleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutGroupMetricRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutGroupMetricRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s PutGroupMetricRuleResponse) GoString() string {
	return s.String()
}

func (s *PutGroupMetricRuleResponse) SetHeaders(v map[string]*string) *PutGroupMetricRuleResponse {
	s.Headers = v
	return s
}

func (s *PutGroupMetricRuleResponse) SetStatusCode(v int32) *PutGroupMetricRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *PutGroupMetricRuleResponse) SetBody(v *PutGroupMetricRuleResponseBody) *PutGroupMetricRuleResponse {
	s.Body = v
	return s
}

type PutHybridMonitorMetricDataRequest struct {
	// The monitoring data.
	//
	// Valid values of N: 1 to 100.
	//
	// This parameter is required.
	MetricList []*PutHybridMonitorMetricDataRequestMetricList `json:"MetricList,omitempty" xml:"MetricList,omitempty" type:"Repeated"`
	// The name of the namespace.
	//
	// For information about how to obtain the name of a namespace, see [DescribeHybridMonitorNamespaceList](https://help.aliyun.com/document_detail/428880.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// default-aliyun
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s PutHybridMonitorMetricDataRequest) String() string {
	return tea.Prettify(s)
}

func (s PutHybridMonitorMetricDataRequest) GoString() string {
	return s.String()
}

func (s *PutHybridMonitorMetricDataRequest) SetMetricList(v []*PutHybridMonitorMetricDataRequestMetricList) *PutHybridMonitorMetricDataRequest {
	s.MetricList = v
	return s
}

func (s *PutHybridMonitorMetricDataRequest) SetNamespace(v string) *PutHybridMonitorMetricDataRequest {
	s.Namespace = &v
	return s
}

func (s *PutHybridMonitorMetricDataRequest) SetRegionId(v string) *PutHybridMonitorMetricDataRequest {
	s.RegionId = &v
	return s
}

type PutHybridMonitorMetricDataRequestMetricList struct {
	// The tags of the metric.
	//
	// Valid values of N: 1 to 100.
	//
	// example:
	//
	// app、ip、hostName等标识信息
	Labels []*PutHybridMonitorMetricDataRequestMetricListLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The metric name.
	//
	// Valid values of N: 1 to 100.
	//
	// The name can contain letters, digits, and underscores (_). The name must start with a letter.
	//
	// This parameter is required.
	//
	// example:
	//
	// CPU_Usage
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The time when the monitoring data is imported. The value is a timestamp.
	//
	// Valid values of N: 1 to 100.
	//
	// Unit: milliseconds. By default, the current time is used.
	//
	// example:
	//
	// 1640776119473
	TS *int64 `json:"TS,omitempty" xml:"TS,omitempty"`
	// The value of the metric.
	//
	// Valid values of N: 1 to 100.
	//
	// The value must be an integer or a floating-point number.
	//
	// This parameter is required.
	//
	// example:
	//
	// 90
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PutHybridMonitorMetricDataRequestMetricList) String() string {
	return tea.Prettify(s)
}

func (s PutHybridMonitorMetricDataRequestMetricList) GoString() string {
	return s.String()
}

func (s *PutHybridMonitorMetricDataRequestMetricList) SetLabels(v []*PutHybridMonitorMetricDataRequestMetricListLabels) *PutHybridMonitorMetricDataRequestMetricList {
	s.Labels = v
	return s
}

func (s *PutHybridMonitorMetricDataRequestMetricList) SetName(v string) *PutHybridMonitorMetricDataRequestMetricList {
	s.Name = &v
	return s
}

func (s *PutHybridMonitorMetricDataRequestMetricList) SetTS(v int64) *PutHybridMonitorMetricDataRequestMetricList {
	s.TS = &v
	return s
}

func (s *PutHybridMonitorMetricDataRequestMetricList) SetValue(v string) *PutHybridMonitorMetricDataRequestMetricList {
	s.Value = &v
	return s
}

type PutHybridMonitorMetricDataRequestMetricListLabels struct {
	// The tag key of the metric.
	//
	// Valid values of N: 1 to 100.
	//
	// The key can contain letters, digits, and underscores (_). The key must start with a letter or an underscore (_).
	//
	// >  You must specify both the Key and Value parameters.
	//
	// example:
	//
	// IP
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the metric.
	//
	// Valid values of N: 1 to 100.
	//
	// >  You must specify both the Key and Value parameters.
	//
	// example:
	//
	// 192.168.XX.XX
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PutHybridMonitorMetricDataRequestMetricListLabels) String() string {
	return tea.Prettify(s)
}

func (s PutHybridMonitorMetricDataRequestMetricListLabels) GoString() string {
	return s.String()
}

func (s *PutHybridMonitorMetricDataRequestMetricListLabels) SetKey(v string) *PutHybridMonitorMetricDataRequestMetricListLabels {
	s.Key = &v
	return s
}

func (s *PutHybridMonitorMetricDataRequestMetricListLabels) SetValue(v string) *PutHybridMonitorMetricDataRequestMetricListLabels {
	s.Value = &v
	return s
}

type PutHybridMonitorMetricDataResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of invalid parameters.
	//
	// If a request parameter is invalid, the details of the invalid parameter are returned.
	ErrorDetail []*PutHybridMonitorMetricDataResponseBodyErrorDetail `json:"ErrorDetail,omitempty" xml:"ErrorDetail,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 5DB1CBCA-D14A-55FA-814F-B4DBD9735F68
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PutHybridMonitorMetricDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutHybridMonitorMetricDataResponseBody) GoString() string {
	return s.String()
}

func (s *PutHybridMonitorMetricDataResponseBody) SetCode(v string) *PutHybridMonitorMetricDataResponseBody {
	s.Code = &v
	return s
}

func (s *PutHybridMonitorMetricDataResponseBody) SetErrorDetail(v []*PutHybridMonitorMetricDataResponseBodyErrorDetail) *PutHybridMonitorMetricDataResponseBody {
	s.ErrorDetail = v
	return s
}

func (s *PutHybridMonitorMetricDataResponseBody) SetRequestId(v string) *PutHybridMonitorMetricDataResponseBody {
	s.RequestId = &v
	return s
}

type PutHybridMonitorMetricDataResponseBodyErrorDetail struct {
	// The error message of the invalid parameter.
	//
	// example:
	//
	// label name :123 not match [a-zA-Z_][a-zA-Z0-9_]*
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The position of the error message in the array.
	//
	// example:
	//
	// 0
	Index *int64 `json:"Index,omitempty" xml:"Index,omitempty"`
}

func (s PutHybridMonitorMetricDataResponseBodyErrorDetail) String() string {
	return tea.Prettify(s)
}

func (s PutHybridMonitorMetricDataResponseBodyErrorDetail) GoString() string {
	return s.String()
}

func (s *PutHybridMonitorMetricDataResponseBodyErrorDetail) SetErrorMessage(v string) *PutHybridMonitorMetricDataResponseBodyErrorDetail {
	s.ErrorMessage = &v
	return s
}

func (s *PutHybridMonitorMetricDataResponseBodyErrorDetail) SetIndex(v int64) *PutHybridMonitorMetricDataResponseBodyErrorDetail {
	s.Index = &v
	return s
}

type PutHybridMonitorMetricDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutHybridMonitorMetricDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutHybridMonitorMetricDataResponse) String() string {
	return tea.Prettify(s)
}

func (s PutHybridMonitorMetricDataResponse) GoString() string {
	return s.String()
}

func (s *PutHybridMonitorMetricDataResponse) SetHeaders(v map[string]*string) *PutHybridMonitorMetricDataResponse {
	s.Headers = v
	return s
}

func (s *PutHybridMonitorMetricDataResponse) SetStatusCode(v int32) *PutHybridMonitorMetricDataResponse {
	s.StatusCode = &v
	return s
}

func (s *PutHybridMonitorMetricDataResponse) SetBody(v *PutHybridMonitorMetricDataResponseBody) *PutHybridMonitorMetricDataResponse {
	s.Body = v
	return s
}

type PutLogMonitorRequest struct {
	// The aggregation logic.
	//
	// This parameter is required.
	Aggregates []*PutLogMonitorRequestAggregates `json:"Aggregates,omitempty" xml:"Aggregates,omitempty" type:"Repeated"`
	// The ID of the application group.
	//
	// example:
	//
	// 7301****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The dimension based on which the data is grouped. This parameter is equivalent to the GROUP BY clause in SQL statements. If no dimension is specified, all data is aggregated based on the aggregate function.
	Groupbys []*PutLogMonitorRequestGroupbys `json:"Groupbys,omitempty" xml:"Groupbys,omitempty" type:"Repeated"`
	// The ID of the log monitoring metric.
	//
	// example:
	//
	// 16****
	LogId *string `json:"LogId,omitempty" xml:"LogId,omitempty"`
	// The extended field. The extended field allows you to perform basic operations on the aggregation results.
	//
	// For example, you have calculated TotalNumber and 5XXNumber by aggregating the data. TotalNumber indicates the total number of HTTP requests, and 5XXNumber indicates the number of HTTP requests whose status code is greater than 499. You can calculate the server error rate by adding the following formula to the extended field: 5XXNumber/TotalNumber\\*100.
	//
	// JSON format: {"extend":{"errorPercent":"5XXNumber/TotalNumber\\*100"}}. Description:
	//
	// 	- extend: required.
	//
	// 	- errorPercent: the alias of the field generated in the calculation result. You can specify the alias as needed.
	//
	// 	- 5XXNumber/TotalNumber\\*100: the calculation expression.
	//
	// example:
	//
	// {"extend":{"errorPercent":"5XXNumber/TotalNumber*100"}}
	MetricExpress *string `json:"MetricExpress,omitempty" xml:"MetricExpress,omitempty"`
	// The metric name. For more information about the metrics for cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the Simple Log Service Logstore.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-logstore
	SlsLogstore *string `json:"SlsLogstore,omitempty" xml:"SlsLogstore,omitempty"`
	// The name of the Simple Log Service project.
	//
	// This parameter is required.
	//
	// example:
	//
	// test-project
	SlsProject *string `json:"SlsProject,omitempty" xml:"SlsProject,omitempty"`
	// The region in which the Simple Log Service project resides.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	SlsRegionId *string `json:"SlsRegionId,omitempty" xml:"SlsRegionId,omitempty"`
	// The size of the tumbling window for calculation. Unit: seconds. CloudMonitor performs aggregation for each tumbling window.
	//
	// example:
	//
	// 60,300
	Tumblingwindows *string `json:"Tumblingwindows,omitempty" xml:"Tumblingwindows,omitempty"`
	// The unit.
	//
	// example:
	//
	// Percent
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	// The condition that is used to filter logs. The ValueFilter and ValueFilterRelation parameters are used in pair. The filter condition is equivalent to the WHERE clause in SQL statements. If no filter condition is specified, all logs are processed. For example, logs contain the Level and Error fields. If you need to calculate the number of times that logs of the Error level appear every minute, you can set the filter condition to Level=Error and count the number of logs that meet this condition.
	ValueFilter []*PutLogMonitorRequestValueFilter `json:"ValueFilter,omitempty" xml:"ValueFilter,omitempty" type:"Repeated"`
	// The logical operator that is used between log filter conditions. Valid values:
	//
	// 	- and
	//
	// 	- or
	//
	// >  The ValueFilterRelation and `ValueFilter.N.Key` parameters must be used in pair.
	//
	// This parameter is required.
	//
	// example:
	//
	// and
	ValueFilterRelation *string `json:"ValueFilterRelation,omitempty" xml:"ValueFilterRelation,omitempty"`
}

func (s PutLogMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s PutLogMonitorRequest) GoString() string {
	return s.String()
}

func (s *PutLogMonitorRequest) SetAggregates(v []*PutLogMonitorRequestAggregates) *PutLogMonitorRequest {
	s.Aggregates = v
	return s
}

func (s *PutLogMonitorRequest) SetGroupId(v string) *PutLogMonitorRequest {
	s.GroupId = &v
	return s
}

func (s *PutLogMonitorRequest) SetGroupbys(v []*PutLogMonitorRequestGroupbys) *PutLogMonitorRequest {
	s.Groupbys = v
	return s
}

func (s *PutLogMonitorRequest) SetLogId(v string) *PutLogMonitorRequest {
	s.LogId = &v
	return s
}

func (s *PutLogMonitorRequest) SetMetricExpress(v string) *PutLogMonitorRequest {
	s.MetricExpress = &v
	return s
}

func (s *PutLogMonitorRequest) SetMetricName(v string) *PutLogMonitorRequest {
	s.MetricName = &v
	return s
}

func (s *PutLogMonitorRequest) SetRegionId(v string) *PutLogMonitorRequest {
	s.RegionId = &v
	return s
}

func (s *PutLogMonitorRequest) SetSlsLogstore(v string) *PutLogMonitorRequest {
	s.SlsLogstore = &v
	return s
}

func (s *PutLogMonitorRequest) SetSlsProject(v string) *PutLogMonitorRequest {
	s.SlsProject = &v
	return s
}

func (s *PutLogMonitorRequest) SetSlsRegionId(v string) *PutLogMonitorRequest {
	s.SlsRegionId = &v
	return s
}

func (s *PutLogMonitorRequest) SetTumblingwindows(v string) *PutLogMonitorRequest {
	s.Tumblingwindows = &v
	return s
}

func (s *PutLogMonitorRequest) SetUnit(v string) *PutLogMonitorRequest {
	s.Unit = &v
	return s
}

func (s *PutLogMonitorRequest) SetValueFilter(v []*PutLogMonitorRequestValueFilter) *PutLogMonitorRequest {
	s.ValueFilter = v
	return s
}

func (s *PutLogMonitorRequest) SetValueFilterRelation(v string) *PutLogMonitorRequest {
	s.ValueFilterRelation = &v
	return s
}

type PutLogMonitorRequestAggregates struct {
	// The alias of the aggregate function. Valid values of N: 1 to 10.
	//
	// This parameter is required.
	//
	// example:
	//
	// Count
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The name of the field to be aggregated. Valid values of N: 1 to 10.
	//
	// This parameter is required.
	//
	// example:
	//
	// sourceCount
	FieldName *string `json:"FieldName,omitempty" xml:"FieldName,omitempty"`
	// The function that is used to aggregate log data within a statistical period. Valid values of N: 1 to 10. Valid values:
	//
	// 	- count: counts the number.
	//
	// 	- sum: calculates the total value.
	//
	// 	- avg: calculates the average value.
	//
	// 	- max: calculates the maximum value.
	//
	// 	- min: calculates the minimum value.
	//
	// 	- countps: calculates the number of values of the specified field divided by the total number of seconds within a statistical period.
	//
	// 	- sumps: calculates the sum of the values of the specified field divided by the total number of seconds within a statistical period.
	//
	// 	- distinct: calculates the number of unique values of the specified field within a statistical period.
	//
	// This parameter is required.
	//
	// example:
	//
	// count
	Function *string `json:"Function,omitempty" xml:"Function,omitempty"`
}

func (s PutLogMonitorRequestAggregates) String() string {
	return tea.Prettify(s)
}

func (s PutLogMonitorRequestAggregates) GoString() string {
	return s.String()
}

func (s *PutLogMonitorRequestAggregates) SetAlias(v string) *PutLogMonitorRequestAggregates {
	s.Alias = &v
	return s
}

func (s *PutLogMonitorRequestAggregates) SetFieldName(v string) *PutLogMonitorRequestAggregates {
	s.FieldName = &v
	return s
}

func (s *PutLogMonitorRequestAggregates) SetFunction(v string) *PutLogMonitorRequestAggregates {
	s.Function = &v
	return s
}

type PutLogMonitorRequestGroupbys struct {
	// The alias of the dimension based on which the data is grouped. Valid values of N: 1 to 10.
	//
	// example:
	//
	// CPUUtilization
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The name of the field that is specified as the dimension. Valid values of N: 1 to 10.
	//
	// example:
	//
	// cpu
	FieldName *string `json:"FieldName,omitempty" xml:"FieldName,omitempty"`
}

func (s PutLogMonitorRequestGroupbys) String() string {
	return tea.Prettify(s)
}

func (s PutLogMonitorRequestGroupbys) GoString() string {
	return s.String()
}

func (s *PutLogMonitorRequestGroupbys) SetAlias(v string) *PutLogMonitorRequestGroupbys {
	s.Alias = &v
	return s
}

func (s *PutLogMonitorRequestGroupbys) SetFieldName(v string) *PutLogMonitorRequestGroupbys {
	s.FieldName = &v
	return s
}

type PutLogMonitorRequestValueFilter struct {
	// The name of the log field that is used for matching in the filter condition. Valid values of N: 1 to 10.
	//
	// example:
	//
	// lh_source
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The method that is used to match the field value. Valid values of N: 1 to 10. Valid values:
	//
	// 	- `contain`: contains
	//
	// 	- `notContain`: does not contain
	//
	// 	- `>`: greater than
	//
	// 	- `<`: less than
	//
	// 	- `>=`: greater than or equal to
	//
	// 	- `<=`: less than or equal to
	//
	// example:
	//
	// contain
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// The field value to be matched in the filter condition. Valid values of N: 1 to 10.
	//
	// example:
	//
	// test
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PutLogMonitorRequestValueFilter) String() string {
	return tea.Prettify(s)
}

func (s PutLogMonitorRequestValueFilter) GoString() string {
	return s.String()
}

func (s *PutLogMonitorRequestValueFilter) SetKey(v string) *PutLogMonitorRequestValueFilter {
	s.Key = &v
	return s
}

func (s *PutLogMonitorRequestValueFilter) SetOperator(v string) *PutLogMonitorRequestValueFilter {
	s.Operator = &v
	return s
}

func (s *PutLogMonitorRequestValueFilter) SetValue(v string) *PutLogMonitorRequestValueFilter {
	s.Value = &v
	return s
}

type PutLogMonitorResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the log monitoring metric.
	//
	// example:
	//
	// 16****
	LogId *string `json:"LogId,omitempty" xml:"LogId,omitempty"`
	// The returned message.
	//
	// 	- If the request was successful, `successful` is returned.
	//
	// 	- If the request failed, an error message is returned. Example: `alias of aggreate must be set value.`
	//
	// example:
	//
	// successful
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 91561287-0802-5F9C-9BDE-404C50D41B06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutLogMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutLogMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *PutLogMonitorResponseBody) SetCode(v string) *PutLogMonitorResponseBody {
	s.Code = &v
	return s
}

func (s *PutLogMonitorResponseBody) SetLogId(v string) *PutLogMonitorResponseBody {
	s.LogId = &v
	return s
}

func (s *PutLogMonitorResponseBody) SetMessage(v string) *PutLogMonitorResponseBody {
	s.Message = &v
	return s
}

func (s *PutLogMonitorResponseBody) SetRequestId(v string) *PutLogMonitorResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutLogMonitorResponseBody) SetSuccess(v bool) *PutLogMonitorResponseBody {
	s.Success = &v
	return s
}

type PutLogMonitorResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutLogMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutLogMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s PutLogMonitorResponse) GoString() string {
	return s.String()
}

func (s *PutLogMonitorResponse) SetHeaders(v map[string]*string) *PutLogMonitorResponse {
	s.Headers = v
	return s
}

func (s *PutLogMonitorResponse) SetStatusCode(v int32) *PutLogMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *PutLogMonitorResponse) SetBody(v *PutLogMonitorResponseBody) *PutLogMonitorResponse {
	s.Body = v
	return s
}

type PutMetricRuleTargetsRequest struct {
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the alert rule.
	//
	// For information about how to obtain the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ae06917_75a8c43178ab66****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// None.
	//
	// This parameter is required.
	Targets []*PutMetricRuleTargetsRequestTargets `json:"Targets,omitempty" xml:"Targets,omitempty" type:"Repeated"`
}

func (s PutMetricRuleTargetsRequest) String() string {
	return tea.Prettify(s)
}

func (s PutMetricRuleTargetsRequest) GoString() string {
	return s.String()
}

func (s *PutMetricRuleTargetsRequest) SetRegionId(v string) *PutMetricRuleTargetsRequest {
	s.RegionId = &v
	return s
}

func (s *PutMetricRuleTargetsRequest) SetRuleId(v string) *PutMetricRuleTargetsRequest {
	s.RuleId = &v
	return s
}

func (s *PutMetricRuleTargetsRequest) SetTargets(v []*PutMetricRuleTargetsRequestTargets) *PutMetricRuleTargetsRequest {
	s.Targets = v
	return s
}

type PutMetricRuleTargetsRequestTargets struct {
	// The Alibaba Cloud Resource Name (ARN) of the resource. Simple Message Queue (formerly MNS) (SMQ), Auto Scaling, Simple Log Service, and Function Compute are supported.
	//
	// The following part describes the ARN of SMQ and the parameters in the ARN:
	//
	// `acs:mns:{regionId}:{userId}:/{Resource type}/{Resource name}/message`.
	//
	// 	- {regionId}: the region ID of the SMQ queue or topic.
	//
	// 	- {userId}: the ID of the Alibaba Cloud account that owns the resource.
	//
	// 	- {Resource type}: the type of the resource for which alerts are triggered. Valid values:
	//
	//     	- **queues**
	//
	//     	- **topics**
	//
	// 	- {Resource name}: the resource name.
	//
	//     	- If the resource type is **queues**, the resource name is the queue name.
	//
	//     	- If the resource type is **topics**, the resource name is the topic name.
	//
	// ARN of Auto Scaling:
	//
	// acs:ess:{regionId}:{userId}:scalingGroupId/{Scaling group ID}:scalingRuleId/{Scaling rule ID}
	//
	// ARN of Simple Log Service:
	//
	// acs:log:{regionId}:{userId}:project/{Project name}/logstore/{Logstore name}
	//
	// ARN of Function Compute:
	//
	// acs:fc:{regionId}:{userId}:services/{Service name}/functions/{Function name}
	//
	// This parameter is required.
	//
	// example:
	//
	// acs:mns:cn-hangzhou:120886317861****:/queues/test/message
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the resource for which alerts are triggered.
	//
	// For more information about how to obtain the ID of the resource for which alerts are triggered, see [DescribeMetricRuleTargets](https://help.aliyun.com/document_detail/121592.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The parameters of the alert callback. The parameters are in the JSON format.
	//
	// example:
	//
	// {"customField1":"value1","customField2":"$.name"}
	JsonParams *string `json:"JsonParams,omitempty" xml:"JsonParams,omitempty"`
	// The alert level. Valid values:
	//
	// 	- INFO
	//
	// 	- WARN
	//
	// 	- CRITICAL
	//
	// example:
	//
	// ["INFO", "WARN", "CRITICAL"]
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s PutMetricRuleTargetsRequestTargets) String() string {
	return tea.Prettify(s)
}

func (s PutMetricRuleTargetsRequestTargets) GoString() string {
	return s.String()
}

func (s *PutMetricRuleTargetsRequestTargets) SetArn(v string) *PutMetricRuleTargetsRequestTargets {
	s.Arn = &v
	return s
}

func (s *PutMetricRuleTargetsRequestTargets) SetId(v string) *PutMetricRuleTargetsRequestTargets {
	s.Id = &v
	return s
}

func (s *PutMetricRuleTargetsRequestTargets) SetJsonParams(v string) *PutMetricRuleTargetsRequestTargets {
	s.JsonParams = &v
	return s
}

func (s *PutMetricRuleTargetsRequestTargets) SetLevel(v string) *PutMetricRuleTargetsRequestTargets {
	s.Level = &v
	return s
}

type PutMetricRuleTargetsResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The failed data.
	FailData *PutMetricRuleTargetsResponseBodyFailData `json:"FailData,omitempty" xml:"FailData,omitempty" type:"Struct"`
	// The error message returned.
	//
	// example:
	//
	// The request processing has failed due to some unknown error.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6A569B0D-9055-58AF-9E82-BAEAF95C0FD5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true: The request was successful.
	//
	// 	- false: The request failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutMetricRuleTargetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutMetricRuleTargetsResponseBody) GoString() string {
	return s.String()
}

func (s *PutMetricRuleTargetsResponseBody) SetCode(v string) *PutMetricRuleTargetsResponseBody {
	s.Code = &v
	return s
}

func (s *PutMetricRuleTargetsResponseBody) SetFailData(v *PutMetricRuleTargetsResponseBodyFailData) *PutMetricRuleTargetsResponseBody {
	s.FailData = v
	return s
}

func (s *PutMetricRuleTargetsResponseBody) SetMessage(v string) *PutMetricRuleTargetsResponseBody {
	s.Message = &v
	return s
}

func (s *PutMetricRuleTargetsResponseBody) SetRequestId(v string) *PutMetricRuleTargetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutMetricRuleTargetsResponseBody) SetSuccess(v bool) *PutMetricRuleTargetsResponseBody {
	s.Success = &v
	return s
}

type PutMetricRuleTargetsResponseBodyFailData struct {
	// The information about the resources for which alerts are triggered.
	Targets *PutMetricRuleTargetsResponseBodyFailDataTargets `json:"Targets,omitempty" xml:"Targets,omitempty" type:"Struct"`
}

func (s PutMetricRuleTargetsResponseBodyFailData) String() string {
	return tea.Prettify(s)
}

func (s PutMetricRuleTargetsResponseBodyFailData) GoString() string {
	return s.String()
}

func (s *PutMetricRuleTargetsResponseBodyFailData) SetTargets(v *PutMetricRuleTargetsResponseBodyFailDataTargets) *PutMetricRuleTargetsResponseBodyFailData {
	s.Targets = v
	return s
}

type PutMetricRuleTargetsResponseBodyFailDataTargets struct {
	Target []*PutMetricRuleTargetsResponseBodyFailDataTargetsTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Repeated"`
}

func (s PutMetricRuleTargetsResponseBodyFailDataTargets) String() string {
	return tea.Prettify(s)
}

func (s PutMetricRuleTargetsResponseBodyFailDataTargets) GoString() string {
	return s.String()
}

func (s *PutMetricRuleTargetsResponseBodyFailDataTargets) SetTarget(v []*PutMetricRuleTargetsResponseBodyFailDataTargetsTarget) *PutMetricRuleTargetsResponseBodyFailDataTargets {
	s.Target = v
	return s
}

type PutMetricRuleTargetsResponseBodyFailDataTargetsTarget struct {
	// The ARN of the resource. Format: `acs:{Service name abbreviation}:{regionId}:{userId}:/{Resource type}/{Resource name}/message`. SMQ, Auto Scaling, Simple Log Service, and Function Compute are supported. Example: `acs:mns:cn-hangzhou:120886317861****:/queues/test123/message`. The following part describes the ARN of SMQ and the parameters in the ARN:
	//
	// 	- {Service name abbreviation}: mns.
	//
	// 	- {userId}: the ID of the Alibaba Cloud account.
	//
	// 	- {regionId}: the region ID of the SMQ queue or topic.
	//
	// 	- {Resource type}: the type of the resource for which alerts are triggered. Valid values:
	//
	//     	- **queues**
	//
	//     	- **topics**
	//
	// 	- {Resource name}: the resource name.
	//
	//     	- If the resource type is **queues**, the resource name is the queue name.
	//
	//     	- If the resource type is **topics**, the resource name is the topic name.
	//
	// example:
	//
	// acs:mns:cn-hangzhou:111:/queues/test/message
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the resource for which alerts are triggered.
	//
	// example:
	//
	// 1
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The alert level. Valid values:
	//
	// 	- INFO
	//
	// 	- WARN
	//
	// 	- CRITICAL
	//
	// example:
	//
	// ["INFO", "WARN", "CRITICAL"]
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s PutMetricRuleTargetsResponseBodyFailDataTargetsTarget) String() string {
	return tea.Prettify(s)
}

func (s PutMetricRuleTargetsResponseBodyFailDataTargetsTarget) GoString() string {
	return s.String()
}

func (s *PutMetricRuleTargetsResponseBodyFailDataTargetsTarget) SetArn(v string) *PutMetricRuleTargetsResponseBodyFailDataTargetsTarget {
	s.Arn = &v
	return s
}

func (s *PutMetricRuleTargetsResponseBodyFailDataTargetsTarget) SetId(v string) *PutMetricRuleTargetsResponseBodyFailDataTargetsTarget {
	s.Id = &v
	return s
}

func (s *PutMetricRuleTargetsResponseBodyFailDataTargetsTarget) SetLevel(v string) *PutMetricRuleTargetsResponseBodyFailDataTargetsTarget {
	s.Level = &v
	return s
}

type PutMetricRuleTargetsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutMetricRuleTargetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutMetricRuleTargetsResponse) String() string {
	return tea.Prettify(s)
}

func (s PutMetricRuleTargetsResponse) GoString() string {
	return s.String()
}

func (s *PutMetricRuleTargetsResponse) SetHeaders(v map[string]*string) *PutMetricRuleTargetsResponse {
	s.Headers = v
	return s
}

func (s *PutMetricRuleTargetsResponse) SetStatusCode(v int32) *PutMetricRuleTargetsResponse {
	s.StatusCode = &v
	return s
}

func (s *PutMetricRuleTargetsResponse) SetBody(v *PutMetricRuleTargetsResponseBody) *PutMetricRuleTargetsResponse {
	s.Body = v
	return s
}

type PutMonitorGroupDynamicRuleRequest struct {
	// The ID of the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// 123456
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// None.
	//
	// This parameter is required.
	GroupRules []*PutMonitorGroupDynamicRuleRequestGroupRules `json:"GroupRules,omitempty" xml:"GroupRules,omitempty" type:"Repeated"`
	// The mode for creating the alert rule. Valid values:
	//
	// 	- true: creates asynchronously
	//
	// 	- false (default): creates synchronously
	//
	// example:
	//
	// false
	IsAsync  *bool   `json:"IsAsync,omitempty" xml:"IsAsync,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s PutMonitorGroupDynamicRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s PutMonitorGroupDynamicRuleRequest) GoString() string {
	return s.String()
}

func (s *PutMonitorGroupDynamicRuleRequest) SetGroupId(v int64) *PutMonitorGroupDynamicRuleRequest {
	s.GroupId = &v
	return s
}

func (s *PutMonitorGroupDynamicRuleRequest) SetGroupRules(v []*PutMonitorGroupDynamicRuleRequestGroupRules) *PutMonitorGroupDynamicRuleRequest {
	s.GroupRules = v
	return s
}

func (s *PutMonitorGroupDynamicRuleRequest) SetIsAsync(v bool) *PutMonitorGroupDynamicRuleRequest {
	s.IsAsync = &v
	return s
}

func (s *PutMonitorGroupDynamicRuleRequest) SetRegionId(v string) *PutMonitorGroupDynamicRuleRequest {
	s.RegionId = &v
	return s
}

type PutMonitorGroupDynamicRuleRequestGroupRules struct {
	// The cloud service to which the alert rule is applied. Valid values of N: 1 to 3. Valid values:
	//
	// 	- ecs: Elastic Compute Service (ECS)
	//
	// 	- rds: ApsaraDB RDS
	//
	// 	- slb: Server Load Balancer (SLB)
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The logical operator used between conditional expressions in the alert rule. Valid values of N: 1 to 3. Valid values:
	//
	// 	- and: The instances that meet all the conditional expressions are automatically added to the application group.
	//
	// 	- or: The instances that meet one of the conditional expressions are automatically added to the application group.
	//
	// This parameter is required.
	//
	// example:
	//
	// and
	FilterRelation *string `json:"FilterRelation,omitempty" xml:"FilterRelation,omitempty"`
	// None.
	//
	// This parameter is required.
	Filters []*PutMonitorGroupDynamicRuleRequestGroupRulesFilters `json:"Filters,omitempty" xml:"Filters,omitempty" type:"Repeated"`
}

func (s PutMonitorGroupDynamicRuleRequestGroupRules) String() string {
	return tea.Prettify(s)
}

func (s PutMonitorGroupDynamicRuleRequestGroupRules) GoString() string {
	return s.String()
}

func (s *PutMonitorGroupDynamicRuleRequestGroupRules) SetCategory(v string) *PutMonitorGroupDynamicRuleRequestGroupRules {
	s.Category = &v
	return s
}

func (s *PutMonitorGroupDynamicRuleRequestGroupRules) SetFilterRelation(v string) *PutMonitorGroupDynamicRuleRequestGroupRules {
	s.FilterRelation = &v
	return s
}

func (s *PutMonitorGroupDynamicRuleRequestGroupRules) SetFilters(v []*PutMonitorGroupDynamicRuleRequestGroupRulesFilters) *PutMonitorGroupDynamicRuleRequestGroupRules {
	s.Filters = v
	return s
}

type PutMonitorGroupDynamicRuleRequestGroupRulesFilters struct {
	// The method that is used to filter instances. Valid values of N: 1 to 3. Valid values:
	//
	// 	- contains: contains
	//
	// 	- notContains: does not contain
	//
	// 	- startWith: starts with a prefix
	//
	// 	- endWith: ends with a suffix
	//
	// This parameter is required.
	//
	// example:
	//
	// contains
	Function *string `json:"Function,omitempty" xml:"Function,omitempty"`
	// The name of the field based on which instances are filtered. Valid values of N: 1 to 3.
	//
	// Only hostnames are supported. Example: hostName.
	//
	// This parameter is required.
	//
	// example:
	//
	// hostName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The value to be matched with the specified field. Valid values of N: 1 to 3.
	//
	// This parameter is required.
	//
	// example:
	//
	// nginx
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PutMonitorGroupDynamicRuleRequestGroupRulesFilters) String() string {
	return tea.Prettify(s)
}

func (s PutMonitorGroupDynamicRuleRequestGroupRulesFilters) GoString() string {
	return s.String()
}

func (s *PutMonitorGroupDynamicRuleRequestGroupRulesFilters) SetFunction(v string) *PutMonitorGroupDynamicRuleRequestGroupRulesFilters {
	s.Function = &v
	return s
}

func (s *PutMonitorGroupDynamicRuleRequestGroupRulesFilters) SetName(v string) *PutMonitorGroupDynamicRuleRequestGroupRulesFilters {
	s.Name = &v
	return s
}

func (s *PutMonitorGroupDynamicRuleRequestGroupRulesFilters) SetValue(v string) *PutMonitorGroupDynamicRuleRequestGroupRulesFilters {
	s.Value = &v
	return s
}

type PutMonitorGroupDynamicRuleResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// The specified resource is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3E73F1AB-D195-438A-BCA7-2F4355789C58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutMonitorGroupDynamicRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutMonitorGroupDynamicRuleResponseBody) GoString() string {
	return s.String()
}

func (s *PutMonitorGroupDynamicRuleResponseBody) SetCode(v int32) *PutMonitorGroupDynamicRuleResponseBody {
	s.Code = &v
	return s
}

func (s *PutMonitorGroupDynamicRuleResponseBody) SetMessage(v string) *PutMonitorGroupDynamicRuleResponseBody {
	s.Message = &v
	return s
}

func (s *PutMonitorGroupDynamicRuleResponseBody) SetRequestId(v string) *PutMonitorGroupDynamicRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutMonitorGroupDynamicRuleResponseBody) SetSuccess(v bool) *PutMonitorGroupDynamicRuleResponseBody {
	s.Success = &v
	return s
}

type PutMonitorGroupDynamicRuleResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutMonitorGroupDynamicRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutMonitorGroupDynamicRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s PutMonitorGroupDynamicRuleResponse) GoString() string {
	return s.String()
}

func (s *PutMonitorGroupDynamicRuleResponse) SetHeaders(v map[string]*string) *PutMonitorGroupDynamicRuleResponse {
	s.Headers = v
	return s
}

func (s *PutMonitorGroupDynamicRuleResponse) SetStatusCode(v int32) *PutMonitorGroupDynamicRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *PutMonitorGroupDynamicRuleResponse) SetBody(v *PutMonitorGroupDynamicRuleResponseBody) *PutMonitorGroupDynamicRuleResponse {
	s.Body = v
	return s
}

type PutMonitoringConfigRequest struct {
	// This parameter is deprecated.
	//
	// example:
	//
	// true
	AutoInstall *bool `json:"AutoInstall,omitempty" xml:"AutoInstall,omitempty"`
	// Specifies whether to automatically install the CloudMonitor agent on new ECS instances. Valid values:
	//
	// 	- true (default): The CloudMonitor agent is automatically installed on new ECS instances.
	//
	// 	- false: The CloudMonitor agent is not automatically installed on new ECS instances.
	//
	// example:
	//
	// true
	EnableInstallAgentNewECS *bool   `json:"EnableInstallAgentNewECS,omitempty" xml:"EnableInstallAgentNewECS,omitempty"`
	RegionId                 *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s PutMonitoringConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s PutMonitoringConfigRequest) GoString() string {
	return s.String()
}

func (s *PutMonitoringConfigRequest) SetAutoInstall(v bool) *PutMonitoringConfigRequest {
	s.AutoInstall = &v
	return s
}

func (s *PutMonitoringConfigRequest) SetEnableInstallAgentNewECS(v bool) *PutMonitoringConfigRequest {
	s.EnableInstallAgentNewECS = &v
	return s
}

func (s *PutMonitoringConfigRequest) SetRegionId(v string) *PutMonitoringConfigRequest {
	s.RegionId = &v
	return s
}

type PutMonitoringConfigResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Specified parameter EnableInstallAgentNewECS is not valid.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 109C8095-6FAD-4DBB-B013-6ED18CE4C0B1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutMonitoringConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutMonitoringConfigResponseBody) GoString() string {
	return s.String()
}

func (s *PutMonitoringConfigResponseBody) SetCode(v int32) *PutMonitoringConfigResponseBody {
	s.Code = &v
	return s
}

func (s *PutMonitoringConfigResponseBody) SetMessage(v string) *PutMonitoringConfigResponseBody {
	s.Message = &v
	return s
}

func (s *PutMonitoringConfigResponseBody) SetRequestId(v string) *PutMonitoringConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutMonitoringConfigResponseBody) SetSuccess(v bool) *PutMonitoringConfigResponseBody {
	s.Success = &v
	return s
}

type PutMonitoringConfigResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutMonitoringConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutMonitoringConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s PutMonitoringConfigResponse) GoString() string {
	return s.String()
}

func (s *PutMonitoringConfigResponse) SetHeaders(v map[string]*string) *PutMonitoringConfigResponse {
	s.Headers = v
	return s
}

func (s *PutMonitoringConfigResponse) SetStatusCode(v int32) *PutMonitoringConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *PutMonitoringConfigResponse) SetBody(v *PutMonitoringConfigResponseBody) *PutMonitoringConfigResponse {
	s.Body = v
	return s
}

type PutResourceMetricRuleRequest struct {
	Escalations *PutResourceMetricRuleRequestEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Struct"`
	// The trigger conditions for multiple metrics.
	//
	// >  The trigger conditions for a single metric and multiple metrics are mutually exclusive. You cannot specify trigger conditions for a single metric and multiple metrics at the same time.
	CompositeExpression *PutResourceMetricRuleRequestCompositeExpression `json:"CompositeExpression,omitempty" xml:"CompositeExpression,omitempty" type:"Struct"`
	// The alert contact groups. Alert notifications are sent to the alert contacts in the alert contact group.
	//
	// >  An alert contact group can contain one or more alert contacts. For information about how to create alert contacts and alert contact groups, see [PutContact](https://help.aliyun.com/document_detail/114923.html) and [PutContactGroup](https://help.aliyun.com/document_detail/114929.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS_Group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The period of time during which the alert rule is effective.
	//
	// example:
	//
	// 00:00-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// The subject of the alert notification email.
	EmailSubject *string `json:"EmailSubject,omitempty" xml:"EmailSubject,omitempty"`
	// The interval at which alerts are triggered based on the alert rule. Unit: seconds.
	//
	// >  For more information about how to query the statistical periods of metrics, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// 60
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// If the metric meets the specified condition in the alert rule and CloudMonitor sends an alert notification, the tag is also written to the metric and displayed in the alert notification.
	//
	// >  This parameter is equivalent to the Label parameter of Prometheus alerts.
	Labels []*PutResourceMetricRuleRequestLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The metric name. For more information about how to query metric names, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  If you create a Prometheus alert rule for Hybrid Cloud Monitoring, you must set this parameter to the name of the namespace. For more information about how to query the names of namespaces, see [DescribeHybridMonitorNamespaceList](https://help.aliyun.com/document_detail/428880.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service. For more information about how to query the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  If you create a Prometheus alert rule for Hybrid Cloud Monitoring, you must set this parameter to `acs_prometheus`.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The method that is used to handle alerts when no monitoring data is found. Valid value:
	//
	// 	- KEEP_LAST_STATE (default): No operation is performed.
	//
	// 	- INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
	//
	// 	- OK: The status is considered normal.
	//
	// example:
	//
	// KEEP_LAST_STATE
	NoDataPolicy *string `json:"NoDataPolicy,omitempty" xml:"NoDataPolicy,omitempty"`
	// The period of time during which the alert rule is ineffective.
	//
	// example:
	//
	// 00:00-06:00
	NoEffectiveInterval *string `json:"NoEffectiveInterval,omitempty" xml:"NoEffectiveInterval,omitempty"`
	// The statistical period of the metric. Unit: seconds. The default value is the interval at which the monitoring data of the metric is collected.
	//
	// >  For more information about how to query the statistical periods of metrics, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// Prometheus alerts.
	//
	// >  This parameter is required only if you create a Prometheus alert rule for Hybrid Cloud Monitoring.
	Prometheus *PutResourceMetricRuleRequestPrometheus `json:"Prometheus,omitempty" xml:"Prometheus,omitempty" type:"Struct"`
	// The resource information. Examples: `[{"instanceId":"i-uf6j91r34rnwawoo****"}]` and `[{"userId":"100931896542****"}]`.
	//
	// For more information about the supported dimensions that are used to query resources, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// [{"instanceId":"i-uf6j91r34rnwawoo****"}]
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// The ID of the alert rule.
	//
	// You can specify a new ID or the ID of an existing alert rule. For more information about how to query the IDs of alert rules, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// >  If you specify a new ID, a threshold-triggered alert rule is created.
	//
	// This parameter is required.
	//
	// example:
	//
	// a151cd6023eacee2f0978e03863cc1697c89508****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// You can specify a new name or the name of an existing alert rule. For more information about how to query the names of alert rules, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// >  If you specify a new name, a threshold-triggered alert rule is created.
	//
	// This parameter is required.
	//
	// example:
	//
	// test123
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which new alert notifications are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400.
	//
	// >  If an alert is not cleared after the mute period ends, CloudMonitor resends an alert notification.
	//
	// example:
	//
	// 86400
	SilenceTime *int32 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.
	//
	// example:
	//
	// https://alert.aliyun.com.com:8080/callback
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s PutResourceMetricRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleRequest) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleRequest) SetEscalations(v *PutResourceMetricRuleRequestEscalations) *PutResourceMetricRuleRequest {
	s.Escalations = v
	return s
}

func (s *PutResourceMetricRuleRequest) SetCompositeExpression(v *PutResourceMetricRuleRequestCompositeExpression) *PutResourceMetricRuleRequest {
	s.CompositeExpression = v
	return s
}

func (s *PutResourceMetricRuleRequest) SetContactGroups(v string) *PutResourceMetricRuleRequest {
	s.ContactGroups = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetEffectiveInterval(v string) *PutResourceMetricRuleRequest {
	s.EffectiveInterval = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetEmailSubject(v string) *PutResourceMetricRuleRequest {
	s.EmailSubject = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetInterval(v string) *PutResourceMetricRuleRequest {
	s.Interval = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetLabels(v []*PutResourceMetricRuleRequestLabels) *PutResourceMetricRuleRequest {
	s.Labels = v
	return s
}

func (s *PutResourceMetricRuleRequest) SetMetricName(v string) *PutResourceMetricRuleRequest {
	s.MetricName = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetNamespace(v string) *PutResourceMetricRuleRequest {
	s.Namespace = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetNoDataPolicy(v string) *PutResourceMetricRuleRequest {
	s.NoDataPolicy = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetNoEffectiveInterval(v string) *PutResourceMetricRuleRequest {
	s.NoEffectiveInterval = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetPeriod(v string) *PutResourceMetricRuleRequest {
	s.Period = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetPrometheus(v *PutResourceMetricRuleRequestPrometheus) *PutResourceMetricRuleRequest {
	s.Prometheus = v
	return s
}

func (s *PutResourceMetricRuleRequest) SetResources(v string) *PutResourceMetricRuleRequest {
	s.Resources = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetRuleId(v string) *PutResourceMetricRuleRequest {
	s.RuleId = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetRuleName(v string) *PutResourceMetricRuleRequest {
	s.RuleName = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetSilenceTime(v int32) *PutResourceMetricRuleRequest {
	s.SilenceTime = &v
	return s
}

func (s *PutResourceMetricRuleRequest) SetWebhook(v string) *PutResourceMetricRuleRequest {
	s.Webhook = &v
	return s
}

type PutResourceMetricRuleRequestEscalations struct {
	Critical *PutResourceMetricRuleRequestEscalationsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	Info     *PutResourceMetricRuleRequestEscalationsInfo     `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	Warn     *PutResourceMetricRuleRequestEscalationsWarn     `json:"Warn,omitempty" xml:"Warn,omitempty" type:"Struct"`
}

func (s PutResourceMetricRuleRequestEscalations) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleRequestEscalations) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleRequestEscalations) SetCritical(v *PutResourceMetricRuleRequestEscalationsCritical) *PutResourceMetricRuleRequestEscalations {
	s.Critical = v
	return s
}

func (s *PutResourceMetricRuleRequestEscalations) SetInfo(v *PutResourceMetricRuleRequestEscalationsInfo) *PutResourceMetricRuleRequestEscalations {
	s.Info = v
	return s
}

func (s *PutResourceMetricRuleRequestEscalations) SetWarn(v *PutResourceMetricRuleRequestEscalationsWarn) *PutResourceMetricRuleRequestEscalations {
	s.Warn = v
	return s
}

type PutResourceMetricRuleRequestEscalationsCritical struct {
	// The operator that is used to compare the metric value with the threshold for Critical-level alerts. Valid value:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- EqualToThreshold: equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Critical-level alerts.
	//
	// The value of this parameter is determined by the `Statistics` column corresponding to the `MetricName` parameter of the specified cloud service. The value of this parameter can be Maximum, Minimum, or Average. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Critical-level alerts.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Critical-level alert is triggered.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRuleRequestEscalationsCritical) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleRequestEscalationsCritical) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleRequestEscalationsCritical) SetComparisonOperator(v string) *PutResourceMetricRuleRequestEscalationsCritical {
	s.ComparisonOperator = &v
	return s
}

func (s *PutResourceMetricRuleRequestEscalationsCritical) SetStatistics(v string) *PutResourceMetricRuleRequestEscalationsCritical {
	s.Statistics = &v
	return s
}

func (s *PutResourceMetricRuleRequestEscalationsCritical) SetThreshold(v string) *PutResourceMetricRuleRequestEscalationsCritical {
	s.Threshold = &v
	return s
}

func (s *PutResourceMetricRuleRequestEscalationsCritical) SetTimes(v int32) *PutResourceMetricRuleRequestEscalationsCritical {
	s.Times = &v
	return s
}

type PutResourceMetricRuleRequestEscalationsInfo struct {
	// The operator that is used to compare the metric value with the threshold for Info-level alerts. Valid value:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- EqualToThreshold: equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Info-level alerts.
	//
	// The value of this parameter is determined by the `Statistics` column corresponding to the `MetricName` parameter of the specified cloud service. The value of this parameter can be Maximum, Minimum, or Average. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Info-level alerts.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an Info-level alert is triggered.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRuleRequestEscalationsInfo) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleRequestEscalationsInfo) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleRequestEscalationsInfo) SetComparisonOperator(v string) *PutResourceMetricRuleRequestEscalationsInfo {
	s.ComparisonOperator = &v
	return s
}

func (s *PutResourceMetricRuleRequestEscalationsInfo) SetStatistics(v string) *PutResourceMetricRuleRequestEscalationsInfo {
	s.Statistics = &v
	return s
}

func (s *PutResourceMetricRuleRequestEscalationsInfo) SetThreshold(v string) *PutResourceMetricRuleRequestEscalationsInfo {
	s.Threshold = &v
	return s
}

func (s *PutResourceMetricRuleRequestEscalationsInfo) SetTimes(v int32) *PutResourceMetricRuleRequestEscalationsInfo {
	s.Times = &v
	return s
}

type PutResourceMetricRuleRequestEscalationsWarn struct {
	// The operator that is used to compare the metric value with the threshold for Warn-level alerts. Valid value:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- EqualToThreshold: equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Warn-level alerts.
	//
	// The value of this parameter is determined by the `Statistics` column corresponding to the `MetricName` parameter of the specified cloud service. The value of this parameter can be Maximum, Minimum, or Average. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Warn-level alerts.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Warn-level alert is triggered.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRuleRequestEscalationsWarn) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleRequestEscalationsWarn) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleRequestEscalationsWarn) SetComparisonOperator(v string) *PutResourceMetricRuleRequestEscalationsWarn {
	s.ComparisonOperator = &v
	return s
}

func (s *PutResourceMetricRuleRequestEscalationsWarn) SetStatistics(v string) *PutResourceMetricRuleRequestEscalationsWarn {
	s.Statistics = &v
	return s
}

func (s *PutResourceMetricRuleRequestEscalationsWarn) SetThreshold(v string) *PutResourceMetricRuleRequestEscalationsWarn {
	s.Threshold = &v
	return s
}

func (s *PutResourceMetricRuleRequestEscalationsWarn) SetTimes(v int32) *PutResourceMetricRuleRequestEscalationsWarn {
	s.Times = &v
	return s
}

type PutResourceMetricRuleRequestCompositeExpression struct {
	// The trigger conditions that are created in standard mode.
	ExpressionList []*PutResourceMetricRuleRequestCompositeExpressionExpressionList `json:"ExpressionList,omitempty" xml:"ExpressionList,omitempty" type:"Repeated"`
	// The relationship between the trigger conditions for multiple metrics. Valid value:
	//
	// 	- `&&`: An alert is triggered only if all metrics meet the trigger conditions. An alert is triggered only if the results of all expressions specified in the ExpressionList parameter are `true`.
	//
	// 	- `||`: An alert is triggered if one of the metrics meets the trigger conditions.
	//
	// example:
	//
	// ||
	ExpressionListJoin *string `json:"ExpressionListJoin,omitempty" xml:"ExpressionListJoin,omitempty"`
	// The trigger conditions that are created by using expressions. You can use expressions to create trigger conditions in the following scenarios:
	//
	// 	- Set an alert blacklist for specific resources. For example, if you specify `$instanceId != \\"i-io8kfvcpp7x5****\\" ``&&`` $Average > 50`, no alert is triggered when the `average metric value` of the `i-io8kfvcpp7x5****` instance exceeds 50.
	//
	// 	- Set a special alert threshold for a specified instance in the rule. For example, if you specify `$Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)`, an alert is triggered when the `average metric value` of the `i-io8kfvcpp7x5****` instance exceeds 80 or the `average metric value` of other instances exceeds 50.
	//
	// 	- Limit the number of instances whose metric values exceed the threshold. For example, if you specify `count($Average > 20) > 3`, an alert is triggered only when the `average metric value` of more than three instances exceeds 20.
	//
	// example:
	//
	// $Average > ($instanceId == \\"i-io8kfvcpp7x5****\\"? 80: 50)
	ExpressionRaw *string `json:"ExpressionRaw,omitempty" xml:"ExpressionRaw,omitempty"`
	// The alert level. Valid values:
	//
	// 	- Critical
	//
	// 	- Warn
	//
	// 	- Info
	//
	// example:
	//
	// Critical
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The number of consecutive triggers. If the number of times that the metric values meet the trigger conditions reaches the value of this parameter, CloudMonitor sends alert notifications.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRuleRequestCompositeExpression) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleRequestCompositeExpression) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleRequestCompositeExpression) SetExpressionList(v []*PutResourceMetricRuleRequestCompositeExpressionExpressionList) *PutResourceMetricRuleRequestCompositeExpression {
	s.ExpressionList = v
	return s
}

func (s *PutResourceMetricRuleRequestCompositeExpression) SetExpressionListJoin(v string) *PutResourceMetricRuleRequestCompositeExpression {
	s.ExpressionListJoin = &v
	return s
}

func (s *PutResourceMetricRuleRequestCompositeExpression) SetExpressionRaw(v string) *PutResourceMetricRuleRequestCompositeExpression {
	s.ExpressionRaw = &v
	return s
}

func (s *PutResourceMetricRuleRequestCompositeExpression) SetLevel(v string) *PutResourceMetricRuleRequestCompositeExpression {
	s.Level = &v
	return s
}

func (s *PutResourceMetricRuleRequestCompositeExpression) SetTimes(v int32) *PutResourceMetricRuleRequestCompositeExpression {
	s.Times = &v
	return s
}

type PutResourceMetricRuleRequestCompositeExpressionExpressionList struct {
	// The operator that is used to compare the metric value with the threshold. Valid value:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- EqualToThreshold: equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The metric that is used to monitor the cloud service.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The aggregation period of the metric.
	//
	// Unit: seconds.
	//
	// example:
	//
	// 60
	Period *int64 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The statistical method of the metric. Valid value:
	//
	// 	- $Maximum: the maximum value
	//
	// 	- $Minimum: the minimum value
	//
	// 	- $Average: the average value
	//
	// 	- $Availability: the availability rate (usually used for site monitoring)
	//
	// >  `$` is the prefix of the metric. For information about the Alibaba Cloud services that are supported by CloudMonitor, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// $Maximum
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The alert threshold.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
}

func (s PutResourceMetricRuleRequestCompositeExpressionExpressionList) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleRequestCompositeExpressionExpressionList) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleRequestCompositeExpressionExpressionList) SetComparisonOperator(v string) *PutResourceMetricRuleRequestCompositeExpressionExpressionList {
	s.ComparisonOperator = &v
	return s
}

func (s *PutResourceMetricRuleRequestCompositeExpressionExpressionList) SetMetricName(v string) *PutResourceMetricRuleRequestCompositeExpressionExpressionList {
	s.MetricName = &v
	return s
}

func (s *PutResourceMetricRuleRequestCompositeExpressionExpressionList) SetPeriod(v int64) *PutResourceMetricRuleRequestCompositeExpressionExpressionList {
	s.Period = &v
	return s
}

func (s *PutResourceMetricRuleRequestCompositeExpressionExpressionList) SetStatistics(v string) *PutResourceMetricRuleRequestCompositeExpressionExpressionList {
	s.Statistics = &v
	return s
}

func (s *PutResourceMetricRuleRequestCompositeExpressionExpressionList) SetThreshold(v string) *PutResourceMetricRuleRequestCompositeExpressionExpressionList {
	s.Threshold = &v
	return s
}

type PutResourceMetricRuleRequestLabels struct {
	// The tag key.
	//
	// example:
	//
	// tagKey1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// >  You can use a template parameter to specify a tag value. CloudMonitor replaces the value of the template parameter with an actual tag value.
	//
	// example:
	//
	// ECS
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PutResourceMetricRuleRequestLabels) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleRequestLabels) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleRequestLabels) SetKey(v string) *PutResourceMetricRuleRequestLabels {
	s.Key = &v
	return s
}

func (s *PutResourceMetricRuleRequestLabels) SetValue(v string) *PutResourceMetricRuleRequestLabels {
	s.Value = &v
	return s
}

type PutResourceMetricRuleRequestPrometheus struct {
	// The annotations of the Prometheus alert rule. When a Prometheus alert is triggered, the system renders the annotated keys and values to help you understand the metrics and alert rule.
	//
	// >  This parameter is equivalent to the annotations parameter of open source Prometheus.
	Annotations []*PutResourceMetricRuleRequestPrometheusAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Repeated"`
	// The alert level. Valid values:
	//
	// 	- Critical
	//
	// 	- Warn
	//
	// 	- Info
	//
	// example:
	//
	// Critical
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// PromQL statements are supported.
	//
	// >  The data obtained by using the PromQL query statement is the monitoring data. You must include the alert threshold in this statement.
	//
	// example:
	//
	// cpuUsage{instanceId="xxxx"}[1m]>90
	PromQL *string `json:"PromQL,omitempty" xml:"PromQL,omitempty"`
	// The number of consecutive triggers. If the number of times that the metric values meet the trigger conditions reaches the value of this parameter, CloudMonitor sends alert notifications.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRuleRequestPrometheus) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleRequestPrometheus) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleRequestPrometheus) SetAnnotations(v []*PutResourceMetricRuleRequestPrometheusAnnotations) *PutResourceMetricRuleRequestPrometheus {
	s.Annotations = v
	return s
}

func (s *PutResourceMetricRuleRequestPrometheus) SetLevel(v string) *PutResourceMetricRuleRequestPrometheus {
	s.Level = &v
	return s
}

func (s *PutResourceMetricRuleRequestPrometheus) SetPromQL(v string) *PutResourceMetricRuleRequestPrometheus {
	s.PromQL = &v
	return s
}

func (s *PutResourceMetricRuleRequestPrometheus) SetTimes(v int32) *PutResourceMetricRuleRequestPrometheus {
	s.Times = &v
	return s
}

type PutResourceMetricRuleRequestPrometheusAnnotations struct {
	// The key of the annotation.
	//
	// example:
	//
	// summary
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the annotation.
	//
	// example:
	//
	// {{ $labels.instance }} CPU usage above 10% {current value: {{ humanizePercentage $value }} }
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PutResourceMetricRuleRequestPrometheusAnnotations) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleRequestPrometheusAnnotations) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleRequestPrometheusAnnotations) SetKey(v string) *PutResourceMetricRuleRequestPrometheusAnnotations {
	s.Key = &v
	return s
}

func (s *PutResourceMetricRuleRequestPrometheusAnnotations) SetValue(v string) *PutResourceMetricRuleRequestPrometheusAnnotations {
	s.Value = &v
	return s
}

type PutResourceMetricRuleShrinkRequest struct {
	Escalations *PutResourceMetricRuleShrinkRequestEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Struct"`
	// The trigger conditions for multiple metrics.
	//
	// >  The trigger conditions for a single metric and multiple metrics are mutually exclusive. You cannot specify trigger conditions for a single metric and multiple metrics at the same time.
	CompositeExpressionShrink *string `json:"CompositeExpression,omitempty" xml:"CompositeExpression,omitempty"`
	// The alert contact groups. Alert notifications are sent to the alert contacts in the alert contact group.
	//
	// >  An alert contact group can contain one or more alert contacts. For information about how to create alert contacts and alert contact groups, see [PutContact](https://help.aliyun.com/document_detail/114923.html) and [PutContactGroup](https://help.aliyun.com/document_detail/114929.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS_Group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The period of time during which the alert rule is effective.
	//
	// example:
	//
	// 00:00-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// The subject of the alert notification email.
	EmailSubject *string `json:"EmailSubject,omitempty" xml:"EmailSubject,omitempty"`
	// The interval at which alerts are triggered based on the alert rule. Unit: seconds.
	//
	// >  For more information about how to query the statistical periods of metrics, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// 60
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// If the metric meets the specified condition in the alert rule and CloudMonitor sends an alert notification, the tag is also written to the metric and displayed in the alert notification.
	//
	// >  This parameter is equivalent to the Label parameter of Prometheus alerts.
	Labels []*PutResourceMetricRuleShrinkRequestLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The metric name. For more information about how to query metric names, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  If you create a Prometheus alert rule for Hybrid Cloud Monitoring, you must set this parameter to the name of the namespace. For more information about how to query the names of namespaces, see [DescribeHybridMonitorNamespaceList](https://help.aliyun.com/document_detail/428880.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service. For more information about how to query the namespaces of cloud services, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  If you create a Prometheus alert rule for Hybrid Cloud Monitoring, you must set this parameter to `acs_prometheus`.
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The method that is used to handle alerts when no monitoring data is found. Valid value:
	//
	// 	- KEEP_LAST_STATE (default): No operation is performed.
	//
	// 	- INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
	//
	// 	- OK: The status is considered normal.
	//
	// example:
	//
	// KEEP_LAST_STATE
	NoDataPolicy *string `json:"NoDataPolicy,omitempty" xml:"NoDataPolicy,omitempty"`
	// The period of time during which the alert rule is ineffective.
	//
	// example:
	//
	// 00:00-06:00
	NoEffectiveInterval *string `json:"NoEffectiveInterval,omitempty" xml:"NoEffectiveInterval,omitempty"`
	// The statistical period of the metric. Unit: seconds. The default value is the interval at which the monitoring data of the metric is collected.
	//
	// >  For more information about how to query the statistical periods of metrics, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// Prometheus alerts.
	//
	// >  This parameter is required only if you create a Prometheus alert rule for Hybrid Cloud Monitoring.
	PrometheusShrink *string `json:"Prometheus,omitempty" xml:"Prometheus,omitempty"`
	// The resource information. Examples: `[{"instanceId":"i-uf6j91r34rnwawoo****"}]` and `[{"userId":"100931896542****"}]`.
	//
	// For more information about the supported dimensions that are used to query resources, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// [{"instanceId":"i-uf6j91r34rnwawoo****"}]
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// The ID of the alert rule.
	//
	// You can specify a new ID or the ID of an existing alert rule. For more information about how to query the IDs of alert rules, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// >  If you specify a new ID, a threshold-triggered alert rule is created.
	//
	// This parameter is required.
	//
	// example:
	//
	// a151cd6023eacee2f0978e03863cc1697c89508****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// You can specify a new name or the name of an existing alert rule. For more information about how to query the names of alert rules, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// >  If you specify a new name, a threshold-triggered alert rule is created.
	//
	// This parameter is required.
	//
	// example:
	//
	// test123
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which new alert notifications are not sent even if the trigger conditions are met. Unit: seconds. Default value: 86400.
	//
	// >  If an alert is not cleared after the mute period ends, CloudMonitor resends an alert notification.
	//
	// example:
	//
	// 86400
	SilenceTime *int32 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.
	//
	// example:
	//
	// https://alert.aliyun.com.com:8080/callback
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s PutResourceMetricRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleShrinkRequest) SetEscalations(v *PutResourceMetricRuleShrinkRequestEscalations) *PutResourceMetricRuleShrinkRequest {
	s.Escalations = v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetCompositeExpressionShrink(v string) *PutResourceMetricRuleShrinkRequest {
	s.CompositeExpressionShrink = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetContactGroups(v string) *PutResourceMetricRuleShrinkRequest {
	s.ContactGroups = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetEffectiveInterval(v string) *PutResourceMetricRuleShrinkRequest {
	s.EffectiveInterval = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetEmailSubject(v string) *PutResourceMetricRuleShrinkRequest {
	s.EmailSubject = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetInterval(v string) *PutResourceMetricRuleShrinkRequest {
	s.Interval = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetLabels(v []*PutResourceMetricRuleShrinkRequestLabels) *PutResourceMetricRuleShrinkRequest {
	s.Labels = v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetMetricName(v string) *PutResourceMetricRuleShrinkRequest {
	s.MetricName = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetNamespace(v string) *PutResourceMetricRuleShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetNoDataPolicy(v string) *PutResourceMetricRuleShrinkRequest {
	s.NoDataPolicy = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetNoEffectiveInterval(v string) *PutResourceMetricRuleShrinkRequest {
	s.NoEffectiveInterval = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetPeriod(v string) *PutResourceMetricRuleShrinkRequest {
	s.Period = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetPrometheusShrink(v string) *PutResourceMetricRuleShrinkRequest {
	s.PrometheusShrink = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetResources(v string) *PutResourceMetricRuleShrinkRequest {
	s.Resources = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetRuleId(v string) *PutResourceMetricRuleShrinkRequest {
	s.RuleId = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetRuleName(v string) *PutResourceMetricRuleShrinkRequest {
	s.RuleName = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetSilenceTime(v int32) *PutResourceMetricRuleShrinkRequest {
	s.SilenceTime = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequest) SetWebhook(v string) *PutResourceMetricRuleShrinkRequest {
	s.Webhook = &v
	return s
}

type PutResourceMetricRuleShrinkRequestEscalations struct {
	Critical *PutResourceMetricRuleShrinkRequestEscalationsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	Info     *PutResourceMetricRuleShrinkRequestEscalationsInfo     `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	Warn     *PutResourceMetricRuleShrinkRequestEscalationsWarn     `json:"Warn,omitempty" xml:"Warn,omitempty" type:"Struct"`
}

func (s PutResourceMetricRuleShrinkRequestEscalations) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleShrinkRequestEscalations) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleShrinkRequestEscalations) SetCritical(v *PutResourceMetricRuleShrinkRequestEscalationsCritical) *PutResourceMetricRuleShrinkRequestEscalations {
	s.Critical = v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalations) SetInfo(v *PutResourceMetricRuleShrinkRequestEscalationsInfo) *PutResourceMetricRuleShrinkRequestEscalations {
	s.Info = v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalations) SetWarn(v *PutResourceMetricRuleShrinkRequestEscalationsWarn) *PutResourceMetricRuleShrinkRequestEscalations {
	s.Warn = v
	return s
}

type PutResourceMetricRuleShrinkRequestEscalationsCritical struct {
	// The operator that is used to compare the metric value with the threshold for Critical-level alerts. Valid value:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- EqualToThreshold: equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Critical-level alerts.
	//
	// The value of this parameter is determined by the `Statistics` column corresponding to the `MetricName` parameter of the specified cloud service. The value of this parameter can be Maximum, Minimum, or Average. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Critical-level alerts.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Critical-level alert is triggered.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRuleShrinkRequestEscalationsCritical) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleShrinkRequestEscalationsCritical) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsCritical) SetComparisonOperator(v string) *PutResourceMetricRuleShrinkRequestEscalationsCritical {
	s.ComparisonOperator = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsCritical) SetStatistics(v string) *PutResourceMetricRuleShrinkRequestEscalationsCritical {
	s.Statistics = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsCritical) SetThreshold(v string) *PutResourceMetricRuleShrinkRequestEscalationsCritical {
	s.Threshold = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsCritical) SetTimes(v int32) *PutResourceMetricRuleShrinkRequestEscalationsCritical {
	s.Times = &v
	return s
}

type PutResourceMetricRuleShrinkRequestEscalationsInfo struct {
	// The operator that is used to compare the metric value with the threshold for Info-level alerts. Valid value:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- EqualToThreshold: equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Info-level alerts.
	//
	// The value of this parameter is determined by the `Statistics` column corresponding to the `MetricName` parameter of the specified cloud service. The value of this parameter can be Maximum, Minimum, or Average. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Info-level alerts.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before an Info-level alert is triggered.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRuleShrinkRequestEscalationsInfo) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleShrinkRequestEscalationsInfo) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsInfo) SetComparisonOperator(v string) *PutResourceMetricRuleShrinkRequestEscalationsInfo {
	s.ComparisonOperator = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsInfo) SetStatistics(v string) *PutResourceMetricRuleShrinkRequestEscalationsInfo {
	s.Statistics = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsInfo) SetThreshold(v string) *PutResourceMetricRuleShrinkRequestEscalationsInfo {
	s.Threshold = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsInfo) SetTimes(v int32) *PutResourceMetricRuleShrinkRequestEscalationsInfo {
	s.Times = &v
	return s
}

type PutResourceMetricRuleShrinkRequestEscalationsWarn struct {
	// The operator that is used to compare the metric value with the threshold for Warn-level alerts. Valid value:
	//
	// 	- GreaterThanOrEqualToThreshold: greater than or equal to the threshold
	//
	// 	- GreaterThanThreshold: greater than the threshold
	//
	// 	- LessThanOrEqualToThreshold: less than or equal to the threshold
	//
	// 	- LessThanThreshold: less than the threshold
	//
	// 	- NotEqualToThreshold: not equal to the threshold
	//
	// 	- EqualToThreshold: equal to the threshold
	//
	// 	- GreaterThanYesterday: greater than the metric value at the same time yesterday
	//
	// 	- LessThanYesterday: less than the metric value at the same time yesterday
	//
	// 	- GreaterThanLastWeek: greater than the metric value at the same time last week
	//
	// 	- LessThanLastWeek: less than the metric value at the same time last week
	//
	// 	- GreaterThanLastPeriod: greater than the metric value in the last monitoring cycle
	//
	// 	- LessThanLastPeriod: less than the metric value in the last monitoring cycle
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// GreaterThanOrEqualToThreshold
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	// The statistical methods for Warn-level alerts.
	//
	// The value of this parameter is determined by the `Statistics` column corresponding to the `MetricName` parameter of the specified cloud service. The value of this parameter can be Maximum, Minimum, or Average. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// Average
	Statistics *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	// The threshold for Warn-level alerts.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 90
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// The consecutive number of times for which the metric value meets the alert condition before a Warn-level alert is triggered.
	//
	// >  You must select at least one of the Critical, Warn, and Info alert levels and specify the Statistics, ComparisonOperator, Threshold, and Times parameters for each alert level.
	//
	// example:
	//
	// 3
	Times *int32 `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRuleShrinkRequestEscalationsWarn) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleShrinkRequestEscalationsWarn) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsWarn) SetComparisonOperator(v string) *PutResourceMetricRuleShrinkRequestEscalationsWarn {
	s.ComparisonOperator = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsWarn) SetStatistics(v string) *PutResourceMetricRuleShrinkRequestEscalationsWarn {
	s.Statistics = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsWarn) SetThreshold(v string) *PutResourceMetricRuleShrinkRequestEscalationsWarn {
	s.Threshold = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestEscalationsWarn) SetTimes(v int32) *PutResourceMetricRuleShrinkRequestEscalationsWarn {
	s.Times = &v
	return s
}

type PutResourceMetricRuleShrinkRequestLabels struct {
	// The tag key.
	//
	// example:
	//
	// tagKey1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// >  You can use a template parameter to specify a tag value. CloudMonitor replaces the value of the template parameter with an actual tag value.
	//
	// example:
	//
	// ECS
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PutResourceMetricRuleShrinkRequestLabels) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleShrinkRequestLabels) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleShrinkRequestLabels) SetKey(v string) *PutResourceMetricRuleShrinkRequestLabels {
	s.Key = &v
	return s
}

func (s *PutResourceMetricRuleShrinkRequestLabels) SetValue(v string) *PutResourceMetricRuleShrinkRequestLabels {
	s.Value = &v
	return s
}

type PutResourceMetricRuleResponseBody struct {
	// The responses code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// The request processing has failed due to some unknown error.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 65D50468-ECEF-48F1-A6E1-D952E89D9436
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutResourceMetricRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleResponseBody) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleResponseBody) SetCode(v string) *PutResourceMetricRuleResponseBody {
	s.Code = &v
	return s
}

func (s *PutResourceMetricRuleResponseBody) SetMessage(v string) *PutResourceMetricRuleResponseBody {
	s.Message = &v
	return s
}

func (s *PutResourceMetricRuleResponseBody) SetRequestId(v string) *PutResourceMetricRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutResourceMetricRuleResponseBody) SetSuccess(v bool) *PutResourceMetricRuleResponseBody {
	s.Success = &v
	return s
}

type PutResourceMetricRuleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutResourceMetricRuleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutResourceMetricRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRuleResponse) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRuleResponse) SetHeaders(v map[string]*string) *PutResourceMetricRuleResponse {
	s.Headers = v
	return s
}

func (s *PutResourceMetricRuleResponse) SetStatusCode(v int32) *PutResourceMetricRuleResponse {
	s.StatusCode = &v
	return s
}

func (s *PutResourceMetricRuleResponse) SetBody(v *PutResourceMetricRuleResponseBody) *PutResourceMetricRuleResponse {
	s.Body = v
	return s
}

type PutResourceMetricRulesRequest struct {
	// The threshold-triggered alert rules.
	//
	// Valid values of N: 1 to 500.
	//
	// This parameter is required.
	Rules []*PutResourceMetricRulesRequestRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s PutResourceMetricRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesRequest) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesRequest) SetRules(v []*PutResourceMetricRulesRequestRules) *PutResourceMetricRulesRequest {
	s.Rules = v
	return s
}

type PutResourceMetricRulesRequestRules struct {
	Escalations *PutResourceMetricRulesRequestRulesEscalations `json:"Escalations,omitempty" xml:"Escalations,omitempty" type:"Struct"`
	// The alert contact groups. The alert notifications are sent to the alert contacts in the alert contact group.
	//
	// Valid values of N: 1 to 500.
	//
	// >  An alert contact group can contain one or more alert contacts. For information about how to create alert contacts and alert contact groups, see [PutContact](https://help.aliyun.com/document_detail/114923.html) and [PutContactGroup](https://help.aliyun.com/document_detail/114929.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ECS_Group
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	// The time period during which the alert rule is effective.
	//
	// Valid values of N: 1 to 500.
	//
	// example:
	//
	// 00:00-23:59
	EffectiveInterval *string `json:"EffectiveInterval,omitempty" xml:"EffectiveInterval,omitempty"`
	// The subject of the alert notification email.
	//
	// Valid values of N: 1 to 500.
	EmailSubject *string `json:"EmailSubject,omitempty" xml:"EmailSubject,omitempty"`
	// The interval at which alerts are triggered based on the alert rule.
	//
	// Unit: seconds.
	//
	// Valid values of N: 1 to 500.
	//
	// >  For information about how to query the statistical period of a metric, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// 60
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// If the metric meets the specified condition in the alert rule and CloudMonitor sends an alert notification, the tag is also written to the metric and displayed in the alert notification.
	Labels []*PutResourceMetricRulesRequestRulesLabels `json:"Labels,omitempty" xml:"Labels,omitempty" type:"Repeated"`
	// The metric name.
	//
	// Valid values of N: 1 to 500.
	//
	// For information about how to query the name of a metric, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// cpu_total
	MetricName *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	// The namespace of the cloud service.
	//
	// Valid values of N: 1 to 500.
	//
	// For information about how to query the namespace of a cloud service, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// acs_ecs_dashboard
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The method that is used to handle alerts when no monitoring data is found. Valid values:
	//
	// 	- KEEP_LAST_STATE (default): No operation is performed.
	//
	// 	- INSUFFICIENT_DATA: An alert whose content is "Insufficient data" is triggered.
	//
	// 	- OK: The status is considered normal.
	//
	// Valid values of N: 1 to 500.
	//
	// example:
	//
	// KEEP_LAST_STATE
	NoDataPolicy *string `json:"NoDataPolicy,omitempty" xml:"NoDataPolicy,omitempty"`
	// The time period during which the alert rule is ineffective.
	//
	// Valid values of N: 1 to 500.
	//
	// example:
	//
	// 00:00-06:00
	NoEffectiveInterval *string `json:"NoEffectiveInterval,omitempty" xml:"NoEffectiveInterval,omitempty"`
	// The statistical period of the metric.
	//
	// Unit: seconds. The default value is the interval at which the monitoring data of the metric is collected.
	//
	// Valid values of N: 1 to 500.
	//
	// >  For information about how to query the statistical period of a metric, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The information about the resource. Example: `[{"instanceId":"i-uf6j91r34rnwawoo****"}]` or `[{"userId":"100931896542****"}]`.
	//
	// Valid values of N: 1 to 500.
	//
	// For more information about the supported dimensions that are used to query resources, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// [{"instanceId":"i-uf6j91r34rnwawoo****"}]
	Resources *string `json:"Resources,omitempty" xml:"Resources,omitempty"`
	// The ID of the alert rule.
	//
	// Valid values of N: 1 to 500.
	//
	// You can specify a new ID or the ID of an existing alert rule. For information about how to query the ID of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// >  If you specify a new ID, a threshold-triggered alert rule is created.
	//
	// This parameter is required.
	//
	// example:
	//
	// a151cd6023eacee2f0978e03863cc1697c89508****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The name of the alert rule.
	//
	// Valid values of N: 1 to 500.
	//
	// You can specify a new name or the name of an existing alert rule. For information about how to query the name of an alert rule, see [DescribeMetricRuleList](https://help.aliyun.com/document_detail/114941.html).
	//
	// >  If you specify a new name, a threshold-triggered alert rule is created.
	//
	// This parameter is required.
	//
	// example:
	//
	// test123
	RuleName *string `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	// The mute period during which new alert notifications are not sent even if the trigger conditions are met.
	//
	// Unit: seconds. Default value: 86400.
	//
	// Valid values of N: 1 to 500.
	//
	// >  If an alert is not cleared after the mute period ends, CloudMonitor resends an alert notification.
	//
	// example:
	//
	// 86400
	SilenceTime *int32 `json:"SilenceTime,omitempty" xml:"SilenceTime,omitempty"`
	// The callback URL to which a POST request is sent when an alert is triggered based on the alert rule.
	//
	// Valid values of N: 1 to 500.
	//
	// example:
	//
	// https://alert.aliyun.com.com:8080/callback
	Webhook *string `json:"Webhook,omitempty" xml:"Webhook,omitempty"`
}

func (s PutResourceMetricRulesRequestRules) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesRequestRules) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesRequestRules) SetEscalations(v *PutResourceMetricRulesRequestRulesEscalations) *PutResourceMetricRulesRequestRules {
	s.Escalations = v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetContactGroups(v string) *PutResourceMetricRulesRequestRules {
	s.ContactGroups = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetEffectiveInterval(v string) *PutResourceMetricRulesRequestRules {
	s.EffectiveInterval = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetEmailSubject(v string) *PutResourceMetricRulesRequestRules {
	s.EmailSubject = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetInterval(v string) *PutResourceMetricRulesRequestRules {
	s.Interval = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetLabels(v []*PutResourceMetricRulesRequestRulesLabels) *PutResourceMetricRulesRequestRules {
	s.Labels = v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetMetricName(v string) *PutResourceMetricRulesRequestRules {
	s.MetricName = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetNamespace(v string) *PutResourceMetricRulesRequestRules {
	s.Namespace = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetNoDataPolicy(v string) *PutResourceMetricRulesRequestRules {
	s.NoDataPolicy = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetNoEffectiveInterval(v string) *PutResourceMetricRulesRequestRules {
	s.NoEffectiveInterval = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetPeriod(v string) *PutResourceMetricRulesRequestRules {
	s.Period = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetResources(v string) *PutResourceMetricRulesRequestRules {
	s.Resources = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetRuleId(v string) *PutResourceMetricRulesRequestRules {
	s.RuleId = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetRuleName(v string) *PutResourceMetricRulesRequestRules {
	s.RuleName = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetSilenceTime(v int32) *PutResourceMetricRulesRequestRules {
	s.SilenceTime = &v
	return s
}

func (s *PutResourceMetricRulesRequestRules) SetWebhook(v string) *PutResourceMetricRulesRequestRules {
	s.Webhook = &v
	return s
}

type PutResourceMetricRulesRequestRulesEscalations struct {
	Critical *PutResourceMetricRulesRequestRulesEscalationsCritical `json:"Critical,omitempty" xml:"Critical,omitempty" type:"Struct"`
	Info     *PutResourceMetricRulesRequestRulesEscalationsInfo     `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	Warn     *PutResourceMetricRulesRequestRulesEscalationsWarn     `json:"Warn,omitempty" xml:"Warn,omitempty" type:"Struct"`
}

func (s PutResourceMetricRulesRequestRulesEscalations) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesRequestRulesEscalations) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesRequestRulesEscalations) SetCritical(v *PutResourceMetricRulesRequestRulesEscalationsCritical) *PutResourceMetricRulesRequestRulesEscalations {
	s.Critical = v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalations) SetInfo(v *PutResourceMetricRulesRequestRulesEscalationsInfo) *PutResourceMetricRulesRequestRulesEscalations {
	s.Info = v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalations) SetWarn(v *PutResourceMetricRulesRequestRulesEscalationsWarn) *PutResourceMetricRulesRequestRulesEscalations {
	s.Warn = v
	return s
}

type PutResourceMetricRulesRequestRulesEscalationsCritical struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *int32  `json:"N,omitempty" xml:"N,omitempty"`
	PreCondition       *string `json:"PreCondition,omitempty" xml:"PreCondition,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRulesRequestRulesEscalationsCritical) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesRequestRulesEscalationsCritical) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesRequestRulesEscalationsCritical) SetComparisonOperator(v string) *PutResourceMetricRulesRequestRulesEscalationsCritical {
	s.ComparisonOperator = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsCritical) SetN(v int32) *PutResourceMetricRulesRequestRulesEscalationsCritical {
	s.N = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsCritical) SetPreCondition(v string) *PutResourceMetricRulesRequestRulesEscalationsCritical {
	s.PreCondition = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsCritical) SetStatistics(v string) *PutResourceMetricRulesRequestRulesEscalationsCritical {
	s.Statistics = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsCritical) SetThreshold(v string) *PutResourceMetricRulesRequestRulesEscalationsCritical {
	s.Threshold = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsCritical) SetTimes(v int32) *PutResourceMetricRulesRequestRulesEscalationsCritical {
	s.Times = &v
	return s
}

type PutResourceMetricRulesRequestRulesEscalationsInfo struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *int32  `json:"N,omitempty" xml:"N,omitempty"`
	PreCondition       *string `json:"PreCondition,omitempty" xml:"PreCondition,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRulesRequestRulesEscalationsInfo) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesRequestRulesEscalationsInfo) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesRequestRulesEscalationsInfo) SetComparisonOperator(v string) *PutResourceMetricRulesRequestRulesEscalationsInfo {
	s.ComparisonOperator = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsInfo) SetN(v int32) *PutResourceMetricRulesRequestRulesEscalationsInfo {
	s.N = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsInfo) SetPreCondition(v string) *PutResourceMetricRulesRequestRulesEscalationsInfo {
	s.PreCondition = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsInfo) SetStatistics(v string) *PutResourceMetricRulesRequestRulesEscalationsInfo {
	s.Statistics = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsInfo) SetThreshold(v string) *PutResourceMetricRulesRequestRulesEscalationsInfo {
	s.Threshold = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsInfo) SetTimes(v int32) *PutResourceMetricRulesRequestRulesEscalationsInfo {
	s.Times = &v
	return s
}

type PutResourceMetricRulesRequestRulesEscalationsWarn struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	N                  *int32  `json:"N,omitempty" xml:"N,omitempty"`
	PreCondition       *string `json:"PreCondition,omitempty" xml:"PreCondition,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Times              *int32  `json:"Times,omitempty" xml:"Times,omitempty"`
}

func (s PutResourceMetricRulesRequestRulesEscalationsWarn) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesRequestRulesEscalationsWarn) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesRequestRulesEscalationsWarn) SetComparisonOperator(v string) *PutResourceMetricRulesRequestRulesEscalationsWarn {
	s.ComparisonOperator = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsWarn) SetN(v int32) *PutResourceMetricRulesRequestRulesEscalationsWarn {
	s.N = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsWarn) SetPreCondition(v string) *PutResourceMetricRulesRequestRulesEscalationsWarn {
	s.PreCondition = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsWarn) SetStatistics(v string) *PutResourceMetricRulesRequestRulesEscalationsWarn {
	s.Statistics = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsWarn) SetThreshold(v string) *PutResourceMetricRulesRequestRulesEscalationsWarn {
	s.Threshold = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesEscalationsWarn) SetTimes(v int32) *PutResourceMetricRulesRequestRulesEscalationsWarn {
	s.Times = &v
	return s
}

type PutResourceMetricRulesRequestRulesLabels struct {
	// The tag key.
	//
	// example:
	//
	// tagKey1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// >  You can use a template parameter to specify a tag value. CloudMonitor replaces the value of the template parameter with an actual tag value.
	//
	// example:
	//
	// ECS
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s PutResourceMetricRulesRequestRulesLabels) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesRequestRulesLabels) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesRequestRulesLabels) SetKey(v string) *PutResourceMetricRulesRequestRulesLabels {
	s.Key = &v
	return s
}

func (s *PutResourceMetricRulesRequestRulesLabels) SetValue(v string) *PutResourceMetricRulesRequestRulesLabels {
	s.Value = &v
	return s
}

type PutResourceMetricRulesResponseBody struct {
	// The response code.
	//
	// >  The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The alert rules that failed to be created for the resource.
	FailedListResult *PutResourceMetricRulesResponseBodyFailedListResult `json:"FailedListResult,omitempty" xml:"FailedListResult,omitempty" type:"Struct"`
	// The error message returned.
	//
	// example:
	//
	// The request processing has failed due to some unknown error.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 15D1440E-BF24-5A41-93E4-36864635179E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutResourceMetricRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesResponseBody) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesResponseBody) SetCode(v string) *PutResourceMetricRulesResponseBody {
	s.Code = &v
	return s
}

func (s *PutResourceMetricRulesResponseBody) SetFailedListResult(v *PutResourceMetricRulesResponseBodyFailedListResult) *PutResourceMetricRulesResponseBody {
	s.FailedListResult = v
	return s
}

func (s *PutResourceMetricRulesResponseBody) SetMessage(v string) *PutResourceMetricRulesResponseBody {
	s.Message = &v
	return s
}

func (s *PutResourceMetricRulesResponseBody) SetRequestId(v string) *PutResourceMetricRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutResourceMetricRulesResponseBody) SetSuccess(v bool) *PutResourceMetricRulesResponseBody {
	s.Success = &v
	return s
}

type PutResourceMetricRulesResponseBodyFailedListResult struct {
	Target []*PutResourceMetricRulesResponseBodyFailedListResultTarget `json:"Target,omitempty" xml:"Target,omitempty" type:"Repeated"`
}

func (s PutResourceMetricRulesResponseBodyFailedListResult) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesResponseBodyFailedListResult) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesResponseBodyFailedListResult) SetTarget(v []*PutResourceMetricRulesResponseBodyFailedListResultTarget) *PutResourceMetricRulesResponseBodyFailedListResult {
	s.Target = v
	return s
}

type PutResourceMetricRulesResponseBodyFailedListResultTarget struct {
	// The alert rule that failed to be created.
	Result *PutResourceMetricRulesResponseBodyFailedListResultTargetResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// The ID of the alert rule.
	//
	// example:
	//
	// a151cd6023eacee2f0978e03863cc1697c89508****
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s PutResourceMetricRulesResponseBodyFailedListResultTarget) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesResponseBodyFailedListResultTarget) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesResponseBodyFailedListResultTarget) SetResult(v *PutResourceMetricRulesResponseBodyFailedListResultTargetResult) *PutResourceMetricRulesResponseBodyFailedListResultTarget {
	s.Result = v
	return s
}

func (s *PutResourceMetricRulesResponseBodyFailedListResultTarget) SetRuleId(v string) *PutResourceMetricRulesResponseBodyFailedListResultTarget {
	s.RuleId = &v
	return s
}

type PutResourceMetricRulesResponseBodyFailedListResultTargetResult struct {
	// The response code.
	//
	// example:
	//
	// 404
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// The request processing has failed due to some unknown error.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// false
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PutResourceMetricRulesResponseBodyFailedListResultTargetResult) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesResponseBodyFailedListResultTargetResult) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesResponseBodyFailedListResultTargetResult) SetCode(v string) *PutResourceMetricRulesResponseBodyFailedListResultTargetResult {
	s.Code = &v
	return s
}

func (s *PutResourceMetricRulesResponseBodyFailedListResultTargetResult) SetMessage(v string) *PutResourceMetricRulesResponseBodyFailedListResultTargetResult {
	s.Message = &v
	return s
}

func (s *PutResourceMetricRulesResponseBodyFailedListResultTargetResult) SetSuccess(v bool) *PutResourceMetricRulesResponseBodyFailedListResultTargetResult {
	s.Success = &v
	return s
}

type PutResourceMetricRulesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutResourceMetricRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutResourceMetricRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s PutResourceMetricRulesResponse) GoString() string {
	return s.String()
}

func (s *PutResourceMetricRulesResponse) SetHeaders(v map[string]*string) *PutResourceMetricRulesResponse {
	s.Headers = v
	return s
}

func (s *PutResourceMetricRulesResponse) SetStatusCode(v int32) *PutResourceMetricRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *PutResourceMetricRulesResponse) SetBody(v *PutResourceMetricRulesResponseBody) *PutResourceMetricRulesResponse {
	s.Body = v
	return s
}

type RemoveTagsRequest struct {
	// The IDs of the application groups.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12345
	GroupIds []*string `json:"GroupIds,omitempty" xml:"GroupIds,omitempty" type:"Repeated"`
	RegionId *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tags.
	//
	// This parameter is required.
	Tag []*RemoveTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s RemoveTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsRequest) GoString() string {
	return s.String()
}

func (s *RemoveTagsRequest) SetGroupIds(v []*string) *RemoveTagsRequest {
	s.GroupIds = v
	return s
}

func (s *RemoveTagsRequest) SetRegionId(v string) *RemoveTagsRequest {
	s.RegionId = &v
	return s
}

func (s *RemoveTagsRequest) SetTag(v []*RemoveTagsRequestTag) *RemoveTagsRequest {
	s.Tag = v
	return s
}

type RemoveTagsRequestTag struct {
	// The tag key.
	//
	// > The tag key (`Tag.N.Key`) and tag value (`Tag.N.Value`) must be specified at the same time.
	//
	// This parameter is required.
	//
	// example:
	//
	// Key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// > The tag key (`Tag.N.Key`) and tag value (`Tag.N.Value`) must be specified at the same time.
	//
	// This parameter is required.
	//
	// example:
	//
	// Value1
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s RemoveTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsRequestTag) GoString() string {
	return s.String()
}

func (s *RemoveTagsRequestTag) SetKey(v string) *RemoveTagsRequestTag {
	s.Key = &v
	return s
}

func (s *RemoveTagsRequestTag) SetValue(v string) *RemoveTagsRequestTag {
	s.Value = &v
	return s
}

type RemoveTagsResponseBody struct {
	// The status code.
	//
	// > The status code 200 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message.
	//
	// example:
	//
	// Illegal parameters.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 195390D2-69D0-4D9E-81AA-A7F5BC1B91EB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
	// The deleted tags.
	Tag *RemoveTagsResponseBodyTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Struct"`
}

func (s RemoveTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveTagsResponseBody) SetCode(v string) *RemoveTagsResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveTagsResponseBody) SetMessage(v string) *RemoveTagsResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveTagsResponseBody) SetRequestId(v string) *RemoveTagsResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveTagsResponseBody) SetSuccess(v bool) *RemoveTagsResponseBody {
	s.Success = &v
	return s
}

func (s *RemoveTagsResponseBody) SetTag(v *RemoveTagsResponseBodyTag) *RemoveTagsResponseBody {
	s.Tag = v
	return s
}

type RemoveTagsResponseBodyTag struct {
	Tags []*string `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s RemoveTagsResponseBodyTag) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsResponseBodyTag) GoString() string {
	return s.String()
}

func (s *RemoveTagsResponseBodyTag) SetTags(v []*string) *RemoveTagsResponseBodyTag {
	s.Tags = v
	return s
}

type RemoveTagsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveTagsResponse) GoString() string {
	return s.String()
}

func (s *RemoveTagsResponse) SetHeaders(v map[string]*string) *RemoveTagsResponse {
	s.Headers = v
	return s
}

func (s *RemoveTagsResponse) SetStatusCode(v int32) *RemoveTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveTagsResponse) SetBody(v *RemoveTagsResponseBody) *RemoveTagsResponse {
	s.Body = v
	return s
}

type SendDryRunSystemEventRequest struct {
	// The content of the system event.
	//
	// >  The value of this parameter is a JSON object. We recommend that you include the `product`, `resourceId`, and `regionId` fields in the JSON object.
	//
	// example:
	//
	// {"product":"CloudMonitor","resourceId":"acs:ecs:cn-hongkong:173651113438****:instance/{instanceId}","level":"CRITICAL","instanceName":"instanceName","regionId":"cn-hangzhou","name":"Agent_Status_Stopped","content":{"ipGroup":"0.0.0.0,0.0.0.1","tianjimonVersion":"1.2.11"},"status":"stopped"}
	EventContent *string `json:"EventContent,omitempty" xml:"EventContent,omitempty"`
	// The name of the system event.
	//
	// >  For more information, see [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// Agent_Status_Stopped
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The ID of the application group.
	//
	// example:
	//
	// 123456
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the cloud service.
	//
	// >  For information about the system events supported by Cloud Monitor for Alibaba Cloud services, see [System events](https://help.aliyun.com/document_detail/167388.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// ecs
	Product  *string `json:"Product,omitempty" xml:"Product,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SendDryRunSystemEventRequest) String() string {
	return tea.Prettify(s)
}

func (s SendDryRunSystemEventRequest) GoString() string {
	return s.String()
}

func (s *SendDryRunSystemEventRequest) SetEventContent(v string) *SendDryRunSystemEventRequest {
	s.EventContent = &v
	return s
}

func (s *SendDryRunSystemEventRequest) SetEventName(v string) *SendDryRunSystemEventRequest {
	s.EventName = &v
	return s
}

func (s *SendDryRunSystemEventRequest) SetGroupId(v string) *SendDryRunSystemEventRequest {
	s.GroupId = &v
	return s
}

func (s *SendDryRunSystemEventRequest) SetProduct(v string) *SendDryRunSystemEventRequest {
	s.Product = &v
	return s
}

func (s *SendDryRunSystemEventRequest) SetRegionId(v string) *SendDryRunSystemEventRequest {
	s.RegionId = &v
	return s
}

type SendDryRunSystemEventResponseBody struct {
	// The HTTP status code.
	//
	// >  The status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 486029C9-53E1-44B4-85A8-16A571A043FD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SendDryRunSystemEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendDryRunSystemEventResponseBody) GoString() string {
	return s.String()
}

func (s *SendDryRunSystemEventResponseBody) SetCode(v string) *SendDryRunSystemEventResponseBody {
	s.Code = &v
	return s
}

func (s *SendDryRunSystemEventResponseBody) SetMessage(v string) *SendDryRunSystemEventResponseBody {
	s.Message = &v
	return s
}

func (s *SendDryRunSystemEventResponseBody) SetRequestId(v string) *SendDryRunSystemEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendDryRunSystemEventResponseBody) SetSuccess(v string) *SendDryRunSystemEventResponseBody {
	s.Success = &v
	return s
}

type SendDryRunSystemEventResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendDryRunSystemEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendDryRunSystemEventResponse) String() string {
	return tea.Prettify(s)
}

func (s SendDryRunSystemEventResponse) GoString() string {
	return s.String()
}

func (s *SendDryRunSystemEventResponse) SetHeaders(v map[string]*string) *SendDryRunSystemEventResponse {
	s.Headers = v
	return s
}

func (s *SendDryRunSystemEventResponse) SetStatusCode(v int32) *SendDryRunSystemEventResponse {
	s.StatusCode = &v
	return s
}

func (s *SendDryRunSystemEventResponse) SetBody(v *SendDryRunSystemEventResponseBody) *SendDryRunSystemEventResponse {
	s.Body = v
	return s
}

type UninstallMonitoringAgentRequest struct {
	// The ID of the host.
	//
	// This parameter is required.
	//
	// example:
	//
	// host-****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s UninstallMonitoringAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s UninstallMonitoringAgentRequest) GoString() string {
	return s.String()
}

func (s *UninstallMonitoringAgentRequest) SetInstanceId(v string) *UninstallMonitoringAgentRequest {
	s.InstanceId = &v
	return s
}

func (s *UninstallMonitoringAgentRequest) SetRegionId(v string) *UninstallMonitoringAgentRequest {
	s.RegionId = &v
	return s
}

type UninstallMonitoringAgentResponseBody struct {
	// The HTTP status code.
	//
	// >  The HTTP status code 200 indicates that the call was successful.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// example:
	//
	// Successfully
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 466902B9-2842-40B0-B796-00FE772B6EF3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful. Valid values:
	//
	// 	- true: The call was successful.
	//
	// 	- false: The call failed.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UninstallMonitoringAgentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UninstallMonitoringAgentResponseBody) GoString() string {
	return s.String()
}

func (s *UninstallMonitoringAgentResponseBody) SetCode(v string) *UninstallMonitoringAgentResponseBody {
	s.Code = &v
	return s
}

func (s *UninstallMonitoringAgentResponseBody) SetMessage(v string) *UninstallMonitoringAgentResponseBody {
	s.Message = &v
	return s
}

func (s *UninstallMonitoringAgentResponseBody) SetRequestId(v string) *UninstallMonitoringAgentResponseBody {
	s.RequestId = &v
	return s
}

func (s *UninstallMonitoringAgentResponseBody) SetSuccess(v bool) *UninstallMonitoringAgentResponseBody {
	s.Success = &v
	return s
}

type UninstallMonitoringAgentResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UninstallMonitoringAgentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UninstallMonitoringAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s UninstallMonitoringAgentResponse) GoString() string {
	return s.String()
}

func (s *UninstallMonitoringAgentResponse) SetHeaders(v map[string]*string) *UninstallMonitoringAgentResponse {
	s.Headers = v
	return s
}

func (s *UninstallMonitoringAgentResponse) SetStatusCode(v int32) *UninstallMonitoringAgentResponse {
	s.StatusCode = &v
	return s
}

func (s *UninstallMonitoringAgentResponse) SetBody(v *UninstallMonitoringAgentResponseBody) *UninstallMonitoringAgentResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("cms"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds tags to an application group.
//
// Description:
//
// This topic provides an example on how to add a tag to an application group whose ID is `7301****`. In this example, the key of the tag is `key1` and the value of the tag is `value1`.
//
// @param request - AddTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddTagsResponse
func (client *Client) AddTagsWithOptions(request *AddTagsRequest, runtime *util.RuntimeOptions) (_result *AddTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupIds)) {
		query["GroupIds"] = request.GroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTags"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds tags to an application group.
//
// Description:
//
// This topic provides an example on how to add a tag to an application group whose ID is `7301****`. In this example, the key of the tag is `key1` and the value of the tag is `value1`.
//
// @param request - AddTagsRequest
//
// @return AddTagsResponse
func (client *Client) AddTags(request *AddTagsRequest) (_result *AddTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTagsResponse{}
	_body, _err := client.AddTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Applies an alert template to an application group to generate an alert rule.
//
// Description:
//
// In this example, the `700****` alert template is applied to the `123456` application group. For the generated alert rule, the ID is `applyTemplate8ab74c6b-9f27-47ab-8841-de01dc08****`, and the name is `test123`.
//
// @param request - ApplyMetricRuleTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyMetricRuleTemplateResponse
func (client *Client) ApplyMetricRuleTemplateWithOptions(request *ApplyMetricRuleTemplateRequest, runtime *util.RuntimeOptions) (_result *ApplyMetricRuleTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppendMode)) {
		query["AppendMode"] = request.AppendMode
	}

	if !tea.BoolValue(util.IsUnset(request.ApplyMode)) {
		query["ApplyMode"] = request.ApplyMode
	}

	if !tea.BoolValue(util.IsUnset(request.EnableEndTime)) {
		query["EnableEndTime"] = request.EnableEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnableStartTime)) {
		query["EnableStartTime"] = request.EnableStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyLevel)) {
		query["NotifyLevel"] = request.NotifyLevel
	}

	if !tea.BoolValue(util.IsUnset(request.SilenceTime)) {
		query["SilenceTime"] = request.SilenceTime
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateIds)) {
		query["TemplateIds"] = request.TemplateIds
	}

	if !tea.BoolValue(util.IsUnset(request.Webhook)) {
		query["Webhook"] = request.Webhook
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyMetricRuleTemplate"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyMetricRuleTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Applies an alert template to an application group to generate an alert rule.
//
// Description:
//
// In this example, the `700****` alert template is applied to the `123456` application group. For the generated alert rule, the ID is `applyTemplate8ab74c6b-9f27-47ab-8841-de01dc08****`, and the name is `test123`.
//
// @param request - ApplyMetricRuleTemplateRequest
//
// @return ApplyMetricRuleTemplateResponse
func (client *Client) ApplyMetricRuleTemplate(request *ApplyMetricRuleTemplateRequest) (_result *ApplyMetricRuleTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyMetricRuleTemplateResponse{}
	_body, _err := client.ApplyMetricRuleTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates site monitoring tasks.
//
// Description:
//
// This topic provides an example on how to create a site monitoring task named `HangZhou_ECS1`. The URL that is monitored by the task is `https://www.aliyun.com` and the type of the task is `HTTP`. The returned result shows that the site monitoring task is created. The name of the site monitoring task is `HangZhou_ECS1` and the task ID is `679fbe4f-b80b-4706-91b2-5427b43e****`.
//
// @param request - BatchCreateInstantSiteMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchCreateInstantSiteMonitorResponse
func (client *Client) BatchCreateInstantSiteMonitorWithOptions(request *BatchCreateInstantSiteMonitorRequest, runtime *util.RuntimeOptions) (_result *BatchCreateInstantSiteMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskList)) {
		query["TaskList"] = request.TaskList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchCreateInstantSiteMonitor"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchCreateInstantSiteMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates site monitoring tasks.
//
// Description:
//
// This topic provides an example on how to create a site monitoring task named `HangZhou_ECS1`. The URL that is monitored by the task is `https://www.aliyun.com` and the type of the task is `HTTP`. The returned result shows that the site monitoring task is created. The name of the site monitoring task is `HangZhou_ECS1` and the task ID is `679fbe4f-b80b-4706-91b2-5427b43e****`.
//
// @param request - BatchCreateInstantSiteMonitorRequest
//
// @return BatchCreateInstantSiteMonitorResponse
func (client *Client) BatchCreateInstantSiteMonitor(request *BatchCreateInstantSiteMonitorRequest) (_result *BatchCreateInstantSiteMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchCreateInstantSiteMonitorResponse{}
	_body, _err := client.BatchCreateInstantSiteMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Exports the monitoring data that is defined in the Cursor operation.
//
// Description:
//
// ### [](#)Prerequisites
//
// The `Cursor` information is returned by calling the [Cursor](https://help.aliyun.com/document_detail/2330730.html) operation.
//
// ### [](#)Description
//
// This topic provides an example on how to export the monitoring data of the `cpu_idle` metric for Elastic Compute Service (ECS). The namespace of ECS is `acs_ecs_dashboard`. The `Cursor` information is specified. A maximum of 1,000 data entries can be returned in each response.
//
// @param tmpReq - BatchExportRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchExportResponse
func (client *Client) BatchExportWithOptions(tmpReq *BatchExportRequest, runtime *util.RuntimeOptions) (_result *BatchExportResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchExportShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Measurements)) {
		request.MeasurementsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Measurements, tea.String("Measurements"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cursor)) {
		body["Cursor"] = request.Cursor
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		body["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.MeasurementsShrink)) {
		body["Measurements"] = request.MeasurementsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Metric)) {
		body["Metric"] = request.Metric
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchExport"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchExportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Exports the monitoring data that is defined in the Cursor operation.
//
// Description:
//
// ### [](#)Prerequisites
//
// The `Cursor` information is returned by calling the [Cursor](https://help.aliyun.com/document_detail/2330730.html) operation.
//
// ### [](#)Description
//
// This topic provides an example on how to export the monitoring data of the `cpu_idle` metric for Elastic Compute Service (ECS). The namespace of ECS is `acs_ecs_dashboard`. The `Cursor` information is specified. A maximum of 1,000 data entries can be returned in each response.
//
// @param request - BatchExportRequest
//
// @return BatchExportResponse
func (client *Client) BatchExport(request *BatchExportRequest) (_result *BatchExportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchExportResponse{}
	_body, _err := client.BatchExportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an application group based on the tags of cloud resources.
//
// Description:
//
// This operation is available for Elastic Compute Service (ECS), ApsaraDB RDS, and Server Load Balancer (SLB).
//
// This topic provides an example to show how to create an application group for resources whose tag key is `ecs_instance`. In this example, the alert contact group of the application group is `ECS_Group`.
//
// @param request - CreateDynamicTagGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDynamicTagGroupResponse
func (client *Client) CreateDynamicTagGroupWithOptions(request *CreateDynamicTagGroupRequest, runtime *util.RuntimeOptions) (_result *CreateDynamicTagGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupList)) {
		query["ContactGroupList"] = request.ContactGroupList
	}

	if !tea.BoolValue(util.IsUnset(request.EnableInstallAgent)) {
		query["EnableInstallAgent"] = request.EnableInstallAgent
	}

	if !tea.BoolValue(util.IsUnset(request.EnableSubscribeEvent)) {
		query["EnableSubscribeEvent"] = request.EnableSubscribeEvent
	}

	if !tea.BoolValue(util.IsUnset(request.MatchExpress)) {
		query["MatchExpress"] = request.MatchExpress
	}

	if !tea.BoolValue(util.IsUnset(request.MatchExpressFilterRelation)) {
		query["MatchExpressFilterRelation"] = request.MatchExpressFilterRelation
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	if !tea.BoolValue(util.IsUnset(request.TagRegionId)) {
		query["TagRegionId"] = request.TagRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateIdList)) {
		query["TemplateIdList"] = request.TemplateIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDynamicTagGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDynamicTagGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an application group based on the tags of cloud resources.
//
// Description:
//
// This operation is available for Elastic Compute Service (ECS), ApsaraDB RDS, and Server Load Balancer (SLB).
//
// This topic provides an example to show how to create an application group for resources whose tag key is `ecs_instance`. In this example, the alert contact group of the application group is `ECS_Group`.
//
// @param request - CreateDynamicTagGroupRequest
//
// @return CreateDynamicTagGroupResponse
func (client *Client) CreateDynamicTagGroup(request *CreateDynamicTagGroupRequest) (_result *CreateDynamicTagGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDynamicTagGroupResponse{}
	_body, _err := client.CreateDynamicTagGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates one or more alert rules for a specified application group.
//
// Description:
//
// This topic provides an example to show how to create an alert rule for the `cpu_total` metric of Elastic Compute Service (ECS) in the `123456` application group. The ID of the alert rule is `456789`. The name of the alert rule is `ECS_Rule1`. The alert level is `Critical`. The statistical method is `Average`. The comparison operator is `GreaterThanOrEqualToThreshold`. The alert threshold is `90`. The number of alert retries is `3`. The response shows that the alert rule named `ECS_Rule1` is created.
//
// @param request - CreateGroupMetricRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateGroupMetricRulesResponse
func (client *Client) CreateGroupMetricRulesWithOptions(request *CreateGroupMetricRulesRequest, runtime *util.RuntimeOptions) (_result *CreateGroupMetricRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupMetricRules)) {
		query["GroupMetricRules"] = request.GroupMetricRules
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateGroupMetricRules"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateGroupMetricRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates one or more alert rules for a specified application group.
//
// Description:
//
// This topic provides an example to show how to create an alert rule for the `cpu_total` metric of Elastic Compute Service (ECS) in the `123456` application group. The ID of the alert rule is `456789`. The name of the alert rule is `ECS_Rule1`. The alert level is `Critical`. The statistical method is `Average`. The comparison operator is `GreaterThanOrEqualToThreshold`. The alert threshold is `90`. The number of alert retries is `3`. The response shows that the alert rule named `ECS_Rule1` is created.
//
// @param request - CreateGroupMetricRulesRequest
//
// @return CreateGroupMetricRulesResponse
func (client *Client) CreateGroupMetricRules(request *CreateGroupMetricRulesRequest) (_result *CreateGroupMetricRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateGroupMetricRulesResponse{}
	_body, _err := client.CreateGroupMetricRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a process monitoring task for an application group.
//
// @param request - CreateGroupMonitoringAgentProcessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateGroupMonitoringAgentProcessResponse
func (client *Client) CreateGroupMonitoringAgentProcessWithOptions(request *CreateGroupMonitoringAgentProcessRequest, runtime *util.RuntimeOptions) (_result *CreateGroupMonitoringAgentProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertConfig)) {
		query["AlertConfig"] = request.AlertConfig
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.MatchExpress)) {
		query["MatchExpress"] = request.MatchExpress
	}

	if !tea.BoolValue(util.IsUnset(request.MatchExpressFilterRelation)) {
		query["MatchExpressFilterRelation"] = request.MatchExpressFilterRelation
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessName)) {
		query["ProcessName"] = request.ProcessName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateGroupMonitoringAgentProcess"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateGroupMonitoringAgentProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a process monitoring task for an application group.
//
// @param request - CreateGroupMonitoringAgentProcessRequest
//
// @return CreateGroupMonitoringAgentProcessResponse
func (client *Client) CreateGroupMonitoringAgentProcess(request *CreateGroupMonitoringAgentProcessRequest) (_result *CreateGroupMonitoringAgentProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateGroupMonitoringAgentProcessResponse{}
	_body, _err := client.CreateGroupMonitoringAgentProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an availability monitoring task.
//
// Description:
//
// This topic provides an example on how to create an availability monitoring task named `task1` in an application group named `123456`. The TaskType parameter of the task is set to `HTTP`. After you start the task, the system sends alerts by using the specified email address and DingTalk chatbot.
//
// @param request - CreateHostAvailabilityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHostAvailabilityResponse
func (client *Client) CreateHostAvailabilityWithOptions(request *CreateHostAvailabilityRequest, runtime *util.RuntimeOptions) (_result *CreateHostAvailabilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertConfigEscalationList)) {
		query["AlertConfigEscalationList"] = request.AlertConfigEscalationList
	}

	if !tea.BoolValue(util.IsUnset(request.AlertConfigTargetList)) {
		query["AlertConfigTargetList"] = request.AlertConfigTargetList
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceList)) {
		query["InstanceList"] = request.InstanceList
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskScope)) {
		query["TaskScope"] = request.TaskScope
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.AlertConfig)) {
		query["AlertConfig"] = request.AlertConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TaskOption)) {
		query["TaskOption"] = request.TaskOption
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHostAvailability"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHostAvailabilityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an availability monitoring task.
//
// Description:
//
// This topic provides an example on how to create an availability monitoring task named `task1` in an application group named `123456`. The TaskType parameter of the task is set to `HTTP`. After you start the task, the system sends alerts by using the specified email address and DingTalk chatbot.
//
// @param request - CreateHostAvailabilityRequest
//
// @return CreateHostAvailabilityResponse
func (client *Client) CreateHostAvailability(request *CreateHostAvailabilityRequest) (_result *CreateHostAvailabilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHostAvailabilityResponse{}
	_body, _err := client.CreateHostAvailabilityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a namespace.
//
// Description:
//
// # [](#)Prerequisites
//
// Hybrid Cloud Monitoring is activated. For more information, see [Activate Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/250773.html).
//
// # [](#)Description
//
// This topic provides an example on how to create a namespace named `aliyun`. In this example, the data retention period of the namespace is set to `cms.s1.3xlarge`. The returned result indicates that the namespace is created.
//
// @param request - CreateHybridMonitorNamespaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHybridMonitorNamespaceResponse
func (client *Client) CreateHybridMonitorNamespaceWithOptions(request *CreateHybridMonitorNamespaceRequest, runtime *util.RuntimeOptions) (_result *CreateHybridMonitorNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceRegion)) {
		query["NamespaceRegion"] = request.NamespaceRegion
	}

	if !tea.BoolValue(util.IsUnset(request.NamespaceType)) {
		query["NamespaceType"] = request.NamespaceType
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		query["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHybridMonitorNamespace"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHybridMonitorNamespaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a namespace.
//
// Description:
//
// # [](#)Prerequisites
//
// Hybrid Cloud Monitoring is activated. For more information, see [Activate Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/250773.html).
//
// # [](#)Description
//
// This topic provides an example on how to create a namespace named `aliyun`. In this example, the data retention period of the namespace is set to `cms.s1.3xlarge`. The returned result indicates that the namespace is created.
//
// @param request - CreateHybridMonitorNamespaceRequest
//
// @return CreateHybridMonitorNamespaceResponse
func (client *Client) CreateHybridMonitorNamespace(request *CreateHybridMonitorNamespaceRequest) (_result *CreateHybridMonitorNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHybridMonitorNamespaceResponse{}
	_body, _err := client.CreateHybridMonitorNamespaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Logstore group of Hybrid Cloud Monitoring.
//
// Description:
//
// ## [](#)Prerequisites
//
// Simple Log Service is activated. A project and a Logstore are created in Simple Log Service. For more information, see [Getting Started](https://help.aliyun.com/document_detail/54604.html).
//
// ## [](#)Description
//
// This topic provides an example on how to create a Logstore group named `Logstore_test`. The region ID is `cn-hangzhou`. The project is `aliyun-project`. The Logstore is `Logstore-ECS`. The response shows that the Logstore group is created.
//
// @param request - CreateHybridMonitorSLSGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHybridMonitorSLSGroupResponse
func (client *Client) CreateHybridMonitorSLSGroupWithOptions(request *CreateHybridMonitorSLSGroupRequest, runtime *util.RuntimeOptions) (_result *CreateHybridMonitorSLSGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SLSGroupConfig)) {
		query["SLSGroupConfig"] = request.SLSGroupConfig
	}

	if !tea.BoolValue(util.IsUnset(request.SLSGroupDescription)) {
		query["SLSGroupDescription"] = request.SLSGroupDescription
	}

	if !tea.BoolValue(util.IsUnset(request.SLSGroupName)) {
		query["SLSGroupName"] = request.SLSGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHybridMonitorSLSGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHybridMonitorSLSGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Logstore group of Hybrid Cloud Monitoring.
//
// Description:
//
// ## [](#)Prerequisites
//
// Simple Log Service is activated. A project and a Logstore are created in Simple Log Service. For more information, see [Getting Started](https://help.aliyun.com/document_detail/54604.html).
//
// ## [](#)Description
//
// This topic provides an example on how to create a Logstore group named `Logstore_test`. The region ID is `cn-hangzhou`. The project is `aliyun-project`. The Logstore is `Logstore-ECS`. The response shows that the Logstore group is created.
//
// @param request - CreateHybridMonitorSLSGroupRequest
//
// @return CreateHybridMonitorSLSGroupResponse
func (client *Client) CreateHybridMonitorSLSGroup(request *CreateHybridMonitorSLSGroupRequest) (_result *CreateHybridMonitorSLSGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHybridMonitorSLSGroupResponse{}
	_body, _err := client.CreateHybridMonitorSLSGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a metric import task for an Alibaba Cloud service or creates a metric for logs imported from Simple Log Service.
//
// Description:
//
// # [](#)Prerequisites
//
// 	- Hybrid Cloud Monitoring is activated. For more information, see [Activate Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/250773.html).
//
// 	- If you want to create a metric for logs imported from Simple Log Service, make sure that you have activated Simple Log Service and created a project and a Logstore. For more information, see [Getting Started](https://help.aliyun.com/document_detail/54604.html).
//
// # [](#)Description
//
// This topic provides an example on how to create a metric import task named `aliyun_task` for Elastic Compute Service (ECS). The task imports the `cpu_total` metric to the `aliyun` namespace. The response shows that the metric import task is created.
//
// @param request - CreateHybridMonitorTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHybridMonitorTaskResponse
func (client *Client) CreateHybridMonitorTaskWithOptions(request *CreateHybridMonitorTaskRequest, runtime *util.RuntimeOptions) (_result *CreateHybridMonitorTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AttachLabels)) {
		query["AttachLabels"] = request.AttachLabels
	}

	if !tea.BoolValue(util.IsUnset(request.CloudAccessId)) {
		query["CloudAccessId"] = request.CloudAccessId
	}

	if !tea.BoolValue(util.IsUnset(request.CollectInterval)) {
		query["CollectInterval"] = request.CollectInterval
	}

	if !tea.BoolValue(util.IsUnset(request.CollectTargetType)) {
		query["CollectTargetType"] = request.CollectTargetType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.SLSProcessConfig)) {
		query["SLSProcessConfig"] = request.SLSProcessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TargetUserId)) {
		query["TargetUserId"] = request.TargetUserId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetUserIdList)) {
		query["TargetUserIdList"] = request.TargetUserIdList
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.YARMConfig)) {
		query["YARMConfig"] = request.YARMConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHybridMonitorTask"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateHybridMonitorTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a metric import task for an Alibaba Cloud service or creates a metric for logs imported from Simple Log Service.
//
// Description:
//
// # [](#)Prerequisites
//
// 	- Hybrid Cloud Monitoring is activated. For more information, see [Activate Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/250773.html).
//
// 	- If you want to create a metric for logs imported from Simple Log Service, make sure that you have activated Simple Log Service and created a project and a Logstore. For more information, see [Getting Started](https://help.aliyun.com/document_detail/54604.html).
//
// # [](#)Description
//
// This topic provides an example on how to create a metric import task named `aliyun_task` for Elastic Compute Service (ECS). The task imports the `cpu_total` metric to the `aliyun` namespace. The response shows that the metric import task is created.
//
// @param request - CreateHybridMonitorTaskRequest
//
// @return CreateHybridMonitorTaskResponse
func (client *Client) CreateHybridMonitorTask(request *CreateHybridMonitorTaskRequest) (_result *CreateHybridMonitorTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHybridMonitorTaskResponse{}
	_body, _err := client.CreateHybridMonitorTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an instant test task.
//
// Description:
//
// You can create an instant test task only by using the Alibaba Cloud account that you used to enable Network Analysis and Monitoring.
//
// This topic provides an example to show how to create an instant test task. The name of the task is `task1`. The tested address is `http://www.aliyun.com`. The test type is `HTTP`. The number of detection points is `1`.
//
// @param request - CreateInstantSiteMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateInstantSiteMonitorResponse
func (client *Client) CreateInstantSiteMonitorWithOptions(request *CreateInstantSiteMonitorRequest, runtime *util.RuntimeOptions) (_result *CreateInstantSiteMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.IspCities)) {
		query["IspCities"] = request.IspCities
	}

	if !tea.BoolValue(util.IsUnset(request.OptionsJson)) {
		query["OptionsJson"] = request.OptionsJson
	}

	if !tea.BoolValue(util.IsUnset(request.RandomIspCity)) {
		query["RandomIspCity"] = request.RandomIspCity
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstantSiteMonitor"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateInstantSiteMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an instant test task.
//
// Description:
//
// You can create an instant test task only by using the Alibaba Cloud account that you used to enable Network Analysis and Monitoring.
//
// This topic provides an example to show how to create an instant test task. The name of the task is `task1`. The tested address is `http://www.aliyun.com`. The test type is `HTTP`. The number of detection points is `1`.
//
// @param request - CreateInstantSiteMonitorRequest
//
// @return CreateInstantSiteMonitorResponse
func (client *Client) CreateInstantSiteMonitor(request *CreateInstantSiteMonitorRequest) (_result *CreateInstantSiteMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstantSiteMonitorResponse{}
	_body, _err := client.CreateInstantSiteMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a blacklist policy.
//
// Description:
//
// ### Background information
//
// 	- CloudMonitor blocks alert notifications based on the blacklist policies that take effect. To block alert notifications when the value of a metric that belongs to a cloud service reaches the threshold that you specified, add the metric to a blacklist policy.
//
// 	- CloudMonitor allows you to create blacklist policies only based on threshold metrics. You cannot create blacklist policies based on system events. For more information about the cloud services and the thresholds of the metrics that are supported by CloudMonitor, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
//
// @param request - CreateMetricRuleBlackListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMetricRuleBlackListResponse
func (client *Client) CreateMetricRuleBlackListWithOptions(request *CreateMetricRuleBlackListRequest, runtime *util.RuntimeOptions) (_result *CreateMetricRuleBlackListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveTime)) {
		query["EffectiveTime"] = request.EffectiveTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnableEndTime)) {
		query["EnableEndTime"] = request.EnableEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnableStartTime)) {
		query["EnableStartTime"] = request.EnableStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Instances)) {
		query["Instances"] = request.Instances
	}

	if !tea.BoolValue(util.IsUnset(request.Metrics)) {
		query["Metrics"] = request.Metrics
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.ScopeType)) {
		query["ScopeType"] = request.ScopeType
	}

	if !tea.BoolValue(util.IsUnset(request.ScopeValue)) {
		query["ScopeValue"] = request.ScopeValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMetricRuleBlackList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMetricRuleBlackListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a blacklist policy.
//
// Description:
//
// ### Background information
//
// 	- CloudMonitor blocks alert notifications based on the blacklist policies that take effect. To block alert notifications when the value of a metric that belongs to a cloud service reaches the threshold that you specified, add the metric to a blacklist policy.
//
// 	- CloudMonitor allows you to create blacklist policies only based on threshold metrics. You cannot create blacklist policies based on system events. For more information about the cloud services and the thresholds of the metrics that are supported by CloudMonitor, see [Appendix 1: Metrics](https://help.aliyun.com/document_detail/163515.html).
//
// @param request - CreateMetricRuleBlackListRequest
//
// @return CreateMetricRuleBlackListResponse
func (client *Client) CreateMetricRuleBlackList(request *CreateMetricRuleBlackListRequest) (_result *CreateMetricRuleBlackListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMetricRuleBlackListResponse{}
	_body, _err := client.CreateMetricRuleBlackListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Associates resources with an alert rule.
//
// @param request - CreateMetricRuleResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMetricRuleResourcesResponse
func (client *Client) CreateMetricRuleResourcesWithOptions(request *CreateMetricRuleResourcesRequest, runtime *util.RuntimeOptions) (_result *CreateMetricRuleResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.Resources)) {
		query["Resources"] = request.Resources
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMetricRuleResources"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMetricRuleResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Associates resources with an alert rule.
//
// @param request - CreateMetricRuleResourcesRequest
//
// @return CreateMetricRuleResourcesResponse
func (client *Client) CreateMetricRuleResources(request *CreateMetricRuleResourcesRequest) (_result *CreateMetricRuleResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMetricRuleResourcesResponse{}
	_body, _err := client.CreateMetricRuleResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an alert template.
//
// @param request - CreateMetricRuleTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMetricRuleTemplateResponse
func (client *Client) CreateMetricRuleTemplateWithOptions(request *CreateMetricRuleTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateMetricRuleTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertTemplates)) {
		query["AlertTemplates"] = request.AlertTemplates
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMetricRuleTemplate"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMetricRuleTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an alert template.
//
// @param request - CreateMetricRuleTemplateRequest
//
// @return CreateMetricRuleTemplateResponse
func (client *Client) CreateMetricRuleTemplate(request *CreateMetricRuleTemplateRequest) (_result *CreateMetricRuleTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMetricRuleTemplateResponse{}
	_body, _err := client.CreateMetricRuleTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a task to monitor a process.
//
// @param request - CreateMonitorAgentProcessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMonitorAgentProcessResponse
func (client *Client) CreateMonitorAgentProcessWithOptions(request *CreateMonitorAgentProcessRequest, runtime *util.RuntimeOptions) (_result *CreateMonitorAgentProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessName)) {
		query["ProcessName"] = request.ProcessName
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessUser)) {
		query["ProcessUser"] = request.ProcessUser
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMonitorAgentProcess"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMonitorAgentProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a task to monitor a process.
//
// @param request - CreateMonitorAgentProcessRequest
//
// @return CreateMonitorAgentProcessResponse
func (client *Client) CreateMonitorAgentProcess(request *CreateMonitorAgentProcessRequest) (_result *CreateMonitorAgentProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMonitorAgentProcessResponse{}
	_body, _err := client.CreateMonitorAgentProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an application group.
//
// Description:
//
// In this example, an application group named `ECS_Group` is created.
//
// @param request - CreateMonitorGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMonitorGroupResponse
func (client *Client) CreateMonitorGroupWithOptions(request *CreateMonitorGroupRequest, runtime *util.RuntimeOptions) (_result *CreateMonitorGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroups)) {
		query["ContactGroups"] = request.ContactGroups
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMonitorGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMonitorGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an application group.
//
// Description:
//
// In this example, an application group named `ECS_Group` is created.
//
// @param request - CreateMonitorGroupRequest
//
// @return CreateMonitorGroupResponse
func (client *Client) CreateMonitorGroup(request *CreateMonitorGroupRequest) (_result *CreateMonitorGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMonitorGroupResponse{}
	_body, _err := client.CreateMonitorGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an application group by using a resource group.
//
// Description:
//
// This topic provides an example on how to create an application group by using the resource group `CloudMonitor` and the alert contact group `ECS_Group`. The region ID of the resource group is `cn-hangzhou`.
//
// @param request - CreateMonitorGroupByResourceGroupIdRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMonitorGroupByResourceGroupIdResponse
func (client *Client) CreateMonitorGroupByResourceGroupIdWithOptions(request *CreateMonitorGroupByResourceGroupIdRequest, runtime *util.RuntimeOptions) (_result *CreateMonitorGroupByResourceGroupIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupList)) {
		query["ContactGroupList"] = request.ContactGroupList
	}

	if !tea.BoolValue(util.IsUnset(request.EnableInstallAgent)) {
		query["EnableInstallAgent"] = request.EnableInstallAgent
	}

	if !tea.BoolValue(util.IsUnset(request.EnableSubscribeEvent)) {
		query["EnableSubscribeEvent"] = request.EnableSubscribeEvent
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupName)) {
		query["ResourceGroupName"] = request.ResourceGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMonitorGroupByResourceGroupId"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMonitorGroupByResourceGroupIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an application group by using a resource group.
//
// Description:
//
// This topic provides an example on how to create an application group by using the resource group `CloudMonitor` and the alert contact group `ECS_Group`. The region ID of the resource group is `cn-hangzhou`.
//
// @param request - CreateMonitorGroupByResourceGroupIdRequest
//
// @return CreateMonitorGroupByResourceGroupIdResponse
func (client *Client) CreateMonitorGroupByResourceGroupId(request *CreateMonitorGroupByResourceGroupIdRequest) (_result *CreateMonitorGroupByResourceGroupIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMonitorGroupByResourceGroupIdResponse{}
	_body, _err := client.CreateMonitorGroupByResourceGroupIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds resources to an application group.
//
// Description:
//
// You can add a maximum of 1,000 instances to an application group at a time. You can add a maximum of 3,000 instances of an Alibaba Cloud service to an application group. The total number of instances that you can add to an application group is unlimited.
//
// In this example, an Elastic Compute Service (ECS) instance in the `China (Hangzhou)` region is added to the `3607****` application group. The instance ID is `i-2ze26xj5wwy12****` and the instance name is `test-instance-ecs`.
//
// @param request - CreateMonitorGroupInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMonitorGroupInstancesResponse
func (client *Client) CreateMonitorGroupInstancesWithOptions(request *CreateMonitorGroupInstancesRequest, runtime *util.RuntimeOptions) (_result *CreateMonitorGroupInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Instances)) {
		query["Instances"] = request.Instances
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMonitorGroupInstances"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMonitorGroupInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds resources to an application group.
//
// Description:
//
// You can add a maximum of 1,000 instances to an application group at a time. You can add a maximum of 3,000 instances of an Alibaba Cloud service to an application group. The total number of instances that you can add to an application group is unlimited.
//
// In this example, an Elastic Compute Service (ECS) instance in the `China (Hangzhou)` region is added to the `3607****` application group. The instance ID is `i-2ze26xj5wwy12****` and the instance name is `test-instance-ecs`.
//
// @param request - CreateMonitorGroupInstancesRequest
//
// @return CreateMonitorGroupInstancesResponse
func (client *Client) CreateMonitorGroupInstances(request *CreateMonitorGroupInstancesRequest) (_result *CreateMonitorGroupInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMonitorGroupInstancesResponse{}
	_body, _err := client.CreateMonitorGroupInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a policy to pause alert notifications for an application group.
//
// Description:
//
// If the policy is valid, no alert notifications are sent for the application group.
//
// This topic describes how to create the `PauseNotify` policy to pause alert notifications for the `7301****` application group. The StartTime parameter is set to `1622949300000` and the EndTime parameter is set to `1623208500000`. This indicates that the policy is valid from `2021-06-06 11:15:00 UTC+8` to `2021-06-09 11:15:00 UTC+8`.
//
// @param request - CreateMonitorGroupNotifyPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMonitorGroupNotifyPolicyResponse
func (client *Client) CreateMonitorGroupNotifyPolicyWithOptions(request *CreateMonitorGroupNotifyPolicyRequest, runtime *util.RuntimeOptions) (_result *CreateMonitorGroupNotifyPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyType)) {
		query["PolicyType"] = request.PolicyType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMonitorGroupNotifyPolicy"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMonitorGroupNotifyPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a policy to pause alert notifications for an application group.
//
// Description:
//
// If the policy is valid, no alert notifications are sent for the application group.
//
// This topic describes how to create the `PauseNotify` policy to pause alert notifications for the `7301****` application group. The StartTime parameter is set to `1622949300000` and the EndTime parameter is set to `1623208500000`. This indicates that the policy is valid from `2021-06-06 11:15:00 UTC+8` to `2021-06-09 11:15:00 UTC+8`.
//
// @param request - CreateMonitorGroupNotifyPolicyRequest
//
// @return CreateMonitorGroupNotifyPolicyResponse
func (client *Client) CreateMonitorGroupNotifyPolicy(request *CreateMonitorGroupNotifyPolicyRequest) (_result *CreateMonitorGroupNotifyPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMonitorGroupNotifyPolicyResponse{}
	_body, _err := client.CreateMonitorGroupNotifyPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a task to monitor a specified process.
//
// @param request - CreateMonitoringAgentProcessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMonitoringAgentProcessResponse
func (client *Client) CreateMonitoringAgentProcessWithOptions(request *CreateMonitoringAgentProcessRequest, runtime *util.RuntimeOptions) (_result *CreateMonitoringAgentProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessName)) {
		query["ProcessName"] = request.ProcessName
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessUser)) {
		query["ProcessUser"] = request.ProcessUser
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMonitoringAgentProcess"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMonitoringAgentProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a task to monitor a specified process.
//
// @param request - CreateMonitoringAgentProcessRequest
//
// @return CreateMonitoringAgentProcessResponse
func (client *Client) CreateMonitoringAgentProcess(request *CreateMonitoringAgentProcessRequest) (_result *CreateMonitoringAgentProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMonitoringAgentProcessResponse{}
	_body, _err := client.CreateMonitoringAgentProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a site monitoring task.
//
// Description:
//
// This topic provides an example on how to create a site monitoring task named `HanZhou_ECS1`. The URL that is monitored by the task is `https://www.aliyun.com` and the type of the task is `HTTPS`.
//
// @param request - CreateSiteMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSiteMonitorResponse
func (client *Client) CreateSiteMonitorWithOptions(request *CreateSiteMonitorRequest, runtime *util.RuntimeOptions) (_result *CreateSiteMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.AlertIds)) {
		query["AlertIds"] = request.AlertIds
	}

	if !tea.BoolValue(util.IsUnset(request.CustomSchedule)) {
		query["CustomSchedule"] = request.CustomSchedule
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IspCities)) {
		query["IspCities"] = request.IspCities
	}

	if !tea.BoolValue(util.IsUnset(request.OptionsJson)) {
		query["OptionsJson"] = request.OptionsJson
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.VpcConfig)) {
		query["VpcConfig"] = request.VpcConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSiteMonitor"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSiteMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a site monitoring task.
//
// Description:
//
// This topic provides an example on how to create a site monitoring task named `HanZhou_ECS1`. The URL that is monitored by the task is `https://www.aliyun.com` and the type of the task is `HTTPS`.
//
// @param request - CreateSiteMonitorRequest
//
// @return CreateSiteMonitorResponse
func (client *Client) CreateSiteMonitor(request *CreateSiteMonitorRequest) (_result *CreateSiteMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSiteMonitorResponse{}
	_body, _err := client.CreateSiteMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Defines the range of monitoring data that you want to export. The Cursor information is returned. When you call the BatchExport operation for the first time, you must specify the Cursor information.
//
// Description:
//
// ### [](#)Prerequisites
//
// Hybrid Cloud Monitoring is activated. For more information, see [Activate Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/250773.html).
//
// ### [](#)Background information
//
// You can call this operation to obtain the Cursor information and then call the [BatchExport](https://help.aliyun.com/document_detail/2329847.html) operation to export the monitoring data.
//
// ### [](#)Description
//
// This topic provides an example on how to define the monitoring data of a specified metric for a specified cloud service. In this example, the namespace of the cloud service is set to `acs_ecs_dashboard`, the metric is set to `cpu_idle`, the start time is set to `1641627000000`, and the end time is set to `1641645000000`. The number of idle CPU cores on your Elastic Compute Service (ECS) instances is measured every 60 seconds from 15:30:00, January 8, 2022 to 20:30:00, January 8, 2022. The `Cursor` information is returned.
//
// @param tmpReq - CursorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CursorResponse
func (client *Client) CursorWithOptions(tmpReq *CursorRequest, runtime *util.RuntimeOptions) (_result *CursorResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CursorShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Matchers)) {
		request.MatchersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Matchers, tea.String("Matchers"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MatchersShrink)) {
		body["Matchers"] = request.MatchersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Metric)) {
		body["Metric"] = request.Metric
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		body["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		body["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("Cursor"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CursorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Defines the range of monitoring data that you want to export. The Cursor information is returned. When you call the BatchExport operation for the first time, you must specify the Cursor information.
//
// Description:
//
// ### [](#)Prerequisites
//
// Hybrid Cloud Monitoring is activated. For more information, see [Activate Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/250773.html).
//
// ### [](#)Background information
//
// You can call this operation to obtain the Cursor information and then call the [BatchExport](https://help.aliyun.com/document_detail/2329847.html) operation to export the monitoring data.
//
// ### [](#)Description
//
// This topic provides an example on how to define the monitoring data of a specified metric for a specified cloud service. In this example, the namespace of the cloud service is set to `acs_ecs_dashboard`, the metric is set to `cpu_idle`, the start time is set to `1641627000000`, and the end time is set to `1641645000000`. The number of idle CPU cores on your Elastic Compute Service (ECS) instances is measured every 60 seconds from 15:30:00, January 8, 2022 to 20:30:00, January 8, 2022. The `Cursor` information is returned.
//
// @param request - CursorRequest
//
// @return CursorResponse
func (client *Client) Cursor(request *CursorRequest) (_result *CursorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CursorResponse{}
	_body, _err := client.CursorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an alert contact.
//
// @param request - DeleteContactRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteContactResponse
func (client *Client) DeleteContactWithOptions(request *DeleteContactRequest, runtime *util.RuntimeOptions) (_result *DeleteContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteContact"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an alert contact.
//
// @param request - DeleteContactRequest
//
// @return DeleteContactResponse
func (client *Client) DeleteContact(request *DeleteContactRequest) (_result *DeleteContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteContactResponse{}
	_body, _err := client.DeleteContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an alert group.
//
// @param request - DeleteContactGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteContactGroupResponse
func (client *Client) DeleteContactGroupWithOptions(request *DeleteContactGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupName)) {
		query["ContactGroupName"] = request.ContactGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteContactGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an alert group.
//
// @param request - DeleteContactGroupRequest
//
// @return DeleteContactGroupResponse
func (client *Client) DeleteContactGroup(request *DeleteContactGroupRequest) (_result *DeleteContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteContactGroupResponse{}
	_body, _err := client.DeleteContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the reported monitoring data of a metric.
//
// @param request - DeleteCustomMetricRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomMetricResponse
func (client *Client) DeleteCustomMetricWithOptions(request *DeleteCustomMetricRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Md5)) {
		query["Md5"] = request.Md5
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.UUID)) {
		query["UUID"] = request.UUID
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomMetric"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the reported monitoring data of a metric.
//
// @param request - DeleteCustomMetricRequest
//
// @return DeleteCustomMetricResponse
func (client *Client) DeleteCustomMetric(request *DeleteCustomMetricRequest) (_result *DeleteCustomMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomMetricResponse{}
	_body, _err := client.DeleteCustomMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a tag rule.
//
// @param request - DeleteDynamicTagGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDynamicTagGroupResponse
func (client *Client) DeleteDynamicTagGroupWithOptions(request *DeleteDynamicTagGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteDynamicTagGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DynamicTagRuleId)) {
		query["DynamicTagRuleId"] = request.DynamicTagRuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDynamicTagGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDynamicTagGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a tag rule.
//
// @param request - DeleteDynamicTagGroupRequest
//
// @return DeleteDynamicTagGroupResponse
func (client *Client) DeleteDynamicTagGroup(request *DeleteDynamicTagGroupRequest) (_result *DeleteDynamicTagGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDynamicTagGroupResponse{}
	_body, _err := client.DeleteDynamicTagGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the push channels of an event-triggered alert rule.
//
// @param request - DeleteEventRuleTargetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEventRuleTargetsResponse
func (client *Client) DeleteEventRuleTargetsWithOptions(request *DeleteEventRuleTargetsRequest, runtime *util.RuntimeOptions) (_result *DeleteEventRuleTargetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEventRuleTargets"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEventRuleTargetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes the push channels of an event-triggered alert rule.
//
// @param request - DeleteEventRuleTargetsRequest
//
// @return DeleteEventRuleTargetsResponse
func (client *Client) DeleteEventRuleTargets(request *DeleteEventRuleTargetsRequest) (_result *DeleteEventRuleTargetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEventRuleTargetsResponse{}
	_body, _err := client.DeleteEventRuleTargetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more event-triggered alert rules.
//
// @param request - DeleteEventRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEventRulesResponse
func (client *Client) DeleteEventRulesWithOptions(request *DeleteEventRulesRequest, runtime *util.RuntimeOptions) (_result *DeleteEventRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleNames)) {
		query["RuleNames"] = request.RuleNames
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEventRules"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEventRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more event-triggered alert rules.
//
// @param request - DeleteEventRulesRequest
//
// @return DeleteEventRulesResponse
func (client *Client) DeleteEventRules(request *DeleteEventRulesRequest) (_result *DeleteEventRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEventRulesResponse{}
	_body, _err := client.DeleteEventRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a configuration set that is used to export monitoring data.
//
// @param request - DeleteExporterOutputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteExporterOutputResponse
func (client *Client) DeleteExporterOutputWithOptions(request *DeleteExporterOutputRequest, runtime *util.RuntimeOptions) (_result *DeleteExporterOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestName)) {
		query["DestName"] = request.DestName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteExporterOutput"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteExporterOutputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a configuration set that is used to export monitoring data.
//
// @param request - DeleteExporterOutputRequest
//
// @return DeleteExporterOutputResponse
func (client *Client) DeleteExporterOutput(request *DeleteExporterOutputRequest) (_result *DeleteExporterOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteExporterOutputResponse{}
	_body, _err := client.DeleteExporterOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a data export rule.
//
// @param request - DeleteExporterRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteExporterRuleResponse
func (client *Client) DeleteExporterRuleWithOptions(request *DeleteExporterRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteExporterRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteExporterRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteExporterRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a data export rule.
//
// @param request - DeleteExporterRuleRequest
//
// @return DeleteExporterRuleResponse
func (client *Client) DeleteExporterRule(request *DeleteExporterRuleRequest) (_result *DeleteExporterRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteExporterRuleResponse{}
	_body, _err := client.DeleteExporterRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a process monitoring task for an application group.
//
// @param request - DeleteGroupMonitoringAgentProcessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteGroupMonitoringAgentProcessResponse
func (client *Client) DeleteGroupMonitoringAgentProcessWithOptions(request *DeleteGroupMonitoringAgentProcessRequest, runtime *util.RuntimeOptions) (_result *DeleteGroupMonitoringAgentProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGroupMonitoringAgentProcess"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGroupMonitoringAgentProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a process monitoring task for an application group.
//
// @param request - DeleteGroupMonitoringAgentProcessRequest
//
// @return DeleteGroupMonitoringAgentProcessResponse
func (client *Client) DeleteGroupMonitoringAgentProcess(request *DeleteGroupMonitoringAgentProcessRequest) (_result *DeleteGroupMonitoringAgentProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGroupMonitoringAgentProcessResponse{}
	_body, _err := client.DeleteGroupMonitoringAgentProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more availability monitoring tasks.
//
// @param request - DeleteHostAvailabilityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHostAvailabilityResponse
func (client *Client) DeleteHostAvailabilityWithOptions(request *DeleteHostAvailabilityRequest, runtime *util.RuntimeOptions) (_result *DeleteHostAvailabilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHostAvailability"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHostAvailabilityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more availability monitoring tasks.
//
// @param request - DeleteHostAvailabilityRequest
//
// @return DeleteHostAvailabilityResponse
func (client *Client) DeleteHostAvailability(request *DeleteHostAvailabilityRequest) (_result *DeleteHostAvailabilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHostAvailabilityResponse{}
	_body, _err := client.DeleteHostAvailabilityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a namespace.
//
// Description:
//
// > If a metric import task is created for metrics in a namespace, you cannot delete the namespace unless you delete the task first.
//
// This topic provides an example on how to delete a namespace named `aliyun`. The response shows that the namespace is deleted.
//
// @param request - DeleteHybridMonitorNamespaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHybridMonitorNamespaceResponse
func (client *Client) DeleteHybridMonitorNamespaceWithOptions(request *DeleteHybridMonitorNamespaceRequest, runtime *util.RuntimeOptions) (_result *DeleteHybridMonitorNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHybridMonitorNamespace"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHybridMonitorNamespaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a namespace.
//
// Description:
//
// > If a metric import task is created for metrics in a namespace, you cannot delete the namespace unless you delete the task first.
//
// This topic provides an example on how to delete a namespace named `aliyun`. The response shows that the namespace is deleted.
//
// @param request - DeleteHybridMonitorNamespaceRequest
//
// @return DeleteHybridMonitorNamespaceResponse
func (client *Client) DeleteHybridMonitorNamespace(request *DeleteHybridMonitorNamespaceRequest) (_result *DeleteHybridMonitorNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHybridMonitorNamespaceResponse{}
	_body, _err := client.DeleteHybridMonitorNamespaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a Logstore group.
//
// Description:
//
// This topic provides an example on how to delete a Logstore group named `Logstore_test`. The response shows that the Logstore group is deleted.
//
// @param request - DeleteHybridMonitorSLSGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHybridMonitorSLSGroupResponse
func (client *Client) DeleteHybridMonitorSLSGroupWithOptions(request *DeleteHybridMonitorSLSGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteHybridMonitorSLSGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SLSGroupName)) {
		query["SLSGroupName"] = request.SLSGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHybridMonitorSLSGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHybridMonitorSLSGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a Logstore group.
//
// Description:
//
// This topic provides an example on how to delete a Logstore group named `Logstore_test`. The response shows that the Logstore group is deleted.
//
// @param request - DeleteHybridMonitorSLSGroupRequest
//
// @return DeleteHybridMonitorSLSGroupResponse
func (client *Client) DeleteHybridMonitorSLSGroup(request *DeleteHybridMonitorSLSGroupRequest) (_result *DeleteHybridMonitorSLSGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHybridMonitorSLSGroupResponse{}
	_body, _err := client.DeleteHybridMonitorSLSGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a metric import task for Alibaba Cloud services or a metric for the logs that are imported from Log Service.
//
// Description:
//
// This topic provides an example on how to delete a metric import task whose ID is `36****`. The returned result indicates that the metric import task is deleted.
//
// @param request - DeleteHybridMonitorTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHybridMonitorTaskResponse
func (client *Client) DeleteHybridMonitorTaskWithOptions(request *DeleteHybridMonitorTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteHybridMonitorTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.TargetUserId)) {
		query["TargetUserId"] = request.TargetUserId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHybridMonitorTask"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteHybridMonitorTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a metric import task for Alibaba Cloud services or a metric for the logs that are imported from Log Service.
//
// Description:
//
// This topic provides an example on how to delete a metric import task whose ID is `36****`. The returned result indicates that the metric import task is deleted.
//
// @param request - DeleteHybridMonitorTaskRequest
//
// @return DeleteHybridMonitorTaskResponse
func (client *Client) DeleteHybridMonitorTask(request *DeleteHybridMonitorTaskRequest) (_result *DeleteHybridMonitorTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHybridMonitorTaskResponse{}
	_body, _err := client.DeleteHybridMonitorTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a log monitoring metric.
//
// @param request - DeleteLogMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLogMonitorResponse
func (client *Client) DeleteLogMonitorWithOptions(request *DeleteLogMonitorRequest, runtime *util.RuntimeOptions) (_result *DeleteLogMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LogId)) {
		query["LogId"] = request.LogId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLogMonitor"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLogMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a log monitoring metric.
//
// @param request - DeleteLogMonitorRequest
//
// @return DeleteLogMonitorResponse
func (client *Client) DeleteLogMonitor(request *DeleteLogMonitorRequest) (_result *DeleteLogMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLogMonitorResponse{}
	_body, _err := client.DeleteLogMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes multiple blacklist policies at a time.
//
// @param request - DeleteMetricRuleBlackListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMetricRuleBlackListResponse
func (client *Client) DeleteMetricRuleBlackListWithOptions(request *DeleteMetricRuleBlackListRequest, runtime *util.RuntimeOptions) (_result *DeleteMetricRuleBlackListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMetricRuleBlackList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMetricRuleBlackListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes multiple blacklist policies at a time.
//
// @param request - DeleteMetricRuleBlackListRequest
//
// @return DeleteMetricRuleBlackListResponse
func (client *Client) DeleteMetricRuleBlackList(request *DeleteMetricRuleBlackListRequest) (_result *DeleteMetricRuleBlackListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMetricRuleBlackListResponse{}
	_body, _err := client.DeleteMetricRuleBlackListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disassociates resources from an alert rule.
//
// @param request - DeleteMetricRuleResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMetricRuleResourcesResponse
func (client *Client) DeleteMetricRuleResourcesWithOptions(request *DeleteMetricRuleResourcesRequest, runtime *util.RuntimeOptions) (_result *DeleteMetricRuleResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Resources)) {
		query["Resources"] = request.Resources
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMetricRuleResources"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMetricRuleResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disassociates resources from an alert rule.
//
// @param request - DeleteMetricRuleResourcesRequest
//
// @return DeleteMetricRuleResourcesResponse
func (client *Client) DeleteMetricRuleResources(request *DeleteMetricRuleResourcesRequest) (_result *DeleteMetricRuleResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMetricRuleResourcesResponse{}
	_body, _err := client.DeleteMetricRuleResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete the push channels of an alert rule.
//
// @param request - DeleteMetricRuleTargetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMetricRuleTargetsResponse
func (client *Client) DeleteMetricRuleTargetsWithOptions(request *DeleteMetricRuleTargetsRequest, runtime *util.RuntimeOptions) (_result *DeleteMetricRuleTargetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetIds)) {
		query["TargetIds"] = request.TargetIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMetricRuleTargets"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMetricRuleTargetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete the push channels of an alert rule.
//
// @param request - DeleteMetricRuleTargetsRequest
//
// @return DeleteMetricRuleTargetsResponse
func (client *Client) DeleteMetricRuleTargets(request *DeleteMetricRuleTargetsRequest) (_result *DeleteMetricRuleTargetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMetricRuleTargetsResponse{}
	_body, _err := client.DeleteMetricRuleTargetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an alert template.
//
// @param request - DeleteMetricRuleTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMetricRuleTemplateResponse
func (client *Client) DeleteMetricRuleTemplateWithOptions(request *DeleteMetricRuleTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteMetricRuleTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMetricRuleTemplate"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMetricRuleTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an alert template.
//
// @param request - DeleteMetricRuleTemplateRequest
//
// @return DeleteMetricRuleTemplateResponse
func (client *Client) DeleteMetricRuleTemplate(request *DeleteMetricRuleTemplateRequest) (_result *DeleteMetricRuleTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMetricRuleTemplateResponse{}
	_body, _err := client.DeleteMetricRuleTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more alert rules.
//
// @param request - DeleteMetricRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMetricRulesResponse
func (client *Client) DeleteMetricRulesWithOptions(request *DeleteMetricRulesRequest, runtime *util.RuntimeOptions) (_result *DeleteMetricRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMetricRules"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMetricRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more alert rules.
//
// @param request - DeleteMetricRulesRequest
//
// @return DeleteMetricRulesResponse
func (client *Client) DeleteMetricRules(request *DeleteMetricRulesRequest) (_result *DeleteMetricRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMetricRulesResponse{}
	_body, _err := client.DeleteMetricRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an application group.
//
// @param request - DeleteMonitorGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMonitorGroupResponse
func (client *Client) DeleteMonitorGroupWithOptions(request *DeleteMonitorGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteMonitorGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMonitorGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMonitorGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an application group.
//
// @param request - DeleteMonitorGroupRequest
//
// @return DeleteMonitorGroupResponse
func (client *Client) DeleteMonitorGroup(request *DeleteMonitorGroupRequest) (_result *DeleteMonitorGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMonitorGroupResponse{}
	_body, _err := client.DeleteMonitorGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a rule that is used to dynamically add instances of a service that meet the rule to an application group.
//
// @param request - DeleteMonitorGroupDynamicRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMonitorGroupDynamicRuleResponse
func (client *Client) DeleteMonitorGroupDynamicRuleWithOptions(request *DeleteMonitorGroupDynamicRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteMonitorGroupDynamicRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMonitorGroupDynamicRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMonitorGroupDynamicRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a rule that is used to dynamically add instances of a service that meet the rule to an application group.
//
// @param request - DeleteMonitorGroupDynamicRuleRequest
//
// @return DeleteMonitorGroupDynamicRuleResponse
func (client *Client) DeleteMonitorGroupDynamicRule(request *DeleteMonitorGroupDynamicRuleRequest) (_result *DeleteMonitorGroupDynamicRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMonitorGroupDynamicRuleResponse{}
	_body, _err := client.DeleteMonitorGroupDynamicRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes instances from an application group.
//
// @param request - DeleteMonitorGroupInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMonitorGroupInstancesResponse
func (client *Client) DeleteMonitorGroupInstancesWithOptions(request *DeleteMonitorGroupInstancesRequest, runtime *util.RuntimeOptions) (_result *DeleteMonitorGroupInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdList)) {
		query["InstanceIdList"] = request.InstanceIdList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMonitorGroupInstances"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMonitorGroupInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes instances from an application group.
//
// @param request - DeleteMonitorGroupInstancesRequest
//
// @return DeleteMonitorGroupInstancesResponse
func (client *Client) DeleteMonitorGroupInstances(request *DeleteMonitorGroupInstancesRequest) (_result *DeleteMonitorGroupInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMonitorGroupInstancesResponse{}
	_body, _err := client.DeleteMonitorGroupInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a policy that is used to pause alert notifications for an application group.
//
// @param request - DeleteMonitorGroupNotifyPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMonitorGroupNotifyPolicyResponse
func (client *Client) DeleteMonitorGroupNotifyPolicyWithOptions(request *DeleteMonitorGroupNotifyPolicyRequest, runtime *util.RuntimeOptions) (_result *DeleteMonitorGroupNotifyPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyType)) {
		query["PolicyType"] = request.PolicyType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMonitorGroupNotifyPolicy"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMonitorGroupNotifyPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a policy that is used to pause alert notifications for an application group.
//
// @param request - DeleteMonitorGroupNotifyPolicyRequest
//
// @return DeleteMonitorGroupNotifyPolicyResponse
func (client *Client) DeleteMonitorGroupNotifyPolicy(request *DeleteMonitorGroupNotifyPolicyRequest) (_result *DeleteMonitorGroupNotifyPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMonitorGroupNotifyPolicyResponse{}
	_body, _err := client.DeleteMonitorGroupNotifyPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables monitoring on a process.
//
// @param request - DeleteMonitoringAgentProcessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMonitoringAgentProcessResponse
func (client *Client) DeleteMonitoringAgentProcessWithOptions(request *DeleteMonitoringAgentProcessRequest, runtime *util.RuntimeOptions) (_result *DeleteMonitoringAgentProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessId)) {
		query["ProcessId"] = request.ProcessId
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessName)) {
		query["ProcessName"] = request.ProcessName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMonitoringAgentProcess"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMonitoringAgentProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables monitoring on a process.
//
// @param request - DeleteMonitoringAgentProcessRequest
//
// @return DeleteMonitoringAgentProcessResponse
func (client *Client) DeleteMonitoringAgentProcess(request *DeleteMonitoringAgentProcessRequest) (_result *DeleteMonitoringAgentProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMonitoringAgentProcessResponse{}
	_body, _err := client.DeleteMonitoringAgentProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more site monitoring tasks.
//
// @param request - DeleteSiteMonitorsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSiteMonitorsResponse
func (client *Client) DeleteSiteMonitorsWithOptions(request *DeleteSiteMonitorsRequest, runtime *util.RuntimeOptions) (_result *DeleteSiteMonitorsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IsDeleteAlarms)) {
		query["IsDeleteAlarms"] = request.IsDeleteAlarms
	}

	if !tea.BoolValue(util.IsUnset(request.TaskIds)) {
		query["TaskIds"] = request.TaskIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSiteMonitors"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSiteMonitorsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more site monitoring tasks.
//
// @param request - DeleteSiteMonitorsRequest
//
// @return DeleteSiteMonitorsResponse
func (client *Client) DeleteSiteMonitors(request *DeleteSiteMonitorsRequest) (_result *DeleteSiteMonitorsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSiteMonitorsResponse{}
	_body, _err := client.DeleteSiteMonitorsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of initiative alert rules.
//
// @param request - DescribeActiveMetricRuleListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeActiveMetricRuleListResponse
func (client *Client) DescribeActiveMetricRuleListWithOptions(request *DescribeActiveMetricRuleListRequest, runtime *util.RuntimeOptions) (_result *DescribeActiveMetricRuleListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeActiveMetricRuleList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeActiveMetricRuleListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of initiative alert rules.
//
// @param request - DescribeActiveMetricRuleListRequest
//
// @return DescribeActiveMetricRuleListResponse
func (client *Client) DescribeActiveMetricRuleList(request *DescribeActiveMetricRuleListRequest) (_result *DescribeActiveMetricRuleListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeActiveMetricRuleListResponse{}
	_body, _err := client.DescribeActiveMetricRuleListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI DescribeAlertHistoryList is deprecated, please use Cms::2019-01-01::DescribeAlertLogList instead.
//
// Summary:
//
// Queries historical alerts.
//
// Description:
//
// This API operation is no longer maintained. We recommend that you call the [DescribeAlertLogList](https://help.aliyun.com/document_detail/201087.html) operation.
//
// @param request - DescribeAlertHistoryListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAlertHistoryListResponse
// Deprecated
func (client *Client) DescribeAlertHistoryListWithOptions(request *DescribeAlertHistoryListRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertHistoryListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Ascending)) {
		query["Ascending"] = request.Ascending
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertHistoryList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertHistoryListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI DescribeAlertHistoryList is deprecated, please use Cms::2019-01-01::DescribeAlertLogList instead.
//
// Summary:
//
// Queries historical alerts.
//
// Description:
//
// This API operation is no longer maintained. We recommend that you call the [DescribeAlertLogList](https://help.aliyun.com/document_detail/201087.html) operation.
//
// @param request - DescribeAlertHistoryListRequest
//
// @return DescribeAlertHistoryListResponse
// Deprecated
func (client *Client) DescribeAlertHistoryList(request *DescribeAlertHistoryListRequest) (_result *DescribeAlertHistoryListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertHistoryListResponse{}
	_body, _err := client.DescribeAlertHistoryListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the statistics of alert logs.
//
// Description:
//
// Queries the statistics of alert logs.
//
// This topic provides an example on how to query the statistics of alert logs for Elastic Compute Service (ECS) based on the `product` dimension.
//
// @param request - DescribeAlertLogCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAlertLogCountResponse
func (client *Client) DescribeAlertLogCountWithOptions(request *DescribeAlertLogCountRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertLogCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroup)) {
		query["ContactGroup"] = request.ContactGroup
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupBy)) {
		query["GroupBy"] = request.GroupBy
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.LastMin)) {
		query["LastMin"] = request.LastMin
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		query["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.SendStatus)) {
		query["SendStatus"] = request.SendStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertLogCount"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertLogCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of alert logs.
//
// Description:
//
// Queries the statistics of alert logs.
//
// This topic provides an example on how to query the statistics of alert logs for Elastic Compute Service (ECS) based on the `product` dimension.
//
// @param request - DescribeAlertLogCountRequest
//
// @return DescribeAlertLogCountResponse
func (client *Client) DescribeAlertLogCount(request *DescribeAlertLogCountRequest) (_result *DescribeAlertLogCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertLogCountResponse{}
	_body, _err := client.DescribeAlertLogCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of alert logs that are generated during each interval within a period of time.
//
// Description:
//
// This topic provides an example on how to query the number of alert logs for Elastic Compute Service (ECS) based on the `product` dimension.
//
// @param request - DescribeAlertLogHistogramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAlertLogHistogramResponse
func (client *Client) DescribeAlertLogHistogramWithOptions(request *DescribeAlertLogHistogramRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertLogHistogramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroup)) {
		query["ContactGroup"] = request.ContactGroup
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupBy)) {
		query["GroupBy"] = request.GroupBy
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.LastMin)) {
		query["LastMin"] = request.LastMin
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		query["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.SendStatus)) {
		query["SendStatus"] = request.SendStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertLogHistogram"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertLogHistogramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of alert logs that are generated during each interval within a period of time.
//
// Description:
//
// This topic provides an example on how to query the number of alert logs for Elastic Compute Service (ECS) based on the `product` dimension.
//
// @param request - DescribeAlertLogHistogramRequest
//
// @return DescribeAlertLogHistogramResponse
func (client *Client) DescribeAlertLogHistogram(request *DescribeAlertLogHistogramRequest) (_result *DescribeAlertLogHistogramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertLogHistogramResponse{}
	_body, _err := client.DescribeAlertLogHistogramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert logs.
//
// Description:
//
// You can call the operation to query only the alert logs within the last year.
//
// This topic provides an example to show how to query the alert logs of Elastic Compute Service (ECS) based on the `product` dimension.
//
// @param request - DescribeAlertLogListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAlertLogListResponse
func (client *Client) DescribeAlertLogListWithOptions(request *DescribeAlertLogListRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertLogListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroup)) {
		query["ContactGroup"] = request.ContactGroup
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupBy)) {
		query["GroupBy"] = request.GroupBy
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.LastMin)) {
		query["LastMin"] = request.LastMin
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		query["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.SendStatus)) {
		query["SendStatus"] = request.SendStatus
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertLogList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertLogListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert logs.
//
// Description:
//
// You can call the operation to query only the alert logs within the last year.
//
// This topic provides an example to show how to query the alert logs of Elastic Compute Service (ECS) based on the `product` dimension.
//
// @param request - DescribeAlertLogListRequest
//
// @return DescribeAlertLogListResponse
func (client *Client) DescribeAlertLogList(request *DescribeAlertLogListRequest) (_result *DescribeAlertLogListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertLogListResponse{}
	_body, _err := client.DescribeAlertLogListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the resources for which active alerts are triggered based on an alert rule.
//
// @param request - DescribeAlertingMetricRuleResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAlertingMetricRuleResourcesResponse
func (client *Client) DescribeAlertingMetricRuleResourcesWithOptions(request *DescribeAlertingMetricRuleResourcesRequest, runtime *util.RuntimeOptions) (_result *DescribeAlertingMetricRuleResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAlertingMetricRuleResources"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAlertingMetricRuleResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the resources for which active alerts are triggered based on an alert rule.
//
// @param request - DescribeAlertingMetricRuleResourcesRequest
//
// @return DescribeAlertingMetricRuleResourcesResponse
func (client *Client) DescribeAlertingMetricRuleResources(request *DescribeAlertingMetricRuleResourcesRequest) (_result *DescribeAlertingMetricRuleResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAlertingMetricRuleResourcesResponse{}
	_body, _err := client.DescribeAlertingMetricRuleResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert groups.
//
// @param request - DescribeContactGroupListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContactGroupListResponse
func (client *Client) DescribeContactGroupListWithOptions(request *DescribeContactGroupListRequest, runtime *util.RuntimeOptions) (_result *DescribeContactGroupListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeContactGroupList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeContactGroupListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert groups.
//
// @param request - DescribeContactGroupListRequest
//
// @return DescribeContactGroupListResponse
func (client *Client) DescribeContactGroupList(request *DescribeContactGroupListRequest) (_result *DescribeContactGroupListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeContactGroupListResponse{}
	_body, _err := client.DescribeContactGroupListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert contacts.
//
// @param request - DescribeContactListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContactListResponse
func (client *Client) DescribeContactListWithOptions(request *DescribeContactListRequest, runtime *util.RuntimeOptions) (_result *DescribeContactListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChanelType)) {
		query["ChanelType"] = request.ChanelType
	}

	if !tea.BoolValue(util.IsUnset(request.ChanelValue)) {
		query["ChanelValue"] = request.ChanelValue
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeContactList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeContactListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert contacts.
//
// @param request - DescribeContactListRequest
//
// @return DescribeContactListResponse
func (client *Client) DescribeContactList(request *DescribeContactListRequest) (_result *DescribeContactListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeContactListResponse{}
	_body, _err := client.DescribeContactListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the alert contacts in an alert contact group.
//
// @param request - DescribeContactListByContactGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeContactListByContactGroupResponse
func (client *Client) DescribeContactListByContactGroupWithOptions(request *DescribeContactListByContactGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeContactListByContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupName)) {
		query["ContactGroupName"] = request.ContactGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeContactListByContactGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeContactListByContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the alert contacts in an alert contact group.
//
// @param request - DescribeContactListByContactGroupRequest
//
// @return DescribeContactListByContactGroupResponse
func (client *Client) DescribeContactListByContactGroup(request *DescribeContactListByContactGroupRequest) (_result *DescribeContactListByContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeContactListByContactGroupResponse{}
	_body, _err := client.DescribeContactListByContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a custom event that occurred in a specified time period.
//
// @param request - DescribeCustomEventAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomEventAttributeResponse
func (client *Client) DescribeCustomEventAttributeWithOptions(request *DescribeCustomEventAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeCustomEventAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeywords)) {
		query["SearchKeywords"] = request.SearchKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCustomEventAttribute"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCustomEventAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a custom event that occurred in a specified time period.
//
// @param request - DescribeCustomEventAttributeRequest
//
// @return DescribeCustomEventAttributeResponse
func (client *Client) DescribeCustomEventAttribute(request *DescribeCustomEventAttributeRequest) (_result *DescribeCustomEventAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustomEventAttributeResponse{}
	_body, _err := client.DescribeCustomEventAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of times that a custom event occurred in a specified time period.
//
// Description:
//
// >  This operation counts the number of times that a custom event occurred for each service.
//
// @param request - DescribeCustomEventCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomEventCountResponse
func (client *Client) DescribeCustomEventCountWithOptions(request *DescribeCustomEventCountRequest, runtime *util.RuntimeOptions) (_result *DescribeCustomEventCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeywords)) {
		query["SearchKeywords"] = request.SearchKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCustomEventCount"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCustomEventCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of times that a custom event occurred in a specified time period.
//
// Description:
//
// >  This operation counts the number of times that a custom event occurred for each service.
//
// @param request - DescribeCustomEventCountRequest
//
// @return DescribeCustomEventCountResponse
func (client *Client) DescribeCustomEventCount(request *DescribeCustomEventCountRequest) (_result *DescribeCustomEventCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustomEventCountResponse{}
	_body, _err := client.DescribeCustomEventCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of times that a custom event occurred during each interval of a time period.
//
// @param request - DescribeCustomEventHistogramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomEventHistogramResponse
func (client *Client) DescribeCustomEventHistogramWithOptions(request *DescribeCustomEventHistogramRequest, runtime *util.RuntimeOptions) (_result *DescribeCustomEventHistogramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		query["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeywords)) {
		query["SearchKeywords"] = request.SearchKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCustomEventHistogram"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCustomEventHistogramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of times that a custom event occurred during each interval of a time period.
//
// @param request - DescribeCustomEventHistogramRequest
//
// @return DescribeCustomEventHistogramResponse
func (client *Client) DescribeCustomEventHistogram(request *DescribeCustomEventHistogramRequest) (_result *DescribeCustomEventHistogramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustomEventHistogramResponse{}
	_body, _err := client.DescribeCustomEventHistogramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the reported monitoring data.
//
// Description:
//
// >  You can call the DescribeMetricList operation to query the metrics of cloud services. For more information, see [DescribeMetricList](https://help.aliyun.com/document_detail/51936.html).
//
// @param request - DescribeCustomMetricListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomMetricListResponse
func (client *Client) DescribeCustomMetricListWithOptions(request *DescribeCustomMetricListRequest, runtime *util.RuntimeOptions) (_result *DescribeCustomMetricListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Dimension)) {
		query["Dimension"] = request.Dimension
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Md5)) {
		query["Md5"] = request.Md5
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCustomMetricList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCustomMetricListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the reported monitoring data.
//
// Description:
//
// >  You can call the DescribeMetricList operation to query the metrics of cloud services. For more information, see [DescribeMetricList](https://help.aliyun.com/document_detail/51936.html).
//
// @param request - DescribeCustomMetricListRequest
//
// @return DescribeCustomMetricListResponse
func (client *Client) DescribeCustomMetricList(request *DescribeCustomMetricListRequest) (_result *DescribeCustomMetricListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustomMetricListResponse{}
	_body, _err := client.DescribeCustomMetricListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries tag rules.
//
// Description:
//
// This topic provides an example to show how to query tag rules that are related to `tagkey1`. The sample responses indicate that two tag rules are found. The rule IDs are `1536df65-a719-429d-8813-73cc40d7****` and `56e8cebb-b3d7-4a91-9880-78a8c84f****`.
//
// @param request - DescribeDynamicTagRuleListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDynamicTagRuleListResponse
func (client *Client) DescribeDynamicTagRuleListWithOptions(request *DescribeDynamicTagRuleListRequest, runtime *util.RuntimeOptions) (_result *DescribeDynamicTagRuleListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DynamicTagRuleId)) {
		query["DynamicTagRuleId"] = request.DynamicTagRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	if !tea.BoolValue(util.IsUnset(request.TagRegionId)) {
		query["TagRegionId"] = request.TagRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TagValue)) {
		query["TagValue"] = request.TagValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDynamicTagRuleList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDynamicTagRuleListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries tag rules.
//
// Description:
//
// This topic provides an example to show how to query tag rules that are related to `tagkey1`. The sample responses indicate that two tag rules are found. The rule IDs are `1536df65-a719-429d-8813-73cc40d7****` and `56e8cebb-b3d7-4a91-9880-78a8c84f****`.
//
// @param request - DescribeDynamicTagRuleListRequest
//
// @return DescribeDynamicTagRuleListResponse
func (client *Client) DescribeDynamicTagRuleList(request *DescribeDynamicTagRuleListRequest) (_result *DescribeDynamicTagRuleListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDynamicTagRuleListResponse{}
	_body, _err := client.DescribeDynamicTagRuleListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of an event-triggered alert rule.
//
// Description:
//
// This topic provides an example to show how to query the details of an event-triggered alert rule named `testRule`.
//
// @param request - DescribeEventRuleAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventRuleAttributeResponse
func (client *Client) DescribeEventRuleAttributeWithOptions(request *DescribeEventRuleAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeEventRuleAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.SilenceTime)) {
		query["SilenceTime"] = request.SilenceTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventRuleAttribute"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventRuleAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an event-triggered alert rule.
//
// Description:
//
// This topic provides an example to show how to query the details of an event-triggered alert rule named `testRule`.
//
// @param request - DescribeEventRuleAttributeRequest
//
// @return DescribeEventRuleAttributeResponse
func (client *Client) DescribeEventRuleAttribute(request *DescribeEventRuleAttributeRequest) (_result *DescribeEventRuleAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventRuleAttributeResponse{}
	_body, _err := client.DescribeEventRuleAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries event-triggered alert rules.
//
// @param request - DescribeEventRuleListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventRuleListResponse
func (client *Client) DescribeEventRuleListWithOptions(request *DescribeEventRuleListRequest, runtime *util.RuntimeOptions) (_result *DescribeEventRuleListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IsEnable)) {
		query["IsEnable"] = request.IsEnable
	}

	if !tea.BoolValue(util.IsUnset(request.NamePrefix)) {
		query["NamePrefix"] = request.NamePrefix
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventRuleList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventRuleListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries event-triggered alert rules.
//
// @param request - DescribeEventRuleListRequest
//
// @return DescribeEventRuleListResponse
func (client *Client) DescribeEventRuleList(request *DescribeEventRuleListRequest) (_result *DescribeEventRuleListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventRuleListResponse{}
	_body, _err := client.DescribeEventRuleListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries event-triggered alert rules.
//
// Description:
//
// This topic provides an example to show how to query the details of an event-triggered alert rule named `testRule`.
//
// @param request - DescribeEventRuleTargetListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEventRuleTargetListResponse
func (client *Client) DescribeEventRuleTargetListWithOptions(request *DescribeEventRuleTargetListRequest, runtime *util.RuntimeOptions) (_result *DescribeEventRuleTargetListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEventRuleTargetList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEventRuleTargetListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries event-triggered alert rules.
//
// Description:
//
// This topic provides an example to show how to query the details of an event-triggered alert rule named `testRule`.
//
// @param request - DescribeEventRuleTargetListRequest
//
// @return DescribeEventRuleTargetListResponse
func (client *Client) DescribeEventRuleTargetList(request *DescribeEventRuleTargetListRequest) (_result *DescribeEventRuleTargetListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEventRuleTargetListResponse{}
	_body, _err := client.DescribeEventRuleTargetListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries configuration sets that are used to export monitoring data.
//
// @param request - DescribeExporterOutputListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExporterOutputListResponse
func (client *Client) DescribeExporterOutputListWithOptions(request *DescribeExporterOutputListRequest, runtime *util.RuntimeOptions) (_result *DescribeExporterOutputListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExporterOutputList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExporterOutputListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries configuration sets that are used to export monitoring data.
//
// @param request - DescribeExporterOutputListRequest
//
// @return DescribeExporterOutputListResponse
func (client *Client) DescribeExporterOutputList(request *DescribeExporterOutputListRequest) (_result *DescribeExporterOutputListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExporterOutputListResponse{}
	_body, _err := client.DescribeExporterOutputListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries data export rules.
//
// @param request - DescribeExporterRuleListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExporterRuleListResponse
func (client *Client) DescribeExporterRuleListWithOptions(request *DescribeExporterRuleListRequest, runtime *util.RuntimeOptions) (_result *DescribeExporterRuleListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExporterRuleList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExporterRuleListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries data export rules.
//
// @param request - DescribeExporterRuleListRequest
//
// @return DescribeExporterRuleListResponse
func (client *Client) DescribeExporterRuleList(request *DescribeExporterRuleListRequest) (_result *DescribeExporterRuleListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExporterRuleListResponse{}
	_body, _err := client.DescribeExporterRuleListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the process monitoring tasks for an application group.
//
// Description:
//
// You can create a process monitoring task to monitor all or the specified Elastic Compute Service (ECS) instances in an application group and configure alert rules for the process monitoring task.
//
// @param request - DescribeGroupMonitoringAgentProcessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGroupMonitoringAgentProcessResponse
func (client *Client) DescribeGroupMonitoringAgentProcessWithOptions(request *DescribeGroupMonitoringAgentProcessRequest, runtime *util.RuntimeOptions) (_result *DescribeGroupMonitoringAgentProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessName)) {
		query["ProcessName"] = request.ProcessName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGroupMonitoringAgentProcess"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGroupMonitoringAgentProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the process monitoring tasks for an application group.
//
// Description:
//
// You can create a process monitoring task to monitor all or the specified Elastic Compute Service (ECS) instances in an application group and configure alert rules for the process monitoring task.
//
// @param request - DescribeGroupMonitoringAgentProcessRequest
//
// @return DescribeGroupMonitoringAgentProcessResponse
func (client *Client) DescribeGroupMonitoringAgentProcess(request *DescribeGroupMonitoringAgentProcessRequest) (_result *DescribeGroupMonitoringAgentProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGroupMonitoringAgentProcessResponse{}
	_body, _err := client.DescribeGroupMonitoringAgentProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries availability monitoring tasks.
//
// Description:
//
// This topic provides an example to show how to query all the availability monitoring tasks of your Alibaba Cloud account. The sample responses indicate that the account has one availability monitoring task named `ecs_instance`.
//
// @param request - DescribeHostAvailabilityListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHostAvailabilityListResponse
func (client *Client) DescribeHostAvailabilityListWithOptions(request *DescribeHostAvailabilityListRequest, runtime *util.RuntimeOptions) (_result *DescribeHostAvailabilityListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHostAvailabilityList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHostAvailabilityListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries availability monitoring tasks.
//
// Description:
//
// This topic provides an example to show how to query all the availability monitoring tasks of your Alibaba Cloud account. The sample responses indicate that the account has one availability monitoring task named `ecs_instance`.
//
// @param request - DescribeHostAvailabilityListRequest
//
// @return DescribeHostAvailabilityListResponse
func (client *Client) DescribeHostAvailabilityList(request *DescribeHostAvailabilityListRequest) (_result *DescribeHostAvailabilityListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHostAvailabilityListResponse{}
	_body, _err := client.DescribeHostAvailabilityListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the monitoring data in a namespace.
//
// Description:
//
// # [](#)Prerequisites
//
// Hybrid Cloud Monitoring is activated. For more information, see [Activate Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/250773.html).
//
// # [](#)Limits
//
// The size of monitoring data that is returned in each call cannot exceed 1.5 MB. If the returned data reaches the upper limit, the query fails. You must reset the query conditions.
//
// # [](#)Description
//
// This topic provides an example to show how to query the monitoring data of the `AliyunEcs_cpu_total` metric in the `default-aliyun` namespace from `1653804865` (14:14:25 on May 29, 2022) to `1653805225` (14:20:25 on May 29, 2022).
//
// @param request - DescribeHybridMonitorDataListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHybridMonitorDataListResponse
func (client *Client) DescribeHybridMonitorDataListWithOptions(request *DescribeHybridMonitorDataListRequest, runtime *util.RuntimeOptions) (_result *DescribeHybridMonitorDataListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PromSQL)) {
		query["PromSQL"] = request.PromSQL
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHybridMonitorDataList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHybridMonitorDataListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the monitoring data in a namespace.
//
// Description:
//
// # [](#)Prerequisites
//
// Hybrid Cloud Monitoring is activated. For more information, see [Activate Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/250773.html).
//
// # [](#)Limits
//
// The size of monitoring data that is returned in each call cannot exceed 1.5 MB. If the returned data reaches the upper limit, the query fails. You must reset the query conditions.
//
// # [](#)Description
//
// This topic provides an example to show how to query the monitoring data of the `AliyunEcs_cpu_total` metric in the `default-aliyun` namespace from `1653804865` (14:14:25 on May 29, 2022) to `1653805225` (14:20:25 on May 29, 2022).
//
// @param request - DescribeHybridMonitorDataListRequest
//
// @return DescribeHybridMonitorDataListResponse
func (client *Client) DescribeHybridMonitorDataList(request *DescribeHybridMonitorDataListRequest) (_result *DescribeHybridMonitorDataListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHybridMonitorDataListResponse{}
	_body, _err := client.DescribeHybridMonitorDataListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries namespaces and the details of the related metric import tasks.
//
// Description:
//
// In this example, all namespaces within the current account are queried. The response shows that the current account has only one namespace named `aliyun-test`.
//
// @param request - DescribeHybridMonitorNamespaceListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHybridMonitorNamespaceListResponse
func (client *Client) DescribeHybridMonitorNamespaceListWithOptions(request *DescribeHybridMonitorNamespaceListRequest, runtime *util.RuntimeOptions) (_result *DescribeHybridMonitorNamespaceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ShowTaskStatistic)) {
		query["ShowTaskStatistic"] = request.ShowTaskStatistic
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHybridMonitorNamespaceList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHybridMonitorNamespaceListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries namespaces and the details of the related metric import tasks.
//
// Description:
//
// In this example, all namespaces within the current account are queried. The response shows that the current account has only one namespace named `aliyun-test`.
//
// @param request - DescribeHybridMonitorNamespaceListRequest
//
// @return DescribeHybridMonitorNamespaceListResponse
func (client *Client) DescribeHybridMonitorNamespaceList(request *DescribeHybridMonitorNamespaceListRequest) (_result *DescribeHybridMonitorNamespaceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHybridMonitorNamespaceListResponse{}
	_body, _err := client.DescribeHybridMonitorNamespaceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries Logstore groups.
//
// Description:
//
// In this example, all Logstore groups within the current account are queried. The response shows that the current account has two Logstore groups: `Logstore_test` and `Logstore_aliyun`.
//
// @param request - DescribeHybridMonitorSLSGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHybridMonitorSLSGroupResponse
func (client *Client) DescribeHybridMonitorSLSGroupWithOptions(request *DescribeHybridMonitorSLSGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeHybridMonitorSLSGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SLSGroupName)) {
		query["SLSGroupName"] = request.SLSGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHybridMonitorSLSGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHybridMonitorSLSGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries Logstore groups.
//
// Description:
//
// In this example, all Logstore groups within the current account are queried. The response shows that the current account has two Logstore groups: `Logstore_test` and `Logstore_aliyun`.
//
// @param request - DescribeHybridMonitorSLSGroupRequest
//
// @return DescribeHybridMonitorSLSGroupResponse
func (client *Client) DescribeHybridMonitorSLSGroup(request *DescribeHybridMonitorSLSGroupRequest) (_result *DescribeHybridMonitorSLSGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHybridMonitorSLSGroupResponse{}
	_body, _err := client.DescribeHybridMonitorSLSGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries metric import tasks.
//
// Description:
//
// This topic provides an example on how to query all metric import tasks that belong to the current Alibaba Cloud account. The returned result indicates that the current account has only one metric import task. The metric import task is named `aliyun_task`.
//
// @param request - DescribeHybridMonitorTaskListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHybridMonitorTaskListResponse
func (client *Client) DescribeHybridMonitorTaskListWithOptions(request *DescribeHybridMonitorTaskListRequest, runtime *util.RuntimeOptions) (_result *DescribeHybridMonitorTaskListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeAliyunTask)) {
		query["IncludeAliyunTask"] = request.IncludeAliyunTask
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TargetUserId)) {
		query["TargetUserId"] = request.TargetUserId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHybridMonitorTaskList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHybridMonitorTaskListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries metric import tasks.
//
// Description:
//
// This topic provides an example on how to query all metric import tasks that belong to the current Alibaba Cloud account. The returned result indicates that the current account has only one metric import task. The metric import task is named `aliyun_task`.
//
// @param request - DescribeHybridMonitorTaskListRequest
//
// @return DescribeHybridMonitorTaskListResponse
func (client *Client) DescribeHybridMonitorTaskList(request *DescribeHybridMonitorTaskListRequest) (_result *DescribeHybridMonitorTaskListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHybridMonitorTaskListResponse{}
	_body, _err := client.DescribeHybridMonitorTaskListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a log monitoring metric.
//
// @param request - DescribeLogMonitorAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLogMonitorAttributeResponse
func (client *Client) DescribeLogMonitorAttributeWithOptions(request *DescribeLogMonitorAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLogMonitorAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLogMonitorAttribute"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLogMonitorAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a log monitoring metric.
//
// @param request - DescribeLogMonitorAttributeRequest
//
// @return DescribeLogMonitorAttributeResponse
func (client *Client) DescribeLogMonitorAttribute(request *DescribeLogMonitorAttributeRequest) (_result *DescribeLogMonitorAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLogMonitorAttributeResponse{}
	_body, _err := client.DescribeLogMonitorAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries log monitoring metrics.
//
// @param request - DescribeLogMonitorListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLogMonitorListResponse
func (client *Client) DescribeLogMonitorListWithOptions(request *DescribeLogMonitorListRequest, runtime *util.RuntimeOptions) (_result *DescribeLogMonitorListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchValue)) {
		query["SearchValue"] = request.SearchValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLogMonitorList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLogMonitorListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries log monitoring metrics.
//
// @param request - DescribeLogMonitorListRequest
//
// @return DescribeLogMonitorListResponse
func (client *Client) DescribeLogMonitorList(request *DescribeLogMonitorListRequest) (_result *DescribeLogMonitorListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLogMonitorListResponse{}
	_body, _err := client.DescribeLogMonitorListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the monitoring data of a metric for a specified cloud service.
//
// Description:
//
// ### [](#)Limits
//
// Each API operation can be called up to 10 times per second. An Alibaba Cloud account and the RAM users within the account share the quota.
//
// ### [](#)Description
//
// >  Different from [DescribeMetricList](https://help.aliyun.com/document_detail/51936.html), the DescribeMetricData operation provides statistical features. You can set the Dimension parameter to `{"instanceId": "i-abcdefgh12****"}` to aggregate all data of your Alibaba Cloud account.
//
// This topic provides an example to show how to query the monitoring data of the `cpu_idle` metric for Elastic Compute Service (ECS). The namespace of ECS is `acs_ecs_dashboard`.
//
// @param request - DescribeMetricDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricDataResponse
func (client *Client) DescribeMetricDataWithOptions(request *DescribeMetricDataRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Dimensions)) {
		query["Dimensions"] = request.Dimensions
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Express)) {
		query["Express"] = request.Express
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		query["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricData"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the monitoring data of a metric for a specified cloud service.
//
// Description:
//
// ### [](#)Limits
//
// Each API operation can be called up to 10 times per second. An Alibaba Cloud account and the RAM users within the account share the quota.
//
// ### [](#)Description
//
// >  Different from [DescribeMetricList](https://help.aliyun.com/document_detail/51936.html), the DescribeMetricData operation provides statistical features. You can set the Dimension parameter to `{"instanceId": "i-abcdefgh12****"}` to aggregate all data of your Alibaba Cloud account.
//
// This topic provides an example to show how to query the monitoring data of the `cpu_idle` metric for Elastic Compute Service (ECS). The namespace of ECS is `acs_ecs_dashboard`.
//
// @param request - DescribeMetricDataRequest
//
// @return DescribeMetricDataResponse
func (client *Client) DescribeMetricData(request *DescribeMetricDataRequest) (_result *DescribeMetricDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricDataResponse{}
	_body, _err := client.DescribeMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the latest monitoring data of a metric.
//
// Description:
//
// ### [](#)Limits
//
// Each API operation can be called up to 50 times per second. An Alibaba Cloud account and the RAM users within the account share the quota.
//
// >  If `Throttling.User` or `Request was denied due to user flow control` is returned when you call an API operation, the API operation is throttled. For more information about how to handle the issue, see [How do I handle the throttling of a query API?](https://help.aliyun.com/document_detail/2615031.html)
//
// ### [](#)Precautions
//
// The storage duration of the monitoring data of each cloud service is related to the `Period` parameter (statistical period). A larger value of the `Period` parameter indicates that the monitoring data is distributed in a larger time range and the storage duration of the monitoring data is longer. The following list describes the specific relationships:
//
// 	- If the value of the `Period` parameter is less than 60 seconds, the storage duration is seven days.
//
// 	- If the value of the `Period` parameter is 60 seconds, the storage duration is 31 days.
//
// 	- If the value of the `Period` parameter is 300 seconds, the storage duration is 91 days.
//
// ### [](#)Description
//
// This topic provides an example on how to query the latest monitoring data of the `CPUUtilization` metric for Elastic Compute Service (ECS). The namespace of ECS is `acs_ecs_dashboard`. The returned result indicates that the monitoring data for the instance `i-abcdefgh12****` of the account `123456789876****` is queried at an interval of 60 seconds. The maximum, minimum, and average values of the metric are 100, 93.1, and 99.52.
//
// @param request - DescribeMetricLastRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricLastResponse
func (client *Client) DescribeMetricLastWithOptions(request *DescribeMetricLastRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricLastResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Dimensions)) {
		query["Dimensions"] = request.Dimensions
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Express)) {
		query["Express"] = request.Express
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		query["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricLast"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricLastResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the latest monitoring data of a metric.
//
// Description:
//
// ### [](#)Limits
//
// Each API operation can be called up to 50 times per second. An Alibaba Cloud account and the RAM users within the account share the quota.
//
// >  If `Throttling.User` or `Request was denied due to user flow control` is returned when you call an API operation, the API operation is throttled. For more information about how to handle the issue, see [How do I handle the throttling of a query API?](https://help.aliyun.com/document_detail/2615031.html)
//
// ### [](#)Precautions
//
// The storage duration of the monitoring data of each cloud service is related to the `Period` parameter (statistical period). A larger value of the `Period` parameter indicates that the monitoring data is distributed in a larger time range and the storage duration of the monitoring data is longer. The following list describes the specific relationships:
//
// 	- If the value of the `Period` parameter is less than 60 seconds, the storage duration is seven days.
//
// 	- If the value of the `Period` parameter is 60 seconds, the storage duration is 31 days.
//
// 	- If the value of the `Period` parameter is 300 seconds, the storage duration is 91 days.
//
// ### [](#)Description
//
// This topic provides an example on how to query the latest monitoring data of the `CPUUtilization` metric for Elastic Compute Service (ECS). The namespace of ECS is `acs_ecs_dashboard`. The returned result indicates that the monitoring data for the instance `i-abcdefgh12****` of the account `123456789876****` is queried at an interval of 60 seconds. The maximum, minimum, and average values of the metric are 100, 93.1, and 99.52.
//
// @param request - DescribeMetricLastRequest
//
// @return DescribeMetricLastResponse
func (client *Client) DescribeMetricLast(request *DescribeMetricLastRequest) (_result *DescribeMetricLastResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricLastResponse{}
	_body, _err := client.DescribeMetricLastWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the monitoring data of a metric for a specified cloud service.
//
// Description:
//
// ## Limits
//
// Each API operation can be called up to 50 times per second. An Alibaba Cloud account and the RAM users within the account share the quota.
//
// >This topic provides an example to show how to query the monitoring data of the `cpu_idle` metric for Elastic Compute Service (ECS). The namespace of ECS is `acs_ecs_dashboard`. The returned result indicates that the monitoring data for the instance `i-abcdefgh12****` of the account `120886317861****` is queried at an interval of 60 seconds. The maximum, minimum, and average values of the metric are 100, 93.1, and 99.52.
//
// @param request - DescribeMetricListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricListResponse
func (client *Client) DescribeMetricListWithOptions(request *DescribeMetricListRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Dimensions)) {
		query["Dimensions"] = request.Dimensions
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Express)) {
		query["Express"] = request.Express
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		query["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the monitoring data of a metric for a specified cloud service.
//
// Description:
//
// ## Limits
//
// Each API operation can be called up to 50 times per second. An Alibaba Cloud account and the RAM users within the account share the quota.
//
// >This topic provides an example to show how to query the monitoring data of the `cpu_idle` metric for Elastic Compute Service (ECS). The namespace of ECS is `acs_ecs_dashboard`. The returned result indicates that the monitoring data for the instance `i-abcdefgh12****` of the account `120886317861****` is queried at an interval of 60 seconds. The maximum, minimum, and average values of the metric are 100, 93.1, and 99.52.
//
// @param request - DescribeMetricListRequest
//
// @return DescribeMetricListResponse
func (client *Client) DescribeMetricList(request *DescribeMetricListRequest) (_result *DescribeMetricListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricListResponse{}
	_body, _err := client.DescribeMetricListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of metrics that are supported in CloudMonitor.
//
// Description:
//
// This operation is used together with DescribeMetricList and DescribeMetricLast. For more information, see [DescribeMetricList](https://help.aliyun.com/document_detail/51936.html) and [DescribeMetricLast](https://help.aliyun.com/document_detail/51939.html).
//
// @param request - DescribeMetricMetaListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricMetaListResponse
func (client *Client) DescribeMetricMetaListWithOptions(request *DescribeMetricMetaListRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricMetaListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Labels)) {
		query["Labels"] = request.Labels
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricMetaList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricMetaListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of metrics that are supported in CloudMonitor.
//
// Description:
//
// This operation is used together with DescribeMetricList and DescribeMetricLast. For more information, see [DescribeMetricList](https://help.aliyun.com/document_detail/51936.html) and [DescribeMetricLast](https://help.aliyun.com/document_detail/51939.html).
//
// @param request - DescribeMetricMetaListRequest
//
// @return DescribeMetricMetaListResponse
func (client *Client) DescribeMetricMetaList(request *DescribeMetricMetaListRequest) (_result *DescribeMetricMetaListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricMetaListResponse{}
	_body, _err := client.DescribeMetricMetaListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMetricRuleBlackListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricRuleBlackListResponse
func (client *Client) DescribeMetricRuleBlackListWithOptions(request *DescribeMetricRuleBlackListRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricRuleBlackListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.Ids)) {
		query["Ids"] = request.Ids
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.IsEnable)) {
		query["IsEnable"] = request.IsEnable
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScopeType)) {
		query["ScopeType"] = request.ScopeType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricRuleBlackList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricRuleBlackListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMetricRuleBlackListRequest
//
// @return DescribeMetricRuleBlackListResponse
func (client *Client) DescribeMetricRuleBlackList(request *DescribeMetricRuleBlackListRequest) (_result *DescribeMetricRuleBlackListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricRuleBlackListResponse{}
	_body, _err := client.DescribeMetricRuleBlackListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of alert rules in each state.
//
// @param request - DescribeMetricRuleCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricRuleCountResponse
func (client *Client) DescribeMetricRuleCountWithOptions(request *DescribeMetricRuleCountRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricRuleCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricRuleCount"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricRuleCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of alert rules in each state.
//
// @param request - DescribeMetricRuleCountRequest
//
// @return DescribeMetricRuleCountResponse
func (client *Client) DescribeMetricRuleCount(request *DescribeMetricRuleCountRequest) (_result *DescribeMetricRuleCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricRuleCountResponse{}
	_body, _err := client.DescribeMetricRuleCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert rules.
//
// Description:
//
// This topic provides an example on how to query all alert rules within your Alibaba Cloud account. The returned result shows that only one alert rule is found. The name of the alert rule is `Rule_01` and the ID is `applyTemplate344cfd42-0f32-4fd6-805a-88d7908a****`.
//
// @param request - DescribeMetricRuleListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricRuleListResponse
func (client *Client) DescribeMetricRuleListWithOptions(request *DescribeMetricRuleListRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricRuleListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertState)) {
		query["AlertState"] = request.AlertState
	}

	if !tea.BoolValue(util.IsUnset(request.Dimensions)) {
		query["Dimensions"] = request.Dimensions
	}

	if !tea.BoolValue(util.IsUnset(request.EnableState)) {
		query["EnableState"] = request.EnableState
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RuleIds)) {
		query["RuleIds"] = request.RuleIds
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricRuleList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricRuleListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert rules.
//
// Description:
//
// This topic provides an example on how to query all alert rules within your Alibaba Cloud account. The returned result shows that only one alert rule is found. The name of the alert rule is `Rule_01` and the ID is `applyTemplate344cfd42-0f32-4fd6-805a-88d7908a****`.
//
// @param request - DescribeMetricRuleListRequest
//
// @return DescribeMetricRuleListResponse
func (client *Client) DescribeMetricRuleList(request *DescribeMetricRuleListRequest) (_result *DescribeMetricRuleListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricRuleListResponse{}
	_body, _err := client.DescribeMetricRuleListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the resources that are associated with a specified alert rule.
//
// Description:
//
// ## Limit
//
// This operation supports only Message Service (MNS) resources.
//
// >This topic provides an example on how to query the resources that are associated with an alert rule whose ID is `ae06917_75a8c43178ab66****`.
//
// @param request - DescribeMetricRuleTargetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricRuleTargetsResponse
func (client *Client) DescribeMetricRuleTargetsWithOptions(request *DescribeMetricRuleTargetsRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricRuleTargetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricRuleTargets"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricRuleTargetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the resources that are associated with a specified alert rule.
//
// Description:
//
// ## Limit
//
// This operation supports only Message Service (MNS) resources.
//
// >This topic provides an example on how to query the resources that are associated with an alert rule whose ID is `ae06917_75a8c43178ab66****`.
//
// @param request - DescribeMetricRuleTargetsRequest
//
// @return DescribeMetricRuleTargetsResponse
func (client *Client) DescribeMetricRuleTargets(request *DescribeMetricRuleTargetsRequest) (_result *DescribeMetricRuleTargetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricRuleTargetsResponse{}
	_body, _err := client.DescribeMetricRuleTargetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of an alert template.
//
// Description:
//
// This topic provides an example on how to query the details of an alert template whose ID is `70****`.
//
// @param request - DescribeMetricRuleTemplateAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricRuleTemplateAttributeResponse
func (client *Client) DescribeMetricRuleTemplateAttributeWithOptions(request *DescribeMetricRuleTemplateAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricRuleTemplateAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricRuleTemplateAttribute"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricRuleTemplateAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an alert template.
//
// Description:
//
// This topic provides an example on how to query the details of an alert template whose ID is `70****`.
//
// @param request - DescribeMetricRuleTemplateAttributeRequest
//
// @return DescribeMetricRuleTemplateAttributeResponse
func (client *Client) DescribeMetricRuleTemplateAttribute(request *DescribeMetricRuleTemplateAttributeRequest) (_result *DescribeMetricRuleTemplateAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricRuleTemplateAttributeResponse{}
	_body, _err := client.DescribeMetricRuleTemplateAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries alert templates.
//
// Description:
//
// This topic provides an example on how to query alert templates. In this example, the following alert templates are returned in the response: `ECS_Template1` and `ECS_Template2`.
//
// @param request - DescribeMetricRuleTemplateListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricRuleTemplateListResponse
func (client *Client) DescribeMetricRuleTemplateListWithOptions(request *DescribeMetricRuleTemplateListRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricRuleTemplateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.History)) {
		query["History"] = request.History
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		query["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricRuleTemplateList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricRuleTemplateListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries alert templates.
//
// Description:
//
// This topic provides an example on how to query alert templates. In this example, the following alert templates are returned in the response: `ECS_Template1` and `ECS_Template2`.
//
// @param request - DescribeMetricRuleTemplateListRequest
//
// @return DescribeMetricRuleTemplateListResponse
func (client *Client) DescribeMetricRuleTemplateList(request *DescribeMetricRuleTemplateListRequest) (_result *DescribeMetricRuleTemplateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricRuleTemplateListResponse{}
	_body, _err := client.DescribeMetricRuleTemplateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the latest monitoring data of a metric for a cloud service. The data can be sorted by a specified order.
//
// Description:
//
// ### [](#)Limits
//
// Each API operation can be called up to 10 times per second. An Alibaba Cloud account and the RAM users within the account share the quota.
//
// ### [](#)Precautions
//
// The storage duration of the monitoring data of each cloud service is related to the `Period` parameter (statistical period). A larger value of the `Period` parameter indicates that the monitoring data is distributed in a larger time range and the storage duration of the monitoring data is longer. The following list describes the specific relationships:
//
// 	- If the value of the `Period` parameter is less than 60 seconds, the storage duration is seven days.
//
// 	- If the value of the `Period` parameter is 60 seconds, the storage duration is 31 days.
//
// 	- If the value of the `Period` parameter is 300 seconds, the storage duration is 91 days.
//
// ### [](#)Description
//
// This topic provides an example to show how to query the monitoring data of the `cpu_idle` metric in the last 60 seconds for Elastic Compute Service (ECS). The namespace of ECS is `acs_ecs_dashboard`. The monitoring data is sorted in the descending order based on the `Average` field.
//
// @param request - DescribeMetricTopRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricTopResponse
func (client *Client) DescribeMetricTopWithOptions(request *DescribeMetricTopRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricTopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Dimensions)) {
		query["Dimensions"] = request.Dimensions
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Express)) {
		query["Express"] = request.Express
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		query["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.OrderDesc)) {
		query["OrderDesc"] = request.OrderDesc
	}

	if !tea.BoolValue(util.IsUnset(request.Orderby)) {
		query["Orderby"] = request.Orderby
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetricTop"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricTopResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the latest monitoring data of a metric for a cloud service. The data can be sorted by a specified order.
//
// Description:
//
// ### [](#)Limits
//
// Each API operation can be called up to 10 times per second. An Alibaba Cloud account and the RAM users within the account share the quota.
//
// ### [](#)Precautions
//
// The storage duration of the monitoring data of each cloud service is related to the `Period` parameter (statistical period). A larger value of the `Period` parameter indicates that the monitoring data is distributed in a larger time range and the storage duration of the monitoring data is longer. The following list describes the specific relationships:
//
// 	- If the value of the `Period` parameter is less than 60 seconds, the storage duration is seven days.
//
// 	- If the value of the `Period` parameter is 60 seconds, the storage duration is 31 days.
//
// 	- If the value of the `Period` parameter is 300 seconds, the storage duration is 91 days.
//
// ### [](#)Description
//
// This topic provides an example to show how to query the monitoring data of the `cpu_idle` metric in the last 60 seconds for Elastic Compute Service (ECS). The namespace of ECS is `acs_ecs_dashboard`. The monitoring data is sorted in the descending order based on the `Average` field.
//
// @param request - DescribeMetricTopRequest
//
// @return DescribeMetricTopResponse
func (client *Client) DescribeMetricTop(request *DescribeMetricTopRequest) (_result *DescribeMetricTopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricTopResponse{}
	_body, _err := client.DescribeMetricTopWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the cloud services to which the resources in an application group belong and the number of resources that belong to each cloud service in the application group.
//
// @param request - DescribeMonitorGroupCategoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitorGroupCategoriesResponse
func (client *Client) DescribeMonitorGroupCategoriesWithOptions(request *DescribeMonitorGroupCategoriesRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitorGroupCategoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitorGroupCategories"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitorGroupCategoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the cloud services to which the resources in an application group belong and the number of resources that belong to each cloud service in the application group.
//
// @param request - DescribeMonitorGroupCategoriesRequest
//
// @return DescribeMonitorGroupCategoriesResponse
func (client *Client) DescribeMonitorGroupCategories(request *DescribeMonitorGroupCategoriesRequest) (_result *DescribeMonitorGroupCategoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitorGroupCategoriesResponse{}
	_body, _err := client.DescribeMonitorGroupCategoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the dynamic rules of an application group.
//
// @param request - DescribeMonitorGroupDynamicRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitorGroupDynamicRulesResponse
func (client *Client) DescribeMonitorGroupDynamicRulesWithOptions(request *DescribeMonitorGroupDynamicRulesRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitorGroupDynamicRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitorGroupDynamicRules"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitorGroupDynamicRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the dynamic rules of an application group.
//
// @param request - DescribeMonitorGroupDynamicRulesRequest
//
// @return DescribeMonitorGroupDynamicRulesResponse
func (client *Client) DescribeMonitorGroupDynamicRules(request *DescribeMonitorGroupDynamicRulesRequest) (_result *DescribeMonitorGroupDynamicRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitorGroupDynamicRulesResponse{}
	_body, _err := client.DescribeMonitorGroupDynamicRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of the resources in an application group.
//
// @param request - DescribeMonitorGroupInstanceAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitorGroupInstanceAttributeResponse
func (client *Client) DescribeMonitorGroupInstanceAttributeWithOptions(request *DescribeMonitorGroupInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitorGroupInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Total)) {
		query["Total"] = request.Total
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitorGroupInstanceAttribute"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitorGroupInstanceAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of the resources in an application group.
//
// @param request - DescribeMonitorGroupInstanceAttributeRequest
//
// @return DescribeMonitorGroupInstanceAttributeResponse
func (client *Client) DescribeMonitorGroupInstanceAttribute(request *DescribeMonitorGroupInstanceAttributeRequest) (_result *DescribeMonitorGroupInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitorGroupInstanceAttributeResponse{}
	_body, _err := client.DescribeMonitorGroupInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the resources in an application group.
//
// @param request - DescribeMonitorGroupInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitorGroupInstancesResponse
func (client *Client) DescribeMonitorGroupInstancesWithOptions(request *DescribeMonitorGroupInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitorGroupInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitorGroupInstances"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitorGroupInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the resources in an application group.
//
// @param request - DescribeMonitorGroupInstancesRequest
//
// @return DescribeMonitorGroupInstancesResponse
func (client *Client) DescribeMonitorGroupInstances(request *DescribeMonitorGroupInstancesRequest) (_result *DescribeMonitorGroupInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitorGroupInstancesResponse{}
	_body, _err := client.DescribeMonitorGroupInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the policies that are used to pause alert notifications for an application group.
//
// @param request - DescribeMonitorGroupNotifyPolicyListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitorGroupNotifyPolicyListResponse
func (client *Client) DescribeMonitorGroupNotifyPolicyListWithOptions(request *DescribeMonitorGroupNotifyPolicyListRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitorGroupNotifyPolicyListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyType)) {
		query["PolicyType"] = request.PolicyType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitorGroupNotifyPolicyList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitorGroupNotifyPolicyListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the policies that are used to pause alert notifications for an application group.
//
// @param request - DescribeMonitorGroupNotifyPolicyListRequest
//
// @return DescribeMonitorGroupNotifyPolicyListResponse
func (client *Client) DescribeMonitorGroupNotifyPolicyList(request *DescribeMonitorGroupNotifyPolicyListRequest) (_result *DescribeMonitorGroupNotifyPolicyListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitorGroupNotifyPolicyListResponse{}
	_body, _err := client.DescribeMonitorGroupNotifyPolicyListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries application groups.
//
// Description:
//
// This topic provides an example of how to query the application groups of the current account. The response shows that the current account has two application groups: `testGroup124` and `test123`.
//
// @param request - DescribeMonitorGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitorGroupsResponse
func (client *Client) DescribeMonitorGroupsWithOptions(request *DescribeMonitorGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitorGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DynamicTagRuleId)) {
		query["DynamicTagRuleId"] = request.DynamicTagRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupFounderTagKey)) {
		query["GroupFounderTagKey"] = request.GroupFounderTagKey
	}

	if !tea.BoolValue(util.IsUnset(request.GroupFounderTagValue)) {
		query["GroupFounderTagValue"] = request.GroupFounderTagValue
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeTemplateHistory)) {
		query["IncludeTemplateHistory"] = request.IncludeTemplateHistory
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SelectContactGroups)) {
		query["SelectContactGroups"] = request.SelectContactGroups
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.Types)) {
		query["Types"] = request.Types
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitorGroups"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitorGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries application groups.
//
// Description:
//
// This topic provides an example of how to query the application groups of the current account. The response shows that the current account has two application groups: `testGroup124` and `test123`.
//
// @param request - DescribeMonitorGroupsRequest
//
// @return DescribeMonitorGroupsResponse
func (client *Client) DescribeMonitorGroups(request *DescribeMonitorGroupsRequest) (_result *DescribeMonitorGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitorGroupsResponse{}
	_body, _err := client.DescribeMonitorGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the resource quotas of CloudMonitor.
//
// @param request - DescribeMonitorResourceQuotaAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitorResourceQuotaAttributeResponse
func (client *Client) DescribeMonitorResourceQuotaAttributeWithOptions(request *DescribeMonitorResourceQuotaAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitorResourceQuotaAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ShowUsed)) {
		query["ShowUsed"] = request.ShowUsed
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitorResourceQuotaAttribute"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitorResourceQuotaAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the resource quotas of CloudMonitor.
//
// @param request - DescribeMonitorResourceQuotaAttributeRequest
//
// @return DescribeMonitorResourceQuotaAttributeResponse
func (client *Client) DescribeMonitorResourceQuotaAttribute(request *DescribeMonitorResourceQuotaAttributeRequest) (_result *DescribeMonitorResourceQuotaAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitorResourceQuotaAttributeResponse{}
	_body, _err := client.DescribeMonitorResourceQuotaAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the AccessKey ID and AccessKey secret that are required to install the CloudMonitor agent on a third-party host.
//
// @param request - DescribeMonitoringAgentAccessKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitoringAgentAccessKeyResponse
func (client *Client) DescribeMonitoringAgentAccessKeyWithOptions(request *DescribeMonitoringAgentAccessKeyRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitoringAgentAccessKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitoringAgentAccessKey"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitoringAgentAccessKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the AccessKey ID and AccessKey secret that are required to install the CloudMonitor agent on a third-party host.
//
// @param request - DescribeMonitoringAgentAccessKeyRequest
//
// @return DescribeMonitoringAgentAccessKeyResponse
func (client *Client) DescribeMonitoringAgentAccessKey(request *DescribeMonitoringAgentAccessKeyRequest) (_result *DescribeMonitoringAgentAccessKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitoringAgentAccessKeyResponse{}
	_body, _err := client.DescribeMonitoringAgentAccessKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMonitoringAgentConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitoringAgentConfigResponse
func (client *Client) DescribeMonitoringAgentConfigWithOptions(request *DescribeMonitoringAgentConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitoringAgentConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitoringAgentConfig"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitoringAgentConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMonitoringAgentConfigRequest
//
// @return DescribeMonitoringAgentConfigResponse
func (client *Client) DescribeMonitoringAgentConfig(request *DescribeMonitoringAgentConfigRequest) (_result *DescribeMonitoringAgentConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitoringAgentConfigResponse{}
	_body, _err := client.DescribeMonitoringAgentConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all hosts within the current Alibaba Cloud account, including hosts on which the CloudMonitor agent is installed and uninstalled.
//
// @param request - DescribeMonitoringAgentHostsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitoringAgentHostsResponse
func (client *Client) DescribeMonitoringAgentHostsWithOptions(request *DescribeMonitoringAgentHostsRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitoringAgentHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunHost)) {
		query["AliyunHost"] = request.AliyunHost
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceRegionId)) {
		query["InstanceRegionId"] = request.InstanceRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.KeyWord)) {
		query["KeyWord"] = request.KeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumbers)) {
		query["SerialNumbers"] = request.SerialNumbers
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.SysomStatus)) {
		query["SysomStatus"] = request.SysomStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitoringAgentHosts"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitoringAgentHostsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries all hosts within the current Alibaba Cloud account, including hosts on which the CloudMonitor agent is installed and uninstalled.
//
// @param request - DescribeMonitoringAgentHostsRequest
//
// @return DescribeMonitoringAgentHostsResponse
func (client *Client) DescribeMonitoringAgentHosts(request *DescribeMonitoringAgentHostsRequest) (_result *DescribeMonitoringAgentHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitoringAgentHostsResponse{}
	_body, _err := client.DescribeMonitoringAgentHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// >  Before you call this operation, call the CreateMonitoringAgentProcess operation to create processes. For more information, see [CreateMonitoringAgentProcess](https://help.aliyun.com/document_detail/114951.html~).
//
// This topic provides an example of how to query the processes of the `i-hp3hl3cx1pbahzy8****` instance. The response indicates the details of the `NGINX` and `HTTP` processes.
//
// @param request - DescribeMonitoringAgentProcessesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitoringAgentProcessesResponse
func (client *Client) DescribeMonitoringAgentProcessesWithOptions(request *DescribeMonitoringAgentProcessesRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitoringAgentProcessesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitoringAgentProcesses"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitoringAgentProcessesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// >  Before you call this operation, call the CreateMonitoringAgentProcess operation to create processes. For more information, see [CreateMonitoringAgentProcess](https://help.aliyun.com/document_detail/114951.html~).
//
// This topic provides an example of how to query the processes of the `i-hp3hl3cx1pbahzy8****` instance. The response indicates the details of the `NGINX` and `HTTP` processes.
//
// @param request - DescribeMonitoringAgentProcessesRequest
//
// @return DescribeMonitoringAgentProcessesResponse
func (client *Client) DescribeMonitoringAgentProcesses(request *DescribeMonitoringAgentProcessesRequest) (_result *DescribeMonitoringAgentProcessesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitoringAgentProcessesResponse{}
	_body, _err := client.DescribeMonitoringAgentProcessesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the status of the CloudMonitor agent.
//
// Description:
//
// This topic describes how to query the status of the CloudMonitor agent that is installed on the `i-hp3dunahluwajv6f****` instance. The result indicates that the CloudMonitor agent is in the `running` state.
//
// @param request - DescribeMonitoringAgentStatusesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitoringAgentStatusesResponse
func (client *Client) DescribeMonitoringAgentStatusesWithOptions(request *DescribeMonitoringAgentStatusesRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitoringAgentStatusesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostAvailabilityTaskId)) {
		query["HostAvailabilityTaskId"] = request.HostAvailabilityTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitoringAgentStatuses"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitoringAgentStatusesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the status of the CloudMonitor agent.
//
// Description:
//
// This topic describes how to query the status of the CloudMonitor agent that is installed on the `i-hp3dunahluwajv6f****` instance. The result indicates that the CloudMonitor agent is in the `running` state.
//
// @param request - DescribeMonitoringAgentStatusesRequest
//
// @return DescribeMonitoringAgentStatusesResponse
func (client *Client) DescribeMonitoringAgentStatuses(request *DescribeMonitoringAgentStatusesRequest) (_result *DescribeMonitoringAgentStatusesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitoringAgentStatusesResponse{}
	_body, _err := client.DescribeMonitoringAgentStatusesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMonitoringConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMonitoringConfigResponse
func (client *Client) DescribeMonitoringConfigWithOptions(request *DescribeMonitoringConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeMonitoringConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeMonitoringConfig"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMonitoringConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMonitoringConfigRequest
//
// @return DescribeMonitoringConfigResponse
func (client *Client) DescribeMonitoringConfig(request *DescribeMonitoringConfigRequest) (_result *DescribeMonitoringConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMonitoringConfigResponse{}
	_body, _err := client.DescribeMonitoringConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// >  If a tag is attached to multiple cloud resources in the region, the key of the tag is returned only once.
//
// @param request - DescribeProductResourceTagKeyListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeProductResourceTagKeyListResponse
func (client *Client) DescribeProductResourceTagKeyListWithOptions(request *DescribeProductResourceTagKeyListRequest, runtime *util.RuntimeOptions) (_result *DescribeProductResourceTagKeyListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeProductResourceTagKeyList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProductResourceTagKeyListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// >  If a tag is attached to multiple cloud resources in the region, the key of the tag is returned only once.
//
// @param request - DescribeProductResourceTagKeyListRequest
//
// @return DescribeProductResourceTagKeyListResponse
func (client *Client) DescribeProductResourceTagKeyList(request *DescribeProductResourceTagKeyListRequest) (_result *DescribeProductResourceTagKeyListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProductResourceTagKeyListResponse{}
	_body, _err := client.DescribeProductResourceTagKeyListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the cloud services for which the initiative alert feature is enabled.
//
// @param request - DescribeProductsOfActiveMetricRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeProductsOfActiveMetricRuleResponse
func (client *Client) DescribeProductsOfActiveMetricRuleWithOptions(request *DescribeProductsOfActiveMetricRuleRequest, runtime *util.RuntimeOptions) (_result *DescribeProductsOfActiveMetricRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeProductsOfActiveMetricRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProductsOfActiveMetricRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the cloud services for which the initiative alert feature is enabled.
//
// @param request - DescribeProductsOfActiveMetricRuleRequest
//
// @return DescribeProductsOfActiveMetricRuleResponse
func (client *Client) DescribeProductsOfActiveMetricRule(request *DescribeProductsOfActiveMetricRuleRequest) (_result *DescribeProductsOfActiveMetricRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProductsOfActiveMetricRuleResponse{}
	_body, _err := client.DescribeProductsOfActiveMetricRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about monitored services in CloudMonitor.
//
// Description:
//
// The information obtained by this operation includes the service description, namespace, and tags.
//
// @param request - DescribeProjectMetaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeProjectMetaResponse
func (client *Client) DescribeProjectMetaWithOptions(request *DescribeProjectMetaRequest, runtime *util.RuntimeOptions) (_result *DescribeProjectMetaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Labels)) {
		query["Labels"] = request.Labels
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeProjectMeta"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeProjectMetaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about monitored services in CloudMonitor.
//
// Description:
//
// The information obtained by this operation includes the service description, namespace, and tags.
//
// @param request - DescribeProjectMetaRequest
//
// @return DescribeProjectMetaResponse
func (client *Client) DescribeProjectMeta(request *DescribeProjectMetaRequest) (_result *DescribeProjectMetaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeProjectMetaResponse{}
	_body, _err := client.DescribeProjectMetaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a site monitoring task.
//
// Description:
//
// This topic provides an example on how to query the details of a site monitoring task whose ID is `cc641dff-c19d-45f3-ad0a-818a0c4f****`. The returned result indicates that the task name is `test123`, the URL that is monitored by the task is `https://aliyun.com`, and the name of the carrier is `Alibaba`.
//
// @param request - DescribeSiteMonitorAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSiteMonitorAttributeResponse
func (client *Client) DescribeSiteMonitorAttributeWithOptions(request *DescribeSiteMonitorAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeSiteMonitorAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IncludeAlert)) {
		query["IncludeAlert"] = request.IncludeAlert
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSiteMonitorAttribute"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSiteMonitorAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a site monitoring task.
//
// Description:
//
// This topic provides an example on how to query the details of a site monitoring task whose ID is `cc641dff-c19d-45f3-ad0a-818a0c4f****`. The returned result indicates that the task name is `test123`, the URL that is monitored by the task is `https://aliyun.com`, and the name of the carrier is `Alibaba`.
//
// @param request - DescribeSiteMonitorAttributeRequest
//
// @return DescribeSiteMonitorAttributeResponse
func (client *Client) DescribeSiteMonitorAttribute(request *DescribeSiteMonitorAttributeRequest) (_result *DescribeSiteMonitorAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSiteMonitorAttributeResponse{}
	_body, _err := client.DescribeSiteMonitorAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the fine-grained monitoring data of a site monitoring task.
//
// @param request - DescribeSiteMonitorDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSiteMonitorDataResponse
func (client *Client) DescribeSiteMonitorDataWithOptions(request *DescribeSiteMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeSiteMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		query["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSiteMonitorData"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSiteMonitorDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the fine-grained monitoring data of a site monitoring task.
//
// @param request - DescribeSiteMonitorDataRequest
//
// @return DescribeSiteMonitorDataResponse
func (client *Client) DescribeSiteMonitorData(request *DescribeSiteMonitorDataRequest) (_result *DescribeSiteMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSiteMonitorDataResponse{}
	_body, _err := client.DescribeSiteMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the detection points that are provided by carriers.
//
// Description:
//
// This topic provides an example on how to query the detection points that are provided by China Unicom in Guiyang.
//
// @param request - DescribeSiteMonitorISPCityListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSiteMonitorISPCityListResponse
func (client *Client) DescribeSiteMonitorISPCityListWithOptions(request *DescribeSiteMonitorISPCityListRequest, runtime *util.RuntimeOptions) (_result *DescribeSiteMonitorISPCityListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.City)) {
		query["City"] = request.City
	}

	if !tea.BoolValue(util.IsUnset(request.IPV4)) {
		query["IPV4"] = request.IPV4
	}

	if !tea.BoolValue(util.IsUnset(request.IPV6)) {
		query["IPV6"] = request.IPV6
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.ViewAll)) {
		query["ViewAll"] = request.ViewAll
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSiteMonitorISPCityList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSiteMonitorISPCityListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the detection points that are provided by carriers.
//
// Description:
//
// This topic provides an example on how to query the detection points that are provided by China Unicom in Guiyang.
//
// @param request - DescribeSiteMonitorISPCityListRequest
//
// @return DescribeSiteMonitorISPCityListResponse
func (client *Client) DescribeSiteMonitorISPCityList(request *DescribeSiteMonitorISPCityListRequest) (_result *DescribeSiteMonitorISPCityListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSiteMonitorISPCityListResponse{}
	_body, _err := client.DescribeSiteMonitorISPCityListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries site monitoring tasks.
//
// Description:
//
// This topic provides an example on how to query all the site monitoring tasks of your Alibaba Cloud account. In this example, the returned result indicates that the Alibaba Cloud account has one site monitoring task named `HanZhou_ECS2`.
//
// @param request - DescribeSiteMonitorListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSiteMonitorListResponse
func (client *Client) DescribeSiteMonitorListWithOptions(request *DescribeSiteMonitorListRequest, runtime *util.RuntimeOptions) (_result *DescribeSiteMonitorListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Page)) {
		query["Page"] = request.Page
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskState)) {
		query["TaskState"] = request.TaskState
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSiteMonitorList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSiteMonitorListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries site monitoring tasks.
//
// Description:
//
// This topic provides an example on how to query all the site monitoring tasks of your Alibaba Cloud account. In this example, the returned result indicates that the Alibaba Cloud account has one site monitoring task named `HanZhou_ECS2`.
//
// @param request - DescribeSiteMonitorListRequest
//
// @return DescribeSiteMonitorListResponse
func (client *Client) DescribeSiteMonitorList(request *DescribeSiteMonitorListRequest) (_result *DescribeSiteMonitorListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSiteMonitorListResponse{}
	_body, _err := client.DescribeSiteMonitorListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the logs of one or more instant test tasks.
//
// Description:
//
// You can create an instant test task only by using the Alibaba Cloud account that you used to enable Network Analysis and Monitoring.
//
// This topic provides an example to show how to query the logs of an instant test task whose ID is `afa5c3ce-f944-4363-9edb-ce919a29****`.
//
// @param request - DescribeSiteMonitorLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSiteMonitorLogResponse
func (client *Client) DescribeSiteMonitorLogWithOptions(request *DescribeSiteMonitorLogRequest, runtime *util.RuntimeOptions) (_result *DescribeSiteMonitorLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Browser)) {
		query["Browser"] = request.Browser
	}

	if !tea.BoolValue(util.IsUnset(request.BrowserInfo)) {
		query["BrowserInfo"] = request.BrowserInfo
	}

	if !tea.BoolValue(util.IsUnset(request.City)) {
		query["City"] = request.City
	}

	if !tea.BoolValue(util.IsUnset(request.Device)) {
		query["Device"] = request.Device
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		query["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskIds)) {
		query["TaskIds"] = request.TaskIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSiteMonitorLog"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSiteMonitorLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the logs of one or more instant test tasks.
//
// Description:
//
// You can create an instant test task only by using the Alibaba Cloud account that you used to enable Network Analysis and Monitoring.
//
// This topic provides an example to show how to query the logs of an instant test task whose ID is `afa5c3ce-f944-4363-9edb-ce919a29****`.
//
// @param request - DescribeSiteMonitorLogRequest
//
// @return DescribeSiteMonitorLogResponse
func (client *Client) DescribeSiteMonitorLog(request *DescribeSiteMonitorLogRequest) (_result *DescribeSiteMonitorLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSiteMonitorLogResponse{}
	_body, _err := client.DescribeSiteMonitorLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the quotas and version of site monitoring.
//
// @param request - DescribeSiteMonitorQuotaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSiteMonitorQuotaResponse
func (client *Client) DescribeSiteMonitorQuotaWithOptions(request *DescribeSiteMonitorQuotaRequest, runtime *util.RuntimeOptions) (_result *DescribeSiteMonitorQuotaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeSiteMonitorQuota"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSiteMonitorQuotaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the quotas and version of site monitoring.
//
// @param request - DescribeSiteMonitorQuotaRequest
//
// @return DescribeSiteMonitorQuotaResponse
func (client *Client) DescribeSiteMonitorQuota(request *DescribeSiteMonitorQuotaRequest) (_result *DescribeSiteMonitorQuotaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSiteMonitorQuotaResponse{}
	_body, _err := client.DescribeSiteMonitorQuotaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the statistics of a specified metric for a specified site monitoring task.
//
// Description:
//
// This topic provides an example on how to query the statistics of the `Availability` metric for a site monitoring task whose ID is `ef4cdc8b-9dc7-43e7-810e-f950e56c****`. The result indicates that the availability rate of the site is `100%`.
//
// @param request - DescribeSiteMonitorStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSiteMonitorStatisticsResponse
func (client *Client) DescribeSiteMonitorStatisticsWithOptions(request *DescribeSiteMonitorStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeSiteMonitorStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeRange)) {
		query["TimeRange"] = request.TimeRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSiteMonitorStatistics"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSiteMonitorStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the statistics of a specified metric for a specified site monitoring task.
//
// Description:
//
// This topic provides an example on how to query the statistics of the `Availability` metric for a site monitoring task whose ID is `ef4cdc8b-9dc7-43e7-810e-f950e56c****`. The result indicates that the availability rate of the site is `100%`.
//
// @param request - DescribeSiteMonitorStatisticsRequest
//
// @return DescribeSiteMonitorStatisticsResponse
func (client *Client) DescribeSiteMonitorStatistics(request *DescribeSiteMonitorStatisticsRequest) (_result *DescribeSiteMonitorStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSiteMonitorStatisticsResponse{}
	_body, _err := client.DescribeSiteMonitorStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询拨测探测节点列表
//
// @param request - DescribeSyntheticProbeListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSyntheticProbeListResponse
func (client *Client) DescribeSyntheticProbeListWithOptions(request *DescribeSyntheticProbeListRequest, runtime *util.RuntimeOptions) (_result *DescribeSyntheticProbeListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.City)) {
		query["City"] = request.City
	}

	if !tea.BoolValue(util.IsUnset(request.IdcProbe)) {
		query["IdcProbe"] = request.IdcProbe
	}

	if !tea.BoolValue(util.IsUnset(request.Ipv4)) {
		query["Ipv4"] = request.Ipv4
	}

	if !tea.BoolValue(util.IsUnset(request.Ipv6)) {
		query["Ipv6"] = request.Ipv6
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.LmProbe)) {
		query["LmProbe"] = request.LmProbe
	}

	if !tea.BoolValue(util.IsUnset(request.MbProbe)) {
		query["MbProbe"] = request.MbProbe
	}

	if !tea.BoolValue(util.IsUnset(request.ViewAll)) {
		query["ViewAll"] = request.ViewAll
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSyntheticProbeList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSyntheticProbeListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询拨测探测节点列表
//
// @param request - DescribeSyntheticProbeListRequest
//
// @return DescribeSyntheticProbeListResponse
func (client *Client) DescribeSyntheticProbeList(request *DescribeSyntheticProbeListRequest) (_result *DescribeSyntheticProbeListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSyntheticProbeListResponse{}
	_body, _err := client.DescribeSyntheticProbeListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a system event.
//
// @param request - DescribeSystemEventAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSystemEventAttributeResponse
func (client *Client) DescribeSystemEventAttributeWithOptions(request *DescribeSystemEventAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeSystemEventAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeywords)) {
		query["SearchKeywords"] = request.SearchKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSystemEventAttribute"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSystemEventAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of a system event.
//
// @param request - DescribeSystemEventAttributeRequest
//
// @return DescribeSystemEventAttributeResponse
func (client *Client) DescribeSystemEventAttribute(request *DescribeSystemEventAttributeRequest) (_result *DescribeSystemEventAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSystemEventAttributeResponse{}
	_body, _err := client.DescribeSystemEventAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of times that a system event of a cloud service has occurred.
//
// Description:
//
// ### [](#)Background information
//
// You can call the [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html) operation to query the cloud services supported by CloudMonitor and their system events.
//
// ### [](#)Description
//
// This topic provides an example on how to query the number of times that a system event of `Elastic Compute Service (ECS)` has occurred. The returned result shows that the specified system event has occurred three times.
//
// @param request - DescribeSystemEventCountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSystemEventCountResponse
func (client *Client) DescribeSystemEventCountWithOptions(request *DescribeSystemEventCountRequest, runtime *util.RuntimeOptions) (_result *DescribeSystemEventCountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeywords)) {
		query["SearchKeywords"] = request.SearchKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSystemEventCount"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSystemEventCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of times that a system event of a cloud service has occurred.
//
// Description:
//
// ### [](#)Background information
//
// You can call the [DescribeSystemEventMetaList](https://help.aliyun.com/document_detail/114972.html) operation to query the cloud services supported by CloudMonitor and their system events.
//
// ### [](#)Description
//
// This topic provides an example on how to query the number of times that a system event of `Elastic Compute Service (ECS)` has occurred. The returned result shows that the specified system event has occurred three times.
//
// @param request - DescribeSystemEventCountRequest
//
// @return DescribeSystemEventCountResponse
func (client *Client) DescribeSystemEventCount(request *DescribeSystemEventCountRequest) (_result *DescribeSystemEventCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSystemEventCountResponse{}
	_body, _err := client.DescribeSystemEventCountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the number of times a system event occurred during each interval within a period of time.
//
// @param request - DescribeSystemEventHistogramRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSystemEventHistogramResponse
func (client *Client) DescribeSystemEventHistogramWithOptions(request *DescribeSystemEventHistogramRequest, runtime *util.RuntimeOptions) (_result *DescribeSystemEventHistogramResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKeywords)) {
		query["SearchKeywords"] = request.SearchKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSystemEventHistogram"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSystemEventHistogramResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the number of times a system event occurred during each interval within a period of time.
//
// @param request - DescribeSystemEventHistogramRequest
//
// @return DescribeSystemEventHistogramResponse
func (client *Client) DescribeSystemEventHistogram(request *DescribeSystemEventHistogramRequest) (_result *DescribeSystemEventHistogramResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSystemEventHistogramResponse{}
	_body, _err := client.DescribeSystemEventHistogramWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeSystemEventMetaListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSystemEventMetaListResponse
func (client *Client) DescribeSystemEventMetaListWithOptions(request *DescribeSystemEventMetaListRequest, runtime *util.RuntimeOptions) (_result *DescribeSystemEventMetaListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeSystemEventMetaList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSystemEventMetaListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeSystemEventMetaListRequest
//
// @return DescribeSystemEventMetaListResponse
func (client *Client) DescribeSystemEventMetaList(request *DescribeSystemEventMetaListRequest) (_result *DescribeSystemEventMetaListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSystemEventMetaListResponse{}
	_body, _err := client.DescribeSystemEventMetaListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTagKeyListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagKeyListResponse
func (client *Client) DescribeTagKeyListWithOptions(request *DescribeTagKeyListRequest, runtime *util.RuntimeOptions) (_result *DescribeTagKeyListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagKeyList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagKeyListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeTagKeyListRequest
//
// @return DescribeTagKeyListResponse
func (client *Client) DescribeTagKeyList(request *DescribeTagKeyListRequest) (_result *DescribeTagKeyListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagKeyListResponse{}
	_body, _err := client.DescribeTagKeyListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// This topic provides an example of how to query the tag values corresponding to `tagKey1`. The return results are `tagValue1` and `tagValue2`.
//
// @param request - DescribeTagValueListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTagValueListResponse
func (client *Client) DescribeTagValueListWithOptions(request *DescribeTagValueListRequest, runtime *util.RuntimeOptions) (_result *DescribeTagValueListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTagValueList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTagValueListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// This topic provides an example of how to query the tag values corresponding to `tagKey1`. The return results are `tagValue1` and `tagValue2`.
//
// @param request - DescribeTagValueListRequest
//
// @return DescribeTagValueListResponse
func (client *Client) DescribeTagValueList(request *DescribeTagValueListRequest) (_result *DescribeTagValueListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTagValueListResponse{}
	_body, _err := client.DescribeTagValueListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeUnhealthyHostAvailabilityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUnhealthyHostAvailabilityResponse
func (client *Client) DescribeUnhealthyHostAvailabilityWithOptions(request *DescribeUnhealthyHostAvailabilityRequest, runtime *util.RuntimeOptions) (_result *DescribeUnhealthyHostAvailabilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUnhealthyHostAvailability"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUnhealthyHostAvailabilityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeUnhealthyHostAvailabilityRequest
//
// @return DescribeUnhealthyHostAvailabilityResponse
func (client *Client) DescribeUnhealthyHostAvailability(request *DescribeUnhealthyHostAvailabilityRequest) (_result *DescribeUnhealthyHostAvailabilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUnhealthyHostAvailabilityResponse{}
	_body, _err := client.DescribeUnhealthyHostAvailabilityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DisableActiveMetricRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableActiveMetricRuleResponse
func (client *Client) DisableActiveMetricRuleWithOptions(request *DisableActiveMetricRuleRequest, runtime *util.RuntimeOptions) (_result *DisableActiveMetricRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableActiveMetricRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableActiveMetricRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DisableActiveMetricRuleRequest
//
// @return DisableActiveMetricRuleResponse
func (client *Client) DisableActiveMetricRule(request *DisableActiveMetricRuleRequest) (_result *DisableActiveMetricRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableActiveMetricRuleResponse{}
	_body, _err := client.DisableActiveMetricRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DisableEventRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableEventRulesResponse
func (client *Client) DisableEventRulesWithOptions(request *DisableEventRulesRequest, runtime *util.RuntimeOptions) (_result *DisableEventRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleNames)) {
		query["RuleNames"] = request.RuleNames
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableEventRules"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableEventRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DisableEventRulesRequest
//
// @return DisableEventRulesResponse
func (client *Client) DisableEventRules(request *DisableEventRulesRequest) (_result *DisableEventRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableEventRulesResponse{}
	_body, _err := client.DisableEventRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DisableHostAvailabilityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableHostAvailabilityResponse
func (client *Client) DisableHostAvailabilityWithOptions(request *DisableHostAvailabilityRequest, runtime *util.RuntimeOptions) (_result *DisableHostAvailabilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableHostAvailability"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableHostAvailabilityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DisableHostAvailabilityRequest
//
// @return DisableHostAvailabilityResponse
func (client *Client) DisableHostAvailability(request *DisableHostAvailabilityRequest) (_result *DisableHostAvailabilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableHostAvailabilityResponse{}
	_body, _err := client.DisableHostAvailabilityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables alert rules.
//
// @param request - DisableMetricRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableMetricRulesResponse
func (client *Client) DisableMetricRulesWithOptions(request *DisableMetricRulesRequest, runtime *util.RuntimeOptions) (_result *DisableMetricRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableMetricRules"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableMetricRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables alert rules.
//
// @param request - DisableMetricRulesRequest
//
// @return DisableMetricRulesResponse
func (client *Client) DisableMetricRules(request *DisableMetricRulesRequest) (_result *DisableMetricRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableMetricRulesResponse{}
	_body, _err := client.DisableMetricRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables site monitoring tasks.
//
// @param request - DisableSiteMonitorsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableSiteMonitorsResponse
func (client *Client) DisableSiteMonitorsWithOptions(request *DisableSiteMonitorsRequest, runtime *util.RuntimeOptions) (_result *DisableSiteMonitorsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskIds)) {
		query["TaskIds"] = request.TaskIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableSiteMonitors"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableSiteMonitorsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables site monitoring tasks.
//
// @param request - DisableSiteMonitorsRequest
//
// @return DisableSiteMonitorsResponse
func (client *Client) DisableSiteMonitors(request *DisableSiteMonitorsRequest) (_result *DisableSiteMonitorsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableSiteMonitorsResponse{}
	_body, _err := client.DisableSiteMonitorsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - EnableActiveMetricRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableActiveMetricRuleResponse
func (client *Client) EnableActiveMetricRuleWithOptions(request *EnableActiveMetricRuleRequest, runtime *util.RuntimeOptions) (_result *EnableActiveMetricRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableActiveMetricRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableActiveMetricRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - EnableActiveMetricRuleRequest
//
// @return EnableActiveMetricRuleResponse
func (client *Client) EnableActiveMetricRule(request *EnableActiveMetricRuleRequest) (_result *EnableActiveMetricRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableActiveMetricRuleResponse{}
	_body, _err := client.EnableActiveMetricRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - EnableEventRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableEventRulesResponse
func (client *Client) EnableEventRulesWithOptions(request *EnableEventRulesRequest, runtime *util.RuntimeOptions) (_result *EnableEventRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleNames)) {
		query["RuleNames"] = request.RuleNames
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableEventRules"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableEventRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - EnableEventRulesRequest
//
// @return EnableEventRulesResponse
func (client *Client) EnableEventRules(request *EnableEventRulesRequest) (_result *EnableEventRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableEventRulesResponse{}
	_body, _err := client.EnableEventRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - EnableHostAvailabilityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableHostAvailabilityResponse
func (client *Client) EnableHostAvailabilityWithOptions(request *EnableHostAvailabilityRequest, runtime *util.RuntimeOptions) (_result *EnableHostAvailabilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableHostAvailability"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableHostAvailabilityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - EnableHostAvailabilityRequest
//
// @return EnableHostAvailabilityResponse
func (client *Client) EnableHostAvailability(request *EnableHostAvailabilityRequest) (_result *EnableHostAvailabilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableHostAvailabilityResponse{}
	_body, _err := client.EnableHostAvailabilityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables multiple blacklist policies at a time.
//
// @param request - EnableMetricRuleBlackListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableMetricRuleBlackListResponse
func (client *Client) EnableMetricRuleBlackListWithOptions(request *EnableMetricRuleBlackListRequest, runtime *util.RuntimeOptions) (_result *EnableMetricRuleBlackListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.IsEnable)) {
		query["IsEnable"] = request.IsEnable
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableMetricRuleBlackList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableMetricRuleBlackListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables multiple blacklist policies at a time.
//
// @param request - EnableMetricRuleBlackListRequest
//
// @return EnableMetricRuleBlackListResponse
func (client *Client) EnableMetricRuleBlackList(request *EnableMetricRuleBlackListRequest) (_result *EnableMetricRuleBlackListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableMetricRuleBlackListResponse{}
	_body, _err := client.EnableMetricRuleBlackListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables one or more alert rules.
//
// @param request - EnableMetricRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableMetricRulesResponse
func (client *Client) EnableMetricRulesWithOptions(request *EnableMetricRulesRequest, runtime *util.RuntimeOptions) (_result *EnableMetricRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableMetricRules"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableMetricRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables one or more alert rules.
//
// @param request - EnableMetricRulesRequest
//
// @return EnableMetricRulesResponse
func (client *Client) EnableMetricRules(request *EnableMetricRulesRequest) (_result *EnableMetricRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableMetricRulesResponse{}
	_body, _err := client.EnableMetricRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables site monitoring tasks.
//
// @param request - EnableSiteMonitorsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return EnableSiteMonitorsResponse
func (client *Client) EnableSiteMonitorsWithOptions(request *EnableSiteMonitorsRequest, runtime *util.RuntimeOptions) (_result *EnableSiteMonitorsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskIds)) {
		query["TaskIds"] = request.TaskIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableSiteMonitors"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableSiteMonitorsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables site monitoring tasks.
//
// @param request - EnableSiteMonitorsRequest
//
// @return EnableSiteMonitorsResponse
func (client *Client) EnableSiteMonitors(request *EnableSiteMonitorsRequest) (_result *EnableSiteMonitorsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableSiteMonitorsResponse{}
	_body, _err := client.EnableSiteMonitorsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// ## Prerequisites
//
// The Cloud Assistant client is installed on an ECS instance. For more information about how to install the Cloud Assistant client, see [Overview](https://help.aliyun.com/document_detail/64601.html).
//
// @param request - InstallMonitoringAgentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallMonitoringAgentResponse
func (client *Client) InstallMonitoringAgentWithOptions(request *InstallMonitoringAgentRequest, runtime *util.RuntimeOptions) (_result *InstallMonitoringAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	if !tea.BoolValue(util.IsUnset(request.InstallCommand)) {
		query["InstallCommand"] = request.InstallCommand
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallMonitoringAgent"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallMonitoringAgentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// ## Prerequisites
//
// The Cloud Assistant client is installed on an ECS instance. For more information about how to install the Cloud Assistant client, see [Overview](https://help.aliyun.com/document_detail/64601.html).
//
// @param request - InstallMonitoringAgentRequest
//
// @return InstallMonitoringAgentResponse
func (client *Client) InstallMonitoringAgent(request *InstallMonitoringAgentRequest) (_result *InstallMonitoringAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallMonitoringAgentResponse{}
	_body, _err := client.InstallMonitoringAgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyGroupMonitoringAgentProcessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyGroupMonitoringAgentProcessResponse
func (client *Client) ModifyGroupMonitoringAgentProcessWithOptions(request *ModifyGroupMonitoringAgentProcessRequest, runtime *util.RuntimeOptions) (_result *ModifyGroupMonitoringAgentProcessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertConfig)) {
		query["AlertConfig"] = request.AlertConfig
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.MatchExpressFilterRelation)) {
		query["MatchExpressFilterRelation"] = request.MatchExpressFilterRelation
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyGroupMonitoringAgentProcess"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyGroupMonitoringAgentProcessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyGroupMonitoringAgentProcessRequest
//
// @return ModifyGroupMonitoringAgentProcessResponse
func (client *Client) ModifyGroupMonitoringAgentProcess(request *ModifyGroupMonitoringAgentProcessRequest) (_result *ModifyGroupMonitoringAgentProcessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyGroupMonitoringAgentProcessResponse{}
	_body, _err := client.ModifyGroupMonitoringAgentProcessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an availability monitoring task.
//
// Description:
//
// This topic provides an example on how to change the name of an availability monitoring task named `12345` in an application group named `123456` to `task2`.
//
// @param request - ModifyHostAvailabilityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHostAvailabilityResponse
func (client *Client) ModifyHostAvailabilityWithOptions(request *ModifyHostAvailabilityRequest, runtime *util.RuntimeOptions) (_result *ModifyHostAvailabilityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertConfigEscalationList)) {
		query["AlertConfigEscalationList"] = request.AlertConfigEscalationList
	}

	if !tea.BoolValue(util.IsUnset(request.AlertConfigTargetList)) {
		query["AlertConfigTargetList"] = request.AlertConfigTargetList
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceList)) {
		query["InstanceList"] = request.InstanceList
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	if !tea.BoolValue(util.IsUnset(request.TaskScope)) {
		query["TaskScope"] = request.TaskScope
	}

	if !tea.BoolValue(util.IsUnset(request.AlertConfig)) {
		query["AlertConfig"] = request.AlertConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TaskOption)) {
		query["TaskOption"] = request.TaskOption
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHostAvailability"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyHostAvailabilityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an availability monitoring task.
//
// Description:
//
// This topic provides an example on how to change the name of an availability monitoring task named `12345` in an application group named `123456` to `task2`.
//
// @param request - ModifyHostAvailabilityRequest
//
// @return ModifyHostAvailabilityResponse
func (client *Client) ModifyHostAvailability(request *ModifyHostAvailabilityRequest) (_result *ModifyHostAvailabilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHostAvailabilityResponse{}
	_body, _err := client.ModifyHostAvailabilityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// ***
//
// @param request - ModifyHostInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHostInfoResponse
func (client *Client) ModifyHostInfoWithOptions(request *ModifyHostInfoRequest, runtime *util.RuntimeOptions) (_result *ModifyHostInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHostInfo"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyHostInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// ***
//
// @param request - ModifyHostInfoRequest
//
// @return ModifyHostInfoResponse
func (client *Client) ModifyHostInfo(request *ModifyHostInfoRequest) (_result *ModifyHostInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHostInfoResponse{}
	_body, _err := client.ModifyHostInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a namespace.
//
// Description:
//
// This topic provides an example on how to change the data retention period of the `aliyun` namespace to `cms.s1.2xlarge`. The response shows that the namespace is modified.
//
// @param request - ModifyHybridMonitorNamespaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHybridMonitorNamespaceResponse
func (client *Client) ModifyHybridMonitorNamespaceWithOptions(request *ModifyHybridMonitorNamespaceRequest, runtime *util.RuntimeOptions) (_result *ModifyHybridMonitorNamespaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		query["Spec"] = request.Spec
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHybridMonitorNamespace"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyHybridMonitorNamespaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a namespace.
//
// Description:
//
// This topic provides an example on how to change the data retention period of the `aliyun` namespace to `cms.s1.2xlarge`. The response shows that the namespace is modified.
//
// @param request - ModifyHybridMonitorNamespaceRequest
//
// @return ModifyHybridMonitorNamespaceResponse
func (client *Client) ModifyHybridMonitorNamespace(request *ModifyHybridMonitorNamespaceRequest) (_result *ModifyHybridMonitorNamespaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHybridMonitorNamespaceResponse{}
	_body, _err := client.ModifyHybridMonitorNamespaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a Logstore group.
//
// Description:
//
// In this example, a Logstore group named `Logstore_test` is modified. The Logstore of the `aliyun-project` project in the `cn-hangzhou` region is changed to `Logstore-aliyun-all`. The response shows that the Logstore group is modified.
//
// @param request - ModifyHybridMonitorSLSGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHybridMonitorSLSGroupResponse
func (client *Client) ModifyHybridMonitorSLSGroupWithOptions(request *ModifyHybridMonitorSLSGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyHybridMonitorSLSGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SLSGroupConfig)) {
		query["SLSGroupConfig"] = request.SLSGroupConfig
	}

	if !tea.BoolValue(util.IsUnset(request.SLSGroupDescription)) {
		query["SLSGroupDescription"] = request.SLSGroupDescription
	}

	if !tea.BoolValue(util.IsUnset(request.SLSGroupName)) {
		query["SLSGroupName"] = request.SLSGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHybridMonitorSLSGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyHybridMonitorSLSGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a Logstore group.
//
// Description:
//
// In this example, a Logstore group named `Logstore_test` is modified. The Logstore of the `aliyun-project` project in the `cn-hangzhou` region is changed to `Logstore-aliyun-all`. The response shows that the Logstore group is modified.
//
// @param request - ModifyHybridMonitorSLSGroupRequest
//
// @return ModifyHybridMonitorSLSGroupResponse
func (client *Client) ModifyHybridMonitorSLSGroup(request *ModifyHybridMonitorSLSGroupRequest) (_result *ModifyHybridMonitorSLSGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHybridMonitorSLSGroupResponse{}
	_body, _err := client.ModifyHybridMonitorSLSGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a metric for the logs that are imported from Log Service.
//
// Description:
//
// This topic provides an example on how to change the collection period of a metric import task whose ID is `36****` to `15` seconds. The task is used to monitor the logs that are imported from Log Service. The returned result indicates that the metric is modified.
//
// @param request - ModifyHybridMonitorTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHybridMonitorTaskResponse
func (client *Client) ModifyHybridMonitorTaskWithOptions(request *ModifyHybridMonitorTaskRequest, runtime *util.RuntimeOptions) (_result *ModifyHybridMonitorTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AttachLabels)) {
		query["AttachLabels"] = request.AttachLabels
	}

	if !tea.BoolValue(util.IsUnset(request.CollectInterval)) {
		query["CollectInterval"] = request.CollectInterval
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SLSProcessConfig)) {
		query["SLSProcessConfig"] = request.SLSProcessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHybridMonitorTask"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyHybridMonitorTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a metric for the logs that are imported from Log Service.
//
// Description:
//
// This topic provides an example on how to change the collection period of a metric import task whose ID is `36****` to `15` seconds. The task is used to monitor the logs that are imported from Log Service. The returned result indicates that the metric is modified.
//
// @param request - ModifyHybridMonitorTaskRequest
//
// @return ModifyHybridMonitorTaskResponse
func (client *Client) ModifyHybridMonitorTask(request *ModifyHybridMonitorTaskRequest) (_result *ModifyHybridMonitorTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHybridMonitorTaskResponse{}
	_body, _err := client.ModifyHybridMonitorTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a blacklist policy.
//
// @param request - ModifyMetricRuleBlackListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyMetricRuleBlackListResponse
func (client *Client) ModifyMetricRuleBlackListWithOptions(request *ModifyMetricRuleBlackListRequest, runtime *util.RuntimeOptions) (_result *ModifyMetricRuleBlackListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveTime)) {
		query["EffectiveTime"] = request.EffectiveTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnableEndTime)) {
		query["EnableEndTime"] = request.EnableEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnableStartTime)) {
		query["EnableStartTime"] = request.EnableStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Instances)) {
		query["Instances"] = request.Instances
	}

	if !tea.BoolValue(util.IsUnset(request.Metrics)) {
		query["Metrics"] = request.Metrics
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.ScopeType)) {
		query["ScopeType"] = request.ScopeType
	}

	if !tea.BoolValue(util.IsUnset(request.ScopeValue)) {
		query["ScopeValue"] = request.ScopeValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyMetricRuleBlackList"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyMetricRuleBlackListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a blacklist policy.
//
// @param request - ModifyMetricRuleBlackListRequest
//
// @return ModifyMetricRuleBlackListResponse
func (client *Client) ModifyMetricRuleBlackList(request *ModifyMetricRuleBlackListRequest) (_result *ModifyMetricRuleBlackListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyMetricRuleBlackListResponse{}
	_body, _err := client.ModifyMetricRuleBlackListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an alert template.
//
// Description:
//
// This topic provides an example on how to modify an alert template whose version is `1` and ID is `123456`. The alert level is changed to `Critical`. The statistical method is changed to `Average`. The alert threshold comparator is changed to `GreaterThanOrEqualToThreshold`. The alert threshold is changed to `90`. The number of alert retries is changed to `3`. The response shows that the alert template is modified.
//
// @param request - ModifyMetricRuleTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyMetricRuleTemplateResponse
func (client *Client) ModifyMetricRuleTemplateWithOptions(request *ModifyMetricRuleTemplateRequest, runtime *util.RuntimeOptions) (_result *ModifyMetricRuleTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertTemplates)) {
		query["AlertTemplates"] = request.AlertTemplates
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RestVersion)) {
		query["RestVersion"] = request.RestVersion
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyMetricRuleTemplate"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyMetricRuleTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an alert template.
//
// Description:
//
// This topic provides an example on how to modify an alert template whose version is `1` and ID is `123456`. The alert level is changed to `Critical`. The statistical method is changed to `Average`. The alert threshold comparator is changed to `GreaterThanOrEqualToThreshold`. The alert threshold is changed to `90`. The number of alert retries is changed to `3`. The response shows that the alert template is modified.
//
// @param request - ModifyMetricRuleTemplateRequest
//
// @return ModifyMetricRuleTemplateResponse
func (client *Client) ModifyMetricRuleTemplate(request *ModifyMetricRuleTemplateRequest) (_result *ModifyMetricRuleTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyMetricRuleTemplateResponse{}
	_body, _err := client.ModifyMetricRuleTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyMonitorGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyMonitorGroupResponse
func (client *Client) ModifyMonitorGroupWithOptions(request *ModifyMonitorGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyMonitorGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroups)) {
		query["ContactGroups"] = request.ContactGroups
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyMonitorGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyMonitorGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyMonitorGroupRequest
//
// @return ModifyMonitorGroupResponse
func (client *Client) ModifyMonitorGroup(request *ModifyMonitorGroupRequest) (_result *ModifyMonitorGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyMonitorGroupResponse{}
	_body, _err := client.ModifyMonitorGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyMonitorGroupInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyMonitorGroupInstancesResponse
func (client *Client) ModifyMonitorGroupInstancesWithOptions(request *ModifyMonitorGroupInstancesRequest, runtime *util.RuntimeOptions) (_result *ModifyMonitorGroupInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Instances)) {
		query["Instances"] = request.Instances
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyMonitorGroupInstances"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyMonitorGroupInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyMonitorGroupInstancesRequest
//
// @return ModifyMonitorGroupInstancesResponse
func (client *Client) ModifyMonitorGroupInstances(request *ModifyMonitorGroupInstancesRequest) (_result *ModifyMonitorGroupInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyMonitorGroupInstancesResponse{}
	_body, _err := client.ModifyMonitorGroupInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a site monitoring task.
//
// Description:
//
// The number of site monitoring tasks.
//
// @param request - ModifySiteMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySiteMonitorResponse
func (client *Client) ModifySiteMonitorWithOptions(request *ModifySiteMonitorRequest, runtime *util.RuntimeOptions) (_result *ModifySiteMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Address)) {
		query["Address"] = request.Address
	}

	if !tea.BoolValue(util.IsUnset(request.AlertIds)) {
		query["AlertIds"] = request.AlertIds
	}

	if !tea.BoolValue(util.IsUnset(request.CustomSchedule)) {
		query["CustomSchedule"] = request.CustomSchedule
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IntervalUnit)) {
		query["IntervalUnit"] = request.IntervalUnit
	}

	if !tea.BoolValue(util.IsUnset(request.IspCities)) {
		query["IspCities"] = request.IspCities
	}

	if !tea.BoolValue(util.IsUnset(request.OptionsJson)) {
		query["OptionsJson"] = request.OptionsJson
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskName)) {
		query["TaskName"] = request.TaskName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySiteMonitor"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifySiteMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a site monitoring task.
//
// Description:
//
// The number of site monitoring tasks.
//
// @param request - ModifySiteMonitorRequest
//
// @return ModifySiteMonitorResponse
func (client *Client) ModifySiteMonitor(request *ModifySiteMonitorRequest) (_result *ModifySiteMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySiteMonitorResponse{}
	_body, _err := client.ModifySiteMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Deprecated: OpenAPI OpenCmsService is deprecated
//
// @param request - OpenCmsServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OpenCmsServiceResponse
// Deprecated
func (client *Client) OpenCmsServiceWithOptions(runtime *util.RuntimeOptions) (_result *OpenCmsServiceResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("OpenCmsService"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OpenCmsServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Deprecated: OpenAPI OpenCmsService is deprecated
//
// @return OpenCmsServiceResponse
// Deprecated
func (client *Client) OpenCmsService() (_result *OpenCmsServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OpenCmsServiceResponse{}
	_body, _err := client.OpenCmsServiceWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - PutContactRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutContactResponse
func (client *Client) PutContactWithOptions(request *PutContactRequest, runtime *util.RuntimeOptions) (_result *PutContactResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.Describe)) {
		query["Describe"] = request.Describe
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Channels)) {
		query["Channels"] = request.Channels
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutContact"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutContactResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - PutContactRequest
//
// @return PutContactResponse
func (client *Client) PutContact(request *PutContactRequest) (_result *PutContactResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutContactResponse{}
	_body, _err := client.PutContactWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加或者修改报警联系人组
//
// Description:
//
// This topic provides an example on how to create an alert contact group named `ECS_Group`.
//
// @param request - PutContactGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutContactGroupResponse
func (client *Client) PutContactGroupWithOptions(request *PutContactGroupRequest, runtime *util.RuntimeOptions) (_result *PutContactGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroupName)) {
		query["ContactGroupName"] = request.ContactGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactNames)) {
		query["ContactNames"] = request.ContactNames
	}

	if !tea.BoolValue(util.IsUnset(request.Describe)) {
		query["Describe"] = request.Describe
	}

	if !tea.BoolValue(util.IsUnset(request.EnableSubscribed)) {
		query["EnableSubscribed"] = request.EnableSubscribed
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutContactGroup"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutContactGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加或者修改报警联系人组
//
// Description:
//
// This topic provides an example on how to create an alert contact group named `ECS_Group`.
//
// @param request - PutContactGroupRequest
//
// @return PutContactGroupResponse
func (client *Client) PutContactGroup(request *PutContactGroupRequest) (_result *PutContactGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutContactGroupResponse{}
	_body, _err := client.PutContactGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Reports custom events.
//
// @param request - PutCustomEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutCustomEventResponse
func (client *Client) PutCustomEventWithOptions(request *PutCustomEventRequest, runtime *util.RuntimeOptions) (_result *PutCustomEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventInfo)) {
		query["EventInfo"] = request.EventInfo
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutCustomEvent"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutCustomEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Reports custom events.
//
// @param request - PutCustomEventRequest
//
// @return PutCustomEventResponse
func (client *Client) PutCustomEvent(request *PutCustomEventRequest) (_result *PutCustomEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutCustomEventResponse{}
	_body, _err := client.PutCustomEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// Before you call this operation, call the PutCustomEvent operation to report the monitoring data of the custom event. For more information, see [PutCustomEvent](https://help.aliyun.com/document_detail/115012.html).
//
// @param request - PutCustomEventRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutCustomEventRuleResponse
func (client *Client) PutCustomEventRuleWithOptions(request *PutCustomEventRuleRequest, runtime *util.RuntimeOptions) (_result *PutCustomEventRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactGroups)) {
		query["ContactGroups"] = request.ContactGroups
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveInterval)) {
		query["EffectiveInterval"] = request.EffectiveInterval
	}

	if !tea.BoolValue(util.IsUnset(request.EmailSubject)) {
		query["EmailSubject"] = request.EmailSubject
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["EventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.Threshold)) {
		query["Threshold"] = request.Threshold
	}

	if !tea.BoolValue(util.IsUnset(request.Webhook)) {
		query["Webhook"] = request.Webhook
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutCustomEventRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutCustomEventRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// Before you call this operation, call the PutCustomEvent operation to report the monitoring data of the custom event. For more information, see [PutCustomEvent](https://help.aliyun.com/document_detail/115012.html).
//
// @param request - PutCustomEventRuleRequest
//
// @return PutCustomEventRuleResponse
func (client *Client) PutCustomEventRule(request *PutCustomEventRuleRequest) (_result *PutCustomEventRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutCustomEventRuleResponse{}
	_body, _err := client.PutCustomEventRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// >  We recommend that you call the [PutHybridMonitorMetricData](https://help.aliyun.com/document_detail/383455.html) operation of Hybrid Cloud Monitoring to report monitoring data.
//
// @param request - PutCustomMetricRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutCustomMetricResponse
func (client *Client) PutCustomMetricWithOptions(request *PutCustomMetricRequest, runtime *util.RuntimeOptions) (_result *PutCustomMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MetricList)) {
		query["MetricList"] = request.MetricList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutCustomMetric"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutCustomMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// >  We recommend that you call the [PutHybridMonitorMetricData](https://help.aliyun.com/document_detail/383455.html) operation of Hybrid Cloud Monitoring to report monitoring data.
//
// @param request - PutCustomMetricRequest
//
// @return PutCustomMetricResponse
func (client *Client) PutCustomMetric(request *PutCustomMetricRequest) (_result *PutCustomMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutCustomMetricResponse{}
	_body, _err := client.PutCustomMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// Before you call this operation, call the PutCustomMetric operation to report custom monitoring data. For more information, see [PutCustomMetric](https://help.aliyun.com/document_detail/115004.html).
//
// @param request - PutCustomMetricRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutCustomMetricRuleResponse
func (client *Client) PutCustomMetricRuleWithOptions(request *PutCustomMetricRuleRequest, runtime *util.RuntimeOptions) (_result *PutCustomMetricRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ComparisonOperator)) {
		query["ComparisonOperator"] = request.ComparisonOperator
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroups)) {
		query["ContactGroups"] = request.ContactGroups
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveInterval)) {
		query["EffectiveInterval"] = request.EffectiveInterval
	}

	if !tea.BoolValue(util.IsUnset(request.EmailSubject)) {
		query["EmailSubject"] = request.EmailSubject
	}

	if !tea.BoolValue(util.IsUnset(request.EvaluationCount)) {
		query["EvaluationCount"] = request.EvaluationCount
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.Resources)) {
		query["Resources"] = request.Resources
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.SilenceTime)) {
		query["SilenceTime"] = request.SilenceTime
	}

	if !tea.BoolValue(util.IsUnset(request.Statistics)) {
		query["Statistics"] = request.Statistics
	}

	if !tea.BoolValue(util.IsUnset(request.Threshold)) {
		query["Threshold"] = request.Threshold
	}

	if !tea.BoolValue(util.IsUnset(request.Webhook)) {
		query["Webhook"] = request.Webhook
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutCustomMetricRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutCustomMetricRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// Before you call this operation, call the PutCustomMetric operation to report custom monitoring data. For more information, see [PutCustomMetric](https://help.aliyun.com/document_detail/115004.html).
//
// @param request - PutCustomMetricRuleRequest
//
// @return PutCustomMetricRuleResponse
func (client *Client) PutCustomMetricRule(request *PutCustomMetricRuleRequest) (_result *PutCustomMetricRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutCustomMetricRuleResponse{}
	_body, _err := client.PutCustomMetricRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建或者修改事件监控
//
// Description:
//
// If the specified rule name does not exist, an event-triggered alert rule is created. If the specified rule name exists, the specified event-triggered alert rule is modified.
//
// In this example, the `myRuleName` alert rule is created for the `ecs` cloud service.
//
// @param request - PutEventRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutEventRuleResponse
func (client *Client) PutEventRuleWithOptions(request *PutEventRuleRequest, runtime *util.RuntimeOptions) (_result *PutEventRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EventPattern)) {
		query["EventPattern"] = request.EventPattern
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.SilenceTime)) {
		query["SilenceTime"] = request.SilenceTime
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutEventRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutEventRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建或者修改事件监控
//
// Description:
//
// If the specified rule name does not exist, an event-triggered alert rule is created. If the specified rule name exists, the specified event-triggered alert rule is modified.
//
// In this example, the `myRuleName` alert rule is created for the `ecs` cloud service.
//
// @param request - PutEventRuleRequest
//
// @return PutEventRuleResponse
func (client *Client) PutEventRule(request *PutEventRuleRequest) (_result *PutEventRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutEventRuleResponse{}
	_body, _err := client.PutEventRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds or modifies the push channels of an event-triggered alert rule.
//
// @param request - PutEventRuleTargetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutEventRuleTargetsResponse
func (client *Client) PutEventRuleTargetsWithOptions(request *PutEventRuleTargetsRequest, runtime *util.RuntimeOptions) (_result *PutEventRuleTargetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContactParameters)) {
		query["ContactParameters"] = request.ContactParameters
	}

	if !tea.BoolValue(util.IsUnset(request.FcParameters)) {
		query["FcParameters"] = request.FcParameters
	}

	if !tea.BoolValue(util.IsUnset(request.MnsParameters)) {
		query["MnsParameters"] = request.MnsParameters
	}

	if !tea.BoolValue(util.IsUnset(request.OpenApiParameters)) {
		query["OpenApiParameters"] = request.OpenApiParameters
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.SlsParameters)) {
		query["SlsParameters"] = request.SlsParameters
	}

	if !tea.BoolValue(util.IsUnset(request.WebhookParameters)) {
		query["WebhookParameters"] = request.WebhookParameters
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutEventRuleTargets"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutEventRuleTargetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds or modifies the push channels of an event-triggered alert rule.
//
// @param request - PutEventRuleTargetsRequest
//
// @return PutEventRuleTargetsResponse
func (client *Client) PutEventRuleTargets(request *PutEventRuleTargetsRequest) (_result *PutEventRuleTargetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutEventRuleTargetsResponse{}
	_body, _err := client.PutEventRuleTargetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies a configuration set for exporting monitoring data.
//
// Description:
//
// > The monitoring data can be exported only to Log Service. More services will be supported in the future.
//
// @param request - PutExporterOutputRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutExporterOutputResponse
func (client *Client) PutExporterOutputWithOptions(request *PutExporterOutputRequest, runtime *util.RuntimeOptions) (_result *PutExporterOutputResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigJson)) {
		query["ConfigJson"] = request.ConfigJson
	}

	if !tea.BoolValue(util.IsUnset(request.Desc)) {
		query["Desc"] = request.Desc
	}

	if !tea.BoolValue(util.IsUnset(request.DestName)) {
		query["DestName"] = request.DestName
	}

	if !tea.BoolValue(util.IsUnset(request.DestType)) {
		query["DestType"] = request.DestType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutExporterOutput"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutExporterOutputResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies a configuration set for exporting monitoring data.
//
// Description:
//
// > The monitoring data can be exported only to Log Service. More services will be supported in the future.
//
// @param request - PutExporterOutputRequest
//
// @return PutExporterOutputResponse
func (client *Client) PutExporterOutput(request *PutExporterOutputRequest) (_result *PutExporterOutputResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutExporterOutputResponse{}
	_body, _err := client.PutExporterOutputWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies a data export rule.
//
// @param request - PutExporterRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutExporterRuleResponse
func (client *Client) PutExporterRuleWithOptions(request *PutExporterRuleRequest, runtime *util.RuntimeOptions) (_result *PutExporterRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Describe)) {
		query["Describe"] = request.Describe
	}

	if !tea.BoolValue(util.IsUnset(request.DstNames)) {
		query["DstNames"] = request.DstNames
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.TargetWindows)) {
		query["TargetWindows"] = request.TargetWindows
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutExporterRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutExporterRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies a data export rule.
//
// @param request - PutExporterRuleRequest
//
// @return PutExporterRuleResponse
func (client *Client) PutExporterRule(request *PutExporterRuleRequest) (_result *PutExporterRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutExporterRuleResponse{}
	_body, _err := client.PutExporterRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies an alert rule for an application group.
//
// Description:
//
// This topic provides an example on how to create an alert rule for the `cpu_total` metric of Elastic Compute Service (ECS) in the `17285****` application group. The ID of the alert rule is `123456`. The name of the alert rule is `Rule_test`. The alert level is `Critical`. The statistical method is `Average`. The alert threshold comparator is `GreaterThanOrEqualToThreshold`. The alert threshold is `90`. The number of alert retries is `3`. The returned result shows that the alert rule is created and the alert rule ID is `123456`.
//
// @param request - PutGroupMetricRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutGroupMetricRuleResponse
func (client *Client) PutGroupMetricRuleWithOptions(request *PutGroupMetricRuleRequest, runtime *util.RuntimeOptions) (_result *PutGroupMetricRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroups)) {
		query["ContactGroups"] = request.ContactGroups
	}

	if !tea.BoolValue(util.IsUnset(request.Dimensions)) {
		query["Dimensions"] = request.Dimensions
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveInterval)) {
		query["EffectiveInterval"] = request.EffectiveInterval
	}

	if !tea.BoolValue(util.IsUnset(request.EmailSubject)) {
		query["EmailSubject"] = request.EmailSubject
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraDimensionJson)) {
		query["ExtraDimensionJson"] = request.ExtraDimensionJson
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Labels)) {
		query["Labels"] = request.Labels
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NoDataPolicy)) {
		query["NoDataPolicy"] = request.NoDataPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.NoEffectiveInterval)) {
		query["NoEffectiveInterval"] = request.NoEffectiveInterval
	}

	if !tea.BoolValue(util.IsUnset(request.Options)) {
		query["Options"] = request.Options
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.SilenceTime)) {
		query["SilenceTime"] = request.SilenceTime
	}

	if !tea.BoolValue(util.IsUnset(request.Webhook)) {
		query["Webhook"] = request.Webhook
	}

	if !tea.BoolValue(util.IsUnset(request.Escalations)) {
		query["Escalations"] = request.Escalations
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutGroupMetricRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutGroupMetricRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies an alert rule for an application group.
//
// Description:
//
// This topic provides an example on how to create an alert rule for the `cpu_total` metric of Elastic Compute Service (ECS) in the `17285****` application group. The ID of the alert rule is `123456`. The name of the alert rule is `Rule_test`. The alert level is `Critical`. The statistical method is `Average`. The alert threshold comparator is `GreaterThanOrEqualToThreshold`. The alert threshold is `90`. The number of alert retries is `3`. The returned result shows that the alert rule is created and the alert rule ID is `123456`.
//
// @param request - PutGroupMetricRuleRequest
//
// @return PutGroupMetricRuleResponse
func (client *Client) PutGroupMetricRule(request *PutGroupMetricRuleRequest) (_result *PutGroupMetricRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutGroupMetricRuleResponse{}
	_body, _err := client.PutGroupMetricRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Imports the monitoring data of a metric to a namespace of Hybrid Cloud Monitoring.
//
// Description:
//
// # [](#)Prerequisites
//
// Hybrid Cloud Monitoring is activated. For more information, see [Activate Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/250773.html).
//
// # [](#)Limits
//
// The size of the monitoring data that you import at a time must be less than or equal to 1 MB.
//
// # [](#)Description
//
// This topic provides an example on how to import the monitoring data of the `CPU_Usage` metric to the `default-aliyun` namespace of Hybrid Cloud Monitoring.
//
// @param request - PutHybridMonitorMetricDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutHybridMonitorMetricDataResponse
func (client *Client) PutHybridMonitorMetricDataWithOptions(request *PutHybridMonitorMetricDataRequest, runtime *util.RuntimeOptions) (_result *PutHybridMonitorMetricDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MetricList)) {
		query["MetricList"] = request.MetricList
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutHybridMonitorMetricData"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutHybridMonitorMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Imports the monitoring data of a metric to a namespace of Hybrid Cloud Monitoring.
//
// Description:
//
// # [](#)Prerequisites
//
// Hybrid Cloud Monitoring is activated. For more information, see [Activate Hybrid Cloud Monitoring](https://help.aliyun.com/document_detail/250773.html).
//
// # [](#)Limits
//
// The size of the monitoring data that you import at a time must be less than or equal to 1 MB.
//
// # [](#)Description
//
// This topic provides an example on how to import the monitoring data of the `CPU_Usage` metric to the `default-aliyun` namespace of Hybrid Cloud Monitoring.
//
// @param request - PutHybridMonitorMetricDataRequest
//
// @return PutHybridMonitorMetricDataResponse
func (client *Client) PutHybridMonitorMetricData(request *PutHybridMonitorMetricDataRequest) (_result *PutHybridMonitorMetricDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutHybridMonitorMetricDataResponse{}
	_body, _err := client.PutHybridMonitorMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies a log monitoring metric.
//
// Description:
//
// In the example of this topic, the `cpu_total` log monitoring metric is created. The response shows that the log monitoring metric is created and the metric ID is `16****`.
//
// @param request - PutLogMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutLogMonitorResponse
func (client *Client) PutLogMonitorWithOptions(request *PutLogMonitorRequest, runtime *util.RuntimeOptions) (_result *PutLogMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Aggregates)) {
		query["Aggregates"] = request.Aggregates
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Groupbys)) {
		query["Groupbys"] = request.Groupbys
	}

	if !tea.BoolValue(util.IsUnset(request.LogId)) {
		query["LogId"] = request.LogId
	}

	if !tea.BoolValue(util.IsUnset(request.MetricExpress)) {
		query["MetricExpress"] = request.MetricExpress
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.SlsLogstore)) {
		query["SlsLogstore"] = request.SlsLogstore
	}

	if !tea.BoolValue(util.IsUnset(request.SlsProject)) {
		query["SlsProject"] = request.SlsProject
	}

	if !tea.BoolValue(util.IsUnset(request.SlsRegionId)) {
		query["SlsRegionId"] = request.SlsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tumblingwindows)) {
		query["Tumblingwindows"] = request.Tumblingwindows
	}

	if !tea.BoolValue(util.IsUnset(request.Unit)) {
		query["Unit"] = request.Unit
	}

	if !tea.BoolValue(util.IsUnset(request.ValueFilter)) {
		query["ValueFilter"] = request.ValueFilter
	}

	if !tea.BoolValue(util.IsUnset(request.ValueFilterRelation)) {
		query["ValueFilterRelation"] = request.ValueFilterRelation
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutLogMonitor"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutLogMonitorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies a log monitoring metric.
//
// Description:
//
// In the example of this topic, the `cpu_total` log monitoring metric is created. The response shows that the log monitoring metric is created and the metric ID is `16****`.
//
// @param request - PutLogMonitorRequest
//
// @return PutLogMonitorResponse
func (client *Client) PutLogMonitor(request *PutLogMonitorRequest) (_result *PutLogMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutLogMonitorResponse{}
	_body, _err := client.PutLogMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds or modifies the push channels of an alert rule.
//
// Description:
//
// # [](#)
//
// This topic provides an example on how to associate an alert rule with a resource. In this example, the alert rule is `ae06917_75a8c43178ab66****`, the resource is `acs:mns:cn-hangzhou:120886317861****:/queues/test/message`, and the ID of the resource for which alerts are triggered is `1`. The response indicates that the resource is associated with the specified alert rule.
//
// @param request - PutMetricRuleTargetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutMetricRuleTargetsResponse
func (client *Client) PutMetricRuleTargetsWithOptions(request *PutMetricRuleTargetsRequest, runtime *util.RuntimeOptions) (_result *PutMetricRuleTargetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.Targets)) {
		query["Targets"] = request.Targets
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutMetricRuleTargets"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutMetricRuleTargetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds or modifies the push channels of an alert rule.
//
// Description:
//
// # [](#)
//
// This topic provides an example on how to associate an alert rule with a resource. In this example, the alert rule is `ae06917_75a8c43178ab66****`, the resource is `acs:mns:cn-hangzhou:120886317861****:/queues/test/message`, and the ID of the resource for which alerts are triggered is `1`. The response indicates that the resource is associated with the specified alert rule.
//
// @param request - PutMetricRuleTargetsRequest
//
// @return PutMetricRuleTargetsResponse
func (client *Client) PutMetricRuleTargets(request *PutMetricRuleTargetsRequest) (_result *PutMetricRuleTargetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutMetricRuleTargetsResponse{}
	_body, _err := client.PutMetricRuleTargetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies an alert rule to dynamically add instances that meet the rule to an application group.
//
// @param request - PutMonitorGroupDynamicRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutMonitorGroupDynamicRuleResponse
func (client *Client) PutMonitorGroupDynamicRuleWithOptions(request *PutMonitorGroupDynamicRuleRequest, runtime *util.RuntimeOptions) (_result *PutMonitorGroupDynamicRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupRules)) {
		query["GroupRules"] = request.GroupRules
	}

	if !tea.BoolValue(util.IsUnset(request.IsAsync)) {
		query["IsAsync"] = request.IsAsync
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutMonitorGroupDynamicRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutMonitorGroupDynamicRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies an alert rule to dynamically add instances that meet the rule to an application group.
//
// @param request - PutMonitorGroupDynamicRuleRequest
//
// @return PutMonitorGroupDynamicRuleResponse
func (client *Client) PutMonitorGroupDynamicRule(request *PutMonitorGroupDynamicRuleRequest) (_result *PutMonitorGroupDynamicRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutMonitorGroupDynamicRuleResponse{}
	_body, _err := client.PutMonitorGroupDynamicRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures global settings for the CloudMonitor agent.
//
// @param request - PutMonitoringConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutMonitoringConfigResponse
func (client *Client) PutMonitoringConfigWithOptions(request *PutMonitoringConfigRequest, runtime *util.RuntimeOptions) (_result *PutMonitoringConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoInstall)) {
		query["AutoInstall"] = request.AutoInstall
	}

	if !tea.BoolValue(util.IsUnset(request.EnableInstallAgentNewECS)) {
		query["EnableInstallAgentNewECS"] = request.EnableInstallAgentNewECS
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutMonitoringConfig"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutMonitoringConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures global settings for the CloudMonitor agent.
//
// @param request - PutMonitoringConfigRequest
//
// @return PutMonitoringConfigResponse
func (client *Client) PutMonitoringConfig(request *PutMonitoringConfigRequest) (_result *PutMonitoringConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutMonitoringConfigResponse{}
	_body, _err := client.PutMonitoringConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures an alert rule.
//
// Description:
//
// This topic provides an example on how to create a threshold-triggered alert rule for the `cpu_total` metric of an Elastic Compute Service (ECS) instance whose ID is `i-uf6j91r34rnwawoo****`. The namespace of ECS metrics is `acs_ecs_dashboard`. The alert contact group of the alert rule is `ECS_Group`. The name of the alert rule is `test123`. The ID of the alert rule is `a151cd6023eacee2f0978e03863cc1697c89508****`. The statistical method for Critical-level alerts is `Average`. The comparison operator for Critical-level alerts is `GreaterThanOrEqualToThreshold`. The threshold for Critical-level alerts is `90`. The consecutive number of times for which the metric value meets the trigger condition before a Critical-level alert is triggered is `3`.
//
// >  Statistics verification was added on August 15, 2024. Only the statistical value of the corresponding metric can be set for the Statistics parameter. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://www.alibabacloud.com/help/en/cms/support/appendix-1-metrics).
//
// @param tmpReq - PutResourceMetricRuleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutResourceMetricRuleResponse
func (client *Client) PutResourceMetricRuleWithOptions(tmpReq *PutResourceMetricRuleRequest, runtime *util.RuntimeOptions) (_result *PutResourceMetricRuleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &PutResourceMetricRuleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CompositeExpression)) {
		request.CompositeExpressionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CompositeExpression, tea.String("CompositeExpression"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Prometheus)) {
		request.PrometheusShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Prometheus, tea.String("Prometheus"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CompositeExpressionShrink)) {
		query["CompositeExpression"] = request.CompositeExpressionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroups)) {
		query["ContactGroups"] = request.ContactGroups
	}

	if !tea.BoolValue(util.IsUnset(request.EffectiveInterval)) {
		query["EffectiveInterval"] = request.EffectiveInterval
	}

	if !tea.BoolValue(util.IsUnset(request.EmailSubject)) {
		query["EmailSubject"] = request.EmailSubject
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Labels)) {
		query["Labels"] = request.Labels
	}

	if !tea.BoolValue(util.IsUnset(request.MetricName)) {
		query["MetricName"] = request.MetricName
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.NoDataPolicy)) {
		query["NoDataPolicy"] = request.NoDataPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.NoEffectiveInterval)) {
		query["NoEffectiveInterval"] = request.NoEffectiveInterval
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PrometheusShrink)) {
		query["Prometheus"] = request.PrometheusShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Resources)) {
		query["Resources"] = request.Resources
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleName)) {
		query["RuleName"] = request.RuleName
	}

	if !tea.BoolValue(util.IsUnset(request.SilenceTime)) {
		query["SilenceTime"] = request.SilenceTime
	}

	if !tea.BoolValue(util.IsUnset(request.Webhook)) {
		query["Webhook"] = request.Webhook
	}

	if !tea.BoolValue(util.IsUnset(request.Escalations)) {
		query["Escalations"] = request.Escalations
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutResourceMetricRule"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutResourceMetricRuleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures an alert rule.
//
// Description:
//
// This topic provides an example on how to create a threshold-triggered alert rule for the `cpu_total` metric of an Elastic Compute Service (ECS) instance whose ID is `i-uf6j91r34rnwawoo****`. The namespace of ECS metrics is `acs_ecs_dashboard`. The alert contact group of the alert rule is `ECS_Group`. The name of the alert rule is `test123`. The ID of the alert rule is `a151cd6023eacee2f0978e03863cc1697c89508****`. The statistical method for Critical-level alerts is `Average`. The comparison operator for Critical-level alerts is `GreaterThanOrEqualToThreshold`. The threshold for Critical-level alerts is `90`. The consecutive number of times for which the metric value meets the trigger condition before a Critical-level alert is triggered is `3`.
//
// >  Statistics verification was added on August 15, 2024. Only the statistical value of the corresponding metric can be set for the Statistics parameter. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://www.alibabacloud.com/help/en/cms/support/appendix-1-metrics).
//
// @param request - PutResourceMetricRuleRequest
//
// @return PutResourceMetricRuleResponse
func (client *Client) PutResourceMetricRule(request *PutResourceMetricRuleRequest) (_result *PutResourceMetricRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutResourceMetricRuleResponse{}
	_body, _err := client.PutResourceMetricRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates multiple alert rules for the specified metric of a specified resource.
//
// Description:
//
// This topic provides an example on how to create a threshold-triggered alert rule for the `cpu_total` metric of an Elastic Compute Service (ECS) instance whose ID is `i-uf6j91r34rnwawoo****`. The namespace of ECS metrics is `acs_ecs_dashboard`. The alert contact group of the alert rule is `ECS_Group`. The name of the alert rule is `test123`. The ID of the alert rule is `a151cd6023eacee2f0978e03863cc1697c89508****`. The statistical method for Critical-level alerts is `Average`. The comparison operator for Critical-level alerts is `GreaterThanOrEqualToThreshold`. The threshold for Critical-level alerts is `90`. The consecutive number of times for which the metric value meets the trigger condition before a Critical-level alert is triggered is `3`.
//
// >  Statistics verification was added on August 15, 2024. Only the statistical value of the corresponding metric can be set for the Statistics parameter. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://www.alibabacloud.com/help/en/cms/support/appendix-1-metrics).
//
// @param request - PutResourceMetricRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutResourceMetricRulesResponse
func (client *Client) PutResourceMetricRulesWithOptions(request *PutResourceMetricRulesRequest, runtime *util.RuntimeOptions) (_result *PutResourceMetricRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Rules)) {
		query["Rules"] = request.Rules
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutResourceMetricRules"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PutResourceMetricRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates multiple alert rules for the specified metric of a specified resource.
//
// Description:
//
// This topic provides an example on how to create a threshold-triggered alert rule for the `cpu_total` metric of an Elastic Compute Service (ECS) instance whose ID is `i-uf6j91r34rnwawoo****`. The namespace of ECS metrics is `acs_ecs_dashboard`. The alert contact group of the alert rule is `ECS_Group`. The name of the alert rule is `test123`. The ID of the alert rule is `a151cd6023eacee2f0978e03863cc1697c89508****`. The statistical method for Critical-level alerts is `Average`. The comparison operator for Critical-level alerts is `GreaterThanOrEqualToThreshold`. The threshold for Critical-level alerts is `90`. The consecutive number of times for which the metric value meets the trigger condition before a Critical-level alert is triggered is `3`.
//
// >  Statistics verification was added on August 15, 2024. Only the statistical value of the corresponding metric can be set for the Statistics parameter. For more information about how to obtain the value of this parameter, see [Appendix 1: Metrics](https://www.alibabacloud.com/help/en/cms/support/appendix-1-metrics).
//
// @param request - PutResourceMetricRulesRequest
//
// @return PutResourceMetricRulesResponse
func (client *Client) PutResourceMetricRules(request *PutResourceMetricRulesRequest) (_result *PutResourceMetricRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutResourceMetricRulesResponse{}
	_body, _err := client.PutResourceMetricRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes tags.
//
// @param request - RemoveTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveTagsResponse
func (client *Client) RemoveTagsWithOptions(request *RemoveTagsRequest, runtime *util.RuntimeOptions) (_result *RemoveTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupIds)) {
		query["GroupIds"] = request.GroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveTags"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes tags.
//
// @param request - RemoveTagsRequest
//
// @return RemoveTagsResponse
func (client *Client) RemoveTags(request *RemoveTagsRequest) (_result *RemoveTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveTagsResponse{}
	_body, _err := client.RemoveTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// This operation is used to test whether a system event can be triggered as expected. You can call this operation to simulate a system event and check whether an expected response is returned after an alert is triggered by the system event.
//
// @param request - SendDryRunSystemEventRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendDryRunSystemEventResponse
func (client *Client) SendDryRunSystemEventWithOptions(request *SendDryRunSystemEventRequest, runtime *util.RuntimeOptions) (_result *SendDryRunSystemEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EventContent)) {
		query["EventContent"] = request.EventContent
	}

	if !tea.BoolValue(util.IsUnset(request.EventName)) {
		query["EventName"] = request.EventName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Product)) {
		query["Product"] = request.Product
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendDryRunSystemEvent"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendDryRunSystemEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// This operation is used to test whether a system event can be triggered as expected. You can call this operation to simulate a system event and check whether an expected response is returned after an alert is triggered by the system event.
//
// @param request - SendDryRunSystemEventRequest
//
// @return SendDryRunSystemEventResponse
func (client *Client) SendDryRunSystemEvent(request *SendDryRunSystemEventRequest) (_result *SendDryRunSystemEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendDryRunSystemEventResponse{}
	_body, _err := client.SendDryRunSystemEventWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// >  This API operation is not applicable to ECS instances. To uninstall the agent from an ECS instance, see [Install and uninstall the Cloud Monitor agent](https://help.aliyun.com/document_detail/183482.html).
//
// @param request - UninstallMonitoringAgentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UninstallMonitoringAgentResponse
func (client *Client) UninstallMonitoringAgentWithOptions(request *UninstallMonitoringAgentRequest, runtime *util.RuntimeOptions) (_result *UninstallMonitoringAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UninstallMonitoringAgent"),
		Version:     tea.String("2019-01-01"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UninstallMonitoringAgentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// >  This API operation is not applicable to ECS instances. To uninstall the agent from an ECS instance, see [Install and uninstall the Cloud Monitor agent](https://help.aliyun.com/document_detail/183482.html).
//
// @param request - UninstallMonitoringAgentRequest
//
// @return UninstallMonitoringAgentResponse
func (client *Client) UninstallMonitoringAgent(request *UninstallMonitoringAgentRequest) (_result *UninstallMonitoringAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UninstallMonitoringAgentResponse{}
	_body, _err := client.UninstallMonitoringAgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
