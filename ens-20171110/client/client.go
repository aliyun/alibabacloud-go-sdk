// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type BucketInfo struct {
	// example:
	//
	// private
	BucketAcl *string `json:"BucketAcl,omitempty" xml:"BucketAcl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// bucket001
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// example:
	//
	// this is a bucket
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// example:
	//
	// 2011-12-01T12:27:13.000Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// LRS
	DataRedundancyType *string `json:"DataRedundancyType,omitempty" xml:"DataRedundancyType,omitempty"`
	// example:
	//
	// global
	DispatcherType *string `json:"DispatcherType,omitempty" xml:"DispatcherType,omitempty"`
	// example:
	//
	// eos.aliyuncs.com
	Endpoint    *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// example:
	//
	// 2011-12-01T12:27:13.000Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// example:
	//
	// general
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// example:
	//
	// Standard
	StorageClass *string `json:"StorageClass,omitempty" xml:"StorageClass,omitempty"`
}

func (s BucketInfo) String() string {
	return tea.Prettify(s)
}

func (s BucketInfo) GoString() string {
	return s.String()
}

func (s *BucketInfo) SetBucketAcl(v string) *BucketInfo {
	s.BucketAcl = &v
	return s
}

func (s *BucketInfo) SetBucketName(v string) *BucketInfo {
	s.BucketName = &v
	return s
}

func (s *BucketInfo) SetComment(v string) *BucketInfo {
	s.Comment = &v
	return s
}

func (s *BucketInfo) SetCreateTime(v string) *BucketInfo {
	s.CreateTime = &v
	return s
}

func (s *BucketInfo) SetDataRedundancyType(v string) *BucketInfo {
	s.DataRedundancyType = &v
	return s
}

func (s *BucketInfo) SetDispatcherType(v string) *BucketInfo {
	s.DispatcherType = &v
	return s
}

func (s *BucketInfo) SetEndpoint(v string) *BucketInfo {
	s.Endpoint = &v
	return s
}

func (s *BucketInfo) SetEnsRegionId(v string) *BucketInfo {
	s.EnsRegionId = &v
	return s
}

func (s *BucketInfo) SetModifyTime(v string) *BucketInfo {
	s.ModifyTime = &v
	return s
}

func (s *BucketInfo) SetResourceType(v string) *BucketInfo {
	s.ResourceType = &v
	return s
}

func (s *BucketInfo) SetStorageClass(v string) *BucketInfo {
	s.StorageClass = &v
	return s
}

type DataDisk struct {
	// example:
	//
	// 60
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DataDisk) String() string {
	return tea.Prettify(s)
}

func (s DataDisk) GoString() string {
	return s.String()
}

func (s *DataDisk) SetSize(v int64) *DataDisk {
	s.Size = &v
	return s
}

type HealthCheck struct {
	HealthCheck               *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	HealthCheckConnectPort    *int32  `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckConnectTimeout *int32  `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	HealthCheckDomain         *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	HealthCheckHttpCode       *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	HealthCheckInterval       *int32  `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthCheckMethod         *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	HealthCheckTimeout        *int32  `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	HealthCheckType           *string `json:"HealthCheckType,omitempty" xml:"HealthCheckType,omitempty"`
	HealthCheckURI            *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	HealthyThreshold          *int32  `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	UnhealthyThreshold        *int32  `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s HealthCheck) String() string {
	return tea.Prettify(s)
}

func (s HealthCheck) GoString() string {
	return s.String()
}

func (s *HealthCheck) SetHealthCheck(v string) *HealthCheck {
	s.HealthCheck = &v
	return s
}

func (s *HealthCheck) SetHealthCheckConnectPort(v int32) *HealthCheck {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *HealthCheck) SetHealthCheckConnectTimeout(v int32) *HealthCheck {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *HealthCheck) SetHealthCheckDomain(v string) *HealthCheck {
	s.HealthCheckDomain = &v
	return s
}

func (s *HealthCheck) SetHealthCheckHttpCode(v string) *HealthCheck {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *HealthCheck) SetHealthCheckInterval(v int32) *HealthCheck {
	s.HealthCheckInterval = &v
	return s
}

func (s *HealthCheck) SetHealthCheckMethod(v string) *HealthCheck {
	s.HealthCheckMethod = &v
	return s
}

func (s *HealthCheck) SetHealthCheckTimeout(v int32) *HealthCheck {
	s.HealthCheckTimeout = &v
	return s
}

func (s *HealthCheck) SetHealthCheckType(v string) *HealthCheck {
	s.HealthCheckType = &v
	return s
}

func (s *HealthCheck) SetHealthCheckURI(v string) *HealthCheck {
	s.HealthCheckURI = &v
	return s
}

func (s *HealthCheck) SetHealthyThreshold(v int32) *HealthCheck {
	s.HealthyThreshold = &v
	return s
}

func (s *HealthCheck) SetUnhealthyThreshold(v int32) *HealthCheck {
	s.UnhealthyThreshold = &v
	return s
}

type HttpConfig struct {
	Cookie *string `json:"Cookie,omitempty" xml:"Cookie,omitempty"`
	// example:
	//
	// 500
	CookieTimeout       *int32  `json:"CookieTimeout,omitempty" xml:"CookieTimeout,omitempty"`
	IdleTimeout         *int32  `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	RequestTimeout      *int32  `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	Scheduler           *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	ServerCertificateId *string `json:"ServerCertificateId,omitempty" xml:"ServerCertificateId,omitempty"`
	// if can be null:
	// false
	StickySession *string `json:"StickySession,omitempty" xml:"StickySession,omitempty"`
	// example:
	//
	// insert
	StickySessionType *string `json:"StickySessionType,omitempty" xml:"StickySessionType,omitempty"`
	// example:
	//
	// on
	XForwardedFor *string `json:"XForwardedFor,omitempty" xml:"XForwardedFor,omitempty"`
}

func (s HttpConfig) String() string {
	return tea.Prettify(s)
}

func (s HttpConfig) GoString() string {
	return s.String()
}

func (s *HttpConfig) SetCookie(v string) *HttpConfig {
	s.Cookie = &v
	return s
}

func (s *HttpConfig) SetCookieTimeout(v int32) *HttpConfig {
	s.CookieTimeout = &v
	return s
}

func (s *HttpConfig) SetIdleTimeout(v int32) *HttpConfig {
	s.IdleTimeout = &v
	return s
}

func (s *HttpConfig) SetRequestTimeout(v int32) *HttpConfig {
	s.RequestTimeout = &v
	return s
}

func (s *HttpConfig) SetScheduler(v string) *HttpConfig {
	s.Scheduler = &v
	return s
}

func (s *HttpConfig) SetServerCertificateId(v string) *HttpConfig {
	s.ServerCertificateId = &v
	return s
}

func (s *HttpConfig) SetStickySession(v string) *HttpConfig {
	s.StickySession = &v
	return s
}

func (s *HttpConfig) SetStickySessionType(v string) *HttpConfig {
	s.StickySessionType = &v
	return s
}

func (s *HttpConfig) SetXForwardedFor(v string) *HttpConfig {
	s.XForwardedFor = &v
	return s
}

type InstanceActiveOpsGroup struct {
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s InstanceActiveOpsGroup) String() string {
	return tea.Prettify(s)
}

func (s InstanceActiveOpsGroup) GoString() string {
	return s.String()
}

func (s *InstanceActiveOpsGroup) SetInstanceIds(v []*string) *InstanceActiveOpsGroup {
	s.InstanceIds = v
	return s
}

type InstanceActiveOpsTask struct {
	InstanceActiveOpsTaskId     *string `json:"InstanceActiveOpsTaskId,omitempty" xml:"InstanceActiveOpsTaskId,omitempty"`
	InstanceActiveOpsTaskStatus *string `json:"InstanceActiveOpsTaskStatus,omitempty" xml:"InstanceActiveOpsTaskStatus,omitempty"`
}

func (s InstanceActiveOpsTask) String() string {
	return tea.Prettify(s)
}

func (s InstanceActiveOpsTask) GoString() string {
	return s.String()
}

func (s *InstanceActiveOpsTask) SetInstanceActiveOpsTaskId(v string) *InstanceActiveOpsTask {
	s.InstanceActiveOpsTaskId = &v
	return s
}

func (s *InstanceActiveOpsTask) SetInstanceActiveOpsTaskStatus(v string) *InstanceActiveOpsTask {
	s.InstanceActiveOpsTaskStatus = &v
	return s
}

type InstanceOperateResponse struct {
	Code       *int64  `json:"Code,omitempty" xml:"Code,omitempty"`
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Message    *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s InstanceOperateResponse) String() string {
	return tea.Prettify(s)
}

func (s InstanceOperateResponse) GoString() string {
	return s.String()
}

func (s *InstanceOperateResponse) SetCode(v int64) *InstanceOperateResponse {
	s.Code = &v
	return s
}

func (s *InstanceOperateResponse) SetInstanceId(v string) *InstanceOperateResponse {
	s.InstanceId = &v
	return s
}

func (s *InstanceOperateResponse) SetMessage(v string) *InstanceOperateResponse {
	s.Message = &v
	return s
}

type SecurityGroupRule struct {
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidrIp      *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	Direction       *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	IpProtocol      *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	Policy          *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange       *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	SourceCidrIp    *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
	Priority        *int32  `json:"priority,omitempty" xml:"priority,omitempty"`
}

func (s SecurityGroupRule) String() string {
	return tea.Prettify(s)
}

func (s SecurityGroupRule) GoString() string {
	return s.String()
}

func (s *SecurityGroupRule) SetDescription(v string) *SecurityGroupRule {
	s.Description = &v
	return s
}

func (s *SecurityGroupRule) SetDestCidrIp(v string) *SecurityGroupRule {
	s.DestCidrIp = &v
	return s
}

func (s *SecurityGroupRule) SetDirection(v string) *SecurityGroupRule {
	s.Direction = &v
	return s
}

func (s *SecurityGroupRule) SetIpProtocol(v string) *SecurityGroupRule {
	s.IpProtocol = &v
	return s
}

func (s *SecurityGroupRule) SetPolicy(v string) *SecurityGroupRule {
	s.Policy = &v
	return s
}

func (s *SecurityGroupRule) SetPortRange(v string) *SecurityGroupRule {
	s.PortRange = &v
	return s
}

func (s *SecurityGroupRule) SetSourceCidrIp(v string) *SecurityGroupRule {
	s.SourceCidrIp = &v
	return s
}

func (s *SecurityGroupRule) SetSourcePortRange(v string) *SecurityGroupRule {
	s.SourcePortRange = &v
	return s
}

func (s *SecurityGroupRule) SetPriority(v int32) *SecurityGroupRule {
	s.Priority = &v
	return s
}

type TagsInParams struct {
	Tag []*TagsInParamsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagsInParams) String() string {
	return tea.Prettify(s)
}

func (s TagsInParams) GoString() string {
	return s.String()
}

func (s *TagsInParams) SetTag(v []*TagsInParamsTag) *TagsInParams {
	s.Tag = v
	return s
}

type TagsInParamsTag struct {
	// This parameter is required.
	//
	// example:
	//
	// test-key
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// test-key-value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagsInParamsTag) String() string {
	return tea.Prettify(s)
}

func (s TagsInParamsTag) GoString() string {
	return s.String()
}

func (s *TagsInParamsTag) SetKey(v string) *TagsInParamsTag {
	s.Key = &v
	return s
}

func (s *TagsInParamsTag) SetValue(v string) *TagsInParamsTag {
	s.Value = &v
	return s
}

type TcpConfig struct {
	EstablishedTimeout *int32  `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	PersistenceTimeout *int32  `json:"PersistenceTimeout,omitempty" xml:"PersistenceTimeout,omitempty"`
	Scheduler          *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
}

func (s TcpConfig) String() string {
	return tea.Prettify(s)
}

func (s TcpConfig) GoString() string {
	return s.String()
}

func (s *TcpConfig) SetEstablishedTimeout(v int32) *TcpConfig {
	s.EstablishedTimeout = &v
	return s
}

func (s *TcpConfig) SetPersistenceTimeout(v int32) *TcpConfig {
	s.PersistenceTimeout = &v
	return s
}

func (s *TcpConfig) SetScheduler(v string) *TcpConfig {
	s.Scheduler = &v
	return s
}

type UdpCheck struct {
	HealthCheckConnectPort    *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	HealthCheckConnectTimeout *int32 `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	HealthCheckInterval       *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	HealthyThreshold          *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	UnhealthyThreshold        *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s UdpCheck) String() string {
	return tea.Prettify(s)
}

func (s UdpCheck) GoString() string {
	return s.String()
}

func (s *UdpCheck) SetHealthCheckConnectPort(v int32) *UdpCheck {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *UdpCheck) SetHealthCheckConnectTimeout(v int32) *UdpCheck {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *UdpCheck) SetHealthCheckInterval(v int32) *UdpCheck {
	s.HealthCheckInterval = &v
	return s
}

func (s *UdpCheck) SetHealthyThreshold(v int32) *UdpCheck {
	s.HealthyThreshold = &v
	return s
}

func (s *UdpCheck) SetUnhealthyThreshold(v int32) *UdpCheck {
	s.UnhealthyThreshold = &v
	return s
}

type UdpConfig struct {
	HashKey   *string `json:"HashKey,omitempty" xml:"HashKey,omitempty"`
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
}

func (s UdpConfig) String() string {
	return tea.Prettify(s)
}

func (s UdpConfig) GoString() string {
	return s.String()
}

func (s *UdpConfig) SetHashKey(v string) *UdpConfig {
	s.HashKey = &v
	return s
}

func (s *UdpConfig) SetScheduler(v string) *UdpConfig {
	s.Scheduler = &v
	return s
}

type AccosicateNetworkAclRequest struct {
	// The ID of the network ACL.
	//
	// This parameter is required.
	//
	// example:
	//
	// nacl-a2do9e413e0sp****
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	// The type of resource with which you want to associate the network ACL.
	//
	// This parameter is required.
	Resource []*AccosicateNetworkAclRequestResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s AccosicateNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s AccosicateNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *AccosicateNetworkAclRequest) SetNetworkAclId(v string) *AccosicateNetworkAclRequest {
	s.NetworkAclId = &v
	return s
}

func (s *AccosicateNetworkAclRequest) SetResource(v []*AccosicateNetworkAclRequestResource) *AccosicateNetworkAclRequest {
	s.Resource = v
	return s
}

type AccosicateNetworkAclRequestResource struct {
	// The ID of the associated resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// n-5****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the associated resource. Set the value to **Network**.
	//
	// Valid values of **N**: 0 to 29. You can associate a network ACL with at most 30 resources.
	//
	// This parameter is required.
	//
	// example:
	//
	// Network
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s AccosicateNetworkAclRequestResource) String() string {
	return tea.Prettify(s)
}

func (s AccosicateNetworkAclRequestResource) GoString() string {
	return s.String()
}

func (s *AccosicateNetworkAclRequestResource) SetResourceId(v string) *AccosicateNetworkAclRequestResource {
	s.ResourceId = &v
	return s
}

func (s *AccosicateNetworkAclRequestResource) SetResourceType(v string) *AccosicateNetworkAclRequestResource {
	s.ResourceType = &v
	return s
}

type AccosicateNetworkAclResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AccosicateNetworkAclResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AccosicateNetworkAclResponseBody) GoString() string {
	return s.String()
}

func (s *AccosicateNetworkAclResponseBody) SetRequestId(v string) *AccosicateNetworkAclResponseBody {
	s.RequestId = &v
	return s
}

type AccosicateNetworkAclResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AccosicateNetworkAclResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AccosicateNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s AccosicateNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *AccosicateNetworkAclResponse) SetHeaders(v map[string]*string) *AccosicateNetworkAclResponse {
	s.Headers = v
	return s
}

func (s *AccosicateNetworkAclResponse) SetStatusCode(v int32) *AccosicateNetworkAclResponse {
	s.StatusCode = &v
	return s
}

func (s *AccosicateNetworkAclResponse) SetBody(v *AccosicateNetworkAclResponseBody) *AccosicateNetworkAclResponse {
	s.Body = v
	return s
}

type AddBackendServersRequest struct {
	// The list of backend servers that you want to add to the Edge Load Balancer (ELB) instance. You can add up to 20 backend servers at a time.
	//
	// >  Only Edge Node Service (ENS) instances that are in the running state can be added to the ELB instance as backend servers.
	//
	// This parameter is required.
	BackendServers []*AddBackendServersRequestBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Repeated"`
	// The frontend port that is used by the Edge Load Balance (ELB) instance. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5qzdmxefgrpxd7oz2mefonvtx
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s AddBackendServersRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersRequest) GoString() string {
	return s.String()
}

func (s *AddBackendServersRequest) SetBackendServers(v []*AddBackendServersRequestBackendServers) *AddBackendServersRequest {
	s.BackendServers = v
	return s
}

func (s *AddBackendServersRequest) SetLoadBalancerId(v string) *AddBackendServersRequest {
	s.LoadBalancerId = &v
	return s
}

type AddBackendServersRequestBackendServers struct {
	// The IP address of the backend server.
	//
	// example:
	//
	// 192.168.X.X
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The backend port that is used by the ELB instance.
	//
	// example:
	//
	// 3309
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the backend server.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-5uf6dwyzch3wly790****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	// The type of the backend server. Valid values:
	//
	// 	- **ens**: ENS instance
	//
	// 	- **eni**: elastic network interface (ENI)
	//
	// example:
	//
	// ens
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The weight of the backend server. Default value: 100. Valid values: **0*	- to **100**.
	//
	// >  The value 0 indicates that requests are not forwarded to the backend server.
	//
	// example:
	//
	// 100
	Weight *int32 `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s AddBackendServersRequestBackendServers) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersRequestBackendServers) GoString() string {
	return s.String()
}

func (s *AddBackendServersRequestBackendServers) SetIp(v string) *AddBackendServersRequestBackendServers {
	s.Ip = &v
	return s
}

func (s *AddBackendServersRequestBackendServers) SetPort(v int32) *AddBackendServersRequestBackendServers {
	s.Port = &v
	return s
}

func (s *AddBackendServersRequestBackendServers) SetServerId(v string) *AddBackendServersRequestBackendServers {
	s.ServerId = &v
	return s
}

func (s *AddBackendServersRequestBackendServers) SetType(v string) *AddBackendServersRequestBackendServers {
	s.Type = &v
	return s
}

func (s *AddBackendServersRequestBackendServers) SetWeight(v int32) *AddBackendServersRequestBackendServers {
	s.Weight = &v
	return s
}

type AddBackendServersShrinkRequest struct {
	// The list of backend servers that you want to add to the Edge Load Balancer (ELB) instance. You can add up to 20 backend servers at a time.
	//
	// >  Only Edge Node Service (ENS) instances that are in the running state can be added to the ELB instance as backend servers.
	//
	// This parameter is required.
	BackendServersShrink *string `json:"BackendServers,omitempty" xml:"BackendServers,omitempty"`
	// The frontend port that is used by the Edge Load Balance (ELB) instance. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5qzdmxefgrpxd7oz2mefonvtx
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s AddBackendServersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddBackendServersShrinkRequest) SetBackendServersShrink(v string) *AddBackendServersShrinkRequest {
	s.BackendServersShrink = &v
	return s
}

func (s *AddBackendServersShrinkRequest) SetLoadBalancerId(v string) *AddBackendServersShrinkRequest {
	s.LoadBalancerId = &v
	return s
}

type AddBackendServersResponseBody struct {
	// The list of backend servers that you want to add. You can add at most 20 backend servers.
	//
	// >  Only ENS instances that are in the running state can be attached to the ELB instance as backend servers.
	BackendServers *AddBackendServersResponseBodyBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddBackendServersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersResponseBody) GoString() string {
	return s.String()
}

func (s *AddBackendServersResponseBody) SetBackendServers(v *AddBackendServersResponseBodyBackendServers) *AddBackendServersResponseBody {
	s.BackendServers = v
	return s
}

func (s *AddBackendServersResponseBody) SetRequestId(v string) *AddBackendServersResponseBody {
	s.RequestId = &v
	return s
}

type AddBackendServersResponseBodyBackendServers struct {
	BackendServer []*AddBackendServersResponseBodyBackendServersBackendServer `json:"BackendServer,omitempty" xml:"BackendServer,omitempty" type:"Repeated"`
}

func (s AddBackendServersResponseBodyBackendServers) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersResponseBodyBackendServers) GoString() string {
	return s.String()
}

func (s *AddBackendServersResponseBodyBackendServers) SetBackendServer(v []*AddBackendServersResponseBodyBackendServersBackendServer) *AddBackendServersResponseBodyBackendServers {
	s.BackendServer = v
	return s
}

type AddBackendServersResponseBodyBackendServersBackendServer struct {
	// The IP address of the backend server.
	//
	// example:
	//
	// 192.168.0.1
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The backend port that is used by the ELB instance.
	//
	// example:
	//
	// 0
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the instance that is used as the backend server.
	//
	// example:
	//
	// i-5uf6hj58zvml4ali8****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	// The type of the backend server. Valid values:
	//
	// 	- **ens**: ENS instance.
	//
	// 	- **eni**: ENI.
	//
	// example:
	//
	// ens
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The weight of the backend server. Default value: 100. Valid values: **0*	- to **100**.
	//
	// >  The value 0 indicates that requests are not forwarded to the backend server.
	//
	// example:
	//
	// 100
	Weight *int32 `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s AddBackendServersResponseBodyBackendServersBackendServer) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersResponseBodyBackendServersBackendServer) GoString() string {
	return s.String()
}

func (s *AddBackendServersResponseBodyBackendServersBackendServer) SetIp(v string) *AddBackendServersResponseBodyBackendServersBackendServer {
	s.Ip = &v
	return s
}

func (s *AddBackendServersResponseBodyBackendServersBackendServer) SetPort(v int32) *AddBackendServersResponseBodyBackendServersBackendServer {
	s.Port = &v
	return s
}

func (s *AddBackendServersResponseBodyBackendServersBackendServer) SetServerId(v string) *AddBackendServersResponseBodyBackendServersBackendServer {
	s.ServerId = &v
	return s
}

func (s *AddBackendServersResponseBodyBackendServersBackendServer) SetType(v string) *AddBackendServersResponseBodyBackendServersBackendServer {
	s.Type = &v
	return s
}

func (s *AddBackendServersResponseBodyBackendServersBackendServer) SetWeight(v int32) *AddBackendServersResponseBodyBackendServersBackendServer {
	s.Weight = &v
	return s
}

type AddBackendServersResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddBackendServersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddBackendServersResponse) String() string {
	return tea.Prettify(s)
}

func (s AddBackendServersResponse) GoString() string {
	return s.String()
}

func (s *AddBackendServersResponse) SetHeaders(v map[string]*string) *AddBackendServersResponse {
	s.Headers = v
	return s
}

func (s *AddBackendServersResponse) SetStatusCode(v int32) *AddBackendServersResponse {
	s.StatusCode = &v
	return s
}

func (s *AddBackendServersResponse) SetBody(v *AddBackendServersResponseBody) *AddBackendServersResponse {
	s.Body = v
	return s
}

type AddNetworkInterfaceToInstanceRequest struct {
	// Specifies whether to specify the instance.
	//
	// example:
	//
	// true
	AutoStart *bool `json:"AutoStart,omitempty" xml:"AutoStart,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// yourInstance ID
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The network. The value is a JSON string. Only IPv6 is supported. Sample code of an IPv6 network: [{ "ipType": "public", "ipAddressType": "ipv6" }]
	//
	// This parameter is required.
	//
	// example:
	//
	// [{"ipType": "public", "ipAddressType": "ipv6" }]
	Networks *string `json:"Networks,omitempty" xml:"Networks,omitempty"`
}

func (s AddNetworkInterfaceToInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddNetworkInterfaceToInstanceRequest) GoString() string {
	return s.String()
}

func (s *AddNetworkInterfaceToInstanceRequest) SetAutoStart(v bool) *AddNetworkInterfaceToInstanceRequest {
	s.AutoStart = &v
	return s
}

func (s *AddNetworkInterfaceToInstanceRequest) SetInstanceId(v string) *AddNetworkInterfaceToInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *AddNetworkInterfaceToInstanceRequest) SetNetworks(v string) *AddNetworkInterfaceToInstanceRequest {
	s.Networks = &v
	return s
}

type AddNetworkInterfaceToInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddNetworkInterfaceToInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddNetworkInterfaceToInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *AddNetworkInterfaceToInstanceResponseBody) SetRequestId(v string) *AddNetworkInterfaceToInstanceResponseBody {
	s.RequestId = &v
	return s
}

type AddNetworkInterfaceToInstanceResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddNetworkInterfaceToInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddNetworkInterfaceToInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddNetworkInterfaceToInstanceResponse) GoString() string {
	return s.String()
}

func (s *AddNetworkInterfaceToInstanceResponse) SetHeaders(v map[string]*string) *AddNetworkInterfaceToInstanceResponse {
	s.Headers = v
	return s
}

func (s *AddNetworkInterfaceToInstanceResponse) SetStatusCode(v int32) *AddNetworkInterfaceToInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *AddNetworkInterfaceToInstanceResponse) SetBody(v *AddNetworkInterfaceToInstanceResponseBody) *AddNetworkInterfaceToInstanceResponse {
	s.Body = v
	return s
}

type AddSnatIpForSnatEntryRequest struct {
	// The ID of the SNAT entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// snat-5xkzf89dndkzh8yg9stzqz9m4
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	// The EIP specified in the SNAT entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// 219.152.82.144
	SnatIp *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
}

func (s AddSnatIpForSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddSnatIpForSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *AddSnatIpForSnatEntryRequest) SetSnatEntryId(v string) *AddSnatIpForSnatEntryRequest {
	s.SnatEntryId = &v
	return s
}

func (s *AddSnatIpForSnatEntryRequest) SetSnatIp(v string) *AddSnatIpForSnatEntryRequest {
	s.SnatIp = &v
	return s
}

type AddSnatIpForSnatEntryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CD1FFCC6-5E9E-5C31-A014-13D02737B0EA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddSnatIpForSnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddSnatIpForSnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *AddSnatIpForSnatEntryResponseBody) SetRequestId(v string) *AddSnatIpForSnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type AddSnatIpForSnatEntryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddSnatIpForSnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddSnatIpForSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddSnatIpForSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *AddSnatIpForSnatEntryResponse) SetHeaders(v map[string]*string) *AddSnatIpForSnatEntryResponse {
	s.Headers = v
	return s
}

func (s *AddSnatIpForSnatEntryResponse) SetStatusCode(v int32) *AddSnatIpForSnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *AddSnatIpForSnatEntryResponse) SetBody(v *AddSnatIpForSnatEntryResponseBody) *AddSnatIpForSnatEntryResponse {
	s.Body = v
	return s
}

type AssignPrivateIpAddressesRequest struct {
	// The ID of the ENI.
	//
	// This parameter is required.
	//
	// example:
	//
	// eni-uf6533jbifugr5fo2j1w
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5rllcjb3ol6duzjdnbm1ombn7
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s AssignPrivateIpAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesRequest) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesRequest) SetNetworkInterfaceId(v string) *AssignPrivateIpAddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AssignPrivateIpAddressesRequest) SetVSwitchId(v string) *AssignPrivateIpAddressesRequest {
	s.VSwitchId = &v
	return s
}

type AssignPrivateIpAddressesResponseBody struct {
	// Details about the ENI and the secondary private IP addresses that are assigned to the ENI.
	AssignedPrivateIpAddressesSet *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet `json:"AssignedPrivateIpAddressesSet,omitempty" xml:"AssignedPrivateIpAddressesSet,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssignPrivateIpAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesResponseBody) SetAssignedPrivateIpAddressesSet(v *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) *AssignPrivateIpAddressesResponseBody {
	s.AssignedPrivateIpAddressesSet = v
	return s
}

func (s *AssignPrivateIpAddressesResponseBody) SetRequestId(v string) *AssignPrivateIpAddressesResponseBody {
	s.RequestId = &v
	return s
}

type AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet struct {
	// The ID of the ENI.
	//
	// example:
	//
	// eni-uf620pb4d19ljnu4a64m
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The assigned private IP addresses.
	PrivateIpSet []*string `json:"PrivateIpSet,omitempty" xml:"PrivateIpSet,omitempty" type:"Repeated"`
}

func (s AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) SetNetworkInterfaceId(v string) *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet {
	s.NetworkInterfaceId = &v
	return s
}

func (s *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet) SetPrivateIpSet(v []*string) *AssignPrivateIpAddressesResponseBodyAssignedPrivateIpAddressesSet {
	s.PrivateIpSet = v
	return s
}

type AssignPrivateIpAddressesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AssignPrivateIpAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AssignPrivateIpAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s AssignPrivateIpAddressesResponse) GoString() string {
	return s.String()
}

func (s *AssignPrivateIpAddressesResponse) SetHeaders(v map[string]*string) *AssignPrivateIpAddressesResponse {
	s.Headers = v
	return s
}

func (s *AssignPrivateIpAddressesResponse) SetStatusCode(v int32) *AssignPrivateIpAddressesResponse {
	s.StatusCode = &v
	return s
}

func (s *AssignPrivateIpAddressesResponse) SetBody(v *AssignPrivateIpAddressesResponseBody) *AssignPrivateIpAddressesResponse {
	s.Body = v
	return s
}

type AssociateEnsEipAddressRequest struct {
	// The ID of the EIP that you want to associate.
	//
	// This parameter is required.
	//
	// example:
	//
	// eip-5sc1sgcrsrwgwdvx44hru3p63
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	// The ID of the cloud service with which the EIP is associated.
	//
	// >  You can specify the ID of an Edge Load Balancer (ELB) instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5saivuir6b1mupxjfbhmk1xkb
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of instance with which you want to associate the EIP. Valid values:
	//
	// 	- **Nat**: a NAT gateway.
	//
	// 	- **SlbInstance**: an ELB instance.
	//
	// 	- **NetworkInterface**: a secondary elastic network interface (ENI).
	//
	// 	- **NatSlbInstance**: If you want to associate multiple EIPs to an ELB instance, you need to set the parameter to this value.
	//
	// 	- **EnsInstance*	- (default): an ENS instance.
	//
	// example:
	//
	// SlbInstance
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// Specifies whether the EIP is a secondary EIP. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Standby *bool `json:"Standby,omitempty" xml:"Standby,omitempty"`
}

func (s AssociateEnsEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateEnsEipAddressRequest) GoString() string {
	return s.String()
}

func (s *AssociateEnsEipAddressRequest) SetAllocationId(v string) *AssociateEnsEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *AssociateEnsEipAddressRequest) SetInstanceId(v string) *AssociateEnsEipAddressRequest {
	s.InstanceId = &v
	return s
}

func (s *AssociateEnsEipAddressRequest) SetInstanceType(v string) *AssociateEnsEipAddressRequest {
	s.InstanceType = &v
	return s
}

func (s *AssociateEnsEipAddressRequest) SetStandby(v bool) *AssociateEnsEipAddressRequest {
	s.Standby = &v
	return s
}

type AssociateEnsEipAddressResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssociateEnsEipAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateEnsEipAddressResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateEnsEipAddressResponseBody) SetRequestId(v string) *AssociateEnsEipAddressResponseBody {
	s.RequestId = &v
	return s
}

type AssociateEnsEipAddressResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AssociateEnsEipAddressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AssociateEnsEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateEnsEipAddressResponse) GoString() string {
	return s.String()
}

func (s *AssociateEnsEipAddressResponse) SetHeaders(v map[string]*string) *AssociateEnsEipAddressResponse {
	s.Headers = v
	return s
}

func (s *AssociateEnsEipAddressResponse) SetStatusCode(v int32) *AssociateEnsEipAddressResponse {
	s.StatusCode = &v
	return s
}

func (s *AssociateEnsEipAddressResponse) SetBody(v *AssociateEnsEipAddressResponseBody) *AssociateEnsEipAddressResponse {
	s.Body = v
	return s
}

type AssociateHaVipRequest struct {
	// The ID of the HAVIP.
	//
	// This parameter is required.
	//
	// example:
	//
	// havip-5p14t****
	HaVipId *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-50c4****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the instance to be associated with the HAVIP. Valid values:
	//
	// 	- EnsInstance (default): ENS instance.
	//
	// 	- NetworkInterface: ENI. If you want to associate the HAVIP with an ENI, this parameter is required.
	//
	// example:
	//
	// EnsInstance
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s AssociateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateHaVipRequest) GoString() string {
	return s.String()
}

func (s *AssociateHaVipRequest) SetHaVipId(v string) *AssociateHaVipRequest {
	s.HaVipId = &v
	return s
}

func (s *AssociateHaVipRequest) SetInstanceId(v string) *AssociateHaVipRequest {
	s.InstanceId = &v
	return s
}

func (s *AssociateHaVipRequest) SetInstanceType(v string) *AssociateHaVipRequest {
	s.InstanceType = &v
	return s
}

type AssociateHaVipResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssociateHaVipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateHaVipResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateHaVipResponseBody) SetRequestId(v string) *AssociateHaVipResponseBody {
	s.RequestId = &v
	return s
}

type AssociateHaVipResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AssociateHaVipResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AssociateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateHaVipResponse) GoString() string {
	return s.String()
}

func (s *AssociateHaVipResponse) SetHeaders(v map[string]*string) *AssociateHaVipResponse {
	s.Headers = v
	return s
}

func (s *AssociateHaVipResponse) SetStatusCode(v int32) *AssociateHaVipResponse {
	s.StatusCode = &v
	return s
}

func (s *AssociateHaVipResponse) SetBody(v *AssociateHaVipResponseBody) *AssociateHaVipResponse {
	s.Body = v
	return s
}

type AttachDiskRequest struct {
	// Specifies whether the disk to be attached is released with the instance. Valid values:
	//
	// 	- true: The disk will be released when the ECS instance is released.
	//
	// 	- false: The disk will be retained when the ECS instance is released.
	//
	// 	- If you leave this parameter empty, the default value is used.
	//
	// example:
	//
	// false
	DeleteWithInstance *string `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	// The ID of the disk to be attached. The cloud disk and the instance must belong to the same node.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-5saf13yy6sopmmg88mzsg****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-5rr19av7tkpgi9os52ag1****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AttachDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskRequest) GoString() string {
	return s.String()
}

func (s *AttachDiskRequest) SetDeleteWithInstance(v string) *AttachDiskRequest {
	s.DeleteWithInstance = &v
	return s
}

func (s *AttachDiskRequest) SetDiskId(v string) *AttachDiskRequest {
	s.DiskId = &v
	return s
}

func (s *AttachDiskRequest) SetInstanceId(v string) *AttachDiskRequest {
	s.InstanceId = &v
	return s
}

type AttachDiskResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 916777D9-42D3-5928-92CE-373B1874B674
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskResponseBody) GoString() string {
	return s.String()
}

func (s *AttachDiskResponseBody) SetCode(v int32) *AttachDiskResponseBody {
	s.Code = &v
	return s
}

func (s *AttachDiskResponseBody) SetRequestId(v string) *AttachDiskResponseBody {
	s.RequestId = &v
	return s
}

type AttachDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachDiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachDiskResponse) GoString() string {
	return s.String()
}

func (s *AttachDiskResponse) SetHeaders(v map[string]*string) *AttachDiskResponse {
	s.Headers = v
	return s
}

func (s *AttachDiskResponse) SetStatusCode(v int32) *AttachDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachDiskResponse) SetBody(v *AttachDiskResponseBody) *AttachDiskResponse {
	s.Body = v
	return s
}

type AttachEnsInstancesRequest struct {
	// The ID of the instance. You can specify only one instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// testInstacneId
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The command that you want to execute on the instance. The command must be encoded in Base64 or UTF-8.
	//
	// This parameter is required.
	//
	// example:
	//
	// wget d2dldCBodHRwOi8vYWxpYWNzLWs4cy1jbxxxx
	Scripts *string `json:"Scripts,omitempty" xml:"Scripts,omitempty"`
}

func (s AttachEnsInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachEnsInstancesRequest) GoString() string {
	return s.String()
}

func (s *AttachEnsInstancesRequest) SetInstanceId(v string) *AttachEnsInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachEnsInstancesRequest) SetScripts(v string) *AttachEnsInstancesRequest {
	s.Scripts = &v
	return s
}

type AttachEnsInstancesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachEnsInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachEnsInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *AttachEnsInstancesResponseBody) SetRequestId(v string) *AttachEnsInstancesResponseBody {
	s.RequestId = &v
	return s
}

type AttachEnsInstancesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachEnsInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachEnsInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachEnsInstancesResponse) GoString() string {
	return s.String()
}

func (s *AttachEnsInstancesResponse) SetHeaders(v map[string]*string) *AttachEnsInstancesResponse {
	s.Headers = v
	return s
}

func (s *AttachEnsInstancesResponse) SetStatusCode(v int32) *AttachEnsInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachEnsInstancesResponse) SetBody(v *AttachEnsInstancesResponseBody) *AttachEnsInstancesResponse {
	s.Body = v
	return s
}

type AttachInstanceSDGRequest struct {
	// The IDs of the instances.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s AttachInstanceSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceSDGRequest) GoString() string {
	return s.String()
}

func (s *AttachInstanceSDGRequest) SetInstanceIds(v []*string) *AttachInstanceSDGRequest {
	s.InstanceIds = v
	return s
}

func (s *AttachInstanceSDGRequest) SetSDGId(v string) *AttachInstanceSDGRequest {
	s.SDGId = &v
	return s
}

type AttachInstanceSDGShrinkRequest struct {
	// The IDs of the instances.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s AttachInstanceSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *AttachInstanceSDGShrinkRequest) SetInstanceIdsShrink(v string) *AttachInstanceSDGShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *AttachInstanceSDGShrinkRequest) SetSDGId(v string) *AttachInstanceSDGShrinkRequest {
	s.SDGId = &v
	return s
}

type AttachInstanceSDGResponseBody struct {
	// The returned data object.
	Data *AttachInstanceSDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachInstanceSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceSDGResponseBody) GoString() string {
	return s.String()
}

func (s *AttachInstanceSDGResponseBody) SetData(v *AttachInstanceSDGResponseBodyData) *AttachInstanceSDGResponseBody {
	s.Data = v
	return s
}

func (s *AttachInstanceSDGResponseBody) SetRequestId(v string) *AttachInstanceSDGResponseBody {
	s.RequestId = &v
	return s
}

type AttachInstanceSDGResponseBodyData struct {
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The execution result of the synchronization request.
	Result *AttachInstanceSDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- **true**: All tasks are successful.
	//
	// 	- **false**: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AttachInstanceSDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceSDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *AttachInstanceSDGResponseBodyData) SetMessage(v string) *AttachInstanceSDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *AttachInstanceSDGResponseBodyData) SetResult(v *AttachInstanceSDGResponseBodyDataResult) *AttachInstanceSDGResponseBodyData {
	s.Result = v
	return s
}

func (s *AttachInstanceSDGResponseBodyData) SetSuccess(v bool) *AttachInstanceSDGResponseBodyData {
	s.Success = &v
	return s
}

type AttachInstanceSDGResponseBodyDataResult struct {
	// The number of failed tasks.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details about failed tasks.
	FailedItems []*AttachInstanceSDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful tasks.
	//
	// example:
	//
	// 1
	SuccessCount *int64 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s AttachInstanceSDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceSDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *AttachInstanceSDGResponseBodyDataResult) SetFailedCount(v int64) *AttachInstanceSDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *AttachInstanceSDGResponseBodyDataResult) SetFailedItems(v []*AttachInstanceSDGResponseBodyDataResultFailedItems) *AttachInstanceSDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *AttachInstanceSDGResponseBodyDataResult) SetSuccessCount(v int64) *AttachInstanceSDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type AttachInstanceSDGResponseBodyDataResultFailedItems struct {
	// The error message.
	//
	// example:
	//
	// sdg not found
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// aic-xxxxx-0
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s AttachInstanceSDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceSDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *AttachInstanceSDGResponseBodyDataResultFailedItems) SetErrMessage(v string) *AttachInstanceSDGResponseBodyDataResultFailedItems {
	s.ErrMessage = &v
	return s
}

func (s *AttachInstanceSDGResponseBodyDataResultFailedItems) SetInstanceId(v string) *AttachInstanceSDGResponseBodyDataResultFailedItems {
	s.InstanceId = &v
	return s
}

type AttachInstanceSDGResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachInstanceSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachInstanceSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachInstanceSDGResponse) GoString() string {
	return s.String()
}

func (s *AttachInstanceSDGResponse) SetHeaders(v map[string]*string) *AttachInstanceSDGResponse {
	s.Headers = v
	return s
}

func (s *AttachInstanceSDGResponse) SetStatusCode(v int32) *AttachInstanceSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachInstanceSDGResponse) SetBody(v *AttachInstanceSDGResponseBody) *AttachInstanceSDGResponse {
	s.Body = v
	return s
}

type AttachNetworkInterfaceRequest struct {
	// The ID of the instance
	//
	// This parameter is required.
	//
	// example:
	//
	// i-5p67acfmxazb4p****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the ENI.
	//
	// This parameter is required.
	//
	// example:
	//
	// eni-58z57orgmt6d1****
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
}

func (s AttachNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *AttachNetworkInterfaceRequest) SetInstanceId(v string) *AttachNetworkInterfaceRequest {
	s.InstanceId = &v
	return s
}

func (s *AttachNetworkInterfaceRequest) SetNetworkInterfaceId(v string) *AttachNetworkInterfaceRequest {
	s.NetworkInterfaceId = &v
	return s
}

type AttachNetworkInterfaceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachNetworkInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachNetworkInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *AttachNetworkInterfaceResponseBody) SetRequestId(v string) *AttachNetworkInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type AttachNetworkInterfaceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachNetworkInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *AttachNetworkInterfaceResponse) SetHeaders(v map[string]*string) *AttachNetworkInterfaceResponse {
	s.Headers = v
	return s
}

func (s *AttachNetworkInterfaceResponse) SetStatusCode(v int32) *AttachNetworkInterfaceResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachNetworkInterfaceResponse) SetBody(v *AttachNetworkInterfaceResponseBody) *AttachNetworkInterfaceResponse {
	s.Body = v
	return s
}

type AuthorizeSecurityGroupRequest struct {
	// The transport layer protocol. The values of this parameter are case-sensitive. Valid values:
	//
	// 	- tcp
	//
	// 	- udp
	//
	// 	- icmp
	//
	// 	- gre
	//
	// 	- all: All protocols are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// all
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The action of security group rule N that determines whether to allow inbound access. Valid values:
	//
	// 	- accept: allows access.
	//
	// 	- drop: denies access and returns no responses.
	//
	// Default value: accept.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The range of destination ports that correspond to the transport layer protocol for security group rule N. Valid values:
	//
	// 	- When the IpProtocol parameter is set to tcp or udp, the port number range is **1*	- to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
	//
	// 	- When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.
	//
	// This parameter is required.
	//
	// example:
	//
	// 22/22
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of security group rule N. Valid values: **1*	- to **100**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp67acfmxazb4ph***
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The source IPv4 CIDR block. CIDR blocks and IPv4 addresses are supported.
	//
	// This parameter is empty by default.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10.0.XX.XX/8
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	// The range of port numbers that correspond to the transport layer protocol for the source security group. Valid values:
	//
	// 	- When the IpProtocol parameter is set to tcp or udp, the port number range is **1 to 65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
	//
	// 	- When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.
	//
	// example:
	//
	// 22/22
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s AuthorizeSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupRequest) SetIpProtocol(v string) *AuthorizeSecurityGroupRequest {
	s.IpProtocol = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPolicy(v string) *AuthorizeSecurityGroupRequest {
	s.Policy = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPortRange(v string) *AuthorizeSecurityGroupRequest {
	s.PortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetPriority(v int32) *AuthorizeSecurityGroupRequest {
	s.Priority = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSecurityGroupId(v string) *AuthorizeSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourceCidrIp(v string) *AuthorizeSecurityGroupRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetSourcePortRange(v string) *AuthorizeSecurityGroupRequest {
	s.SourcePortRange = &v
	return s
}

type AuthorizeSecurityGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AuthorizeSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupResponseBody) SetRequestId(v string) *AuthorizeSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeSecurityGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AuthorizeSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AuthorizeSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupResponse) SetHeaders(v map[string]*string) *AuthorizeSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeSecurityGroupResponse) SetStatusCode(v int32) *AuthorizeSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AuthorizeSecurityGroupResponse) SetBody(v *AuthorizeSecurityGroupResponseBody) *AuthorizeSecurityGroupResponse {
	s.Body = v
	return s
}

type AuthorizeSecurityGroupEgressRequest struct {
	// The destination IP addresses. CIDR blocks and IPv4 addresses are supported.
	//
	// This parameter is empty by default.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10.0.XX.XX/8
	DestCidrIp *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	// The transport layer protocol. The value of this parameter is case-sensitive. Valid values:
	//
	// 	- tcp
	//
	// 	- udp
	//
	// 	- icmp
	//
	// 	- gre
	//
	// 	- all: All protocols are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// all
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The action of the security group rule. Valid values:
	//
	// 	- accept: allows access. This is the default value.
	//
	// 	- drop: denies access and does not return responses.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The range of destination ports that correspond to the transport layer protocol for security group rule N. Valid values:
	//
	// 	- When the IpProtocol parameter is set to tcp or udp, the port number range is **1*	- to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
	//
	// 	- When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.
	//
	// This parameter is required.
	//
	// example:
	//
	// 22/22
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of security group rule N. Valid values: **1 to 100**. Default value: **1**.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp67acfmxazb4p****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The range of port numbers that correspond to the transport layer protocol for the source security group. Valid values:
	//
	// 	- When the IpProtocol parameter is set to tcp or udp, the port number range is **1*	- to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
	//
	// 	- When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.
	//
	// example:
	//
	// 22/22
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s AuthorizeSecurityGroupEgressRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressRequest) SetDestCidrIp(v string) *AuthorizeSecurityGroupEgressRequest {
	s.DestCidrIp = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetIpProtocol(v string) *AuthorizeSecurityGroupEgressRequest {
	s.IpProtocol = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPolicy(v string) *AuthorizeSecurityGroupEgressRequest {
	s.Policy = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPortRange(v string) *AuthorizeSecurityGroupEgressRequest {
	s.PortRange = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetPriority(v int32) *AuthorizeSecurityGroupEgressRequest {
	s.Priority = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetSecurityGroupId(v string) *AuthorizeSecurityGroupEgressRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressRequest) SetSourcePortRange(v string) *AuthorizeSecurityGroupEgressRequest {
	s.SourcePortRange = &v
	return s
}

type AuthorizeSecurityGroupEgressResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AuthorizeSecurityGroupEgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressResponseBody) SetRequestId(v string) *AuthorizeSecurityGroupEgressResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeSecurityGroupEgressResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AuthorizeSecurityGroupEgressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AuthorizeSecurityGroupEgressResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupEgressResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupEgressResponse) SetHeaders(v map[string]*string) *AuthorizeSecurityGroupEgressResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeSecurityGroupEgressResponse) SetStatusCode(v int32) *AuthorizeSecurityGroupEgressResponse {
	s.StatusCode = &v
	return s
}

func (s *AuthorizeSecurityGroupEgressResponse) SetBody(v *AuthorizeSecurityGroupEgressResponseBody) *AuthorizeSecurityGroupEgressResponse {
	s.Body = v
	return s
}

type CleanDistDataRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	DataName    *string `json:"DataName,omitempty" xml:"DataName,omitempty"`
	DataVersion *string `json:"DataVersion,omitempty" xml:"DataVersion,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s CleanDistDataRequest) String() string {
	return tea.Prettify(s)
}

func (s CleanDistDataRequest) GoString() string {
	return s.String()
}

func (s *CleanDistDataRequest) SetAppId(v string) *CleanDistDataRequest {
	s.AppId = &v
	return s
}

func (s *CleanDistDataRequest) SetDataName(v string) *CleanDistDataRequest {
	s.DataName = &v
	return s
}

func (s *CleanDistDataRequest) SetDataVersion(v string) *CleanDistDataRequest {
	s.DataVersion = &v
	return s
}

func (s *CleanDistDataRequest) SetEnsRegionId(v string) *CleanDistDataRequest {
	s.EnsRegionId = &v
	return s
}

type CleanDistDataResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CleanDistDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CleanDistDataResponseBody) GoString() string {
	return s.String()
}

func (s *CleanDistDataResponseBody) SetRequestId(v string) *CleanDistDataResponseBody {
	s.RequestId = &v
	return s
}

type CleanDistDataResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CleanDistDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CleanDistDataResponse) String() string {
	return tea.Prettify(s)
}

func (s CleanDistDataResponse) GoString() string {
	return s.String()
}

func (s *CleanDistDataResponse) SetHeaders(v map[string]*string) *CleanDistDataResponse {
	s.Headers = v
	return s
}

func (s *CleanDistDataResponse) SetStatusCode(v int32) *CleanDistDataResponse {
	s.StatusCode = &v
	return s
}

func (s *CleanDistDataResponse) SetBody(v *CleanDistDataResponseBody) *CleanDistDataResponse {
	s.Body = v
	return s
}

type CopySDGRequest struct {
	// The destination nodes.
	//
	// This parameter is required.
	DestinationRegionIds []*string `json:"DestinationRegionIds,omitempty" xml:"DestinationRegionIds,omitempty" type:"Repeated"`
	// The ID of the SDG that you want to copy.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s CopySDGRequest) String() string {
	return tea.Prettify(s)
}

func (s CopySDGRequest) GoString() string {
	return s.String()
}

func (s *CopySDGRequest) SetDestinationRegionIds(v []*string) *CopySDGRequest {
	s.DestinationRegionIds = v
	return s
}

func (s *CopySDGRequest) SetSDGId(v string) *CopySDGRequest {
	s.SDGId = &v
	return s
}

type CopySDGShrinkRequest struct {
	// The destination nodes.
	//
	// This parameter is required.
	DestinationRegionIdsShrink *string `json:"DestinationRegionIds,omitempty" xml:"DestinationRegionIds,omitempty"`
	// The ID of the SDG that you want to copy.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s CopySDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CopySDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *CopySDGShrinkRequest) SetDestinationRegionIdsShrink(v string) *CopySDGShrinkRequest {
	s.DestinationRegionIdsShrink = &v
	return s
}

func (s *CopySDGShrinkRequest) SetSDGId(v string) *CopySDGShrinkRequest {
	s.SDGId = &v
	return s
}

type CopySDGResponseBody struct {
	// The returned data object.
	Data *CopySDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// XXX-XXX-XXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CopySDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopySDGResponseBody) GoString() string {
	return s.String()
}

func (s *CopySDGResponseBody) SetData(v *CopySDGResponseBodyData) *CopySDGResponseBody {
	s.Data = v
	return s
}

func (s *CopySDGResponseBody) SetRequestId(v string) *CopySDGResponseBody {
	s.RequestId = &v
	return s
}

type CopySDGResponseBodyData struct {
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The execution result of the synchronization request.
	Result *CopySDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- **true**: All tasks are successful.
	//
	// 	- **false**: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CopySDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CopySDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *CopySDGResponseBodyData) SetMessage(v string) *CopySDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *CopySDGResponseBodyData) SetResult(v *CopySDGResponseBodyDataResult) *CopySDGResponseBodyData {
	s.Result = v
	return s
}

func (s *CopySDGResponseBodyData) SetSuccess(v bool) *CopySDGResponseBodyData {
	s.Success = &v
	return s
}

type CopySDGResponseBodyDataResult struct {
	// The number of failed nodes.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details of failed nodes.
	FailedItems []*CopySDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful nodes.
	//
	// example:
	//
	// 1
	SuccessCount *int64 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s CopySDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s CopySDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *CopySDGResponseBodyDataResult) SetFailedCount(v int64) *CopySDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *CopySDGResponseBodyDataResult) SetFailedItems(v []*CopySDGResponseBodyDataResultFailedItems) *CopySDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *CopySDGResponseBodyDataResult) SetSuccessCount(v int64) *CopySDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type CopySDGResponseBodyDataResultFailedItems struct {
	// The ID of the destination node.
	//
	// example:
	//
	// cn-hangzhou-xxx
	DestinationRegionId *string `json:"DestinationRegionId,omitempty" xml:"DestinationRegionId,omitempty"`
	// The error message.
	//
	// example:
	//
	// region not found
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s CopySDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s CopySDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *CopySDGResponseBodyDataResultFailedItems) SetDestinationRegionId(v string) *CopySDGResponseBodyDataResultFailedItems {
	s.DestinationRegionId = &v
	return s
}

func (s *CopySDGResponseBodyDataResultFailedItems) SetErrorMessage(v string) *CopySDGResponseBodyDataResultFailedItems {
	s.ErrorMessage = &v
	return s
}

type CopySDGResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CopySDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CopySDGResponse) String() string {
	return tea.Prettify(s)
}

func (s CopySDGResponse) GoString() string {
	return s.String()
}

func (s *CopySDGResponse) SetHeaders(v map[string]*string) *CopySDGResponse {
	s.Headers = v
	return s
}

func (s *CopySDGResponse) SetStatusCode(v int32) *CopySDGResponse {
	s.StatusCode = &v
	return s
}

func (s *CopySDGResponse) SetBody(v *CopySDGResponseBody) *CopySDGResponse {
	s.Body = v
	return s
}

type CopySnapshotRequest struct {
	// The IDs of destination nodes.
	//
	// This parameter is required.
	DestinationRegionIds []*string `json:"DestinationRegionIds,omitempty" xml:"DestinationRegionIds,omitempty" type:"Repeated"`
	// The description of the snapshot. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
	//
	// example:
	//
	// testDescription
	DestinationSnapshotDescription *string `json:"DestinationSnapshotDescription,omitempty" xml:"DestinationSnapshotDescription,omitempty"`
	// The name of the snapshot. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// testSnapshotName
	DestinationSnapshotName *string `json:"DestinationSnapshotName,omitempty" xml:"DestinationSnapshotName,omitempty"`
	// The ID of the source snapshot.
	//
	// This parameter is required.
	//
	// example:
	//
	// sp-bp1c0doj0taqyzzl****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s CopySnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotRequest) GoString() string {
	return s.String()
}

func (s *CopySnapshotRequest) SetDestinationRegionIds(v []*string) *CopySnapshotRequest {
	s.DestinationRegionIds = v
	return s
}

func (s *CopySnapshotRequest) SetDestinationSnapshotDescription(v string) *CopySnapshotRequest {
	s.DestinationSnapshotDescription = &v
	return s
}

func (s *CopySnapshotRequest) SetDestinationSnapshotName(v string) *CopySnapshotRequest {
	s.DestinationSnapshotName = &v
	return s
}

func (s *CopySnapshotRequest) SetSnapshotId(v string) *CopySnapshotRequest {
	s.SnapshotId = &v
	return s
}

type CopySnapshotShrinkRequest struct {
	// The IDs of destination nodes.
	//
	// This parameter is required.
	DestinationRegionIdsShrink *string `json:"DestinationRegionIds,omitempty" xml:"DestinationRegionIds,omitempty"`
	// The description of the snapshot. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
	//
	// example:
	//
	// testDescription
	DestinationSnapshotDescription *string `json:"DestinationSnapshotDescription,omitempty" xml:"DestinationSnapshotDescription,omitempty"`
	// The name of the snapshot. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// testSnapshotName
	DestinationSnapshotName *string `json:"DestinationSnapshotName,omitempty" xml:"DestinationSnapshotName,omitempty"`
	// The ID of the source snapshot.
	//
	// This parameter is required.
	//
	// example:
	//
	// sp-bp1c0doj0taqyzzl****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s CopySnapshotShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotShrinkRequest) GoString() string {
	return s.String()
}

func (s *CopySnapshotShrinkRequest) SetDestinationRegionIdsShrink(v string) *CopySnapshotShrinkRequest {
	s.DestinationRegionIdsShrink = &v
	return s
}

func (s *CopySnapshotShrinkRequest) SetDestinationSnapshotDescription(v string) *CopySnapshotShrinkRequest {
	s.DestinationSnapshotDescription = &v
	return s
}

func (s *CopySnapshotShrinkRequest) SetDestinationSnapshotName(v string) *CopySnapshotShrinkRequest {
	s.DestinationSnapshotName = &v
	return s
}

func (s *CopySnapshotShrinkRequest) SetSnapshotId(v string) *CopySnapshotShrinkRequest {
	s.SnapshotId = &v
	return s
}

type CopySnapshotResponseBody struct {
	// The list of created snapshots.
	AllocationId []*CopySnapshotResponseBodyAllocationId `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" type:"Repeated"`
	// The success status code.
	//
	// 	- **PartSuccess**: partially succeeded.
	//
	// 	- **AllSuccess**: all succeeded.
	//
	// example:
	//
	// AllSuccess
	BizStatusCode *string `json:"BizStatusCode,omitempty" xml:"BizStatusCode,omitempty"`
	// The request ID.
	//
	// example:
	//
	// EA3758E0-8899-17D3-9526-5F62CF33A586
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of nodes that are not created.
	UnAllocationId []*CopySnapshotResponseBodyUnAllocationId `json:"UnAllocationId,omitempty" xml:"UnAllocationId,omitempty" type:"Repeated"`
}

func (s CopySnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *CopySnapshotResponseBody) SetAllocationId(v []*CopySnapshotResponseBodyAllocationId) *CopySnapshotResponseBody {
	s.AllocationId = v
	return s
}

func (s *CopySnapshotResponseBody) SetBizStatusCode(v string) *CopySnapshotResponseBody {
	s.BizStatusCode = &v
	return s
}

func (s *CopySnapshotResponseBody) SetRequestId(v string) *CopySnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *CopySnapshotResponseBody) SetUnAllocationId(v []*CopySnapshotResponseBodyUnAllocationId) *CopySnapshotResponseBody {
	s.UnAllocationId = v
	return s
}

type CopySnapshotResponseBodyAllocationId struct {
	// The ID of the node.
	//
	// example:
	//
	// cn-chengdu-telecom-4
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The IDs of the instances.
	InstanceId []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s CopySnapshotResponseBodyAllocationId) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotResponseBodyAllocationId) GoString() string {
	return s.String()
}

func (s *CopySnapshotResponseBodyAllocationId) SetEnsRegionId(v string) *CopySnapshotResponseBodyAllocationId {
	s.EnsRegionId = &v
	return s
}

func (s *CopySnapshotResponseBodyAllocationId) SetInstanceId(v []*string) *CopySnapshotResponseBodyAllocationId {
	s.InstanceId = v
	return s
}

type CopySnapshotResponseBodyUnAllocationId struct {
	// The ID of the node.
	//
	// example:
	//
	// cn-chengdu-26
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s CopySnapshotResponseBodyUnAllocationId) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotResponseBodyUnAllocationId) GoString() string {
	return s.String()
}

func (s *CopySnapshotResponseBodyUnAllocationId) SetEnsRegionId(v string) *CopySnapshotResponseBodyUnAllocationId {
	s.EnsRegionId = &v
	return s
}

type CopySnapshotResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CopySnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CopySnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s CopySnapshotResponse) GoString() string {
	return s.String()
}

func (s *CopySnapshotResponse) SetHeaders(v map[string]*string) *CopySnapshotResponse {
	s.Headers = v
	return s
}

func (s *CopySnapshotResponse) SetStatusCode(v int32) *CopySnapshotResponse {
	s.StatusCode = &v
	return s
}

func (s *CopySnapshotResponse) SetBody(v *CopySnapshotResponseBody) *CopySnapshotResponse {
	s.Body = v
	return s
}

type CreateARMServerInstancesRequest struct {
	// The number of instances to create. Valid values: **1*	- to **100**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Amount *int32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Specifies whether to enable auto-renewal for the subscription. Valid values:
	//
	// 	- true
	//
	// 	- false (default)
	//
	// example:
	//
	// false
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// Specifies whether to use coupons. Valid values:
	//
	// 	- true
	//
	// 	- false (default)
	//
	// example:
	//
	// true
	AutoUseCoupon *bool   `json:"AutoUseCoupon,omitempty" xml:"AutoUseCoupon,omitempty"`
	Cidr          *string `json:"Cidr,omitempty" xml:"Cidr,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-guiyang-12
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// Set one or more environment variables during EAIS instance initialization.
	//
	// example:
	//
	// [object Object]
	EnvironmentVar *string `json:"EnvironmentVar,omitempty" xml:"EnvironmentVar,omitempty"`
	// The refresh rate. Unit: Hz. Valid values: 30 and 60.
	//
	// example:
	//
	// 30
	Frequency *int32 `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	// The ID of the image.
	//
	// This parameter is required.
	//
	// example:
	//
	// yourImage ID
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The specification of the Android in Container (AIC) instance. Examples:
	//
	// 	- aic.cf52r.c1.np
	//
	// 	- aic.cf52r.c2.np
	//
	// 	- aic.cf53r.c2.np
	//
	// 	- aic.cf52r.c4.np
	//
	// 	- aic.cf53r.c3.np
	//
	// 	- aic.cf52r.c3.np
	//
	// 	- aic.cf53r.c1.np
	//
	// 	- aic.cf53r.c5.np
	//
	// 	- aic.cf53r.c6
	//
	// 	- aic.cf53r.c4.np
	//
	// 	- aic.cf53r.c6.np
	//
	// 	- aic.cf53r.c7.np
	//
	// 	- aic.cf52m1r.c5.np
	//
	// 	- aic.cf53r.c8.np
	//
	// 	- aic.cf53r.c7
	//
	// 	- aic.cf52m1r.c2.np
	//
	// 	- aic.cf52m1r.c1.np
	//
	// 	- aic.cf52m1r.c3.np
	//
	// 	- aic.cf52m1r.c4.np
	//
	// 	- aic.cf52m1r.c6
	//
	// 	- ens.a6c2
	//
	// This parameter is required.
	//
	// example:
	//
	// aic.cf53r.c6.np
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The name of the key pair.
	//
	// example:
	//
	// TestKeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The namespace.
	//
	// example:
	//
	// pre
	NameSpace *string `json:"NameSpace,omitempty" xml:"NameSpace,omitempty"`
	// The billing method. Set the value to **PrePaid**. PrePaid specifies the subscription billing method.
	//
	// >  Only PrePaid is supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// PrePaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The subscription duration of the instance.
	//
	// 	- If you leave PeriodUnit empty, the instance is purchased on a monthly basis. Valid values: Day and Month.
	//
	// 	- If you set PeriodUnit to Day, you can set Period only to 3.
	//
	// 	- If you set PeriodUnit to Month, you can set Period to a value within the range of [1,9], or set the value to 12.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription duration.
	//
	// 	- If you leave PeriodUnit empty, the instance is purchased on a monthly basis. Valid values: Day and Month.
	//
	// 	- If you set PeriodUnit to Day, you can set Period only to 3.
	//
	// 	- If you set PeriodUnit to Month, you can set Period to a value within the range of [1,9], or set the value to 12.
	//
	// This parameter is required.
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The resolution. Examples:
	//
	// 	- 1920\\*864
	//
	// 	- 1080\\*1920
	//
	// 	- 1920\\*1080
	//
	// 	- 720\\*1280
	//
	// 	- 2400\\*1080
	//
	// 	- 1080\\*2400
	//
	// 	- 1280\\*720
	//
	// 	- 864\\*1920
	//
	// This parameter is required.
	//
	// example:
	//
	// 720*1280
	Resolution *string `json:"Resolution,omitempty" xml:"Resolution,omitempty"`
	// The name of the service.
	//
	// example:
	//
	// AIC-Server
	ServerName *string `json:"ServerName,omitempty" xml:"ServerName,omitempty"`
	// The specification of the ARM server. Examples:
	//
	// 	- cas.cf53r
	//
	// 	- cas.cf52r
	//
	// 	- cas.cf52m1r
	//
	// 	- cas.tg52g2
	//
	// 	- ens.afq-c2m3i.medium
	//
	// This parameter is required.
	//
	// example:
	//
	// cas.cf53r
	ServerType *string `json:"ServerType,omitempty" xml:"ServerType,omitempty"`
}

func (s CreateARMServerInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateARMServerInstancesRequest) GoString() string {
	return s.String()
}

func (s *CreateARMServerInstancesRequest) SetAmount(v int32) *CreateARMServerInstancesRequest {
	s.Amount = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetAutoRenew(v bool) *CreateARMServerInstancesRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetAutoUseCoupon(v bool) *CreateARMServerInstancesRequest {
	s.AutoUseCoupon = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetCidr(v string) *CreateARMServerInstancesRequest {
	s.Cidr = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetEnsRegionId(v string) *CreateARMServerInstancesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetEnvironmentVar(v string) *CreateARMServerInstancesRequest {
	s.EnvironmentVar = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetFrequency(v int32) *CreateARMServerInstancesRequest {
	s.Frequency = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetImageId(v string) *CreateARMServerInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetInstanceType(v string) *CreateARMServerInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetKeyPairName(v string) *CreateARMServerInstancesRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetNameSpace(v string) *CreateARMServerInstancesRequest {
	s.NameSpace = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetPayType(v string) *CreateARMServerInstancesRequest {
	s.PayType = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetPeriod(v int32) *CreateARMServerInstancesRequest {
	s.Period = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetPeriodUnit(v string) *CreateARMServerInstancesRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetResolution(v string) *CreateARMServerInstancesRequest {
	s.Resolution = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetServerName(v string) *CreateARMServerInstancesRequest {
	s.ServerName = &v
	return s
}

func (s *CreateARMServerInstancesRequest) SetServerType(v string) *CreateARMServerInstancesRequest {
	s.ServerType = &v
	return s
}

type CreateARMServerInstancesResponseBody struct {
	// The IDs of instances.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The ID of the order.
	//
	// example:
	//
	// 212630314490***
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateARMServerInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateARMServerInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *CreateARMServerInstancesResponseBody) SetInstanceIds(v []*string) *CreateARMServerInstancesResponseBody {
	s.InstanceIds = v
	return s
}

func (s *CreateARMServerInstancesResponseBody) SetOrderId(v string) *CreateARMServerInstancesResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateARMServerInstancesResponseBody) SetRequestId(v string) *CreateARMServerInstancesResponseBody {
	s.RequestId = &v
	return s
}

type CreateARMServerInstancesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateARMServerInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateARMServerInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateARMServerInstancesResponse) GoString() string {
	return s.String()
}

func (s *CreateARMServerInstancesResponse) SetHeaders(v map[string]*string) *CreateARMServerInstancesResponse {
	s.Headers = v
	return s
}

func (s *CreateARMServerInstancesResponse) SetStatusCode(v int32) *CreateARMServerInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateARMServerInstancesResponse) SetBody(v *CreateARMServerInstancesResponseBody) *CreateARMServerInstancesResponse {
	s.Body = v
	return s
}

type CreateApplicationRequest struct {
	// The edge application template. The value must be a JSON string that contains the following information:
	//
	// 	- Basic information such as the name of the application
	//
	// 	- Information such as resource specifications and network security configurations
	//
	// 	- Service specifications
	//
	// 	- Required resources
	//
	// This parameter is required.
	//
	// example:
	//
	// {\\"appMetaData\\":{        \\"appName\\":\\"nginx\\",        \\"clusterName\\":\\"poc\\",        \\"appType\\":\\"Common\\",        \\"description\\":\\"test\\"    },    \\"resourceAttribute\\":{        \\"resourceType\\":\\"\\",        \\"instanceSpec\\":\\"ens.sn1.tiny\\",        \\"systemDiskSize\\":20,        \\"dataDiskSize\\":0,        \\"bandwithOut\\":10,        \\"areaLevel\\":\\"National\\",        \\"netSecurityStrategy\\":null,        \\"initConfig\\":null    },    \\"resourceSelector\\":[        {            \\"count\\":1        }    ],    \\"workload\\":[        {            \\"podCount\\":1,            \\"serviceConfig\\":null,            \\"name\\":\\"nginx\\",            \\"podSpec\\":{                \\"containers\\":[                    {                        \\"name\\":\\"android\\",                        \\"image\\":\\"edge-registry.alicdn.com/test/nginx\\"                    }                ]            },            \\"count\\":1        }    ]}
	Template *string `json:"Template,omitempty" xml:"Template,omitempty"`
	// The timeout period for asynchronous processing. Unit: seconds. Default value: 1800.
	//
	// example:
	//
	// 1800
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s CreateApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationRequest) SetTemplate(v string) *CreateApplicationRequest {
	s.Template = &v
	return s
}

func (s *CreateApplicationRequest) SetTimeout(v int32) *CreateApplicationRequest {
	s.Timeout = &v
	return s
}

type CreateApplicationResponseBody struct {
	// The ID of the application. This is the unique identifier of the edge application.
	//
	// example:
	//
	// d0639abf-789a-4527-b420-031d2cd9ad9b
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApplicationResponseBody) SetAppId(v string) *CreateApplicationResponseBody {
	s.AppId = &v
	return s
}

func (s *CreateApplicationResponseBody) SetRequestId(v string) *CreateApplicationResponseBody {
	s.RequestId = &v
	return s
}

type CreateApplicationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationResponse) SetHeaders(v map[string]*string) *CreateApplicationResponse {
	s.Headers = v
	return s
}

func (s *CreateApplicationResponse) SetStatusCode(v int32) *CreateApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateApplicationResponse) SetBody(v *CreateApplicationResponseBody) *CreateApplicationResponse {
	s.Body = v
	return s
}

type CreateClassicNetworkRequest struct {
	// The CIDR block of the network. You can use one of the following CIDR blocks or their subnets as the CIDR block of the network:
	//
	// 	- 10.0.0.0/8 (default)
	//
	// 	- 172.16.0.0/12
	//
	// 	- 192.168.0.0/16
	//
	// This parameter is required.
	//
	// example:
	//
	// 10.0.0.0/16
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The description of the network. The name must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	//
	// example:
	//
	// This is my vswitch.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the edge node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-chengdu-xxxx-4
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the network. The name must meet the following requirements:
	//
	// 	- The name must be 2 to 128 characters in length.
	//
	// 	- The name must start with a letter but cannot start with http:// or https://.
	//
	// 	- The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// example
	NetworkName *string `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
}

func (s CreateClassicNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClassicNetworkRequest) GoString() string {
	return s.String()
}

func (s *CreateClassicNetworkRequest) SetCidrBlock(v string) *CreateClassicNetworkRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateClassicNetworkRequest) SetDescription(v string) *CreateClassicNetworkRequest {
	s.Description = &v
	return s
}

func (s *CreateClassicNetworkRequest) SetEnsRegionId(v string) *CreateClassicNetworkRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateClassicNetworkRequest) SetNetworkName(v string) *CreateClassicNetworkRequest {
	s.NetworkName = &v
	return s
}

type CreateClassicNetworkResponseBody struct {
	// The ID of the network.
	//
	// example:
	//
	// n-5s9ayrxsd9hszrlt5fgv2****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1A004E06-AC1B-5806-BA5E-41AB6B02DE83
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateClassicNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClassicNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClassicNetworkResponseBody) SetNetworkId(v string) *CreateClassicNetworkResponseBody {
	s.NetworkId = &v
	return s
}

func (s *CreateClassicNetworkResponseBody) SetRequestId(v string) *CreateClassicNetworkResponseBody {
	s.RequestId = &v
	return s
}

type CreateClassicNetworkResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateClassicNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateClassicNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClassicNetworkResponse) GoString() string {
	return s.String()
}

func (s *CreateClassicNetworkResponse) SetHeaders(v map[string]*string) *CreateClassicNetworkResponse {
	s.Headers = v
	return s
}

func (s *CreateClassicNetworkResponse) SetStatusCode(v int32) *CreateClassicNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateClassicNetworkResponse) SetBody(v *CreateClassicNetworkResponseBody) *CreateClassicNetworkResponse {
	s.Body = v
	return s
}

type CreateClusterRequest struct {
	// The version of the cluster.
	//
	// example:
	//
	// 1.18.8
	ClusterVersion *string `json:"ClusterVersion,omitempty" xml:"ClusterVersion,omitempty"`
	// The name of the cluster.
	//
	// example:
	//
	// mycluster-1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterRequest) GoString() string {
	return s.String()
}

func (s *CreateClusterRequest) SetClusterVersion(v string) *CreateClusterRequest {
	s.ClusterVersion = &v
	return s
}

func (s *CreateClusterRequest) SetName(v string) *CreateClusterRequest {
	s.Name = &v
	return s
}

type CreateClusterResponseBody struct {
	// The ID of the instance.
	//
	// example:
	//
	// c34b69b095f8241c5a91cc2252dceb976
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClusterResponseBody) SetClusterId(v string) *CreateClusterResponseBody {
	s.ClusterId = &v
	return s
}

func (s *CreateClusterResponseBody) SetRequestId(v string) *CreateClusterResponseBody {
	s.RequestId = &v
	return s
}

type CreateClusterResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterResponse) GoString() string {
	return s.String()
}

func (s *CreateClusterResponse) SetHeaders(v map[string]*string) *CreateClusterResponse {
	s.Headers = v
	return s
}

func (s *CreateClusterResponse) SetStatusCode(v int32) *CreateClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateClusterResponse) SetBody(v *CreateClusterResponseBody) *CreateClusterResponse {
	s.Body = v
	return s
}

type CreateDiskRequest struct {
	// The category of the disk. Valid values:
	//
	// 	- cloud_efficiency: ultra disk.
	//
	// 	- cloud_ssd: all-flash disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cloud_efficiency
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The name of the disk.
	//
	// example:
	//
	// yourDiskName
	DiskName *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	// Specifies whether to encrypt the new system disk. Valid values:
	//
	// 	- **true**
	//
	// 	- **false*	- (default): no
	//
	// example:
	//
	// false
	Encrypted *bool `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	// The ID of the edge node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-chengdu-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The billing method of the instance. Set the value to **PostPaid**.
	//
	// This parameter is required.
	//
	// example:
	//
	// PostPaid
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// The ID of the Key Management Service (KMS) key that is used by the cloud disk.
	//
	// >  If you set the **Encrypted*	- parameter to **true**, the default service key is used when the **KMSKeyId*	- parameter is empty.
	//
	// example:
	//
	// 0e478b7a-4262-4802-b8cb-00d3fxxxxx
	KMSKeyId *string `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	// The size of the disk. Unit: GiB.
	//
	// example:
	//
	// 20
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
	// The ID of the snapshot that you want to use to create the disk.
	//
	// The following limits apply to the **SnapshotId*	- and **Size*	- parameters:
	//
	// 	- If the size of the snapshot specified by **SnapshotId*	- is greater than the specified **Size*	- value, the size of the created disk is equal to the specified snapshot size.
	//
	// 	- If the size of the snapshot specified by **SnapshotId*	- is smaller than the specified **Size*	- value, the size of the created disk is equal to the specified **Size*	- value.
	//
	// example:
	//
	// s-897654321****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The tags.
	//
	// You can specify at most 20 tags.
	Tag []*CreateDiskRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskRequest) GoString() string {
	return s.String()
}

func (s *CreateDiskRequest) SetCategory(v string) *CreateDiskRequest {
	s.Category = &v
	return s
}

func (s *CreateDiskRequest) SetDiskName(v string) *CreateDiskRequest {
	s.DiskName = &v
	return s
}

func (s *CreateDiskRequest) SetEncrypted(v bool) *CreateDiskRequest {
	s.Encrypted = &v
	return s
}

func (s *CreateDiskRequest) SetEnsRegionId(v string) *CreateDiskRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateDiskRequest) SetInstanceChargeType(v string) *CreateDiskRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateDiskRequest) SetKMSKeyId(v string) *CreateDiskRequest {
	s.KMSKeyId = &v
	return s
}

func (s *CreateDiskRequest) SetSize(v string) *CreateDiskRequest {
	s.Size = &v
	return s
}

func (s *CreateDiskRequest) SetSnapshotId(v string) *CreateDiskRequest {
	s.SnapshotId = &v
	return s
}

func (s *CreateDiskRequest) SetTag(v []*CreateDiskRequestTag) *CreateDiskRequest {
	s.Tag = v
	return s
}

type CreateDiskRequestTag struct {
	// The key of tag N of the instance. Valid values of N: **1*	- to **20**.
	//
	// 	- The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
	//
	// 	- The key must be up to 64 characters in length.
	//
	// 	- The tag key cannot be an empty string.
	//
	// example:
	//
	// pro
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of a tag that is attached to the topics you want to query. This parameter is not required. If you configure this parameter, you must also configure the **Key*	- parameter.***	- If you include the Key and Value parameters in a request, this operation queries only the topics that use the specified tags. If you do not include these parameters in a request, this operation queries all topics that you can access.
	//
	// 	- Valid values of N: 1 to 20.
	//
	// 	- The value of this parameter can be an empty string.
	//
	// 	- The tag key can be up to 128 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.
	//
	// example:
	//
	// tagValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDiskRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDiskRequestTag) SetKey(v string) *CreateDiskRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDiskRequestTag) SetValue(v string) *CreateDiskRequestTag {
	s.Value = &v
	return s
}

type CreateDiskResponseBody struct {
	// The IDs of the instances.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The ID of the order. Multiple IDs are separated by commas (,).
	//
	// >  This parameter is not returned for the pay-as-you-go billing method.
	//
	// example:
	//
	// 21127020370****
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 7030AB96-57CF-1C68-9FEE-D60E547FD79C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDiskResponseBody) SetInstanceIds(v []*string) *CreateDiskResponseBody {
	s.InstanceIds = v
	return s
}

func (s *CreateDiskResponseBody) SetOrderId(v string) *CreateDiskResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateDiskResponseBody) SetRequestId(v string) *CreateDiskResponseBody {
	s.RequestId = &v
	return s
}

type CreateDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskResponse) GoString() string {
	return s.String()
}

func (s *CreateDiskResponse) SetHeaders(v map[string]*string) *CreateDiskResponse {
	s.Headers = v
	return s
}

func (s *CreateDiskResponse) SetStatusCode(v int32) *CreateDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDiskResponse) SetBody(v *CreateDiskResponseBody) *CreateDiskResponse {
	s.Body = v
	return s
}

type CreateEipInstanceRequest struct {
	// The maximum bandwidth of the EIP. Default value: 5. Valid values: 5 to 10000. Unit: Mbit/s.
	//
	// example:
	//
	// 5
	Bandwidth *int64 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.
	//
	// example:
	//
	// 26C28756-2586-17AF-B802-0DC50D8FDEBB
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The description of the EIP.
	//
	// example:
	//
	// yourDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-suzhou-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The billing method of the EIP. Set the value to **PostPaid**.
	//
	// This parameter is required.
	//
	// example:
	//
	// PostPaid
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// The metering method of the EIP. Set the value to **95BandwidthByMonth**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 95BandwidthByMonth
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The Internet service provider. Valid values:
	//
	// 	- **cmcc**: China Mobile.
	//
	// 	- **unicom**: China Unicom.
	//
	// 	- **telecom**: China Telecom.
	//
	// example:
	//
	// cmcc
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The name of the EIP.
	//
	// example:
	//
	// EIP1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The tags.
	Tag []*CreateEipInstanceRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateEipInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEipInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateEipInstanceRequest) SetBandwidth(v int64) *CreateEipInstanceRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateEipInstanceRequest) SetClientToken(v string) *CreateEipInstanceRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateEipInstanceRequest) SetDescription(v string) *CreateEipInstanceRequest {
	s.Description = &v
	return s
}

func (s *CreateEipInstanceRequest) SetEnsRegionId(v string) *CreateEipInstanceRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateEipInstanceRequest) SetInstanceChargeType(v string) *CreateEipInstanceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *CreateEipInstanceRequest) SetInternetChargeType(v string) *CreateEipInstanceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateEipInstanceRequest) SetIsp(v string) *CreateEipInstanceRequest {
	s.Isp = &v
	return s
}

func (s *CreateEipInstanceRequest) SetName(v string) *CreateEipInstanceRequest {
	s.Name = &v
	return s
}

func (s *CreateEipInstanceRequest) SetTag(v []*CreateEipInstanceRequestTag) *CreateEipInstanceRequest {
	s.Tag = v
	return s
}

type CreateEipInstanceRequestTag struct {
	// The key of tag N of the instance. Valid values of N: **1*	- to **20**.
	//
	// 	- The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
	//
	// 	- The key must be up to 64 characters in length.
	//
	// 	- The tag key cannot be an empty string.
	//
	// example:
	//
	// team
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N that is added to the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain http:// or https://.
	//
	// example:
	//
	// tagValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateEipInstanceRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateEipInstanceRequestTag) GoString() string {
	return s.String()
}

func (s *CreateEipInstanceRequestTag) SetKey(v string) *CreateEipInstanceRequestTag {
	s.Key = &v
	return s
}

func (s *CreateEipInstanceRequestTag) SetValue(v string) *CreateEipInstanceRequestTag {
	s.Value = &v
	return s
}

type CreateEipInstanceResponseBody struct {
	// The ID of the EIP.
	//
	// example:
	//
	// eip-25877c70gddh****
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 9DB6123F-470D-510A-A9EB-EBA799340452
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEipInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEipInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEipInstanceResponseBody) SetAllocationId(v string) *CreateEipInstanceResponseBody {
	s.AllocationId = &v
	return s
}

func (s *CreateEipInstanceResponseBody) SetRequestId(v string) *CreateEipInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateEipInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEipInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEipInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEipInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateEipInstanceResponse) SetHeaders(v map[string]*string) *CreateEipInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateEipInstanceResponse) SetStatusCode(v int32) *CreateEipInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEipInstanceResponse) SetBody(v *CreateEipInstanceResponseBody) *CreateEipInstanceResponse {
	s.Body = v
	return s
}

type CreateEnsRouteEntryRequest struct {
	// The description of the custom route entry.
	//
	// example:
	//
	// example
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The destination CIDR block of the custom route entry. Make sure that the destination CIDR block meets the following requirements:
	//
	// 	- The destination CIDR block is not 100.64.0.0/10 or a subset of 100.64.0.0/10.
	//
	// 	- The destination CIDR block of the custom route entry is different from the destination CIDR blocks of other route entries in the same route table.
	//
	// 	- 0.0.0.0/0 indicates the default CIDR block.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0.0.0.0/0
	DestinationCidrBlock *string `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	// The ID of the next hop of the custom route entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-5vb7leks9z4mxy1ay258
	NextHopId *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	// The next hop type of the custom route. Valid values:
	//
	// 	- Instance: an ENS instance.
	//
	// 	- HaVip: a high-availability virtual IP address (HAVIP).
	//
	// 	- NetworkPeer: VPC peering connection.
	//
	// example:
	//
	// Instance
	NextHopType *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
	// The name of the custom route entry that you want to add. The name must be 1 to 128 characters in length. It cannot start with http:// or https://.
	//
	// example:
	//
	// test
	RouteEntryName *string `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty"`
	// The ID of the route table to which you want to add a custom route entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// vtb-bp1cifr72dioje82lse2j
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	// The new source CIDR block of the inbound or outbound traffic.
	//
	// example:
	//
	// 172.XXX.XXX.0/24
	SourceCidrBlock *string `json:"SourceCidrBlock,omitempty" xml:"SourceCidrBlock,omitempty"`
}

func (s CreateEnsRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateEnsRouteEntryRequest) SetDescription(v string) *CreateEnsRouteEntryRequest {
	s.Description = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetDestinationCidrBlock(v string) *CreateEnsRouteEntryRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetNextHopId(v string) *CreateEnsRouteEntryRequest {
	s.NextHopId = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetNextHopType(v string) *CreateEnsRouteEntryRequest {
	s.NextHopType = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetRouteEntryName(v string) *CreateEnsRouteEntryRequest {
	s.RouteEntryName = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetRouteTableId(v string) *CreateEnsRouteEntryRequest {
	s.RouteTableId = &v
	return s
}

func (s *CreateEnsRouteEntryRequest) SetSourceCidrBlock(v string) *CreateEnsRouteEntryRequest {
	s.SourceCidrBlock = &v
	return s
}

type CreateEnsRouteEntryResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the route.
	//
	// example:
	//
	// rte-5vb5q8sk0lyoscx8539ds
	RouteEntryId *string `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
}

func (s CreateEnsRouteEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsRouteEntryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnsRouteEntryResponseBody) SetRequestId(v string) *CreateEnsRouteEntryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEnsRouteEntryResponseBody) SetRouteEntryId(v string) *CreateEnsRouteEntryResponseBody {
	s.RouteEntryId = &v
	return s
}

type CreateEnsRouteEntryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEnsRouteEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEnsRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateEnsRouteEntryResponse) SetHeaders(v map[string]*string) *CreateEnsRouteEntryResponse {
	s.Headers = v
	return s
}

func (s *CreateEnsRouteEntryResponse) SetStatusCode(v int32) *CreateEnsRouteEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEnsRouteEntryResponse) SetBody(v *CreateEnsRouteEntryResponseBody) *CreateEnsRouteEntryResponse {
	s.Body = v
	return s
}

type CreateEnsSaleControlRequest struct {
	AliUidAccount *string `json:"AliUidAccount,omitempty" xml:"AliUidAccount,omitempty"`
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	// This parameter is required.
	SaleControls []*CreateEnsSaleControlRequestSaleControls `json:"SaleControls,omitempty" xml:"SaleControls,omitempty" type:"Repeated"`
}

func (s CreateEnsSaleControlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsSaleControlRequest) GoString() string {
	return s.String()
}

func (s *CreateEnsSaleControlRequest) SetAliUidAccount(v string) *CreateEnsSaleControlRequest {
	s.AliUidAccount = &v
	return s
}

func (s *CreateEnsSaleControlRequest) SetCommodityCode(v string) *CreateEnsSaleControlRequest {
	s.CommodityCode = &v
	return s
}

func (s *CreateEnsSaleControlRequest) SetCustomAccount(v string) *CreateEnsSaleControlRequest {
	s.CustomAccount = &v
	return s
}

func (s *CreateEnsSaleControlRequest) SetSaleControls(v []*CreateEnsSaleControlRequestSaleControls) *CreateEnsSaleControlRequest {
	s.SaleControls = v
	return s
}

type CreateEnsSaleControlRequestSaleControls struct {
	ConditionControls []*CreateEnsSaleControlRequestSaleControlsConditionControls `json:"ConditionControls,omitempty" xml:"ConditionControls,omitempty" type:"Repeated"`
	Description       *string                                                     `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	// This parameter is required.
	ModuleValue *CreateEnsSaleControlRequestSaleControlsModuleValue `json:"ModuleValue,omitempty" xml:"ModuleValue,omitempty" type:"Struct"`
	// This parameter is required.
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// This parameter is required.
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
}

func (s CreateEnsSaleControlRequestSaleControls) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsSaleControlRequestSaleControls) GoString() string {
	return s.String()
}

func (s *CreateEnsSaleControlRequestSaleControls) SetConditionControls(v []*CreateEnsSaleControlRequestSaleControlsConditionControls) *CreateEnsSaleControlRequestSaleControls {
	s.ConditionControls = v
	return s
}

func (s *CreateEnsSaleControlRequestSaleControls) SetDescription(v string) *CreateEnsSaleControlRequestSaleControls {
	s.Description = &v
	return s
}

func (s *CreateEnsSaleControlRequestSaleControls) SetModuleCode(v string) *CreateEnsSaleControlRequestSaleControls {
	s.ModuleCode = &v
	return s
}

func (s *CreateEnsSaleControlRequestSaleControls) SetModuleValue(v *CreateEnsSaleControlRequestSaleControlsModuleValue) *CreateEnsSaleControlRequestSaleControls {
	s.ModuleValue = v
	return s
}

func (s *CreateEnsSaleControlRequestSaleControls) SetOperator(v string) *CreateEnsSaleControlRequestSaleControls {
	s.Operator = &v
	return s
}

func (s *CreateEnsSaleControlRequestSaleControls) SetOrderType(v string) *CreateEnsSaleControlRequestSaleControls {
	s.OrderType = &v
	return s
}

type CreateEnsSaleControlRequestSaleControlsConditionControls struct {
	ConditionControlModuleCode  *string `json:"ConditionControlModuleCode,omitempty" xml:"ConditionControlModuleCode,omitempty"`
	ConditionControlModuleValue *string `json:"ConditionControlModuleValue,omitempty" xml:"ConditionControlModuleValue,omitempty"`
}

func (s CreateEnsSaleControlRequestSaleControlsConditionControls) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsSaleControlRequestSaleControlsConditionControls) GoString() string {
	return s.String()
}

func (s *CreateEnsSaleControlRequestSaleControlsConditionControls) SetConditionControlModuleCode(v string) *CreateEnsSaleControlRequestSaleControlsConditionControls {
	s.ConditionControlModuleCode = &v
	return s
}

func (s *CreateEnsSaleControlRequestSaleControlsConditionControls) SetConditionControlModuleValue(v string) *CreateEnsSaleControlRequestSaleControlsConditionControls {
	s.ConditionControlModuleValue = &v
	return s
}

type CreateEnsSaleControlRequestSaleControlsModuleValue struct {
	ModuleMaxValue *string   `json:"ModuleMaxValue,omitempty" xml:"ModuleMaxValue,omitempty"`
	ModuleMinValue *string   `json:"ModuleMinValue,omitempty" xml:"ModuleMinValue,omitempty"`
	ModuleValue    []*string `json:"ModuleValue,omitempty" xml:"ModuleValue,omitempty" type:"Repeated"`
}

func (s CreateEnsSaleControlRequestSaleControlsModuleValue) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsSaleControlRequestSaleControlsModuleValue) GoString() string {
	return s.String()
}

func (s *CreateEnsSaleControlRequestSaleControlsModuleValue) SetModuleMaxValue(v string) *CreateEnsSaleControlRequestSaleControlsModuleValue {
	s.ModuleMaxValue = &v
	return s
}

func (s *CreateEnsSaleControlRequestSaleControlsModuleValue) SetModuleMinValue(v string) *CreateEnsSaleControlRequestSaleControlsModuleValue {
	s.ModuleMinValue = &v
	return s
}

func (s *CreateEnsSaleControlRequestSaleControlsModuleValue) SetModuleValue(v []*string) *CreateEnsSaleControlRequestSaleControlsModuleValue {
	s.ModuleValue = v
	return s
}

type CreateEnsSaleControlShrinkRequest struct {
	AliUidAccount *string `json:"AliUidAccount,omitempty" xml:"AliUidAccount,omitempty"`
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	// This parameter is required.
	SaleControlsShrink *string `json:"SaleControls,omitempty" xml:"SaleControls,omitempty"`
}

func (s CreateEnsSaleControlShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsSaleControlShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateEnsSaleControlShrinkRequest) SetAliUidAccount(v string) *CreateEnsSaleControlShrinkRequest {
	s.AliUidAccount = &v
	return s
}

func (s *CreateEnsSaleControlShrinkRequest) SetCommodityCode(v string) *CreateEnsSaleControlShrinkRequest {
	s.CommodityCode = &v
	return s
}

func (s *CreateEnsSaleControlShrinkRequest) SetCustomAccount(v string) *CreateEnsSaleControlShrinkRequest {
	s.CustomAccount = &v
	return s
}

func (s *CreateEnsSaleControlShrinkRequest) SetSaleControlsShrink(v string) *CreateEnsSaleControlShrinkRequest {
	s.SaleControlsShrink = &v
	return s
}

type CreateEnsSaleControlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEnsSaleControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsSaleControlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnsSaleControlResponseBody) SetRequestId(v string) *CreateEnsSaleControlResponseBody {
	s.RequestId = &v
	return s
}

type CreateEnsSaleControlResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEnsSaleControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEnsSaleControlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsSaleControlResponse) GoString() string {
	return s.String()
}

func (s *CreateEnsSaleControlResponse) SetHeaders(v map[string]*string) *CreateEnsSaleControlResponse {
	s.Headers = v
	return s
}

func (s *CreateEnsSaleControlResponse) SetStatusCode(v int32) *CreateEnsSaleControlResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEnsSaleControlResponse) SetBody(v *CreateEnsSaleControlResponseBody) *CreateEnsSaleControlResponse {
	s.Body = v
	return s
}

type CreateEnsServiceRequest struct {
	// The ID of the resource that you want to obtain. You can specify only one ID in a request.
	//
	// This parameter is required.
	//
	// example:
	//
	// ens-20190806****
	EnsServiceId *string `json:"EnsServiceId,omitempty" xml:"EnsServiceId,omitempty"`
	// The operation to perform after you preview the created edge service. Valid values:
	//
	// 	- **Buy**: create
	//
	// 	- **Upgrade**: change
	//
	// This parameter is required.
	//
	// example:
	//
	// Buy
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
}

func (s CreateEnsServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateEnsServiceRequest) SetEnsServiceId(v string) *CreateEnsServiceRequest {
	s.EnsServiceId = &v
	return s
}

func (s *CreateEnsServiceRequest) SetOrderType(v string) *CreateEnsServiceRequest {
	s.OrderType = &v
	return s
}

type CreateEnsServiceResponseBody struct {
	// The service code. 0 is returned for a successful request. An error code is returned for a failed request.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9AF02B43-2D08-49D3-8AAF-65B9C792ED14
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEnsServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnsServiceResponseBody) SetCode(v int32) *CreateEnsServiceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEnsServiceResponseBody) SetRequestId(v string) *CreateEnsServiceResponseBody {
	s.RequestId = &v
	return s
}

type CreateEnsServiceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEnsServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEnsServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnsServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateEnsServiceResponse) SetHeaders(v map[string]*string) *CreateEnsServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateEnsServiceResponse) SetStatusCode(v int32) *CreateEnsServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEnsServiceResponse) SetBody(v *CreateEnsServiceResponseBody) *CreateEnsServiceResponse {
	s.Body = v
	return s
}

type CreateEpnInstanceRequest struct {
	// The name of the EPN instance.
	//
	// example:
	//
	// test EPNInstanceName
	EPNInstanceName *string `json:"EPNInstanceName,omitempty" xml:"EPNInstanceName,omitempty"`
	// The type of the EPN instance. Set the value to **EdgeToEdge**.
	//
	// This parameter is required.
	//
	// example:
	//
	// EdgeToEdge
	EPNInstanceType *string `json:"EPNInstanceType,omitempty" xml:"EPNInstanceType,omitempty"`
	// The billing method for network usage. Valid values:
	//
	// 	- **BandwidthByDay**: Pay by daily peak bandwidth.
	//
	// 	- **95BandwidthByMonth**: Pay by monthly 95th percentile bandwidth.
	//
	// 	- **PayByBandwidth4thMonth**: Pay by monthly fourth peak bandwidth.
	//
	// 	- **PayByBandwidth**: Pay by fixed bandwidth.
	//
	// You can specify only one metering method for network usage and cannot overwrite the existing metering method.
	//
	// This parameter is required.
	//
	// example:
	//
	// BandwidthByDay
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 1 to 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	InternetMaxBandwidthOut *int32 `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	// The networking mode. Valid values:
	//
	// 	- **SpeedUp**: intelligent acceleration network (Internet)
	//
	// 	- **Connection**: internal network
	//
	// 	- **SpeedUpAndConnection**: intelligent acceleration network and internal network
	//
	// This parameter is required.
	//
	// example:
	//
	// SpeedUp
	NetworkingModel *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
}

func (s CreateEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateEpnInstanceRequest) SetEPNInstanceName(v string) *CreateEpnInstanceRequest {
	s.EPNInstanceName = &v
	return s
}

func (s *CreateEpnInstanceRequest) SetEPNInstanceType(v string) *CreateEpnInstanceRequest {
	s.EPNInstanceType = &v
	return s
}

func (s *CreateEpnInstanceRequest) SetInternetChargeType(v string) *CreateEpnInstanceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateEpnInstanceRequest) SetInternetMaxBandwidthOut(v int32) *CreateEpnInstanceRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *CreateEpnInstanceRequest) SetNetworkingModel(v string) *CreateEpnInstanceRequest {
	s.NetworkingModel = &v
	return s
}

type CreateEpnInstanceResponseBody struct {
	// The ID of the EPN instance.
	//
	// example:
	//
	// epn-xxxxx
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEpnInstanceResponseBody) SetEPNInstanceId(v string) *CreateEpnInstanceResponseBody {
	s.EPNInstanceId = &v
	return s
}

func (s *CreateEpnInstanceResponseBody) SetRequestId(v string) *CreateEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateEpnInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateEpnInstanceResponse) SetHeaders(v map[string]*string) *CreateEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateEpnInstanceResponse) SetStatusCode(v int32) *CreateEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEpnInstanceResponse) SetBody(v *CreateEpnInstanceResponseBody) *CreateEpnInstanceResponse {
	s.Body = v
	return s
}

type CreateFileSystemRequest struct {
	// The information about the orders.
	//
	// This parameter is required.
	OrderDetails []*CreateFileSystemRequestOrderDetails `json:"OrderDetails,omitempty" xml:"OrderDetails,omitempty" type:"Repeated"`
}

func (s CreateFileSystemRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileSystemRequest) GoString() string {
	return s.String()
}

func (s *CreateFileSystemRequest) SetOrderDetails(v []*CreateFileSystemRequestOrderDetails) *CreateFileSystemRequest {
	s.OrderDetails = v
	return s
}

type CreateFileSystemRequestOrderDetails struct {
	// The billing method of the NAS file system. Valid values:
	//
	// 	- PrePaid: subscription. This billing method is not supported.
	//
	// 	- PostPaid: pay-as-you-go.
	//
	// This parameter is required.
	//
	// example:
	//
	// PostPaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The ID of the edge node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-suzhou-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the file system. The name must be 1 to 80 characters in length and can contain letters, digits, hyphens (-), and underscores (_).
	//
	// This parameter is required.
	//
	// example:
	//
	// nasFile
	FileSystemName *string `json:"FileSystemName,omitempty" xml:"FileSystemName,omitempty"`
	// The name of the mount target. The name must be 1 to 80 characters in length and can contain letters, digits, hyphens (-), and underscores (_).
	//
	// This parameter is required.
	//
	// example:
	//
	// nasMount
	MountTargetDomain *string `json:"MountTargetDomain,omitempty" xml:"MountTargetDomain,omitempty"`
	// The ID of the VPC.
	//
	// This parameter is required.
	//
	// example:
	//
	// vpc-xxx
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The type of the order. Set the value to BUY.
	//
	// This parameter is required.
	//
	// example:
	//
	// BUY
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	// The storage protocol. Set the value to nfs.
	//
	// This parameter is required.
	//
	// example:
	//
	// nfs
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The storage type. Valid values:
	//
	// 	- Capacity.
	//
	// 	- Performance.
	//
	// This parameter is required.
	//
	// example:
	//
	// capacity
	StorgeType *string `json:"StorgeType,omitempty" xml:"StorgeType,omitempty"`
}

func (s CreateFileSystemRequestOrderDetails) String() string {
	return tea.Prettify(s)
}

func (s CreateFileSystemRequestOrderDetails) GoString() string {
	return s.String()
}

func (s *CreateFileSystemRequestOrderDetails) SetChargeType(v string) *CreateFileSystemRequestOrderDetails {
	s.ChargeType = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetEnsRegionId(v string) *CreateFileSystemRequestOrderDetails {
	s.EnsRegionId = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetFileSystemName(v string) *CreateFileSystemRequestOrderDetails {
	s.FileSystemName = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetMountTargetDomain(v string) *CreateFileSystemRequestOrderDetails {
	s.MountTargetDomain = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetNetworkId(v string) *CreateFileSystemRequestOrderDetails {
	s.NetworkId = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetOrderType(v string) *CreateFileSystemRequestOrderDetails {
	s.OrderType = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetProtocolType(v string) *CreateFileSystemRequestOrderDetails {
	s.ProtocolType = &v
	return s
}

func (s *CreateFileSystemRequestOrderDetails) SetStorgeType(v string) *CreateFileSystemRequestOrderDetails {
	s.StorgeType = &v
	return s
}

type CreateFileSystemShrinkRequest struct {
	// The information about the orders.
	//
	// This parameter is required.
	OrderDetailsShrink *string `json:"OrderDetails,omitempty" xml:"OrderDetails,omitempty"`
}

func (s CreateFileSystemShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFileSystemShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateFileSystemShrinkRequest) SetOrderDetailsShrink(v string) *CreateFileSystemShrinkRequest {
	s.OrderDetailsShrink = &v
	return s
}

type CreateFileSystemResponseBody struct {
	// The information about the file system that was created.
	AllocationId []*string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" type:"Repeated"`
	// The status code for successful operations. Valid values:
	//
	// 	- PartSuccess: The operation is partially successful.
	//
	// 	- AllSuccess: The operation is successful.
	//
	// example:
	//
	// PartSuccess
	BizStatusCode *string `json:"BizStatusCode,omitempty" xml:"BizStatusCode,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4EC47282-1B74-4534-BD0E-403F3EE64CAF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the file system that failed to be created.
	UnAllocationId []*string `json:"UnAllocationId,omitempty" xml:"UnAllocationId,omitempty" type:"Repeated"`
}

func (s CreateFileSystemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFileSystemResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFileSystemResponseBody) SetAllocationId(v []*string) *CreateFileSystemResponseBody {
	s.AllocationId = v
	return s
}

func (s *CreateFileSystemResponseBody) SetBizStatusCode(v string) *CreateFileSystemResponseBody {
	s.BizStatusCode = &v
	return s
}

func (s *CreateFileSystemResponseBody) SetRequestId(v string) *CreateFileSystemResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFileSystemResponseBody) SetUnAllocationId(v []*string) *CreateFileSystemResponseBody {
	s.UnAllocationId = v
	return s
}

type CreateFileSystemResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFileSystemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFileSystemResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFileSystemResponse) GoString() string {
	return s.String()
}

func (s *CreateFileSystemResponse) SetHeaders(v map[string]*string) *CreateFileSystemResponse {
	s.Headers = v
	return s
}

func (s *CreateFileSystemResponse) SetStatusCode(v int32) *CreateFileSystemResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFileSystemResponse) SetBody(v *CreateFileSystemResponseBody) *CreateFileSystemResponse {
	s.Body = v
	return s
}

type CreateForwardEntryRequest struct {
	// The elastic IP address (EIP) that is used to access the Internet.
	//
	// This parameter is required.
	//
	// example:
	//
	// 121.11.36.28
	ExternalIp *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	// The external port or port range that is used for port forwarding.
	//
	// 	- Valid values: 1 to 65535.
	//
	// 	- To specify a port range, separate the first port and the last port with a forward slash (/), such as 10/20.
	//
	// 	- If you set ExternalPort to a port range, you must also set InternalPort to a port range. The number of ports in the port ranges must be the same. For example, if you set ExternalPort to 10/20, you can set InternalPort to 80/90.
	//
	// This parameter is required.
	//
	// example:
	//
	// 22
	ExternalPort *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	// The name of the DNAT entry. The name must be 2 to 128 characters in length. The name cannot start with `http://` or `https://`.
	//
	// example:
	//
	// test0
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	// The probe port. The port must be within the internal port range. By default, this parameter is left empty.
	//
	// example:
	//
	// 80
	HealthCheckPort *int32 `json:"HealthCheckPort,omitempty" xml:"HealthCheckPort,omitempty"`
	// The private IP address of the instance that uses the DNAT entry for Internet communication.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10.0.0.13
	InternalIp *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	// The internal port or port range that is used for port forwarding.
	//
	// 	- Valid values: 1 to 65535.
	//
	// 	- To specify a port range, separate the first port and the last port with a forward slash (/), such as 10/20.
	//
	// This parameter is required.
	//
	// example:
	//
	// 22
	InternalPort *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	// The protocol. Valid values:
	//
	// 	- **TCP**: forwards TCP packets.
	//
	// 	- **UDP**: forwards UDP packets.
	//
	// 	- **Any*	- (default): forwards all packets.
	//
	// example:
	//
	// Any
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The ID of the Network Address Translation (NAT) gateway.
	//
	// This parameter is required.
	//
	// example:
	//
	// nat-5t7nh1cfm6kxiszlttr383xpo
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	// The secondary EIP that is used to access the Internet. You need to select a secondary EIP that is bound to NAT. After the DNAT entry is created, the secondary EIP takes effect.
	//
	// example:
	//
	// 101.XXX.XXX.4
	StandbyExternalIp *string `json:"StandbyExternalIp,omitempty" xml:"StandbyExternalIp,omitempty"`
}

func (s CreateForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryRequest) SetExternalIp(v string) *CreateForwardEntryRequest {
	s.ExternalIp = &v
	return s
}

func (s *CreateForwardEntryRequest) SetExternalPort(v string) *CreateForwardEntryRequest {
	s.ExternalPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetForwardEntryName(v string) *CreateForwardEntryRequest {
	s.ForwardEntryName = &v
	return s
}

func (s *CreateForwardEntryRequest) SetHealthCheckPort(v int32) *CreateForwardEntryRequest {
	s.HealthCheckPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetInternalIp(v string) *CreateForwardEntryRequest {
	s.InternalIp = &v
	return s
}

func (s *CreateForwardEntryRequest) SetInternalPort(v string) *CreateForwardEntryRequest {
	s.InternalPort = &v
	return s
}

func (s *CreateForwardEntryRequest) SetIpProtocol(v string) *CreateForwardEntryRequest {
	s.IpProtocol = &v
	return s
}

func (s *CreateForwardEntryRequest) SetNatGatewayId(v string) *CreateForwardEntryRequest {
	s.NatGatewayId = &v
	return s
}

func (s *CreateForwardEntryRequest) SetStandbyExternalIp(v string) *CreateForwardEntryRequest {
	s.StandbyExternalIp = &v
	return s
}

type CreateForwardEntryResponseBody struct {
	// The ID of the DNAT entry.
	//
	// example:
	//
	// fwd-5tc07cw14metghn3siv4ak8do
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// EF6D6FA4-DACA-5822-A981-81006271D263
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateForwardEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryResponseBody) SetForwardEntryId(v string) *CreateForwardEntryResponseBody {
	s.ForwardEntryId = &v
	return s
}

func (s *CreateForwardEntryResponseBody) SetRequestId(v string) *CreateForwardEntryResponseBody {
	s.RequestId = &v
	return s
}

type CreateForwardEntryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateForwardEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateForwardEntryResponse) SetHeaders(v map[string]*string) *CreateForwardEntryResponse {
	s.Headers = v
	return s
}

func (s *CreateForwardEntryResponse) SetStatusCode(v int32) *CreateForwardEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateForwardEntryResponse) SetBody(v *CreateForwardEntryResponseBody) *CreateForwardEntryResponse {
	s.Body = v
	return s
}

type CreateHaVipRequest struct {
	// example:
	//
	// 6
	Amount *int32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 120.24.243.91
	IpAddress *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	// example:
	//
	// yourName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// vsw-5****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateHaVipRequest) GoString() string {
	return s.String()
}

func (s *CreateHaVipRequest) SetAmount(v int32) *CreateHaVipRequest {
	s.Amount = &v
	return s
}

func (s *CreateHaVipRequest) SetDescription(v string) *CreateHaVipRequest {
	s.Description = &v
	return s
}

func (s *CreateHaVipRequest) SetIpAddress(v string) *CreateHaVipRequest {
	s.IpAddress = &v
	return s
}

func (s *CreateHaVipRequest) SetName(v string) *CreateHaVipRequest {
	s.Name = &v
	return s
}

func (s *CreateHaVipRequest) SetVSwitchId(v string) *CreateHaVipRequest {
	s.VSwitchId = &v
	return s
}

type CreateHaVipResponseBody struct {
	HaVipIds []*string `json:"HaVipIds,omitempty" xml:"HaVipIds,omitempty" type:"Repeated"`
	// example:
	//
	// AAE90880-4970-4D81-A534-A6C0F3631F74
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateHaVipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateHaVipResponseBody) GoString() string {
	return s.String()
}

func (s *CreateHaVipResponseBody) SetHaVipIds(v []*string) *CreateHaVipResponseBody {
	s.HaVipIds = v
	return s
}

func (s *CreateHaVipResponseBody) SetRequestId(v string) *CreateHaVipResponseBody {
	s.RequestId = &v
	return s
}

type CreateHaVipResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateHaVipResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateHaVipResponse) GoString() string {
	return s.String()
}

func (s *CreateHaVipResponse) SetHeaders(v map[string]*string) *CreateHaVipResponse {
	s.Headers = v
	return s
}

func (s *CreateHaVipResponse) SetStatusCode(v int32) *CreateHaVipResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateHaVipResponse) SetBody(v *CreateHaVipResponseBody) *CreateHaVipResponse {
	s.Body = v
	return s
}

type CreateImageRequest struct {
	// Specifies whether to automatically release the instance after the image is packaged and uploaded. Only image builders are supported. Default value: false. Valid values:
	//
	// 	- true: The image is released when the instance is released.
	//
	// 	- false: The image is retained when the instance is released.
	//
	// 	- If you leave this property empty, false is used by default.
	//
	// example:
	//
	// false
	DeleteAfterImageUpload *string `json:"DeleteAfterImageUpload,omitempty" xml:"DeleteAfterImageUpload,omitempty"`
	// The name of the image. The name must be 2 to 128 characters in length. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// This parameter is required.
	//
	// example:
	//
	// ImageName
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-5rr1bnyrc4tswr8cq3w6y****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// s-bp67acfmxazb4p****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The region of the target OSS where the image is to be stored.
	//
	// example:
	//
	// cn-beijing
	TargetOSSRegionId *string `json:"TargetOSSRegionId,omitempty" xml:"TargetOSSRegionId,omitempty"`
	WithDataDisks     *bool   `json:"WithDataDisks,omitempty" xml:"WithDataDisks,omitempty"`
}

func (s CreateImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateImageRequest) GoString() string {
	return s.String()
}

func (s *CreateImageRequest) SetDeleteAfterImageUpload(v string) *CreateImageRequest {
	s.DeleteAfterImageUpload = &v
	return s
}

func (s *CreateImageRequest) SetImageName(v string) *CreateImageRequest {
	s.ImageName = &v
	return s
}

func (s *CreateImageRequest) SetInstanceId(v string) *CreateImageRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateImageRequest) SetSnapshotId(v string) *CreateImageRequest {
	s.SnapshotId = &v
	return s
}

func (s *CreateImageRequest) SetTargetOSSRegionId(v string) *CreateImageRequest {
	s.TargetOSSRegionId = &v
	return s
}

func (s *CreateImageRequest) SetWithDataDisks(v bool) *CreateImageRequest {
	s.WithDataDisks = &v
	return s
}

type CreateImageResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// m-5xxgg
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 8BEF0D72-9901-5D43-B7D3-8B42AC26C516
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateImageResponseBody) GoString() string {
	return s.String()
}

func (s *CreateImageResponseBody) SetCode(v int32) *CreateImageResponseBody {
	s.Code = &v
	return s
}

func (s *CreateImageResponseBody) SetImageId(v string) *CreateImageResponseBody {
	s.ImageId = &v
	return s
}

func (s *CreateImageResponseBody) SetRequestId(v string) *CreateImageResponseBody {
	s.RequestId = &v
	return s
}

type CreateImageResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateImageResponse) GoString() string {
	return s.String()
}

func (s *CreateImageResponse) SetHeaders(v map[string]*string) *CreateImageResponse {
	s.Headers = v
	return s
}

func (s *CreateImageResponse) SetStatusCode(v int32) *CreateImageResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateImageResponse) SetBody(v *CreateImageResponseBody) *CreateImageResponse {
	s.Body = v
	return s
}

type CreateInstanceRequest struct {
	DataDisk   []*CreateInstanceRequestDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	SystemDisk *CreateInstanceRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	// Specifies whether to enable the auto-renewal feature. Valid values: **True*	- and **False**. Default value: False.
	//
	// example:
	//
	// True
	AutoRenew *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The auto-renewal period for the instance. This parameter is required when the **AutoRenew*	- parameter is set to **True**. Valid values: **1*	- to **12**. Unit: months.
	//
	// example:
	//
	// 12
	AutoRenewPeriod *string `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The hostname of the Elastic Compute Service (ECS) instance. General naming rules: The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
	//
	// Naming rules for specific instances:
	//
	// 	- For Windows instances, the hostname must be **2*	- to **15*	- characters in length and cannot contain periods (.) or contain only digits. The hostname cannot contain periods (.) or contain only digits.
	//
	// 	- For instances that run one of other operating systems such as Linux, the hostname must be **2*	- to **64*	- characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).
	//
	// example:
	//
	// test-HostName
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the image file that you select when creating the instance.
	//
	// example:
	//
	// yourImage ID
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the instance. The name must conform to the following naming conventions:
	//
	// 	- The name must be **2*	- to **128*	- characters in length.
	//
	// 	- It must start with a letter but cannot start with http:// or https://.
	//
	// 	- The name can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
	//
	// If you do not specify this parameter, the instance ID is used as the instance name by default.
	//
	// example:
	//
	// test:Instance_Name.1-2
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The type of the instance.
	//
	// For more information, see [](~~66124~~).
	//
	// This parameter is required.
	//
	// example:
	//
	// ens.se1.tiny
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// This parameter is required if you create the instance for the first time. The existing billing method is used by default if you have created an instance. Valid values:
	//
	// 	- **BandwidthByDay**: Pay by daily peak bandwidth.
	//
	// 	- **95BandwidthByMonth**: Pay by monthly 95th percentile bandwidth.
	//
	// example:
	//
	// 95BandwidthByMonth
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The type of the IP address. Valid values:
	//
	// 	- **ipv4*	- (default)
	//
	// 	- **ipv6**
	//
	// 	- **ipv4Andipv6**
	//
	// example:
	//
	// ipv4
	IpType *string `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// The name of the key pair. You can specify only one name.
	//
	// example:
	//
	// TestKeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The password of the instance.
	//
	// The password must be 8 to 30 characters in length and contain at least three of the following character types: uppercase letters, lowercase letters, digits, and special characters. Special characters include: ``()`~!@#$%^&*-_+=|{}[]:;\\"<>,.?/``
	//
	// example:
	//
	// yourPassword:1
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Specifies whether to use the preset password of the image. Valid values:
	//
	// - **true**: The password preset in the image is used, and the **Password*	- parameter must be null. For secure access, make sure that the selected image has a password configured.
	//
	// - **false**: does not use the password preset in the image.
	//
	// example:
	//
	// false
	PasswordInherit *bool `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	// The billing method of the instance. Set the value to Subscription.
	//
	// example:
	//
	// Subscription
	PaymentType *string `json:"PaymentType,omitempty" xml:"PaymentType,omitempty"`
	// The subscription period of the instance. Valid values: **1*	- to **9*	- and **12**. Unit: months.
	//
	// This parameter is required.
	//
	// example:
	//
	// 12
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The internal IP address. If this parameter is specified, you must specify the vSwitch ID. The vSwitch must be created first. Otherwise, an error is returned.
	//
	// example:
	//
	// 10.10.10.10
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	// Specifies whether a public IP address can be assigned to the specified instance. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	PublicIpIdentification *bool `json:"PublicIpIdentification,omitempty" xml:"PublicIpIdentification,omitempty"`
	// The number of instances.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Quantity *string `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
	// Specifies whether to automatically append sequential suffixes to the hostnames specified by the **HostName*	- parameter and instance names specified by the **InstanceName*	- parameter. The sequential suffixes range from **001*	- to **999**.
	//
	// Examples: **LocalHost001*	- and **LocalHost002**, and **MyInstance001*	- and **MyInstance002**.
	//
	// Default value: **false**.
	//
	// example:
	//
	// false
	UniqueSuffix *bool `json:"UniqueSuffix,omitempty" xml:"UniqueSuffix,omitempty"`
	// Custom data. The data starts with `#!`. The data can be at most 256 characters in length and 16 KB in size. Only custom scripts are supported and cannot be rendered by InstanceMetaData.
	//
	// You can specify custom data. The data is encoded in Base64. The system does not encrypt your custom data when API requests are initiated. We recommend that you do not pass in confidential information such as passwords and private keys in plaintext. If you want to provide sensitive data such as passwords and private keys, encrypt the data and then encode it in Base64. The data is decrypted on the instance in the way it is encrypted.
	//
	// For more information, see [User data formats](https://cloudinit.readthedocs.io/en/latest/topics/format.html).
	//
	// example:
	//
	// #!/bin/sh  echo "Hello World.  The time is now $(date -R)!" | tee /home/output.txt
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// YourVSwitchId
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequest) SetDataDisk(v []*CreateInstanceRequestDataDisk) *CreateInstanceRequest {
	s.DataDisk = v
	return s
}

func (s *CreateInstanceRequest) SetSystemDisk(v *CreateInstanceRequestSystemDisk) *CreateInstanceRequest {
	s.SystemDisk = v
	return s
}

func (s *CreateInstanceRequest) SetAutoRenew(v string) *CreateInstanceRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateInstanceRequest) SetAutoRenewPeriod(v string) *CreateInstanceRequest {
	s.AutoRenewPeriod = &v
	return s
}

func (s *CreateInstanceRequest) SetEnsRegionId(v string) *CreateInstanceRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateInstanceRequest) SetHostName(v string) *CreateInstanceRequest {
	s.HostName = &v
	return s
}

func (s *CreateInstanceRequest) SetImageId(v string) *CreateInstanceRequest {
	s.ImageId = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceName(v string) *CreateInstanceRequest {
	s.InstanceName = &v
	return s
}

func (s *CreateInstanceRequest) SetInstanceType(v string) *CreateInstanceRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateInstanceRequest) SetInternetChargeType(v string) *CreateInstanceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateInstanceRequest) SetIpType(v string) *CreateInstanceRequest {
	s.IpType = &v
	return s
}

func (s *CreateInstanceRequest) SetKeyPairName(v string) *CreateInstanceRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateInstanceRequest) SetOwnerId(v int64) *CreateInstanceRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateInstanceRequest) SetPassword(v string) *CreateInstanceRequest {
	s.Password = &v
	return s
}

func (s *CreateInstanceRequest) SetPasswordInherit(v bool) *CreateInstanceRequest {
	s.PasswordInherit = &v
	return s
}

func (s *CreateInstanceRequest) SetPaymentType(v string) *CreateInstanceRequest {
	s.PaymentType = &v
	return s
}

func (s *CreateInstanceRequest) SetPeriod(v string) *CreateInstanceRequest {
	s.Period = &v
	return s
}

func (s *CreateInstanceRequest) SetPrivateIpAddress(v string) *CreateInstanceRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *CreateInstanceRequest) SetPublicIpIdentification(v bool) *CreateInstanceRequest {
	s.PublicIpIdentification = &v
	return s
}

func (s *CreateInstanceRequest) SetQuantity(v string) *CreateInstanceRequest {
	s.Quantity = &v
	return s
}

func (s *CreateInstanceRequest) SetUniqueSuffix(v bool) *CreateInstanceRequest {
	s.UniqueSuffix = &v
	return s
}

func (s *CreateInstanceRequest) SetUserData(v string) *CreateInstanceRequest {
	s.UserData = &v
	return s
}

func (s *CreateInstanceRequest) SetVSwitchId(v string) *CreateInstanceRequest {
	s.VSwitchId = &v
	return s
}

type CreateInstanceRequestDataDisk struct {
	// The capacity of the first data disk. Unit: GiB. The capacity is at least 20 GiB and is a multiple of 10 GiB.
	//
	// example:
	//
	// 50
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s CreateInstanceRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestDataDisk) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestDataDisk) SetSize(v string) *CreateInstanceRequestDataDisk {
	s.Size = &v
	return s
}

type CreateInstanceRequestSystemDisk struct {
	// The size of the system disk. Unit: GiB. Valid values: **20*	- and **40**. The value cannot be smaller than the size of the image and must be a multiple of 10 GiB.
	//
	// example:
	//
	// 40
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s CreateInstanceRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *CreateInstanceRequestSystemDisk) SetSize(v string) *CreateInstanceRequestSystemDisk {
	s.Size = &v
	return s
}

type CreateInstanceResponseBody struct {
	// The return code. A value of 0 indicates that the request is successful.
	//
	// >  If you call this operation by using SDKs, the return value is of the integer type. If you call this operation by using common methods or HTTP requests, the return value is of the string type.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The IDs of instances.
	InstanceIds *CreateInstanceResponseBodyInstanceIds `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 4A431388-2D4B-46F4-A96B-D4E6BD0688C1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBody) SetCode(v int32) *CreateInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateInstanceResponseBody) SetInstanceIds(v *CreateInstanceResponseBodyInstanceIds) *CreateInstanceResponseBody {
	s.InstanceIds = v
	return s
}

func (s *CreateInstanceResponseBody) SetRequestId(v string) *CreateInstanceResponseBody {
	s.RequestId = &v
	return s
}

type CreateInstanceResponseBodyInstanceIds struct {
	InstanceId []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s CreateInstanceResponseBodyInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponseBodyInstanceIds) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponseBodyInstanceIds) SetInstanceId(v []*string) *CreateInstanceResponseBodyInstanceIds {
	s.InstanceId = v
	return s
}

type CreateInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceResponse) SetHeaders(v map[string]*string) *CreateInstanceResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceResponse) SetStatusCode(v int32) *CreateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceResponse) SetBody(v *CreateInstanceResponseBody) *CreateInstanceResponse {
	s.Body = v
	return s
}

type CreateInstanceActiveOpsTaskRequest struct {
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s CreateInstanceActiveOpsTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceActiveOpsTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceActiveOpsTaskRequest) SetInstanceIds(v []*string) *CreateInstanceActiveOpsTaskRequest {
	s.InstanceIds = v
	return s
}

type CreateInstanceActiveOpsTaskShrinkRequest struct {
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s CreateInstanceActiveOpsTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceActiveOpsTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateInstanceActiveOpsTaskShrinkRequest) SetInstanceIdsShrink(v string) *CreateInstanceActiveOpsTaskShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

type CreateInstanceActiveOpsTaskResponseBody struct {
	InstanceActiveOpsTask *InstanceActiveOpsTask `json:"InstanceActiveOpsTask,omitempty" xml:"InstanceActiveOpsTask,omitempty"`
	RequestId             *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateInstanceActiveOpsTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceActiveOpsTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInstanceActiveOpsTaskResponseBody) SetInstanceActiveOpsTask(v *InstanceActiveOpsTask) *CreateInstanceActiveOpsTaskResponseBody {
	s.InstanceActiveOpsTask = v
	return s
}

func (s *CreateInstanceActiveOpsTaskResponseBody) SetRequestId(v string) *CreateInstanceActiveOpsTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateInstanceActiveOpsTaskResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateInstanceActiveOpsTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateInstanceActiveOpsTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInstanceActiveOpsTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateInstanceActiveOpsTaskResponse) SetHeaders(v map[string]*string) *CreateInstanceActiveOpsTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateInstanceActiveOpsTaskResponse) SetStatusCode(v int32) *CreateInstanceActiveOpsTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateInstanceActiveOpsTaskResponse) SetBody(v *CreateInstanceActiveOpsTaskResponseBody) *CreateInstanceActiveOpsTaskResponse {
	s.Body = v
	return s
}

type CreateKeyPairRequest struct {
	// The name of the key pair. The name must conform to the following naming conventions:
	//
	// 	- The name must be 2 to 128 characters in length, and can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// 	- It must start with a letter but cannot start with `http://` or `https://`.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestKeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
}

func (s CreateKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairRequest) GoString() string {
	return s.String()
}

func (s *CreateKeyPairRequest) SetKeyPairName(v string) *CreateKeyPairRequest {
	s.KeyPairName = &v
	return s
}

type CreateKeyPairResponseBody struct {
	// The fingerprint of the key pair. The message-digest algorithm 5 (MD5) is used based on the public key fingerprint format defined in RFC 4716. For more information, see [RFC 4716](https://tools.ietf.org/html/rfc4716).
	//
	// example:
	//
	// 7880c1ad4687fdbf7a6da2131****
	KeyPairFingerPrint *string `json:"KeyPairFingerPrint,omitempty" xml:"KeyPairFingerPrint,omitempty"`
	// The ID of the SSH key pair.
	//
	// example:
	//
	// ssh-5lywanlkih1zo9yl8eg****
	KeyPairId *string `json:"KeyPairId,omitempty" xml:"KeyPairId,omitempty"`
	// The name of the key pair.
	//
	// example:
	//
	// TestKeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The private key of the key pair. The private key is encoded with PEM in the PKCS#8 format.
	//
	// example:
	//
	// -----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQE****
	PrivateKeyBody *string `json:"PrivateKeyBody,omitempty" xml:"PrivateKeyBody,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateKeyPairResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *CreateKeyPairResponseBody) SetKeyPairFingerPrint(v string) *CreateKeyPairResponseBody {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetKeyPairId(v string) *CreateKeyPairResponseBody {
	s.KeyPairId = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetKeyPairName(v string) *CreateKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetPrivateKeyBody(v string) *CreateKeyPairResponseBody {
	s.PrivateKeyBody = &v
	return s
}

func (s *CreateKeyPairResponseBody) SetRequestId(v string) *CreateKeyPairResponseBody {
	s.RequestId = &v
	return s
}

type CreateKeyPairResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateKeyPairResponse) GoString() string {
	return s.String()
}

func (s *CreateKeyPairResponse) SetHeaders(v map[string]*string) *CreateKeyPairResponse {
	s.Headers = v
	return s
}

func (s *CreateKeyPairResponse) SetStatusCode(v int32) *CreateKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateKeyPairResponse) SetBody(v *CreateKeyPairResponseBody) *CreateKeyPairResponse {
	s.Body = v
	return s
}

type CreateLoadBalancerRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-chengdu-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the ELB instance. The name must be 1 to 80 characters in length. If you leave this parameter empty, the system randomly allocates a name as the value of this parameter.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// example:
	//
	// gcs-pre-websocket-eslb-telecom
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	// The specification of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// elb.s2.medium
	LoadBalancerSpec *string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty"`
	// The network ID of the created ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// n-5sax03dh2eyagujgsn7z9****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The billing method of the cluster. Valid value: PostPaid. PostPaid specifies the pay-as-you-go billing method.
	//
	// This parameter is required.
	//
	// example:
	//
	// PostPaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The ID of the vSwitch to which the internal-facing ELB instance belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// vsw-5s78haoys9oylle6ln71m****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateLoadBalancerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerRequest) SetClientToken(v string) *CreateLoadBalancerRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetEnsRegionId(v string) *CreateLoadBalancerRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetLoadBalancerName(v string) *CreateLoadBalancerRequest {
	s.LoadBalancerName = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetLoadBalancerSpec(v string) *CreateLoadBalancerRequest {
	s.LoadBalancerSpec = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetNetworkId(v string) *CreateLoadBalancerRequest {
	s.NetworkId = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetPayType(v string) *CreateLoadBalancerRequest {
	s.PayType = &v
	return s
}

func (s *CreateLoadBalancerRequest) SetVSwitchId(v string) *CreateLoadBalancerRequest {
	s.VSwitchId = &v
	return s
}

type CreateLoadBalancerResponseBody struct {
	// The ID of the ELB instance.
	//
	// example:
	//
	// lb-5s7crik3yo3bp03gqrbp5****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The name of the ELB instance.
	//
	// example:
	//
	// gcs-pre-websocket-****
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-5sax03dh2eyagujgsn7z9****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1ECC937A-AE0E-4626-BE51-DED1D6D1C888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the vSwitch to which the ELB instance belongs.
	//
	// example:
	//
	// vsw-5savh5ngxh8sbj14bu7n****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateLoadBalancerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerResponseBody) SetLoadBalancerId(v string) *CreateLoadBalancerResponseBody {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadBalancerResponseBody) SetLoadBalancerName(v string) *CreateLoadBalancerResponseBody {
	s.LoadBalancerName = &v
	return s
}

func (s *CreateLoadBalancerResponseBody) SetNetworkId(v string) *CreateLoadBalancerResponseBody {
	s.NetworkId = &v
	return s
}

func (s *CreateLoadBalancerResponseBody) SetRequestId(v string) *CreateLoadBalancerResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLoadBalancerResponseBody) SetVSwitchId(v string) *CreateLoadBalancerResponseBody {
	s.VSwitchId = &v
	return s
}

type CreateLoadBalancerResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLoadBalancerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLoadBalancerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerResponse) SetHeaders(v map[string]*string) *CreateLoadBalancerResponse {
	s.Headers = v
	return s
}

func (s *CreateLoadBalancerResponse) SetStatusCode(v int32) *CreateLoadBalancerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLoadBalancerResponse) SetBody(v *CreateLoadBalancerResponseBody) *CreateLoadBalancerResponse {
	s.Body = v
	return s
}

type CreateLoadBalancerHTTPListenerRequest struct {
	// The port used by the backend ELB server of the ELB instance. Valid values: **1*	- to **65535**.
	//
	// example:
	//
	// 8080
	BackendServerPort *int32 `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	// The name of the listener. The value must be **1*	- to **80*	- characters in length.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// example:
	//
	// Monitoring instructions
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The listener port that is used to redirect HTTP requests to HTTPS.
	//
	// example:
	//
	// 0
	ForwardPort *int32 `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	// Specifies whether to enable the health check feature. Valid values:
	//
	// 	- **on**
	//
	// 	- **off*	- (default)
	//
	// This parameter is required.
	//
	// example:
	//
	// on
	HealthCheck *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	// The backend port that is used for health checks. Valid values: **1*	- to **65535**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 30040
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The domain name that you want to use for health checks.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// www.aliyundoc.com
	HealthCheckDomain *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	// The HTTP status code for a successful health check. Valid values:
	//
	// 	- **http_2xx*	- (default)
	//
	// 	- **http_3xx**
	//
	// 	- **http_4xx**
	//
	// 	- **http_5xx**
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// http_2xx
	HealthCheckHttpCode *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Default value: **2**. Unit: seconds.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 2
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The health check method used in HTTP health checks. Valid values:
	//
	// 	- **head*	- (default)
	//
	// 	- **get**
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// head
	HealthCheckMethod *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	// The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// 	- If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.
	//
	// example:
	//
	// 5
	HealthCheckTimeout *int32 `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	// The URI used for health checks. The URI must be **1*	- to **80*	- characters in length.
	//
	// >
	//
	// 	- A URL must start with a forward slash (`/`) but cannot contain only forward slashes (`/`).
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// /checkpreload.htm
	HealthCheckURI *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**. Default value: **3**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 3
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The timeout period for idle connections. Default value: 15. Valid values: **1*	- to **60**. Unit: seconds.
	//
	// >  If no request is received within the specified timeout period, ELB closes the connection. When a request is received, ELB creates a new connection.
	//
	// example:
	//
	// 15
	IdleTimeout *int32 `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// Specifies whether to enable HTTP-to-HTTPS redirection. Valid values:
	//
	// 	- **on**
	//
	// 	- **off*	- (default)
	//
	// example:
	//
	// off
	ListenerForward *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	// The listener port that is used by Edge Load Balancer (ELB) to receive requests and forward the requests to backend servers. Valid values: **1*	- to **65535**.
	//
	// >  We recommend that you use port 80 for HTTP.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8080
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5s7crik3yo3bp03gqrbp5****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The timeout period of a request. Default value: 60. Valid values: **1*	- to **180**. Unit: seconds.
	//
	// >  If no response is received from the backend server within the specified timeout period, ALB returns an HTTP 504 error code to the client.
	//
	// example:
	//
	// 60
	RequestTimeout *int32 `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	// The routing algorithm. Valid values:
	//
	// 	- **wrr**: Backend servers with higher weights receive more requests than backend servers with lower weights. This is the default value.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
	//
	// 	- **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**. Default value: **3**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 3
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
	// Specifies whether to use the X-Forwarded-For header to obtain the real IP address of the client. Valid values:
	//
	// 	- **on**
	//
	// 	- **off*	- (default)
	//
	// example:
	//
	// off
	XForwardedFor *string `json:"XForwardedFor,omitempty" xml:"XForwardedFor,omitempty"`
}

func (s CreateLoadBalancerHTTPListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPListenerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetBackendServerPort(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.BackendServerPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetDescription(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.Description = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetForwardPort(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.ForwardPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheck(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheck = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckConnectPort(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckDomain(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckHttpCode(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckInterval(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckMethod(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckMethod = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckTimeout(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthCheckURI(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetHealthyThreshold(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetIdleTimeout(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.IdleTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetListenerForward(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.ListenerForward = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetListenerPort(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetLoadBalancerId(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetRequestTimeout(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.RequestTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetScheduler(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.Scheduler = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetUnhealthyThreshold(v int32) *CreateLoadBalancerHTTPListenerRequest {
	s.UnhealthyThreshold = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerRequest) SetXForwardedFor(v string) *CreateLoadBalancerHTTPListenerRequest {
	s.XForwardedFor = &v
	return s
}

type CreateLoadBalancerHTTPListenerResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLoadBalancerHTTPListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPListenerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPListenerResponseBody) SetRequestId(v string) *CreateLoadBalancerHTTPListenerResponseBody {
	s.RequestId = &v
	return s
}

type CreateLoadBalancerHTTPListenerResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLoadBalancerHTTPListenerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLoadBalancerHTTPListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPListenerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPListenerResponse) SetHeaders(v map[string]*string) *CreateLoadBalancerHTTPListenerResponse {
	s.Headers = v
	return s
}

func (s *CreateLoadBalancerHTTPListenerResponse) SetStatusCode(v int32) *CreateLoadBalancerHTTPListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLoadBalancerHTTPListenerResponse) SetBody(v *CreateLoadBalancerHTTPListenerResponseBody) *CreateLoadBalancerHTTPListenerResponse {
	s.Body = v
	return s
}

type CreateLoadBalancerHTTPSListenerRequest struct {
	// The listening port that is used by the backend instances. Valid values: 1 to 65535.
	//
	// example:
	//
	// 8080
	BackendServerPort *int32 `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	// The cookie that is configured on the server. The cookie must be **1*	- to **200*	- characters in length and contain only ASCII characters and digits.
	//
	// >  This parameter is required if you set StickySession to on and StickySessionType to server.
	//
	// example:
	//
	// example
	Cookie *string `json:"Cookie,omitempty" xml:"Cookie,omitempty"`
	// The timeout period of a cookie. Valid values: **1*	- to **86400**. Unit: seconds.
	//
	// >  This parameter is required if you set StickySession to on and StickySessionType to insert.
	//
	// example:
	//
	// 100
	CookieTimeout *int32 `json:"CookieTimeout,omitempty" xml:"CookieTimeout,omitempty"`
	// The description of the listener. The description must be **1*	- to **80*	- characters in length.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// example:
	//
	// https_80
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The listener port that is used to redirect HTTP requests to HTTPS.
	//
	// example:
	//
	// 0
	ForwardPort *int32 `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	// Specifies whether to enable the health check feature. Valid values:
	//
	// 	- **on**
	//
	// 	- **off**
	//
	// This parameter is required.
	//
	// example:
	//
	// on
	HealthCheck *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 11
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The domain name that you want to use for health checks.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// example.com
	HealthCheckDomain *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	// The HTTP status code for a successful health check. Valid values:
	//
	// 	- **http_2xx*	- (default)
	//
	// 	- **http_3xx**
	//
	// 	- **http_4xx**
	//
	// 	- **http_5xx**
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// http_2xx
	HealthCheckHttpCode *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Default value: **2**. Unit: seconds.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 2
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The health check method used by HTTP listeners. Valid values:
	//
	// 	- **head*	- (default): requests the head of the page.
	//
	// 	- **get**: requests the specified part of the page and returns the entity body.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// head
	HealthCheckMethod *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	// The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails to pass the health check.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// 	- If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.
	//
	// example:
	//
	// 5
	HealthCheckTimeout *int32 `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	// The URI used for health checks. The URI must be **1*	- to **80*	- characters in length.
	//
	// >  A URL must start with a forward slash (`/`) but cannot contain only forward slashes (`/`).
	//
	// example:
	//
	// /checkpreload.htm
	HealthCheckURI *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**. Default value: **3**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 3
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The timeout period for idle connections. Default value: 15. Valid values: **1*	- to **60**. Unit: seconds.
	//
	// >  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, ELB establishes a new connection.
	//
	// example:
	//
	// 15
	IdleTimeout *int32 `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// Specifies whether to enable HTTP-to-HTTPS redirection. Valid values:
	//
	// 	- **on**
	//
	// 	- **off*	- (default)
	//
	// example:
	//
	// off
	ListenerForward *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	// The listening port that is used by Edge Load Balancer (ELB) to receive requests and forward the requests to backend servers. Valid values: **1*	- to **65535**.
	//
	// >  We recommend that you use port 443 for HTTPS.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8080
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5s8w63yydi59w7klaikam****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The timeout period of requests. Default value: 60. Valid values: **1*	- to **180**. Unit: seconds.
	//
	// >  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.
	//
	// example:
	//
	// 60
	RequestTimeout *int32 `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	// The routing algorithm. Valid values:
	//
	// 	- **wrr*	- (default): Backend servers with higher weights receive more requests than backend servers with lower weights.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
	//
	// 	- **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The ID of the server certificate.
	//
	// This parameter is required.
	//
	// example:
	//
	// 60276**
	ServerCertificateId *string `json:"ServerCertificateId,omitempty" xml:"ServerCertificateId,omitempty"`
	// The method that is used to handle a cookie. Valid values:
	//
	// 	- **insert**: inserts a cookie. ELB inserts a session cookie (SERVERID) into the first HTTP or HTTPS response that is sent to a client. Subsequent requests to ELB carry this cookie, and ELB determines the destination servers of the requests based on the cookies.
	//
	// 	- **server**: rewrites a cookie. When ELB detects a user-defined cookie, it overwrites the original cookie with the user-defined cookie. The next request from the client carries the user-defined cookie, and the listener forwards this request to the recorded backend server.
	//
	// >  This parameter is required if you set StickySession to on.
	//
	// example:
	//
	// insert
	StickySessionType *string `json:"StickySessionType,omitempty" xml:"StickySessionType,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**. Default value: **3**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 3
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s CreateLoadBalancerHTTPSListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPSListenerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetBackendServerPort(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.BackendServerPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetCookie(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.Cookie = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetCookieTimeout(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.CookieTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetDescription(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.Description = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetForwardPort(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.ForwardPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheck(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheck = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckConnectPort(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckDomain(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckHttpCode(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckInterval(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckMethod(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckMethod = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckTimeout(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthCheckURI(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetHealthyThreshold(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetIdleTimeout(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.IdleTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetListenerForward(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.ListenerForward = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetListenerPort(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetLoadBalancerId(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetRequestTimeout(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.RequestTimeout = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetScheduler(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.Scheduler = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetServerCertificateId(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.ServerCertificateId = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetStickySessionType(v string) *CreateLoadBalancerHTTPSListenerRequest {
	s.StickySessionType = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerRequest) SetUnhealthyThreshold(v int32) *CreateLoadBalancerHTTPSListenerRequest {
	s.UnhealthyThreshold = &v
	return s
}

type CreateLoadBalancerHTTPSListenerResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLoadBalancerHTTPSListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPSListenerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPSListenerResponseBody) SetRequestId(v string) *CreateLoadBalancerHTTPSListenerResponseBody {
	s.RequestId = &v
	return s
}

type CreateLoadBalancerHTTPSListenerResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLoadBalancerHTTPSListenerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLoadBalancerHTTPSListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerHTTPSListenerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerHTTPSListenerResponse) SetHeaders(v map[string]*string) *CreateLoadBalancerHTTPSListenerResponse {
	s.Headers = v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerResponse) SetStatusCode(v int32) *CreateLoadBalancerHTTPSListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLoadBalancerHTTPSListenerResponse) SetBody(v *CreateLoadBalancerHTTPSListenerResponseBody) *CreateLoadBalancerHTTPSListenerResponse {
	s.Body = v
	return s
}

type CreateLoadBalancerTCPListenerRequest struct {
	// The port used by the backend ELB server of the ELB instance. Valid values: **1*	- to **65535**.
	//
	// example:
	//
	// 8080
	BackendServerPort *int32 `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	// The name of the listener. The value must be **1*	- to **80*	- characters in length.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// example:
	//
	// example
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable Elastic IP address (EIP) pass-through. Valid values:
	//
	// 	- **on**
	//
	// 	- **off*	- (default)
	//
	// example:
	//
	// on
	EipTransmit *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	// The timeout period of a connection. Valid values: **10*	- to **900**. Default value: **900**. Unit: seconds.
	//
	// example:
	//
	// 500
	EstablishedTimeout *int32 `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If you leave this parameter empty, the port specified for BackendServerPort is used for health checks.
	//
	// example:
	//
	// 8080
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >  If the value of the HealthCheckConnectTimeout parameter is smaller than that of the HealthCheckInterval parameter, the timeout period specified by the HealthCheckConnectTimeout parameter is ignored and the period of time specified by the HealthCheckInterval parameter is used as the timeout period.
	//
	// example:
	//
	// 100
	HealthCheckConnectTimeout *int32 `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	// The domain name that you want to use for health checks.
	//
	// example:
	//
	// www.aliyundoc.com
	HealthCheckDomain *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	// The HTTP status codes for a successful health check. Valid values:
	//
	// 	- **http_2xx*	- (default)
	//
	// 	- **http_3xx**.
	//
	// 	- **http_4xx**
	//
	// 	- **http_5xx**
	//
	// example:
	//
	// http_2xx
	HealthCheckHttpCode *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Default value: **2**. Unit: seconds.
	//
	// example:
	//
	// 3
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The type of health checks. Valid values:
	//
	// 	- **tcp*	- (default)
	//
	// 	- **http**
	//
	// example:
	//
	// tcp
	HealthCheckType *string `json:"HealthCheckType,omitempty" xml:"HealthCheckType,omitempty"`
	// The Uniform Resource Identifier (URI) that you want to use for health checks. The URI must be **1*	- to **80*	- characters in length.
	//
	// >  The URL must start with `/` and contain characters other than `/`.
	//
	// example:
	//
	// /checkpreload.htm
	HealthCheckURI *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**. Default value: **3**.
	//
	// example:
	//
	// 4
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The listener port that is used by Edge Load Balancer (ELB) to receive requests and forward the requests to backend servers. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5ovkn1piwqmoqrfjdyhq4****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The timeout period of session persistence.
	//
	// 	- Default value: 0. If the default value is used, the system disables session persistence.
	//
	// 	- Valid values: **0*	- to **3600**.
	//
	// 	- Unit: seconds.
	//
	// example:
	//
	// 0
	PersistenceTimeout *int32 `json:"PersistenceTimeout,omitempty" xml:"PersistenceTimeout,omitempty"`
	// The scheduling algorithm. Valid values:
	//
	// 	- **wrr*	- (default): Backend servers with higher weights receive more requests than backend servers with lower weights.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
	//
	// 	- **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**. Default value: **3**.
	//
	// example:
	//
	// 4
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s CreateLoadBalancerTCPListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerTCPListenerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerTCPListenerRequest) SetBackendServerPort(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.BackendServerPort = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetDescription(v string) *CreateLoadBalancerTCPListenerRequest {
	s.Description = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetEipTransmit(v string) *CreateLoadBalancerTCPListenerRequest {
	s.EipTransmit = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetEstablishedTimeout(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.EstablishedTimeout = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckConnectPort(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckConnectTimeout(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckDomain(v string) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckHttpCode(v string) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckInterval(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckType(v string) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckType = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthCheckURI(v string) *CreateLoadBalancerTCPListenerRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetHealthyThreshold(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetListenerPort(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetLoadBalancerId(v string) *CreateLoadBalancerTCPListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetPersistenceTimeout(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.PersistenceTimeout = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetScheduler(v string) *CreateLoadBalancerTCPListenerRequest {
	s.Scheduler = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerRequest) SetUnhealthyThreshold(v int32) *CreateLoadBalancerTCPListenerRequest {
	s.UnhealthyThreshold = &v
	return s
}

type CreateLoadBalancerTCPListenerResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 06F00FBB-3D9E-4CCE-9D43-1A6946A75456
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLoadBalancerTCPListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerTCPListenerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerTCPListenerResponseBody) SetRequestId(v string) *CreateLoadBalancerTCPListenerResponseBody {
	s.RequestId = &v
	return s
}

type CreateLoadBalancerTCPListenerResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLoadBalancerTCPListenerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLoadBalancerTCPListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerTCPListenerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerTCPListenerResponse) SetHeaders(v map[string]*string) *CreateLoadBalancerTCPListenerResponse {
	s.Headers = v
	return s
}

func (s *CreateLoadBalancerTCPListenerResponse) SetStatusCode(v int32) *CreateLoadBalancerTCPListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLoadBalancerTCPListenerResponse) SetBody(v *CreateLoadBalancerTCPListenerResponseBody) *CreateLoadBalancerTCPListenerResponse {
	s.Body = v
	return s
}

type CreateLoadBalancerUDPListenerRequest struct {
	// The port used by the backend ELB server of the ELB instance. Valid values: **1*	- to **65535**.
	//
	// example:
	//
	// 8080
	BackendServerPort *int32 `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	// The name of the listener. The value must be **1*	- to **80*	- characters in length.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// example:
	//
	// example
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable Elastic IP address (EIP) pass-through. Valid values:
	//
	// 	- **on**
	//
	// 	- **off*	- (default)
	//
	// example:
	//
	// on
	EipTransmit *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	// The timeout period of a connection. Valid values: **10*	- to **900**. Default value: **900**. Unit: seconds.
	//
	// example:
	//
	// 500
	EstablishedTimeout *int32 `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.
	//
	// example:
	//
	// 8080
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The timeout period for a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >  If the value of the HealthCheckConnectTimeout parameter is smaller than that of the HealthCheckInterval parameter, the timeout period specified by the HealthCheckConnectTimeout parameter becomes invalid and the value of the HealthCheckInterval parameter is used as the timeout period.
	//
	// example:
	//
	// 100
	HealthCheckConnectTimeout *int32 `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	// The response string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.
	//
	// example:
	//
	// ok
	HealthCheckExp *string `json:"HealthCheckExp,omitempty" xml:"HealthCheckExp,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Default value: **2**. Unit: seconds.
	//
	// example:
	//
	// 3
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The request string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.
	//
	// example:
	//
	// hello
	HealthCheckReq *string `json:"HealthCheckReq,omitempty" xml:"HealthCheckReq,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**. Default value: **3**.
	//
	// example:
	//
	// 4
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The listener port that is used by Edge Load Balancer (ELB) to receive requests and forward the requests to backend servers. Valid values: **1*	- to **65535**.
	//
	// >  You cannot specify ports 250, 4789, or 4790 for UDP listeners. They are system reserved ports.
	//
	// This parameter is required.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5q73cv04zeyh43lh74lp4****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The scheduling algorithm. Valid values:
	//
	// 	- **wrr**: Backend servers with higher weights receive more requests than backend servers with lower weights. This is the default value.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: Consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: Consistent hashing based on Quick UDP Internet Connection (QUIC) IDs. Requests that contain the same QUIC ID are scheduled to the same backend server.
	//
	// 	- **iqch**: Consistent hashing based on three specific bytes of iQUIC CID. Requests with the same second, third, and forth bytes are scheduled to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**. Default value: **3**.
	//
	// example:
	//
	// 4
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s CreateLoadBalancerUDPListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerUDPListenerRequest) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerUDPListenerRequest) SetBackendServerPort(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.BackendServerPort = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetDescription(v string) *CreateLoadBalancerUDPListenerRequest {
	s.Description = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetEipTransmit(v string) *CreateLoadBalancerUDPListenerRequest {
	s.EipTransmit = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetEstablishedTimeout(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.EstablishedTimeout = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthCheckConnectPort(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthCheckConnectTimeout(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthCheckExp(v string) *CreateLoadBalancerUDPListenerRequest {
	s.HealthCheckExp = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthCheckInterval(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthCheckReq(v string) *CreateLoadBalancerUDPListenerRequest {
	s.HealthCheckReq = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetHealthyThreshold(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetListenerPort(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetLoadBalancerId(v string) *CreateLoadBalancerUDPListenerRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetScheduler(v string) *CreateLoadBalancerUDPListenerRequest {
	s.Scheduler = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerRequest) SetUnhealthyThreshold(v int32) *CreateLoadBalancerUDPListenerRequest {
	s.UnhealthyThreshold = &v
	return s
}

type CreateLoadBalancerUDPListenerResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 06F00FBB-3D9E-4CCE-9D43-1A6946A75456
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateLoadBalancerUDPListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerUDPListenerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerUDPListenerResponseBody) SetRequestId(v string) *CreateLoadBalancerUDPListenerResponseBody {
	s.RequestId = &v
	return s
}

type CreateLoadBalancerUDPListenerResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLoadBalancerUDPListenerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLoadBalancerUDPListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLoadBalancerUDPListenerResponse) GoString() string {
	return s.String()
}

func (s *CreateLoadBalancerUDPListenerResponse) SetHeaders(v map[string]*string) *CreateLoadBalancerUDPListenerResponse {
	s.Headers = v
	return s
}

func (s *CreateLoadBalancerUDPListenerResponse) SetStatusCode(v int32) *CreateLoadBalancerUDPListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLoadBalancerUDPListenerResponse) SetBody(v *CreateLoadBalancerUDPListenerResponseBody) *CreateLoadBalancerUDPListenerResponse {
	s.Body = v
	return s
}

type CreateMountTargetRequest struct {
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the file system.
	//
	// This parameter is required.
	//
	// example:
	//
	// c50f8*****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// The name of the mount target.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestMountPath
	MountTargetName *string `json:"MountTargetName,omitempty" xml:"MountTargetName,omitempty"`
	// The ID of the network.
	//
	// This parameter is required.
	//
	// example:
	//
	// n-*****
	NetWorkId *string `json:"NetWorkId,omitempty" xml:"NetWorkId,omitempty"`
}

func (s CreateMountTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMountTargetRequest) GoString() string {
	return s.String()
}

func (s *CreateMountTargetRequest) SetEnsRegionId(v string) *CreateMountTargetRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateMountTargetRequest) SetFileSystemId(v string) *CreateMountTargetRequest {
	s.FileSystemId = &v
	return s
}

func (s *CreateMountTargetRequest) SetMountTargetName(v string) *CreateMountTargetRequest {
	s.MountTargetName = &v
	return s
}

func (s *CreateMountTargetRequest) SetNetWorkId(v string) *CreateMountTargetRequest {
	s.NetWorkId = &v
	return s
}

type CreateMountTargetResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 70EACC9C-D07A-4A34-ADA4-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The state of the mount target. Valid values:
	//
	// 	- active
	//
	// 	- inactive
	//
	// 	- pending
	//
	// 	- deleting
	//
	// example:
	//
	// pending
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateMountTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMountTargetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMountTargetResponseBody) SetRequestId(v string) *CreateMountTargetResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMountTargetResponseBody) SetStatus(v string) *CreateMountTargetResponseBody {
	s.Status = &v
	return s
}

type CreateMountTargetResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMountTargetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMountTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMountTargetResponse) GoString() string {
	return s.String()
}

func (s *CreateMountTargetResponse) SetHeaders(v map[string]*string) *CreateMountTargetResponse {
	s.Headers = v
	return s
}

func (s *CreateMountTargetResponse) SetStatusCode(v int32) *CreateMountTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMountTargetResponse) SetBody(v *CreateMountTargetResponseBody) *CreateMountTargetResponse {
	s.Body = v
	return s
}

type CreateNatGatewayRequest struct {
	// The ID of the Edge Node Service (ENS) node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-suzhou-telecom
	EnsRegionId          *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	InstanceBillingCycle *string `json:"InstanceBillingCycle,omitempty" xml:"InstanceBillingCycle,omitempty"`
	// The instance type of the NAT gateway. Set the value to **enat.default**.
	//
	// example:
	//
	// enat.default
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The name of the NAT gateway. The name must be 1 to 128 characters in length. The name cannot start with `http://` or `https://`.
	//
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the network.
	//
	// This parameter is required.
	//
	// example:
	//
	// n-5qj7ykuxmjn7k96l090sp****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The tags.
	Tag []*CreateNatGatewayRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5savh5ngxh8sbj14bu7n****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateNatGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayRequest) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayRequest) SetEnsRegionId(v string) *CreateNatGatewayRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetInstanceBillingCycle(v string) *CreateNatGatewayRequest {
	s.InstanceBillingCycle = &v
	return s
}

func (s *CreateNatGatewayRequest) SetInstanceType(v string) *CreateNatGatewayRequest {
	s.InstanceType = &v
	return s
}

func (s *CreateNatGatewayRequest) SetName(v string) *CreateNatGatewayRequest {
	s.Name = &v
	return s
}

func (s *CreateNatGatewayRequest) SetNetworkId(v string) *CreateNatGatewayRequest {
	s.NetworkId = &v
	return s
}

func (s *CreateNatGatewayRequest) SetTag(v []*CreateNatGatewayRequestTag) *CreateNatGatewayRequest {
	s.Tag = v
	return s
}

func (s *CreateNatGatewayRequest) SetVSwitchId(v string) *CreateNatGatewayRequest {
	s.VSwitchId = &v
	return s
}

type CreateNatGatewayRequestTag struct {
	// The key of tag N of the instance. Valid values of N: **1*	- to **20**.
	//
	// 	- The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
	//
	// 	- The key must be up to 64 characters in length.
	//
	// 	- The tag key cannot be an empty string.
	//
	// example:
	//
	// team
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N that is added to the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain http:// or https://.
	//
	// example:
	//
	// Deep
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateNatGatewayRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayRequestTag) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayRequestTag) SetKey(v string) *CreateNatGatewayRequestTag {
	s.Key = &v
	return s
}

func (s *CreateNatGatewayRequestTag) SetValue(v string) *CreateNatGatewayRequestTag {
	s.Value = &v
	return s
}

type CreateNatGatewayResponseBody struct {
	// The ID of the NAT gateway.
	//
	// example:
	//
	// nat-5t7nh1cfm6kxiszlttr38****
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNatGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponseBody) SetNatGatewayId(v string) *CreateNatGatewayResponseBody {
	s.NatGatewayId = &v
	return s
}

func (s *CreateNatGatewayResponseBody) SetRequestId(v string) *CreateNatGatewayResponseBody {
	s.RequestId = &v
	return s
}

type CreateNatGatewayResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNatGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNatGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNatGatewayResponse) GoString() string {
	return s.String()
}

func (s *CreateNatGatewayResponse) SetHeaders(v map[string]*string) *CreateNatGatewayResponse {
	s.Headers = v
	return s
}

func (s *CreateNatGatewayResponse) SetStatusCode(v int32) *CreateNatGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNatGatewayResponse) SetBody(v *CreateNatGatewayResponseBody) *CreateNatGatewayResponse {
	s.Body = v
	return s
}

type CreateNetworkRequest struct {
	// The CIDR block of the network. You can use one of the following CIDR blocks or their subnets as the CIDR block of the network:
	//
	// 	- 10.0.0.0/8 (default)
	//
	// 	- 172.16.0.0/12
	//
	// 	- 192.168.0.0/16
	//
	// This parameter is required.
	//
	// example:
	//
	// 192.168.0.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The description of the network.
	//
	// The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	//
	// example:
	//
	// this is my first network
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the edge node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the network. The name must meet the following requirements:
	//
	// 	- The name must be 2 to 128 characters in length.
	//
	// 	- The name must start with a letter but cannot start with http:// or https://.
	//
	// 	- The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// abc
	NetworkName *string `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
	// The resource tags.
	Tag []*CreateNetworkRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkRequest) SetCidrBlock(v string) *CreateNetworkRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateNetworkRequest) SetDescription(v string) *CreateNetworkRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkRequest) SetEnsRegionId(v string) *CreateNetworkRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateNetworkRequest) SetNetworkName(v string) *CreateNetworkRequest {
	s.NetworkName = &v
	return s
}

func (s *CreateNetworkRequest) SetTag(v []*CreateNetworkRequestTag) *CreateNetworkRequest {
	s.Tag = v
	return s
}

type CreateNetworkRequestTag struct {
	// The key of the tag that are to add to the instance. Valid values of N: **1*	- to **20**.
	//
	// 	- The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
	//
	// 	- The key must be up to 64 characters in length.
	//
	// 	- The tag key cannot be an empty string.
	//
	// example:
	//
	// key1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N that is added to the resource. You can specify up to 20 tag values. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain http:// or https://.
	//
	// example:
	//
	// tagValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateNetworkRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkRequestTag) GoString() string {
	return s.String()
}

func (s *CreateNetworkRequestTag) SetKey(v string) *CreateNetworkRequestTag {
	s.Key = &v
	return s
}

func (s *CreateNetworkRequestTag) SetValue(v string) *CreateNetworkRequestTag {
	s.Value = &v
	return s
}

type CreateNetworkResponseBody struct {
	// The ID of the network.
	//
	// example:
	//
	// n-5***
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkResponseBody) SetNetworkId(v string) *CreateNetworkResponseBody {
	s.NetworkId = &v
	return s
}

func (s *CreateNetworkResponseBody) SetRequestId(v string) *CreateNetworkResponseBody {
	s.RequestId = &v
	return s
}

type CreateNetworkResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkResponse) SetHeaders(v map[string]*string) *CreateNetworkResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkResponse) SetStatusCode(v int32) *CreateNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkResponse) SetBody(v *CreateNetworkResponseBody) *CreateNetworkResponse {
	s.Body = v
	return s
}

type CreateNetworkAclRequest struct {
	// The description of the network ACL.
	//
	// The description must be 1 to 256 characters in length and cannot start with http:// or https://.
	//
	// example:
	//
	// This is my NetworkAcl.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Enter a name for the network ACL.
	//
	// The name must be 1 to 128 characters in length and cannot start with http:// or https://.
	//
	// example:
	//
	// acl-1
	NetworkAclName *string `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
}

func (s CreateNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclRequest) SetDescription(v string) *CreateNetworkAclRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkAclRequest) SetNetworkAclName(v string) *CreateNetworkAclRequest {
	s.NetworkAclName = &v
	return s
}

type CreateNetworkAclResponseBody struct {
	// The ID of the network ACL.
	//
	// example:
	//
	// nacl-5p1fg655nh68xyz9i****
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNetworkAclResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponseBody) SetNetworkAclId(v string) *CreateNetworkAclResponseBody {
	s.NetworkAclId = &v
	return s
}

func (s *CreateNetworkAclResponseBody) SetRequestId(v string) *CreateNetworkAclResponseBody {
	s.RequestId = &v
	return s
}

type CreateNetworkAclResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNetworkAclResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclResponse) SetHeaders(v map[string]*string) *CreateNetworkAclResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkAclResponse) SetStatusCode(v int32) *CreateNetworkAclResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkAclResponse) SetBody(v *CreateNetworkAclResponseBody) *CreateNetworkAclResponse {
	s.Body = v
	return s
}

type CreateNetworkAclEntryRequest struct {
	// The source CIDR block.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10.0.0.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The description of the network ACL.
	//
	// The description must be 1 to 256 characters in length and cannot start with http:// or https://.
	//
	// example:
	//
	// This is my NetworkAcl.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether the ACL rule controls inbound or outbound access requests. Valid values:
	//
	// 	- **ingress**
	//
	// 	- **egress**
	//
	// This parameter is required.
	//
	// example:
	//
	// ingress
	Direction *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	// The name of the rule.
	//
	// The name must be 1 to 128 characters in length and cannot start with http:// or https://.
	//
	// example:
	//
	// acl-1
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty"`
	// The ID of the network ACL.
	//
	// This parameter is required.
	//
	// example:
	//
	// nacl-bp1lhl0taikrbgnh****
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	// The action that is performed on network traffic that matches the rule. Valid values:
	//
	// 	- **accept**: allows network traffic.
	//
	// 	- **drop**: blocks network traffic.
	//
	// This parameter is required.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The port range.
	//
	// 	- If you set **Protocol*	- to **all*	- or **icmp**, set this parameter to -1/-1, which specifies all ports.
	//
	// 	- If you set **Protocol*	- to **tcp*	- or **udp**, the port can be **1 to 65535**. You can set this parameter to **1/200*	- or **80/80**, which specifies ports 1 to 200 or port 80.
	//
	// This parameter is required.
	//
	// example:
	//
	// -1/-1
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of the rule. Valid values: **1 to 100**. Default value: **1**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The protocol. Valid values:
	//
	// 	- **icmp**: ICMP
	//
	// 	- **tcp**: TCP
	//
	// 	- **udp**: UDP
	//
	// 	- **all**: all protocols
	//
	// This parameter is required.
	//
	// example:
	//
	// all
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
}

func (s CreateNetworkAclEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclEntryRequest) SetCidrBlock(v string) *CreateNetworkAclEntryRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetDescription(v string) *CreateNetworkAclEntryRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetDirection(v string) *CreateNetworkAclEntryRequest {
	s.Direction = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetNetworkAclEntryName(v string) *CreateNetworkAclEntryRequest {
	s.NetworkAclEntryName = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetNetworkAclId(v string) *CreateNetworkAclEntryRequest {
	s.NetworkAclId = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetPolicy(v string) *CreateNetworkAclEntryRequest {
	s.Policy = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetPortRange(v string) *CreateNetworkAclEntryRequest {
	s.PortRange = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetPriority(v int32) *CreateNetworkAclEntryRequest {
	s.Priority = &v
	return s
}

func (s *CreateNetworkAclEntryRequest) SetProtocol(v string) *CreateNetworkAclEntryRequest {
	s.Protocol = &v
	return s
}

type CreateNetworkAclEntryResponseBody struct {
	// The ID of the network ACL.
	//
	// example:
	//
	// nae-5****
	NetworkAclEntryId *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNetworkAclEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclEntryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclEntryResponseBody) SetNetworkAclEntryId(v string) *CreateNetworkAclEntryResponseBody {
	s.NetworkAclEntryId = &v
	return s
}

func (s *CreateNetworkAclEntryResponseBody) SetRequestId(v string) *CreateNetworkAclEntryResponseBody {
	s.RequestId = &v
	return s
}

type CreateNetworkAclEntryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNetworkAclEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNetworkAclEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkAclEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkAclEntryResponse) SetHeaders(v map[string]*string) *CreateNetworkAclEntryResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkAclEntryResponse) SetStatusCode(v int32) *CreateNetworkAclEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkAclEntryResponse) SetBody(v *CreateNetworkAclEntryResponseBody) *CreateNetworkAclEntryResponse {
	s.Body = v
	return s
}

type CreateNetworkInterfaceRequest struct {
	// example:
	//
	// example
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	SecurityGroupIds []*string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Repeated"`
	// example:
	//
	// vsw-5****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceRequest) SetDescription(v string) *CreateNetworkInterfaceRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetName(v string) *CreateNetworkInterfaceRequest {
	s.Name = &v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetSecurityGroupIds(v []*string) *CreateNetworkInterfaceRequest {
	s.SecurityGroupIds = v
	return s
}

func (s *CreateNetworkInterfaceRequest) SetVSwitchId(v string) *CreateNetworkInterfaceRequest {
	s.VSwitchId = &v
	return s
}

type CreateNetworkInterfaceShrinkRequest struct {
	// example:
	//
	// example
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	SecurityGroupIdsShrink *string `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty"`
	// example:
	//
	// vsw-5****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateNetworkInterfaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceShrinkRequest) SetDescription(v string) *CreateNetworkInterfaceShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateNetworkInterfaceShrinkRequest) SetName(v string) *CreateNetworkInterfaceShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateNetworkInterfaceShrinkRequest) SetSecurityGroupIdsShrink(v string) *CreateNetworkInterfaceShrinkRequest {
	s.SecurityGroupIdsShrink = &v
	return s
}

func (s *CreateNetworkInterfaceShrinkRequest) SetVSwitchId(v string) *CreateNetworkInterfaceShrinkRequest {
	s.VSwitchId = &v
	return s
}

type CreateNetworkInterfaceResponseBody struct {
	NetworkInterfaceIds []*string `json:"NetworkInterfaceIds,omitempty" xml:"NetworkInterfaceIds,omitempty" type:"Repeated"`
	// example:
	//
	// F3B261DD-3858-4D3C-877D-303ADF374600
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNetworkInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceResponseBody) SetNetworkInterfaceIds(v []*string) *CreateNetworkInterfaceResponseBody {
	s.NetworkInterfaceIds = v
	return s
}

func (s *CreateNetworkInterfaceResponseBody) SetRequestId(v string) *CreateNetworkInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type CreateNetworkInterfaceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNetworkInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkInterfaceResponse) SetHeaders(v map[string]*string) *CreateNetworkInterfaceResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkInterfaceResponse) SetStatusCode(v int32) *CreateNetworkInterfaceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkInterfaceResponse) SetBody(v *CreateNetworkInterfaceResponseBody) *CreateNetworkInterfaceResponse {
	s.Body = v
	return s
}

type CreateSDGRequest struct {
	// The description of the SDG.
	//
	// >  We recommend that you specify this parameter in details for subsequent queries.
	//
	// example:
	//
	// Testing SDGs
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the SDG from which you want to create an SDG.
	//
	// >
	//
	// 	- The first time you create an SDG, the **FromSDGId*	- parameter is empty.
	//
	// 	- If the value of the **FromSDGId*	- parameter is invalid or does not correspond to an original disk, an error is reported.
	//
	// 	- If the value of the **FromSDGId*	- parameter is not empty, you have created an SDG, and the operation is performed on the existing SDG.
	//
	// example:
	//
	// sdg-xxxxx
	FromSDGId *string `json:"FromSDGId,omitempty" xml:"FromSDGId,omitempty"`
	// The ID of the AIC instance. You can call the [DescribeARMServerInstances](~~DescribeARMServerInstances~~) operation to query the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// aic-xxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The maximum capacity of the SDG. Unit: GB.
	//
	// >
	//
	// 	- To save costs, we recommend that you specify this parameter based on your business requirements.
	//
	// 	- The first time that you create an SDG, the **Size*	- parameter is required.
	//
	// 	- When the amount of data increases, you can pass a new **Size*	- parameter for resizing. If the value of the new **Size*	- parameter is greater than the value of the old **Size*	- parameter, the disk size of the SDG is increased to the size that is specified by the new **Size*	- parameter. If the value of the new **Size*	- parameter is empty or smaller than that of the old **Size*	- parameter, no operation is performed.
	//
	// example:
	//
	// 20
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s CreateSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSDGRequest) GoString() string {
	return s.String()
}

func (s *CreateSDGRequest) SetDescription(v string) *CreateSDGRequest {
	s.Description = &v
	return s
}

func (s *CreateSDGRequest) SetFromSDGId(v string) *CreateSDGRequest {
	s.FromSDGId = &v
	return s
}

func (s *CreateSDGRequest) SetInstanceId(v string) *CreateSDGRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateSDGRequest) SetSize(v string) *CreateSDGRequest {
	s.Size = &v
	return s
}

type CreateSDGResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the generated SDG.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s CreateSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSDGResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSDGResponseBody) SetRequestId(v string) *CreateSDGResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSDGResponseBody) SetSDGId(v string) *CreateSDGResponseBody {
	s.SDGId = &v
	return s
}

type CreateSDGResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSDGResponse) GoString() string {
	return s.String()
}

func (s *CreateSDGResponse) SetHeaders(v map[string]*string) *CreateSDGResponse {
	s.Headers = v
	return s
}

func (s *CreateSDGResponse) SetStatusCode(v int32) *CreateSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSDGResponse) SetBody(v *CreateSDGResponseBody) *CreateSDGResponse {
	s.Body = v
	return s
}

type CreateSecurityGroupRequest struct {
	// The description. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Schema of Response
	Permissions []*CreateSecurityGroupRequestPermissions `json:"Permissions,omitempty" xml:"Permissions,omitempty" type:"Repeated"`
	// The name of the security group. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-). By default, this parameter is empty.
	//
	// example:
	//
	// Dcdn1:2_3-4
	SecurityGroupName *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
}

func (s CreateSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupRequest) SetDescription(v string) *CreateSecurityGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateSecurityGroupRequest) SetPermissions(v []*CreateSecurityGroupRequestPermissions) *CreateSecurityGroupRequest {
	s.Permissions = v
	return s
}

func (s *CreateSecurityGroupRequest) SetSecurityGroupName(v string) *CreateSecurityGroupRequest {
	s.SecurityGroupName = &v
	return s
}

type CreateSecurityGroupRequestPermissions struct {
	// The description of the SDG.
	//
	// >  We recommend that you specify this parameter in details for subsequent queries.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The destination IPv4 CIDR block. IPv4 CIDR blocks and IPv4 addresses are supported.
	//
	// This parameter is used to support quintuple rules. For more information, see [Security group quintuple rules](https://help.aliyun.com/document_detail/97439.html).
	//
	// example:
	//
	// 0.0.0.0/0
	DestCidrIp *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	// The direction in which the security group rule is applied.
	//
	// This parameter is required.
	//
	// example:
	//
	// ingress
	Direction *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	// The protocol. The values of this parameter are case-insensitive. Valid values:
	//
	// 	- TCP.
	//
	// 	- UDP.
	//
	// 	- ICMP.
	//
	// 	- ICMPv6.
	//
	// 	- GRE.
	//
	// 	- ALL: All protocols are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// TCP
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The action of the security group rule. Valid values:
	//
	// 	- accept: allows inbound access.
	//
	// 	- drop: denies inbound access and returns no responses. In this case, the request times out or the connection cannot be established.
	//
	// Default value: accept.
	//
	// This parameter is required.
	//
	// example:
	//
	// Accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The range of destination port numbers for the protocols specified in the security group rule. Valid values:
	//
	// 	- If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. Specify a port range in the format of \\<Start port number>/\\<End port number>. Example: 1/200.
	//
	// 	- If you set IpProtocol to ICMP, the port number range is -1/-1.
	//
	// 	- If you set IpProtocol to GRE, the port number range is -1/-1.
	//
	// 	- If you set IpProtocol to ALL, the port number range is -1/-1, which indicates all port numbers.
	//
	// This parameter is required.
	//
	// example:
	//
	// 80/80
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of the security group rule. A smaller value specifies a higher priority. Valid values: 1 to 100.
	//
	// Default value: 1.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The source IPv4 CIDR block. IPv4 CIDR blocks and IPv4 addresses are supported.
	//
	// This parameter is used to support quintuple rules. For more information, see [Security group quintuple rules](https://help.aliyun.com/document_detail/97439.html).
	//
	// example:
	//
	// 0.0.0.0/0
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	// The range of source port numbers for the protocols specified in the security group rule. Valid values:
	//
	// 	- If you set IpProtocol to TCP or UDP, the port number range is 1 to 65535. Specify a port number range in the format of \\<Start port number>/\\<End port number>. Example: 1/200.
	//
	// 	- If you set IpProtocol to ICMP, the port number range is -1/-1.
	//
	// 	- If you set IpProtocol to GRE, the port number range is -1/-1.
	//
	// 	- If you set IpProtocol to ALL, the port number range is -1/-1, which indicates all port numbers.
	//
	// This parameter is used to support quintuple rules. For more information, see [Security group quintuple rules](https://help.aliyun.com/document_detail/97439.html).
	//
	// example:
	//
	// 22/22
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s CreateSecurityGroupRequestPermissions) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupRequestPermissions) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupRequestPermissions) SetDescription(v string) *CreateSecurityGroupRequestPermissions {
	s.Description = &v
	return s
}

func (s *CreateSecurityGroupRequestPermissions) SetDestCidrIp(v string) *CreateSecurityGroupRequestPermissions {
	s.DestCidrIp = &v
	return s
}

func (s *CreateSecurityGroupRequestPermissions) SetDirection(v string) *CreateSecurityGroupRequestPermissions {
	s.Direction = &v
	return s
}

func (s *CreateSecurityGroupRequestPermissions) SetIpProtocol(v string) *CreateSecurityGroupRequestPermissions {
	s.IpProtocol = &v
	return s
}

func (s *CreateSecurityGroupRequestPermissions) SetPolicy(v string) *CreateSecurityGroupRequestPermissions {
	s.Policy = &v
	return s
}

func (s *CreateSecurityGroupRequestPermissions) SetPortRange(v string) *CreateSecurityGroupRequestPermissions {
	s.PortRange = &v
	return s
}

func (s *CreateSecurityGroupRequestPermissions) SetPriority(v int32) *CreateSecurityGroupRequestPermissions {
	s.Priority = &v
	return s
}

func (s *CreateSecurityGroupRequestPermissions) SetSourceCidrIp(v string) *CreateSecurityGroupRequestPermissions {
	s.SourceCidrIp = &v
	return s
}

func (s *CreateSecurityGroupRequestPermissions) SetSourcePortRange(v string) *CreateSecurityGroupRequestPermissions {
	s.SourcePortRange = &v
	return s
}

type CreateSecurityGroupShrinkRequest struct {
	// The description. The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Schema of Response
	PermissionsShrink *string `json:"Permissions,omitempty" xml:"Permissions,omitempty"`
	// The name of the security group. The name must be 2 to 128 characters in length and can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter but cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-). By default, this parameter is empty.
	//
	// example:
	//
	// Dcdn1:2_3-4
	SecurityGroupName *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
}

func (s CreateSecurityGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupShrinkRequest) SetDescription(v string) *CreateSecurityGroupShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateSecurityGroupShrinkRequest) SetPermissionsShrink(v string) *CreateSecurityGroupShrinkRequest {
	s.PermissionsShrink = &v
	return s
}

func (s *CreateSecurityGroupShrinkRequest) SetSecurityGroupName(v string) *CreateSecurityGroupShrinkRequest {
	s.SecurityGroupName = &v
	return s
}

type CreateSecurityGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 760bad53276431c499e30dc36f6b26be
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-bp1fg655nh68xyz9i***
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s CreateSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupResponseBody) SetRequestId(v string) *CreateSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSecurityGroupResponseBody) SetSecurityGroupId(v string) *CreateSecurityGroupResponseBody {
	s.SecurityGroupId = &v
	return s
}

type CreateSecurityGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateSecurityGroupResponse) SetHeaders(v map[string]*string) *CreateSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateSecurityGroupResponse) SetStatusCode(v int32) *CreateSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSecurityGroupResponse) SetBody(v *CreateSecurityGroupResponseBody) *CreateSecurityGroupResponse {
	s.Body = v
	return s
}

type CreateSnapshotRequest struct {
	// The description of the snapshot. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
	//
	// By default, this parameter is left empty.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-bp1s5fnvk4gn2tws0****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The ID of the ENS node. You can query the node ID by calling the [DescribeEnsRegions](~~DescribeEnsRegions~~) operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shenzhen-3
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the snapshot. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// testSnapshotName
	SnapshotName *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
}

func (s CreateSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotRequest) GoString() string {
	return s.String()
}

func (s *CreateSnapshotRequest) SetDescription(v string) *CreateSnapshotRequest {
	s.Description = &v
	return s
}

func (s *CreateSnapshotRequest) SetDiskId(v string) *CreateSnapshotRequest {
	s.DiskId = &v
	return s
}

func (s *CreateSnapshotRequest) SetEnsRegionId(v string) *CreateSnapshotRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateSnapshotRequest) SetSnapshotName(v string) *CreateSnapshotRequest {
	s.SnapshotName = &v
	return s
}

type CreateSnapshotResponseBody struct {
	// The ID of the order.
	//
	// example:
	//
	// 21969183547****
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The IDs of the snapshots.
	//
	// example:
	//
	// s-bp17441ohwka0yuh****
	SnapShotId []*string `json:"SnapShotId,omitempty" xml:"SnapShotId,omitempty" type:"Repeated"`
}

func (s CreateSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSnapshotResponseBody) SetOrderId(v string) *CreateSnapshotResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateSnapshotResponseBody) SetRequestId(v string) *CreateSnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSnapshotResponseBody) SetSnapShotId(v []*string) *CreateSnapshotResponseBody {
	s.SnapShotId = v
	return s
}

type CreateSnapshotResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotResponse) GoString() string {
	return s.String()
}

func (s *CreateSnapshotResponse) SetHeaders(v map[string]*string) *CreateSnapshotResponse {
	s.Headers = v
	return s
}

func (s *CreateSnapshotResponse) SetStatusCode(v int32) *CreateSnapshotResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSnapshotResponse) SetBody(v *CreateSnapshotResponseBody) *CreateSnapshotResponse {
	s.Body = v
	return s
}

type CreateSnatEntryRequest struct {
	// Specifies whether to enable EIP affinity. Valid values:
	//
	// 	- **0**: no
	//
	// 	- **1**: yes
	//
	// **
	//
	// **Description*	- After you enable EIP affinity, if multiple EIPs are associated with an SNAT entry, each client uses one EIP to access the Internet. If EIP affinity is disabled, each client uses a random EIP to access the Internet.
	//
	// example:
	//
	// false
	EipAffinity *bool `json:"EipAffinity,omitempty" xml:"EipAffinity,omitempty"`
	// The timeout period for idle connections. Valid values: **1*	- to **86400**. Unit: seconds.
	//
	// example:
	//
	// 15
	IdleTimeout *int32 `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// Whether to enable operator affinity. Value taking:
	//
	// - false:Do not open.
	//
	// - true:Open.
	//
	// example:
	//
	// true
	IspAffinity *bool `json:"IspAffinity,omitempty" xml:"IspAffinity,omitempty"`
	// The ID of the Network Address Translation (NAT) gateway.
	//
	// This parameter is required.
	//
	// example:
	//
	// nat-5tawjw5j7sgd2deujxuk0****
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	// The name of the SNAT entry. The name must be 1 to 128 characters in length. The name cannot start with `http://` or `https://`.
	//
	// example:
	//
	// test0
	SnatEntryName *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	// The elastic IP address (EIP) in the SNAT entry. Separate multiple EIPs with commas (,).
	//
	// This parameter is required.
	//
	// example:
	//
	// 120.XXX.XXX.71
	SnatIp *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
	// The CIDR block. You can specify the CIDR block of a network, a vSwitch, or an instance. You can also specify a custom CIDR block. All instances within the CIDR block can access the Internet or external networks by using SNAT.
	//
	// >  If you specify **SourceVSwitchId*	- and **SourceCIDR**, **SourceVSwitchId*	- does not take effect. The value that you specified for **SourceCIDR*	- takes precedence.
	//
	// example:
	//
	// 10.0.0.0/24
	SourceCIDR *string `json:"SourceCIDR,omitempty" xml:"SourceCIDR,omitempty"`
	// The ID of the network. This parameter specifies that all ENS instances in the network can use the SNAT entry to access the Internet.
	//
	// >  If you specify **SourceNetworkId*	- and **SourceVSwitchId*	- or **SourceCIDR**, **SourceNetworkId*	- does not take effect. The value that you specified for **SourceCIDR*	- takes precedence. Priority: **SourceCIDR*	- > **SourceVSwitchId*	- > **SourceNetworkId**.
	//
	// example:
	//
	// n-2zeuphj08tt7q3brd****
	SourceNetworkId *string `json:"SourceNetworkId,omitempty" xml:"SourceNetworkId,omitempty"`
	// The ID of the vSwitch that you need to access over the Internet. This parameter specifies that Edge Node Service (ENS) instances in the vSwitch can use the SNAT entry to access the Internet.
	//
	// >  If you specify **SourceVSwitchId*	- and **SourceCIDR**, **SourceVSwitchId*	- does not take effect. The value that you specified for **SourceCIDR*	- takes precedence.
	//
	// example:
	//
	// vsw-bp1hwx7gi495q260p****
	SourceVSwitchId *string `json:"SourceVSwitchId,omitempty" xml:"SourceVSwitchId,omitempty"`
	// The secondary EIP in the SNAT entry. Separate multiple secondary EIPs with commas (,).
	//
	// example:
	//
	// 101.XXX.XXX.7
	StandbySnatIp *string `json:"StandbySnatIp,omitempty" xml:"StandbySnatIp,omitempty"`
}

func (s CreateSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *CreateSnatEntryRequest) SetEipAffinity(v bool) *CreateSnatEntryRequest {
	s.EipAffinity = &v
	return s
}

func (s *CreateSnatEntryRequest) SetIdleTimeout(v int32) *CreateSnatEntryRequest {
	s.IdleTimeout = &v
	return s
}

func (s *CreateSnatEntryRequest) SetIspAffinity(v bool) *CreateSnatEntryRequest {
	s.IspAffinity = &v
	return s
}

func (s *CreateSnatEntryRequest) SetNatGatewayId(v string) *CreateSnatEntryRequest {
	s.NatGatewayId = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSnatEntryName(v string) *CreateSnatEntryRequest {
	s.SnatEntryName = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSnatIp(v string) *CreateSnatEntryRequest {
	s.SnatIp = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSourceCIDR(v string) *CreateSnatEntryRequest {
	s.SourceCIDR = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSourceNetworkId(v string) *CreateSnatEntryRequest {
	s.SourceNetworkId = &v
	return s
}

func (s *CreateSnatEntryRequest) SetSourceVSwitchId(v string) *CreateSnatEntryRequest {
	s.SourceVSwitchId = &v
	return s
}

func (s *CreateSnatEntryRequest) SetStandbySnatIp(v string) *CreateSnatEntryRequest {
	s.StandbySnatIp = &v
	return s
}

type CreateSnatEntryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 018EED6A-69CA-58C8-A345-498927D5D34E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the SNAT entry.
	//
	// example:
	//
	// snat-5tc08qfj5ecblfdn2rqr9****
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
}

func (s CreateSnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSnatEntryResponseBody) SetRequestId(v string) *CreateSnatEntryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSnatEntryResponseBody) SetSnatEntryId(v string) *CreateSnatEntryResponseBody {
	s.SnatEntryId = &v
	return s
}

type CreateSnatEntryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *CreateSnatEntryResponse) SetHeaders(v map[string]*string) *CreateSnatEntryResponse {
	s.Headers = v
	return s
}

func (s *CreateSnatEntryResponse) SetStatusCode(v int32) *CreateSnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSnatEntryResponse) SetBody(v *CreateSnatEntryResponseBody) *CreateSnatEntryResponse {
	s.Body = v
	return s
}

type CreateStorageGatewayRequest struct {
	// The array of orders.
	//
	// This parameter is required.
	OrderDetails []*CreateStorageGatewayRequestOrderDetails `json:"OrderDetails,omitempty" xml:"OrderDetails,omitempty" type:"Repeated"`
}

func (s CreateStorageGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageGatewayRequest) GoString() string {
	return s.String()
}

func (s *CreateStorageGatewayRequest) SetOrderDetails(v []*CreateStorageGatewayRequestOrderDetails) *CreateStorageGatewayRequest {
	s.OrderDetails = v
	return s
}

type CreateStorageGatewayRequestOrderDetails struct {
	// The description of the gateway. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shenzhen-3
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the gateway. The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with `http://` or `https://`. The name can contain letters, digits, colons (.), underscores (_), and hyphens (-).
	//
	// example:
	//
	// testGatewayName
	GatewayName *string `json:"GatewayName,omitempty" xml:"GatewayName,omitempty"`
	// The type of the gateway. Set this parameter to **1**. **1*	- indicates iSCSI.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	GatewayType *string `json:"GatewayType,omitempty" xml:"GatewayType,omitempty"`
	// The ID of the VPC.
	//
	// This parameter is required.
	//
	// example:
	//
	// n-123
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s CreateStorageGatewayRequestOrderDetails) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageGatewayRequestOrderDetails) GoString() string {
	return s.String()
}

func (s *CreateStorageGatewayRequestOrderDetails) SetDescription(v string) *CreateStorageGatewayRequestOrderDetails {
	s.Description = &v
	return s
}

func (s *CreateStorageGatewayRequestOrderDetails) SetEnsRegionId(v string) *CreateStorageGatewayRequestOrderDetails {
	s.EnsRegionId = &v
	return s
}

func (s *CreateStorageGatewayRequestOrderDetails) SetGatewayName(v string) *CreateStorageGatewayRequestOrderDetails {
	s.GatewayName = &v
	return s
}

func (s *CreateStorageGatewayRequestOrderDetails) SetGatewayType(v string) *CreateStorageGatewayRequestOrderDetails {
	s.GatewayType = &v
	return s
}

func (s *CreateStorageGatewayRequestOrderDetails) SetVpcId(v string) *CreateStorageGatewayRequestOrderDetails {
	s.VpcId = &v
	return s
}

type CreateStorageGatewayShrinkRequest struct {
	// The array of orders.
	//
	// This parameter is required.
	OrderDetailsShrink *string `json:"OrderDetails,omitempty" xml:"OrderDetails,omitempty"`
}

func (s CreateStorageGatewayShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageGatewayShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateStorageGatewayShrinkRequest) SetOrderDetailsShrink(v string) *CreateStorageGatewayShrinkRequest {
	s.OrderDetailsShrink = &v
	return s
}

type CreateStorageGatewayResponseBody struct {
	// The list of created nodes.
	AllocationId []*CreateStorageGatewayResponseBodyAllocationId `json:"AllocationId,omitempty" xml:"AllocationId,omitempty" type:"Repeated"`
	// The success status code.
	//
	// 	- **PartSuccess**: partially succeeded.
	//
	// 	- **AllSuccess**: all succeeded.
	//
	// example:
	//
	// AllSuccess
	BizStatusCode *string `json:"BizStatusCode,omitempty" xml:"BizStatusCode,omitempty"`
	// The request ID.
	//
	// example:
	//
	// EA3758E0-8899-17D3-9526-5F62CF33A586
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of nodes that are not created.
	UnAllocationId []*CreateStorageGatewayResponseBodyUnAllocationId `json:"UnAllocationId,omitempty" xml:"UnAllocationId,omitempty" type:"Repeated"`
}

func (s CreateStorageGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStorageGatewayResponseBody) SetAllocationId(v []*CreateStorageGatewayResponseBodyAllocationId) *CreateStorageGatewayResponseBody {
	s.AllocationId = v
	return s
}

func (s *CreateStorageGatewayResponseBody) SetBizStatusCode(v string) *CreateStorageGatewayResponseBody {
	s.BizStatusCode = &v
	return s
}

func (s *CreateStorageGatewayResponseBody) SetRequestId(v string) *CreateStorageGatewayResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateStorageGatewayResponseBody) SetUnAllocationId(v []*CreateStorageGatewayResponseBodyUnAllocationId) *CreateStorageGatewayResponseBody {
	s.UnAllocationId = v
	return s
}

type CreateStorageGatewayResponseBodyAllocationId struct {
	// The ID of the node.
	//
	// example:
	//
	// cn-chengdu-telecom-4
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// e426409223
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateStorageGatewayResponseBodyAllocationId) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageGatewayResponseBodyAllocationId) GoString() string {
	return s.String()
}

func (s *CreateStorageGatewayResponseBodyAllocationId) SetEnsRegionId(v string) *CreateStorageGatewayResponseBodyAllocationId {
	s.EnsRegionId = &v
	return s
}

func (s *CreateStorageGatewayResponseBodyAllocationId) SetInstanceId(v string) *CreateStorageGatewayResponseBodyAllocationId {
	s.InstanceId = &v
	return s
}

type CreateStorageGatewayResponseBodyUnAllocationId struct {
	// The ID of the node.
	//
	// example:
	//
	// cn-chengdu-26
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// e426409258
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s CreateStorageGatewayResponseBodyUnAllocationId) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageGatewayResponseBodyUnAllocationId) GoString() string {
	return s.String()
}

func (s *CreateStorageGatewayResponseBodyUnAllocationId) SetEnsRegionId(v string) *CreateStorageGatewayResponseBodyUnAllocationId {
	s.EnsRegionId = &v
	return s
}

func (s *CreateStorageGatewayResponseBodyUnAllocationId) SetInstanceId(v string) *CreateStorageGatewayResponseBodyUnAllocationId {
	s.InstanceId = &v
	return s
}

type CreateStorageGatewayResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateStorageGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateStorageGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageGatewayResponse) GoString() string {
	return s.String()
}

func (s *CreateStorageGatewayResponse) SetHeaders(v map[string]*string) *CreateStorageGatewayResponse {
	s.Headers = v
	return s
}

func (s *CreateStorageGatewayResponse) SetStatusCode(v int32) *CreateStorageGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStorageGatewayResponse) SetBody(v *CreateStorageGatewayResponseBody) *CreateStorageGatewayResponse {
	s.Body = v
	return s
}

type CreateStorageVolumeRequest struct {
	// The password of the CHAP protocol.
	//
	// example:
	//
	// Password
	AuthPassword *string `json:"AuthPassword,omitempty" xml:"AuthPassword,omitempty"`
	// The authentication protocol. Set the value to **CHAP**.
	//
	// example:
	//
	// CHAP
	AuthProtocol *string `json:"AuthProtocol,omitempty" xml:"AuthProtocol,omitempty"`
	// The username of the CHAP protocol.
	//
	// example:
	//
	// User
	AuthUser *string `json:"AuthUser,omitempty" xml:"AuthUser,omitempty"`
	// The description of the volume. The description must be 2 to 128 characters in length. The description cannot start with `http://` or `https://`.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shenzhen-3
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the gateway.
	//
	// This parameter is required.
	//
	// example:
	//
	// sgw-****
	GatewayId *string `json:"GatewayId,omitempty" xml:"GatewayId,omitempty"`
	// Specifies whether to enable authentication. Valid values:
	//
	// 	- **1**: enable authentication.
	//
	// 	- **0*	- (default): disable authentication.
	//
	// example:
	//
	// 0
	IsAuth *string `json:"IsAuth,omitempty" xml:"IsAuth,omitempty"`
	// Specifies whether to enable the volume. Valid values:
	//
	// 	- **1*	- (default): enable the volume.
	//
	// 	- **0**: disable the volume.
	//
	// example:
	//
	// 1
	IsEnable *string `json:"IsEnable,omitempty" xml:"IsEnable,omitempty"`
	// The ID of the storage medium.
	//
	// This parameter is required.
	//
	// example:
	//
	// si-****
	StorageId *string `json:"StorageId,omitempty" xml:"StorageId,omitempty"`
	// The name of the volume. The name must be 2 to 128 characters in length. The name cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// testVolumeName
	VolumeName *string `json:"VolumeName,omitempty" xml:"VolumeName,omitempty"`
}

func (s CreateStorageVolumeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageVolumeRequest) GoString() string {
	return s.String()
}

func (s *CreateStorageVolumeRequest) SetAuthPassword(v string) *CreateStorageVolumeRequest {
	s.AuthPassword = &v
	return s
}

func (s *CreateStorageVolumeRequest) SetAuthProtocol(v string) *CreateStorageVolumeRequest {
	s.AuthProtocol = &v
	return s
}

func (s *CreateStorageVolumeRequest) SetAuthUser(v string) *CreateStorageVolumeRequest {
	s.AuthUser = &v
	return s
}

func (s *CreateStorageVolumeRequest) SetDescription(v string) *CreateStorageVolumeRequest {
	s.Description = &v
	return s
}

func (s *CreateStorageVolumeRequest) SetEnsRegionId(v string) *CreateStorageVolumeRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateStorageVolumeRequest) SetGatewayId(v string) *CreateStorageVolumeRequest {
	s.GatewayId = &v
	return s
}

func (s *CreateStorageVolumeRequest) SetIsAuth(v string) *CreateStorageVolumeRequest {
	s.IsAuth = &v
	return s
}

func (s *CreateStorageVolumeRequest) SetIsEnable(v string) *CreateStorageVolumeRequest {
	s.IsEnable = &v
	return s
}

func (s *CreateStorageVolumeRequest) SetStorageId(v string) *CreateStorageVolumeRequest {
	s.StorageId = &v
	return s
}

func (s *CreateStorageVolumeRequest) SetVolumeName(v string) *CreateStorageVolumeRequest {
	s.VolumeName = &v
	return s
}

type CreateStorageVolumeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 7030AB96-57CF-1C68-9FEE-D60E547FD79C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// An array of volume IDs.
	VolumeId []*string `json:"VolumeId,omitempty" xml:"VolumeId,omitempty" type:"Repeated"`
}

func (s CreateStorageVolumeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageVolumeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateStorageVolumeResponseBody) SetRequestId(v string) *CreateStorageVolumeResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateStorageVolumeResponseBody) SetVolumeId(v []*string) *CreateStorageVolumeResponseBody {
	s.VolumeId = v
	return s
}

type CreateStorageVolumeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateStorageVolumeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateStorageVolumeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateStorageVolumeResponse) GoString() string {
	return s.String()
}

func (s *CreateStorageVolumeResponse) SetHeaders(v map[string]*string) *CreateStorageVolumeResponse {
	s.Headers = v
	return s
}

func (s *CreateStorageVolumeResponse) SetStatusCode(v int32) *CreateStorageVolumeResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateStorageVolumeResponse) SetBody(v *CreateStorageVolumeResponseBody) *CreateStorageVolumeResponse {
	s.Body = v
	return s
}

type CreateVSwitchRequest struct {
	// The CIDR block of the vSwitch. Take note of the following limits:
	//
	// 	- The subnet mask must be 16 to 29 bits in length.
	//
	// 	- The CIDR block of the vSwitch must fall within the CIDR block of the VPC to which the vSwitch belongs.
	//
	// 	- The CIDR block of the vSwitch cannot be the same as the destination CIDR block in a route entry of the VPC. However, it can be a subset of the destination CIDR block.
	//
	// This parameter is required.
	//
	// example:
	//
	// 172.16.0.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The description of the vSwitch.
	//
	// The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	//
	// example:
	//
	// This is my vswitch.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the edge node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-xian-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the network to which the vSwitch that you want to create belongs.
	//
	// example:
	//
	// n-257gqcdfvx6n****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The tags.
	Tag []*CreateVSwitchRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The name of the vSwitch. The name must meet the following requirements:
	//
	// 	- The name must be 2 to 128 characters in length.
	//
	// 	- The name must start with a letter and cannot start with http:// or https://. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// Default value: null.
	//
	// example:
	//
	// test
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s CreateVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchRequest) GoString() string {
	return s.String()
}

func (s *CreateVSwitchRequest) SetCidrBlock(v string) *CreateVSwitchRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateVSwitchRequest) SetDescription(v string) *CreateVSwitchRequest {
	s.Description = &v
	return s
}

func (s *CreateVSwitchRequest) SetEnsRegionId(v string) *CreateVSwitchRequest {
	s.EnsRegionId = &v
	return s
}

func (s *CreateVSwitchRequest) SetNetworkId(v string) *CreateVSwitchRequest {
	s.NetworkId = &v
	return s
}

func (s *CreateVSwitchRequest) SetTag(v []*CreateVSwitchRequestTag) *CreateVSwitchRequest {
	s.Tag = v
	return s
}

func (s *CreateVSwitchRequest) SetVSwitchName(v string) *CreateVSwitchRequest {
	s.VSwitchName = &v
	return s
}

type CreateVSwitchRequestTag struct {
	// The key of the tag that are to add to the instance. Valid values of N: **1*	- to **20**.
	//
	// 	- The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
	//
	// 	- The key must be up to 64 characters in length.
	//
	// 	- The tag key cannot be an empty string.
	//
	// example:
	//
	// team
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N that is added to the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain http:// or https://.
	//
	// example:
	//
	// Deep
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateVSwitchRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchRequestTag) GoString() string {
	return s.String()
}

func (s *CreateVSwitchRequestTag) SetKey(v string) *CreateVSwitchRequestTag {
	s.Key = &v
	return s
}

func (s *CreateVSwitchRequestTag) SetValue(v string) *CreateVSwitchRequestTag {
	s.Value = &v
	return s
}

type CreateVSwitchResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateVSwitchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVSwitchResponseBody) SetRequestId(v string) *CreateVSwitchResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVSwitchResponseBody) SetVSwitchId(v string) *CreateVSwitchResponseBody {
	s.VSwitchId = &v
	return s
}

type CreateVSwitchResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateVSwitchResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVSwitchResponse) GoString() string {
	return s.String()
}

func (s *CreateVSwitchResponse) SetHeaders(v map[string]*string) *CreateVSwitchResponse {
	s.Headers = v
	return s
}

func (s *CreateVSwitchResponse) SetStatusCode(v int32) *CreateVSwitchResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVSwitchResponse) SetBody(v *CreateVSwitchResponseBody) *CreateVSwitchResponse {
	s.Body = v
	return s
}

type DeleteApplicationRequest struct {
	// The ID of the application. To obtain the application ID, call the ListApplication operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// d0639abf-789a-4527-b420-031d2cd9ad9b
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The timeout period for the asynchronous release. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 1800
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s DeleteApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationRequest) SetAppId(v string) *DeleteApplicationRequest {
	s.AppId = &v
	return s
}

func (s *DeleteApplicationRequest) SetTimeout(v int32) *DeleteApplicationRequest {
	s.Timeout = &v
	return s
}

type DeleteApplicationResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// AAE90880-4970-4D81-A534-A6C0F3631F74
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponseBody) SetRequestId(v string) *DeleteApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApplicationResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponse) SetHeaders(v map[string]*string) *DeleteApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeleteApplicationResponse) SetStatusCode(v int32) *DeleteApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteApplicationResponse) SetBody(v *DeleteApplicationResponseBody) *DeleteApplicationResponse {
	s.Body = v
	return s
}

type DeleteBucketRequest struct {
	// The name of the bucket that you want to delete. You can delete only one bucket at a time.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
}

func (s DeleteBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBucketRequest) GoString() string {
	return s.String()
}

func (s *DeleteBucketRequest) SetBucketName(v string) *DeleteBucketRequest {
	s.BucketName = &v
	return s
}

type DeleteBucketResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 2180AB96-57CF-1C68-9FEE-D60E547FD79C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBucketResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBucketResponseBody) SetRequestId(v string) *DeleteBucketResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBucketResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBucketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBucketResponse) GoString() string {
	return s.String()
}

func (s *DeleteBucketResponse) SetHeaders(v map[string]*string) *DeleteBucketResponse {
	s.Headers = v
	return s
}

func (s *DeleteBucketResponse) SetStatusCode(v int32) *DeleteBucketResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBucketResponse) SetBody(v *DeleteBucketResponseBody) *DeleteBucketResponse {
	s.Body = v
	return s
}

type DeleteBucketLifecycleRequest struct {
	// The name of the bucket.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The ID of the rule. If this parameter is not specified, all rules are removed.
	//
	// example:
	//
	// 1
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DeleteBucketLifecycleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBucketLifecycleRequest) GoString() string {
	return s.String()
}

func (s *DeleteBucketLifecycleRequest) SetBucketName(v string) *DeleteBucketLifecycleRequest {
	s.BucketName = &v
	return s
}

func (s *DeleteBucketLifecycleRequest) SetRuleId(v string) *DeleteBucketLifecycleRequest {
	s.RuleId = &v
	return s
}

type DeleteBucketLifecycleResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// C6583E8B-B930-4F59-ADC0-0E209A45E860
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBucketLifecycleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBucketLifecycleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBucketLifecycleResponseBody) SetRequestId(v string) *DeleteBucketLifecycleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBucketLifecycleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBucketLifecycleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBucketLifecycleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBucketLifecycleResponse) GoString() string {
	return s.String()
}

func (s *DeleteBucketLifecycleResponse) SetHeaders(v map[string]*string) *DeleteBucketLifecycleResponse {
	s.Headers = v
	return s
}

func (s *DeleteBucketLifecycleResponse) SetStatusCode(v int32) *DeleteBucketLifecycleResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBucketLifecycleResponse) SetBody(v *DeleteBucketLifecycleResponseBody) *DeleteBucketLifecycleResponse {
	s.Body = v
	return s
}

type DeleteDiskRequest struct {
	// The ID of the disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-5va95bg6i5f44kgkeuazyfcxm
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
}

func (s DeleteDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDiskRequest) GoString() string {
	return s.String()
}

func (s *DeleteDiskRequest) SetDiskId(v string) *DeleteDiskRequest {
	s.DiskId = &v
	return s
}

type DeleteDiskResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 3ABEEB76-1976-55AB-B884-3D65CA6A4743
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDiskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDiskResponseBody) SetCode(v int32) *DeleteDiskResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDiskResponseBody) SetRequestId(v string) *DeleteDiskResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDiskResponse) GoString() string {
	return s.String()
}

func (s *DeleteDiskResponse) SetHeaders(v map[string]*string) *DeleteDiskResponse {
	s.Headers = v
	return s
}

func (s *DeleteDiskResponse) SetStatusCode(v int32) *DeleteDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDiskResponse) SetBody(v *DeleteDiskResponseBody) *DeleteDiskResponse {
	s.Body = v
	return s
}

type DeleteEipRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// i-5sg1owx0g4ojy66ab2tez77r2
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DeleteEipRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEipRequest) GoString() string {
	return s.String()
}

func (s *DeleteEipRequest) SetInstanceId(v string) *DeleteEipRequest {
	s.InstanceId = &v
	return s
}

type DeleteEipResponseBody struct {
	// example:
	//
	// 9341CDC2-D6AC-5992-86C8-D5774CFCC708
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEipResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEipResponseBody) SetRequestId(v string) *DeleteEipResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEipResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEipResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEipResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEipResponse) GoString() string {
	return s.String()
}

func (s *DeleteEipResponse) SetHeaders(v map[string]*string) *DeleteEipResponse {
	s.Headers = v
	return s
}

func (s *DeleteEipResponse) SetStatusCode(v int32) *DeleteEipResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEipResponse) SetBody(v *DeleteEipResponseBody) *DeleteEipResponse {
	s.Body = v
	return s
}

type DeleteEnsRouteEntryRequest struct {
	// The ID of the route that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// rte-8vbmb2890wiret5maqq25
	RouteEntryId *string `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
}

func (s DeleteEnsRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnsRouteEntryRequest) SetRouteEntryId(v string) *DeleteEnsRouteEntryRequest {
	s.RouteEntryId = &v
	return s
}

type DeleteEnsRouteEntryResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEnsRouteEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsRouteEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnsRouteEntryResponseBody) SetRequestId(v string) *DeleteEnsRouteEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnsRouteEntryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEnsRouteEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEnsRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnsRouteEntryResponse) SetHeaders(v map[string]*string) *DeleteEnsRouteEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnsRouteEntryResponse) SetStatusCode(v int32) *DeleteEnsRouteEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEnsRouteEntryResponse) SetBody(v *DeleteEnsRouteEntryResponseBody) *DeleteEnsRouteEntryResponse {
	s.Body = v
	return s
}

type DeleteEnsSaleConditionControlRequest struct {
	AliUidAccount *string `json:"AliUidAccount,omitempty" xml:"AliUidAccount,omitempty"`
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	// This parameter is required.
	SaleControls []*DeleteEnsSaleConditionControlRequestSaleControls `json:"SaleControls,omitempty" xml:"SaleControls,omitempty" type:"Repeated"`
}

func (s DeleteEnsSaleConditionControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleConditionControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleConditionControlRequest) SetAliUidAccount(v string) *DeleteEnsSaleConditionControlRequest {
	s.AliUidAccount = &v
	return s
}

func (s *DeleteEnsSaleConditionControlRequest) SetCommodityCode(v string) *DeleteEnsSaleConditionControlRequest {
	s.CommodityCode = &v
	return s
}

func (s *DeleteEnsSaleConditionControlRequest) SetCustomAccount(v string) *DeleteEnsSaleConditionControlRequest {
	s.CustomAccount = &v
	return s
}

func (s *DeleteEnsSaleConditionControlRequest) SetSaleControls(v []*DeleteEnsSaleConditionControlRequestSaleControls) *DeleteEnsSaleConditionControlRequest {
	s.SaleControls = v
	return s
}

type DeleteEnsSaleConditionControlRequestSaleControls struct {
	// This parameter is required.
	ConditionControls []*DeleteEnsSaleConditionControlRequestSaleControlsConditionControls `json:"ConditionControls,omitempty" xml:"ConditionControls,omitempty" type:"Repeated"`
	// This parameter is required.
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	// This parameter is required.
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
}

func (s DeleteEnsSaleConditionControlRequestSaleControls) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleConditionControlRequestSaleControls) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleConditionControlRequestSaleControls) SetConditionControls(v []*DeleteEnsSaleConditionControlRequestSaleControlsConditionControls) *DeleteEnsSaleConditionControlRequestSaleControls {
	s.ConditionControls = v
	return s
}

func (s *DeleteEnsSaleConditionControlRequestSaleControls) SetModuleCode(v string) *DeleteEnsSaleConditionControlRequestSaleControls {
	s.ModuleCode = &v
	return s
}

func (s *DeleteEnsSaleConditionControlRequestSaleControls) SetOrderType(v string) *DeleteEnsSaleConditionControlRequestSaleControls {
	s.OrderType = &v
	return s
}

type DeleteEnsSaleConditionControlRequestSaleControlsConditionControls struct {
	// This parameter is required.
	ConditionControlModuleCode *string `json:"ConditionControlModuleCode,omitempty" xml:"ConditionControlModuleCode,omitempty"`
	// This parameter is required.
	ConditionControlModuleValue *string `json:"ConditionControlModuleValue,omitempty" xml:"ConditionControlModuleValue,omitempty"`
}

func (s DeleteEnsSaleConditionControlRequestSaleControlsConditionControls) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleConditionControlRequestSaleControlsConditionControls) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleConditionControlRequestSaleControlsConditionControls) SetConditionControlModuleCode(v string) *DeleteEnsSaleConditionControlRequestSaleControlsConditionControls {
	s.ConditionControlModuleCode = &v
	return s
}

func (s *DeleteEnsSaleConditionControlRequestSaleControlsConditionControls) SetConditionControlModuleValue(v string) *DeleteEnsSaleConditionControlRequestSaleControlsConditionControls {
	s.ConditionControlModuleValue = &v
	return s
}

type DeleteEnsSaleConditionControlShrinkRequest struct {
	AliUidAccount *string `json:"AliUidAccount,omitempty" xml:"AliUidAccount,omitempty"`
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	// This parameter is required.
	SaleControlsShrink *string `json:"SaleControls,omitempty" xml:"SaleControls,omitempty"`
}

func (s DeleteEnsSaleConditionControlShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleConditionControlShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleConditionControlShrinkRequest) SetAliUidAccount(v string) *DeleteEnsSaleConditionControlShrinkRequest {
	s.AliUidAccount = &v
	return s
}

func (s *DeleteEnsSaleConditionControlShrinkRequest) SetCommodityCode(v string) *DeleteEnsSaleConditionControlShrinkRequest {
	s.CommodityCode = &v
	return s
}

func (s *DeleteEnsSaleConditionControlShrinkRequest) SetCustomAccount(v string) *DeleteEnsSaleConditionControlShrinkRequest {
	s.CustomAccount = &v
	return s
}

func (s *DeleteEnsSaleConditionControlShrinkRequest) SetSaleControlsShrink(v string) *DeleteEnsSaleConditionControlShrinkRequest {
	s.SaleControlsShrink = &v
	return s
}

type DeleteEnsSaleConditionControlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEnsSaleConditionControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleConditionControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleConditionControlResponseBody) SetRequestId(v string) *DeleteEnsSaleConditionControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnsSaleConditionControlResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEnsSaleConditionControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEnsSaleConditionControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleConditionControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleConditionControlResponse) SetHeaders(v map[string]*string) *DeleteEnsSaleConditionControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnsSaleConditionControlResponse) SetStatusCode(v int32) *DeleteEnsSaleConditionControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEnsSaleConditionControlResponse) SetBody(v *DeleteEnsSaleConditionControlResponseBody) *DeleteEnsSaleConditionControlResponse {
	s.Body = v
	return s
}

type DeleteEnsSaleControlRequest struct {
	AliUidAccount *string `json:"AliUidAccount,omitempty" xml:"AliUidAccount,omitempty"`
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	// This parameter is required.
	SaleControls []*DeleteEnsSaleControlRequestSaleControls `json:"SaleControls,omitempty" xml:"SaleControls,omitempty" type:"Repeated"`
}

func (s DeleteEnsSaleControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleControlRequest) SetAliUidAccount(v string) *DeleteEnsSaleControlRequest {
	s.AliUidAccount = &v
	return s
}

func (s *DeleteEnsSaleControlRequest) SetCommodityCode(v string) *DeleteEnsSaleControlRequest {
	s.CommodityCode = &v
	return s
}

func (s *DeleteEnsSaleControlRequest) SetCustomAccount(v string) *DeleteEnsSaleControlRequest {
	s.CustomAccount = &v
	return s
}

func (s *DeleteEnsSaleControlRequest) SetSaleControls(v []*DeleteEnsSaleControlRequestSaleControls) *DeleteEnsSaleControlRequest {
	s.SaleControls = v
	return s
}

type DeleteEnsSaleControlRequestSaleControls struct {
	// This parameter is required.
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	// This parameter is required.
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
}

func (s DeleteEnsSaleControlRequestSaleControls) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleControlRequestSaleControls) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleControlRequestSaleControls) SetModuleCode(v string) *DeleteEnsSaleControlRequestSaleControls {
	s.ModuleCode = &v
	return s
}

func (s *DeleteEnsSaleControlRequestSaleControls) SetOrderType(v string) *DeleteEnsSaleControlRequestSaleControls {
	s.OrderType = &v
	return s
}

type DeleteEnsSaleControlShrinkRequest struct {
	AliUidAccount *string `json:"AliUidAccount,omitempty" xml:"AliUidAccount,omitempty"`
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	// This parameter is required.
	SaleControlsShrink *string `json:"SaleControls,omitempty" xml:"SaleControls,omitempty"`
}

func (s DeleteEnsSaleControlShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleControlShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleControlShrinkRequest) SetAliUidAccount(v string) *DeleteEnsSaleControlShrinkRequest {
	s.AliUidAccount = &v
	return s
}

func (s *DeleteEnsSaleControlShrinkRequest) SetCommodityCode(v string) *DeleteEnsSaleControlShrinkRequest {
	s.CommodityCode = &v
	return s
}

func (s *DeleteEnsSaleControlShrinkRequest) SetCustomAccount(v string) *DeleteEnsSaleControlShrinkRequest {
	s.CustomAccount = &v
	return s
}

func (s *DeleteEnsSaleControlShrinkRequest) SetSaleControlsShrink(v string) *DeleteEnsSaleControlShrinkRequest {
	s.SaleControlsShrink = &v
	return s
}

type DeleteEnsSaleControlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEnsSaleControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleControlResponseBody) SetRequestId(v string) *DeleteEnsSaleControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnsSaleControlResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEnsSaleControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEnsSaleControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnsSaleControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnsSaleControlResponse) SetHeaders(v map[string]*string) *DeleteEnsSaleControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnsSaleControlResponse) SetStatusCode(v int32) *DeleteEnsSaleControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEnsSaleControlResponse) SetBody(v *DeleteEnsSaleControlResponseBody) *DeleteEnsSaleControlResponse {
	s.Body = v
	return s
}

type DeleteEpnInstanceRequest struct {
	// The ID of the EPN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// epn-****
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
}

func (s DeleteEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteEpnInstanceRequest) SetEPNInstanceId(v string) *DeleteEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

type DeleteEpnInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEpnInstanceResponseBody) SetRequestId(v string) *DeleteEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEpnInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteEpnInstanceResponse) SetHeaders(v map[string]*string) *DeleteEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteEpnInstanceResponse) SetStatusCode(v int32) *DeleteEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEpnInstanceResponse) SetBody(v *DeleteEpnInstanceResponseBody) *DeleteEpnInstanceResponse {
	s.Body = v
	return s
}

type DeleteFileSystemRequest struct {
	// The ID of the edge node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-chengdu-telecom-4
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the file system that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// e42640****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
}

func (s DeleteFileSystemRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileSystemRequest) GoString() string {
	return s.String()
}

func (s *DeleteFileSystemRequest) SetEnsRegionId(v string) *DeleteFileSystemRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DeleteFileSystemRequest) SetFileSystemId(v string) *DeleteFileSystemRequest {
	s.FileSystemId = &v
	return s
}

type DeleteFileSystemResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 4EC47282-1B74-4534-BD0E-403F3EE64CAF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFileSystemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileSystemResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFileSystemResponseBody) SetRequestId(v string) *DeleteFileSystemResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFileSystemResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFileSystemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFileSystemResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFileSystemResponse) GoString() string {
	return s.String()
}

func (s *DeleteFileSystemResponse) SetHeaders(v map[string]*string) *DeleteFileSystemResponse {
	s.Headers = v
	return s
}

func (s *DeleteFileSystemResponse) SetStatusCode(v int32) *DeleteFileSystemResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFileSystemResponse) SetBody(v *DeleteFileSystemResponseBody) *DeleteFileSystemResponse {
	s.Body = v
	return s
}

type DeleteForwardEntryRequest struct {
	// The ID of the DNAT entry that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// fwd-5tfk8qgepr9ijjkqxt8do****
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
}

func (s DeleteForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryRequest) SetForwardEntryId(v string) *DeleteForwardEntryRequest {
	s.ForwardEntryId = &v
	return s
}

type DeleteForwardEntryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteForwardEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryResponseBody) SetRequestId(v string) *DeleteForwardEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteForwardEntryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteForwardEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteForwardEntryResponse) SetHeaders(v map[string]*string) *DeleteForwardEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteForwardEntryResponse) SetStatusCode(v int32) *DeleteForwardEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteForwardEntryResponse) SetBody(v *DeleteForwardEntryResponseBody) *DeleteForwardEntryResponse {
	s.Body = v
	return s
}

type DeleteHaVipsRequest struct {
	// This parameter is required.
	HaVipIds []*string `json:"HaVipIds,omitempty" xml:"HaVipIds,omitempty" type:"Repeated"`
}

func (s DeleteHaVipsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipsRequest) GoString() string {
	return s.String()
}

func (s *DeleteHaVipsRequest) SetHaVipIds(v []*string) *DeleteHaVipsRequest {
	s.HaVipIds = v
	return s
}

type DeleteHaVipsShrinkRequest struct {
	// This parameter is required.
	HaVipIdsShrink *string `json:"HaVipIds,omitempty" xml:"HaVipIds,omitempty"`
}

func (s DeleteHaVipsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipsShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteHaVipsShrinkRequest) SetHaVipIdsShrink(v string) *DeleteHaVipsShrinkRequest {
	s.HaVipIdsShrink = &v
	return s
}

type DeleteHaVipsResponseBody struct {
	// example:
	//
	// 6666C5A5-75ED-422E-A022-7121FA18C968
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteHaVipsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteHaVipsResponseBody) SetRequestId(v string) *DeleteHaVipsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteHaVipsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteHaVipsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteHaVipsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteHaVipsResponse) GoString() string {
	return s.String()
}

func (s *DeleteHaVipsResponse) SetHeaders(v map[string]*string) *DeleteHaVipsResponse {
	s.Headers = v
	return s
}

func (s *DeleteHaVipsResponse) SetStatusCode(v int32) *DeleteHaVipsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteHaVipsResponse) SetBody(v *DeleteHaVipsResponseBody) *DeleteHaVipsResponse {
	s.Body = v
	return s
}

type DeleteImageRequest struct {
	// The ID of the image. You can specify only one image ID.
	//
	// You can delete only custom images that you created.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-5taesrgwpo9zqj9cjqu792****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
}

func (s DeleteImageRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageRequest) GoString() string {
	return s.String()
}

func (s *DeleteImageRequest) SetImageId(v string) *DeleteImageRequest {
	s.ImageId = &v
	return s
}

type DeleteImageResponseBody struct {
	// The returned service code. A value of 0 indicates that the operation was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 0D94920B-0349-5097-A57F-31876405F2E5
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteImageResponseBody) SetCode(v int32) *DeleteImageResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteImageResponseBody) SetRequestId(v string) *DeleteImageResponseBody {
	s.RequestId = &v
	return s
}

type DeleteImageResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteImageResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteImageResponse) GoString() string {
	return s.String()
}

func (s *DeleteImageResponse) SetHeaders(v map[string]*string) *DeleteImageResponse {
	s.Headers = v
	return s
}

func (s *DeleteImageResponse) SetStatusCode(v int32) *DeleteImageResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteImageResponse) SetBody(v *DeleteImageResponseBody) *DeleteImageResponse {
	s.Body = v
	return s
}

type DeleteKeyPairsRequest struct {
	// The ID of the SSH key pair.
	//
	// example:
	//
	// ssh-5lywanlkih1zo9yl8eg****
	KeyPairId *string `json:"KeyPairId,omitempty" xml:"KeyPairId,omitempty"`
	// The name of the key pair. The name must conform to the following naming conventions:
	//
	// 	- The name must be 2 to 128 characters in length.
	//
	// 	- The name must start with a letter and cannot start with `http://` or `https://`.
	//
	// 	- The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// Before you delete a key pair, you can call the DescribeKeyPairs operation to query existing key pairs.
	//
	// example:
	//
	// TestKeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
}

func (s DeleteKeyPairsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsRequest) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsRequest) SetKeyPairId(v string) *DeleteKeyPairsRequest {
	s.KeyPairId = &v
	return s
}

func (s *DeleteKeyPairsRequest) SetKeyPairName(v string) *DeleteKeyPairsRequest {
	s.KeyPairName = &v
	return s
}

type DeleteKeyPairsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteKeyPairsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsResponseBody) SetRequestId(v string) *DeleteKeyPairsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteKeyPairsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteKeyPairsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteKeyPairsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteKeyPairsResponse) GoString() string {
	return s.String()
}

func (s *DeleteKeyPairsResponse) SetHeaders(v map[string]*string) *DeleteKeyPairsResponse {
	s.Headers = v
	return s
}

func (s *DeleteKeyPairsResponse) SetStatusCode(v int32) *DeleteKeyPairsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteKeyPairsResponse) SetBody(v *DeleteKeyPairsResponseBody) *DeleteKeyPairsResponse {
	s.Body = v
	return s
}

type DeleteLoadBalancerListenerRequest struct {
	// The frontend port that is used by the Edge Load Balance (ELB) instance. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8080
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The frontend protocol that is used by the ELB instance.
	//
	// >  This parameter is required if the same port is used by listeners that use different protocols.
	//
	// Valid values:
	//
	// 	- tcp
	//
	// 	- udp
	//
	// 	- http
	//
	// 	- https
	//
	// example:
	//
	// tcp
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5snthcyu1x10g7tywj7iu****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DeleteLoadBalancerListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadBalancerListenerRequest) GoString() string {
	return s.String()
}

func (s *DeleteLoadBalancerListenerRequest) SetListenerPort(v int32) *DeleteLoadBalancerListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *DeleteLoadBalancerListenerRequest) SetListenerProtocol(v string) *DeleteLoadBalancerListenerRequest {
	s.ListenerProtocol = &v
	return s
}

func (s *DeleteLoadBalancerListenerRequest) SetLoadBalancerId(v string) *DeleteLoadBalancerListenerRequest {
	s.LoadBalancerId = &v
	return s
}

type DeleteLoadBalancerListenerResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLoadBalancerListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadBalancerListenerResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLoadBalancerListenerResponseBody) SetRequestId(v string) *DeleteLoadBalancerListenerResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLoadBalancerListenerResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLoadBalancerListenerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLoadBalancerListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLoadBalancerListenerResponse) GoString() string {
	return s.String()
}

func (s *DeleteLoadBalancerListenerResponse) SetHeaders(v map[string]*string) *DeleteLoadBalancerListenerResponse {
	s.Headers = v
	return s
}

func (s *DeleteLoadBalancerListenerResponse) SetStatusCode(v int32) *DeleteLoadBalancerListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLoadBalancerListenerResponse) SetBody(v *DeleteLoadBalancerListenerResponseBody) *DeleteLoadBalancerListenerResponse {
	s.Body = v
	return s
}

type DeleteMountTargetRequest struct {
	// The ID of the edge node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the file system.
	//
	// This parameter is required.
	//
	// example:
	//
	// c50f8*****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// The name of the mount target.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestMountPath
	MountTargetName *string `json:"MountTargetName,omitempty" xml:"MountTargetName,omitempty"`
}

func (s DeleteMountTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMountTargetRequest) GoString() string {
	return s.String()
}

func (s *DeleteMountTargetRequest) SetEnsRegionId(v string) *DeleteMountTargetRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DeleteMountTargetRequest) SetFileSystemId(v string) *DeleteMountTargetRequest {
	s.FileSystemId = &v
	return s
}

func (s *DeleteMountTargetRequest) SetMountTargetName(v string) *DeleteMountTargetRequest {
	s.MountTargetName = &v
	return s
}

type DeleteMountTargetResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 4EC47282-1B74-4534-BD0E-403F3EE64CAF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMountTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMountTargetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMountTargetResponseBody) SetRequestId(v string) *DeleteMountTargetResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMountTargetResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMountTargetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMountTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMountTargetResponse) GoString() string {
	return s.String()
}

func (s *DeleteMountTargetResponse) SetHeaders(v map[string]*string) *DeleteMountTargetResponse {
	s.Headers = v
	return s
}

func (s *DeleteMountTargetResponse) SetStatusCode(v int32) *DeleteMountTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMountTargetResponse) SetBody(v *DeleteMountTargetResponseBody) *DeleteMountTargetResponse {
	s.Body = v
	return s
}

type DeleteNatGatewayRequest struct {
	// Specifies whether to forcefully delete the VPC. Valid values:
	//
	// - **true**: yes
	//
	// - **false*	- (default): no
	//
	// You can forcefully delete a VPC in the following scenarios:
	//
	// - Only an IPv4 gateway and routes that point to the IPv4 gateway exist in the VPC.
	//
	// - Only an IPv6 gateway and routes that point to the IPv6 gateway exist in the VPC.
	//
	// example:
	//
	// true
	ForceDelete *bool `json:"ForceDelete,omitempty" xml:"ForceDelete,omitempty"`
	// The ID of the NAT gateway that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// nat-5t7nh1cfm6kxiszlttr38****
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
}

func (s DeleteNatGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayRequest) SetForceDelete(v bool) *DeleteNatGatewayRequest {
	s.ForceDelete = &v
	return s
}

func (s *DeleteNatGatewayRequest) SetNatGatewayId(v string) *DeleteNatGatewayRequest {
	s.NatGatewayId = &v
	return s
}

type DeleteNatGatewayResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNatGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayResponseBody) SetRequestId(v string) *DeleteNatGatewayResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNatGatewayResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNatGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNatGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNatGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteNatGatewayResponse) SetHeaders(v map[string]*string) *DeleteNatGatewayResponse {
	s.Headers = v
	return s
}

func (s *DeleteNatGatewayResponse) SetStatusCode(v int32) *DeleteNatGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNatGatewayResponse) SetBody(v *DeleteNatGatewayResponseBody) *DeleteNatGatewayResponse {
	s.Body = v
	return s
}

type DeleteNetworkRequest struct {
	// The ID of the network.
	//
	// This parameter is required.
	//
	// example:
	//
	// n-5***
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
}

func (s DeleteNetworkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkRequest) SetNetworkId(v string) *DeleteNetworkRequest {
	s.NetworkId = &v
	return s
}

type DeleteNetworkResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkResponseBody) SetRequestId(v string) *DeleteNetworkResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNetworkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNetworkResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkResponse) SetHeaders(v map[string]*string) *DeleteNetworkResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkResponse) SetStatusCode(v int32) *DeleteNetworkResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkResponse) SetBody(v *DeleteNetworkResponseBody) *DeleteNetworkResponse {
	s.Body = v
	return s
}

type DeleteNetworkAclRequest struct {
	// The ID of the network ACL.
	//
	// This parameter is required.
	//
	// example:
	//
	// nacl-bp1lhl0taikrbgnh****
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
}

func (s DeleteNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclRequest) SetNetworkAclId(v string) *DeleteNetworkAclRequest {
	s.NetworkAclId = &v
	return s
}

type DeleteNetworkAclResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkAclResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclResponseBody) SetRequestId(v string) *DeleteNetworkAclResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkAclResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNetworkAclResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclResponse) SetHeaders(v map[string]*string) *DeleteNetworkAclResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkAclResponse) SetStatusCode(v int32) *DeleteNetworkAclResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkAclResponse) SetBody(v *DeleteNetworkAclResponseBody) *DeleteNetworkAclResponse {
	s.Body = v
	return s
}

type DeleteNetworkAclEntryRequest struct {
	// The ID of the network ACL for which you want to delete a rule.
	//
	// example:
	//
	// nae-5****
	NetworkAclEntryId *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty"`
}

func (s DeleteNetworkAclEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclEntryRequest) SetNetworkAclEntryId(v string) *DeleteNetworkAclEntryRequest {
	s.NetworkAclEntryId = &v
	return s
}

type DeleteNetworkAclEntryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkAclEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclEntryResponseBody) SetRequestId(v string) *DeleteNetworkAclEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkAclEntryResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNetworkAclEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNetworkAclEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkAclEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkAclEntryResponse) SetHeaders(v map[string]*string) *DeleteNetworkAclEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkAclEntryResponse) SetStatusCode(v int32) *DeleteNetworkAclEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkAclEntryResponse) SetBody(v *DeleteNetworkAclEntryResponseBody) *DeleteNetworkAclEntryResponse {
	s.Body = v
	return s
}

type DeleteNetworkInterfacesRequest struct {
	// This parameter is required.
	NetworkInterfaceIds []*string `json:"NetworkInterfaceIds,omitempty" xml:"NetworkInterfaceIds,omitempty" type:"Repeated"`
}

func (s DeleteNetworkInterfacesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfacesRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfacesRequest) SetNetworkInterfaceIds(v []*string) *DeleteNetworkInterfacesRequest {
	s.NetworkInterfaceIds = v
	return s
}

type DeleteNetworkInterfacesShrinkRequest struct {
	// This parameter is required.
	NetworkInterfaceIdsShrink *string `json:"NetworkInterfaceIds,omitempty" xml:"NetworkInterfaceIds,omitempty"`
}

func (s DeleteNetworkInterfacesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfacesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfacesShrinkRequest) SetNetworkInterfaceIdsShrink(v string) *DeleteNetworkInterfacesShrinkRequest {
	s.NetworkInterfaceIdsShrink = &v
	return s
}

type DeleteNetworkInterfacesResponseBody struct {
	// example:
	//
	// 125B04C7-3D0D-4245-AF96-14E3758E3F06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkInterfacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfacesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfacesResponseBody) SetRequestId(v string) *DeleteNetworkInterfacesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkInterfacesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNetworkInterfacesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNetworkInterfacesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkInterfacesResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkInterfacesResponse) SetHeaders(v map[string]*string) *DeleteNetworkInterfacesResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkInterfacesResponse) SetStatusCode(v int32) *DeleteNetworkInterfacesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkInterfacesResponse) SetBody(v *DeleteNetworkInterfacesResponseBody) *DeleteNetworkInterfacesResponse {
	s.Body = v
	return s
}

type DeleteObjectRequest struct {
	// The name of the bucket.
	//
	// This parameter is required.
	//
	// example:
	//
	// tets
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The name of the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// image5
	ObjectKey *string `json:"ObjectKey,omitempty" xml:"ObjectKey,omitempty"`
}

func (s DeleteObjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteObjectRequest) GoString() string {
	return s.String()
}

func (s *DeleteObjectRequest) SetBucketName(v string) *DeleteObjectRequest {
	s.BucketName = &v
	return s
}

func (s *DeleteObjectRequest) SetObjectKey(v string) *DeleteObjectRequest {
	s.ObjectKey = &v
	return s
}

type DeleteObjectResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// A5626B44-0189-443E-9816-D951F596CC89
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteObjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteObjectResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteObjectResponseBody) SetRequestId(v string) *DeleteObjectResponseBody {
	s.RequestId = &v
	return s
}

type DeleteObjectResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteObjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteObjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteObjectResponse) GoString() string {
	return s.String()
}

func (s *DeleteObjectResponse) SetHeaders(v map[string]*string) *DeleteObjectResponse {
	s.Headers = v
	return s
}

func (s *DeleteObjectResponse) SetStatusCode(v int32) *DeleteObjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteObjectResponse) SetBody(v *DeleteObjectResponseBody) *DeleteObjectResponse {
	s.Body = v
	return s
}

type DeleteSDGRequest struct {
	// The IDs of the SDGs that you want to delete.
	//
	// This parameter is required.
	SDGId []*string `json:"SDGId,omitempty" xml:"SDGId,omitempty" type:"Repeated"`
}

func (s DeleteSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSDGRequest) GoString() string {
	return s.String()
}

func (s *DeleteSDGRequest) SetSDGId(v []*string) *DeleteSDGRequest {
	s.SDGId = v
	return s
}

type DeleteSDGShrinkRequest struct {
	// The IDs of the SDGs that you want to delete.
	//
	// This parameter is required.
	SDGIdShrink *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s DeleteSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteSDGShrinkRequest) SetSDGIdShrink(v string) *DeleteSDGShrinkRequest {
	s.SDGIdShrink = &v
	return s
}

type DeleteSDGResponseBody struct {
	// The returned data object.
	Data *DeleteSDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 86A6D421-A0C7-4C01-8648-47377CA6A2CE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSDGResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSDGResponseBody) SetData(v *DeleteSDGResponseBodyData) *DeleteSDGResponseBody {
	s.Data = v
	return s
}

func (s *DeleteSDGResponseBody) SetRequestId(v string) *DeleteSDGResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSDGResponseBodyData struct {
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The execution result of the synchronization request.
	Result *DeleteSDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- true: All tasks are successful.
	//
	// 	- false: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteSDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteSDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteSDGResponseBodyData) SetMessage(v string) *DeleteSDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *DeleteSDGResponseBodyData) SetResult(v *DeleteSDGResponseBodyDataResult) *DeleteSDGResponseBodyData {
	s.Result = v
	return s
}

func (s *DeleteSDGResponseBodyData) SetSuccess(v bool) *DeleteSDGResponseBodyData {
	s.Success = &v
	return s
}

type DeleteSDGResponseBodyDataResult struct {
	// The number of failed tasks.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details about the failed tasks.
	FailedItems []*DeleteSDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful tasks.
	//
	// example:
	//
	// 1
	SuccessCount *int64 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s DeleteSDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteSDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *DeleteSDGResponseBodyDataResult) SetFailedCount(v int64) *DeleteSDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *DeleteSDGResponseBodyDataResult) SetFailedItems(v []*DeleteSDGResponseBodyDataResultFailedItems) *DeleteSDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *DeleteSDGResponseBodyDataResult) SetSuccessCount(v int64) *DeleteSDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type DeleteSDGResponseBodyDataResultFailedItems struct {
	// The error message.
	//
	// example:
	//
	// sdg not found
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// Description
	Item *DeleteSDGResponseBodyDataResultFailedItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Struct"`
}

func (s DeleteSDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s DeleteSDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *DeleteSDGResponseBodyDataResultFailedItems) SetErrMessage(v string) *DeleteSDGResponseBodyDataResultFailedItems {
	s.ErrMessage = &v
	return s
}

func (s *DeleteSDGResponseBodyDataResultFailedItems) SetItem(v *DeleteSDGResponseBodyDataResultFailedItemsItem) *DeleteSDGResponseBodyDataResultFailedItems {
	s.Item = v
	return s
}

type DeleteSDGResponseBodyDataResultFailedItemsItem struct {
	// The ID of the shared data group (SDG).
	//
	// example:
	//
	// sdg-dfet5vvvgy
	SdgId *string `json:"SdgId,omitempty" xml:"SdgId,omitempty"`
}

func (s DeleteSDGResponseBodyDataResultFailedItemsItem) String() string {
	return tea.Prettify(s)
}

func (s DeleteSDGResponseBodyDataResultFailedItemsItem) GoString() string {
	return s.String()
}

func (s *DeleteSDGResponseBodyDataResultFailedItemsItem) SetSdgId(v string) *DeleteSDGResponseBodyDataResultFailedItemsItem {
	s.SdgId = &v
	return s
}

type DeleteSDGResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSDGResponse) GoString() string {
	return s.String()
}

func (s *DeleteSDGResponse) SetHeaders(v map[string]*string) *DeleteSDGResponse {
	s.Headers = v
	return s
}

func (s *DeleteSDGResponse) SetStatusCode(v int32) *DeleteSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSDGResponse) SetBody(v *DeleteSDGResponseBody) *DeleteSDGResponse {
	s.Body = v
	return s
}

type DeleteSecurityGroupRequest struct {
	// The security group ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp67acfmxazb4ph***
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s DeleteSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupRequest) SetSecurityGroupId(v string) *DeleteSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

type DeleteSecurityGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupResponseBody) SetRequestId(v string) *DeleteSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSecurityGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteSecurityGroupResponse) SetHeaders(v map[string]*string) *DeleteSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteSecurityGroupResponse) SetStatusCode(v int32) *DeleteSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSecurityGroupResponse) SetBody(v *DeleteSecurityGroupResponseBody) *DeleteSecurityGroupResponse {
	s.Body = v
	return s
}

type DeleteSnapshotRequest struct {
	// The ID of the snapshot.
	//
	// This parameter is required.
	//
	// example:
	//
	// sp-bp1c0doj0taqyzzl****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s DeleteSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotRequest) SetSnapshotId(v string) *DeleteSnapshotRequest {
	s.SnapshotId = &v
	return s
}

type DeleteSnapshotResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotResponseBody) SetRequestId(v string) *DeleteSnapshotResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSnapshotResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotResponse) SetHeaders(v map[string]*string) *DeleteSnapshotResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnapshotResponse) SetStatusCode(v int32) *DeleteSnapshotResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSnapshotResponse) SetBody(v *DeleteSnapshotResponseBody) *DeleteSnapshotResponse {
	s.Body = v
	return s
}

type DeleteSnatEntryRequest struct {
	// The ID of the SNAT entry that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// snat-5tfi6f8gds82mjmlofeym****
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
}

func (s DeleteSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryRequest) SetSnatEntryId(v string) *DeleteSnatEntryRequest {
	s.SnatEntryId = &v
	return s
}

type DeleteSnatEntryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryResponseBody) SetRequestId(v string) *DeleteSnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSnatEntryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnatEntryResponse) SetHeaders(v map[string]*string) *DeleteSnatEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnatEntryResponse) SetStatusCode(v int32) *DeleteSnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSnatEntryResponse) SetBody(v *DeleteSnatEntryResponseBody) *DeleteSnatEntryResponse {
	s.Body = v
	return s
}

type DeleteSnatIpForSnatEntryRequest struct {
	// The ID of the SNAT entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// snat-5tfi6f8gds82mjmlofeym****
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	// The EIP that you want to delete from the SNAT entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// 120.72.56.71
	SnatIp *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
}

func (s DeleteSnatIpForSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatIpForSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnatIpForSnatEntryRequest) SetSnatEntryId(v string) *DeleteSnatIpForSnatEntryRequest {
	s.SnatEntryId = &v
	return s
}

func (s *DeleteSnatIpForSnatEntryRequest) SetSnatIp(v string) *DeleteSnatIpForSnatEntryRequest {
	s.SnatIp = &v
	return s
}

type DeleteSnatIpForSnatEntryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSnatIpForSnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatIpForSnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnatIpForSnatEntryResponseBody) SetRequestId(v string) *DeleteSnatIpForSnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSnatIpForSnatEntryResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSnatIpForSnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSnatIpForSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnatIpForSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnatIpForSnatEntryResponse) SetHeaders(v map[string]*string) *DeleteSnatIpForSnatEntryResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnatIpForSnatEntryResponse) SetStatusCode(v int32) *DeleteSnatIpForSnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSnatIpForSnatEntryResponse) SetBody(v *DeleteSnatIpForSnatEntryResponseBody) *DeleteSnatIpForSnatEntryResponse {
	s.Body = v
	return s
}

type DeleteStorageGatewayRequest struct {
	// The ID of the gateway.
	//
	// This parameter is required.
	//
	// example:
	//
	// sgw-****
	GatewayId *string `json:"GatewayId,omitempty" xml:"GatewayId,omitempty"`
}

func (s DeleteStorageGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteStorageGatewayRequest) SetGatewayId(v string) *DeleteStorageGatewayRequest {
	s.GatewayId = &v
	return s
}

type DeleteStorageGatewayResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 853D6E71-E087-1557-B65C-32BFBEE5CD97
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStorageGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStorageGatewayResponseBody) SetRequestId(v string) *DeleteStorageGatewayResponseBody {
	s.RequestId = &v
	return s
}

type DeleteStorageGatewayResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteStorageGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteStorageGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteStorageGatewayResponse) SetHeaders(v map[string]*string) *DeleteStorageGatewayResponse {
	s.Headers = v
	return s
}

func (s *DeleteStorageGatewayResponse) SetStatusCode(v int32) *DeleteStorageGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStorageGatewayResponse) SetBody(v *DeleteStorageGatewayResponseBody) *DeleteStorageGatewayResponse {
	s.Body = v
	return s
}

type DeleteStorageVolumeRequest struct {
	// The ID of the volume.
	//
	// This parameter is required.
	//
	// example:
	//
	// sv-***
	VolumeId *string `json:"VolumeId,omitempty" xml:"VolumeId,omitempty"`
}

func (s DeleteStorageVolumeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageVolumeRequest) GoString() string {
	return s.String()
}

func (s *DeleteStorageVolumeRequest) SetVolumeId(v string) *DeleteStorageVolumeRequest {
	s.VolumeId = &v
	return s
}

type DeleteStorageVolumeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 853D6E71-E087-1557-B65C-32BFBEE5CD97
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteStorageVolumeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageVolumeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStorageVolumeResponseBody) SetRequestId(v string) *DeleteStorageVolumeResponseBody {
	s.RequestId = &v
	return s
}

type DeleteStorageVolumeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteStorageVolumeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteStorageVolumeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStorageVolumeResponse) GoString() string {
	return s.String()
}

func (s *DeleteStorageVolumeResponse) SetHeaders(v map[string]*string) *DeleteStorageVolumeResponse {
	s.Headers = v
	return s
}

func (s *DeleteStorageVolumeResponse) SetStatusCode(v int32) *DeleteStorageVolumeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStorageVolumeResponse) SetBody(v *DeleteStorageVolumeResponseBody) *DeleteStorageVolumeResponse {
	s.Body = v
	return s
}

type DeleteVSwitchRequest struct {
	// The ID of the vSwitch.
	//
	// This parameter is required.
	//
	// example:
	//
	// vsw-5m9xhl****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DeleteVSwitchRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchRequest) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchRequest) SetVSwitchId(v string) *DeleteVSwitchRequest {
	s.VSwitchId = &v
	return s
}

type DeleteVSwitchResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVSwitchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchResponseBody) SetRequestId(v string) *DeleteVSwitchResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVSwitchResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteVSwitchResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteVSwitchResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVSwitchResponse) GoString() string {
	return s.String()
}

func (s *DeleteVSwitchResponse) SetHeaders(v map[string]*string) *DeleteVSwitchResponse {
	s.Headers = v
	return s
}

func (s *DeleteVSwitchResponse) SetStatusCode(v int32) *DeleteVSwitchResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVSwitchResponse) SetBody(v *DeleteVSwitchResponseBody) *DeleteVSwitchResponse {
	s.Body = v
	return s
}

type DeployInstanceSDGRequest struct {
	// The deployment type of the SDG. shared: shared read/write splitting deployment. The content of the SDG is read-only, and data updates are written to the local storage of the instance.
	//
	// example:
	//
	// shared
	DeploymentType *string `json:"DeploymentType,omitempty" xml:"DeploymentType,omitempty"`
	// The IDs of the instances. The value is a JSON array that consists of up to 100 IDs.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s DeployInstanceSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployInstanceSDGRequest) GoString() string {
	return s.String()
}

func (s *DeployInstanceSDGRequest) SetDeploymentType(v string) *DeployInstanceSDGRequest {
	s.DeploymentType = &v
	return s
}

func (s *DeployInstanceSDGRequest) SetInstanceIds(v []*string) *DeployInstanceSDGRequest {
	s.InstanceIds = v
	return s
}

func (s *DeployInstanceSDGRequest) SetSDGId(v string) *DeployInstanceSDGRequest {
	s.SDGId = &v
	return s
}

type DeployInstanceSDGShrinkRequest struct {
	// The deployment type of the SDG. shared: shared read/write splitting deployment. The content of the SDG is read-only, and data updates are written to the local storage of the instance.
	//
	// example:
	//
	// shared
	DeploymentType *string `json:"DeploymentType,omitempty" xml:"DeploymentType,omitempty"`
	// The IDs of the instances. The value is a JSON array that consists of up to 100 IDs.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s DeployInstanceSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployInstanceSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeployInstanceSDGShrinkRequest) SetDeploymentType(v string) *DeployInstanceSDGShrinkRequest {
	s.DeploymentType = &v
	return s
}

func (s *DeployInstanceSDGShrinkRequest) SetInstanceIdsShrink(v string) *DeployInstanceSDGShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *DeployInstanceSDGShrinkRequest) SetSDGId(v string) *DeployInstanceSDGShrinkRequest {
	s.SDGId = &v
	return s
}

type DeployInstanceSDGResponseBody struct {
	// The returned data object.
	Data *DeployInstanceSDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 125B04C7-3D0D-4245-AF96-14E3758E3F06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeployInstanceSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployInstanceSDGResponseBody) GoString() string {
	return s.String()
}

func (s *DeployInstanceSDGResponseBody) SetData(v *DeployInstanceSDGResponseBodyData) *DeployInstanceSDGResponseBody {
	s.Data = v
	return s
}

func (s *DeployInstanceSDGResponseBody) SetRequestId(v string) *DeployInstanceSDGResponseBody {
	s.RequestId = &v
	return s
}

type DeployInstanceSDGResponseBodyData struct {
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The execution result of the synchronization request.
	Result *DeployInstanceSDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- true: All tasks are successful.
	//
	// 	- false: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeployInstanceSDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeployInstanceSDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeployInstanceSDGResponseBodyData) SetMessage(v string) *DeployInstanceSDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *DeployInstanceSDGResponseBodyData) SetResult(v *DeployInstanceSDGResponseBodyDataResult) *DeployInstanceSDGResponseBodyData {
	s.Result = v
	return s
}

func (s *DeployInstanceSDGResponseBodyData) SetSuccess(v bool) *DeployInstanceSDGResponseBodyData {
	s.Success = &v
	return s
}

type DeployInstanceSDGResponseBodyDataResult struct {
	// The number of failed tasks.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details about the failed tasks.
	FailedItems []*DeployInstanceSDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful tasks.
	//
	// example:
	//
	// 1
	SuccessCount *int64 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s DeployInstanceSDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s DeployInstanceSDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *DeployInstanceSDGResponseBodyDataResult) SetFailedCount(v int64) *DeployInstanceSDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *DeployInstanceSDGResponseBodyDataResult) SetFailedItems(v []*DeployInstanceSDGResponseBodyDataResultFailedItems) *DeployInstanceSDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *DeployInstanceSDGResponseBodyDataResult) SetSuccessCount(v int64) *DeployInstanceSDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type DeployInstanceSDGResponseBodyDataResultFailedItems struct {
	// The error message that is returned.
	//
	// example:
	//
	// sdg not found
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// aic-xxxxx-0
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DeployInstanceSDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s DeployInstanceSDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *DeployInstanceSDGResponseBodyDataResultFailedItems) SetErrMessage(v string) *DeployInstanceSDGResponseBodyDataResultFailedItems {
	s.ErrMessage = &v
	return s
}

func (s *DeployInstanceSDGResponseBodyDataResultFailedItems) SetInstanceId(v string) *DeployInstanceSDGResponseBodyDataResultFailedItems {
	s.InstanceId = &v
	return s
}

type DeployInstanceSDGResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeployInstanceSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeployInstanceSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployInstanceSDGResponse) GoString() string {
	return s.String()
}

func (s *DeployInstanceSDGResponse) SetHeaders(v map[string]*string) *DeployInstanceSDGResponse {
	s.Headers = v
	return s
}

func (s *DeployInstanceSDGResponse) SetStatusCode(v int32) *DeployInstanceSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *DeployInstanceSDGResponse) SetBody(v *DeployInstanceSDGResponseBody) *DeployInstanceSDGResponse {
	s.Body = v
	return s
}

type DeploySDGRequest struct {
	// The SDG deployment type. Valid values:
	//
	// 	- common (default): read/write deployment. Data updates are written to disks.
	//
	// 	- overlay: read/write splitting deployment. Content in SDGs is read-only. Data updates are written to the local storage of the instance.
	//
	// example:
	//
	// common
	DeploymentType *string `json:"DeploymentType,omitempty" xml:"DeploymentType,omitempty"`
	// The IDs of instances on which you want to deploy SDGs. You can deploy SDGs on a maximum of 100 instances at a time.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The SDG ID. This parameter is used to create a disk, which is attached to an instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s DeploySDGRequest) String() string {
	return tea.Prettify(s)
}

func (s DeploySDGRequest) GoString() string {
	return s.String()
}

func (s *DeploySDGRequest) SetDeploymentType(v string) *DeploySDGRequest {
	s.DeploymentType = &v
	return s
}

func (s *DeploySDGRequest) SetInstanceIds(v []*string) *DeploySDGRequest {
	s.InstanceIds = v
	return s
}

func (s *DeploySDGRequest) SetSDGId(v string) *DeploySDGRequest {
	s.SDGId = &v
	return s
}

type DeploySDGShrinkRequest struct {
	// The SDG deployment type. Valid values:
	//
	// 	- common (default): read/write deployment. Data updates are written to disks.
	//
	// 	- overlay: read/write splitting deployment. Content in SDGs is read-only. Data updates are written to the local storage of the instance.
	//
	// example:
	//
	// common
	DeploymentType *string `json:"DeploymentType,omitempty" xml:"DeploymentType,omitempty"`
	// The IDs of instances on which you want to deploy SDGs. You can deploy SDGs on a maximum of 100 instances at a time.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The SDG ID. This parameter is used to create a disk, which is attached to an instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s DeploySDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeploySDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeploySDGShrinkRequest) SetDeploymentType(v string) *DeploySDGShrinkRequest {
	s.DeploymentType = &v
	return s
}

func (s *DeploySDGShrinkRequest) SetInstanceIdsShrink(v string) *DeploySDGShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *DeploySDGShrinkRequest) SetSDGId(v string) *DeploySDGShrinkRequest {
	s.SDGId = &v
	return s
}

type DeploySDGResponseBody struct {
	// The returned data object.
	Data *DeploySDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// A331CA96-3948-4BD2-B067-F6174F5C17EA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeploySDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeploySDGResponseBody) GoString() string {
	return s.String()
}

func (s *DeploySDGResponseBody) SetData(v *DeploySDGResponseBodyData) *DeploySDGResponseBody {
	s.Data = v
	return s
}

func (s *DeploySDGResponseBody) SetRequestId(v string) *DeploySDGResponseBody {
	s.RequestId = &v
	return s
}

type DeploySDGResponseBodyData struct {
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The task result.
	Result *DeploySDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- true: All tasks are successful.
	//
	// 	- false: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeploySDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeploySDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeploySDGResponseBodyData) SetMessage(v string) *DeploySDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *DeploySDGResponseBodyData) SetResult(v *DeploySDGResponseBodyDataResult) *DeploySDGResponseBodyData {
	s.Result = v
	return s
}

func (s *DeploySDGResponseBodyData) SetSuccess(v bool) *DeploySDGResponseBodyData {
	s.Success = &v
	return s
}

type DeploySDGResponseBodyDataResult struct {
	// The number of failed tasks.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details of failed tasks.
	FailedItems []*DeploySDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful tasks.
	//
	// example:
	//
	// 1
	SuccessCount *int64 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s DeploySDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s DeploySDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *DeploySDGResponseBodyDataResult) SetFailedCount(v int64) *DeploySDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *DeploySDGResponseBodyDataResult) SetFailedItems(v []*DeploySDGResponseBodyDataResultFailedItems) *DeploySDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *DeploySDGResponseBodyDataResult) SetSuccessCount(v int64) *DeploySDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type DeploySDGResponseBodyDataResultFailedItems struct {
	// The error message.
	//
	// example:
	//
	// sdg not found
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// aic-xxxxx-0
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DeploySDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s DeploySDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *DeploySDGResponseBodyDataResultFailedItems) SetErrMessage(v string) *DeploySDGResponseBodyDataResultFailedItems {
	s.ErrMessage = &v
	return s
}

func (s *DeploySDGResponseBodyDataResultFailedItems) SetInstanceId(v string) *DeploySDGResponseBodyDataResultFailedItems {
	s.InstanceId = &v
	return s
}

type DeploySDGResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeploySDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeploySDGResponse) String() string {
	return tea.Prettify(s)
}

func (s DeploySDGResponse) GoString() string {
	return s.String()
}

func (s *DeploySDGResponse) SetHeaders(v map[string]*string) *DeploySDGResponse {
	s.Headers = v
	return s
}

func (s *DeploySDGResponse) SetStatusCode(v int32) *DeploySDGResponse {
	s.StatusCode = &v
	return s
}

func (s *DeploySDGResponse) SetBody(v *DeploySDGResponseBody) *DeploySDGResponse {
	s.Body = v
	return s
}

type DescribeAICImagesRequest struct {
	// The description of the image.
	//
	// example:
	//
	// Test operation of console
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The image ID of the AIC instance.
	//
	// example:
	//
	// m-ad0ddaddc2d54adeaa09b7c0f1e****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The type of the image. Valid values:
	//
	// 	- **public**: public image
	//
	// 	- **private**: custom image
	//
	// example:
	//
	// public
	ImageType *string `json:"ImageType,omitempty" xml:"ImageType,omitempty"`
	// The URL of the AIC image repository.
	//
	// example:
	//
	// ****.alibaba-inc.com/aic/socimage:test
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2022-02-02
	MaxDate *string `json:"MaxDate,omitempty" xml:"MaxDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2022-01-02
	MinDate *string `json:"MinDate,omitempty" xml:"MinDate,omitempty"`
	// The page number. Pages start from page **1**. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. The maximum value is **100**. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The status of the image. Valid values:
	//
	// 	- **verifying**
	//
	// 	- **disable**
	//
	// 	- **available**
	//
	// example:
	//
	// available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAICImagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAICImagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAICImagesRequest) SetDescription(v string) *DescribeAICImagesRequest {
	s.Description = &v
	return s
}

func (s *DescribeAICImagesRequest) SetImageId(v string) *DescribeAICImagesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeAICImagesRequest) SetImageType(v string) *DescribeAICImagesRequest {
	s.ImageType = &v
	return s
}

func (s *DescribeAICImagesRequest) SetImageUrl(v string) *DescribeAICImagesRequest {
	s.ImageUrl = &v
	return s
}

func (s *DescribeAICImagesRequest) SetMaxDate(v string) *DescribeAICImagesRequest {
	s.MaxDate = &v
	return s
}

func (s *DescribeAICImagesRequest) SetMinDate(v string) *DescribeAICImagesRequest {
	s.MinDate = &v
	return s
}

func (s *DescribeAICImagesRequest) SetPageNumber(v string) *DescribeAICImagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAICImagesRequest) SetPageSize(v string) *DescribeAICImagesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAICImagesRequest) SetStatus(v string) *DescribeAICImagesRequest {
	s.Status = &v
	return s
}

type DescribeAICImagesResponseBody struct {
	// The information about the images.
	Images []*DescribeAICImagesResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Repeated"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 72DC6C0A-D9A8-5345-A2BE-FE354CC728A0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAICImagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAICImagesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAICImagesResponseBody) SetImages(v []*DescribeAICImagesResponseBodyImages) *DescribeAICImagesResponseBody {
	s.Images = v
	return s
}

func (s *DescribeAICImagesResponseBody) SetPageNumber(v int32) *DescribeAICImagesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeAICImagesResponseBody) SetPageSize(v int32) *DescribeAICImagesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeAICImagesResponseBody) SetRequestId(v string) *DescribeAICImagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAICImagesResponseBody) SetTotalCount(v int32) *DescribeAICImagesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeAICImagesResponseBodyImages struct {
	// The time when the image was created.
	//
	// example:
	//
	// 2022-09-22 10:54:34
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the image.
	//
	// example:
	//
	// Test operation of console
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The image ID of the AIC instance.
	//
	// example:
	//
	// m-ad0ddaddc2d54adeaa09b7c0f1e****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The URL of the AIC image repository.
	//
	// example:
	//
	// ****.alibaba-inc.com/aic/socimage:test
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	// The status of the image. **Available*	- is returned for this parameter. Available indicates that the image is available.
	//
	// example:
	//
	// available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The username of the image repository.
	//
	// example:
	//
	// user
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s DescribeAICImagesResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeAICImagesResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeAICImagesResponseBodyImages) SetCreationTime(v string) *DescribeAICImagesResponseBodyImages {
	s.CreationTime = &v
	return s
}

func (s *DescribeAICImagesResponseBodyImages) SetDescription(v string) *DescribeAICImagesResponseBodyImages {
	s.Description = &v
	return s
}

func (s *DescribeAICImagesResponseBodyImages) SetImageId(v string) *DescribeAICImagesResponseBodyImages {
	s.ImageId = &v
	return s
}

func (s *DescribeAICImagesResponseBodyImages) SetImageUrl(v string) *DescribeAICImagesResponseBodyImages {
	s.ImageUrl = &v
	return s
}

func (s *DescribeAICImagesResponseBodyImages) SetStatus(v string) *DescribeAICImagesResponseBodyImages {
	s.Status = &v
	return s
}

func (s *DescribeAICImagesResponseBodyImages) SetUser(v string) *DescribeAICImagesResponseBodyImages {
	s.User = &v
	return s
}

type DescribeAICImagesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAICImagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAICImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAICImagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAICImagesResponse) SetHeaders(v map[string]*string) *DescribeAICImagesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAICImagesResponse) SetStatusCode(v int32) *DescribeAICImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAICImagesResponse) SetBody(v *DescribeAICImagesResponseBody) *DescribeAICImagesResponse {
	s.Body = v
	return s
}

type DescribeARMServerInstancesRequest struct {
	// The container specifications.
	AICSpecs []*string `json:"AICSpecs,omitempty" xml:"AICSpecs,omitempty" type:"Repeated"`
	// Spcifies whether the result contains the container information. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	DescribeAICInstances *bool `json:"DescribeAICInstances,omitempty" xml:"DescribeAICInstances,omitempty"`
	// The IDs of the Edge Node Service (ENS) nodes.
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2006-01-03
	MaxDate *string `json:"MaxDate,omitempty" xml:"MaxDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2006-01-02
	MinDate *string `json:"MinDate,omitempty" xml:"MinDate,omitempty"`
	// The name of the server.
	//
	// example:
	//
	// Server-Name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace.
	//
	// example:
	//
	// default
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The sorting order of the results to return. Valid values: ServerIdSort, ServerNameSort, ExpireTimeSort, CreationTimeSort, and EnsRegionIdSort.
	//
	// asc: ascending order. desc: descending order.
	//
	// example:
	//
	// {"ServerIdSort":"desc","ServerNameSort":"desc","ExpireTimeSort":"asc","CreationTimeSort":"asc","EnsRegionIdSort":"asc"}
	OrderByParams *string `json:"OrderByParams,omitempty" xml:"OrderByParams,omitempty"`
	// The page number. Pages start from page **1**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. The maximum value is **100**.
	//
	// Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The IDs of the ARM servers.
	ServerIds []*string `json:"ServerIds,omitempty" xml:"ServerIds,omitempty" type:"Repeated"`
	// The server specifications.
	ServerSpecs []*string `json:"ServerSpecs,omitempty" xml:"ServerSpecs,omitempty" type:"Repeated"`
	// The operation statuses.
	States []*string `json:"States,omitempty" xml:"States,omitempty" type:"Repeated"`
}

func (s DescribeARMServerInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesRequest) SetAICSpecs(v []*string) *DescribeARMServerInstancesRequest {
	s.AICSpecs = v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetDescribeAICInstances(v bool) *DescribeARMServerInstancesRequest {
	s.DescribeAICInstances = &v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetEnsRegionIds(v []*string) *DescribeARMServerInstancesRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetMaxDate(v string) *DescribeARMServerInstancesRequest {
	s.MaxDate = &v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetMinDate(v string) *DescribeARMServerInstancesRequest {
	s.MinDate = &v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetName(v string) *DescribeARMServerInstancesRequest {
	s.Name = &v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetNamespace(v string) *DescribeARMServerInstancesRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetOrderByParams(v string) *DescribeARMServerInstancesRequest {
	s.OrderByParams = &v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetPageNumber(v int32) *DescribeARMServerInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetPageSize(v int32) *DescribeARMServerInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetServerIds(v []*string) *DescribeARMServerInstancesRequest {
	s.ServerIds = v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetServerSpecs(v []*string) *DescribeARMServerInstancesRequest {
	s.ServerSpecs = v
	return s
}

func (s *DescribeARMServerInstancesRequest) SetStates(v []*string) *DescribeARMServerInstancesRequest {
	s.States = v
	return s
}

type DescribeARMServerInstancesShrinkRequest struct {
	// The container specifications.
	AICSpecsShrink *string `json:"AICSpecs,omitempty" xml:"AICSpecs,omitempty"`
	// Spcifies whether the result contains the container information. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	DescribeAICInstances *bool `json:"DescribeAICInstances,omitempty" xml:"DescribeAICInstances,omitempty"`
	// The IDs of the Edge Node Service (ENS) nodes.
	EnsRegionIdsShrink *string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty"`
	// The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2006-01-03
	MaxDate *string `json:"MaxDate,omitempty" xml:"MaxDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2006-01-02
	MinDate *string `json:"MinDate,omitempty" xml:"MinDate,omitempty"`
	// The name of the server.
	//
	// example:
	//
	// Server-Name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace.
	//
	// example:
	//
	// default
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The sorting order of the results to return. Valid values: ServerIdSort, ServerNameSort, ExpireTimeSort, CreationTimeSort, and EnsRegionIdSort.
	//
	// asc: ascending order. desc: descending order.
	//
	// example:
	//
	// {"ServerIdSort":"desc","ServerNameSort":"desc","ExpireTimeSort":"asc","CreationTimeSort":"asc","EnsRegionIdSort":"asc"}
	OrderByParams *string `json:"OrderByParams,omitempty" xml:"OrderByParams,omitempty"`
	// The page number. Pages start from page **1**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. The maximum value is **100**.
	//
	// Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The IDs of the ARM servers.
	ServerIdsShrink *string `json:"ServerIds,omitempty" xml:"ServerIds,omitempty"`
	// The server specifications.
	ServerSpecsShrink *string `json:"ServerSpecs,omitempty" xml:"ServerSpecs,omitempty"`
	// The operation statuses.
	StatesShrink *string `json:"States,omitempty" xml:"States,omitempty"`
}

func (s DescribeARMServerInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesShrinkRequest) SetAICSpecsShrink(v string) *DescribeARMServerInstancesShrinkRequest {
	s.AICSpecsShrink = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetDescribeAICInstances(v bool) *DescribeARMServerInstancesShrinkRequest {
	s.DescribeAICInstances = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetEnsRegionIdsShrink(v string) *DescribeARMServerInstancesShrinkRequest {
	s.EnsRegionIdsShrink = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetMaxDate(v string) *DescribeARMServerInstancesShrinkRequest {
	s.MaxDate = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetMinDate(v string) *DescribeARMServerInstancesShrinkRequest {
	s.MinDate = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetName(v string) *DescribeARMServerInstancesShrinkRequest {
	s.Name = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetNamespace(v string) *DescribeARMServerInstancesShrinkRequest {
	s.Namespace = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetOrderByParams(v string) *DescribeARMServerInstancesShrinkRequest {
	s.OrderByParams = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetPageNumber(v int32) *DescribeARMServerInstancesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetPageSize(v int32) *DescribeARMServerInstancesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetServerIdsShrink(v string) *DescribeARMServerInstancesShrinkRequest {
	s.ServerIdsShrink = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetServerSpecsShrink(v string) *DescribeARMServerInstancesShrinkRequest {
	s.ServerSpecsShrink = &v
	return s
}

func (s *DescribeARMServerInstancesShrinkRequest) SetStatesShrink(v string) *DescribeARMServerInstancesShrinkRequest {
	s.StatesShrink = &v
	return s
}

type DescribeARMServerInstancesResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4EC47282-1B74-4534-BD0E-403F3EE64CAF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the servers and the AIC instances.
	Servers []*DescribeARMServerInstancesResponseBodyServers `json:"Servers,omitempty" xml:"Servers,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeARMServerInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponseBody) SetPageNumber(v int32) *DescribeARMServerInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBody) SetPageSize(v int32) *DescribeARMServerInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBody) SetRequestId(v string) *DescribeARMServerInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBody) SetServers(v []*DescribeARMServerInstancesResponseBodyServers) *DescribeARMServerInstancesResponseBody {
	s.Servers = v
	return s
}

func (s *DescribeARMServerInstancesResponseBody) SetTotalCount(v int32) *DescribeARMServerInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeARMServerInstancesResponseBodyServers struct {
	// The information about the AIC instances.
	AICInstances []*DescribeARMServerInstancesResponseBodyServersAICInstances `json:"AICInstances,omitempty" xml:"AICInstances,omitempty" type:"Repeated"`
	// The time when the instance was created.
	//
	// example:
	//
	// 2022-05-07 11:59:09
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-hanghzou-27
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The time when the instance expires.
	//
	// example:
	//
	// 2027-05-07 11:59:09
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The operation that was most recently performed.
	//
	// example:
	//
	// ServerCreate
	LatestAction *string `json:"LatestAction,omitempty" xml:"LatestAction,omitempty"`
	// The name of the server.
	//
	// example:
	//
	// Server-Name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The namespace of the cluster to which the server belongs.
	//
	// example:
	//
	// default
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The billing method.
	//
	// example:
	//
	// prepay
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The ID of the server.
	//
	// example:
	//
	// cas-******
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	// The server specification.
	//
	// example:
	//
	// cas.cf53r
	SpecName *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	// The operation status of the server. Valid values:
	//
	// 	- **success**
	//
	// 	- **failed**
	//
	// 	- **creating**
	//
	// 	- **releasing**
	//
	// 	- **rebooting**
	//
	// 	- **upgrading**
	//
	// example:
	//
	// success
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The running status of the server. Valid values:
	//
	// 	- **running**
	//
	// 	- **stopping**
	//
	// 	- **down**
	//
	// 	- **starting**
	//
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeARMServerInstancesResponseBodyServers) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponseBodyServers) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetAICInstances(v []*DescribeARMServerInstancesResponseBodyServersAICInstances) *DescribeARMServerInstancesResponseBodyServers {
	s.AICInstances = v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetCreationTime(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.CreationTime = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetEnsRegionId(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetExpiredTime(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetLatestAction(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.LatestAction = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetName(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.Name = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetNamespace(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.Namespace = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetPayType(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.PayType = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetServerId(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.ServerId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetSpecName(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.SpecName = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetState(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.State = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServers) SetStatus(v string) *DescribeARMServerInstancesResponseBodyServers {
	s.Status = &v
	return s
}

type DescribeARMServerInstancesResponseBodyServersAICInstances struct {
	// The refresh rate of the AIC instance. Unit: Hz.
	//
	// example:
	//
	// 120
	Frequency *int64 `json:"Frequency,omitempty" xml:"Frequency,omitempty"`
	// The ID of the AIC image.
	//
	// example:
	//
	// m-****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The ID of the AIC instance.
	//
	// example:
	//
	// aic-instance****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The operation that was most recently performed.
	//
	// example:
	//
	// ServerCreate
	LatestAction *string `json:"LatestAction,omitempty" xml:"LatestAction,omitempty"`
	// The name of the container.
	//
	// example:
	//
	// AIC-Name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The network attributes of the AIC instance.
	NetworkAttributes *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Struct"`
	// The resolution of the AIC instance.
	//
	// example:
	//
	// 1920*1080
	Resolution *string `json:"Resolution,omitempty" xml:"Resolution,omitempty"`
	// The information about the shared data group (SDG) that is deployed on the AIC instance.
	SdgDeployInfo *DescribeARMServerInstancesResponseBodyServersAICInstancesSdgDeployInfo `json:"SdgDeployInfo,omitempty" xml:"SdgDeployInfo,omitempty" type:"Struct"`
	// The specification of the AIC instance.
	//
	// example:
	//
	// aic.cf53r.c2.np
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	// The operation status of the AIC instance. Valid values:
	//
	// 	- **success**
	//
	// 	- **failed**
	//
	// 	- **creating**
	//
	// 	- **releasing**
	//
	// 	- **rebooting**
	//
	// 	- **reseting**
	//
	// example:
	//
	// success
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The running status of the AIC instance. Valid values:
	//
	// 	- **running**
	//
	// 	- **pending**
	//
	// 	- **terminating**
	//
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeARMServerInstancesResponseBodyServersAICInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponseBodyServersAICInstances) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetFrequency(v int64) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.Frequency = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetImageId(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.ImageId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetInstanceId(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetLatestAction(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.LatestAction = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetName(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.Name = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetNetworkAttributes(v *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.NetworkAttributes = v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetResolution(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.Resolution = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetSdgDeployInfo(v *DescribeARMServerInstancesResponseBodyServersAICInstancesSdgDeployInfo) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.SdgDeployInfo = v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetSpec(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.Spec = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetState(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.State = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstances) SetStatus(v string) *DescribeARMServerInstancesResponseBodyServersAICInstances {
	s.Status = &v
	return s
}

type DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes struct {
	// The IP address of the AIC instance.
	//
	// example:
	//
	// 192.168.XX.XX
	IpAddress *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	// The network ID of the AIC instance.
	//
	// example:
	//
	// n-*****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The vSwitch ID of the AIC instance.
	//
	// example:
	//
	// vsw-****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) SetIpAddress(v string) *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes {
	s.IpAddress = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) SetNetworkId(v string) *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes {
	s.NetworkId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes) SetVSwitchId(v string) *DescribeARMServerInstancesResponseBodyServersAICInstancesNetworkAttributes {
	s.VSwitchId = &v
	return s
}

type DescribeARMServerInstancesResponseBodyServersAICInstancesSdgDeployInfo struct {
	// The ID of the SDG.
	//
	// example:
	//
	// sdg-xxxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
	// The deployment status of the SDG. Valid values:
	//
	// 	- **sdg_deploying**
	//
	// 	- **failed**
	//
	// 	- **success**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeARMServerInstancesResponseBodyServersAICInstancesSdgDeployInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponseBodyServersAICInstancesSdgDeployInfo) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstancesSdgDeployInfo) SetSDGId(v string) *DescribeARMServerInstancesResponseBodyServersAICInstancesSdgDeployInfo {
	s.SDGId = &v
	return s
}

func (s *DescribeARMServerInstancesResponseBodyServersAICInstancesSdgDeployInfo) SetStatus(v string) *DescribeARMServerInstancesResponseBodyServersAICInstancesSdgDeployInfo {
	s.Status = &v
	return s
}

type DescribeARMServerInstancesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeARMServerInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeARMServerInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeARMServerInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeARMServerInstancesResponse) SetHeaders(v map[string]*string) *DescribeARMServerInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeARMServerInstancesResponse) SetStatusCode(v int32) *DescribeARMServerInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeARMServerInstancesResponse) SetBody(v *DescribeARMServerInstancesResponseBody) *DescribeARMServerInstancesResponse {
	s.Body = v
	return s
}

type DescribeApplicationRequest struct {
	// The ID of the application. You can call the ListApplications operation to obtain the application ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// a2bac6f4-75dc-455e-8389-2dc8e47526d3
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The version number of the application. Separate multiple version numbers with commas (,). If you want to query data of all versions of applications, specify All for this parameter. By default, only data of applications in the stable versions are queried.
	//
	// example:
	//
	// v1,v2
	AppVersions *string `json:"AppVersions,omitempty" xml:"AppVersions,omitempty"`
	// The region level by which edge resources of the application are collected. The value is of the enumeration type. Valid values:
	//
	// 	- National: Chinese mainland
	//
	// 	- Big: area
	//
	// 	- Middle: province
	//
	// 	- Small: city
	//
	// 	- RegionId: edge node
	//
	// Default value: National.
	//
	// example:
	//
	// National
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// Specifies whether to return other information about the application, such as statistics on resource instances and pods. The value must be a JSON string. By default, all information is returned.
	//
	// example:
	//
	// {\\"appInfo\\":true,\\"detailStat\\": true, \\"appVersionStat\\": true, \\"districtStat\\":true ,\\"instanceStat\\": true, \\"podCountStat\\": true}
	OutDetailStatParams *string `json:"OutDetailStatParams,omitempty" xml:"OutDetailStatParams,omitempty"`
	// The resource filter.
	//
	// example:
	//
	// [{\\"regionCode\\": \\"cn-wuxi-telecom_unicom_cmcc-3\\",    \\"ispCode\\": \\"telecom\\",    \\"count\\": 2	},{    \\"regionCode\\": \\"cn-shanghai-cmcc\\",    \\"count\\": 4	}]
	ResourceSelector *string `json:"ResourceSelector,omitempty" xml:"ResourceSelector,omitempty"`
}

func (s DescribeApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationRequest) SetAppId(v string) *DescribeApplicationRequest {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationRequest) SetAppVersions(v string) *DescribeApplicationRequest {
	s.AppVersions = &v
	return s
}

func (s *DescribeApplicationRequest) SetLevel(v string) *DescribeApplicationRequest {
	s.Level = &v
	return s
}

func (s *DescribeApplicationRequest) SetOutDetailStatParams(v string) *DescribeApplicationRequest {
	s.OutDetailStatParams = &v
	return s
}

func (s *DescribeApplicationRequest) SetResourceSelector(v string) *DescribeApplicationRequest {
	s.ResourceSelector = &v
	return s
}

type DescribeApplicationResponseBody struct {
	// The returned application information.
	//
	// example:
	//
	// {
	//
	//     "AppMetaData":{
	//
	//         "AppId":"b0b27670-87d5-4c40-9ea8-adeeec2986ce",
	//
	//         "AppName":"asp-yz",
	//
	//         "ClusterName":"poc",
	//
	//         "AppStableVersion":"0825",
	//
	//         "AppType":"Scheduler",
	//
	//         "Description":"Daily testing CPU environment",
	//
	//         "CreateTime":"2020-08-25 16:36:16"
	//
	//     },
	//
	//     "AppStatus":{
	//
	//         "Phase":"RUNNING",
	//
	//         "StatusDescrip":"{\\"status\\":\\"UPDATE_SUCCESS\\",\\"step\\":\\"DONE\\",\\"descrip\\":\\"delVersion success\\",\\"start_time\\":\\"2021-08-18 14:46:45\\"}",
	//
	//         "UpdateTime":"2021-08-18 14:46:45"
	//
	//     },
	//
	//     "ResourceAttribute":{
	//
	//         "ResourceType":"Ens",
	//
	//         "ResourceAgent":"Linux",
	//
	//         "InstanceSpec":"ens.sn1.large",
	//
	//         "SystemDiskSize":40,
	//
	//         "DataDiskSize":0,
	//
	//         "BandwithOut":10,
	//
	//         "SchedulingStrategy":"Disperse",
	//
	//         "AreaLevel":"RegionId",
	//
	//         "IpType":"PublicIP"
	//
	//     },
	//
	//     "WorkloadAttribute":[
	//
	//         {
	//
	//             "Name":"andorid",
	//
	//             "PodCount":7,
	//
	//             "ServiceConfig":{
	//
	//                 "PortsBindConfig":{
	//
	//                     "NetServiceContainer":"aspserver-android",
	//
	//                     "Ports":[
	//
	//                         {
	//
	//                             "Protocol":"TCP",
	//
	//                             "BindType":"PassThrough",
	//
	//                             "StartNodePorts":"5000-5000",
	//
	//                             "ContainerPorts":"5000-5000"
	//
	//                         },
	//
	//                         {
	//
	//                             "Protocol":"UDP",
	//
	//                             "BindType":"PassThrough",
	//
	//                             "StartNodePorts":"4001-4010",
	//
	//                             "ContainerPorts":"4001-4010"
	//
	//                         }
	//
	//                     ]
	//
	//                 },
	//
	//                 "ServiceContainerName":"android"
	//
	//             }
	//
	//         },
	//
	//         {
	//
	//             "Name":"aic-manager",
	//
	//             "PodCount":1,
	//
	//             "ServiceConfig":null
	//
	//         }
	//
	//     ],
	//
	//     "DetailStat":{
	//
	//         "Level":"Small",
	//
	//         "InstanceTotalCount":1,
	//
	//         "InstanceRunningCount":0,
	//
	//         "PodCountStat":[
	//
	//             {
	//
	//                 "Name":"andorid",
	//
	//                 "RunningCount":7,
	//
	//                 "ProducedCount":7,
	//
	//                 "Devices":null
	//
	//             },
	//
	//             {
	//
	//                 "Name":"aic-manager",
	//
	//                 "RunningCount":1,
	//
	//                 "ProducedCount":1,
	//
	//                 "Devices":null
	//
	//             }
	//
	//         ],
	//
	//         "AppVersionStat":[
	//
	//             {
	//
	//                 "AppVersion":"08102",
	//
	//                 "Descrip":"White Screen Test 2",
	//
	//                 "CreateTime":"2021-08-10 11:20:04",
	//
	//                 "InstanceTotalCount":1,
	//
	//                 "InstanceRunningCount":0,
	//
	//                 "PodCountStat":[
	//
	//                     {
	//
	//                         "Name":"andorid",
	//
	//                         "RunningCount":7,
	//
	//                         "ProducedCount":7,
	//
	//                         "Devices":null
	//
	//                     },
	//
	//                     {
	//
	//                         "Name":"aic-manager",
	//
	//                         "RunningCount":1,
	//
	//                         "ProducedCount":1,
	//
	//                         "Devices":null
	//
	//                     }
	//
	//                 ],
	//
	//                 "DistrictStat":[
	//
	//                     {
	//
	//                         "AreaCode":"310100",
	//
	//                         "AreaName":"East China,,",
	//
	//                         "RegionCode":"310100",
	//
	//                         "RegionName":"",
	//
	//                         "IspCode":"telecom",
	//
	//                         "RegionIds":[
	//
	//                             "cn-shanghai-telecom-2"
	//
	//                         ],
	//
	//                         "InstanceTotalCount":1,
	//
	//                         "InstanceRunningCount":0,
	//
	//                         "PodCountStat":[
	//
	//                             {
	//
	//                                 "Name":"andorid",
	//
	//                                 "RunningCount":7,
	//
	//                                 "ProducedCount":7,
	//
	//                                 "Devices":null
	//
	//                             },
	//
	//                             {
	//
	//                                 "Name":"aic-manager",
	//
	//                                 "RunningCount":1,
	//
	//                                 "ProducedCount":1,
	//
	//                                 "Devices":null
	//
	//                             }
	//
	//                         ],
	//
	//                         "InstanceStat":[
	//
	//                             {
	//
	//                                 "InstanceId":"i-xxxxxxx",
	//
	//                                 "PublicIps":[
	//
	//                                     {
	//
	//                                         "PublicIp":"101.227.7.12",
	//
	//                                         "Isp":"telecom"
	//
	//                                     }
	//
	//                                 ],
	//
	//                                 "InternalIps":[
	//
	//                                     {
	//
	//                                         "Ip":"10.0.1.4"
	//
	//                                     }
	//
	//                                 ],
	//
	//                                 "RegionId":"cn-shanghai-telecom-2",
	//
	//                                 "NcName":"",
	//
	//                                 "InstanceStatus":"",
	//
	//                                 "CreateTime":"2020-09-12 22:33:08",
	//
	//                                 "PodCountStat":[
	//
	//                                     {
	//
	//                                         "Name":"andorid",
	//
	//                                         "RunningCount":7,
	//
	//                                         "ProducedCount":7,
	//
	//                                         "Devices":[
	//
	//                                             {
	//
	//                                                 "Name":"asp-yz-andorid-08102-zjzmcyaw-0",
	//
	//                                                 "Status":"Running",
	//
	//                                                 "Ports":null
	//
	//                                             },
	//
	//                                             {
	//
	//                                                 "Name":"asp-yz-andorid-08102-zjzmcyaw-1",
	//
	//                                                 "Status":"Running",
	//
	//                                                 "Ports":null
	//
	//                                             },
	//
	//                                             {
	//
	//                                                 "Name":"asp-yz-andorid-08102-zjzmcyaw-2",
	//
	//                                                 "Status":"Running",
	//
	//                                                 "Ports":null
	//
	//                                             },
	//
	//                                             {
	//
	//                                                 "Name":"asp-yz-andorid-08102-zjzmcyaw-3",
	//
	//                                                 "Status":"Running",
	//
	//                                                 "Ports":null
	//
	//                                             },
	//
	//                                             {
	//
	//                                                 "Name":"asp-yz-andorid-08102-zjzmcyaw-4",
	//
	//                                                 "Status":"Running",
	//
	//                                                 "Ports":null
	//
	//                                             },
	//
	//                                             {
	//
	//                                                 "Name":"asp-yz-andorid-08102-zjzmcyaw-5",
	//
	//                                                 "Status":"Running",
	//
	//                                                 "Ports":null
	//
	//                                             },
	//
	//                                             {
	//
	//                                                 "Name":"asp-yz-andorid-08102-zjzmcyaw-6",
	//
	//                                                 "Status":"Running",
	//
	//                                                 "Ports":null
	//
	//                                             }
	//
	//                                         ]
	//
	//                                     },
	//
	//                                     {
	//
	//                                         "Name":"aic-manager",
	//
	//                                         "RunningCount":1,
	//
	//                                         "ProducedCount":1,
	//
	//                                         "Devices":[
	//
	//                                             {
	//
	//                                                 "Name":"asp-yz-aic-manager-08102-zjzmcyaw-0",
	//
	//                                                 "Status":"Running",
	//
	//                                                 "Ports":null
	//
	//                                             }
	//
	//                                         ]
	//
	//                                     }
	//
	//                                 ],
	//
	//                                 "AppVersionDescrip":""
	//
	//                             }
	//
	//                         ]
	//
	//                     }
	//
	//                 ]
	//
	//             }
	//
	//         ]
	//
	//     }
	//
	// }
	Application *string `json:"Application,omitempty" xml:"Application,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationResponseBody) SetApplication(v string) *DescribeApplicationResponseBody {
	s.Application = &v
	return s
}

func (s *DescribeApplicationResponseBody) SetRequestId(v string) *DescribeApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DescribeApplicationResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationResponse) SetHeaders(v map[string]*string) *DescribeApplicationResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationResponse) SetStatusCode(v int32) *DescribeApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeApplicationResponse) SetBody(v *DescribeApplicationResponseBody) *DescribeApplicationResponse {
	s.Body = v
	return s
}

type DescribeAvailableResourceResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the images.
	Images *DescribeAvailableResourceResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	// The ID of the request. This is a common parameter. Each request has a unique ID. You can use this ID to troubleshoot issues.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The specifications of resources that you can purchase.
	SupportResources *DescribeAvailableResourceResponseBodySupportResources `json:"SupportResources,omitempty" xml:"SupportResources,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBody) SetCode(v int32) *DescribeAvailableResourceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAvailableResourceResponseBody) SetImages(v *DescribeAvailableResourceResponseBodyImages) *DescribeAvailableResourceResponseBody {
	s.Images = v
	return s
}

func (s *DescribeAvailableResourceResponseBody) SetRequestId(v string) *DescribeAvailableResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBody) SetSupportResources(v *DescribeAvailableResourceResponseBodySupportResources) *DescribeAvailableResourceResponseBody {
	s.SupportResources = v
	return s
}

type DescribeAvailableResourceResponseBodyImages struct {
	Image []*DescribeAvailableResourceResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyImages) SetImage(v []*DescribeAvailableResourceResponseBodyImagesImage) *DescribeAvailableResourceResponseBodyImages {
	s.Image = v
	return s
}

type DescribeAvailableResourceResponseBodyImagesImage struct {
	// The ID of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_alibase_20171208
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_alibase_****
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
}

func (s DescribeAvailableResourceResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodyImagesImage) SetImageId(v string) *DescribeAvailableResourceResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodyImagesImage) SetImageName(v string) *DescribeAvailableResourceResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

type DescribeAvailableResourceResponseBodySupportResources struct {
	SupportResource []*DescribeAvailableResourceResponseBodySupportResourcesSupportResource `json:"SupportResource,omitempty" xml:"SupportResource,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceResponseBodySupportResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodySupportResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodySupportResources) SetSupportResource(v []*DescribeAvailableResourceResponseBodySupportResourcesSupportResource) *DescribeAvailableResourceResponseBodySupportResources {
	s.SupportResource = v
	return s
}

type DescribeAvailableResourceResponseBodySupportResourcesSupportResource struct {
	// The size of the data disk. Unit: GB.
	//
	// example:
	//
	// 500
	DataDiskSize *string `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The specifications of the resource plan.
	//
	// example:
	//
	// ens.sn1.stiny
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The number of resources that you can purchase.
	//
	// example:
	//
	// 9
	SupportResourcesCount *string `json:"SupportResourcesCount,omitempty" xml:"SupportResourcesCount,omitempty"`
	// The size of the system disk. Unit: GiB.
	//
	// example:
	//
	// 20
	SystemDiskSize *string `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s DescribeAvailableResourceResponseBodySupportResourcesSupportResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponseBodySupportResourcesSupportResource) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponseBodySupportResourcesSupportResource) SetDataDiskSize(v string) *DescribeAvailableResourceResponseBodySupportResourcesSupportResource {
	s.DataDiskSize = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodySupportResourcesSupportResource) SetEnsRegionId(v string) *DescribeAvailableResourceResponseBodySupportResourcesSupportResource {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodySupportResourcesSupportResource) SetInstanceSpec(v string) *DescribeAvailableResourceResponseBodySupportResourcesSupportResource {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodySupportResourcesSupportResource) SetSupportResourcesCount(v string) *DescribeAvailableResourceResponseBodySupportResourcesSupportResource {
	s.SupportResourcesCount = &v
	return s
}

func (s *DescribeAvailableResourceResponseBodySupportResourcesSupportResource) SetSystemDiskSize(v string) *DescribeAvailableResourceResponseBodySupportResourcesSupportResource {
	s.SystemDiskSize = &v
	return s
}

type DescribeAvailableResourceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAvailableResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAvailableResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceResponse) SetHeaders(v map[string]*string) *DescribeAvailableResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableResourceResponse) SetStatusCode(v int32) *DescribeAvailableResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvailableResourceResponse) SetBody(v *DescribeAvailableResourceResponseBody) *DescribeAvailableResourceResponse {
	s.Body = v
	return s
}

type DescribeAvailableResourceInfoResponseBody struct {
	// The information about the image.
	Images *DescribeAvailableResourceInfoResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 8629F679-B51D-4194-A1CC-5D8F504C362B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The specifications of resources that you can purchase.
	SupportResources *DescribeAvailableResourceInfoResponseBodySupportResources `json:"SupportResources,omitempty" xml:"SupportResources,omitempty" type:"Struct"`
}

func (s DescribeAvailableResourceInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBody) SetImages(v *DescribeAvailableResourceInfoResponseBodyImages) *DescribeAvailableResourceInfoResponseBody {
	s.Images = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBody) SetRequestId(v string) *DescribeAvailableResourceInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBody) SetSupportResources(v *DescribeAvailableResourceInfoResponseBodySupportResources) *DescribeAvailableResourceInfoResponseBody {
	s.SupportResources = v
	return s
}

type DescribeAvailableResourceInfoResponseBodyImages struct {
	Image []*DescribeAvailableResourceInfoResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodyImages) SetImage(v []*DescribeAvailableResourceInfoResponseBodyImagesImage) *DescribeAvailableResourceInfoResponseBodyImages {
	s.Image = v
	return s
}

type DescribeAvailableResourceInfoResponseBodyImagesImage struct {
	// The ID of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_a****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_a****
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The size of the image. Unit: GB.
	//
	// example:
	//
	// 20
	ImageSize *int32 `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
}

func (s DescribeAvailableResourceInfoResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodyImagesImage) SetImageId(v string) *DescribeAvailableResourceInfoResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodyImagesImage) SetImageName(v string) *DescribeAvailableResourceInfoResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodyImagesImage) SetImageSize(v int32) *DescribeAvailableResourceInfoResponseBodyImagesImage {
	s.ImageSize = &v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResources struct {
	SupportResource []*DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource `json:"SupportResource,omitempty" xml:"SupportResource,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResources) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResources) SetSupportResource(v []*DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) *DescribeAvailableResourceInfoResponseBodySupportResources {
	s.SupportResource = v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource struct {
	// Bandwidth billing method.
	BandwidthTypes *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes `json:"BandwidthTypes,omitempty" xml:"BandwidthTypes,omitempty" type:"Struct"`
	// The maximum capacity of a data disk. Unit: GB.
	//
	// example:
	//
	// 200
	DataDiskMaxSize *int32 `json:"DataDiskMaxSize,omitempty" xml:"DataDiskMaxSize,omitempty"`
	// The minimum data disk size. Unit: GiB.
	//
	// example:
	//
	// 100
	DataDiskMinSize *int32 `json:"DataDiskMinSize,omitempty" xml:"DataDiskMinSize,omitempty"`
	// node ID
	EnsRegionIds *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Struct"`
	// The supplementary information about the edge nodes.
	EnsRegionIdsExtends *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends `json:"EnsRegionIdsExtends,omitempty" xml:"EnsRegionIdsExtends,omitempty" type:"Struct"`
	InstanceSpeces      *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces      `json:"InstanceSpeces,omitempty" xml:"InstanceSpeces,omitempty" type:"Struct"`
	// Operator
	Isp *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceIsp `json:"Isp,omitempty" xml:"Isp,omitempty" type:"Struct"`
	// The maximum size of the system disk. Unit: GiB.
	//
	// example:
	//
	// 100
	SystemDiskMaxSize *int32 `json:"SystemDiskMaxSize,omitempty" xml:"SystemDiskMaxSize,omitempty"`
	// The minimum capacity of a system disk. Unit: GB.
	//
	// example:
	//
	// 20
	SystemDiskMinSize *int32 `json:"SystemDiskMinSize,omitempty" xml:"SystemDiskMinSize,omitempty"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetBandwidthTypes(v *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.BandwidthTypes = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetDataDiskMaxSize(v int32) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.DataDiskMaxSize = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetDataDiskMinSize(v int32) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.DataDiskMinSize = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetEnsRegionIds(v *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetEnsRegionIdsExtends(v *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.EnsRegionIdsExtends = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetInstanceSpeces(v *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.InstanceSpeces = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetIsp(v *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceIsp) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.Isp = v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetSystemDiskMaxSize(v int32) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.SystemDiskMaxSize = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetSystemDiskMinSize(v int32) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.SystemDiskMinSize = &v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes struct {
	BandwidthType []*string `json:"BandwidthType,omitempty" xml:"BandwidthType,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes) SetBandwidthType(v []*string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceBandwidthTypes {
	s.BandwidthType = v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds struct {
	EnsRegionId []*string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds) SetEnsRegionId(v []*string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIds {
	s.EnsRegionId = v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends struct {
	EnsRegionId []*DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends) SetEnsRegionId(v []*DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtends {
	s.EnsRegionId = v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId struct {
	// The region.
	//
	// example:
	//
	// EastChina
	Area *string `json:"Area,omitempty" xml:"Area,omitempty"`
	// The name. This parameter is empty by default.
	//
	// example:
	//
	// EnName
	EnName *string `json:"EnName,omitempty" xml:"EnName,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-chengdu-telecom-4
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The information about the Internet service provider (ISP).
	//
	// example:
	//
	// unicom
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The name of the edge node.
	//
	// example:
	//
	// Taizhou Telecom, China Unicom, and China Mobile
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The province.
	//
	// example:
	//
	// Zhejiang Province
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetArea(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.Area = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetEnName(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.EnName = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetEnsRegionId(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetIsp(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.Isp = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetName(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.Name = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId) SetProvince(v string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceEnsRegionIdsExtendsEnsRegionId {
	s.Province = &v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces struct {
	InstanceSpec []*string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces) SetInstanceSpec(v []*string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceInstanceSpeces {
	s.InstanceSpec = v
	return s
}

type DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceIsp struct {
	Isp []*string `json:"Isp,omitempty" xml:"Isp,omitempty" type:"Repeated"`
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceIsp) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceIsp) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceIsp) SetIsp(v []*string) *DescribeAvailableResourceInfoResponseBodySupportResourcesSupportResourceIsp {
	s.Isp = v
	return s
}

type DescribeAvailableResourceInfoResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAvailableResourceInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAvailableResourceInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAvailableResourceInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeAvailableResourceInfoResponse) SetHeaders(v map[string]*string) *DescribeAvailableResourceInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeAvailableResourceInfoResponse) SetStatusCode(v int32) *DescribeAvailableResourceInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAvailableResourceInfoResponse) SetBody(v *DescribeAvailableResourceInfoResponseBody) *DescribeAvailableResourceInfoResponse {
	s.Body = v
	return s
}

type DescribeBandWithdChargeTypeResponseBody struct {
	// The information about the metering method.
	//
	// example:
	//
	// { "BandWidthName": "Monthly peak bandwidth of 95", 			"BandWidthType": "95BandwidthByMonth" 		}
	BandWithTypeInfo *string `json:"BandWithTypeInfo,omitempty" xml:"BandWithTypeInfo,omitempty"`
	// The metering type.
	//
	// 	- ChargeByUnified: unified metering.
	//
	// 	- ChargeByGrade: differential metering.
	//
	// example:
	//
	// ChargeByGrade
	ChargeContractType *string `json:"ChargeContractType,omitempty" xml:"ChargeContractType,omitempty"`
	// The metering cycle. Currently, this parameter is empty in the response.
	//
	// example:
	//
	// {null}
	ChargeCycleInfo *string `json:"ChargeCycleInfo,omitempty" xml:"ChargeCycleInfo,omitempty"`
	// The returned service code. A value of 0 indicates that the operation was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 791049FD-49CE-4667-BD6C-F23094DEDA7A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBandWithdChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandWithdChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBandWithdChargeTypeResponseBody) SetBandWithTypeInfo(v string) *DescribeBandWithdChargeTypeResponseBody {
	s.BandWithTypeInfo = &v
	return s
}

func (s *DescribeBandWithdChargeTypeResponseBody) SetChargeContractType(v string) *DescribeBandWithdChargeTypeResponseBody {
	s.ChargeContractType = &v
	return s
}

func (s *DescribeBandWithdChargeTypeResponseBody) SetChargeCycleInfo(v string) *DescribeBandWithdChargeTypeResponseBody {
	s.ChargeCycleInfo = &v
	return s
}

func (s *DescribeBandWithdChargeTypeResponseBody) SetCode(v int32) *DescribeBandWithdChargeTypeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeBandWithdChargeTypeResponseBody) SetRequestId(v string) *DescribeBandWithdChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBandWithdChargeTypeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBandWithdChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBandWithdChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandWithdChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeBandWithdChargeTypeResponse) SetHeaders(v map[string]*string) *DescribeBandWithdChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeBandWithdChargeTypeResponse) SetStatusCode(v int32) *DescribeBandWithdChargeTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBandWithdChargeTypeResponse) SetBody(v *DescribeBandWithdChargeTypeResponseBody) *DescribeBandWithdChargeTypeResponse {
	s.Body = v
	return s
}

type DescribeBandwitdhByInternetChargeTypeRequest struct {
	// The end of the time range to query.
	//
	// 	- Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- If the value of the seconds place is not 00, the start time is automatically set to the next minute.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-01-18T09:39:54Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou-cbn-2
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The Internet service provider (ISP). Valid values:
	//
	// 	- cmcc: China Mobile
	//
	// 	- telecom: China Telecom
	//
	// 	- unicom: China Unicom
	//
	// 	- multiCarrier: multi-line ISP
	//
	// example:
	//
	// unicom
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The beginning of the time range to query.
	//
	// 	- Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- If the value of the seconds place is not 00, the start time is automatically set to the next minute.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-11-15T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeBandwitdhByInternetChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwitdhByInternetChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeBandwitdhByInternetChargeTypeRequest) SetEndTime(v string) *DescribeBandwitdhByInternetChargeTypeRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeRequest) SetEnsRegionId(v string) *DescribeBandwitdhByInternetChargeTypeRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeRequest) SetIsp(v string) *DescribeBandwitdhByInternetChargeTypeRequest {
	s.Isp = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeRequest) SetStartTime(v string) *DescribeBandwitdhByInternetChargeTypeRequest {
	s.StartTime = &v
	return s
}

type DescribeBandwitdhByInternetChargeTypeResponseBody struct {
	// The bandwidth. Unit: bit/s.
	//
	// example:
	//
	// 123
	BandwidthValue *int64 `json:"BandwidthValue,omitempty" xml:"BandwidthValue,omitempty"`
	// The metering method. Valid values:
	//
	// 	- BandwidthByDay: Pay by daily peak bandwidth
	//
	// 	- 95BandwidthByMonth: Pay by monthly 95th percentile bandwidth
	//
	// 	- PayByBandwidth4thMonth: Pay by monthly fourth peak bandwidth
	//
	// 	- PayByBandwidth: Pay by fixed bandwidth
	//
	// You can specify only one metering method for network usage and cannot overwrite the existing metering method.
	//
	// example:
	//
	// 95BandwidthByMonth
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The ID of the request. This parameter is a common parameter. Each request has a unique ID. You can use the ID to troubleshoot issues.
	//
	// example:
	//
	// 08027633-8501-5A36-B90D-F7C38B5EC75D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The timestamp. The time follows the ISO 8601 standard. The time is displayed in UTC. Example: 2016-10-20T04:00:00Z.
	//
	// example:
	//
	// 2019-10-12T05:45:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeBandwitdhByInternetChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwitdhByInternetChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBandwitdhByInternetChargeTypeResponseBody) SetBandwidthValue(v int64) *DescribeBandwitdhByInternetChargeTypeResponseBody {
	s.BandwidthValue = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeResponseBody) SetInternetChargeType(v string) *DescribeBandwitdhByInternetChargeTypeResponseBody {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeResponseBody) SetRequestId(v string) *DescribeBandwitdhByInternetChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeResponseBody) SetTimeStamp(v string) *DescribeBandwitdhByInternetChargeTypeResponseBody {
	s.TimeStamp = &v
	return s
}

type DescribeBandwitdhByInternetChargeTypeResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBandwitdhByInternetChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBandwitdhByInternetChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBandwitdhByInternetChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeBandwitdhByInternetChargeTypeResponse) SetHeaders(v map[string]*string) *DescribeBandwitdhByInternetChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeResponse) SetStatusCode(v int32) *DescribeBandwitdhByInternetChargeTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBandwitdhByInternetChargeTypeResponse) SetBody(v *DescribeBandwitdhByInternetChargeTypeResponseBody) *DescribeBandwitdhByInternetChargeTypeResponse {
	s.Body = v
	return s
}

type DescribeCloudDiskAvailableResourceInfoResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 0AE4F26E-7527-569F-A987-E3CF269A3C11
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The specifications of resources that you can purchase.
	SupportResources *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources `json:"SupportResources,omitempty" xml:"SupportResources,omitempty" type:"Struct"`
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBody) SetRequestId(v string) *DescribeCloudDiskAvailableResourceInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBody) SetSupportResources(v *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources) *DescribeCloudDiskAvailableResourceInfoResponseBody {
	s.SupportResources = v
	return s
}

type DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources struct {
	SupportResource []*DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource `json:"SupportResource,omitempty" xml:"SupportResource,omitempty" type:"Repeated"`
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources) SetSupportResource(v []*DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResources {
	s.SupportResource = v
	return s
}

type DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource struct {
	// Node product capability.
	Ability *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResourceAbility `json:"Ability,omitempty" xml:"Ability,omitempty" type:"Struct"`
	// The number of disks that you can purchase.
	//
	// example:
	//
	// 2
	CanBuyCount *int64 `json:"CanBuyCount,omitempty" xml:"CanBuyCount,omitempty"`
	// The type of the disk.
	//
	// 	- cloud_efficiency:ultra disk.
	//
	// 	- cloud_ssd:all-flash disk.
	//
	// 	- local_hdd:local HDD.
	//
	// 	- local_ssd:local SSD.
	//
	// example:
	//
	// cloud_ssd
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The default size of the disk. Unit: GiB.
	//
	// example:
	//
	// 20
	DefaultDiskSize *int64 `json:"DefaultDiskSize,omitempty" xml:"DefaultDiskSize,omitempty"`
	// The maximum size of the disk. Unit: GiB.
	//
	// example:
	//
	// 80
	DiskMaxSize *int64 `json:"DiskMaxSize,omitempty" xml:"DiskMaxSize,omitempty"`
	// The minimum size of the disk size. Unit: GiB.
	//
	// example:
	//
	// 20
	DiskMinSize *int64 `json:"DiskMinSize,omitempty" xml:"DiskMinSize,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the task node.
	//
	// example:
	//
	// Beijing Mobile
	EnsRegionName *string `json:"EnsRegionName,omitempty" xml:"EnsRegionName,omitempty"`
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetAbility(v *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResourceAbility) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.Ability = v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetCanBuyCount(v int64) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.CanBuyCount = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetCategory(v string) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.Category = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetDefaultDiskSize(v int64) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.DefaultDiskSize = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetDiskMaxSize(v int64) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.DiskMaxSize = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetDiskMinSize(v int64) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.DiskMinSize = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetEnsRegionId(v string) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource) SetEnsRegionName(v string) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResource {
	s.EnsRegionName = &v
	return s
}

type DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResourceAbility struct {
	Ability []*string `json:"Ability,omitempty" xml:"Ability,omitempty" type:"Repeated"`
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResourceAbility) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResourceAbility) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResourceAbility) SetAbility(v []*string) *DescribeCloudDiskAvailableResourceInfoResponseBodySupportResourcesSupportResourceAbility {
	s.Ability = v
	return s
}

type DescribeCloudDiskAvailableResourceInfoResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudDiskAvailableResourceInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudDiskAvailableResourceInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskAvailableResourceInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskAvailableResourceInfoResponse) SetHeaders(v map[string]*string) *DescribeCloudDiskAvailableResourceInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponse) SetStatusCode(v int32) *DescribeCloudDiskAvailableResourceInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudDiskAvailableResourceInfoResponse) SetBody(v *DescribeCloudDiskAvailableResourceInfoResponseBody) *DescribeCloudDiskAvailableResourceInfoResponse {
	s.Body = v
	return s
}

type DescribeCloudDiskTypesRequest struct {
	// The ID of the edge node.
	//
	// example:
	//
	// cn-chongqing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The edge nodes.
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
}

func (s DescribeCloudDiskTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesRequest) SetEnsRegionId(v string) *DescribeCloudDiskTypesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeCloudDiskTypesRequest) SetEnsRegionIds(v []*string) *DescribeCloudDiskTypesRequest {
	s.EnsRegionIds = v
	return s
}

type DescribeCloudDiskTypesShrinkRequest struct {
	// The ID of the edge node.
	//
	// example:
	//
	// cn-chongqing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The edge nodes.
	EnsRegionIdsShrink *string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty"`
}

func (s DescribeCloudDiskTypesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesShrinkRequest) SetEnsRegionId(v string) *DescribeCloudDiskTypesShrinkRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeCloudDiskTypesShrinkRequest) SetEnsRegionIdsShrink(v string) *DescribeCloudDiskTypesShrinkRequest {
	s.EnsRegionIdsShrink = &v
	return s
}

type DescribeCloudDiskTypesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 77990CEE-B714-5702-BDE6-943F702277DD
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The specifications of resources that you can purchase.
	SupportResources *DescribeCloudDiskTypesResponseBodySupportResources `json:"SupportResources,omitempty" xml:"SupportResources,omitempty" type:"Struct"`
}

func (s DescribeCloudDiskTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesResponseBody) SetRequestId(v string) *DescribeCloudDiskTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudDiskTypesResponseBody) SetSupportResources(v *DescribeCloudDiskTypesResponseBodySupportResources) *DescribeCloudDiskTypesResponseBody {
	s.SupportResources = v
	return s
}

type DescribeCloudDiskTypesResponseBodySupportResources struct {
	SupportResource []*DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource `json:"SupportResource,omitempty" xml:"SupportResource,omitempty" type:"Repeated"`
}

func (s DescribeCloudDiskTypesResponseBodySupportResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesResponseBodySupportResources) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesResponseBodySupportResources) SetSupportResource(v []*DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource) *DescribeCloudDiskTypesResponseBodySupportResources {
	s.SupportResource = v
	return s
}

type DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource struct {
	// The category of the disk.
	//
	// 	- cloud_efficiency: ultra disk.
	//
	// 	- cloud_ssd: all-flash disk.
	//
	// 	- local_hdd: local HDD.
	//
	// 	- local_ssd: local SSD.
	//
	// example:
	//
	// cloud_efficiency
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-guangzhou-10
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource) SetCategory(v string) *DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource {
	s.Category = &v
	return s
}

func (s *DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource) SetEnsRegionId(v string) *DescribeCloudDiskTypesResponseBodySupportResourcesSupportResource {
	s.EnsRegionId = &v
	return s
}

type DescribeCloudDiskTypesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudDiskTypesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudDiskTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDiskTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudDiskTypesResponse) SetHeaders(v map[string]*string) *DescribeCloudDiskTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudDiskTypesResponse) SetStatusCode(v int32) *DescribeCloudDiskTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudDiskTypesResponse) SetBody(v *DescribeCloudDiskTypesResponseBody) *DescribeCloudDiskTypesResponse {
	s.Body = v
	return s
}

type DescribeClusterRequest struct {
	// The cluster ID.
	//
	// example:
	//
	// c8f0377146d104687ac562eef9403****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterRequest) SetClusterId(v string) *DescribeClusterRequest {
	s.ClusterId = &v
	return s
}

type DescribeClusterResponseBody struct {
	// An array that consists of the information about clusters.
	Clusters []*DescribeClusterResponseBodyClusters `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterResponseBody) SetClusters(v []*DescribeClusterResponseBodyClusters) *DescribeClusterResponseBody {
	s.Clusters = v
	return s
}

func (s *DescribeClusterResponseBody) SetRequestId(v string) *DescribeClusterResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterResponseBodyClusters struct {
	// The cluster ID.
	//
	// example:
	//
	// c8f0377146d104687ac562eef9403****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The version of the cluster.
	//
	// example:
	//
	// 1.18.8
	CurrentVersion *string `json:"CurrentVersion,omitempty" xml:"CurrentVersion,omitempty"`
	// The cluster name.
	//
	// example:
	//
	// vc-a622bb**
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The next version of the cluster.
	//
	// example:
	//
	// 1.20.8
	NextVersion *string `json:"NextVersion,omitempty" xml:"NextVersion,omitempty"`
	// The health status of the instance.
	//
	// Valid values:
	//
	// 	- healthy
	//
	// 	- unhealthy
	//
	// example:
	//
	// healthy
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClusterResponseBodyClusters) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResponseBodyClusters) GoString() string {
	return s.String()
}

func (s *DescribeClusterResponseBodyClusters) SetClusterId(v string) *DescribeClusterResponseBodyClusters {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterResponseBodyClusters) SetCurrentVersion(v string) *DescribeClusterResponseBodyClusters {
	s.CurrentVersion = &v
	return s
}

func (s *DescribeClusterResponseBodyClusters) SetName(v string) *DescribeClusterResponseBodyClusters {
	s.Name = &v
	return s
}

func (s *DescribeClusterResponseBodyClusters) SetNextVersion(v string) *DescribeClusterResponseBodyClusters {
	s.NextVersion = &v
	return s
}

func (s *DescribeClusterResponseBodyClusters) SetStatus(v string) *DescribeClusterResponseBodyClusters {
	s.Status = &v
	return s
}

type DescribeClusterResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterResponse) SetHeaders(v map[string]*string) *DescribeClusterResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterResponse) SetStatusCode(v int32) *DescribeClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterResponse) SetBody(v *DescribeClusterResponseBody) *DescribeClusterResponse {
	s.Body = v
	return s
}

type DescribeClusterKubeConfigRequest struct {
	// The cluster ID.
	//
	// example:
	//
	// c8f0377146d104687ac562eef9403****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeClusterKubeConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterKubeConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterKubeConfigRequest) SetClusterId(v string) *DescribeClusterKubeConfigRequest {
	s.ClusterId = &v
	return s
}

type DescribeClusterKubeConfigResponseBody struct {
	// The cluster ID.
	//
	// example:
	//
	// c8f0377146d104687ac562eef9403****
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	// The cluster certificate.
	//
	// example:
	//
	// apiVersion: v1
	//
	// clusters:
	//
	// - cluster:
	//
	//     certificate-authority-data:***
	//
	//     server: https://****:6443
	//
	//   name: kubernetes
	//
	// contexts:
	//
	// - context:
	//
	//     cluster: kubernetes
	//
	//     user: "2580306074811*****"
	//
	//   name: 258*******
	//
	// kind: Config
	//
	// users:
	//
	// - name: "2580306074811*****"
	//
	//   user:
	//
	//     client-certificate-data:***
	//
	//     client-key-data: ***
	Kubeconfig *string `json:"Kubeconfig,omitempty" xml:"Kubeconfig,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterKubeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterKubeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterKubeConfigResponseBody) SetClusterId(v string) *DescribeClusterKubeConfigResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterKubeConfigResponseBody) SetKubeconfig(v string) *DescribeClusterKubeConfigResponseBody {
	s.Kubeconfig = &v
	return s
}

func (s *DescribeClusterKubeConfigResponseBody) SetRequestId(v string) *DescribeClusterKubeConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterKubeConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterKubeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterKubeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterKubeConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterKubeConfigResponse) SetHeaders(v map[string]*string) *DescribeClusterKubeConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterKubeConfigResponse) SetStatusCode(v int32) *DescribeClusterKubeConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterKubeConfigResponse) SetBody(v *DescribeClusterKubeConfigResponseBody) *DescribeClusterKubeConfigResponse {
	s.Body = v
	return s
}

type DescribeCreatePrePaidInstanceResultRequest struct {
	// The ID of the instance. You can call the CreateIntance operation to create an instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-6ecpqvkicnchxccozrp****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeCreatePrePaidInstanceResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreatePrePaidInstanceResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeCreatePrePaidInstanceResultRequest) SetInstanceId(v string) *DescribeCreatePrePaidInstanceResultRequest {
	s.InstanceId = &v
	return s
}

type DescribeCreatePrePaidInstanceResultResponseBody struct {
	// Returned results of creating an instance.
	InstanceCreateResult *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult `json:"InstanceCreateResult,omitempty" xml:"InstanceCreateResult,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// AAE90880-4970-4D81-A534-A6C0F3631F74
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCreatePrePaidInstanceResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreatePrePaidInstanceResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCreatePrePaidInstanceResultResponseBody) SetInstanceCreateResult(v *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult) *DescribeCreatePrePaidInstanceResultResponseBody {
	s.InstanceCreateResult = v
	return s
}

func (s *DescribeCreatePrePaidInstanceResultResponseBody) SetRequestId(v string) *DescribeCreatePrePaidInstanceResultResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult struct {
	// The status of the instance creation.
	//
	// 	- Accepted
	//
	// 	- Creating
	//
	// 	- Failed
	//
	// 	- Successed
	//
	// example:
	//
	// Successed
	InstanceCreateStatus *string `json:"InstanceCreateStatus,omitempty" xml:"InstanceCreateStatus,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-6ecpqvkicnchxccozrpxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult) GoString() string {
	return s.String()
}

func (s *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult) SetInstanceCreateStatus(v string) *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult {
	s.InstanceCreateStatus = &v
	return s
}

func (s *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult) SetInstanceId(v string) *DescribeCreatePrePaidInstanceResultResponseBodyInstanceCreateResult {
	s.InstanceId = &v
	return s
}

type DescribeCreatePrePaidInstanceResultResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCreatePrePaidInstanceResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCreatePrePaidInstanceResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCreatePrePaidInstanceResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeCreatePrePaidInstanceResultResponse) SetHeaders(v map[string]*string) *DescribeCreatePrePaidInstanceResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeCreatePrePaidInstanceResultResponse) SetStatusCode(v int32) *DescribeCreatePrePaidInstanceResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCreatePrePaidInstanceResultResponse) SetBody(v *DescribeCreatePrePaidInstanceResultResponseBody) *DescribeCreatePrePaidInstanceResultResponse {
	s.Body = v
	return s
}

type DescribeDataDistResultRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// e76f8985-7965-41fc-925b-9648bb6bf650
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the data file. Separate multiple names with commas (,). By default, all data files are queried.
	//
	// example:
	//
	// cloudgame-shanghai/deploy_app/20220215/1644895216305ACG_M21B-ota-1.1.2-D-0215.0628_V1_0002-pre-weiduan.zip
	DataNames *string `json:"DataNames,omitempty" xml:"DataNames,omitempty"`
	// The version number of the data file. Separate multiple numbers with commas (,). By default, all versions of data files are queried.
	//
	// example:
	//
	// 4885
	DataVersions *string `json:"DataVersions,omitempty" xml:"DataVersions,omitempty"`
	// The IDs of the ENS nodes.
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The IDs of ENS instances. Separate multiple IDs with commas (,). By default, all instances are queried.
	//
	// example:
	//
	// i-7ecpqvkicnchxccozrp,i-6ecpqvkicnchxccozrp
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2022-02-01
	MaxDate *string `json:"MaxDate,omitempty" xml:"MaxDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2022-01-02
	MinDate *string `json:"MinDate,omitempty" xml:"MinDate,omitempty"`
	// The page number. Pages start from page 1. This parameter is optional if you want to return the distribution status of all data files.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. This parameter is optional if you want to return the distribution status of all data files.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDataDistResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultRequest) SetAppId(v string) *DescribeDataDistResultRequest {
	s.AppId = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetDataNames(v string) *DescribeDataDistResultRequest {
	s.DataNames = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetDataVersions(v string) *DescribeDataDistResultRequest {
	s.DataVersions = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetEnsRegionIds(v []*string) *DescribeDataDistResultRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeDataDistResultRequest) SetInstanceIds(v string) *DescribeDataDistResultRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetMaxDate(v string) *DescribeDataDistResultRequest {
	s.MaxDate = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetMinDate(v string) *DescribeDataDistResultRequest {
	s.MinDate = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetPageNumber(v int32) *DescribeDataDistResultRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataDistResultRequest) SetPageSize(v int32) *DescribeDataDistResultRequest {
	s.PageSize = &v
	return s
}

type DescribeDataDistResultShrinkRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// e76f8985-7965-41fc-925b-9648bb6bf650
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the data file. Separate multiple names with commas (,). By default, all data files are queried.
	//
	// example:
	//
	// cloudgame-shanghai/deploy_app/20220215/1644895216305ACG_M21B-ota-1.1.2-D-0215.0628_V1_0002-pre-weiduan.zip
	DataNames *string `json:"DataNames,omitempty" xml:"DataNames,omitempty"`
	// The version number of the data file. Separate multiple numbers with commas (,). By default, all versions of data files are queried.
	//
	// example:
	//
	// 4885
	DataVersions *string `json:"DataVersions,omitempty" xml:"DataVersions,omitempty"`
	// The IDs of the ENS nodes.
	EnsRegionIdsShrink *string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty"`
	// The IDs of ENS instances. Separate multiple IDs with commas (,). By default, all instances are queried.
	//
	// example:
	//
	// i-7ecpqvkicnchxccozrp,i-6ecpqvkicnchxccozrp
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2022-02-01
	MaxDate *string `json:"MaxDate,omitempty" xml:"MaxDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2022-01-02
	MinDate *string `json:"MinDate,omitempty" xml:"MinDate,omitempty"`
	// The page number. Pages start from page 1. This parameter is optional if you want to return the distribution status of all data files.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. This parameter is optional if you want to return the distribution status of all data files.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeDataDistResultShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultShrinkRequest) SetAppId(v string) *DescribeDataDistResultShrinkRequest {
	s.AppId = &v
	return s
}

func (s *DescribeDataDistResultShrinkRequest) SetDataNames(v string) *DescribeDataDistResultShrinkRequest {
	s.DataNames = &v
	return s
}

func (s *DescribeDataDistResultShrinkRequest) SetDataVersions(v string) *DescribeDataDistResultShrinkRequest {
	s.DataVersions = &v
	return s
}

func (s *DescribeDataDistResultShrinkRequest) SetEnsRegionIdsShrink(v string) *DescribeDataDistResultShrinkRequest {
	s.EnsRegionIdsShrink = &v
	return s
}

func (s *DescribeDataDistResultShrinkRequest) SetInstanceIds(v string) *DescribeDataDistResultShrinkRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeDataDistResultShrinkRequest) SetMaxDate(v string) *DescribeDataDistResultShrinkRequest {
	s.MaxDate = &v
	return s
}

func (s *DescribeDataDistResultShrinkRequest) SetMinDate(v string) *DescribeDataDistResultShrinkRequest {
	s.MinDate = &v
	return s
}

func (s *DescribeDataDistResultShrinkRequest) SetPageNumber(v int32) *DescribeDataDistResultShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataDistResultShrinkRequest) SetPageSize(v int32) *DescribeDataDistResultShrinkRequest {
	s.PageSize = &v
	return s
}

type DescribeDataDistResultResponseBody struct {
	// The distribution status of data files on edge instances.
	DistResults *DescribeDataDistResultResponseBodyDistResults `json:"DistResults,omitempty" xml:"DistResults,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 50373E71-7710-4620-8AAB-133CCE49451C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 49
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDataDistResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBody) SetDistResults(v *DescribeDataDistResultResponseBodyDistResults) *DescribeDataDistResultResponseBody {
	s.DistResults = v
	return s
}

func (s *DescribeDataDistResultResponseBody) SetPageNumber(v int32) *DescribeDataDistResultResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataDistResultResponseBody) SetPageSize(v int32) *DescribeDataDistResultResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDataDistResultResponseBody) SetRequestId(v string) *DescribeDataDistResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataDistResultResponseBody) SetTotalCount(v int32) *DescribeDataDistResultResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDataDistResultResponseBodyDistResults struct {
	DistResult []*DescribeDataDistResultResponseBodyDistResultsDistResult `json:"DistResult,omitempty" xml:"DistResult,omitempty" type:"Repeated"`
}

func (s DescribeDataDistResultResponseBodyDistResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResults) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResults) SetDistResult(v []*DescribeDataDistResultResponseBodyDistResultsDistResult) *DescribeDataDistResultResponseBodyDistResults {
	s.DistResult = v
	return s
}

type DescribeDataDistResultResponseBodyDistResultsDistResult struct {
	// The name of the data file.
	//
	// example:
	//
	// gcs-prod-websocket-eip-unicom
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The distribution status statistics.
	StatusStats *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats `json:"StatusStats,omitempty" xml:"StatusStats,omitempty" type:"Struct"`
	// The version number of the data file.
	//
	// example:
	//
	// standard
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResult) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResult) SetName(v string) *DescribeDataDistResultResponseBodyDistResultsDistResult {
	s.Name = &v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResult) SetStatusStats(v *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats) *DescribeDataDistResultResponseBodyDistResultsDistResult {
	s.StatusStats = v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResult) SetVersion(v string) *DescribeDataDistResultResponseBodyDistResultsDistResult {
	s.Version = &v
	return s
}

type DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats struct {
	StatusStat []*DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat `json:"StatusStat,omitempty" xml:"StatusStat,omitempty" type:"Repeated"`
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats) SetStatusStat(v []*DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStats {
	s.StatusStat = v
	return s
}

type DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat struct {
	// The number of associated edge instances.
	//
	// example:
	//
	// 10
	InstanceCount *string `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// The distribution status of the edge instance.
	Instances *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	// The distribution status. The value is of the enumeration type. Valid values:
	//
	// 	- SUCCESS: The distribution is successful.
	//
	// 	- FAILED: The distribution failed.
	//
	// 	- DISTING: The data is being distributed.
	//
	// 	- POD_RESTARTING: The idle pod is being restarted.
	//
	// 	- DELETED: The data is cleared or removed.
	//
	// example:
	//
	// SUCCESS
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) SetInstanceCount(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat {
	s.InstanceCount = &v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) SetInstances(v *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat {
	s.Instances = v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat) SetStatus(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStat {
	s.Status = &v
	return s
}

type DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances struct {
	Instance []*DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Repeated"`
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances) SetInstance(v []*DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstances {
	s.Instance = v
	return s
}

type DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance struct {
	// The ID of the instance
	//
	// example:
	//
	// i-5qzje8f5un1wmi341m2yetaxv
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The start time of the distribution. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-11-19T07:24:52Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The description of the distribution status.
	//
	// example:
	//
	// SUCCESS
	StatusDescrip *string `json:"StatusDescrip,omitempty" xml:"StatusDescrip,omitempty"`
	// The time when the distribution status was last updated. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-10-11T02:38:19Z
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) SetInstanceId(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) SetStartTime(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance {
	s.StartTime = &v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) SetStatusDescrip(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance {
	s.StatusDescrip = &v
	return s
}

func (s *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance) SetUpdateTime(v string) *DescribeDataDistResultResponseBodyDistResultsDistResultStatusStatsStatusStatInstancesInstance {
	s.UpdateTime = &v
	return s
}

type DescribeDataDistResultResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataDistResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataDistResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDistResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataDistResultResponse) SetHeaders(v map[string]*string) *DescribeDataDistResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataDistResultResponse) SetStatusCode(v int32) *DescribeDataDistResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataDistResultResponse) SetBody(v *DescribeDataDistResultResponseBody) *DescribeDataDistResultResponse {
	s.Body = v
	return s
}

type DescribeDataDownloadURLRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 474bdef0-d149-4695-abfb-52912d9143f0
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the data file.
	//
	// This parameter is required.
	//
	// example:
	//
	// mirror_file/pk-1642597182026-878199448832413.tar
	DataName *string `json:"DataName,omitempty" xml:"DataName,omitempty"`
	// The version number of the data file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7895
	DataVersion *string `json:"DataVersion,omitempty" xml:"DataVersion,omitempty"`
	// This parameter is reserved.
	//
	// example:
	//
	// 600
	ExpireTimeout *int64 `json:"ExpireTimeout,omitempty" xml:"ExpireTimeout,omitempty"`
	// The condition that you want to use to filter file servers. You can specify multiple canary release policies. By default, all resources are queried.
	//
	// example:
	//
	// {\\"name\\": \\"ScheduleToRegionId\\",\\"parameters\\":{\\"operator\\": \\"In\\",\\"values\\": [\\"cn-shijiazhuang-telecom_unicom_cmcc\\"]}}
	ServerFilterStrategy *string `json:"ServerFilterStrategy,omitempty" xml:"ServerFilterStrategy,omitempty"`
}

func (s DescribeDataDownloadURLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDownloadURLRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataDownloadURLRequest) SetAppId(v string) *DescribeDataDownloadURLRequest {
	s.AppId = &v
	return s
}

func (s *DescribeDataDownloadURLRequest) SetDataName(v string) *DescribeDataDownloadURLRequest {
	s.DataName = &v
	return s
}

func (s *DescribeDataDownloadURLRequest) SetDataVersion(v string) *DescribeDataDownloadURLRequest {
	s.DataVersion = &v
	return s
}

func (s *DescribeDataDownloadURLRequest) SetExpireTimeout(v int64) *DescribeDataDownloadURLRequest {
	s.ExpireTimeout = &v
	return s
}

func (s *DescribeDataDownloadURLRequest) SetServerFilterStrategy(v string) *DescribeDataDownloadURLRequest {
	s.ServerFilterStrategy = &v
	return s
}

type DescribeDataDownloadURLResponseBody struct {
	// The HTTP status code.
	//
	// example:
	//
	// 0
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The download URLs of data files.
	Data *DescribeDataDownloadURLResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// Success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDataDownloadURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDownloadURLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataDownloadURLResponseBody) SetCode(v int64) *DescribeDataDownloadURLResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDataDownloadURLResponseBody) SetData(v *DescribeDataDownloadURLResponseBodyData) *DescribeDataDownloadURLResponseBody {
	s.Data = v
	return s
}

func (s *DescribeDataDownloadURLResponseBody) SetMessage(v string) *DescribeDataDownloadURLResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDataDownloadURLResponseBody) SetRequestId(v string) *DescribeDataDownloadURLResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDataDownloadURLResponseBodyData struct {
	// The time when the data file expires. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-12-10T03:36:27Z
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The file servers.
	ServerList []*DescribeDataDownloadURLResponseBodyDataServerList `json:"ServerList,omitempty" xml:"ServerList,omitempty" type:"Repeated"`
	// The download URL of the data file.
	//
	// example:
	//
	// /file/1450088842124331/97a32f2a-aa2c-436a-b19c-05b20d258618/f0313053530fc727f81b7d03fad93cd2/e4c2e8edac362acab7123654b9e73432?ak=edgepaas-innerapi-daily&ts=1611229454&sign=Yycbax%2F4OsTgm6BLoxR6lPs5gKE%3D
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeDataDownloadURLResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDownloadURLResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeDataDownloadURLResponseBodyData) SetExpireTime(v string) *DescribeDataDownloadURLResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDataDownloadURLResponseBodyData) SetServerList(v []*DescribeDataDownloadURLResponseBodyDataServerList) *DescribeDataDownloadURLResponseBodyData {
	s.ServerList = v
	return s
}

func (s *DescribeDataDownloadURLResponseBodyData) SetUrl(v string) *DescribeDataDownloadURLResponseBodyData {
	s.Url = &v
	return s
}

type DescribeDataDownloadURLResponseBodyDataServerList struct {
	// The host address of the file server.
	//
	// example:
	//
	// 1.1.1.1:8080
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// example:
	//
	// cn-chenzhou-5
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDataDownloadURLResponseBodyDataServerList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDownloadURLResponseBodyDataServerList) GoString() string {
	return s.String()
}

func (s *DescribeDataDownloadURLResponseBodyDataServerList) SetHost(v string) *DescribeDataDownloadURLResponseBodyDataServerList {
	s.Host = &v
	return s
}

func (s *DescribeDataDownloadURLResponseBodyDataServerList) SetRegionId(v string) *DescribeDataDownloadURLResponseBodyDataServerList {
	s.RegionId = &v
	return s
}

type DescribeDataDownloadURLResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataDownloadURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataDownloadURLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataDownloadURLResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataDownloadURLResponse) SetHeaders(v map[string]*string) *DescribeDataDownloadURLResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataDownloadURLResponse) SetStatusCode(v int32) *DescribeDataDownloadURLResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataDownloadURLResponse) SetBody(v *DescribeDataDownloadURLResponseBody) *DescribeDataDownloadURLResponse {
	s.Body = v
	return s
}

type DescribeDataPushResultRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// e76f8985-7965-41fc-925b-9648bb6bf650
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the data file. Separate multiple names with commas (,). By default, all data files are queried.
	//
	// example:
	//
	// 159828628258496/mirror_file/game-2553efe7-7bf8-40fb-a6e7-09c9c00a992a.tar
	DataNames *string `json:"DataNames,omitempty" xml:"DataNames,omitempty"`
	// The version number of the data file. Separate multiple numbers with commas (,). By default, all versions of data files are queried.
	//
	// example:
	//
	// 90396
	DataVersions *string `json:"DataVersions,omitempty" xml:"DataVersions,omitempty"`
	// The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2022-02-20
	MaxDate *string `json:"MaxDate,omitempty" xml:"MaxDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2022-02-15
	MinDate *string `json:"MinDate,omitempty" xml:"MinDate,omitempty"`
	// The page number. Pages start from page 1. This parameter is optional if you want to return the push status of all data files.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. This parameter is optional if you want to return the push status of all data files.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The IDs of ENS nodes. Separate multiple IDs with commas (,). By default, all ENS nodes are queried.
	//
	// example:
	//
	// cn-wuhan-telecom_unicom_cmcc-2,cn-jiaozuo-2
	RegionIds *string `json:"RegionIds,omitempty" xml:"RegionIds,omitempty"`
}

func (s DescribeDataPushResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultRequest) SetAppId(v string) *DescribeDataPushResultRequest {
	s.AppId = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetDataNames(v string) *DescribeDataPushResultRequest {
	s.DataNames = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetDataVersions(v string) *DescribeDataPushResultRequest {
	s.DataVersions = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetMaxDate(v string) *DescribeDataPushResultRequest {
	s.MaxDate = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetMinDate(v string) *DescribeDataPushResultRequest {
	s.MinDate = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetPageNumber(v int32) *DescribeDataPushResultRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetPageSize(v int32) *DescribeDataPushResultRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDataPushResultRequest) SetRegionIds(v string) *DescribeDataPushResultRequest {
	s.RegionIds = &v
	return s
}

type DescribeDataPushResultResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The push results of data files.
	PushResults *DescribeDataPushResultResponseBodyPushResults `json:"PushResults,omitempty" xml:"PushResults,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 6
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDataPushResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBody) SetPageNumber(v int32) *DescribeDataPushResultResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDataPushResultResponseBody) SetPageSize(v int32) *DescribeDataPushResultResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDataPushResultResponseBody) SetPushResults(v *DescribeDataPushResultResponseBodyPushResults) *DescribeDataPushResultResponseBody {
	s.PushResults = v
	return s
}

func (s *DescribeDataPushResultResponseBody) SetRequestId(v string) *DescribeDataPushResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataPushResultResponseBody) SetTotalCount(v int32) *DescribeDataPushResultResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDataPushResultResponseBodyPushResults struct {
	PushResult []*DescribeDataPushResultResponseBodyPushResultsPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Repeated"`
}

func (s DescribeDataPushResultResponseBodyPushResults) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResults) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResults) SetPushResult(v []*DescribeDataPushResultResponseBodyPushResultsPushResult) *DescribeDataPushResultResponseBodyPushResults {
	s.PushResult = v
	return s
}

type DescribeDataPushResultResponseBodyPushResultsPushResult struct {
	// The name of the data file.
	//
	// example:
	//
	// gcs-pre-websocket-eip-telecom
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The push status of data files.
	StatusStatS *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS `json:"StatusStatS,omitempty" xml:"StatusStatS,omitempty" type:"Struct"`
	// The version number of the data file.
	//
	// example:
	//
	// standard
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResult) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResult) SetName(v string) *DescribeDataPushResultResponseBodyPushResultsPushResult {
	s.Name = &v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResult) SetStatusStatS(v *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS) *DescribeDataPushResultResponseBodyPushResultsPushResult {
	s.StatusStatS = v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResult) SetVersion(v string) *DescribeDataPushResultResponseBodyPushResultsPushResult {
	s.Version = &v
	return s
}

type DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS struct {
	StatusStat []*DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat `json:"StatusStat,omitempty" xml:"StatusStat,omitempty" type:"Repeated"`
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS) SetStatusStat(v []*DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatS {
	s.StatusStat = v
	return s
}

type DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat struct {
	// The total number of ENS nodes.
	//
	// example:
	//
	// 2
	RegionIdCount *int32 `json:"RegionIdCount,omitempty" xml:"RegionIdCount,omitempty"`
	// The push status of data files on the ENS node.
	RegionIds *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds `json:"RegionIds,omitempty" xml:"RegionIds,omitempty" type:"Struct"`
	// The push status. The value is of the enumeration type. Valid values: SUCCESS FAILED PUSHING
	//
	// example:
	//
	// FAILED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) SetRegionIdCount(v int32) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat {
	s.RegionIdCount = &v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) SetRegionIds(v *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat {
	s.RegionIds = v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat) SetStatus(v string) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStat {
	s.Status = &v
	return s
}

type DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds struct {
	RegionId []*DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId `json:"RegionId,omitempty" xml:"RegionId,omitempty" type:"Repeated"`
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds) SetRegionId(v []*DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIds {
	s.RegionId = v
	return s
}

type DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId struct {
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-wuxi-5
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The start time of the push operation. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-12-28T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The description of the status.
	//
	// example:
	//
	// Success
	StatusDescrip *string `json:"StatusDescrip,omitempty" xml:"StatusDescrip,omitempty"`
	// The time when the status was last updated. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-12-07T02:37:10Z
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) SetRegionId(v string) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId {
	s.RegionId = &v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) SetStartTime(v string) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId {
	s.StartTime = &v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) SetStatusDescrip(v string) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId {
	s.StatusDescrip = &v
	return s
}

func (s *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId) SetUpdateTime(v string) *DescribeDataPushResultResponseBodyPushResultsPushResultStatusStatSStatusStatRegionIdsRegionId {
	s.UpdateTime = &v
	return s
}

type DescribeDataPushResultResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDataPushResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDataPushResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataPushResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataPushResultResponse) SetHeaders(v map[string]*string) *DescribeDataPushResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataPushResultResponse) SetStatusCode(v int32) *DescribeDataPushResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDataPushResultResponse) SetBody(v *DescribeDataPushResultResponseBody) *DescribeDataPushResultResponse {
	s.Body = v
	return s
}

type DescribeDeviceServiceRequest struct {
	// The ID of the application.
	//
	// example:
	//
	// a2bac6f4-75dc-455e-8389-2dc8e47526d3
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter does not take effect.
	//
	// example:
	//
	// cn-chongqing-10
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-5sg1owx0g4ojy66ab2tez77r2
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the order.
	//
	// example:
	//
	// 2661b1dd-3453-418d-8182-bb34f79e8d3c
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// example:
	//
	// cn-chongqing-11
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Service ID
	//
	// example:
	//
	// s-cxxxxx
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
}

func (s DescribeDeviceServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceRequest) SetAppId(v string) *DescribeDeviceServiceRequest {
	s.AppId = &v
	return s
}

func (s *DescribeDeviceServiceRequest) SetEnsRegionId(v string) *DescribeDeviceServiceRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeDeviceServiceRequest) SetInstanceId(v string) *DescribeDeviceServiceRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeDeviceServiceRequest) SetOrderId(v string) *DescribeDeviceServiceRequest {
	s.OrderId = &v
	return s
}

func (s *DescribeDeviceServiceRequest) SetRegionId(v string) *DescribeDeviceServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDeviceServiceRequest) SetServiceId(v string) *DescribeDeviceServiceRequest {
	s.ServiceId = &v
	return s
}

type DescribeDeviceServiceResponseBody struct {
	// The basic properties of the application.
	AppMetaData *DescribeDeviceServiceResponseBodyAppMetaData `json:"AppMetaData,omitempty" xml:"AppMetaData,omitempty" type:"Struct"`
	// The status information of the application.
	AppStatus *DescribeDeviceServiceResponseBodyAppStatus `json:"AppStatus,omitempty" xml:"AppStatus,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 3A535110-3EE3-5EC5-B1ED-10B7067A1FC8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the devices.
	ResourceDetailInfos []*DescribeDeviceServiceResponseBodyResourceDetailInfos `json:"ResourceDetailInfos,omitempty" xml:"ResourceDetailInfos,omitempty" type:"Repeated"`
	// The information about the instances.
	ResourceInfos []*DescribeDeviceServiceResponseBodyResourceInfos `json:"ResourceInfos,omitempty" xml:"ResourceInfos,omitempty" type:"Repeated"`
}

func (s DescribeDeviceServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBody) SetAppMetaData(v *DescribeDeviceServiceResponseBodyAppMetaData) *DescribeDeviceServiceResponseBody {
	s.AppMetaData = v
	return s
}

func (s *DescribeDeviceServiceResponseBody) SetAppStatus(v *DescribeDeviceServiceResponseBodyAppStatus) *DescribeDeviceServiceResponseBody {
	s.AppStatus = v
	return s
}

func (s *DescribeDeviceServiceResponseBody) SetRequestId(v string) *DescribeDeviceServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDeviceServiceResponseBody) SetResourceDetailInfos(v []*DescribeDeviceServiceResponseBodyResourceDetailInfos) *DescribeDeviceServiceResponseBody {
	s.ResourceDetailInfos = v
	return s
}

func (s *DescribeDeviceServiceResponseBody) SetResourceInfos(v []*DescribeDeviceServiceResponseBodyResourceInfos) *DescribeDeviceServiceResponseBody {
	s.ResourceInfos = v
	return s
}

type DescribeDeviceServiceResponseBodyAppMetaData struct {
	// The ID of the application.
	//
	// example:
	//
	// 97a32f2a-aa2c-436a-b19c-05b20d258618
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The name of the application.
	//
	// example:
	//
	// iotx-api-admin
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// The stable version number of the application.
	//
	// example:
	//
	// v1
	AppStableVersion *string `json:"AppStableVersion,omitempty" xml:"AppStableVersion,omitempty"`
	// The type of the application. The value is of the enumeration type. Valid values:
	//
	// 	- Common
	//
	// 	- Scheduler
	//
	// example:
	//
	// Common
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// The name of the application cluster.
	//
	// example:
	//
	// poc
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	// The time when the application was created.
	//
	// example:
	//
	// 2022-03-03T03:42:11
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the application.
	//
	// example:
	//
	// test application
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyAppMetaData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyAppMetaData) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetAppId(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.AppId = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetAppName(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.AppName = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetAppStableVersion(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.AppStableVersion = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetAppType(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.AppType = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetClusterName(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.ClusterName = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetCreateTime(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.CreateTime = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppMetaData) SetDescription(v string) *DescribeDeviceServiceResponseBodyAppMetaData {
	s.Description = &v
	return s
}

type DescribeDeviceServiceResponseBodyAppStatus struct {
	// The status of the application. The value is of the enumeration type. Valid values:
	//
	// Three intermediate states:
	//
	// 	- CREATING
	//
	// 	- UPDATING
	//
	// 	- DELETING
	//
	// Four final states:
	//
	// 	- CREATE_FAILED
	//
	// 	- UPDATE_FAILED
	//
	// 	- DELETE_FAILED
	//
	// 	- RUNNING
	//
	// example:
	//
	// CREATING
	Phase *string `json:"Phase,omitempty" xml:"Phase,omitempty"`
	// The description of the application status.
	//
	// example:
	//
	// Creating in progress
	StatusDescrip *string `json:"StatusDescrip,omitempty" xml:"StatusDescrip,omitempty"`
	// The time when the status was last updated.
	//
	// example:
	//
	// 2021-01-26T05:04Z
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyAppStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyAppStatus) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyAppStatus) SetPhase(v string) *DescribeDeviceServiceResponseBodyAppStatus {
	s.Phase = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppStatus) SetStatusDescrip(v string) *DescribeDeviceServiceResponseBodyAppStatus {
	s.StatusDescrip = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyAppStatus) SetUpdateTime(v string) *DescribeDeviceServiceResponseBodyAppStatus {
	s.UpdateTime = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceDetailInfos struct {
	// The name of the device.
	//
	// example:
	//
	// 5JhF100NEgdBcpNren32
	DeviceName *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	// The ID of the cloud device.
	//
	// example:
	//
	// h-uf6009zoaexs5pefypbo
	ID *string `json:"ID,omitempty" xml:"ID,omitempty"`
	// The IP address.
	//
	// example:
	//
	// 120.27.219.219
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The Internet service provider (ISP).
	//
	// example:
	//
	// cmcc
	ISP *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// m-2ze40oyhjorpyw61k7be
	ImageID *string `json:"ImageID,omitempty" xml:"ImageID,omitempty"`
	// The media access control (MAC) address of the device.
	//
	// example:
	//
	// AA:BB:77:88:99:03
	Mac *string `json:"Mac,omitempty" xml:"Mac,omitempty"`
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-jiaozuo-2
	RegionID *string `json:"RegionID,omitempty" xml:"RegionID,omitempty"`
	// The server name of the ENS node.
	//
	// example:
	//
	// ens-nc2
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// The status of the device.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the device.
	//
	// example:
	//
	// ens.ac6.large
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceDetailInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceDetailInfos) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetDeviceName(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.DeviceName = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetID(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.ID = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetIP(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.IP = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetISP(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.ISP = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetImageID(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.ImageID = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetMac(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.Mac = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetRegionID(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.RegionID = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetServer(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.Server = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetStatus(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.Status = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceDetailInfos) SetType(v string) *DescribeDeviceServiceResponseBodyResourceDetailInfos {
	s.Type = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceInfos struct {
	// The version of the application.
	//
	// example:
	//
	// v1
	AppVersion *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	// The area code.
	//
	// example:
	//
	// 410800
	AreaCode *string `json:"AreaCode,omitempty" xml:"AreaCode,omitempty"`
	// The region name.
	//
	// example:
	//
	// Jiaozuo City, Henan Province, Central China
	AreaName *string `json:"AreaName,omitempty" xml:"AreaName,omitempty"`
	// The time when the application was created.
	//
	// example:
	//
	// 2019-10-02T08:26Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The information about the devices.
	DeviceInfos []*DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos `json:"DeviceInfos,omitempty" xml:"DeviceInfos,omitempty" type:"Repeated"`
	// The ID of the instance.
	//
	// example:
	//
	// i-5s9boobrmh5000kv4jmi0oeai
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The status of the instance.
	//
	// example:
	//
	// Running
	InstanceStatus *string `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	// The internal IP addresses.
	InternalIps []*DescribeDeviceServiceResponseBodyResourceInfosInternalIps `json:"InternalIps,omitempty" xml:"InternalIps,omitempty" type:"Repeated"`
	// The public IP addresses.
	PublicIps []*DescribeDeviceServiceResponseBodyResourceInfosPublicIps `json:"PublicIps,omitempty" xml:"PublicIps,omitempty" type:"Repeated"`
	// The ID of the region.
	//
	// example:
	//
	// cn-jiaozuo-2
	RegionCode *string `json:"RegionCode,omitempty" xml:"RegionCode,omitempty"`
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-jiaozuo-2
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the region.
	//
	// example:
	//
	// China Jiaozuo-2
	RegionName *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceInfos) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetAppVersion(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.AppVersion = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetAreaCode(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.AreaCode = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetAreaName(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.AreaName = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetCreateTime(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.CreateTime = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetDeviceInfos(v []*DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.DeviceInfos = v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetInstanceId(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.InstanceId = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetInstanceStatus(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.InstanceStatus = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetInternalIps(v []*DescribeDeviceServiceResponseBodyResourceInfosInternalIps) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.InternalIps = v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetPublicIps(v []*DescribeDeviceServiceResponseBodyResourceInfosPublicIps) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.PublicIps = v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetRegionCode(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.RegionCode = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetRegionId(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.RegionId = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfos) SetRegionName(v string) *DescribeDeviceServiceResponseBodyResourceInfos {
	s.RegionName = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos struct {
	// The name of the device.
	//
	// example:
	//
	// test-api
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The network information.
	Network []*DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork `json:"Network,omitempty" xml:"Network,omitempty" type:"Repeated"`
	// The status.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) SetName(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos {
	s.Name = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) SetNetwork(v []*DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos {
	s.Network = v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos) SetStatus(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfos {
	s.Status = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork struct {
	// The port of the container.
	//
	// example:
	//
	// 10000-10010
	ContainerPorts *string `json:"ContainerPorts,omitempty" xml:"ContainerPorts,omitempty"`
	// The public IP address.
	//
	// example:
	//
	// 39.105.62.120
	ExternalIp *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	// The port range.
	//
	// example:
	//
	// 80-8080
	HostPorts *string `json:"HostPorts,omitempty" xml:"HostPorts,omitempty"`
	// The protocol of the gateway. The value is of the enumeration type. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// example:
	//
	// TCP
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) SetContainerPorts(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork {
	s.ContainerPorts = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) SetExternalIp(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork {
	s.ExternalIp = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) SetHostPorts(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork {
	s.HostPorts = &v
	return s
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork) SetProtocol(v string) *DescribeDeviceServiceResponseBodyResourceInfosDeviceInfosNetwork {
	s.Protocol = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceInfosInternalIps struct {
	// The internal IP address.
	//
	// example:
	//
	// 10.0.2.3
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceInfosInternalIps) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceInfosInternalIps) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosInternalIps) SetIp(v string) *DescribeDeviceServiceResponseBodyResourceInfosInternalIps {
	s.Ip = &v
	return s
}

type DescribeDeviceServiceResponseBodyResourceInfosPublicIps struct {
	// The public IP address.
	//
	// example:
	//
	// 122.13.173.137
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
}

func (s DescribeDeviceServiceResponseBodyResourceInfosPublicIps) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponseBodyResourceInfosPublicIps) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponseBodyResourceInfosPublicIps) SetIp(v string) *DescribeDeviceServiceResponseBodyResourceInfosPublicIps {
	s.Ip = &v
	return s
}

type DescribeDeviceServiceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDeviceServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDeviceServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDeviceServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDeviceServiceResponse) SetHeaders(v map[string]*string) *DescribeDeviceServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDeviceServiceResponse) SetStatusCode(v int32) *DescribeDeviceServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDeviceServiceResponse) SetBody(v *DescribeDeviceServiceResponseBody) *DescribeDeviceServiceResponse {
	s.Body = v
	return s
}

type DescribeDiskIopsListRequest struct {
	// The ID of the disk. Format: d-\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-5tzm9wnhzlhjzcbtxo465****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss. The time range specified by the StartTime and EndTime parameters cannot exceed one day for a query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-12-14 23:59:59
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2023-12-14 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDiskIopsListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskIopsListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiskIopsListRequest) SetDiskId(v string) *DescribeDiskIopsListRequest {
	s.DiskId = &v
	return s
}

func (s *DescribeDiskIopsListRequest) SetEndTime(v string) *DescribeDiskIopsListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDiskIopsListRequest) SetStartTime(v string) *DescribeDiskIopsListRequest {
	s.StartTime = &v
	return s
}

type DescribeDiskIopsListResponseBody struct {
	// The IOPS monitoring data of the cloud disk.
	DiskIopsList []*DescribeDiskIopsListResponseBodyDiskIopsList `json:"DiskIopsList,omitempty" xml:"DiskIopsList,omitempty" type:"Repeated"`
	// Id of the request
	//
	// example:
	//
	// A7814CAB-DB4E-140A-9D6F-7C8210C1DAC3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDiskIopsListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskIopsListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiskIopsListResponseBody) SetDiskIopsList(v []*DescribeDiskIopsListResponseBodyDiskIopsList) *DescribeDiskIopsListResponseBody {
	s.DiskIopsList = v
	return s
}

func (s *DescribeDiskIopsListResponseBody) SetRequestId(v string) *DescribeDiskIopsListResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDiskIopsListResponseBodyDiskIopsList struct {
	// The business time . The time is displayed in the yyyy-MM-dd HH:mm:ss.
	//
	// example:
	//
	// 2023-12-14 00:00:00
	BizTime *string `json:"BizTime,omitempty" xml:"BizTime,omitempty"`
	// The ID of the disk.
	//
	// example:
	//
	// d-5tzm9wnhzlhjzcbtxo465****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The read throughput. Unit: bytes.
	//
	// example:
	//
	// 10054
	ReadBytes *int64 `json:"ReadBytes,omitempty" xml:"ReadBytes,omitempty"`
	// The read latency. Unit: ms.
	//
	// example:
	//
	// 15646532
	ReadLatency *int64 `json:"ReadLatency,omitempty" xml:"ReadLatency,omitempty"`
	// The read IOPS.
	//
	// example:
	//
	// 4
	ReadOps *int64 `json:"ReadOps,omitempty" xml:"ReadOps,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// cn-hangzhou-3
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The write throughput. Unit: bytes.
	//
	// example:
	//
	// 0
	WriteBytes *int64 `json:"WriteBytes,omitempty" xml:"WriteBytes,omitempty"`
	// The write latency. Unit: microseconds.
	//
	// example:
	//
	// 0
	WriteLatency *int64 `json:"WriteLatency,omitempty" xml:"WriteLatency,omitempty"`
	// The write IOPS.
	//
	// example:
	//
	// 0
	WriteOps *int64 `json:"WriteOps,omitempty" xml:"WriteOps,omitempty"`
}

func (s DescribeDiskIopsListResponseBodyDiskIopsList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskIopsListResponseBodyDiskIopsList) GoString() string {
	return s.String()
}

func (s *DescribeDiskIopsListResponseBodyDiskIopsList) SetBizTime(v string) *DescribeDiskIopsListResponseBodyDiskIopsList {
	s.BizTime = &v
	return s
}

func (s *DescribeDiskIopsListResponseBodyDiskIopsList) SetDiskId(v string) *DescribeDiskIopsListResponseBodyDiskIopsList {
	s.DiskId = &v
	return s
}

func (s *DescribeDiskIopsListResponseBodyDiskIopsList) SetReadBytes(v int64) *DescribeDiskIopsListResponseBodyDiskIopsList {
	s.ReadBytes = &v
	return s
}

func (s *DescribeDiskIopsListResponseBodyDiskIopsList) SetReadLatency(v int64) *DescribeDiskIopsListResponseBodyDiskIopsList {
	s.ReadLatency = &v
	return s
}

func (s *DescribeDiskIopsListResponseBodyDiskIopsList) SetReadOps(v int64) *DescribeDiskIopsListResponseBodyDiskIopsList {
	s.ReadOps = &v
	return s
}

func (s *DescribeDiskIopsListResponseBodyDiskIopsList) SetRegionId(v string) *DescribeDiskIopsListResponseBodyDiskIopsList {
	s.RegionId = &v
	return s
}

func (s *DescribeDiskIopsListResponseBodyDiskIopsList) SetWriteBytes(v int64) *DescribeDiskIopsListResponseBodyDiskIopsList {
	s.WriteBytes = &v
	return s
}

func (s *DescribeDiskIopsListResponseBodyDiskIopsList) SetWriteLatency(v int64) *DescribeDiskIopsListResponseBodyDiskIopsList {
	s.WriteLatency = &v
	return s
}

func (s *DescribeDiskIopsListResponseBodyDiskIopsList) SetWriteOps(v int64) *DescribeDiskIopsListResponseBodyDiskIopsList {
	s.WriteOps = &v
	return s
}

type DescribeDiskIopsListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDiskIopsListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDiskIopsListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiskIopsListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiskIopsListResponse) SetHeaders(v map[string]*string) *DescribeDiskIopsListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiskIopsListResponse) SetStatusCode(v int32) *DescribeDiskIopsListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiskIopsListResponse) SetBody(v *DescribeDiskIopsListResponseBody) *DescribeDiskIopsListResponse {
	s.Body = v
	return s
}

type DescribeDisksRequest struct {
	// The category of the disk.
	//
	// 	- cloud_efficiency: ultra disk.
	//
	// 	- cloud_ssd: all-flash disk.
	//
	// 	- local_hdd: local HDD.
	//
	// 	- local_ssd: local SSD.
	//
	// example:
	//
	// local_ssd
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The billing method.
	//
	// 	- prePay: subscription.
	//
	// 	- postpay: pay-as-you-go.
	//
	// example:
	//
	// prepay
	DiskChargeType *string `json:"DiskChargeType,omitempty" xml:"DiskChargeType,omitempty"`
	// The ID of the disk.
	//
	// example:
	//
	// d-5soak1gqa507lyfzvz0xo****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The ID of the disk.
	//
	// example:
	//
	// [\\"d-wz99njena32z90ki****\\"]
	DiskIds *string `json:"DiskIds,omitempty" xml:"DiskIds,omitempty"`
	// The name of the disk.
	//
	// example:
	//
	// DiskName
	DiskName *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	// The purchase method of the disk. Valid values:
	//
	// 	- ServiceDisk: The disk is purchased when ENS is activated.
	//
	// 	- ResoureDisk: The disk is purchased when the instance is created.
	//
	// 	- PostPayDisk: The disk is separately purchased.
	//
	// example:
	//
	// PostPayDisk
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-kunming-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The node information.
	//
	// example:
	//
	// ["cn-suzhou-telecom","cn-chengdu-telecom"]
	EnsRegionIds *string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty"`
	// The ID of the instance to which the disk is attached.
	//
	// example:
	//
	// i-5t77rb0yoz79m28ku60sx****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The order in which you want to sort the returned data. Example: {"EnsRegionId":"desc"}. By default, the nodes are sorted by IDs in descending order.
	//
	// example:
	//
	// { "DiskNameSort":"desc","EnsRegionIdSort":"asc" }
	OrderByParams *string `json:"OrderByParams,omitempty" xml:"OrderByParams,omitempty"`
	// The number of the page to return. Pages start from page **1**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: **50**.
	//
	// Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// s-897654321****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The status of the disk. Valid values:
	//
	// 	- In-use: The disk is in use.
	//
	// 	- Available: The disk can be attached.
	//
	// 	- Attaching: The disk is being attached.
	//
	// 	- Detaching: The disk is being detached.
	//
	// 	- Creating: The disk is being created.
	//
	// 	- ReIniting: The disk is being reset.
	//
	// 	- Deleting: The disk is being released.
	//
	// 	- Deleted: The disk is released.
	//
	// 	- Expiring: The disk is about to expire.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the disk. Valid values:
	//
	// 	- system: system disk.
	//
	// 	- data: data disk.
	//
	// example:
	//
	// system
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDisksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksRequest) GoString() string {
	return s.String()
}

func (s *DescribeDisksRequest) SetCategory(v string) *DescribeDisksRequest {
	s.Category = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskChargeType(v string) *DescribeDisksRequest {
	s.DiskChargeType = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskId(v string) *DescribeDisksRequest {
	s.DiskId = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskIds(v string) *DescribeDisksRequest {
	s.DiskIds = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskName(v string) *DescribeDisksRequest {
	s.DiskName = &v
	return s
}

func (s *DescribeDisksRequest) SetDiskType(v string) *DescribeDisksRequest {
	s.DiskType = &v
	return s
}

func (s *DescribeDisksRequest) SetEnsRegionId(v string) *DescribeDisksRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeDisksRequest) SetEnsRegionIds(v string) *DescribeDisksRequest {
	s.EnsRegionIds = &v
	return s
}

func (s *DescribeDisksRequest) SetInstanceId(v string) *DescribeDisksRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeDisksRequest) SetOrderByParams(v string) *DescribeDisksRequest {
	s.OrderByParams = &v
	return s
}

func (s *DescribeDisksRequest) SetPageNumber(v string) *DescribeDisksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksRequest) SetPageSize(v string) *DescribeDisksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksRequest) SetSnapshotId(v string) *DescribeDisksRequest {
	s.SnapshotId = &v
	return s
}

func (s *DescribeDisksRequest) SetStatus(v string) *DescribeDisksRequest {
	s.Status = &v
	return s
}

func (s *DescribeDisksRequest) SetType(v string) *DescribeDisksRequest {
	s.Type = &v
	return s
}

type DescribeDisksResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the disks.
	Disks *DescribeDisksResponseBodyDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page. Maximum value: **50**. Default value: **10**.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of returned pages.
	//
	// example:
	//
	// 13
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDisksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBody) SetCode(v int32) *DescribeDisksResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDisksResponseBody) SetDisks(v *DescribeDisksResponseBodyDisks) *DescribeDisksResponseBody {
	s.Disks = v
	return s
}

func (s *DescribeDisksResponseBody) SetPageNumber(v int32) *DescribeDisksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDisksResponseBody) SetPageSize(v int32) *DescribeDisksResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDisksResponseBody) SetRequestId(v string) *DescribeDisksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDisksResponseBody) SetTotalCount(v int32) *DescribeDisksResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDisksResponseBodyDisks struct {
	Disks []*DescribeDisksResponseBodyDisksDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Repeated"`
}

func (s DescribeDisksResponseBodyDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBodyDisks) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBodyDisks) SetDisks(v []*DescribeDisksResponseBodyDisksDisks) *DescribeDisksResponseBodyDisks {
	s.Disks = v
	return s
}

type DescribeDisksResponseBodyDisksDisks struct {
	// The category of the disk.
	//
	// 	- cloud_efficiency: ultra disk.
	//
	// 	- cloud_ssd: all-flash disk.
	//
	// 	- local_hdd: local HDD.
	//
	// 	- local_ssd: local SSD.
	//
	// example:
	//
	// local_ssd
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The time when the disk was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-11-11T14:34:55+08:00
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// Specifies whether the disk to be attached is released with the instance. Valid values:
	//
	// 	- true: The disk will be released when the ECS instance is released.
	//
	// 	- false: The disk will be retained when the ECS instance is released.
	//
	// 	- If you leave this parameter empty, the default value is used.
	//
	// example:
	//
	// false
	DeleteWithInstance *bool `json:"DeleteWithInstance,omitempty" xml:"DeleteWithInstance,omitempty"`
	// The namespace description.
	//
	// example:
	//
	// disk-description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The billing method of the cloud disk or local disk. Valid values:
	//
	// 	- **prepaid**: subscription.
	//
	// 	- **postpaid**: pay-as-you-go.
	//
	// example:
	//
	// prepaid
	DiskChargeType *string `json:"DiskChargeType,omitempty" xml:"DiskChargeType,omitempty"`
	// The ID of the disk.
	//
	// example:
	//
	// d-5svum1dx1w4a4spr54lgr****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The name of the disk.
	//
	// example:
	//
	// fvt-ecs-5cf0****
	DiskName *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	// Indicates whether the cloud disk is encrypted. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// False
	Encrypted *bool `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	// The ID of the Key Management Service (KMS) key that is used for the cloud disk.
	//
	// example:
	//
	// 05467897a-4262-4802-b8cb-00d3fb40****
	EncryptedKeyId *string `json:"EncryptedKeyId,omitempty" xml:"EncryptedKeyId,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-guangzhou-10
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-5t77rb0yoz79m28ku60sx****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// Edge Prod Environment Streaming Machine -1063
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// Indicates whether the cloud disk or local disk is removable. Valid values:
	//
	// 	- true: The disk is removable. A removable disk can independently exist and can be attached to or detached from an instance within the same zone.
	//
	// 	- false: The disk is not removable. A disk that is not removable cannot independently exist or be attached to or detached from an instance within the same zone.
	//
	// If disks are of the following categories or types, the **Portable*	- value is **false*	- and the disks have the same lifecycle as their attached instances:
	//
	// 	- Local HDDs
	//
	// 	- Local SSDs
	//
	// 	- Data disks that use the subscription billing method
	//
	// example:
	//
	// true
	Portable *bool `json:"Portable,omitempty" xml:"Portable,omitempty"`
	// The serial number.
	//
	// example:
	//
	// 123
	SerialId *string `json:"SerialId,omitempty" xml:"SerialId,omitempty"`
	// The size of the disk. Unit: MiB.
	//
	// example:
	//
	// 20
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// s-bp67acfmxazb4p****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The status of the disk. Valid values:
	//
	// 	- In-use: The disk is in use.
	//
	// 	- Available: The disk can be attached.
	//
	// 	- Attaching: The disk is being attached.
	//
	// 	- Detaching: The disk is being detached.
	//
	// 	- Creating: The disk is being created.
	//
	// 	- ReIniting: The disk is being reset.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the cloud disk or local disk. Valid values:
	//
	// 	- 1: system disk.
	//
	// 	- 2: data disk.
	//
	// example:
	//
	// 1
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeDisksResponseBodyDisksDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponseBodyDisksDisks) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponseBodyDisksDisks) SetCategory(v string) *DescribeDisksResponseBodyDisksDisks {
	s.Category = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetCreationTime(v string) *DescribeDisksResponseBodyDisksDisks {
	s.CreationTime = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetDeleteWithInstance(v bool) *DescribeDisksResponseBodyDisksDisks {
	s.DeleteWithInstance = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetDescription(v string) *DescribeDisksResponseBodyDisksDisks {
	s.Description = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetDiskChargeType(v string) *DescribeDisksResponseBodyDisksDisks {
	s.DiskChargeType = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetDiskId(v string) *DescribeDisksResponseBodyDisksDisks {
	s.DiskId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetDiskName(v string) *DescribeDisksResponseBodyDisksDisks {
	s.DiskName = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetEncrypted(v bool) *DescribeDisksResponseBodyDisksDisks {
	s.Encrypted = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetEncryptedKeyId(v string) *DescribeDisksResponseBodyDisksDisks {
	s.EncryptedKeyId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetEnsRegionId(v string) *DescribeDisksResponseBodyDisksDisks {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetInstanceId(v string) *DescribeDisksResponseBodyDisksDisks {
	s.InstanceId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetInstanceName(v string) *DescribeDisksResponseBodyDisksDisks {
	s.InstanceName = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetPortable(v bool) *DescribeDisksResponseBodyDisksDisks {
	s.Portable = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetSerialId(v string) *DescribeDisksResponseBodyDisksDisks {
	s.SerialId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetSize(v int32) *DescribeDisksResponseBodyDisksDisks {
	s.Size = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetSnapshotId(v string) *DescribeDisksResponseBodyDisksDisks {
	s.SnapshotId = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetStatus(v string) *DescribeDisksResponseBodyDisksDisks {
	s.Status = &v
	return s
}

func (s *DescribeDisksResponseBodyDisksDisks) SetType(v string) *DescribeDisksResponseBodyDisksDisks {
	s.Type = &v
	return s
}

type DescribeDisksResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDisksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDisksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDisksResponse) GoString() string {
	return s.String()
}

func (s *DescribeDisksResponse) SetHeaders(v map[string]*string) *DescribeDisksResponse {
	s.Headers = v
	return s
}

func (s *DescribeDisksResponse) SetStatusCode(v int32) *DescribeDisksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDisksResponse) SetBody(v *DescribeDisksResponseBody) *DescribeDisksResponse {
	s.Body = v
	return s
}

type DescribeElbAvailableResourceInfoResponseBody struct {
	// The information about resources.
	ElbAvailableResourceInfo []*DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo `json:"ElbAvailableResourceInfo,omitempty" xml:"ElbAvailableResourceInfo,omitempty" type:"Repeated"`
	// The ID of the request. This parameter is a common parameter. Each request has a unique ID. You can use the ID to troubleshoot issues.
	//
	// example:
	//
	// 25AAD194-4A37-51CF-B1CA-1E86FDAC23A6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeElbAvailableResourceInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeElbAvailableResourceInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeElbAvailableResourceInfoResponseBody) SetElbAvailableResourceInfo(v []*DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) *DescribeElbAvailableResourceInfoResponseBody {
	s.ElbAvailableResourceInfo = v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBody) SetRequestId(v string) *DescribeElbAvailableResourceInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo struct {
	Ability []*string `json:"Ability,omitempty" xml:"Ability,omitempty" type:"Repeated"`
	// The ID of the region.
	//
	// example:
	//
	// SouthEast
	Area *string `json:"Area,omitempty" xml:"Area,omitempty"`
	// The number of resources that you can purchase.
	//
	// example:
	//
	// 1
	CanBuyCount *string `json:"CanBuyCount,omitempty" xml:"CanBuyCount,omitempty"`
	// The name of the node.
	//
	// example:
	//
	// cn-guangdong-10
	EnName *string `json:"EnName,omitempty" xml:"EnName,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// example:
	//
	// cn-guangdong-10
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The specifications of the ELB instances.
	LoadBalancerSpec []*string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty" type:"Repeated"`
	// The Chinese name of the node.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The province where the node is deployed.
	//
	// example:
	//
	// Shanghai
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) GoString() string {
	return s.String()
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetAbility(v []*string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.Ability = v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetArea(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.Area = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetCanBuyCount(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.CanBuyCount = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetEnName(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.EnName = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetEnsRegionId(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetLoadBalancerSpec(v []*string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.LoadBalancerSpec = v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetName(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.Name = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo) SetProvince(v string) *DescribeElbAvailableResourceInfoResponseBodyElbAvailableResourceInfo {
	s.Province = &v
	return s
}

type DescribeElbAvailableResourceInfoResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeElbAvailableResourceInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeElbAvailableResourceInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeElbAvailableResourceInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeElbAvailableResourceInfoResponse) SetHeaders(v map[string]*string) *DescribeElbAvailableResourceInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponse) SetStatusCode(v int32) *DescribeElbAvailableResourceInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeElbAvailableResourceInfoResponse) SetBody(v *DescribeElbAvailableResourceInfoResponseBody) *DescribeElbAvailableResourceInfoResponse {
	s.Body = v
	return s
}

type DescribeEnsCommodityCodeRequest struct {
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
}

func (s DescribeEnsCommodityCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsCommodityCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsCommodityCodeRequest) SetCommodityCode(v string) *DescribeEnsCommodityCodeRequest {
	s.CommodityCode = &v
	return s
}

type DescribeEnsCommodityCodeResponseBody struct {
	CommodityCodeInfo []*DescribeEnsCommodityCodeResponseBodyCommodityCodeInfo `json:"CommodityCodeInfo,omitempty" xml:"CommodityCodeInfo,omitempty" type:"Repeated"`
	RequestId         *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsCommodityCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsCommodityCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsCommodityCodeResponseBody) SetCommodityCodeInfo(v []*DescribeEnsCommodityCodeResponseBodyCommodityCodeInfo) *DescribeEnsCommodityCodeResponseBody {
	s.CommodityCodeInfo = v
	return s
}

func (s *DescribeEnsCommodityCodeResponseBody) SetRequestId(v string) *DescribeEnsCommodityCodeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsCommodityCodeResponseBodyCommodityCodeInfo struct {
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CommodityName *string `json:"CommodityName,omitempty" xml:"CommodityName,omitempty"`
}

func (s DescribeEnsCommodityCodeResponseBodyCommodityCodeInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsCommodityCodeResponseBodyCommodityCodeInfo) GoString() string {
	return s.String()
}

func (s *DescribeEnsCommodityCodeResponseBodyCommodityCodeInfo) SetCommodityCode(v string) *DescribeEnsCommodityCodeResponseBodyCommodityCodeInfo {
	s.CommodityCode = &v
	return s
}

func (s *DescribeEnsCommodityCodeResponseBodyCommodityCodeInfo) SetCommodityName(v string) *DescribeEnsCommodityCodeResponseBodyCommodityCodeInfo {
	s.CommodityName = &v
	return s
}

type DescribeEnsCommodityCodeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsCommodityCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsCommodityCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsCommodityCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsCommodityCodeResponse) SetHeaders(v map[string]*string) *DescribeEnsCommodityCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsCommodityCodeResponse) SetStatusCode(v int32) *DescribeEnsCommodityCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsCommodityCodeResponse) SetBody(v *DescribeEnsCommodityCodeResponseBody) *DescribeEnsCommodityCodeResponse {
	s.Body = v
	return s
}

type DescribeEnsCommodityModuleCodeRequest struct {
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	ModuleCode    *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
}

func (s DescribeEnsCommodityModuleCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsCommodityModuleCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsCommodityModuleCodeRequest) SetCommodityCode(v string) *DescribeEnsCommodityModuleCodeRequest {
	s.CommodityCode = &v
	return s
}

func (s *DescribeEnsCommodityModuleCodeRequest) SetModuleCode(v string) *DescribeEnsCommodityModuleCodeRequest {
	s.ModuleCode = &v
	return s
}

type DescribeEnsCommodityModuleCodeResponseBody struct {
	CommodityCodesInfo []*DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfo `json:"CommodityCodesInfo,omitempty" xml:"CommodityCodesInfo,omitempty" type:"Repeated"`
	RequestId          *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsCommodityModuleCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsCommodityModuleCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsCommodityModuleCodeResponseBody) SetCommodityCodesInfo(v []*DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfo) *DescribeEnsCommodityModuleCodeResponseBody {
	s.CommodityCodesInfo = v
	return s
}

func (s *DescribeEnsCommodityModuleCodeResponseBody) SetRequestId(v string) *DescribeEnsCommodityModuleCodeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfo struct {
	CommodityCode   *string                                                                        `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	ModuleCodesInfo []*DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfoModuleCodesInfo `json:"ModuleCodesInfo,omitempty" xml:"ModuleCodesInfo,omitempty" type:"Repeated"`
}

func (s DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfo) GoString() string {
	return s.String()
}

func (s *DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfo) SetCommodityCode(v string) *DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfo {
	s.CommodityCode = &v
	return s
}

func (s *DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfo) SetModuleCodesInfo(v []*DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfoModuleCodesInfo) *DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfo {
	s.ModuleCodesInfo = v
	return s
}

type DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfoModuleCodesInfo struct {
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	ModuleName *string `json:"ModuleName,omitempty" xml:"ModuleName,omitempty"`
}

func (s DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfoModuleCodesInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfoModuleCodesInfo) GoString() string {
	return s.String()
}

func (s *DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfoModuleCodesInfo) SetModuleCode(v string) *DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfoModuleCodesInfo {
	s.ModuleCode = &v
	return s
}

func (s *DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfoModuleCodesInfo) SetModuleName(v string) *DescribeEnsCommodityModuleCodeResponseBodyCommodityCodesInfoModuleCodesInfo {
	s.ModuleName = &v
	return s
}

type DescribeEnsCommodityModuleCodeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsCommodityModuleCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsCommodityModuleCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsCommodityModuleCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsCommodityModuleCodeResponse) SetHeaders(v map[string]*string) *DescribeEnsCommodityModuleCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsCommodityModuleCodeResponse) SetStatusCode(v int32) *DescribeEnsCommodityModuleCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsCommodityModuleCodeResponse) SetBody(v *DescribeEnsCommodityModuleCodeResponseBody) *DescribeEnsCommodityModuleCodeResponse {
	s.Body = v
	return s
}

type DescribeEnsEipAddressesRequest struct {
	// The ID of the EIP that you want to query. You can specify up to 50 EIP IDs. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// eip-5q9uwkd9bznjpxz8hr6cirnjk
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	// The ID of the instance with which you want to associate the EIP.
	//
	// example:
	//
	// lb-5t18quoohsrc3xkf86spmnu77
	AssociatedInstanceId *string `json:"AssociatedInstanceId,omitempty" xml:"AssociatedInstanceId,omitempty"`
	// The type of the instance with which you want to associate the EIP. Valid values:
	//
	// 	- **EnsInstance**: ENS instance in a VPC
	//
	// 	- **SlbInstance**: Edge Load Balancer (ELB) instance
	//
	// example:
	//
	// SlbInstance
	AssociatedInstanceType *string `json:"AssociatedInstanceType,omitempty" xml:"AssociatedInstanceType,omitempty"`
	// The EIP that you want to query. You can specify up to 50 EIPs. Separate multiple EIPs with commas (,).
	//
	// example:
	//
	// 192.168.0.1
	EipAddress *string `json:"EipAddress,omitempty" xml:"EipAddress,omitempty"`
	// The name of the EIP.
	//
	// example:
	//
	// test
	EipName *string `json:"EipName,omitempty" xml:"EipName,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// example:
	//
	// cn-chengdu-telecom
	EnsRegionId  *string   `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Specifies whether the EIP is a secondary EIP. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	Standby *string `json:"Standby,omitempty" xml:"Standby,omitempty"`
}

func (s DescribeEnsEipAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsEipAddressesRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsEipAddressesRequest) SetAllocationId(v string) *DescribeEnsEipAddressesRequest {
	s.AllocationId = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetAssociatedInstanceId(v string) *DescribeEnsEipAddressesRequest {
	s.AssociatedInstanceId = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetAssociatedInstanceType(v string) *DescribeEnsEipAddressesRequest {
	s.AssociatedInstanceType = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetEipAddress(v string) *DescribeEnsEipAddressesRequest {
	s.EipAddress = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetEipName(v string) *DescribeEnsEipAddressesRequest {
	s.EipName = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetEnsRegionId(v string) *DescribeEnsEipAddressesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetEnsRegionIds(v []*string) *DescribeEnsEipAddressesRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetPageNumber(v int32) *DescribeEnsEipAddressesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetPageSize(v int32) *DescribeEnsEipAddressesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsEipAddressesRequest) SetStandby(v string) *DescribeEnsEipAddressesRequest {
	s.Standby = &v
	return s
}

type DescribeEnsEipAddressesResponseBody struct {
	// Details about the EIP.
	EipAddresses *DescribeEnsEipAddressesResponseBodyEipAddresses `json:"EipAddresses,omitempty" xml:"EipAddresses,omitempty" type:"Struct"`
	// The page number. Valid values: an integer that is greater than 0. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: **10*	- to **100**.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 8629F679-B51D-4194-A1CC-5D8F504C362B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 7
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeEnsEipAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsEipAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsEipAddressesResponseBody) SetEipAddresses(v *DescribeEnsEipAddressesResponseBodyEipAddresses) *DescribeEnsEipAddressesResponseBody {
	s.EipAddresses = v
	return s
}

func (s *DescribeEnsEipAddressesResponseBody) SetPageNumber(v int32) *DescribeEnsEipAddressesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBody) SetPageSize(v int32) *DescribeEnsEipAddressesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBody) SetRequestId(v string) *DescribeEnsEipAddressesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBody) SetTotalCount(v int32) *DescribeEnsEipAddressesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeEnsEipAddressesResponseBodyEipAddresses struct {
	EipAddress []*DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress `json:"EipAddress,omitempty" xml:"EipAddress,omitempty" type:"Repeated"`
}

func (s DescribeEnsEipAddressesResponseBodyEipAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsEipAddressesResponseBodyEipAddresses) GoString() string {
	return s.String()
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddresses) SetEipAddress(v []*DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) *DescribeEnsEipAddressesResponseBodyEipAddresses {
	s.EipAddress = v
	return s
}

type DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress struct {
	// The ID of the EIP.
	//
	// example:
	//
	// eip-5sainglpw7qfem3icir4s****
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	// The time when the EIP was created.
	//
	// example:
	//
	// 1624885274000
	AllocationTime *string `json:"AllocationTime,omitempty" xml:"AllocationTime,omitempty"`
	// The peak bandwidth of the EIP. Default value: 5. Valid values: **5*	- to **10000**. Unit: Mbit/s.
	//
	// example:
	//
	// 50
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The billing method of the EIP. Valid values:
	//
	// 	- **PrePaid**: subscription.
	//
	// 	- **PostPaid**: pay-as-you-go
	//
	// example:
	//
	// PostPaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The description of the EIP.
	//
	// example:
	//
	// example
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-xian-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the instance that is associated with the EIP.
	//
	// example:
	//
	// lb-5sc3kum2e0sz34wbqrws9****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the instance that is associated with the EIP. Valid values:
	//
	// 	- **EnsInstance**: ENS instance in a VPC
	//
	// 	- **SlbInstance**: SLB instance
	//
	// example:
	//
	// SlbInstance
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The metering method of the EIP.
	//
	// 	- **95BandwidthByMonth**: Pay by monthly 95th percentile bandwidth
	//
	// 	- **PayByBandwidth**: Pay by bandwidth
	//
	// example:
	//
	// 95BandwidthByMonth
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The EIP.
	//
	// example:
	//
	// 10.10.10
	IpAddress *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	// The running status of the EIP. This parameter is returned if the EIP is a secondary EIP. Valid values:
	//
	// 	- **Stopped**
	//
	// 	- **Running**
	//
	// 	- **Starting**
	//
	// 	- **Stopping**
	//
	// example:
	//
	// Stopped
	IpStatus *string `json:"IpStatus,omitempty" xml:"IpStatus,omitempty"`
	// The Internet service provider (ISP). Valid values:
	//
	// 	- **cmcc**: China Mobile
	//
	// 	- **unicom**: China Unicom
	//
	// 	- **telecom**: China Telecom
	//
	// example:
	//
	// cmcc
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The name of the EIP.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Indicates whether the EIP is a secondary EIP.
	//
	// example:
	//
	// true
	Standby *bool `json:"Standby,omitempty" xml:"Standby,omitempty"`
	// The status of the EIP. Valid values:
	//
	// 	- **Associating**
	//
	// 	- **Unassociating**
	//
	// 	- **InUse**
	//
	// 	- **Available**
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) GoString() string {
	return s.String()
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetAllocationId(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.AllocationId = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetAllocationTime(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.AllocationTime = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetBandwidth(v int32) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Bandwidth = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetChargeType(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.ChargeType = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetDescription(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Description = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetEnsRegionId(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetInstanceId(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.InstanceId = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetInstanceType(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.InstanceType = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetInternetChargeType(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetIpAddress(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.IpAddress = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetIpStatus(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.IpStatus = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetIsp(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Isp = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetName(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Name = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetStandby(v bool) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Standby = &v
	return s
}

func (s *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress) SetStatus(v string) *DescribeEnsEipAddressesResponseBodyEipAddressesEipAddress {
	s.Status = &v
	return s
}

type DescribeEnsEipAddressesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsEipAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsEipAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsEipAddressesResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsEipAddressesResponse) SetHeaders(v map[string]*string) *DescribeEnsEipAddressesResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsEipAddressesResponse) SetStatusCode(v int32) *DescribeEnsEipAddressesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsEipAddressesResponse) SetBody(v *DescribeEnsEipAddressesResponseBody) *DescribeEnsEipAddressesResponse {
	s.Body = v
	return s
}

type DescribeEnsNetDistrictRequest struct {
	// The code of the region.
	//
	// If you do not specify this parameter, only nodes in the regions of the level that is specified by the NetLevelCode parameter are queried.
	//
	// If you specify this parameter, only nodes in the regions of the level that is specified by this parameter are queried.
	//
	// example:
	//
	// 100106
	NetDistrictCode *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	// The level of the region.
	//
	// 	- **Big**: area
	//
	// 	- **Middle**: province
	//
	// 	- **Small**: city
	//
	// This parameter is required.
	//
	// example:
	//
	// Big
	NetLevelCode *string `json:"NetLevelCode,omitempty" xml:"NetLevelCode,omitempty"`
}

func (s DescribeEnsNetDistrictRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetDistrictRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetDistrictRequest) SetNetDistrictCode(v string) *DescribeEnsNetDistrictRequest {
	s.NetDistrictCode = &v
	return s
}

func (s *DescribeEnsNetDistrictRequest) SetNetLevelCode(v string) *DescribeEnsNetDistrictRequest {
	s.NetLevelCode = &v
	return s
}

type DescribeEnsNetDistrictResponseBody struct {
	// The returned service code. A value of 0 indicates that the operation was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the regions.
	EnsNetDistricts *DescribeEnsNetDistrictResponseBodyEnsNetDistricts `json:"EnsNetDistricts,omitempty" xml:"EnsNetDistricts,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// F3B261DD-3858-4D3C-877D-303ADF374600
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsNetDistrictResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetDistrictResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetDistrictResponseBody) SetCode(v int32) *DescribeEnsNetDistrictResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBody) SetEnsNetDistricts(v *DescribeEnsNetDistrictResponseBodyEnsNetDistricts) *DescribeEnsNetDistrictResponseBody {
	s.EnsNetDistricts = v
	return s
}

func (s *DescribeEnsNetDistrictResponseBody) SetRequestId(v string) *DescribeEnsNetDistrictResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsNetDistrictResponseBodyEnsNetDistricts struct {
	EnsNetDistrict []*DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict `json:"EnsNetDistrict,omitempty" xml:"EnsNetDistrict,omitempty" type:"Repeated"`
}

func (s DescribeEnsNetDistrictResponseBodyEnsNetDistricts) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetDistrictResponseBodyEnsNetDistricts) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistricts) SetEnsNetDistrict(v []*DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) *DescribeEnsNetDistrictResponseBodyEnsNetDistricts {
	s.EnsNetDistrict = v
	return s
}

type DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict struct {
	// The number of nodes in the region.
	//
	// example:
	//
	// 2
	EnsRegionIdCount *string `json:"EnsRegionIdCount,omitempty" xml:"EnsRegionIdCount,omitempty"`
	// The code of the region.
	//
	// example:
	//
	// 100106
	NetDistrictCode *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	// The name of the region.
	//
	// example:
	//
	// southWest
	NetDistrictEnName *string `json:"NetDistrictEnName,omitempty" xml:"NetDistrictEnName,omitempty"`
	// The parent code of the region.
	//
	// example:
	//
	// 100000
	NetDistrictFatherCode *string `json:"NetDistrictFatherCode,omitempty" xml:"NetDistrictFatherCode,omitempty"`
	// The level of the region.
	//
	// 	- **Big**: area
	//
	// 	- **Middle**: province
	//
	// 	- **Small**: city
	//
	// example:
	//
	// Big
	NetDistrictLevel *string `json:"NetDistrictLevel,omitempty" xml:"NetDistrictLevel,omitempty"`
	// The name of the region.
	//
	// example:
	//
	// southwest China
	NetDistrictName *string `json:"NetDistrictName,omitempty" xml:"NetDistrictName,omitempty"`
}

func (s DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetEnsRegionIdCount(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.EnsRegionIdCount = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictCode(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictCode = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictEnName(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictEnName = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictFatherCode(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictFatherCode = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictLevel(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictLevel = &v
	return s
}

func (s *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictName(v string) *DescribeEnsNetDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictName = &v
	return s
}

type DescribeEnsNetDistrictResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsNetDistrictResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsNetDistrictResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetDistrictResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetDistrictResponse) SetHeaders(v map[string]*string) *DescribeEnsNetDistrictResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsNetDistrictResponse) SetStatusCode(v int32) *DescribeEnsNetDistrictResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsNetDistrictResponse) SetBody(v *DescribeEnsNetDistrictResponseBody) *DescribeEnsNetDistrictResponse {
	s.Body = v
	return s
}

type DescribeEnsNetLevelResponseBody struct {
	// The returned service code. A value of 0 indicates that the operation was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The network levels.
	EnsNetLevels *DescribeEnsNetLevelResponseBodyEnsNetLevels `json:"EnsNetLevels,omitempty" xml:"EnsNetLevels,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 86A6D421-A0C7-4C01-8648-47377CA6A2CE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsNetLevelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetLevelResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetLevelResponseBody) SetCode(v int32) *DescribeEnsNetLevelResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnsNetLevelResponseBody) SetEnsNetLevels(v *DescribeEnsNetLevelResponseBodyEnsNetLevels) *DescribeEnsNetLevelResponseBody {
	s.EnsNetLevels = v
	return s
}

func (s *DescribeEnsNetLevelResponseBody) SetRequestId(v string) *DescribeEnsNetLevelResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsNetLevelResponseBodyEnsNetLevels struct {
	EnsNetLevel []*DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel `json:"EnsNetLevel,omitempty" xml:"EnsNetLevel,omitempty" type:"Repeated"`
}

func (s DescribeEnsNetLevelResponseBodyEnsNetLevels) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetLevelResponseBodyEnsNetLevels) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetLevelResponseBodyEnsNetLevels) SetEnsNetLevel(v []*DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel) *DescribeEnsNetLevelResponseBodyEnsNetLevels {
	s.EnsNetLevel = v
	return s
}

type DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel struct {
	// The network level. Valid values:
	//
	// 	- Big: greater area.
	//
	// 	- Middle: province.
	//
	// 	- Small: city.
	//
	// example:
	//
	// Big
	EnsNetLevelCode *string `json:"EnsNetLevelCode,omitempty" xml:"EnsNetLevelCode,omitempty"`
}

func (s DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel) SetEnsNetLevelCode(v string) *DescribeEnsNetLevelResponseBodyEnsNetLevelsEnsNetLevel {
	s.EnsNetLevelCode = &v
	return s
}

type DescribeEnsNetLevelResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsNetLevelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsNetLevelResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetLevelResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetLevelResponse) SetHeaders(v map[string]*string) *DescribeEnsNetLevelResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsNetLevelResponse) SetStatusCode(v int32) *DescribeEnsNetLevelResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsNetLevelResponse) SetBody(v *DescribeEnsNetLevelResponseBody) *DescribeEnsNetLevelResponse {
	s.Body = v
	return s
}

type DescribeEnsNetSaleDistrictRequest struct {
	// The region code.
	//
	// 	- If you do not specify this parameter, only nodes under the area level that is specified by NetLevelCode are queried.
	//
	// 	- If you specify this parameter, only child nodes in the area that is specified by NetDistrictCode are queried.
	//
	// example:
	//
	// 100105
	NetDistrictCode *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	// The network level. Valid values:
	//
	// 	- **Big**: area
	//
	// 	- **Middle**: province
	//
	// 	- **Small**: city
	//
	// This parameter is required.
	//
	// example:
	//
	// Big
	NetLevelCode *string `json:"NetLevelCode,omitempty" xml:"NetLevelCode,omitempty"`
}

func (s DescribeEnsNetSaleDistrictRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetSaleDistrictRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetSaleDistrictRequest) SetNetDistrictCode(v string) *DescribeEnsNetSaleDistrictRequest {
	s.NetDistrictCode = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictRequest) SetNetLevelCode(v string) *DescribeEnsNetSaleDistrictRequest {
	s.NetLevelCode = &v
	return s
}

type DescribeEnsNetSaleDistrictResponseBody struct {
	// The returned service code. A value of 0 indicates that the operation was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the ISPs in the area.
	EnsNetDistricts *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts `json:"EnsNetDistricts,omitempty" xml:"EnsNetDistricts,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 1707B55C-A12F-43EF-BC66-14FFDB9253C3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsNetSaleDistrictResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetSaleDistrictResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetSaleDistrictResponseBody) SetCode(v int32) *DescribeEnsNetSaleDistrictResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBody) SetEnsNetDistricts(v *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts) *DescribeEnsNetSaleDistrictResponseBody {
	s.EnsNetDistricts = v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBody) SetRequestId(v string) *DescribeEnsNetSaleDistrictResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts struct {
	EnsNetDistrict []*DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict `json:"EnsNetDistrict,omitempty" xml:"EnsNetDistrict,omitempty" type:"Repeated"`
}

func (s DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts) SetEnsNetDistrict(v []*DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistricts {
	s.EnsNetDistrict = v
	return s
}

type DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict struct {
	// The information about the ISP.
	//
	// example:
	//
	// {                         "count":2,                         "name":"telecommunication",                         "code":"telecom",                         "country":"cn"                     }
	EnsRegionIdCount *string `json:"EnsRegionIdCount,omitempty" xml:"EnsRegionIdCount,omitempty"`
	// The information about the instance.
	//
	// example:
	//
	// {                         "count":2,                         "code":"multiCarrier"                     }
	InstanceCount *string `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// The region code.
	//
	// example:
	//
	// 100101
	NetDistrictCode *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	// The name of the region.
	//
	// example:
	//
	// northEast
	NetDistrictEnName *string `json:"NetDistrictEnName,omitempty" xml:"NetDistrictEnName,omitempty"`
	// The parent code of the region.
	//
	// example:
	//
	// 100000
	NetDistrictFatherCode *string `json:"NetDistrictFatherCode,omitempty" xml:"NetDistrictFatherCode,omitempty"`
	// The region level. Valid values:
	//
	// 	- **Big**: area
	//
	// 	- **Middle**: province
	//
	// 	- **Small**: city
	//
	// example:
	//
	// Big
	NetDistrictLevel *string `json:"NetDistrictLevel,omitempty" xml:"NetDistrictLevel,omitempty"`
	// The Chinese name of the region.
	//
	// example:
	//
	// Northeast China
	NetDistrictName *string `json:"NetDistrictName,omitempty" xml:"NetDistrictName,omitempty"`
}

func (s DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetEnsRegionIdCount(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.EnsRegionIdCount = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetInstanceCount(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.InstanceCount = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictCode(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictCode = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictEnName(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictEnName = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictFatherCode(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictFatherCode = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictLevel(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictLevel = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict) SetNetDistrictName(v string) *DescribeEnsNetSaleDistrictResponseBodyEnsNetDistrictsEnsNetDistrict {
	s.NetDistrictName = &v
	return s
}

type DescribeEnsNetSaleDistrictResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsNetSaleDistrictResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsNetSaleDistrictResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsNetSaleDistrictResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsNetSaleDistrictResponse) SetHeaders(v map[string]*string) *DescribeEnsNetSaleDistrictResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponse) SetStatusCode(v int32) *DescribeEnsNetSaleDistrictResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsNetSaleDistrictResponse) SetBody(v *DescribeEnsNetSaleDistrictResponseBody) *DescribeEnsNetSaleDistrictResponse {
	s.Body = v
	return s
}

type DescribeEnsRegionIdIpv6InfoRequest struct {
	// The ID of the node. You can specify only one node ID in a call.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-chengdu-xxxx-4
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeEnsRegionIdIpv6InfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdIpv6InfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdIpv6InfoRequest) SetEnsRegionId(v string) *DescribeEnsRegionIdIpv6InfoRequest {
	s.EnsRegionId = &v
	return s
}

type DescribeEnsRegionIdIpv6InfoResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 3703C4AC-9396-458C-8F25-1D701334D309
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// IPv6 support information.
	SupportIpv6Info *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info `json:"SupportIpv6Info,omitempty" xml:"SupportIpv6Info,omitempty" type:"Struct"`
}

func (s DescribeEnsRegionIdIpv6InfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdIpv6InfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdIpv6InfoResponseBody) SetRequestId(v string) *DescribeEnsRegionIdIpv6InfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsRegionIdIpv6InfoResponseBody) SetSupportIpv6Info(v *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info) *DescribeEnsRegionIdIpv6InfoResponseBody {
	s.SupportIpv6Info = v
	return s
}

type DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info struct {
	// The ID of the node.
	//
	// example:
	//
	// cn-chengdu-xxxx-4
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// Specifies whether IPv6 is supported. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	SupportIpv6 *bool `json:"SupportIpv6,omitempty" xml:"SupportIpv6,omitempty"`
}

func (s DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info) SetEnsRegionId(v string) *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info) SetSupportIpv6(v bool) *DescribeEnsRegionIdIpv6InfoResponseBodySupportIpv6Info {
	s.SupportIpv6 = &v
	return s
}

type DescribeEnsRegionIdIpv6InfoResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsRegionIdIpv6InfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsRegionIdIpv6InfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdIpv6InfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdIpv6InfoResponse) SetHeaders(v map[string]*string) *DescribeEnsRegionIdIpv6InfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsRegionIdIpv6InfoResponse) SetStatusCode(v int32) *DescribeEnsRegionIdIpv6InfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsRegionIdIpv6InfoResponse) SetBody(v *DescribeEnsRegionIdIpv6InfoResponseBody) *DescribeEnsRegionIdIpv6InfoResponse {
	s.Body = v
	return s
}

type DescribeEnsRegionIdResourceRequest struct {
	// The end time of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2020-06-16T06:33:15
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The Internet service provider (ISP). Valid values:
	//
	// 	- cmcc: China Mobile
	//
	// 	- telecom: China Telecom
	//
	// 	- unicom: China Unicom
	//
	// 	- multiCarrier: multi-line ISP
	//
	// example:
	//
	// cmcc
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The order in which the resources to return are sorted. Valid values:
	//
	// 	- InstanceCount: desc
	//
	// 	- Area: asc
	//
	// 	- InternetBandwidth: asc
	//
	// example:
	//
	// InstanceCount: desc
	OrderByParams *string `json:"OrderByParams,omitempty" xml:"OrderByParams,omitempty"`
	// The page number. Pages start from page **1**. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: **100**. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2020-06-16T06:33:15Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeEnsRegionIdResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdResourceRequest) SetEndTime(v string) *DescribeEnsRegionIdResourceRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEnsRegionIdResourceRequest) SetIsp(v string) *DescribeEnsRegionIdResourceRequest {
	s.Isp = &v
	return s
}

func (s *DescribeEnsRegionIdResourceRequest) SetOrderByParams(v string) *DescribeEnsRegionIdResourceRequest {
	s.OrderByParams = &v
	return s
}

func (s *DescribeEnsRegionIdResourceRequest) SetPageNumber(v int32) *DescribeEnsRegionIdResourceRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsRegionIdResourceRequest) SetPageSize(v string) *DescribeEnsRegionIdResourceRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsRegionIdResourceRequest) SetStartTime(v string) *DescribeEnsRegionIdResourceRequest {
	s.StartTime = &v
	return s
}

type DescribeEnsRegionIdResourceResponseBody struct {
	// The returned data. For more information, see EnsRegionIdResources in sample JSON responses.
	EnsRegionIdResources *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources `json:"EnsRegionIdResources,omitempty" xml:"EnsRegionIdResources,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 476600B1-C9E2-4245-A26F-DC7EA8071425
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of queried nodes.
	//
	// example:
	//
	// 58
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeEnsRegionIdResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdResourceResponseBody) SetEnsRegionIdResources(v *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources) *DescribeEnsRegionIdResourceResponseBody {
	s.EnsRegionIdResources = v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBody) SetPageNumber(v int32) *DescribeEnsRegionIdResourceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBody) SetPageSize(v int32) *DescribeEnsRegionIdResourceResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBody) SetRequestId(v string) *DescribeEnsRegionIdResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBody) SetTotalCount(v int32) *DescribeEnsRegionIdResourceResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources struct {
	EnsRegionIdResource []*DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource `json:"EnsRegionIdResource,omitempty" xml:"EnsRegionIdResource,omitempty" type:"Repeated"`
}

func (s DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources) SetEnsRegionIdResource(v []*DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResources {
	s.EnsRegionIdResource = v
	return s
}

type DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource struct {
	// The region. Set the value to West.
	//
	// example:
	//
	// West
	Area *string `json:"Area,omitempty" xml:"Area,omitempty"`
	// The code of the region.
	//
	// example:
	//
	// 300100
	AreaCode *string `json:"AreaCode,omitempty" xml:"AreaCode,omitempty"`
	// The date when the transaction was processed.
	//
	// example:
	//
	// 2019-10-30
	BizDate *string `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// cn-hangzhou-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the node.
	//
	// example:
	//
	// Nanjing Mobile
	EnsRegionIdName *string `json:"EnsRegionIdName,omitempty" xml:"EnsRegionIdName,omitempty"`
	// The number of instances.
	//
	// example:
	//
	// 10
	InstanceCount *int32 `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// The public bandwidth of the instance. Unit: Bits/s.
	//
	// example:
	//
	// 100
	InternetBandwidth *int64 `json:"InternetBandwidth,omitempty" xml:"InternetBandwidth,omitempty"`
	// The ISP. Valid values:
	//
	// 	- cmcc: China Mobile
	//
	// 	- unicom: China Unicom
	//
	// 	- telecom: China Telecom
	//
	// 	- multiCarrier: multi-line ISP
	//
	// example:
	//
	// cmcc
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The number of vCPUs.
	//
	// example:
	//
	// 10
	VCpu *int32 `json:"VCpu,omitempty" xml:"VCpu,omitempty"`
}

func (s DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetArea(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.Area = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetAreaCode(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.AreaCode = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetBizDate(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.BizDate = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetEnsRegionId(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetEnsRegionIdName(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.EnsRegionIdName = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetInstanceCount(v int32) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.InstanceCount = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetInternetBandwidth(v int64) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.InternetBandwidth = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetIsp(v string) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.Isp = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource) SetVCpu(v int32) *DescribeEnsRegionIdResourceResponseBodyEnsRegionIdResourcesEnsRegionIdResource {
	s.VCpu = &v
	return s
}

type DescribeEnsRegionIdResourceResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsRegionIdResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsRegionIdResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionIdResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionIdResourceResponse) SetHeaders(v map[string]*string) *DescribeEnsRegionIdResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsRegionIdResourceResponse) SetStatusCode(v int32) *DescribeEnsRegionIdResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsRegionIdResourceResponse) SetBody(v *DescribeEnsRegionIdResourceResponseBody) *DescribeEnsRegionIdResourceResponse {
	s.Body = v
	return s
}

type DescribeEnsRegionsRequest struct {
	// The ID of the node.
	//
	// By default, all available node IDs are returned.
	//
	// example:
	//
	// cn-dalian-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeEnsRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionsRequest) SetEnsRegionId(v string) *DescribeEnsRegionsRequest {
	s.EnsRegionId = &v
	return s
}

type DescribeEnsRegionsResponseBody struct {
	// The service code. 0 is returned for a successful request. An error code is returned for a failed request.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the regions.
	EnsRegions *DescribeEnsRegionsResponseBodyEnsRegions `json:"EnsRegions,omitempty" xml:"EnsRegions,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionsResponseBody) SetCode(v int32) *DescribeEnsRegionsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeEnsRegionsResponseBody) SetEnsRegions(v *DescribeEnsRegionsResponseBodyEnsRegions) *DescribeEnsRegionsResponseBody {
	s.EnsRegions = v
	return s
}

func (s *DescribeEnsRegionsResponseBody) SetRequestId(v string) *DescribeEnsRegionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsRegionsResponseBodyEnsRegions struct {
	EnsRegions []*DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions `json:"EnsRegions,omitempty" xml:"EnsRegions,omitempty" type:"Repeated"`
}

func (s DescribeEnsRegionsResponseBodyEnsRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionsResponseBodyEnsRegions) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionsResponseBodyEnsRegions) SetEnsRegions(v []*DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) *DescribeEnsRegionsResponseBodyEnsRegions {
	s.EnsRegions = v
	return s
}

type DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions struct {
	// The code of the region.
	//
	// example:
	//
	// NorthEastChina
	Area *string `json:"Area,omitempty" xml:"Area,omitempty"`
	// The name of the node.
	//
	// example:
	//
	// NorthChina
	EnName *string `json:"EnName,omitempty" xml:"EnName,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// cn-dalian-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the node.
	//
	// example:
	//
	// Dalian Unicom
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The province where the node is deployed.
	//
	// example:
	//
	// Liaoning Province
	Province *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) SetArea(v string) *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions {
	s.Area = &v
	return s
}

func (s *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) SetEnName(v string) *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions {
	s.EnName = &v
	return s
}

func (s *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) SetEnsRegionId(v string) *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) SetName(v string) *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions {
	s.Name = &v
	return s
}

func (s *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions) SetProvince(v string) *DescribeEnsRegionsResponseBodyEnsRegionsEnsRegions {
	s.Province = &v
	return s
}

type DescribeEnsRegionsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsRegionsResponse) SetHeaders(v map[string]*string) *DescribeEnsRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsRegionsResponse) SetStatusCode(v int32) *DescribeEnsRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsRegionsResponse) SetBody(v *DescribeEnsRegionsResponseBody) *DescribeEnsRegionsResponse {
	s.Body = v
	return s
}

type DescribeEnsResourceUsageRequest struct {
	// The end of the time range to query. Format: yyyy-MM-dd or yyyy-MM-dd HH:mm:ss.
	//
	// example:
	//
	// 2018-06-15T09:07:23Z
	ExpiredEndTime *string `json:"ExpiredEndTime,omitempty" xml:"ExpiredEndTime,omitempty"`
	// The beginning of the time range to query. Format: yyyy-MM-dd or yyyy-MM-dd HH:mm:ss.
	//
	// example:
	//
	// 2018-06-15T09:07:23Z
	ExpiredStartTime *string `json:"ExpiredStartTime,omitempty" xml:"ExpiredStartTime,omitempty"`
}

func (s DescribeEnsResourceUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsResourceUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsResourceUsageRequest) SetExpiredEndTime(v string) *DescribeEnsResourceUsageRequest {
	s.ExpiredEndTime = &v
	return s
}

func (s *DescribeEnsResourceUsageRequest) SetExpiredStartTime(v string) *DescribeEnsResourceUsageRequest {
	s.ExpiredStartTime = &v
	return s
}

type DescribeEnsResourceUsageResponseBody struct {
	// The resource usage data.
	EnsResourceUsage []*DescribeEnsResourceUsageResponseBodyEnsResourceUsage `json:"EnsResourceUsage,omitempty" xml:"EnsResourceUsage,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E	 Request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEnsResourceUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsResourceUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsResourceUsageResponseBody) SetEnsResourceUsage(v []*DescribeEnsResourceUsageResponseBodyEnsResourceUsage) *DescribeEnsResourceUsageResponseBody {
	s.EnsResourceUsage = v
	return s
}

func (s *DescribeEnsResourceUsageResponseBody) SetRequestId(v string) *DescribeEnsResourceUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEnsResourceUsageResponseBodyEnsResourceUsage struct {
	// The number of edge services. This parameter is available only when you set the ServiceType parameter to 2.
	//
	// example:
	//
	// 2
	ComputeResourceCount *int32 `json:"ComputeResourceCount,omitempty" xml:"ComputeResourceCount,omitempty"`
	// The CPU usage. Unit: cores.
	//
	// example:
	//
	// 2
	CpuSum *int64 `json:"CpuSum,omitempty" xml:"CpuSum,omitempty"`
	// The number of data disks.
	//
	// example:
	//
	// 4
	DiskCount *int32 `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	// The number of stopped VMs.
	//
	// example:
	//
	// 7
	DownCount *int32 `json:"DownCount,omitempty" xml:"DownCount,omitempty"`
	// The number of expired VM instances.
	//
	// example:
	//
	// 1
	ExpiredCount *int32 `json:"ExpiredCount,omitempty" xml:"ExpiredCount,omitempty"`
	// The number of VM instances that are about to expire.
	//
	// example:
	//
	// 0
	ExpiringCount *int32 `json:"ExpiringCount,omitempty" xml:"ExpiringCount,omitempty"`
	// The number of GPUs.
	//
	// example:
	//
	// 6
	GpuSum *int64 `json:"GpuSum,omitempty" xml:"GpuSum,omitempty"`
	// The number of instances.
	//
	// example:
	//
	// 2
	InstanceCount *int32 `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// The number of running instances.
	//
	// example:
	//
	// 19
	RunningCount *int32 `json:"RunningCount,omitempty" xml:"RunningCount,omitempty"`
	// The type of the service. Valid values:
	//
	// 	- 1: subscription instance.
	//
	// 	- 2: edge service instance.
	//
	// 	- 3: pay-as-you-go instance.
	//
	// example:
	//
	// 1
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// The total disk size.
	//
	// example:
	//
	// 5000
	StorageSum *int64 `json:"StorageSum,omitempty" xml:"StorageSum,omitempty"`
}

func (s DescribeEnsResourceUsageResponseBodyEnsResourceUsage) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsResourceUsageResponseBodyEnsResourceUsage) GoString() string {
	return s.String()
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetComputeResourceCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.ComputeResourceCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetCpuSum(v int64) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.CpuSum = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetDiskCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.DiskCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetDownCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.DownCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetExpiredCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.ExpiredCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetExpiringCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.ExpiringCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetGpuSum(v int64) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.GpuSum = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetInstanceCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.InstanceCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetRunningCount(v int32) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.RunningCount = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetServiceType(v string) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.ServiceType = &v
	return s
}

func (s *DescribeEnsResourceUsageResponseBodyEnsResourceUsage) SetStorageSum(v int64) *DescribeEnsResourceUsageResponseBodyEnsResourceUsage {
	s.StorageSum = &v
	return s
}

type DescribeEnsResourceUsageResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsResourceUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsResourceUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsResourceUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsResourceUsageResponse) SetHeaders(v map[string]*string) *DescribeEnsResourceUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsResourceUsageResponse) SetStatusCode(v int32) *DescribeEnsResourceUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsResourceUsageResponse) SetBody(v *DescribeEnsResourceUsageResponseBody) *DescribeEnsResourceUsageResponse {
	s.Body = v
	return s
}

type DescribeEnsRouteEntryListRequest struct {
	// The destination Classless Inter-Domain Routing (CIDR) block of the route entry.
	//
	// example:
	//
	// 11.0.0.0/16
	DestinationCidrBlock *string `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	// The ID of the next hop.
	//
	// example:
	//
	// i-2zecshuv3axtr2gc4noa
	NextHopId *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	// The type of next hop of the custom route entry. Valid values:
	//
	// 	- Instance (default): an ENS instance.
	//
	// 	- HaVip: a high-availability virtual IP address (HAVIP).
	//
	// 	- NetworkPeer: VPC peering connection.
	//
	// example:
	//
	// Instance
	NextHopType *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
	// The page number of the returned page. Valid values: integers that are greater than 0. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: 10 to 100.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the route that you want to query.
	//
	// example:
	//
	// rte-8vbdw66evgv44u2u7v3hx
	RouteEntryId *string `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
	// The name of the route.
	//
	// example:
	//
	// test0
	RouteEntryName *string `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty"`
	// The route type. Valid values:
	//
	// 	- Custom: custom route
	//
	// 	- System: system route
	//
	// example:
	//
	// Custom
	RouteEntryType *string `json:"RouteEntryType,omitempty" xml:"RouteEntryType,omitempty"`
	// The ID of the route table that you want to query.
	//
	// example:
	//
	// vtb-hp3wdhynneo7fsclox8hs
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
}

func (s DescribeEnsRouteEntryListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteEntryListRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteEntryListRequest) SetDestinationCidrBlock(v string) *DescribeEnsRouteEntryListRequest {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetNextHopId(v string) *DescribeEnsRouteEntryListRequest {
	s.NextHopId = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetNextHopType(v string) *DescribeEnsRouteEntryListRequest {
	s.NextHopType = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetPageNumber(v int32) *DescribeEnsRouteEntryListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetPageSize(v int32) *DescribeEnsRouteEntryListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetRouteEntryId(v string) *DescribeEnsRouteEntryListRequest {
	s.RouteEntryId = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetRouteEntryName(v string) *DescribeEnsRouteEntryListRequest {
	s.RouteEntryName = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetRouteEntryType(v string) *DescribeEnsRouteEntryListRequest {
	s.RouteEntryType = &v
	return s
}

func (s *DescribeEnsRouteEntryListRequest) SetRouteTableId(v string) *DescribeEnsRouteEntryListRequest {
	s.RouteTableId = &v
	return s
}

type DescribeEnsRouteEntryListResponseBody struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the routes.
	RouteEntrys []*DescribeEnsRouteEntryListResponseBodyRouteEntrys `json:"RouteEntrys,omitempty" xml:"RouteEntrys,omitempty" type:"Repeated"`
	// The number of returned entries.
	//
	// example:
	//
	// 7
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeEnsRouteEntryListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteEntryListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteEntryListResponseBody) SetPageNumber(v int32) *DescribeEnsRouteEntryListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBody) SetPageSize(v int32) *DescribeEnsRouteEntryListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBody) SetRequestId(v string) *DescribeEnsRouteEntryListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBody) SetRouteEntrys(v []*DescribeEnsRouteEntryListResponseBodyRouteEntrys) *DescribeEnsRouteEntryListResponseBody {
	s.RouteEntrys = v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBody) SetTotalCount(v int32) *DescribeEnsRouteEntryListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeEnsRouteEntryListResponseBodyRouteEntrys struct {
	// The time when the entry was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-02-16T03:50:05Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// Enter a description for the route.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The destination CIDR block of the route.
	//
	// example:
	//
	// 101.0.45.0/24
	DestinationCidrBlock *string `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	// The information about the next hop.
	NextHops []*DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops `json:"NextHops,omitempty" xml:"NextHops,omitempty" type:"Repeated"`
	// The ID of the route.
	//
	// example:
	//
	// rte-2zeksx7h436f5unk349m1
	RouteEntryId *string `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
	// The name of the route.
	//
	// example:
	//
	// test0
	RouteEntryName *string `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty"`
	// The ID of the route table.
	//
	// example:
	//
	// vtb-uf62p9o5cn35fi8xgurnm
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	// The new source CIDR block of the inbound or outbound traffic.
	//
	// example:
	//
	// 10.XXX.XXX.0/24
	SourceCidrBlock *string `json:"SourceCidrBlock,omitempty" xml:"SourceCidrBlock,omitempty"`
	// The status of the route entry. Valid values:
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the route entry.
	//
	// example:
	//
	// Custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeEnsRouteEntryListResponseBodyRouteEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteEntryListResponseBodyRouteEntrys) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetCreationTime(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.CreationTime = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetDescription(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.Description = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetDestinationCidrBlock(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.DestinationCidrBlock = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetNextHops(v []*DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.NextHops = v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetRouteEntryId(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.RouteEntryId = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetRouteEntryName(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.RouteEntryName = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetRouteTableId(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.RouteTableId = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetSourceCidrBlock(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.SourceCidrBlock = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetStatus(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.Status = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrys) SetType(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrys {
	s.Type = &v
	return s
}

type DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops struct {
	// The ID of the next hop.
	//
	// example:
	//
	// i-bp1111yup9991890woxq
	NextHopId *string `json:"NextHopId,omitempty" xml:"NextHopId,omitempty"`
	// The instance ID of the next hop.
	//
	// example:
	//
	// testInstance
	NextHopName *string `json:"NextHopName,omitempty" xml:"NextHopName,omitempty"`
	// The type of the next hop. Valid values:
	//
	// example:
	//
	// Instance
	NextHopType *string `json:"NextHopType,omitempty" xml:"NextHopType,omitempty"`
}

func (s DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) SetNextHopId(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops {
	s.NextHopId = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) SetNextHopName(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops {
	s.NextHopName = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops) SetNextHopType(v string) *DescribeEnsRouteEntryListResponseBodyRouteEntrysNextHops {
	s.NextHopType = &v
	return s
}

type DescribeEnsRouteEntryListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsRouteEntryListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsRouteEntryListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteEntryListResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteEntryListResponse) SetHeaders(v map[string]*string) *DescribeEnsRouteEntryListResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsRouteEntryListResponse) SetStatusCode(v int32) *DescribeEnsRouteEntryListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsRouteEntryListResponse) SetBody(v *DescribeEnsRouteEntryListResponseBody) *DescribeEnsRouteEntryListResponse {
	s.Body = v
	return s
}

type DescribeEnsRouteTablesRequest struct {
	// The type of the route table. Valid values:
	//
	// 	- **VSwitch*	- (default): vSwitch route table
	//
	// 	- **Gateway**: gateway route table
	//
	// example:
	//
	// Gateway
	AssociateType *string `json:"AssociateType,omitempty" xml:"AssociateType,omitempty"`
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-xian-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The IDs of edge nodes. You can specify 1 to 100 IDs.
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The ID of the network.
	//
	// example:
	//
	// n-257gqcdfvx6n****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the route table.
	//
	// example:
	//
	// vtb-5p1cifr72di****
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	// The name of the route table that you want to query.
	//
	// The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-).
	//
	// example:
	//
	// tftest-nat04
	RouteTableName *string `json:"RouteTableName,omitempty" xml:"RouteTableName,omitempty"`
	// The type of the NAT.
	//
	// 	- Empty: symmetric NAT.
	//
	// 	- FullCone: full cone NAT.
	//
	// example:
	//
	// FullCone
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeEnsRouteTablesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteTablesRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteTablesRequest) SetAssociateType(v string) *DescribeEnsRouteTablesRequest {
	s.AssociateType = &v
	return s
}

func (s *DescribeEnsRouteTablesRequest) SetEnsRegionId(v string) *DescribeEnsRouteTablesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsRouteTablesRequest) SetEnsRegionIds(v []*string) *DescribeEnsRouteTablesRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeEnsRouteTablesRequest) SetNetworkId(v string) *DescribeEnsRouteTablesRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeEnsRouteTablesRequest) SetPageNumber(v int32) *DescribeEnsRouteTablesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsRouteTablesRequest) SetPageSize(v int32) *DescribeEnsRouteTablesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsRouteTablesRequest) SetRouteTableId(v string) *DescribeEnsRouteTablesRequest {
	s.RouteTableId = &v
	return s
}

func (s *DescribeEnsRouteTablesRequest) SetRouteTableName(v string) *DescribeEnsRouteTablesRequest {
	s.RouteTableName = &v
	return s
}

func (s *DescribeEnsRouteTablesRequest) SetType(v string) *DescribeEnsRouteTablesRequest {
	s.Type = &v
	return s
}

type DescribeEnsRouteTablesResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 30
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// DC51ACB0-460D-5CA0-BA2D-E1F3B5547AE9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the route tables.
	RouteTables []*DescribeEnsRouteTablesResponseBodyRouteTables `json:"RouteTables,omitempty" xml:"RouteTables,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 10
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeEnsRouteTablesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteTablesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteTablesResponseBody) SetPageNumber(v int32) *DescribeEnsRouteTablesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBody) SetPageSize(v int32) *DescribeEnsRouteTablesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBody) SetRequestId(v string) *DescribeEnsRouteTablesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBody) SetRouteTables(v []*DescribeEnsRouteTablesResponseBodyRouteTables) *DescribeEnsRouteTablesResponseBody {
	s.RouteTables = v
	return s
}

func (s *DescribeEnsRouteTablesResponseBody) SetTotalCount(v int32) *DescribeEnsRouteTablesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeEnsRouteTablesResponseBodyRouteTables struct {
	// The type of the route table. Valid values:
	//
	// 	- **VSwitch*	- (default): vSwitch route table
	//
	// 	- **Gateway**: gateway route table
	//
	// example:
	//
	// VSwitch
	AssociateType *string `json:"AssociateType,omitempty" xml:"AssociateType,omitempty"`
	// The time when the route table was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-03-08T08:35:18Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the network.
	//
	// The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-beijing-15
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// Is the gateway routing table the default.
	//
	// example:
	//
	// false
	IsDefaultGatewayRouteTable *bool `json:"IsDefaultGatewayRouteTable,omitempty" xml:"IsDefaultGatewayRouteTable,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-5v9lufsezl4g****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The ID of the route table.
	//
	// example:
	//
	// rt-5xde2bit9****
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	// The name of the route table that you want to query.
	//
	// The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-).
	//
	// example:
	//
	// test-tf-vtb7
	RouteTableName *string `json:"RouteTableName,omitempty" xml:"RouteTableName,omitempty"`
	// The status. Valid values:
	//
	// 	- Available: The route table is available.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the route table. Examples:
	//
	// 	- Custom: custom route table.
	//
	// 	- System: system route table.
	//
	// example:
	//
	// System
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The vSwitches that are associated with the route table.
	VSwitchIds []*string `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" type:"Repeated"`
}

func (s DescribeEnsRouteTablesResponseBodyRouteTables) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteTablesResponseBodyRouteTables) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetAssociateType(v string) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.AssociateType = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetCreationTime(v string) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.CreationTime = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetDescription(v string) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.Description = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetEnsRegionId(v string) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetIsDefaultGatewayRouteTable(v bool) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.IsDefaultGatewayRouteTable = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetNetworkId(v string) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.NetworkId = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetRouteTableId(v string) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.RouteTableId = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetRouteTableName(v string) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.RouteTableName = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetStatus(v string) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.Status = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetType(v string) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.Type = &v
	return s
}

func (s *DescribeEnsRouteTablesResponseBodyRouteTables) SetVSwitchIds(v []*string) *DescribeEnsRouteTablesResponseBodyRouteTables {
	s.VSwitchIds = v
	return s
}

type DescribeEnsRouteTablesResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsRouteTablesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsRouteTablesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsRouteTablesResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsRouteTablesResponse) SetHeaders(v map[string]*string) *DescribeEnsRouteTablesResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsRouteTablesResponse) SetStatusCode(v int32) *DescribeEnsRouteTablesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsRouteTablesResponse) SetBody(v *DescribeEnsRouteTablesResponseBody) *DescribeEnsRouteTablesResponse {
	s.Body = v
	return s
}

type DescribeEnsSaleControlRequest struct {
	AliUidAccount *string `json:"AliUidAccount,omitempty" xml:"AliUidAccount,omitempty"`
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	ModuleCode    *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	OrderType     *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
}

func (s DescribeEnsSaleControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlRequest) SetAliUidAccount(v string) *DescribeEnsSaleControlRequest {
	s.AliUidAccount = &v
	return s
}

func (s *DescribeEnsSaleControlRequest) SetCommodityCode(v string) *DescribeEnsSaleControlRequest {
	s.CommodityCode = &v
	return s
}

func (s *DescribeEnsSaleControlRequest) SetCustomAccount(v string) *DescribeEnsSaleControlRequest {
	s.CustomAccount = &v
	return s
}

func (s *DescribeEnsSaleControlRequest) SetModuleCode(v string) *DescribeEnsSaleControlRequest {
	s.ModuleCode = &v
	return s
}

func (s *DescribeEnsSaleControlRequest) SetOrderType(v string) *DescribeEnsSaleControlRequest {
	s.OrderType = &v
	return s
}

type DescribeEnsSaleControlResponseBody struct {
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SaleControl []*DescribeEnsSaleControlResponseBodySaleControl `json:"SaleControl,omitempty" xml:"SaleControl,omitempty" type:"Repeated"`
}

func (s DescribeEnsSaleControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlResponseBody) SetRequestId(v string) *DescribeEnsSaleControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBody) SetSaleControl(v []*DescribeEnsSaleControlResponseBodySaleControl) *DescribeEnsSaleControlResponseBody {
	s.SaleControl = v
	return s
}

type DescribeEnsSaleControlResponseBodySaleControl struct {
	CommodityCode    *string                                                          `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	OrderType        *string                                                          `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	SaleControlItems []*DescribeEnsSaleControlResponseBodySaleControlSaleControlItems `json:"SaleControlItems,omitempty" xml:"SaleControlItems,omitempty" type:"Repeated"`
}

func (s DescribeEnsSaleControlResponseBodySaleControl) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlResponseBodySaleControl) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlResponseBodySaleControl) SetCommodityCode(v string) *DescribeEnsSaleControlResponseBodySaleControl {
	s.CommodityCode = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControl) SetOrderType(v string) *DescribeEnsSaleControlResponseBodySaleControl {
	s.OrderType = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControl) SetSaleControlItems(v []*DescribeEnsSaleControlResponseBodySaleControlSaleControlItems) *DescribeEnsSaleControlResponseBodySaleControl {
	s.SaleControlItems = v
	return s
}

type DescribeEnsSaleControlResponseBodySaleControlSaleControlItems struct {
	ModuleCode      *string                                                                       `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	SaleControlItem *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItem `json:"SaleControlItem,omitempty" xml:"SaleControlItem,omitempty" type:"Struct"`
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItems) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItems) SetModuleCode(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItems {
	s.ModuleCode = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItems) SetSaleControlItem(v *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItem) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItems {
	s.SaleControlItem = v
	return s
}

type DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItem struct {
	BasicSaleControl     *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl       `json:"BasicSaleControl,omitempty" xml:"BasicSaleControl,omitempty" type:"Struct"`
	ConditionSaleControl []*DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl `json:"ConditionSaleControl,omitempty" xml:"ConditionSaleControl,omitempty" type:"Repeated"`
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItem) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItem) SetBasicSaleControl(v *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItem {
	s.BasicSaleControl = v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItem) SetConditionSaleControl(v []*DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItem {
	s.ConditionSaleControl = v
	return s
}

type DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl struct {
	Description *string                                                                                                  `json:"Description,omitempty" xml:"Description,omitempty"`
	ModuleValue *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue `json:"ModuleValue,omitempty" xml:"ModuleValue,omitempty" type:"Struct"`
	Operator    *string                                                                                                  `json:"Operator,omitempty" xml:"Operator,omitempty"`
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) SetDescription(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl {
	s.Description = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) SetModuleValue(v *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl {
	s.ModuleValue = v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) SetOperator(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl {
	s.Operator = &v
	return s
}

type DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue struct {
	ModuleMaxValue *string   `json:"ModuleMaxValue,omitempty" xml:"ModuleMaxValue,omitempty"`
	ModuleMinValue *string   `json:"ModuleMinValue,omitempty" xml:"ModuleMinValue,omitempty"`
	ModuleValue    []*string `json:"ModuleValue,omitempty" xml:"ModuleValue,omitempty" type:"Repeated"`
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) SetModuleMaxValue(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue {
	s.ModuleMaxValue = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) SetModuleMinValue(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue {
	s.ModuleMinValue = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) SetModuleValue(v []*string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue {
	s.ModuleValue = v
	return s
}

type DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl struct {
	ConditionControl *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl `json:"ConditionControl,omitempty" xml:"ConditionControl,omitempty" type:"Struct"`
	Description      *string                                                                                                           `json:"Description,omitempty" xml:"Description,omitempty"`
	ModuleValue      *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue      `json:"ModuleValue,omitempty" xml:"ModuleValue,omitempty" type:"Struct"`
	Operator         *string                                                                                                           `json:"Operator,omitempty" xml:"Operator,omitempty"`
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) SetConditionControl(v *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl {
	s.ConditionControl = v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) SetDescription(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl {
	s.Description = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) SetModuleValue(v *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl {
	s.ModuleValue = v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) SetOperator(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl {
	s.Operator = &v
	return s
}

type DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl struct {
	ConditionControlModuleCode  *string `json:"ConditionControlModuleCode,omitempty" xml:"ConditionControlModuleCode,omitempty"`
	ConditionControlModuleValue *string `json:"ConditionControlModuleValue,omitempty" xml:"ConditionControlModuleValue,omitempty"`
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl) SetConditionControlModuleCode(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl {
	s.ConditionControlModuleCode = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl) SetConditionControlModuleValue(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl {
	s.ConditionControlModuleValue = &v
	return s
}

type DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue struct {
	ModuleMaxValue *string   `json:"ModuleMaxValue,omitempty" xml:"ModuleMaxValue,omitempty"`
	ModuleMinValue *string   `json:"ModuleMinValue,omitempty" xml:"ModuleMinValue,omitempty"`
	ModuleValue    []*string `json:"ModuleValue,omitempty" xml:"ModuleValue,omitempty" type:"Repeated"`
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) SetModuleMaxValue(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue {
	s.ModuleMaxValue = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) SetModuleMinValue(v string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue {
	s.ModuleMinValue = &v
	return s
}

func (s *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) SetModuleValue(v []*string) *DescribeEnsSaleControlResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue {
	s.ModuleValue = v
	return s
}

type DescribeEnsSaleControlResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsSaleControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsSaleControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlResponse) SetHeaders(v map[string]*string) *DescribeEnsSaleControlResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsSaleControlResponse) SetStatusCode(v int32) *DescribeEnsSaleControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsSaleControlResponse) SetBody(v *DescribeEnsSaleControlResponseBody) *DescribeEnsSaleControlResponse {
	s.Body = v
	return s
}

type DescribeEnsSaleControlAvailableResourceRequest struct {
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	OrderType     *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
}

func (s DescribeEnsSaleControlAvailableResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlAvailableResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlAvailableResourceRequest) SetCommodityCode(v string) *DescribeEnsSaleControlAvailableResourceRequest {
	s.CommodityCode = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceRequest) SetCustomAccount(v string) *DescribeEnsSaleControlAvailableResourceRequest {
	s.CustomAccount = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceRequest) SetOrderType(v string) *DescribeEnsSaleControlAvailableResourceRequest {
	s.OrderType = &v
	return s
}

type DescribeEnsSaleControlAvailableResourceResponseBody struct {
	RequestId                    *string                                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SaleControlAvailableResource []*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource `json:"SaleControlAvailableResource,omitempty" xml:"SaleControlAvailableResource,omitempty" type:"Repeated"`
}

func (s DescribeEnsSaleControlAvailableResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlAvailableResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBody) SetRequestId(v string) *DescribeEnsSaleControlAvailableResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBody) SetSaleControlAvailableResource(v []*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource) *DescribeEnsSaleControlAvailableResourceResponseBody {
	s.SaleControlAvailableResource = v
	return s
}

type DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource struct {
	AvailableDiskType    []*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableDiskType  `json:"AvailableDiskType,omitempty" xml:"AvailableDiskType,omitempty" type:"Repeated"`
	AvailableRegion      []*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion    `json:"AvailableRegion,omitempty" xml:"AvailableRegion,omitempty" type:"Repeated"`
	AvailableSpec        []*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec      `json:"AvailableSpec,omitempty" xml:"AvailableSpec,omitempty" type:"Repeated"`
	AvailableStorageType *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageType `json:"AvailableStorageType,omitempty" xml:"AvailableStorageType,omitempty" type:"Struct"`
	CommodityCode        *string                                                                                              `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	OrderType            *string                                                                                              `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource) SetAvailableDiskType(v []*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableDiskType) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource {
	s.AvailableDiskType = v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource) SetAvailableRegion(v []*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource {
	s.AvailableRegion = v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource) SetAvailableSpec(v []*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource {
	s.AvailableSpec = v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource) SetAvailableStorageType(v *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageType) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource {
	s.AvailableStorageType = v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource) SetCommodityCode(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource {
	s.CommodityCode = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource) SetOrderType(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResource {
	s.OrderType = &v
	return s
}

type DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableDiskType struct {
	DiskName *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableDiskType) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableDiskType) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableDiskType) SetDiskName(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableDiskType {
	s.DiskName = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableDiskType) SetDiskType(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableDiskType {
	s.DiskType = &v
	return s
}

type DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion struct {
	Area          *string `json:"Area,omitempty" xml:"Area,omitempty"`
	City          *string `json:"City,omitempty" xml:"City,omitempty"`
	Country       *string `json:"Country,omitempty" xml:"Country,omitempty"`
	EnsRegionId   *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	EnsRegionName *string `json:"EnsRegionName,omitempty" xml:"EnsRegionName,omitempty"`
	Isp           *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	Province      *string `json:"Province,omitempty" xml:"Province,omitempty"`
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion) SetArea(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion {
	s.Area = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion) SetCity(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion {
	s.City = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion) SetCountry(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion {
	s.Country = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion) SetEnsRegionId(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion) SetEnsRegionName(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion {
	s.EnsRegionName = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion) SetIsp(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion {
	s.Isp = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion) SetProvince(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableRegion {
	s.Province = &v
	return s
}

type DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec struct {
	Cores     *string `json:"Cores,omitempty" xml:"Cores,omitempty"`
	Memory    *string `json:"Memory,omitempty" xml:"Memory,omitempty"`
	SpecName  *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	SpecValue *string `json:"SpecValue,omitempty" xml:"SpecValue,omitempty"`
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec) SetCores(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec {
	s.Cores = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec) SetMemory(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec {
	s.Memory = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec) SetSpecName(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec {
	s.SpecName = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec) SetSpecValue(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableSpec {
	s.SpecValue = &v
	return s
}

type DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageType struct {
	AvailableDefaultStorageType []*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableDefaultStorageType   `json:"AvailableDefaultStorageType,omitempty" xml:"AvailableDefaultStorageType,omitempty" type:"Repeated"`
	AvailableSpecialStorageType [][]*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType `json:"AvailableSpecialStorageType,omitempty" xml:"AvailableSpecialStorageType,omitempty" type:"Repeated"`
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageType) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageType) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageType) SetAvailableDefaultStorageType(v []*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableDefaultStorageType) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageType {
	s.AvailableDefaultStorageType = v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageType) SetAvailableSpecialStorageType(v [][]*DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageType {
	s.AvailableSpecialStorageType = v
	return s
}

type DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableDefaultStorageType struct {
	StorageName *string `json:"StorageName,omitempty" xml:"StorageName,omitempty"`
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableDefaultStorageType) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableDefaultStorageType) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableDefaultStorageType) SetStorageName(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableDefaultStorageType {
	s.StorageName = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableDefaultStorageType) SetStorageType(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableDefaultStorageType {
	s.StorageType = &v
	return s
}

type DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType struct {
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	StorageName *string `json:"StorageName,omitempty" xml:"StorageName,omitempty"`
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType) SetStorageType(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType {
	s.StorageType = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType) SetStorageName(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType {
	s.StorageName = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType) SetEnsRegionId(v string) *DescribeEnsSaleControlAvailableResourceResponseBodySaleControlAvailableResourceAvailableStorageTypeAvailableSpecialStorageType {
	s.EnsRegionId = &v
	return s
}

type DescribeEnsSaleControlAvailableResourceResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsSaleControlAvailableResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsSaleControlAvailableResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlAvailableResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlAvailableResourceResponse) SetHeaders(v map[string]*string) *DescribeEnsSaleControlAvailableResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponse) SetStatusCode(v int32) *DescribeEnsSaleControlAvailableResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsSaleControlAvailableResourceResponse) SetBody(v *DescribeEnsSaleControlAvailableResourceResponseBody) *DescribeEnsSaleControlAvailableResourceResponse {
	s.Body = v
	return s
}

type DescribeEnsSaleControlStockRequest struct {
	AliUidAccount *string `json:"AliUidAccount,omitempty" xml:"AliUidAccount,omitempty"`
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	ModuleCode    *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	OrderType     *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
}

func (s DescribeEnsSaleControlStockRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockRequest) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockRequest) SetAliUidAccount(v string) *DescribeEnsSaleControlStockRequest {
	s.AliUidAccount = &v
	return s
}

func (s *DescribeEnsSaleControlStockRequest) SetCommodityCode(v string) *DescribeEnsSaleControlStockRequest {
	s.CommodityCode = &v
	return s
}

func (s *DescribeEnsSaleControlStockRequest) SetCustomAccount(v string) *DescribeEnsSaleControlStockRequest {
	s.CustomAccount = &v
	return s
}

func (s *DescribeEnsSaleControlStockRequest) SetModuleCode(v string) *DescribeEnsSaleControlStockRequest {
	s.ModuleCode = &v
	return s
}

func (s *DescribeEnsSaleControlStockRequest) SetOrderType(v string) *DescribeEnsSaleControlStockRequest {
	s.OrderType = &v
	return s
}

type DescribeEnsSaleControlStockResponseBody struct {
	RequestId   *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SaleControl []*DescribeEnsSaleControlStockResponseBodySaleControl `json:"SaleControl,omitempty" xml:"SaleControl,omitempty" type:"Repeated"`
}

func (s DescribeEnsSaleControlStockResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockResponseBody) SetRequestId(v string) *DescribeEnsSaleControlStockResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBody) SetSaleControl(v []*DescribeEnsSaleControlStockResponseBodySaleControl) *DescribeEnsSaleControlStockResponseBody {
	s.SaleControl = v
	return s
}

type DescribeEnsSaleControlStockResponseBodySaleControl struct {
	CommodityCode    *string                                                               `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	OrderType        *string                                                               `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	SaleControlItems []*DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItems `json:"SaleControlItems,omitempty" xml:"SaleControlItems,omitempty" type:"Repeated"`
}

func (s DescribeEnsSaleControlStockResponseBodySaleControl) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockResponseBodySaleControl) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControl) SetCommodityCode(v string) *DescribeEnsSaleControlStockResponseBodySaleControl {
	s.CommodityCode = &v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControl) SetOrderType(v string) *DescribeEnsSaleControlStockResponseBodySaleControl {
	s.OrderType = &v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControl) SetSaleControlItems(v []*DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItems) *DescribeEnsSaleControlStockResponseBodySaleControl {
	s.SaleControlItems = v
	return s
}

type DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItems struct {
	ModuleCode      *string                                                                            `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	SaleControlItem *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItem `json:"SaleControlItem,omitempty" xml:"SaleControlItem,omitempty" type:"Struct"`
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItems) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItems) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItems) SetModuleCode(v string) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItems {
	s.ModuleCode = &v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItems) SetSaleControlItem(v *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItem) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItems {
	s.SaleControlItem = v
	return s
}

type DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItem struct {
	BasicSaleControl     *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl       `json:"BasicSaleControl,omitempty" xml:"BasicSaleControl,omitempty" type:"Struct"`
	ConditionSaleControl []*DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl `json:"ConditionSaleControl,omitempty" xml:"ConditionSaleControl,omitempty" type:"Repeated"`
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItem) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItem) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItem) SetBasicSaleControl(v *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItem {
	s.BasicSaleControl = v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItem) SetConditionSaleControl(v []*DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItem {
	s.ConditionSaleControl = v
	return s
}

type DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl struct {
	ModuleValue *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue `json:"ModuleValue,omitempty" xml:"ModuleValue,omitempty" type:"Struct"`
	StockValue  *string                                                                                                       `json:"StockValue,omitempty" xml:"StockValue,omitempty"`
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) SetModuleValue(v *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl {
	s.ModuleValue = v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl) SetStockValue(v string) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControl {
	s.StockValue = &v
	return s
}

type DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue struct {
	ModuleMaxValue *string `json:"ModuleMaxValue,omitempty" xml:"ModuleMaxValue,omitempty"`
	ModuleMinValue *string `json:"ModuleMinValue,omitempty" xml:"ModuleMinValue,omitempty"`
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) SetModuleMaxValue(v string) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue {
	s.ModuleMaxValue = &v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue) SetModuleMinValue(v string) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemBasicSaleControlModuleValue {
	s.ModuleMinValue = &v
	return s
}

type DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl struct {
	ConditionControl *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl `json:"ConditionControl,omitempty" xml:"ConditionControl,omitempty" type:"Struct"`
	ModuleValue      *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue      `json:"ModuleValue,omitempty" xml:"ModuleValue,omitempty" type:"Struct"`
	StockValue       *string                                                                                                                `json:"StockValue,omitempty" xml:"StockValue,omitempty"`
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) SetConditionControl(v *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl {
	s.ConditionControl = v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) SetModuleValue(v *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl {
	s.ModuleValue = v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl) SetStockValue(v string) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControl {
	s.StockValue = &v
	return s
}

type DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl struct {
	ConditionControlModuleCode  *string `json:"ConditionControlModuleCode,omitempty" xml:"ConditionControlModuleCode,omitempty"`
	ConditionControlModuleValue *string `json:"ConditionControlModuleValue,omitempty" xml:"ConditionControlModuleValue,omitempty"`
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl) SetConditionControlModuleCode(v string) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl {
	s.ConditionControlModuleCode = &v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl) SetConditionControlModuleValue(v string) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlConditionControl {
	s.ConditionControlModuleValue = &v
	return s
}

type DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue struct {
	ModuleMaxValue *string `json:"ModuleMaxValue,omitempty" xml:"ModuleMaxValue,omitempty"`
	ModuleMinValue *string `json:"ModuleMinValue,omitempty" xml:"ModuleMinValue,omitempty"`
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) SetModuleMaxValue(v string) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue {
	s.ModuleMaxValue = &v
	return s
}

func (s *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue) SetModuleMinValue(v string) *DescribeEnsSaleControlStockResponseBodySaleControlSaleControlItemsSaleControlItemConditionSaleControlModuleValue {
	s.ModuleMinValue = &v
	return s
}

type DescribeEnsSaleControlStockResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEnsSaleControlStockResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEnsSaleControlStockResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEnsSaleControlStockResponse) GoString() string {
	return s.String()
}

func (s *DescribeEnsSaleControlStockResponse) SetHeaders(v map[string]*string) *DescribeEnsSaleControlStockResponse {
	s.Headers = v
	return s
}

func (s *DescribeEnsSaleControlStockResponse) SetStatusCode(v int32) *DescribeEnsSaleControlStockResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEnsSaleControlStockResponse) SetBody(v *DescribeEnsSaleControlStockResponseBody) *DescribeEnsSaleControlStockResponse {
	s.Body = v
	return s
}

type DescribeEpnBandWidthDataRequest struct {
	// The ID of the EPN instance.
	//
	// example:
	//
	// epn-20200825134537VyK81T
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	// The end of the time range to query.
	//
	// 	- Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- If the value of the seconds place is not 00, the start time is automatically set to the next minute.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-12-16T16:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-5sg1owx0g4ojy66ab2tez77r2
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The Internet service provider (ISP). Valid values:
	//
	// 	- cmcc: China Mobile
	//
	// 	- telecom: China Telecom
	//
	// 	- unicom: China Unicom
	//
	// 	- multiCarrier: multi-line ISP
	//
	// example:
	//
	// cmcc
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The networking mode. Valid values:
	//
	// 	- **SpeedUp**: intelligent acceleration network (Internet)
	//
	// 	- **Connection**: internal network
	//
	// 	- **SpeedUpAndConnection**: intelligent acceleration network and internal network
	//
	// example:
	//
	// SpeedUp
	NetworkingModel *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
	// The precision of the monitoring data that you want to obtain. Valid values: 300, 1200, 3600, and 14400. Default value: 300. Unit: seconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 300
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The beginning of the time range to query.
	//
	// 	- Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- If the value of the seconds place is not 00, the start time is automatically set to the next minute.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-12-15T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeEpnBandWidthDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandWidthDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandWidthDataRequest) SetEPNInstanceId(v string) *DescribeEpnBandWidthDataRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetEndTime(v string) *DescribeEpnBandWidthDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetEnsRegionId(v string) *DescribeEpnBandWidthDataRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetInstanceId(v string) *DescribeEpnBandWidthDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetIsp(v string) *DescribeEpnBandWidthDataRequest {
	s.Isp = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetNetworkingModel(v string) *DescribeEpnBandWidthDataRequest {
	s.NetworkingModel = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetPeriod(v string) *DescribeEpnBandWidthDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeEpnBandWidthDataRequest) SetStartTime(v string) *DescribeEpnBandWidthDataRequest {
	s.StartTime = &v
	return s
}

type DescribeEpnBandWidthDataResponseBody struct {
	// The monitoring data of the instance.
	MonitorData *DescribeEpnBandWidthDataResponseBodyMonitorData `json:"MonitorData,omitempty" xml:"MonitorData,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 1D289DAA-F6DA-5FC4-AE47-F5C8B6277BFC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEpnBandWidthDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandWidthDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandWidthDataResponseBody) SetMonitorData(v *DescribeEpnBandWidthDataResponseBodyMonitorData) *DescribeEpnBandWidthDataResponseBody {
	s.MonitorData = v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBody) SetRequestId(v string) *DescribeEpnBandWidthDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEpnBandWidthDataResponseBodyMonitorData struct {
	// The bandwidth data.
	BandWidthMonitorData []*DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData `json:"BandWidthMonitorData,omitempty" xml:"BandWidthMonitorData,omitempty" type:"Repeated"`
	// The maximum outbound bandwidth within the queried time range. Unit: bit/s.
	//
	// example:
	//
	// 16817468
	MaxDownBandWidth *int64 `json:"MaxDownBandWidth,omitempty" xml:"MaxDownBandWidth,omitempty"`
	// The maximum inbound bandwidth within the queried time range. Unit: bit/s.
	//
	// example:
	//
	// 231008
	MaxUpBandWidth *int64 `json:"MaxUpBandWidth,omitempty" xml:"MaxUpBandWidth,omitempty"`
}

func (s DescribeEpnBandWidthDataResponseBodyMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandWidthDataResponseBodyMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorData) SetBandWidthMonitorData(v []*DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) *DescribeEpnBandWidthDataResponseBodyMonitorData {
	s.BandWidthMonitorData = v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorData) SetMaxDownBandWidth(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorData {
	s.MaxDownBandWidth = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorData) SetMaxUpBandWidth(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorData {
	s.MaxUpBandWidth = &v
	return s
}

type DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData struct {
	// The outbound bandwidth. Unit: bit/s.
	//
	// example:
	//
	// 0
	DownBandWidth *int64 `json:"DownBandWidth,omitempty" xml:"DownBandWidth,omitempty"`
	// The Internet traffic to the instance. Unit: bytes.
	//
	// example:
	//
	// 0
	InternetRX *int64 `json:"InternetRX,omitempty" xml:"InternetRX,omitempty"`
	// The Internet traffic from the instance. Unit: bytes.
	//
	// example:
	//
	// 0
	InternetTX *int64 `json:"InternetTX,omitempty" xml:"InternetTX,omitempty"`
	// The timestamp when the monitoring data was queried. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-10-12T05:45:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	// The inbound bandwidth. Unit: bit/s.
	//
	// example:
	//
	// 0
	UpBandWidth *int64 `json:"UpBandWidth,omitempty" xml:"UpBandWidth,omitempty"`
}

func (s DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetDownBandWidth(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.DownBandWidth = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetInternetRX(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.InternetRX = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetInternetTX(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.InternetTX = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetTimeStamp(v string) *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetUpBandWidth(v int64) *DescribeEpnBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.UpBandWidth = &v
	return s
}

type DescribeEpnBandWidthDataResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEpnBandWidthDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEpnBandWidthDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandWidthDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandWidthDataResponse) SetHeaders(v map[string]*string) *DescribeEpnBandWidthDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeEpnBandWidthDataResponse) SetStatusCode(v int32) *DescribeEpnBandWidthDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEpnBandWidthDataResponse) SetBody(v *DescribeEpnBandWidthDataResponseBody) *DescribeEpnBandWidthDataResponse {
	s.Body = v
	return s
}

type DescribeEpnBandwitdhByInternetChargeTypeRequest struct {
	// The end of the time range to query.
	//
	// 	- Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- If the value of the seconds place is not 00, the start time is automatically set to the next minute.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-12-06T15:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// example:
	//
	// cn-changsha-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The Internet service provider (ISP). Valid values:
	//
	// 	- cmcc: China Mobile
	//
	// 	- telecom: China Telecom
	//
	// 	- unicom: China Unicom
	//
	// 	- multiCarrier: multi-line ISP
	//
	// example:
	//
	// telecom
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The networking mode. Valid values:
	//
	// 	- **SpeedUp**: intelligent acceleration network (Internet)
	//
	// 	- **Connection**: internal network
	//
	// 	- **SpeedUpAndConnection**: intelligent acceleration network and internal network
	//
	// example:
	//
	// Connection
	NetworkingModel *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
	// The beginning of the time range to query.
	//
	// 	- Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- If the value of the seconds place is not 00, the start time is automatically set to the next minute.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-12-02T16:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeEpnBandwitdhByInternetChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandwitdhByInternetChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetEndTime(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetEnsRegionId(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetIsp(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.Isp = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetNetworkingModel(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.NetworkingModel = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeRequest) SetStartTime(v string) *DescribeEpnBandwitdhByInternetChargeTypeRequest {
	s.StartTime = &v
	return s
}

type DescribeEpnBandwitdhByInternetChargeTypeResponseBody struct {
	// The bandwidth. Unit: bit/s.
	//
	// example:
	//
	// 123
	BandwidthValue *int64 `json:"BandwidthValue,omitempty" xml:"BandwidthValue,omitempty"`
	// The metering method. Valid values:
	//
	// 	- BandwidthByDay: Pay by daily peak bandwidth
	//
	// 	- 95BandwidthByMonth: Pay by monthly 95th percentile bandwidth
	//
	// 	- PayByBandwidth4thMonth: Pay by monthly fourth peak bandwidth
	//
	// 	- PayByBandwidth: Pay by fixed bandwidth
	//
	// You can specify only one metering method for network usage and cannot overwrite the existing metering method.
	//
	// example:
	//
	// BandwidthByDay
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 216BCED0-E055-5DDB-8E06-4084A62A4A44
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The timestamp when the monitoring data was queried. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-10-12T05:45:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeEpnBandwitdhByInternetChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandwitdhByInternetChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponseBody) SetBandwidthValue(v int64) *DescribeEpnBandwitdhByInternetChargeTypeResponseBody {
	s.BandwidthValue = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponseBody) SetInternetChargeType(v string) *DescribeEpnBandwitdhByInternetChargeTypeResponseBody {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponseBody) SetRequestId(v string) *DescribeEpnBandwitdhByInternetChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponseBody) SetTimeStamp(v string) *DescribeEpnBandwitdhByInternetChargeTypeResponseBody {
	s.TimeStamp = &v
	return s
}

type DescribeEpnBandwitdhByInternetChargeTypeResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEpnBandwitdhByInternetChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEpnBandwitdhByInternetChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnBandwitdhByInternetChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponse) SetHeaders(v map[string]*string) *DescribeEpnBandwitdhByInternetChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponse) SetStatusCode(v int32) *DescribeEpnBandwitdhByInternetChargeTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEpnBandwitdhByInternetChargeTypeResponse) SetBody(v *DescribeEpnBandwitdhByInternetChargeTypeResponseBody) *DescribeEpnBandwitdhByInternetChargeTypeResponse {
	s.Body = v
	return s
}

type DescribeEpnInstanceAttributeRequest struct {
	// The ID of the EPN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// epn-xxxx
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
}

func (s DescribeEpnInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeRequest) SetEPNInstanceId(v string) *DescribeEpnInstanceAttributeRequest {
	s.EPNInstanceId = &v
	return s
}

type DescribeEpnInstanceAttributeResponseBody struct {
	// The information about the EPN configurations.
	ConfVersions []*DescribeEpnInstanceAttributeResponseBodyConfVersions `json:"ConfVersions,omitempty" xml:"ConfVersions,omitempty" type:"Repeated"`
	// The ID of the EPN instance.
	//
	// example:
	//
	// epn-xxxx
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	// The name of the EPN instance.
	//
	// example:
	//
	// epn-test
	EPNInstanceName *string `json:"EPNInstanceName,omitempty" xml:"EPNInstanceName,omitempty"`
	// The information about the instance.
	Instances []*DescribeEpnInstanceAttributeResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Repeated"`
	// The networking mode. Valid values:
	//
	// 	- SpeedUp: intelligent acceleration network (Internet)
	//
	// 	- Connection: internal network
	//
	// 	- SpeedUpAndConnection: intelligent acceleration network and internal network
	//
	// example:
	//
	// SpeedUp
	NetworkingModel *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details of the vSwitch.
	VSwitches []*DescribeEpnInstanceAttributeResponseBodyVSwitches `json:"VSwitches,omitempty" xml:"VSwitches,omitempty" type:"Repeated"`
}

func (s DescribeEpnInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetConfVersions(v []*DescribeEpnInstanceAttributeResponseBodyConfVersions) *DescribeEpnInstanceAttributeResponseBody {
	s.ConfVersions = v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetEPNInstanceId(v string) *DescribeEpnInstanceAttributeResponseBody {
	s.EPNInstanceId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetEPNInstanceName(v string) *DescribeEpnInstanceAttributeResponseBody {
	s.EPNInstanceName = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetInstances(v []*DescribeEpnInstanceAttributeResponseBodyInstances) *DescribeEpnInstanceAttributeResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetNetworkingModel(v string) *DescribeEpnInstanceAttributeResponseBody {
	s.NetworkingModel = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetRequestId(v string) *DescribeEpnInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBody) SetVSwitches(v []*DescribeEpnInstanceAttributeResponseBodyVSwitches) *DescribeEpnInstanceAttributeResponseBody {
	s.VSwitches = v
	return s
}

type DescribeEpnInstanceAttributeResponseBodyConfVersions struct {
	// The version number.
	//
	// example:
	//
	// 2017-10-11
	ConfVersion *string `json:"ConfVersion,omitempty" xml:"ConfVersion,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// cn-chengdu-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeEpnInstanceAttributeResponseBodyConfVersions) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeResponseBodyConfVersions) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeResponseBodyConfVersions) SetConfVersion(v string) *DescribeEpnInstanceAttributeResponseBodyConfVersions {
	s.ConfVersion = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyConfVersions) SetEnsRegionId(v string) *DescribeEpnInstanceAttributeResponseBodyConfVersions {
	s.EnsRegionId = &v
	return s
}

type DescribeEpnInstanceAttributeResponseBodyInstances struct {
	// The ID of the node.
	//
	// example:
	//
	// cn-chengdu-telecom-4
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// epn-xxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// epn-test
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The ISP. Valid values:
	//
	// 	- cmcc: China Mobile
	//
	// 	- unicom: China Unicom
	//
	// 	- telecom: China Telecom
	//
	// example:
	//
	// cmcc
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The private IP address.
	//
	// example:
	//
	// 192.168.1.12
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	// The public IP address.
	//
	// example:
	//
	// 20.3.XX.XX
	PublicIpAddress *string `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- Running
	//
	// 	- Stopped
	//
	// 	- Expired
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEpnInstanceAttributeResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetEnsRegionId(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetInstanceId(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetInstanceName(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.InstanceName = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetIsp(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.Isp = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetPrivateIpAddress(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.PrivateIpAddress = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetPublicIpAddress(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.PublicIpAddress = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyInstances) SetStatus(v string) *DescribeEpnInstanceAttributeResponseBodyInstances {
	s.Status = &v
	return s
}

type DescribeEpnInstanceAttributeResponseBodyVSwitches struct {
	// The CIDR block.
	//
	// example:
	//
	// 10.0.0.1/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// cn-chengdu-telecom-4
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vs-xxxx
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The name of the vSwitch.
	//
	// example:
	//
	// vs-test
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeEpnInstanceAttributeResponseBodyVSwitches) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeResponseBodyVSwitches) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeResponseBodyVSwitches) SetCidrBlock(v string) *DescribeEpnInstanceAttributeResponseBodyVSwitches {
	s.CidrBlock = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyVSwitches) SetEnsRegionId(v string) *DescribeEpnInstanceAttributeResponseBodyVSwitches {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyVSwitches) SetVSwitchId(v string) *DescribeEpnInstanceAttributeResponseBodyVSwitches {
	s.VSwitchId = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponseBodyVSwitches) SetVSwitchName(v string) *DescribeEpnInstanceAttributeResponseBodyVSwitches {
	s.VSwitchName = &v
	return s
}

type DescribeEpnInstanceAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEpnInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEpnInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstanceAttributeResponse) SetHeaders(v map[string]*string) *DescribeEpnInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEpnInstanceAttributeResponse) SetStatusCode(v int32) *DescribeEpnInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEpnInstanceAttributeResponse) SetBody(v *DescribeEpnInstanceAttributeResponseBody) *DescribeEpnInstanceAttributeResponse {
	s.Body = v
	return s
}

type DescribeEpnInstancesRequest struct {
	// The version number.
	//
	// example:
	//
	// 2017-11-10
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	// The name of the EPN instance.
	//
	// example:
	//
	// testEPNInstanceName
	EPNInstanceName *string `json:"EPNInstanceName,omitempty" xml:"EPNInstanceName,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values: **1 to 50**. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeEpnInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstancesRequest) SetEPNInstanceId(v string) *DescribeEpnInstancesRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *DescribeEpnInstancesRequest) SetEPNInstanceName(v string) *DescribeEpnInstancesRequest {
	s.EPNInstanceName = &v
	return s
}

func (s *DescribeEpnInstancesRequest) SetPageNumber(v int32) *DescribeEpnInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeEpnInstancesRequest) SetPageSize(v int32) *DescribeEpnInstancesRequest {
	s.PageSize = &v
	return s
}

type DescribeEpnInstancesResponseBody struct {
	// Details of EPN instances.
	EPNInstances *DescribeEpnInstancesResponseBodyEPNInstances `json:"EPNInstances,omitempty" xml:"EPNInstances,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 40
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A1707FC0-430C-423A-B624-284046B20399
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of pages returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeEpnInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstancesResponseBody) SetEPNInstances(v *DescribeEpnInstancesResponseBodyEPNInstances) *DescribeEpnInstancesResponseBody {
	s.EPNInstances = v
	return s
}

func (s *DescribeEpnInstancesResponseBody) SetPageNumber(v int32) *DescribeEpnInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeEpnInstancesResponseBody) SetPageSize(v int32) *DescribeEpnInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeEpnInstancesResponseBody) SetRequestId(v string) *DescribeEpnInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEpnInstancesResponseBody) SetTotalCount(v int32) *DescribeEpnInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeEpnInstancesResponseBodyEPNInstances struct {
	EPNInstance []*DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance `json:"EPNInstance,omitempty" xml:"EPNInstance,omitempty" type:"Repeated"`
}

func (s DescribeEpnInstancesResponseBodyEPNInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstancesResponseBodyEPNInstances) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstancesResponseBodyEPNInstances) SetEPNInstance(v []*DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) *DescribeEpnInstancesResponseBodyEPNInstances {
	s.EPNInstance = v
	return s
}

type DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance struct {
	// The time when the instance was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-11-01T06:08:46Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the EPN instance.
	//
	// example:
	//
	// epn****
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	// The name of the EPN instance.
	//
	// example:
	//
	// ens_test_epn
	EPNInstanceName *string `json:"EPNInstanceName,omitempty" xml:"EPNInstanceName,omitempty"`
	// Set the value to EdgeToEdge.
	//
	// example:
	//
	// EdgeToEdge
	EPNInstanceType *string `json:"EPNInstanceType,omitempty" xml:"EPNInstanceType,omitempty"`
	// The end of the time range during which the data was queried. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-11-01T06:08:46Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The inbound bandwidth. Unit: Mbit/s.
	//
	// example:
	//
	// 40
	InternetMaxBandwidthOut *int32 `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	// The time when the instance was last modified. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-11-01T06:08:46Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// The networking mode. Valid values:
	//
	// 	- SpeedUp: intelligent acceleration network (Internet)
	//
	// 	- Connection: internal network
	//
	// 	- SpeedUpAndConnection: intelligent acceleration network and internal network
	//
	// example:
	//
	// SpeedUp
	NetworkingModel *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
	// The beginning of the time range during which the data was queried. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-11-01T06:08:46Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- Running
	//
	// 	- Excuting
	//
	// 	- Stopped
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetCreationTime(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetEPNInstanceId(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.EPNInstanceId = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetEPNInstanceName(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.EPNInstanceName = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetEPNInstanceType(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.EPNInstanceType = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetEndTime(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.EndTime = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetInternetMaxBandwidthOut(v int32) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetModifyTime(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.ModifyTime = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetNetworkingModel(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.NetworkingModel = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetStartTime(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.StartTime = &v
	return s
}

func (s *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance) SetStatus(v string) *DescribeEpnInstancesResponseBodyEPNInstancesEPNInstance {
	s.Status = &v
	return s
}

type DescribeEpnInstancesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEpnInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEpnInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeEpnInstancesResponse) SetHeaders(v map[string]*string) *DescribeEpnInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeEpnInstancesResponse) SetStatusCode(v int32) *DescribeEpnInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEpnInstancesResponse) SetBody(v *DescribeEpnInstancesResponseBody) *DescribeEpnInstancesResponse {
	s.Body = v
	return s
}

type DescribeEpnMeasurementDataRequest struct {
	// The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-01-30T16:00:00Z
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-mm-ddthh:mm:ssz format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-09-30T16:00:00Z
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s DescribeEpnMeasurementDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataRequest) SetEndDate(v string) *DescribeEpnMeasurementDataRequest {
	s.EndDate = &v
	return s
}

func (s *DescribeEpnMeasurementDataRequest) SetStartDate(v string) *DescribeEpnMeasurementDataRequest {
	s.StartDate = &v
	return s
}

type DescribeEpnMeasurementDataResponseBody struct {
	// The metering data returned.
	MeasurementDatas *DescribeEpnMeasurementDataResponseBodyMeasurementDatas `json:"MeasurementDatas,omitempty" xml:"MeasurementDatas,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// A6328C33-6304-5291-8641-0A00A99D0DD0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeEpnMeasurementDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponseBody) SetMeasurementDatas(v *DescribeEpnMeasurementDataResponseBodyMeasurementDatas) *DescribeEpnMeasurementDataResponseBody {
	s.MeasurementDatas = v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBody) SetRequestId(v string) *DescribeEpnMeasurementDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeEpnMeasurementDataResponseBodyMeasurementDatas struct {
	MeasurementData []*DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData `json:"MeasurementData,omitempty" xml:"MeasurementData,omitempty" type:"Repeated"`
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatas) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatas) SetMeasurementData(v []*DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) *DescribeEpnMeasurementDataResponseBodyMeasurementDatas {
	s.MeasurementData = v
	return s
}

type DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData struct {
	// The bandwidth data returned.
	BandWidthFeeDatas *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas `json:"BandWidthFeeDatas,omitempty" xml:"BandWidthFeeDatas,omitempty" type:"Struct"`
	// The metering method. Valid values:
	//
	// 	- ChargeByUnified: unified metering.
	//
	// 	- ChargeByGrade: differential metering.
	//
	// example:
	//
	// ChargeByGrade
	ChargeModel *string `json:"ChargeModel,omitempty" xml:"ChargeModel,omitempty"`
	// The metering cycle.
	//
	// example:
	//
	// 2019-07-30
	CostCycle *string `json:"CostCycle,omitempty" xml:"CostCycle,omitempty"`
	// The end time of the metering cycle.
	//
	// example:
	//
	// 2019-07-30T16:00:00Z
	CostEndTime *string `json:"CostEndTime,omitempty" xml:"CostEndTime,omitempty"`
	// The start time of the metering cycle.
	//
	// example:
	//
	// 2019-07-29T16:00:00Z
	CostStartTime *string `json:"CostStartTime,omitempty" xml:"CostStartTime,omitempty"`
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetBandWidthFeeDatas(v *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.BandWidthFeeDatas = v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetChargeModel(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.ChargeModel = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostCycle(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostCycle = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostEndTime(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostEndTime = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostStartTime(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostStartTime = &v
	return s
}

type DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas struct {
	BandWidthFeeData []*DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData `json:"BandWidthFeeData,omitempty" xml:"BandWidthFeeData,omitempty" type:"Repeated"`
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) SetBandWidthFeeData(v []*DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas {
	s.BandWidthFeeData = v
	return s
}

type DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData struct {
	// The code of the billable item.
	//
	// example:
	//
	// cn-cmcc-1
	CostCode *string `json:"CostCode,omitempty" xml:"CostCode,omitempty"`
	// The name of the billable item.
	//
	// example:
	//
	// Beijing, Shanghai, and Guangzhou Mobile
	CostName *string `json:"CostName,omitempty" xml:"CostName,omitempty"`
	// Metering method
	//
	// 	- SpeedUp: bandwidth of intelligent acceleration
	//
	// 	- IntranetConnection: internal bandwidth
	//
	// example:
	//
	// SpeedUp
	CostType *string `json:"CostType,omitempty" xml:"CostType,omitempty"`
	// The value of the billable item.
	//
	// example:
	//
	// 16486
	CostVal *int32 `json:"CostVal,omitempty" xml:"CostVal,omitempty"`
	// This parameter is unavailable.
	//
	// example:
	//
	// This parameter is not currently in use.
	IspLine *string `json:"IspLine,omitempty" xml:"IspLine,omitempty"`
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostCode(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostCode = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostName(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostName = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostType(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostType = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostVal(v int32) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostVal = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetIspLine(v string) *DescribeEpnMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.IspLine = &v
	return s
}

type DescribeEpnMeasurementDataResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEpnMeasurementDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEpnMeasurementDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEpnMeasurementDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeEpnMeasurementDataResponse) SetHeaders(v map[string]*string) *DescribeEpnMeasurementDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeEpnMeasurementDataResponse) SetStatusCode(v int32) *DescribeEpnMeasurementDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEpnMeasurementDataResponse) SetBody(v *DescribeEpnMeasurementDataResponseBody) *DescribeEpnMeasurementDataResponse {
	s.Body = v
	return s
}

type DescribeExportImageInfoRequest struct {
	// The ID of the image.
	//
	// example:
	//
	// m-xxxxx
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image.
	//
	// example:
	//
	// testImageName
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The page number. Pages start from page **1**. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: **50**. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeExportImageInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeExportImageInfoRequest) SetImageId(v string) *DescribeExportImageInfoRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeExportImageInfoRequest) SetImageName(v string) *DescribeExportImageInfoRequest {
	s.ImageName = &v
	return s
}

func (s *DescribeExportImageInfoRequest) SetPageNumber(v int32) *DescribeExportImageInfoRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeExportImageInfoRequest) SetPageSize(v int32) *DescribeExportImageInfoRequest {
	s.PageSize = &v
	return s
}

type DescribeExportImageInfoResponseBody struct {
	// The returned result. For more information, see the Images parameter described in the JSON-formatted sample success response.
	Images *DescribeExportImageInfoResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 13
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeExportImageInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExportImageInfoResponseBody) SetImages(v *DescribeExportImageInfoResponseBodyImages) *DescribeExportImageInfoResponseBody {
	s.Images = v
	return s
}

func (s *DescribeExportImageInfoResponseBody) SetPageNumber(v int32) *DescribeExportImageInfoResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeExportImageInfoResponseBody) SetPageSize(v int32) *DescribeExportImageInfoResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeExportImageInfoResponseBody) SetRequestId(v string) *DescribeExportImageInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExportImageInfoResponseBody) SetTotalCount(v int32) *DescribeExportImageInfoResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeExportImageInfoResponseBodyImages struct {
	Image []*DescribeExportImageInfoResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeExportImageInfoResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageInfoResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeExportImageInfoResponseBodyImages) SetImage(v []*DescribeExportImageInfoResponseBodyImagesImage) *DescribeExportImageInfoResponseBodyImages {
	s.Image = v
	return s
}

type DescribeExportImageInfoResponseBodyImagesImage struct {
	// The architecture of the image. Example: **x86_64**.
	//
	// example:
	//
	// x86_64
	Architecture *string `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	// The time when the image was created.
	//
	// example:
	//
	// 2017-12-08T12:10:03Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The URL of the exported image.
	//
	// example:
	//
	// https://user_defined_bucket.oss-cn-beijing.aliyuncs.com/m-xxxxxxxxx1.qcow2
	ExportedImageURL *string `json:"ExportedImageURL,omitempty" xml:"ExportedImageURL,omitempty"`
	// The export status of the image. Valid values:
	//
	// 	- Exporting
	//
	// 	- Exported
	//
	// 	- ExportError
	//
	// 	- Unexported
	//
	// example:
	//
	// Exported
	ImageExportStatus *string `json:"ImageExportStatus,omitempty" xml:"ImageExportStatus,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// m-xxxxxxxxx1
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image.
	//
	// example:
	//
	// m-xxxxxxxxx1
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The source of the image. Valid values:
	//
	// 	- system: public image
	//
	// 	- self: custom image
	//
	// example:
	//
	// system
	ImageOwnerAlias *string `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	// The OS.
	//
	// example:
	//
	// centos
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
}

func (s DescribeExportImageInfoResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageInfoResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetArchitecture(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.Architecture = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetCreationTime(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.CreationTime = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetExportedImageURL(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.ExportedImageURL = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetImageExportStatus(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.ImageExportStatus = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetImageId(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetImageName(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetImageOwnerAlias(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeExportImageInfoResponseBodyImagesImage) SetPlatform(v string) *DescribeExportImageInfoResponseBodyImagesImage {
	s.Platform = &v
	return s
}

type DescribeExportImageInfoResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExportImageInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExportImageInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeExportImageInfoResponse) SetHeaders(v map[string]*string) *DescribeExportImageInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeExportImageInfoResponse) SetStatusCode(v int32) *DescribeExportImageInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExportImageInfoResponse) SetBody(v *DescribeExportImageInfoResponseBody) *DescribeExportImageInfoResponse {
	s.Body = v
	return s
}

type DescribeExportImageStatusRequest struct {
	// The ID of the image.
	//
	// This parameter is required.
	//
	// example:
	//
	// centos_6_08_64_20G_alibase_****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
}

func (s DescribeExportImageStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeExportImageStatusRequest) SetImageId(v string) *DescribeExportImageStatusRequest {
	s.ImageId = &v
	return s
}

type DescribeExportImageStatusResponseBody struct {
	// The export status of the image. Valid values:
	//
	// 	- Exporting
	//
	// 	- Exported
	//
	// 	- ExportError
	//
	// 	- Unexported
	//
	// example:
	//
	// Exporting
	ImageExportStatus *string `json:"ImageExportStatus,omitempty" xml:"ImageExportStatus,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 14BBB3A0-3DBE-54F5-AEC8-01D3F6B1EBE2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeExportImageStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExportImageStatusResponseBody) SetImageExportStatus(v string) *DescribeExportImageStatusResponseBody {
	s.ImageExportStatus = &v
	return s
}

func (s *DescribeExportImageStatusResponseBody) SetRequestId(v string) *DescribeExportImageStatusResponseBody {
	s.RequestId = &v
	return s
}

type DescribeExportImageStatusResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExportImageStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExportImageStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExportImageStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeExportImageStatusResponse) SetHeaders(v map[string]*string) *DescribeExportImageStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeExportImageStatusResponse) SetStatusCode(v int32) *DescribeExportImageStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExportImageStatusResponse) SetBody(v *DescribeExportImageStatusResponseBody) *DescribeExportImageStatusResponse {
	s.Body = v
	return s
}

type DescribeFileSystemsRequest struct {
	// The ID of the region.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the file system.
	//
	// example:
	//
	// c50f8*****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// The name of the file system.
	//
	// example:
	//
	// FileSystem1
	FileSystemName *string `json:"FileSystemName,omitempty" xml:"FileSystemName,omitempty"`
	// The page number. Pages start from page **1**. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: **100**. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeFileSystemsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFileSystemsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFileSystemsRequest) SetEnsRegionId(v string) *DescribeFileSystemsRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeFileSystemsRequest) SetFileSystemId(v string) *DescribeFileSystemsRequest {
	s.FileSystemId = &v
	return s
}

func (s *DescribeFileSystemsRequest) SetFileSystemName(v string) *DescribeFileSystemsRequest {
	s.FileSystemName = &v
	return s
}

func (s *DescribeFileSystemsRequest) SetPageNumber(v int32) *DescribeFileSystemsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeFileSystemsRequest) SetPageSize(v int32) *DescribeFileSystemsRequest {
	s.PageSize = &v
	return s
}

type DescribeFileSystemsResponseBody struct {
	// The information about the file systems.
	FileSystems []*DescribeFileSystemsResponseBodyFileSystems `json:"FileSystems,omitempty" xml:"FileSystems,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 2
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 762DD527-358B-1E48-8005-CCE3ED4EB9E0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeFileSystemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFileSystemsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFileSystemsResponseBody) SetFileSystems(v []*DescribeFileSystemsResponseBodyFileSystems) *DescribeFileSystemsResponseBody {
	s.FileSystems = v
	return s
}

func (s *DescribeFileSystemsResponseBody) SetPageNumber(v int32) *DescribeFileSystemsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeFileSystemsResponseBody) SetPageSize(v int32) *DescribeFileSystemsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeFileSystemsResponseBody) SetRequestId(v string) *DescribeFileSystemsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFileSystemsResponseBody) SetTotalCount(v int32) *DescribeFileSystemsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeFileSystemsResponseBodyFileSystems struct {
	// The capacity of the file system. Unit: MiB.
	//
	// example:
	//
	// 100000
	Capacity *int64 `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	// The time when the file system was created.
	//
	// example:
	//
	// 2022-08-31 12:00:00
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the file system.
	//
	// example:
	//
	// c50f8*****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// The name of the file system.
	//
	// example:
	//
	// FileSystem1
	FileSystemName *string `json:"FileSystemName,omitempty" xml:"FileSystemName,omitempty"`
	// The storage usage of the file system. The value of this parameter is the maximum storage usage of the file system over the last hour. Unit: bytes.
	//
	// example:
	//
	// 102400
	MeteredSize *int64 `json:"MeteredSize,omitempty" xml:"MeteredSize,omitempty"`
	// The information about mount targets.
	MountTargets []*DescribeFileSystemsResponseBodyFileSystemsMountTargets `json:"MountTargets,omitempty" xml:"MountTargets,omitempty" type:"Repeated"`
	// The billing method. PostPaid is returned. PostPaid indicates the pay-as-you-go billing method.
	//
	// example:
	//
	// PostPaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The protocol type of the file system. Valid values:
	//
	// 	- NFS: Network File System (NFS)
	//
	// 	- SMB: Server Message Block (SMB)
	//
	// example:
	//
	// NFS
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The status of the file system. Valid values:
	//
	// 	- pending: The file system is being created or modified.
	//
	// 	- running: The file system is available. Before you create a mount target for the file system, make sure that the file system is in the running state.
	//
	// 	- stopped: The file system is unavailable.
	//
	// 	- extending: The file system is being scaled out.
	//
	// 	- stopping: The file system is being disabled.
	//
	// 	- deleting: The file system is being deleted.
	//
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The storage type. Valid values:
	//
	// 	- capacity: Capacity NAS file systems
	//
	// 	- performance: Performance NAS file systems
	//
	// example:
	//
	// capacity
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s DescribeFileSystemsResponseBodyFileSystems) String() string {
	return tea.Prettify(s)
}

func (s DescribeFileSystemsResponseBodyFileSystems) GoString() string {
	return s.String()
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetCapacity(v int64) *DescribeFileSystemsResponseBodyFileSystems {
	s.Capacity = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetCreationTime(v string) *DescribeFileSystemsResponseBodyFileSystems {
	s.CreationTime = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetDescription(v string) *DescribeFileSystemsResponseBodyFileSystems {
	s.Description = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetEnsRegionId(v string) *DescribeFileSystemsResponseBodyFileSystems {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetFileSystemId(v string) *DescribeFileSystemsResponseBodyFileSystems {
	s.FileSystemId = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetFileSystemName(v string) *DescribeFileSystemsResponseBodyFileSystems {
	s.FileSystemName = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetMeteredSize(v int64) *DescribeFileSystemsResponseBodyFileSystems {
	s.MeteredSize = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetMountTargets(v []*DescribeFileSystemsResponseBodyFileSystemsMountTargets) *DescribeFileSystemsResponseBodyFileSystems {
	s.MountTargets = v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetPayType(v string) *DescribeFileSystemsResponseBodyFileSystems {
	s.PayType = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetProtocolType(v string) *DescribeFileSystemsResponseBodyFileSystems {
	s.ProtocolType = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetStatus(v string) *DescribeFileSystemsResponseBodyFileSystems {
	s.Status = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystems) SetStorageType(v string) *DescribeFileSystemsResponseBodyFileSystems {
	s.StorageType = &v
	return s
}

type DescribeFileSystemsResponseBodyFileSystemsMountTargets struct {
	// The path of the mount target.
	//
	// example:
	//
	// *.*.*.*:/${FileSystemName}/{MountTargetName}
	MountTargetDomain *string `json:"MountTargetDomain,omitempty" xml:"MountTargetDomain,omitempty"`
	// The name of the mount target.
	//
	// example:
	//
	// target1
	MountTargetName *string `json:"MountTargetName,omitempty" xml:"MountTargetName,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-****
	NetWorkId *string `json:"NetWorkId,omitempty" xml:"NetWorkId,omitempty"`
	// The status of the mount target. Valid values:
	//
	// 	- active: The mount target is available.
	//
	// 	- inactive: The mount target is unavailable.
	//
	// 	- pending: The task is running.
	//
	// 	- deleting: The mount target is being deleted.
	//
	// example:
	//
	// active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeFileSystemsResponseBodyFileSystemsMountTargets) String() string {
	return tea.Prettify(s)
}

func (s DescribeFileSystemsResponseBodyFileSystemsMountTargets) GoString() string {
	return s.String()
}

func (s *DescribeFileSystemsResponseBodyFileSystemsMountTargets) SetMountTargetDomain(v string) *DescribeFileSystemsResponseBodyFileSystemsMountTargets {
	s.MountTargetDomain = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystemsMountTargets) SetMountTargetName(v string) *DescribeFileSystemsResponseBodyFileSystemsMountTargets {
	s.MountTargetName = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystemsMountTargets) SetNetWorkId(v string) *DescribeFileSystemsResponseBodyFileSystemsMountTargets {
	s.NetWorkId = &v
	return s
}

func (s *DescribeFileSystemsResponseBodyFileSystemsMountTargets) SetStatus(v string) *DescribeFileSystemsResponseBodyFileSystemsMountTargets {
	s.Status = &v
	return s
}

type DescribeFileSystemsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFileSystemsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFileSystemsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFileSystemsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFileSystemsResponse) SetHeaders(v map[string]*string) *DescribeFileSystemsResponse {
	s.Headers = v
	return s
}

func (s *DescribeFileSystemsResponse) SetStatusCode(v int32) *DescribeFileSystemsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFileSystemsResponse) SetBody(v *DescribeFileSystemsResponseBody) *DescribeFileSystemsResponse {
	s.Body = v
	return s
}

type DescribeForwardTableEntriesRequest struct {
	// The EIP in the DNAT entry. The public IP address is used to access the Internet.
	//
	// example:
	//
	// 36.XXX.XXX.72
	ExternalIp *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	// The ID of the DNAT entry.
	//
	// example:
	//
	// fwd-5tfi6f0rutmd00xrhkag7****
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	// The name of the DNAT entry.
	//
	// example:
	//
	// test0
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	// The private IP address of the instance that uses the DNAT entry for Internet communication.
	//
	// example:
	//
	// 10.XXX.XXX.50
	InternalIp *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	// The protocol. Valid values:
	//
	// 	- **TCP**: forwards TCP packets.
	//
	// 	- **UDP**: forwards UDP packets.
	//
	// 	- **Any**: forwards all packets.
	//
	// example:
	//
	// TCP
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The ID of the NAT gateway.
	//
	// This parameter is required.
	//
	// example:
	//
	// nat-5t7nh1cfm6kxiszlttr38****
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	// The page number. Pages start from page **1**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: **100**.
	//
	// Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeForwardTableEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesRequest) SetExternalIp(v string) *DescribeForwardTableEntriesRequest {
	s.ExternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardEntryId(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetForwardEntryName(v string) *DescribeForwardTableEntriesRequest {
	s.ForwardEntryName = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetInternalIp(v string) *DescribeForwardTableEntriesRequest {
	s.InternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetIpProtocol(v string) *DescribeForwardTableEntriesRequest {
	s.IpProtocol = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetNatGatewayId(v string) *DescribeForwardTableEntriesRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetPageNumber(v int32) *DescribeForwardTableEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeForwardTableEntriesRequest) SetPageSize(v int32) *DescribeForwardTableEntriesRequest {
	s.PageSize = &v
	return s
}

type DescribeForwardTableEntriesResponseBody struct {
	// Details of DNAT entries.
	ForwardTableEntries []*DescribeForwardTableEntriesResponseBodyForwardTableEntries `json:"ForwardTableEntries,omitempty" xml:"ForwardTableEntries,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 100
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeForwardTableEntriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponseBody) SetForwardTableEntries(v []*DescribeForwardTableEntriesResponseBodyForwardTableEntries) *DescribeForwardTableEntriesResponseBody {
	s.ForwardTableEntries = v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetPageNumber(v string) *DescribeForwardTableEntriesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetPageSize(v string) *DescribeForwardTableEntriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetRequestId(v string) *DescribeForwardTableEntriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBody) SetTotalCount(v string) *DescribeForwardTableEntriesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeForwardTableEntriesResponseBodyForwardTableEntries struct {
	// The EIP in the DNAT entry. The public IP address is used to access the Internet.
	//
	// example:
	//
	// 120.XXX.XXX.70
	ExternalIp *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	// The external port or port range that is used in port forwarding.
	//
	// example:
	//
	// 22
	ExternalPort *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	// The ID of the DNAT entry.
	//
	// example:
	//
	// fwd-5tf66679oi2uoxcvlg0g2****
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	// The name of the DNAT entry.
	//
	// example:
	//
	// test0
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	// The probe port of DNAT.
	//
	// example:
	//
	// 80
	HealthCheckPort *string `json:"HealthCheckPort,omitempty" xml:"HealthCheckPort,omitempty"`
	// The private IP address of the instance that uses the DNAT entry for Internet communication.
	//
	// example:
	//
	// 10.XXX.XXX.3
	InternalIp *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	// The internal port or port range that is used for port forwarding.
	//
	// example:
	//
	// 22
	InternalPort *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	// The protocol. Valid values:
	//
	// 	- **TCP**: forwards TCP packets.
	//
	// 	- **UDP**: forwards UDP packets.
	//
	// 	- **Any**: forwards all packets.
	//
	// example:
	//
	// Any
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The ID of the NAT gateway.
	//
	// example:
	//
	// nat-5tawjw5j7sgd2deujxuk0****
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	// The secondary EIP that is used to access the Internet.
	//
	// example:
	//
	// 101.XXX.XXX.7
	StandbyExternalIp *string `json:"StandbyExternalIp,omitempty" xml:"StandbyExternalIp,omitempty"`
	// The status of the secondary EIP. Valid values:
	//
	// 	- Running
	//
	// 	- Stopping
	//
	// 	- Stopped
	//
	// 	- Starting
	//
	// example:
	//
	// Stopped
	StandbyStatus *string `json:"StandbyStatus,omitempty" xml:"StandbyStatus,omitempty"`
	// The status of the DNAT entry. Valid values:
	//
	// 	- Pending: The DNAT entry is being created or modified.
	//
	// 	- Available: The DNAT entry is available.
	//
	// 	- Deleting: The DNAT entry is being deleted.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeForwardTableEntriesResponseBodyForwardTableEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponseBodyForwardTableEntries) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetExternalIp(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ExternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetExternalPort(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ExternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetForwardEntryId(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ForwardEntryId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetForwardEntryName(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.ForwardEntryName = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetHealthCheckPort(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.HealthCheckPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetInternalIp(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.InternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetInternalPort(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.InternalPort = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetIpProtocol(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.IpProtocol = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetNatGatewayId(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetStandbyExternalIp(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.StandbyExternalIp = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetStandbyStatus(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.StandbyStatus = &v
	return s
}

func (s *DescribeForwardTableEntriesResponseBodyForwardTableEntries) SetStatus(v string) *DescribeForwardTableEntriesResponseBodyForwardTableEntries {
	s.Status = &v
	return s
}

type DescribeForwardTableEntriesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeForwardTableEntriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeForwardTableEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeForwardTableEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeForwardTableEntriesResponse) SetHeaders(v map[string]*string) *DescribeForwardTableEntriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetStatusCode(v int32) *DescribeForwardTableEntriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeForwardTableEntriesResponse) SetBody(v *DescribeForwardTableEntriesResponseBody) *DescribeForwardTableEntriesResponse {
	s.Body = v
	return s
}

type DescribeHaVipsRequest struct {
	// The ID of the region.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId  *string   `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The IP address of the HAVIP.
	//
	// example:
	//
	// 10.5.XX.XX
	HaVipAddress *string `json:"HaVipAddress,omitempty" xml:"HaVipAddress,omitempty"`
	// The ID of the HAVIP.
	//
	// example:
	//
	// havip-5p14t****
	HaVipId *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
	// The name of the HAVIP.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-57gqcdfvx6n****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The status of the HAVIP. Valid values:
	//
	// 	- Creating
	//
	// 	- Available
	//
	// 	- InUse
	//
	// 	- Deleting
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeHaVipsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsRequest) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsRequest) SetEnsRegionId(v string) *DescribeHaVipsRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeHaVipsRequest) SetEnsRegionIds(v []*string) *DescribeHaVipsRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeHaVipsRequest) SetHaVipAddress(v string) *DescribeHaVipsRequest {
	s.HaVipAddress = &v
	return s
}

func (s *DescribeHaVipsRequest) SetHaVipId(v string) *DescribeHaVipsRequest {
	s.HaVipId = &v
	return s
}

func (s *DescribeHaVipsRequest) SetName(v string) *DescribeHaVipsRequest {
	s.Name = &v
	return s
}

func (s *DescribeHaVipsRequest) SetNetworkId(v string) *DescribeHaVipsRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeHaVipsRequest) SetPageNumber(v string) *DescribeHaVipsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeHaVipsRequest) SetPageSize(v string) *DescribeHaVipsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeHaVipsRequest) SetStatus(v string) *DescribeHaVipsRequest {
	s.Status = &v
	return s
}

func (s *DescribeHaVipsRequest) SetVSwitchId(v string) *DescribeHaVipsRequest {
	s.VSwitchId = &v
	return s
}

type DescribeHaVipsResponseBody struct {
	// Details of the HAVIPs.
	HaVips []*DescribeHaVipsResponseBodyHaVips `json:"HaVips,omitempty" xml:"HaVips,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// AAE90880-4970-4D81-A534-A6C0F3631F74
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 49
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeHaVipsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseBody) SetHaVips(v []*DescribeHaVipsResponseBodyHaVips) *DescribeHaVipsResponseBody {
	s.HaVips = v
	return s
}

func (s *DescribeHaVipsResponseBody) SetPageNumber(v string) *DescribeHaVipsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeHaVipsResponseBody) SetPageSize(v string) *DescribeHaVipsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeHaVipsResponseBody) SetRequestId(v string) *DescribeHaVipsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHaVipsResponseBody) SetTotalCount(v string) *DescribeHaVipsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeHaVipsResponseBodyHaVips struct {
	// The elastic IP addresses (EIPs) that are associated with the HAVIP.
	AssociatedEipAddresses []*DescribeHaVipsResponseBodyHaVipsAssociatedEipAddresses `json:"AssociatedEipAddresses,omitempty" xml:"AssociatedEipAddresses,omitempty" type:"Repeated"`
	// The information about instances that are associated with the HAVIP.
	AssociatedInstances []*DescribeHaVipsResponseBodyHaVipsAssociatedInstances `json:"AssociatedInstances,omitempty" xml:"AssociatedInstances,omitempty" type:"Repeated"`
	// The time when the HAVIP was created.
	//
	// example:
	//
	// 2023-03-29T11:17:38Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the HAVIP.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-guiyang-14
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the HAVIP.
	//
	// example:
	//
	// havip-52y28****
	HaVipId *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
	// The IP address of the HAVIP.
	//
	// example:
	//
	// 192.XX.XX.5
	IpAddress *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	// The name of the HAVIP.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-5wtkyrk****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The status of the HAVIP. Valid values:
	//
	// 	- Creating
	//
	// 	- Available
	//
	// 	- InUse
	//
	// 	- Deleting
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5yc8d****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeHaVipsResponseBodyHaVips) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseBodyHaVips) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseBodyHaVips) SetAssociatedEipAddresses(v []*DescribeHaVipsResponseBodyHaVipsAssociatedEipAddresses) *DescribeHaVipsResponseBodyHaVips {
	s.AssociatedEipAddresses = v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetAssociatedInstances(v []*DescribeHaVipsResponseBodyHaVipsAssociatedInstances) *DescribeHaVipsResponseBodyHaVips {
	s.AssociatedInstances = v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetCreationTime(v string) *DescribeHaVipsResponseBodyHaVips {
	s.CreationTime = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetDescription(v string) *DescribeHaVipsResponseBodyHaVips {
	s.Description = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetEnsRegionId(v string) *DescribeHaVipsResponseBodyHaVips {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetHaVipId(v string) *DescribeHaVipsResponseBodyHaVips {
	s.HaVipId = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetIpAddress(v string) *DescribeHaVipsResponseBodyHaVips {
	s.IpAddress = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetName(v string) *DescribeHaVipsResponseBodyHaVips {
	s.Name = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetNetworkId(v string) *DescribeHaVipsResponseBodyHaVips {
	s.NetworkId = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetStatus(v string) *DescribeHaVipsResponseBodyHaVips {
	s.Status = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVips) SetVSwitchId(v string) *DescribeHaVipsResponseBodyHaVips {
	s.VSwitchId = &v
	return s
}

type DescribeHaVipsResponseBodyHaVipsAssociatedEipAddresses struct {
	// The EIP.
	//
	// example:
	//
	// 47.XX.XX.40
	Eip *string `json:"Eip,omitempty" xml:"Eip,omitempty"`
	// The ID of the EIP.
	//
	// example:
	//
	// eip-5p1wz****
	EipId *string `json:"EipId,omitempty" xml:"EipId,omitempty"`
}

func (s DescribeHaVipsResponseBodyHaVipsAssociatedEipAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseBodyHaVipsAssociatedEipAddresses) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseBodyHaVipsAssociatedEipAddresses) SetEip(v string) *DescribeHaVipsResponseBodyHaVipsAssociatedEipAddresses {
	s.Eip = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVipsAssociatedEipAddresses) SetEipId(v string) *DescribeHaVipsResponseBodyHaVipsAssociatedEipAddresses {
	s.EipId = &v
	return s
}

type DescribeHaVipsResponseBodyHaVipsAssociatedInstances struct {
	// The time when the instance was created.
	//
	// example:
	//
	// 2023-01-05T07:09:28Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-51p****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of the instance that is associated with the HAVIP. Valid values:
	//
	// 	- EnsInstance: ENS instance
	//
	// 	- NetworkInterface: elastic network interface (ENI)
	//
	// example:
	//
	// EnsInstance
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The private IP address of the instance that is associated with the HAVIP. Valid values:
	//
	// example:
	//
	// 192.XX.XX.9
	IpAddress *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	// The association status of the HAVIP. Valid values:
	//
	// 	- Associating
	//
	// 	- InUse
	//
	// 	- Unassociating
	//
	// example:
	//
	// InUse
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeHaVipsResponseBodyHaVipsAssociatedInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponseBodyHaVipsAssociatedInstances) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponseBodyHaVipsAssociatedInstances) SetCreationTime(v string) *DescribeHaVipsResponseBodyHaVipsAssociatedInstances {
	s.CreationTime = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVipsAssociatedInstances) SetInstanceId(v string) *DescribeHaVipsResponseBodyHaVipsAssociatedInstances {
	s.InstanceId = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVipsAssociatedInstances) SetInstanceType(v string) *DescribeHaVipsResponseBodyHaVipsAssociatedInstances {
	s.InstanceType = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVipsAssociatedInstances) SetIpAddress(v string) *DescribeHaVipsResponseBodyHaVipsAssociatedInstances {
	s.IpAddress = &v
	return s
}

func (s *DescribeHaVipsResponseBodyHaVipsAssociatedInstances) SetStatus(v string) *DescribeHaVipsResponseBodyHaVipsAssociatedInstances {
	s.Status = &v
	return s
}

type DescribeHaVipsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeHaVipsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeHaVipsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHaVipsResponse) GoString() string {
	return s.String()
}

func (s *DescribeHaVipsResponse) SetHeaders(v map[string]*string) *DescribeHaVipsResponse {
	s.Headers = v
	return s
}

func (s *DescribeHaVipsResponse) SetStatusCode(v int32) *DescribeHaVipsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHaVipsResponse) SetBody(v *DescribeHaVipsResponseBody) *DescribeHaVipsResponse {
	s.Body = v
	return s
}

type DescribeImageInfosRequest struct {
	// The operating system (OS). You can specify only one OS in a request. If you do not specify a value for this parameter, images for all supported OSs are queried. Valid values:
	//
	// 	- linux
	//
	// 	- windows
	//
	// example:
	//
	// linux
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
}

func (s DescribeImageInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosRequest) SetOsType(v string) *DescribeImageInfosRequest {
	s.OsType = &v
	return s
}

type DescribeImageInfosResponseBody struct {
	// The HTTP status code that is returned.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about images.
	Images *DescribeImageInfosResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 5568A08C-10A9-47F3-902F-647298B463FB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImageInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosResponseBody) SetCode(v int32) *DescribeImageInfosResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeImageInfosResponseBody) SetImages(v *DescribeImageInfosResponseBodyImages) *DescribeImageInfosResponseBody {
	s.Images = v
	return s
}

func (s *DescribeImageInfosResponseBody) SetRequestId(v string) *DescribeImageInfosResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImageInfosResponseBodyImages struct {
	Image []*DescribeImageInfosResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeImageInfosResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosResponseBodyImages) SetImage(v []*DescribeImageInfosResponseBodyImagesImage) *DescribeImageInfosResponseBodyImages {
	s.Image = v
	return s
}

type DescribeImageInfosResponseBodyImagesImage struct {
	// The computing type of the image. Valid values:
	//
	// 	- ens_vm: x86 computing.
	//
	// 	- arm_vm: ARM computing.
	//
	// 	- bare_metal: x86 bare machine.
	//
	// 	- pcfarm: heterogeneous computing.
	//
	// example:
	//
	// ens_vm
	ComputeType *string `json:"ComputeType,omitempty" xml:"ComputeType,omitempty"`
	// The description of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_alibase_2017****
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The mappings between disks and snapshots in the image.
	DiskDeviceMappings *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappings `json:"DiskDeviceMappings,omitempty" xml:"DiskDeviceMappings,omitempty" type:"Struct"`
	// The ID of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_alibase_2017****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The size of the image. Unit: GiB.
	//
	// example:
	//
	// 20
	ImageSize *string `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
	// The version of the image.
	//
	// example:
	//
	// 6.8
	ImageVersion *string `json:"ImageVersion,omitempty" xml:"ImageVersion,omitempty"`
	// The type of the image. Valid values: **centos**, **debian**, **ubuntu**, and **windows**.
	//
	// example:
	//
	// centos
	OSName *string `json:"OSName,omitempty" xml:"OSName,omitempty"`
	// The type of the operating system.
	//
	// example:
	//
	// linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-shenzhen
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeImageInfosResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetComputeType(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.ComputeType = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetDescription(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.Description = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetDiskDeviceMappings(v *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappings) *DescribeImageInfosResponseBodyImagesImage {
	s.DiskDeviceMappings = v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetImageId(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetImageSize(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.ImageSize = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetImageVersion(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.ImageVersion = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetOSName(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.OSName = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetOSType(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.OSType = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImage) SetRegionId(v string) *DescribeImageInfosResponseBodyImagesImage {
	s.RegionId = &v
	return s
}

type DescribeImageInfosResponseBodyImagesImageDiskDeviceMappings struct {
	DiskDeviceMapping []*DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping `json:"DiskDeviceMapping,omitempty" xml:"DiskDeviceMapping,omitempty" type:"Repeated"`
}

func (s DescribeImageInfosResponseBodyImagesImageDiskDeviceMappings) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosResponseBodyImagesImageDiskDeviceMappings) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappings) SetDiskDeviceMapping(v []*DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappings {
	s.DiskDeviceMapping = v
	return s
}

type DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping struct {
	// The format of the image.
	//
	// example:
	//
	// The format of the image.
	//
	// raw
	//
	// qcow2
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// The size of the image. Unit: GB.
	//
	// example:
	//
	// 100
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
	// The type of the disk. Valid values: System and Data.
	//
	// example:
	//
	// Data
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// i-test
	ImageId *string `json:"imageId,omitempty" xml:"imageId,omitempty"`
}

func (s DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetFormat(v string) *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Format = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetSize(v string) *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Size = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetType(v string) *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Type = &v
	return s
}

func (s *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetImageId(v string) *DescribeImageInfosResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.ImageId = &v
	return s
}

type DescribeImageInfosResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeImageInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeImageInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageInfosResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageInfosResponse) SetHeaders(v map[string]*string) *DescribeImageInfosResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageInfosResponse) SetStatusCode(v int32) *DescribeImageInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageInfosResponse) SetBody(v *DescribeImageInfosResponseBody) *DescribeImageInfosResponse {
	s.Body = v
	return s
}

type DescribeImageSharePermissionRequest struct {
	// The ID of the Alibaba Cloud account.
	//
	// example:
	//
	// 171710408091****
	AliyunId *int64 `json:"AliyunId,omitempty" xml:"AliyunId,omitempty"`
	// The ID of the image.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-5s7qotzavwbrnzaqh4unm****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The page number. Pages start from page **1**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: **100**.
	//
	// Default value: **10**
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeImageSharePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionRequest) SetAliyunId(v int64) *DescribeImageSharePermissionRequest {
	s.AliyunId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetImageId(v string) *DescribeImageSharePermissionRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetPageNumber(v string) *DescribeImageSharePermissionRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeImageSharePermissionRequest) SetPageSize(v string) *DescribeImageSharePermissionRequest {
	s.PageSize = &v
	return s
}

type DescribeImageSharePermissionResponseBody struct {
	// The account information.
	Accounts *DescribeImageSharePermissionResponseBodyAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" type:"Struct"`
	// The ID of the image.
	//
	// example:
	//
	// m-5qkf6jv9a0tzd5ipwx5fi****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// A44EE357-6174-5E37-A801-48F5790F9ACE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of Alibaba Cloud accounts with which you share the image.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageSharePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseBody) SetAccounts(v *DescribeImageSharePermissionResponseBodyAccounts) *DescribeImageSharePermissionResponseBody {
	s.Accounts = v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetImageId(v string) *DescribeImageSharePermissionResponseBody {
	s.ImageId = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetPageNumber(v int32) *DescribeImageSharePermissionResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetPageSize(v int32) *DescribeImageSharePermissionResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetRequestId(v string) *DescribeImageSharePermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageSharePermissionResponseBody) SetTotalCount(v int32) *DescribeImageSharePermissionResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeImageSharePermissionResponseBodyAccounts struct {
	Account []*DescribeImageSharePermissionResponseBodyAccountsAccount `json:"Account,omitempty" xml:"Account,omitempty" type:"Repeated"`
}

func (s DescribeImageSharePermissionResponseBodyAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseBodyAccounts) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseBodyAccounts) SetAccount(v []*DescribeImageSharePermissionResponseBodyAccountsAccount) *DescribeImageSharePermissionResponseBodyAccounts {
	s.Account = v
	return s
}

type DescribeImageSharePermissionResponseBodyAccountsAccount struct {
	AliyunUid *string `json:"AliyunUid,omitempty" xml:"AliyunUid,omitempty"`
}

func (s DescribeImageSharePermissionResponseBodyAccountsAccount) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponseBodyAccountsAccount) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponseBodyAccountsAccount) SetAliyunUid(v string) *DescribeImageSharePermissionResponseBodyAccountsAccount {
	s.AliyunUid = &v
	return s
}

type DescribeImageSharePermissionResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeImageSharePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeImageSharePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageSharePermissionResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageSharePermissionResponse) SetHeaders(v map[string]*string) *DescribeImageSharePermissionResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetStatusCode(v int32) *DescribeImageSharePermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageSharePermissionResponse) SetBody(v *DescribeImageSharePermissionResponseBody) *DescribeImageSharePermissionResponse {
	s.Body = v
	return s
}

type DescribeImagesRequest struct {
	// The ID of the Edge Node Service (ENS) node.
	//
	// example:
	//
	// cn-dalian-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the image. You can specify only one image ID.
	//
	// Custom images and public images are supported.
	//
	// example:
	//
	// m-5qm2r6xo7njrpdkx04q1o****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the custom image. The name must be 2 to 128 characters in length The name must start with a letter and cannot start with `acs:` or `aliyun`. The name cannot contain `http://` or `https://`. The name can contain letters, digits, periods (.), colons (:), underscores (_), and hyphens (-).
	//
	// By default, this parameter is left empty, which indicates that the original name is retained.
	//
	// example:
	//
	// centos_6_08_64_20G_a****
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The page number. Pages start from page **1**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: **50**.
	//
	// Default value: **10**.
	//
	// example:
	//
	// 50
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// mock-clone_snapshot_id
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// This parameter is unavailable.
	//
	// example:
	//
	// This parameter is not currently in use.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeImagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeImagesRequest) SetEnsRegionId(v string) *DescribeImagesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeImagesRequest) SetImageId(v string) *DescribeImagesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImagesRequest) SetImageName(v string) *DescribeImagesRequest {
	s.ImageName = &v
	return s
}

func (s *DescribeImagesRequest) SetPageNumber(v string) *DescribeImagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeImagesRequest) SetPageSize(v string) *DescribeImagesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeImagesRequest) SetSnapshotId(v string) *DescribeImagesRequest {
	s.SnapshotId = &v
	return s
}

func (s *DescribeImagesRequest) SetStatus(v string) *DescribeImagesRequest {
	s.Status = &v
	return s
}

type DescribeImagesResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about images.
	Images *DescribeImagesResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 8331AA01-C16D-5481-BB47-D19CEBAA811E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of images.
	//
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBody) SetCode(v int32) *DescribeImagesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeImagesResponseBody) SetImages(v *DescribeImagesResponseBodyImages) *DescribeImagesResponseBody {
	s.Images = v
	return s
}

func (s *DescribeImagesResponseBody) SetPageNumber(v int32) *DescribeImagesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeImagesResponseBody) SetPageSize(v int32) *DescribeImagesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeImagesResponseBody) SetRequestId(v string) *DescribeImagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImagesResponseBody) SetTotalCount(v int32) *DescribeImagesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeImagesResponseBodyImages struct {
	Image []*DescribeImagesResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeImagesResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBodyImages) SetImage(v []*DescribeImagesResponseBodyImagesImage) *DescribeImagesResponseBodyImages {
	s.Image = v
	return s
}

type DescribeImagesResponseBodyImagesImage struct {
	// The architecture of the image. Example: **x86_64**.
	//
	// example:
	//
	// x86_64
	Architecture *string `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	// The time when the image was created. The time follows the ISO 8601 standard.
	//
	// example:
	//
	// 2017-12-08T12:10:03Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The mappings between the disk and the snapshot in the image.
	DiskDeviceMappings *DescribeImagesResponseBodyImagesImageDiskDeviceMappings `json:"DiskDeviceMappings,omitempty" xml:"DiskDeviceMappings,omitempty" type:"Struct"`
	// The ID of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_alibase_2017****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image.
	//
	// example:
	//
	// Ubuntu_16.04
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The source of the image. Valid values:
	//
	// 	- system: Alibaba Cloud public images
	//
	// 	- self: your custom images
	//
	// 	- others: shared images from other Alibaba Cloud accounts, or community images published by other Alibaba Cloud accounts
	//
	// example:
	//
	// system
	ImageOwnerAlias *string `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	// The size of the image. Unit: GiB.
	//
	// example:
	//
	// 40
	ImageSize *string `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
	// The operating system type of the image. Valid values:
	//
	// 	- Linux
	//
	// 	- Windows
	//
	// example:
	//
	// centos
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// example:
	//
	// cn-qingdao
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// mock-clone_snapshot_id
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s DescribeImagesResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBodyImagesImage) SetArchitecture(v string) *DescribeImagesResponseBodyImagesImage {
	s.Architecture = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetCreationTime(v string) *DescribeImagesResponseBodyImagesImage {
	s.CreationTime = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetDiskDeviceMappings(v *DescribeImagesResponseBodyImagesImageDiskDeviceMappings) *DescribeImagesResponseBodyImagesImage {
	s.DiskDeviceMappings = v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetImageId(v string) *DescribeImagesResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetImageName(v string) *DescribeImagesResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetImageOwnerAlias(v string) *DescribeImagesResponseBodyImagesImage {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetImageSize(v string) *DescribeImagesResponseBodyImagesImage {
	s.ImageSize = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetPlatform(v string) *DescribeImagesResponseBodyImagesImage {
	s.Platform = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetRegionId(v string) *DescribeImagesResponseBodyImagesImage {
	s.RegionId = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImage) SetSnapshotId(v string) *DescribeImagesResponseBodyImagesImage {
	s.SnapshotId = &v
	return s
}

type DescribeImagesResponseBodyImagesImageDiskDeviceMappings struct {
	DiskDeviceMapping []*DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping `json:"DiskDeviceMapping,omitempty" xml:"DiskDeviceMapping,omitempty" type:"Repeated"`
}

func (s DescribeImagesResponseBodyImagesImageDiskDeviceMappings) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBodyImagesImageDiskDeviceMappings) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBodyImagesImageDiskDeviceMappings) SetDiskDeviceMapping(v []*DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) *DescribeImagesResponseBodyImagesImageDiskDeviceMappings {
	s.DiskDeviceMapping = v
	return s
}

type DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping struct {
	// The format of the image.
	//
	// example:
	//
	// The format of the image.
	//
	// raw
	//
	// qcow2
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// The size of the disk. Unit: GiB.
	//
	// example:
	//
	// 100
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
	// The type of the disk. Valid values:
	//
	// 	- system: system disk.
	//
	// 	- data: data disk.
	//
	// example:
	//
	// Data
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of image.
	//
	// example:
	//
	// i-test
	ImageId *string `json:"imageId,omitempty" xml:"imageId,omitempty"`
}

func (s DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetFormat(v string) *DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Format = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetSize(v string) *DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Size = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetType(v string) *DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Type = &v
	return s
}

func (s *DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetImageId(v string) *DescribeImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.ImageId = &v
	return s
}

type DescribeImagesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeImagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponse) SetHeaders(v map[string]*string) *DescribeImagesResponse {
	s.Headers = v
	return s
}

func (s *DescribeImagesResponse) SetStatusCode(v int32) *DescribeImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImagesResponse) SetBody(v *DescribeImagesResponseBody) *DescribeImagesResponse {
	s.Body = v
	return s
}

type DescribeInstanceAutoRenewAttributeRequest struct {
	// The ID of an instance. Separate multiple IDs with semicolons (;).
	//
	// This parameter is required.
	//
	// example:
	//
	// i-5ci7l7k1m9m2zmhp4iw3o****
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	OwnerId     *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetInstanceIds(v string) *DescribeInstanceAutoRenewAttributeRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeRequest) SetOwnerId(v int64) *DescribeInstanceAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseBody struct {
	// The returned service code. A value of 0 indicates that the operation was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The renewal status of the instance.
	InstanceRenewAttributes *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes `json:"InstanceRenewAttributes,omitempty" xml:"InstanceRenewAttributes,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 4DD66F05-3116-4BAA-B588-52EB2E7F431D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetCode(v int32) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetInstanceRenewAttributes(v *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.InstanceRenewAttributes = v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBody) SetRequestId(v string) *DescribeInstanceAutoRenewAttributeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes struct {
	InstanceRenewAttribute []*DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute `json:"InstanceRenewAttribute,omitempty" xml:"InstanceRenewAttribute,omitempty" type:"Repeated"`
}

func (s DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes) SetInstanceRenewAttribute(v []*DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributes {
	s.InstanceRenewAttribute = v
	return s
}

type DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute struct {
	// The renewal type of the instance.
	//
	// 	- **true**: enables auto-renewal.
	//
	// 	- **false**: disables auto-renewal.
	//
	// example:
	//
	// false
	AutoRenewal *bool `json:"AutoRenewal,omitempty" xml:"AutoRenewal,omitempty"`
	// The unit of the auto-renewal period.
	//
	// example:
	//
	// 0
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-5ci7l7k1m9m2zmhp4iw3o****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetAutoRenewal(v bool) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.AutoRenewal = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetDuration(v string) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.Duration = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute) SetInstanceId(v string) *DescribeInstanceAutoRenewAttributeResponseBodyInstanceRenewAttributesInstanceRenewAttribute {
	s.InstanceId = &v
	return s
}

type DescribeInstanceAutoRenewAttributeResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceAutoRenewAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetHeaders(v map[string]*string) *DescribeInstanceAutoRenewAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetStatusCode(v int32) *DescribeInstanceAutoRenewAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceAutoRenewAttributeResponse) SetBody(v *DescribeInstanceAutoRenewAttributeResponseBody) *DescribeInstanceAutoRenewAttributeResponse {
	s.Body = v
	return s
}

type DescribeInstanceBandwidthDetailRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2024-01-11 30:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// example:
	//
	// i-6ecpqvkicnchxccozrpxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// vm
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// vm
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2024-01-11 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceBandwidthDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBandwidthDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBandwidthDetailRequest) SetEndTime(v string) *DescribeInstanceBandwidthDetailRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailRequest) SetEnsRegionId(v string) *DescribeInstanceBandwidthDetailRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailRequest) SetInstanceId(v string) *DescribeInstanceBandwidthDetailRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailRequest) SetInstanceType(v string) *DescribeInstanceBandwidthDetailRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailRequest) SetPageNumber(v int32) *DescribeInstanceBandwidthDetailRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailRequest) SetPageSize(v int32) *DescribeInstanceBandwidthDetailRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailRequest) SetServiceType(v string) *DescribeInstanceBandwidthDetailRequest {
	s.ServiceType = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailRequest) SetStartTime(v string) *DescribeInstanceBandwidthDetailRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceBandwidthDetailResponseBody struct {
	Bandwidths []*DescribeInstanceBandwidthDetailResponseBodyBandwidths `json:"Bandwidths,omitempty" xml:"Bandwidths,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Id of the request
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceBandwidthDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBandwidthDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBandwidthDetailResponseBody) SetBandwidths(v []*DescribeInstanceBandwidthDetailResponseBodyBandwidths) *DescribeInstanceBandwidthDetailResponseBody {
	s.Bandwidths = v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBody) SetPageNumber(v int32) *DescribeInstanceBandwidthDetailResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBody) SetPageSize(v int32) *DescribeInstanceBandwidthDetailResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBody) SetRequestId(v string) *DescribeInstanceBandwidthDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBody) SetTotalCount(v int32) *DescribeInstanceBandwidthDetailResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstanceBandwidthDetailResponseBodyBandwidths struct {
	// example:
	//
	// 1972653484384661
	AliUid *int64 `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	// example:
	//
	// 2024-01-11 00:00:00
	BizTime *string `json:"BizTime,omitempty" xml:"BizTime,omitempty"`
	// example:
	//
	// cn-yichang-2
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// example:
	//
	// 1
	FlowType *int32 `json:"FlowType,omitempty" xml:"FlowType,omitempty"`
	// example:
	//
	// i-6ecpqvkicnchxccozrpxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// vm
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// 203.107.***
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// example:
	//
	// cmcc
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// example:
	//
	// 43795230
	RxBw *int64 `json:"RxBw,omitempty" xml:"RxBw,omitempty"`
	// example:
	//
	// vm
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
	// example:
	//
	// 25415638
	TxBw *int64 `json:"TxBw,omitempty" xml:"TxBw,omitempty"`
}

func (s DescribeInstanceBandwidthDetailResponseBodyBandwidths) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBandwidthDetailResponseBodyBandwidths) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetAliUid(v int64) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.AliUid = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetBizTime(v string) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.BizTime = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetEnsRegionId(v string) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetFlowType(v int32) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.FlowType = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetInstanceId(v string) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetInstanceType(v string) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetIp(v string) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.Ip = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetIsp(v string) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.Isp = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetRxBw(v int64) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.RxBw = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetServiceType(v string) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.ServiceType = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponseBodyBandwidths) SetTxBw(v int64) *DescribeInstanceBandwidthDetailResponseBodyBandwidths {
	s.TxBw = &v
	return s
}

type DescribeInstanceBandwidthDetailResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceBandwidthDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceBandwidthDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBandwidthDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBandwidthDetailResponse) SetHeaders(v map[string]*string) *DescribeInstanceBandwidthDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponse) SetStatusCode(v int32) *DescribeInstanceBandwidthDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceBandwidthDetailResponse) SetBody(v *DescribeInstanceBandwidthDetailResponseBody) *DescribeInstanceBandwidthDetailResponse {
	s.Body = v
	return s
}

type DescribeInstanceBootConfigurationRequest struct {
	// example:
	//
	// legacy
	BootSet *string `json:"BootSet,omitempty" xml:"BootSet,omitempty"`
	// example:
	//
	// pxe
	BootType *string `json:"BootType,omitempty" xml:"BootType,omitempty"`
	// example:
	//
	// on
	DiskSet *string `json:"DiskSet,omitempty" xml:"DiskSet,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// i-****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceBootConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBootConfigurationRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBootConfigurationRequest) SetBootSet(v string) *DescribeInstanceBootConfigurationRequest {
	s.BootSet = &v
	return s
}

func (s *DescribeInstanceBootConfigurationRequest) SetBootType(v string) *DescribeInstanceBootConfigurationRequest {
	s.BootType = &v
	return s
}

func (s *DescribeInstanceBootConfigurationRequest) SetDiskSet(v string) *DescribeInstanceBootConfigurationRequest {
	s.DiskSet = &v
	return s
}

func (s *DescribeInstanceBootConfigurationRequest) SetInstanceId(v string) *DescribeInstanceBootConfigurationRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceBootConfigurationResponseBody struct {
	// Schema of Response
	Instances *DescribeInstanceBootConfigurationResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// F3B261DD-3858-4D3C-877D-303ADF374600
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceBootConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBootConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBootConfigurationResponseBody) SetInstances(v *DescribeInstanceBootConfigurationResponseBodyInstances) *DescribeInstanceBootConfigurationResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeInstanceBootConfigurationResponseBody) SetRequestId(v string) *DescribeInstanceBootConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceBootConfigurationResponseBodyInstances struct {
	// example:
	//
	// legacy
	BootSet *string `json:"BootSet,omitempty" xml:"BootSet,omitempty"`
	// example:
	//
	// disk
	BootType *string `json:"BootType,omitempty" xml:"BootType,omitempty"`
	// example:
	//
	// off
	DiskSet *string `json:"DiskSet,omitempty" xml:"DiskSet,omitempty"`
	// example:
	//
	// i-****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceBootConfigurationResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBootConfigurationResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBootConfigurationResponseBodyInstances) SetBootSet(v string) *DescribeInstanceBootConfigurationResponseBodyInstances {
	s.BootSet = &v
	return s
}

func (s *DescribeInstanceBootConfigurationResponseBodyInstances) SetBootType(v string) *DescribeInstanceBootConfigurationResponseBodyInstances {
	s.BootType = &v
	return s
}

func (s *DescribeInstanceBootConfigurationResponseBodyInstances) SetDiskSet(v string) *DescribeInstanceBootConfigurationResponseBodyInstances {
	s.DiskSet = &v
	return s
}

func (s *DescribeInstanceBootConfigurationResponseBodyInstances) SetInstanceId(v string) *DescribeInstanceBootConfigurationResponseBodyInstances {
	s.InstanceId = &v
	return s
}

type DescribeInstanceBootConfigurationResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceBootConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceBootConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceBootConfigurationResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceBootConfigurationResponse) SetHeaders(v map[string]*string) *DescribeInstanceBootConfigurationResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceBootConfigurationResponse) SetStatusCode(v int32) *DescribeInstanceBootConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceBootConfigurationResponse) SetBody(v *DescribeInstanceBootConfigurationResponseBody) *DescribeInstanceBootConfigurationResponse {
	s.Body = v
	return s
}

type DescribeInstanceMonitorDataRequest struct {
	// The end of the time range to query.
	//
	// Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of the seconds place is not 00, the start time is automatically set to the next minute.
	//
	// example:
	//
	// 2019-10-30T08:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the instance. You can specify only one instance ID.
	//
	// example:
	//
	// yourInstance ID
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The precision of the monitoring data that you want to obtain. Valid values: 60, 300, 1200, 3600, and 14400. Default value: 60. Unit: seconds.
	//
	// example:
	//
	// 60
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The beginning of the time range to query.
	//
	// Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. If the value of the seconds place is not 00, the start time is automatically set to the next minute.
	//
	// example:
	//
	// 2019-10-29T23:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeInstanceMonitorDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataRequest) SetEndTime(v string) *DescribeInstanceMonitorDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetInstanceId(v string) *DescribeInstanceMonitorDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetPeriod(v string) *DescribeInstanceMonitorDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeInstanceMonitorDataRequest) SetStartTime(v string) *DescribeInstanceMonitorDataRequest {
	s.StartTime = &v
	return s
}

type DescribeInstanceMonitorDataResponseBody struct {
	// The returned service code. A value of 0 indicates that the operation was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The set of InstanceMonitorDataType data.
	MonitorData *DescribeInstanceMonitorDataResponseBodyMonitorData `json:"MonitorData,omitempty" xml:"MonitorData,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// C8B26B44-0189-443E-9816-D951F59623A9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceMonitorDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponseBody) SetCode(v int32) *DescribeInstanceMonitorDataResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBody) SetMonitorData(v *DescribeInstanceMonitorDataResponseBodyMonitorData) *DescribeInstanceMonitorDataResponseBody {
	s.MonitorData = v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBody) SetRequestId(v string) *DescribeInstanceMonitorDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceMonitorDataResponseBodyMonitorData struct {
	InstanceMonitorData []*DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData `json:"InstanceMonitorData,omitempty" xml:"InstanceMonitorData,omitempty" type:"Repeated"`
}

func (s DescribeInstanceMonitorDataResponseBodyMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponseBodyMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorData) SetInstanceMonitorData(v []*DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) *DescribeInstanceMonitorDataResponseBodyMonitorData {
	s.InstanceMonitorData = v
	return s
}

type DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData struct {
	// The vCPU usage of the instance, which is raw data. For example, a value of 0.02 indicates that the usage is 2%.
	//
	// example:
	//
	// 0.02
	CPU *string `json:"CPU,omitempty" xml:"CPU,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// yourInstance ID
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is not yet supported.
	//
	// example:
	//
	// Not currently supported
	Memory *string `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) SetCPU(v string) *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData {
	s.CPU = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) SetInstanceId(v string) *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData) SetMemory(v string) *DescribeInstanceMonitorDataResponseBodyMonitorDataInstanceMonitorData {
	s.Memory = &v
	return s
}

type DescribeInstanceMonitorDataResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceMonitorDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceMonitorDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceMonitorDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceMonitorDataResponse) SetHeaders(v map[string]*string) *DescribeInstanceMonitorDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceMonitorDataResponse) SetStatusCode(v int32) *DescribeInstanceMonitorDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceMonitorDataResponse) SetBody(v *DescribeInstanceMonitorDataResponseBody) *DescribeInstanceMonitorDataResponse {
	s.Body = v
	return s
}

type DescribeInstanceSDGStatusRequest struct {
	// The ID of the AIC instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// aic-xxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The IDs of SDGs that you want to query. By default, all SDGs are queried.
	SDGIds []*string `json:"SDGIds,omitempty" xml:"SDGIds,omitempty" type:"Repeated"`
	// The deployment status of the SDG.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeInstanceSDGStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSDGStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSDGStatusRequest) SetInstanceId(v string) *DescribeInstanceSDGStatusRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceSDGStatusRequest) SetPageNumber(v int32) *DescribeInstanceSDGStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceSDGStatusRequest) SetPageSize(v int32) *DescribeInstanceSDGStatusRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceSDGStatusRequest) SetSDGIds(v []*string) *DescribeInstanceSDGStatusRequest {
	s.SDGIds = v
	return s
}

func (s *DescribeInstanceSDGStatusRequest) SetStatus(v string) *DescribeInstanceSDGStatusRequest {
	s.Status = &v
	return s
}

type DescribeInstanceSDGStatusShrinkRequest struct {
	// The ID of the AIC instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// aic-xxxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of the page to return. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The IDs of SDGs that you want to query. By default, all SDGs are queried.
	SDGIdsShrink *string `json:"SDGIds,omitempty" xml:"SDGIds,omitempty"`
	// The deployment status of the SDG.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeInstanceSDGStatusShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSDGStatusShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSDGStatusShrinkRequest) SetInstanceId(v string) *DescribeInstanceSDGStatusShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceSDGStatusShrinkRequest) SetPageNumber(v int32) *DescribeInstanceSDGStatusShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceSDGStatusShrinkRequest) SetPageSize(v int32) *DescribeInstanceSDGStatusShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceSDGStatusShrinkRequest) SetSDGIdsShrink(v string) *DescribeInstanceSDGStatusShrinkRequest {
	s.SDGIdsShrink = &v
	return s
}

func (s *DescribeInstanceSDGStatusShrinkRequest) SetStatus(v string) *DescribeInstanceSDGStatusShrinkRequest {
	s.Status = &v
	return s
}

type DescribeInstanceSDGStatusResponseBody struct {
	// The deployment information of the SDGs.
	DeploymentStatus []*DescribeInstanceSDGStatusResponseBodyDeploymentStatus `json:"DeploymentStatus,omitempty" xml:"DeploymentStatus,omitempty" type:"Repeated"`
	// The number of the page to return. Pages start from page 1. Default value: 1
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of queried deployment records.
	//
	// example:
	//
	// 1
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstanceSDGStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSDGStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSDGStatusResponseBody) SetDeploymentStatus(v []*DescribeInstanceSDGStatusResponseBodyDeploymentStatus) *DescribeInstanceSDGStatusResponseBody {
	s.DeploymentStatus = v
	return s
}

func (s *DescribeInstanceSDGStatusResponseBody) SetPageNumber(v int64) *DescribeInstanceSDGStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstanceSDGStatusResponseBody) SetPageSize(v string) *DescribeInstanceSDGStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstanceSDGStatusResponseBody) SetRequestId(v string) *DescribeInstanceSDGStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceSDGStatusResponseBody) SetTotalCount(v string) *DescribeInstanceSDGStatusResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstanceSDGStatusResponseBodyDeploymentStatus struct {
	// The ID of the edge node.
	//
	// example:
	//
	// cn-guangzhou-26
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the AIC instance.
	//
	// example:
	//
	// aic-xxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The deployment type of the SDG.
	//
	// example:
	//
	// shared
	MountType *string `json:"MountType,omitempty" xml:"MountType,omitempty"`
	// Deployment Phase
	//
	// example:
	//
	// attach
	Phase *string `json:"Phase,omitempty" xml:"Phase,omitempty"`
	// The ID of the SDG.
	//
	// example:
	//
	// sdg-xxxxxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
	// The deployment status of the SDG.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the status was last updated.
	//
	// example:
	//
	// 2023-02-17T02:44:31Z
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeInstanceSDGStatusResponseBodyDeploymentStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSDGStatusResponseBodyDeploymentStatus) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSDGStatusResponseBodyDeploymentStatus) SetEnsRegionId(v string) *DescribeInstanceSDGStatusResponseBodyDeploymentStatus {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeInstanceSDGStatusResponseBodyDeploymentStatus) SetInstanceId(v string) *DescribeInstanceSDGStatusResponseBodyDeploymentStatus {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstanceSDGStatusResponseBodyDeploymentStatus) SetMountType(v string) *DescribeInstanceSDGStatusResponseBodyDeploymentStatus {
	s.MountType = &v
	return s
}

func (s *DescribeInstanceSDGStatusResponseBodyDeploymentStatus) SetPhase(v string) *DescribeInstanceSDGStatusResponseBodyDeploymentStatus {
	s.Phase = &v
	return s
}

func (s *DescribeInstanceSDGStatusResponseBodyDeploymentStatus) SetSDGId(v string) *DescribeInstanceSDGStatusResponseBodyDeploymentStatus {
	s.SDGId = &v
	return s
}

func (s *DescribeInstanceSDGStatusResponseBodyDeploymentStatus) SetStatus(v string) *DescribeInstanceSDGStatusResponseBodyDeploymentStatus {
	s.Status = &v
	return s
}

func (s *DescribeInstanceSDGStatusResponseBodyDeploymentStatus) SetUpdateTime(v string) *DescribeInstanceSDGStatusResponseBodyDeploymentStatus {
	s.UpdateTime = &v
	return s
}

type DescribeInstanceSDGStatusResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceSDGStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceSDGStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSDGStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSDGStatusResponse) SetHeaders(v map[string]*string) *DescribeInstanceSDGStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceSDGStatusResponse) SetStatusCode(v int32) *DescribeInstanceSDGStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceSDGStatusResponse) SetBody(v *DescribeInstanceSDGStatusResponseBody) *DescribeInstanceSDGStatusResponse {
	s.Body = v
	return s
}

type DescribeInstanceSpecResponseBody struct {
	// The bandwidth limit for a single instance. Unit: Mbit/s.
	//
	// example:
	//
	// 0
	BandwidthLimit *int32 `json:"BandwidthLimit,omitempty" xml:"BandwidthLimit,omitempty"`
	// The returned service code. A value of 0 indicates that the operation was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The maximum capacity of a data disk. Unit: GB.
	//
	// example:
	//
	// 20015
	DataDiskMaxSize *int32 `json:"DataDiskMaxSize,omitempty" xml:"DataDiskMaxSize,omitempty"`
	// The minimum capacity of a data disk. Unit: GB.
	//
	// example:
	//
	// 0
	DataDiskMinSize *int32 `json:"DataDiskMinSize,omitempty" xml:"DataDiskMinSize,omitempty"`
	// The information about instance specifications.
	InstanceSpecs *DescribeInstanceSpecResponseBodyInstanceSpecs `json:"InstanceSpecs,omitempty" xml:"InstanceSpecs,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 1ECC937A-AE0E-4626-BE51-DED1D6D1C888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The maximum capacity of the system disk. Unit: GiB.
	//
	// example:
	//
	// 80
	SystemDiskMaxSize *int32 `json:"SystemDiskMaxSize,omitempty" xml:"SystemDiskMaxSize,omitempty"`
}

func (s DescribeInstanceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecResponseBody) SetBandwidthLimit(v int32) *DescribeInstanceSpecResponseBody {
	s.BandwidthLimit = &v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetCode(v int32) *DescribeInstanceSpecResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetDataDiskMaxSize(v int32) *DescribeInstanceSpecResponseBody {
	s.DataDiskMaxSize = &v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetDataDiskMinSize(v int32) *DescribeInstanceSpecResponseBody {
	s.DataDiskMinSize = &v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetInstanceSpecs(v *DescribeInstanceSpecResponseBodyInstanceSpecs) *DescribeInstanceSpecResponseBody {
	s.InstanceSpecs = v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetRequestId(v string) *DescribeInstanceSpecResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceSpecResponseBody) SetSystemDiskMaxSize(v int32) *DescribeInstanceSpecResponseBody {
	s.SystemDiskMaxSize = &v
	return s
}

type DescribeInstanceSpecResponseBodyInstanceSpecs struct {
	InstanceSpec []*DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty" type:"Repeated"`
}

func (s DescribeInstanceSpecResponseBodyInstanceSpecs) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecResponseBodyInstanceSpecs) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecResponseBodyInstanceSpecs) SetInstanceSpec(v []*DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) *DescribeInstanceSpecResponseBodyInstanceSpecs {
	s.InstanceSpec = v
	return s
}

type DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec struct {
	// The number of CPU cores.
	//
	// example:
	//
	// 1
	Core *string `json:"Core,omitempty" xml:"Core,omitempty"`
	// The display name of the instance type.
	//
	// example:
	//
	// Computational 1C2G
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The type of the instance.
	//
	// example:
	//
	// ens.sn1.stiny
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The memory size. Unit: MB.
	//
	// example:
	//
	// 2048
	Memory *string `json:"Memory,omitempty" xml:"Memory,omitempty"`
}

func (s DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) SetCore(v string) *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec {
	s.Core = &v
	return s
}

func (s *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) SetDisplayName(v string) *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec {
	s.DisplayName = &v
	return s
}

func (s *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) SetInstanceType(v string) *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec) SetMemory(v string) *DescribeInstanceSpecResponseBodyInstanceSpecsInstanceSpec {
	s.Memory = &v
	return s
}

type DescribeInstanceSpecResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceSpecResponse) SetHeaders(v map[string]*string) *DescribeInstanceSpecResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceSpecResponse) SetStatusCode(v int32) *DescribeInstanceSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceSpecResponse) SetBody(v *DescribeInstanceSpecResponseBody) *DescribeInstanceSpecResponse {
	s.Body = v
	return s
}

type DescribeInstanceTypesResponseBody struct {
	// The status code. If the request is successful, 0 is returned. If the request fails, a non-zero error code is returned.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// Details about the instance types.
	InstanceTypes *DescribeInstanceTypesResponseBodyInstanceTypes `json:"InstanceTypes,omitempty" xml:"InstanceTypes,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// D452D190-BADF-5D09-910D-599B96D42AAA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInstanceTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponseBody) SetCode(v int32) *DescribeInstanceTypesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceTypesResponseBody) SetInstanceTypes(v *DescribeInstanceTypesResponseBodyInstanceTypes) *DescribeInstanceTypesResponseBody {
	s.InstanceTypes = v
	return s
}

func (s *DescribeInstanceTypesResponseBody) SetRequestId(v string) *DescribeInstanceTypesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInstanceTypesResponseBodyInstanceTypes struct {
	InstanceType []*DescribeInstanceTypesResponseBodyInstanceTypesInstanceType `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" type:"Repeated"`
}

func (s DescribeInstanceTypesResponseBodyInstanceTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponseBodyInstanceTypes) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypes) SetInstanceType(v []*DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) *DescribeInstanceTypesResponseBodyInstanceTypes {
	s.InstanceType = v
	return s
}

type DescribeInstanceTypesResponseBodyInstanceTypesInstanceType struct {
	// The number of vCPUs.
	//
	// example:
	//
	// 2
	CpuCoreCount *int32 `json:"CpuCoreCount,omitempty" xml:"CpuCoreCount,omitempty"`
	// This parameter is unavailable.
	//
	// example:
	//
	// This parameter is not needed temporarily.
	InstanceTypeId *string `json:"InstanceTypeId,omitempty" xml:"InstanceTypeId,omitempty"`
	// The name of the instance type.
	//
	// example:
	//
	// ens.xxx.small
	InstanceTypeName *string `json:"InstanceTypeName,omitempty" xml:"InstanceTypeName,omitempty"`
	// The memory size. Unit: MB.
	//
	// example:
	//
	// 8192
	MemorySize *int32 `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
}

func (s DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) SetCpuCoreCount(v int32) *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType {
	s.CpuCoreCount = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) SetInstanceTypeId(v string) *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType {
	s.InstanceTypeId = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) SetInstanceTypeName(v string) *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType {
	s.InstanceTypeName = &v
	return s
}

func (s *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType) SetMemorySize(v int32) *DescribeInstanceTypesResponseBodyInstanceTypesInstanceType {
	s.MemorySize = &v
	return s
}

type DescribeInstanceTypesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceTypesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceTypesResponse) SetHeaders(v map[string]*string) *DescribeInstanceTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceTypesResponse) SetStatusCode(v int32) *DescribeInstanceTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceTypesResponse) SetBody(v *DescribeInstanceTypesResponseBody) *DescribeInstanceTypesResponse {
	s.Body = v
	return s
}

type DescribeInstanceVncUrlRequest struct {
	// The ID of the instance
	//
	// This parameter is required.
	//
	// example:
	//
	// i-5bp1hzoinajzkh91h****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceVncUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlRequest) SetInstanceId(v string) *DescribeInstanceVncUrlRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceVncUrlResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The URL of the VNC management terminal.
	//
	// example:
	//
	// wss%3A%2F%2Fhz01-vncproxy.aliyun.com%2Fwebsockify%2F%3Fs%3DDvh%252FIA%252BYc73gWO48cBx2gBxUDVzaAnSKr74pq30mzqUYgeUMcB%252FbkNixDxdEA996
	VncUrl *string `json:"VncUrl,omitempty" xml:"VncUrl,omitempty"`
}

func (s DescribeInstanceVncUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlResponseBody) SetRequestId(v string) *DescribeInstanceVncUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceVncUrlResponseBody) SetVncUrl(v string) *DescribeInstanceVncUrlResponseBody {
	s.VncUrl = &v
	return s
}

type DescribeInstanceVncUrlResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstanceVncUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstanceVncUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceVncUrlResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceVncUrlResponse) SetHeaders(v map[string]*string) *DescribeInstanceVncUrlResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceVncUrlResponse) SetStatusCode(v int32) *DescribeInstanceVncUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceVncUrlResponse) SetBody(v *DescribeInstanceVncUrlResponseBody) *DescribeInstanceVncUrlResponse {
	s.Body = v
	return s
}

type DescribeInstancesRequest struct {
	// The region ID.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The IDs of the regions. The value is a JSON array that consists of up to 100 IDs. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// ["cn-suzhou-telecom","cn-chengdu-telecom"]
	EnsRegionIds *string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty"`
	// The ID of the edge service. You can use the ID to query information about the instances that are created in the edge service.
	//
	// example:
	//
	// ens-20190730202316s****
	EnsServiceId *string `json:"EnsServiceId,omitempty" xml:"EnsServiceId,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_alibase_****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-5iqczfxps7csjrxeca****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The IDs of the instances. The value is a JSON array that consists of up to 100 IDs. Separate IDs with commas (,).
	//
	// example:
	//
	// ["i-5iqczfxps7csjrxeca07****", "i-5iqczfxps7csjrxeca07****"]]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// TestName
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The condition that you want to use to filter instances by category. Valid values:
	//
	// 	- EnsInstance: ENS instances that you purchase.
	//
	// 	- EnsService: ENS instances that belong to edge services.
	//
	// 	- BuildMachine: ENS instances that are configured with image builders.
	//
	// 	- EnsPostPaidInstance: Pay-as-you-go ENS instances that you purchase.
	//
	// example:
	//
	// EnsService
	InstanceResourceType *string `json:"InstanceResourceType,omitempty" xml:"InstanceResourceType,omitempty"`
	// The instance type.
	//
	// example:
	//
	// ens.se1.tiny
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The internal IP address of the instance.
	//
	// example:
	//
	// 47.100.XX.XX
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-2zeuphj08tt7q3brd****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The method that you want to use to sort instances. The value of this parameter is in the JSON format.
	//
	// You can sort instances by name, expiration time, node ID, or creation time. You can specify one or more methods.
	//
	// example:
	//
	// {"InstanceNameSort":"asc","ExpireTimeSort":"asc","CreationTimeSort":"desc"}}
	OrderByParams *string `json:"OrderByParams,omitempty" xml:"OrderByParams,omitempty"`
	// The page number. Pages start from page **1**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. The maximum value is **100**.
	//
	// Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The keyword that you use to query the logs of the service. You can specify the values of parameters such as **ip**, **InstanceName**, and **InstanceId*	- as the keyword.
	//
	// example:
	//
	// Joshua
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-5kyicq2kfcapxrdds6tar7jqb
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The status of the service. Valid values.
	ServiceStatus []*string `json:"ServiceStatus,omitempty" xml:"ServiceStatus,omitempty" type:"Repeated"`
	// The status of the instance. Valid values:
	//
	// 	- Running
	//
	// 	- Stopped
	//
	// 	- Expired
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags that are added to the resource. This operation does not return tag information. You can call this operation in combination with the tag-related operations.
	Tags []*DescribeInstancesRequestTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-2zeh0r1pabwtg6wcs****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequest) SetEnsRegionId(v string) *DescribeInstancesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeInstancesRequest) SetEnsRegionIds(v string) *DescribeInstancesRequest {
	s.EnsRegionIds = &v
	return s
}

func (s *DescribeInstancesRequest) SetEnsServiceId(v string) *DescribeInstancesRequest {
	s.EnsServiceId = &v
	return s
}

func (s *DescribeInstancesRequest) SetImageId(v string) *DescribeInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceId(v string) *DescribeInstancesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceIds(v string) *DescribeInstancesRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceName(v string) *DescribeInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceResourceType(v string) *DescribeInstancesRequest {
	s.InstanceResourceType = &v
	return s
}

func (s *DescribeInstancesRequest) SetInstanceType(v string) *DescribeInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstancesRequest) SetIntranetIp(v string) *DescribeInstancesRequest {
	s.IntranetIp = &v
	return s
}

func (s *DescribeInstancesRequest) SetNetworkId(v string) *DescribeInstancesRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeInstancesRequest) SetOrderByParams(v string) *DescribeInstancesRequest {
	s.OrderByParams = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageNumber(v int32) *DescribeInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesRequest) SetPageSize(v string) *DescribeInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesRequest) SetSearchKey(v string) *DescribeInstancesRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeInstancesRequest) SetSecurityGroupId(v string) *DescribeInstancesRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeInstancesRequest) SetServiceStatus(v []*string) *DescribeInstancesRequest {
	s.ServiceStatus = v
	return s
}

func (s *DescribeInstancesRequest) SetStatus(v string) *DescribeInstancesRequest {
	s.Status = &v
	return s
}

func (s *DescribeInstancesRequest) SetTags(v []*DescribeInstancesRequestTags) *DescribeInstancesRequest {
	s.Tags = v
	return s
}

func (s *DescribeInstancesRequest) SetVSwitchId(v string) *DescribeInstancesRequest {
	s.VSwitchId = &v
	return s
}

type DescribeInstancesRequestTags struct {
	// The key of the tag that are to add to the instance. Valid values: 1 to 20.
	//
	// example:
	//
	// tag
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value of the instance. Valid values: 1 to 20.
	//
	// example:
	//
	// 2
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeInstancesRequestTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesRequestTags) GoString() string {
	return s.String()
}

func (s *DescribeInstancesRequestTags) SetKey(v string) *DescribeInstancesRequestTags {
	s.Key = &v
	return s
}

func (s *DescribeInstancesRequestTags) SetValue(v string) *DescribeInstancesRequestTags {
	s.Value = &v
	return s
}

type DescribeInstancesShrinkRequest struct {
	// The region ID.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The IDs of the regions. The value is a JSON array that consists of up to 100 IDs. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// ["cn-suzhou-telecom","cn-chengdu-telecom"]
	EnsRegionIds *string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty"`
	// The ID of the edge service. You can use the ID to query information about the instances that are created in the edge service.
	//
	// example:
	//
	// ens-20190730202316s****
	EnsServiceId *string `json:"EnsServiceId,omitempty" xml:"EnsServiceId,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_alibase_****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-5iqczfxps7csjrxeca****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The IDs of the instances. The value is a JSON array that consists of up to 100 IDs. Separate IDs with commas (,).
	//
	// example:
	//
	// ["i-5iqczfxps7csjrxeca07****", "i-5iqczfxps7csjrxeca07****"]]
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// TestName
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The condition that you want to use to filter instances by category. Valid values:
	//
	// 	- EnsInstance: ENS instances that you purchase.
	//
	// 	- EnsService: ENS instances that belong to edge services.
	//
	// 	- BuildMachine: ENS instances that are configured with image builders.
	//
	// 	- EnsPostPaidInstance: Pay-as-you-go ENS instances that you purchase.
	//
	// example:
	//
	// EnsService
	InstanceResourceType *string `json:"InstanceResourceType,omitempty" xml:"InstanceResourceType,omitempty"`
	// The instance type.
	//
	// example:
	//
	// ens.se1.tiny
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The internal IP address of the instance.
	//
	// example:
	//
	// 47.100.XX.XX
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-2zeuphj08tt7q3brd****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The method that you want to use to sort instances. The value of this parameter is in the JSON format.
	//
	// You can sort instances by name, expiration time, node ID, or creation time. You can specify one or more methods.
	//
	// example:
	//
	// {"InstanceNameSort":"asc","ExpireTimeSort":"asc","CreationTimeSort":"desc"}}
	OrderByParams *string `json:"OrderByParams,omitempty" xml:"OrderByParams,omitempty"`
	// The page number. Pages start from page **1**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. The maximum value is **100**.
	//
	// Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The keyword that you use to query the logs of the service. You can specify the values of parameters such as **ip**, **InstanceName**, and **InstanceId*	- as the keyword.
	//
	// example:
	//
	// Joshua
	SearchKey *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-5kyicq2kfcapxrdds6tar7jqb
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The status of the service. Valid values.
	ServiceStatusShrink *string `json:"ServiceStatus,omitempty" xml:"ServiceStatus,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- Running
	//
	// 	- Stopped
	//
	// 	- Expired
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags that are added to the resource. This operation does not return tag information. You can call this operation in combination with the tag-related operations.
	TagsShrink *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-2zeh0r1pabwtg6wcs****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstancesShrinkRequest) SetEnsRegionId(v string) *DescribeInstancesShrinkRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetEnsRegionIds(v string) *DescribeInstancesShrinkRequest {
	s.EnsRegionIds = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetEnsServiceId(v string) *DescribeInstancesShrinkRequest {
	s.EnsServiceId = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetImageId(v string) *DescribeInstancesShrinkRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetInstanceId(v string) *DescribeInstancesShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetInstanceIds(v string) *DescribeInstancesShrinkRequest {
	s.InstanceIds = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetInstanceName(v string) *DescribeInstancesShrinkRequest {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetInstanceResourceType(v string) *DescribeInstancesShrinkRequest {
	s.InstanceResourceType = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetInstanceType(v string) *DescribeInstancesShrinkRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetIntranetIp(v string) *DescribeInstancesShrinkRequest {
	s.IntranetIp = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetNetworkId(v string) *DescribeInstancesShrinkRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetOrderByParams(v string) *DescribeInstancesShrinkRequest {
	s.OrderByParams = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetPageNumber(v int32) *DescribeInstancesShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetPageSize(v string) *DescribeInstancesShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetSearchKey(v string) *DescribeInstancesShrinkRequest {
	s.SearchKey = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetSecurityGroupId(v string) *DescribeInstancesShrinkRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetServiceStatusShrink(v string) *DescribeInstancesShrinkRequest {
	s.ServiceStatusShrink = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetStatus(v string) *DescribeInstancesShrinkRequest {
	s.Status = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetTagsShrink(v string) *DescribeInstancesShrinkRequest {
	s.TagsShrink = &v
	return s
}

func (s *DescribeInstancesShrinkRequest) SetVSwitchId(v string) *DescribeInstancesShrinkRequest {
	s.VSwitchId = &v
	return s
}

type DescribeInstancesResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned instance information. It is an array that consists of InstanceAttributesType data.
	Instances *DescribeInstancesResponseBodyInstances `json:"Instances,omitempty" xml:"Instances,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 60
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 2
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBody) SetCode(v int32) *DescribeInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetInstances(v *DescribeInstancesResponseBodyInstances) *DescribeInstancesResponseBody {
	s.Instances = v
	return s
}

func (s *DescribeInstancesResponseBody) SetPageNumber(v int32) *DescribeInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetPageSize(v int32) *DescribeInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetRequestId(v string) *DescribeInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstancesResponseBody) SetTotalCount(v int32) *DescribeInstancesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeInstancesResponseBodyInstances struct {
	Instance []*DescribeInstancesResponseBodyInstancesInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstances) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstances) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstances) SetInstance(v []*DescribeInstancesResponseBodyInstancesInstance) *DescribeInstancesResponseBodyInstances {
	s.Instance = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstance struct {
	// The automatic release time of the instance.
	//
	// example:
	//
	// 2023-06-28T14:38:52Z
	AutoReleaseTime *string `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	// The number of vCPUs.
	//
	// example:
	//
	// 2
	Cpu *string `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The time when the instance was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-07-26T06:40:43Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// Details of the data disk.
	DataDisk *DescribeInstancesResponseBodyInstancesInstanceDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Struct"`
	// The total size of the disk. Unit: MiB.
	//
	// example:
	//
	// 71680
	Disk *int32 `json:"Disk,omitempty" xml:"Disk,omitempty"`
	// The region ID of the instance.
	//
	// example:
	//
	// cn-hangzhou-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The expiration time. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2119-07-13T02:38:57Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The hostname of the instance.
	//
	// 	- The hostname cannot start or end with a period (.) or hyphen (-). It cannot contain consecutive periods (.) or hyphens (-).
	//
	// 	- For a Windows instance, the hostname must be 2 to 15 characters in length and can contain letters, digits, and hyphens (-). The hostname cannot contain periods (.) or contain only digits.
	//
	// 	- For an instance that runs another operating system such as Linux, the hostname must be 2 to 64 characters in length. You can use periods (.) to separate the hostname into multiple segments. Each segment can contain letters, digits, and hyphens (-).
	//
	// example:
	//
	// testHostName
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// m-****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The private IP addresses of the instances.
	InnerIpAddress *DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress `json:"InnerIpAddress,omitempty" xml:"InnerIpAddress,omitempty" type:"Struct"`
	// The ID of the instance.
	//
	// example:
	//
	// i-instanc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the instance.
	//
	// example:
	//
	// i-5itef0f28t17bcdw9deu6meub
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The category of the instance. Valid values:
	//
	// 	- EnsInstance: ENS instances that you purchase.
	//
	// 	- EnsService: ENS instances that belong to edge services.
	//
	// 	- BuildMachine: ENS instances that are configured with image builders.
	//
	// 	- EnsPostPaidInstance: pay-as-you-go ENS instances that you purchase.
	//
	// example:
	//
	// EnsService
	InstanceResourceType *string `json:"InstanceResourceType,omitempty" xml:"InstanceResourceType,omitempty"`
	// The instance family. Valid values:
	//
	// 	- x86_vm: x86-based computing instance.
	//
	// 	- x86_pm: x86-based physical machine.
	//
	// 	- x86_bmi: x86-based bare metal instance.
	//
	// 	- x86_bm: bare metal instance with the SmartNIC.
	//
	// 	- pc_bmi: heterogeneous bare metal instance.
	//
	// 	- pc_vm: heterogeneous virtual machine.
	//
	// 	- arm_bmi: Arm-based computing instance.
	//
	// example:
	//
	// x86_vm
	InstanceTypeFamily *string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	// The maximum outbound bandwidth. Unit: Mbit/s.
	//
	// example:
	//
	// 40
	InternetMaxBandwidthIn *int32 `json:"InternetMaxBandwidthIn,omitempty" xml:"InternetMaxBandwidthIn,omitempty"`
	// The minimum inbound bandwidth. Unit: Mbit/s.
	//
	// example:
	//
	// 100
	InternetMaxBandwidthOut *int32 `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	// The name of the SSH key pair.
	//
	// example:
	//
	// terraform-example
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The memory size. Unit: MB.
	//
	// example:
	//
	// 2048
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// Details of the network.
	NetworkAttributes *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes `json:"NetworkAttributes,omitempty" xml:"NetworkAttributes,omitempty" type:"Struct"`
	// The ENI attached to the instance.
	NetworkInterfaces *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfaces `json:"NetworkInterfaces,omitempty" xml:"NetworkInterfaces,omitempty" type:"Struct"`
	// The name of the image.
	//
	// example:
	//
	// centos 6.8 x86_64
	OSName *string `json:"OSName,omitempty" xml:"OSName,omitempty"`
	// Details of the private IP addresses.
	PrivateIpAddresses *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses `json:"PrivateIpAddresses,omitempty" xml:"PrivateIpAddresses,omitempty" type:"Struct"`
	// The public IP addresses of the instances.
	PublicIpAddress *DescribeInstancesResponseBodyInstancesInstancePublicIpAddress `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty" type:"Struct"`
	// Details of the public IP addresses.
	PublicIpAddresses *DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses `json:"PublicIpAddresses,omitempty" xml:"PublicIpAddresses,omitempty" type:"Struct"`
	// The IDs of the security groups.
	SecurityGroupIds *DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Struct"`
	// The ID of your Alibaba Cloud account.
	//
	// example:
	//
	// Deleting
	ServiceStatus *string `json:"ServiceStatus,omitempty" xml:"ServiceStatus,omitempty"`
	// The instance type.
	//
	// example:
	//
	// ens.sn1.stiny
	SpecName *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	// The bidding policy of the preemptible instance.
	//
	// example:
	//
	// NoSpot
	SpotStrategy *string `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	// The status of the instance. Valid values:
	//
	// 	- Running
	//
	// 	- Expired
	//
	// 	- Stopped
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Details of the system disk.
	SystemDisk *DescribeInstancesResponseBodyInstancesInstanceSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	// The tags of the instance.
	//
	// >  This operation does not return tag information. You can call this operation in combination with the tag-related operations.
	Tags *DescribeInstancesResponseBodyInstancesInstanceTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s DescribeInstancesResponseBodyInstancesInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstance) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetAutoReleaseTime(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.AutoReleaseTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetCpu(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.Cpu = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetCreationTime(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.CreationTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetDataDisk(v *DescribeInstancesResponseBodyInstancesInstanceDataDisk) *DescribeInstancesResponseBodyInstancesInstance {
	s.DataDisk = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetDisk(v int32) *DescribeInstancesResponseBodyInstancesInstance {
	s.Disk = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetEnsRegionId(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetExpiredTime(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetHostName(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.HostName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetImageId(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.ImageId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInnerIpAddress(v *DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress) *DescribeInstancesResponseBodyInstancesInstance {
	s.InnerIpAddress = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInstanceId(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.InstanceId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInstanceName(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.InstanceName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInstanceResourceType(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.InstanceResourceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInstanceTypeFamily(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInternetMaxBandwidthIn(v int32) *DescribeInstancesResponseBodyInstancesInstance {
	s.InternetMaxBandwidthIn = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetInternetMaxBandwidthOut(v int32) *DescribeInstancesResponseBodyInstancesInstance {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetKeyPairName(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.KeyPairName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetMemory(v int32) *DescribeInstancesResponseBodyInstancesInstance {
	s.Memory = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetNetworkAttributes(v *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) *DescribeInstancesResponseBodyInstancesInstance {
	s.NetworkAttributes = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetNetworkInterfaces(v *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfaces) *DescribeInstancesResponseBodyInstancesInstance {
	s.NetworkInterfaces = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetOSName(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.OSName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetPrivateIpAddresses(v *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses) *DescribeInstancesResponseBodyInstancesInstance {
	s.PrivateIpAddresses = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetPublicIpAddress(v *DescribeInstancesResponseBodyInstancesInstancePublicIpAddress) *DescribeInstancesResponseBodyInstancesInstance {
	s.PublicIpAddress = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetPublicIpAddresses(v *DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses) *DescribeInstancesResponseBodyInstancesInstance {
	s.PublicIpAddresses = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetSecurityGroupIds(v *DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds) *DescribeInstancesResponseBodyInstancesInstance {
	s.SecurityGroupIds = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetServiceStatus(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.ServiceStatus = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetSpecName(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.SpecName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetSpotStrategy(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetStatus(v string) *DescribeInstancesResponseBodyInstancesInstance {
	s.Status = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetSystemDisk(v *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) *DescribeInstancesResponseBodyInstancesInstance {
	s.SystemDisk = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstance) SetTags(v *DescribeInstancesResponseBodyInstancesInstanceTags) *DescribeInstancesResponseBodyInstancesInstance {
	s.Tags = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceDataDisk struct {
	DataDisk []*DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceDataDisk) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDisk) SetDataDisk(v []*DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) *DescribeInstancesResponseBodyInstancesInstanceDataDisk {
	s.DataDisk = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk struct {
	// The category of the cloud disk or local disk. Valid values:
	//
	// 	- **file**: local disk.
	//
	// 	- **pangu**: ultra disk.
	//
	// 	- **local_hdd**: local HDD.
	//
	// example:
	//
	// file
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The ID of the disk.
	//
	// example:
	//
	// d-5ip4c2dhmas0vjd5u1r****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The name of the disk.
	//
	// example:
	//
	// DiskName
	DiskName *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	// The size of the disk. Unit: GiB.
	//
	// example:
	//
	// 100
	DiskSize *int32 `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	// The KMS key ID used by the cloud drive.
	//
	// example:
	//
	// 0e478b7a-4262-4802-b8cb-00d3fxxxxx
	EncryptKeyId *string `json:"EncryptKeyId,omitempty" xml:"EncryptKeyId,omitempty"`
	// Specifies whether to encrypt the new system disk. Valid values:
	//
	// 	- **true**
	//
	// 	- **false*	- (default): no
	//
	// example:
	//
	// true
	Encrypted *bool `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	// The size of the disk. Unit: MiB.
	//
	// example:
	//
	// 51200
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The extended field of the disk category. Valid values:
	//
	// 	- **file**: local disk.
	//
	// 	- **pangu**: ultra disk.
	//
	// 	- **local_hdd**: local HDD.
	//
	// example:
	//
	// pangu
	DeviceType *string `json:"device_type,omitempty" xml:"device_type,omitempty"`
	// The type of the cloud disk or local disk. Valid values:
	//
	// **system**: system disk. **data**: data disk.
	//
	// example:
	//
	// system
	DiskType *string `json:"disk_type,omitempty" xml:"disk_type,omitempty"`
	// The name of the disk.
	//
	// example:
	//
	// name
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The size of the disk. Unit: MiB.
	//
	// example:
	//
	// 20480
	Storage *int32 `json:"storage,omitempty" xml:"storage,omitempty"`
	// The UUID of the disk.
	//
	// example:
	//
	// d-5itef1wtxj961mbff8xe9****
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetCategory(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Category = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetDiskId(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.DiskId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetDiskName(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.DiskName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetDiskSize(v int32) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.DiskSize = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetEncryptKeyId(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.EncryptKeyId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetEncrypted(v bool) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Encrypted = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetSize(v int32) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Size = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetDeviceType(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.DeviceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetDiskType(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.DiskType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetName(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Name = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetStorage(v int32) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Storage = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk) SetUuid(v string) *DescribeInstancesResponseBodyInstancesInstanceDataDiskDataDisk {
	s.Uuid = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress struct {
	IpAddress []*string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress) SetIpAddress(v []*string) *DescribeInstancesResponseBodyInstancesInstanceInnerIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes struct {
	// The ID of the network.
	//
	// example:
	//
	// n-2zeuphj08tt7q3brd****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// Details of the private IP addresses.
	PrivateIpAddress *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Struct"`
	// The vSwitch ID.
	//
	// example:
	//
	// vsw-2zeh0r1pabwtg6wcs****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) SetNetworkId(v string) *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes {
	s.NetworkId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) SetPrivateIpAddress(v *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress) *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes {
	s.PrivateIpAddress = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes) SetVSwitchId(v string) *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributes {
	s.VSwitchId = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress struct {
	IpAddress []*string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress) SetIpAddress(v []*string) *DescribeInstancesResponseBodyInstancesInstanceNetworkAttributesPrivateIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceNetworkInterfaces struct {
	NetworkInterfaces []*DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces `json:"NetworkInterfaces,omitempty" xml:"NetworkInterfaces,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfaces) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfaces) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfaces) SetNetworkInterfaces(v []*DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfaces {
	s.NetworkInterfaces = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces struct {
	// The IPv6 addresses of the ENI. This parameter has a value only when `AdditionalAttributes.N` is set to `NETWORK_PRIMARY_ENI_IP`.
	Ipv6Sets *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6Sets `json:"Ipv6Sets,omitempty" xml:"Ipv6Sets,omitempty" type:"Struct"`
	// The MAC address of the ENI.
	//
	// example:
	//
	// 00:16:3e:4f:5f:ca
	MacAddress *string `json:"MacAddress,omitempty" xml:"MacAddress,omitempty"`
	// The ID of the ENI.
	//
	// example:
	//
	// eni-0wlonoy6jo8532gfzuama****
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The primary IP address of the ENI.
	//
	// example:
	//
	// ***************
	PrimaryIpAddress *string `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
	// The private IP addresses of the ENI.
	PrivateIpSets *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSets `json:"PrivateIpSets,omitempty" xml:"PrivateIpSets,omitempty" type:"Struct"`
	// The type of the disk. Valid values:
	//
	// 	- system: system disk.
	//
	// 	- data: data disk.
	//
	// example:
	//
	// Secondary
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces) SetIpv6Sets(v *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6Sets) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces {
	s.Ipv6Sets = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces) SetMacAddress(v string) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces {
	s.MacAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces) SetNetworkInterfaceId(v string) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces) SetPrimaryIpAddress(v string) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces {
	s.PrimaryIpAddress = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces) SetPrivateIpSets(v *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSets) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces {
	s.PrivateIpSets = v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces) SetType(v string) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfaces {
	s.Type = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6Sets struct {
	Ipv6Set []*DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6SetsIpv6Set `json:"Ipv6Set,omitempty" xml:"Ipv6Set,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6Sets) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6Sets) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6Sets) SetIpv6Set(v []*DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6SetsIpv6Set) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6Sets {
	s.Ipv6Set = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6SetsIpv6Set struct {
	// IPv6 addresses N of the ENI. You can specify multiple IPv6 addresses. Valid values of N: 1 to 100.
	//
	// example:
	//
	// 2408:4005:396:3200:****:6609:821e:df7a
	Ipv6Address *string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6SetsIpv6Set) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6SetsIpv6Set) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6SetsIpv6Set) SetIpv6Address(v string) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesIpv6SetsIpv6Set {
	s.Ipv6Address = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSets struct {
	PrivateIpSet []*DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSetsPrivateIpSet `json:"PrivateIpSet,omitempty" xml:"PrivateIpSet,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSets) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSets) SetPrivateIpSet(v []*DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSetsPrivateIpSet) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSets {
	s.PrivateIpSet = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSetsPrivateIpSet struct {
	// Indicates whether the IP address is the primary private IP address. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Primary *bool `json:"Primary,omitempty" xml:"Primary,omitempty"`
	// The private IP address.
	//
	// >  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs. If you specify a private IP address, the number of instances must be 1. The private IP address takes effect only when the private IP address and the vSwitch ID are not empty.
	//
	// example:
	//
	// 10.75.66.***
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSetsPrivateIpSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSetsPrivateIpSet) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSetsPrivateIpSet) SetPrimary(v bool) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSetsPrivateIpSet {
	s.Primary = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSetsPrivateIpSet) SetPrivateIpAddress(v string) *DescribeInstancesResponseBodyInstancesInstanceNetworkInterfacesNetworkInterfacesPrivateIpSetsPrivateIpSet {
	s.PrivateIpAddress = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses struct {
	PrivateIpAddress []*DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses) SetPrivateIpAddress(v []*DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddresses {
	s.PrivateIpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress struct {
	// The gateway.
	//
	// example:
	//
	// 119.147.xx.xx
	GateWay *string `json:"GateWay,omitempty" xml:"GateWay,omitempty"`
	// The IP address.
	//
	// example:
	//
	// 119.147.xx.xx
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The ISP.
	//
	// example:
	//
	// cmcc
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) SetGateWay(v string) *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress {
	s.GateWay = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) SetIp(v string) *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress {
	s.Ip = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress) SetIsp(v string) *DescribeInstancesResponseBodyInstancesInstancePrivateIpAddressesPrivateIpAddress {
	s.Isp = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstancePublicIpAddress struct {
	IpAddress []*string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstancePublicIpAddress) SetIpAddress(v []*string) *DescribeInstancesResponseBodyInstancesInstancePublicIpAddress {
	s.IpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses struct {
	PublicIpAddress []*DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress `json:"PublicIpAddress,omitempty" xml:"PublicIpAddress,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses) SetPublicIpAddress(v []*DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) *DescribeInstancesResponseBodyInstancesInstancePublicIpAddresses {
	s.PublicIpAddress = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress struct {
	// The gateway.
	//
	// example:
	//
	// 119.147.xx.xx
	GateWay *string `json:"GateWay,omitempty" xml:"GateWay,omitempty"`
	// The IP address.
	//
	// example:
	//
	// 119.147.xx.xx
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The Internet service provider (ISP).
	//
	// example:
	//
	// unicom
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) SetGateWay(v string) *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress {
	s.GateWay = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) SetIp(v string) *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress {
	s.Ip = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress) SetIsp(v string) *DescribeInstancesResponseBodyInstancesInstancePublicIpAddressesPublicIpAddress {
	s.Isp = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds struct {
	SecurityGroupId []*string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds) SetSecurityGroupId(v []*string) *DescribeInstancesResponseBodyInstancesInstanceSecurityGroupIds {
	s.SecurityGroupId = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceSystemDisk struct {
	// The category of the cloud disk or local disk. Valid values:
	//
	// 	- **file**: local disk.
	//
	// 	- **pangu**: ultra disk.
	//
	// 	- **local_hdd**: local HDD.
	//
	// example:
	//
	// file
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The ID of the disk.
	//
	// example:
	//
	// d-5ip4c2dhmas0rn7rt0p9****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The name of the disk.
	//
	// example:
	//
	// DiskName
	DiskName *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	// The size of the disk. Unit: MiB.
	//
	// example:
	//
	// 51200
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The extended field of the disk category. Valid values:
	//
	// 	- **file**: local disk.
	//
	// 	- **pangu**: ultra disk.
	//
	// 	- **local_hdd**: local HDD.
	//
	// example:
	//
	// pangu
	DeviceType *string `json:"device_type,omitempty" xml:"device_type,omitempty"`
	// The type of the cloud disk or local disk. Valid values:
	//
	// 	- **system**: system disk.
	//
	// 	- **data**: data disk.
	//
	// example:
	//
	// system
	DiskType *string `json:"disk_type,omitempty" xml:"disk_type,omitempty"`
	// The name of the disk.
	//
	// example:
	//
	// DiskName
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The size of the disk. Unit: MiB.
	//
	// example:
	//
	// 20480
	Storage *int32 `json:"storage,omitempty" xml:"storage,omitempty"`
	// The UUID of the disk.
	//
	// example:
	//
	// d-5ip4c2dhmas0rn7rt0p96****
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetCategory(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.Category = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetDiskId(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.DiskId = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetDiskName(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.DiskName = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetSize(v int32) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.Size = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetDeviceType(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.DeviceType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetDiskType(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.DiskType = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetName(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.Name = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetStorage(v int32) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.Storage = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceSystemDisk) SetUuid(v string) *DescribeInstancesResponseBodyInstancesInstanceSystemDisk {
	s.Uuid = &v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceTags struct {
	Tags []*DescribeInstancesResponseBodyInstancesInstanceTagsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceTags) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceTags) SetTags(v []*DescribeInstancesResponseBodyInstancesInstanceTagsTags) *DescribeInstancesResponseBodyInstancesInstanceTags {
	s.Tags = v
	return s
}

type DescribeInstancesResponseBodyInstancesInstanceTagsTags struct {
	// The tag key.
	//
	// example:
	//
	// key1
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag value.
	//
	// example:
	//
	// value1
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeInstancesResponseBodyInstancesInstanceTagsTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponseBodyInstancesInstanceTagsTags) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponseBodyInstancesInstanceTagsTags) SetTagKey(v string) *DescribeInstancesResponseBodyInstancesInstanceTagsTags {
	s.TagKey = &v
	return s
}

func (s *DescribeInstancesResponseBodyInstancesInstanceTagsTags) SetTagValue(v string) *DescribeInstancesResponseBodyInstancesInstanceTagsTags {
	s.TagValue = &v
	return s
}

type DescribeInstancesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstancesResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstancesResponse) SetHeaders(v map[string]*string) *DescribeInstancesResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstancesResponse) SetStatusCode(v int32) *DescribeInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstancesResponse) SetBody(v *DescribeInstancesResponseBody) *DescribeInstancesResponse {
	s.Body = v
	return s
}

type DescribeKeyPairsRequest struct {
	// The ID of the key pair.
	//
	// example:
	//
	// ssh-50cynkq42sgj4ej1tn78t4***
	KeyPairId *string `json:"KeyPairId,omitempty" xml:"KeyPairId,omitempty"`
	// The name of the key pair. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain the following characters:
	//
	// 	- Digits
	//
	// 	- :
	//
	// 	- _
	//
	// 	- *
	//
	// You can specify only one name. By default, all key pairs are queried.
	//
	// example:
	//
	// TestKeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The page number of the returned page. Valid values: integers that are greater than 0. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values: integers that are greater than 0. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeKeyPairsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsRequest) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsRequest) SetKeyPairId(v string) *DescribeKeyPairsRequest {
	s.KeyPairId = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetKeyPairName(v string) *DescribeKeyPairsRequest {
	s.KeyPairName = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetPageNumber(v string) *DescribeKeyPairsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeKeyPairsRequest) SetPageSize(v string) *DescribeKeyPairsRequest {
	s.PageSize = &v
	return s
}

type DescribeKeyPairsResponseBody struct {
	// Details about the key pairs.
	KeyPairs *DescribeKeyPairsResponseBodyKeyPairs `json:"KeyPairs,omitempty" xml:"KeyPairs,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 37B52F33-6879-49D0-A39B-22966B01449E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of key pairs.
	//
	// example:
	//
	// 7
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeKeyPairsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseBody) SetKeyPairs(v *DescribeKeyPairsResponseBodyKeyPairs) *DescribeKeyPairsResponseBody {
	s.KeyPairs = v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetPageNumber(v int32) *DescribeKeyPairsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetPageSize(v int32) *DescribeKeyPairsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetRequestId(v string) *DescribeKeyPairsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeKeyPairsResponseBody) SetTotalCount(v int32) *DescribeKeyPairsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeKeyPairsResponseBodyKeyPairs struct {
	KeyPair []*DescribeKeyPairsResponseBodyKeyPairsKeyPair `json:"KeyPair,omitempty" xml:"KeyPair,omitempty" type:"Repeated"`
}

func (s DescribeKeyPairsResponseBodyKeyPairs) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseBodyKeyPairs) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseBodyKeyPairs) SetKeyPair(v []*DescribeKeyPairsResponseBodyKeyPairsKeyPair) *DescribeKeyPairsResponseBodyKeyPairs {
	s.KeyPair = v
	return s
}

type DescribeKeyPairsResponseBodyKeyPairsKeyPair struct {
	// The time when the key pair was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-04-26T15:38:27Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The fingerprint of the key pair.
	//
	// example:
	//
	// fdaf8ff7a756ef843814fc****
	KeyPairFingerPrint *string `json:"KeyPairFingerPrint,omitempty" xml:"KeyPairFingerPrint,omitempty"`
	// The ID of the key pair.
	//
	// example:
	//
	// ssh-50cynkq42sgj4ej1tn78t4***
	KeyPairId *string `json:"KeyPairId,omitempty" xml:"KeyPairId,omitempty"`
	// The name of the SSH key pair.
	//
	// example:
	//
	// TestKeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
}

func (s DescribeKeyPairsResponseBodyKeyPairsKeyPair) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponseBodyKeyPairsKeyPair) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponseBodyKeyPairsKeyPair) SetCreationTime(v string) *DescribeKeyPairsResponseBodyKeyPairsKeyPair {
	s.CreationTime = &v
	return s
}

func (s *DescribeKeyPairsResponseBodyKeyPairsKeyPair) SetKeyPairFingerPrint(v string) *DescribeKeyPairsResponseBodyKeyPairsKeyPair {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *DescribeKeyPairsResponseBodyKeyPairsKeyPair) SetKeyPairId(v string) *DescribeKeyPairsResponseBodyKeyPairsKeyPair {
	s.KeyPairId = &v
	return s
}

func (s *DescribeKeyPairsResponseBodyKeyPairsKeyPair) SetKeyPairName(v string) *DescribeKeyPairsResponseBodyKeyPairsKeyPair {
	s.KeyPairName = &v
	return s
}

type DescribeKeyPairsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeKeyPairsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeKeyPairsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeKeyPairsResponse) GoString() string {
	return s.String()
}

func (s *DescribeKeyPairsResponse) SetHeaders(v map[string]*string) *DescribeKeyPairsResponse {
	s.Headers = v
	return s
}

func (s *DescribeKeyPairsResponse) SetStatusCode(v int32) *DescribeKeyPairsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeKeyPairsResponse) SetBody(v *DescribeKeyPairsResponseBody) *DescribeKeyPairsResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerAttributeRequest struct {
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5rcvo1n1t3hykfhhjwjgq****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DescribeLoadBalancerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerAttributeRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerAttributeResponseBody struct {
	// The IP address that the Edge Load Balancer (ELB) instance uses to provide services.
	//
	// example:
	//
	// 192.168XX.XX
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// The IP version of the ELB instance. Valid values: ipv4 and ipv6.
	//
	// example:
	//
	// ipv4
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	// The list of backend servers.
	BackendServers []*DescribeLoadBalancerAttributeResponseBodyBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Repeated"`
	// The peak bandwidth of the ELB. The default value is -1, which indicates that the bandwidth is unlimited.
	//
	// example:
	//
	// -1
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The time when the ELB instance was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-05-21T12:22:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The time when the ELB instance was disabled.
	//
	// example:
	//
	// 2020-05-21T12:22:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-chengdu-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The frontend ports that are used by the ELB instance.
	ListenerPorts []*string `json:"ListenerPorts,omitempty" xml:"ListenerPorts,omitempty" type:"Repeated"`
	// The frontend ports and protocols that are used by the ELB instance.
	ListenerPortsAndProtocols []*DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols `json:"ListenerPortsAndProtocols,omitempty" xml:"ListenerPortsAndProtocols,omitempty" type:"Repeated"`
	// The ID of the ELB instance.
	//
	// example:
	//
	// lb-5rcvo1n1t3hykfhhjwjgqp****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The name of the ELB instance.
	//
	// example:
	//
	// example
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	// The specifications of the ELB instance.
	//
	// example:
	//
	// elb.s2.medium
	LoadBalancerSpec *string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty"`
	// The status of the ELB instance. Valid values:
	//
	// 	- **Active*	- (default): The listener for the instance can forward the received traffic based on the rule.
	//
	// 	- **InActive**: The listener for the instance does not forward the received traffic.
	//
	// example:
	//
	// Active
	LoadBalancerStatus *string `json:"LoadBalancerStatus,omitempty" xml:"LoadBalancerStatus,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-5rwbi3g9zvgxcsiufwhw8****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The billing method. Valid values:
	//
	// 	- **PrePaid**: subscription.
	//
	// 	- **PostPaid**: pay-as-you-go. Only this billing method is supported.
	//
	// example:
	//
	// PostPaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5s78m2pdr9osa0j64bn78****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeLoadBalancerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetAddress(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.Address = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetAddressIPVersion(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.AddressIPVersion = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetBackendServers(v []*DescribeLoadBalancerAttributeResponseBodyBackendServers) *DescribeLoadBalancerAttributeResponseBody {
	s.BackendServers = v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetBandwidth(v int32) *DescribeLoadBalancerAttributeResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetCreateTime(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetEndTime(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetEnsRegionId(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetListenerPorts(v []*string) *DescribeLoadBalancerAttributeResponseBody {
	s.ListenerPorts = v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetListenerPortsAndProtocols(v []*DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) *DescribeLoadBalancerAttributeResponseBody {
	s.ListenerPortsAndProtocols = v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetLoadBalancerId(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetLoadBalancerName(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.LoadBalancerName = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetLoadBalancerSpec(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.LoadBalancerSpec = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetLoadBalancerStatus(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.LoadBalancerStatus = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetNetworkId(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.NetworkId = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetPayType(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.PayType = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetRequestId(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBody) SetVSwitchId(v string) *DescribeLoadBalancerAttributeResponseBody {
	s.VSwitchId = &v
	return s
}

type DescribeLoadBalancerAttributeResponseBodyBackendServers struct {
	// The IP address of the backend server.
	//
	// example:
	//
	// 192.168.XX.XX
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The port that is used by the backend server.
	//
	// example:
	//
	// 0
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the backend server.
	//
	// example:
	//
	// i-5vb5h5njxiuhn48a****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	// The type of backend server.
	//
	// example:
	//
	// ens
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The weight of the backend server.
	//
	// example:
	//
	// 100
	Weight *int32 `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s DescribeLoadBalancerAttributeResponseBodyBackendServers) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerAttributeResponseBodyBackendServers) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerAttributeResponseBodyBackendServers) SetIp(v string) *DescribeLoadBalancerAttributeResponseBodyBackendServers {
	s.Ip = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyBackendServers) SetPort(v string) *DescribeLoadBalancerAttributeResponseBodyBackendServers {
	s.Port = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyBackendServers) SetServerId(v string) *DescribeLoadBalancerAttributeResponseBodyBackendServers {
	s.ServerId = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyBackendServers) SetType(v string) *DescribeLoadBalancerAttributeResponseBodyBackendServers {
	s.Type = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyBackendServers) SetWeight(v int32) *DescribeLoadBalancerAttributeResponseBodyBackendServers {
	s.Weight = &v
	return s
}

type DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols struct {
	// The backend port that is used by the ELB instance. Valid values: **1*	- to **65535**.
	//
	// example:
	//
	// 6000
	BackendServerPort *int32 `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	// The description of the listener.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The destination listening port to which requests are forwarded.
	//
	// example:
	//
	// 0
	ForwardPort *int32 `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	// Indicates whether the listener is enabled.
	//
	// example:
	//
	// off
	ListenerForward *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	// The listener port of the instance.
	//
	// example:
	//
	// 8080
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The listener protocol of the instance.
	//
	// example:
	//
	// tcp
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
}

func (s DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetBackendServerPort(v int32) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.BackendServerPort = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetDescription(v string) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetForwardPort(v int32) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.ForwardPort = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetListenerForward(v string) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.ListenerForward = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetListenerPort(v int32) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols) SetListenerProtocol(v string) *DescribeLoadBalancerAttributeResponseBodyListenerPortsAndProtocols {
	s.ListenerProtocol = &v
	return s
}

type DescribeLoadBalancerAttributeResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoadBalancerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoadBalancerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerAttributeResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerAttributeResponse) SetStatusCode(v int32) *DescribeLoadBalancerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerAttributeResponse) SetBody(v *DescribeLoadBalancerAttributeResponseBody) *DescribeLoadBalancerAttributeResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerHTTPListenerAttributeRequest struct {
	// The listener port that you want to query. Valid values: **1 to 65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8080
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5snthcyu1x10g7tywj7iu****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DescribeLoadBalancerHTTPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPListenerAttributeRequest) SetListenerPort(v int32) *DescribeLoadBalancerHTTPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerHTTPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerHTTPListenerAttributeResponseBody struct {
	// The backend port that is used by the ELB instance. Valid values: **1*	- to **65535**.
	//
	// example:
	//
	// 8080
	BackendServerPort *int32 `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	// The peak bandwidth of the Edge Load Balancer (ELB) instance. The default value is -1, which indicates that the bandwidth is not limited.
	//
	// example:
	//
	// -1
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The description of the listener. The description must be **1*	- to **80*	- characters in length.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// example:
	//
	// abc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The listener port that is used to redirect HTTP requests to HTTPS.
	//
	// example:
	//
	// 10002
	ForwardPort *int32 `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	// Indicates whether the health check feature is enabled. Valid values:
	//
	// 	- **on**
	//
	// 	- **off**
	//
	// example:
	//
	// on
	HealthCheck *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// 5000
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The domain name that is used for health checks.
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// www.example.com
	HealthCheckDomain *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	// The HTTP status codes for a successful health check. Valid values:
	//
	// 	- **http_2xx*	- (default)
	//
	// 	- **http_3xx**.
	//
	// 	- **http_4xx**
	//
	// 	- **http_5xx**
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// http_2xx
	HealthCheckHttpCode *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Unit: seconds.
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// 5
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The health check method used in HTTP health checks. Valid values:
	//
	// 	- **head**: requests the head of the page.
	//
	// 	- **get**: requests the specified part of the page and returns the entity body.
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// head
	HealthCheckMethod *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	// The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// 	- If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.
	//
	// example:
	//
	// 10
	HealthCheckTimeout *int32 `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	// The URI used for health checks. The URI must be **1*	- to **80*	- characters in length.
	//
	// >
	//
	// 	- A URL must start with a forward slash (`/`) but cannot contain only forward slashes (`/`).
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// /checkpreload.htm
	HealthCheckURI *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// 3
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The timeout period for idle connections. Default value: 15. Valid values: **1*	- to **60**. Unit: seconds.
	//
	// >  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, ELB establishes a new connection.
	//
	// example:
	//
	// 15
	IdleTimeout *int32 `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// Indicates whether HTTP-to-HTTPS redirection is enabled. Valid values:
	//
	// 	- **on**: HTTP-to-HTTPS redirection is enabled.
	//
	// 	- **off*	- (default)
	//
	// example:
	//
	// off
	ListenerForward *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	// The listener port.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The timeout period of requests. Default value: 60. Valid values: **1*	- to **180**. Unit: seconds.
	//
	// >  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.
	//
	// example:
	//
	// 60
	RequestTimeout *int32 `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	// The routing algorithm. Valid values:
	//
	// 	- **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
	//
	// 	- **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The ID of the server certificate.
	//
	// example:
	//
	// 6027667
	ServerCertificateId *string `json:"ServerCertificateId,omitempty" xml:"ServerCertificateId,omitempty"`
	// The status of the listener. Valid values:
	//
	// 	- **Running**
	//
	// 	- **Stopped**
	//
	// 	- **Starting**
	//
	// 	- **Configuring**
	//
	// 	- **Stopping**
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// 3
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
	// Indicates whether the X-Forwarded-For header is used to obtain the real IP address of the client. Valid values:
	//
	// 	- **on*	- (default)
	//
	// 	- **off**
	//
	// example:
	//
	// on
	XForwardedFor *string `json:"XForwardedFor,omitempty" xml:"XForwardedFor,omitempty"`
}

func (s DescribeLoadBalancerHTTPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetBackendServerPort(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.BackendServerPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetBandwidth(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetDescription(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetForwardPort(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.ForwardPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheck(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheck = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckConnectPort(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckDomain(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckDomain = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckHttpCode(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckInterval(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckInterval = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckMethod(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckMethod = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckTimeout(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthCheckURI(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthCheckURI = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetHealthyThreshold(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.HealthyThreshold = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetIdleTimeout(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.IdleTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetListenerForward(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.ListenerForward = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetListenerPort(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetRequestId(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetRequestTimeout(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.RequestTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetScheduler(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.Scheduler = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetServerCertificateId(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.ServerCertificateId = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetStatus(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetUnhealthyThreshold(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.UnhealthyThreshold = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponseBody) SetXForwardedFor(v string) *DescribeLoadBalancerHTTPListenerAttributeResponseBody {
	s.XForwardedFor = &v
	return s
}

type DescribeLoadBalancerHTTPListenerAttributeResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoadBalancerHTTPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoadBalancerHTTPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerHTTPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponse) SetStatusCode(v int32) *DescribeLoadBalancerHTTPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerHTTPListenerAttributeResponse) SetBody(v *DescribeLoadBalancerHTTPListenerAttributeResponseBody) *DescribeLoadBalancerHTTPListenerAttributeResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerHTTPSListenerAttributeRequest struct {
	// The listening port that you want to query. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 443
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5qoxu2rsr0ytanpn4r3i****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DescribeLoadBalancerHTTPSListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPSListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeRequest) SetListenerPort(v int32) *DescribeLoadBalancerHTTPSListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerHTTPSListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerHTTPSListenerAttributeResponseBody struct {
	// The backend port that is used by the ELB instance. Valid values: **1*	- to **65535**.
	//
	// example:
	//
	// 8080
	BackendServerPort *int32 `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	// The peak bandwidth of the Edge Load Balancer (ELB). The default value is -1, which indicates that the bandwidth is not limited.
	//
	// example:
	//
	// 50
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The description of the listener. The description must be **1*	- to **80*	- characters in length.
	//
	// example:
	//
	// abc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The listener port that is used to redirect HTTP requests to HTTPS.
	//
	// example:
	//
	// 0
	ForwardPort *int32 `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	// Indicates whether the health check feature is enabled. Valid values:
	//
	// 	- **on**
	//
	// 	- **off**
	//
	// example:
	//
	// on
	HealthCheck *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If an empty string is returned for this parameter, the port specified by BackendServerPort is used for health checks.
	//
	// >  This parameter is returned only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// 9902
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The domain name that is used for health checks.
	//
	// >  This parameter is returned only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// www.test.com
	HealthCheckDomain *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	// The HTTP status code for a successful health check. Valid values:
	//
	// 	- **http_2xx*	- (default)
	//
	// 	- **http_3xx**.
	//
	// 	- **http_4xx**
	//
	// 	- **http_5xx**
	//
	// >  This parameter is returned only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// http_2xx
	HealthCheckHttpCode *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Unit: seconds.
	//
	// >  This parameter is returned only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// 5
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The health check method used in HTTP health checks. Valid values:
	//
	// 	- **head**: requests the head of the page.
	//
	// 	- **get**: requests the specified part of the page and returns the entity body.
	//
	// >  This parameter is returned only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// head
	HealthCheckMethod *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	// The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// 	- If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.
	//
	// example:
	//
	// 5
	HealthCheckTimeout *int32 `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	// The URI that is used for health checks. The URI must be **1*	- to **80*	- characters in length.
	//
	// 	- The URL must start with `/` and contain characters other than `/`.
	//
	// 	- This parameter is returned only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// /checkpreload.htm
	HealthCheckURI *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter is returned only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// 3
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The timeout period for idle connections. Default value: 15. Valid values: **1*	- to **60**. Unit: seconds.
	//
	// >  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, CLB establishes a new connection.
	//
	// example:
	//
	// 15
	IdleTimeout *int32 `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// Indicates whether HTTP-to-HTTPS redirection is enabled. Valid values:
	//
	// 	- on
	//
	// 	- off
	//
	// example:
	//
	// off
	ListenerForward *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	// The frontend port that is used by the ELB instance. Valid values: **1*	- to **65535**.
	//
	// example:
	//
	// 8080
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The timeout period of requests. Default value: 60. Valid values: **1*	- to **180**. Unit: seconds.
	//
	// >  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.
	//
	// example:
	//
	// 60
	RequestTimeout *int32 `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	// The routing algorithm. Valid values:
	//
	// 	- **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
	//
	// 	- **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The ID of the server certificate.
	//
	// example:
	//
	// 60276**
	ServerCertificateId *string `json:"ServerCertificateId,omitempty" xml:"ServerCertificateId,omitempty"`
	// The status of the listener. Valid values:
	//
	// 	- **Running**
	//
	// 	- **Stopped**
	//
	// 	- **Starting**
	//
	// 	- **Configuring**
	//
	// 	- **Stopping**
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter is returned only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// 3
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s DescribeLoadBalancerHTTPSListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPSListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetBackendServerPort(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.BackendServerPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetBandwidth(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetDescription(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetForwardPort(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.ForwardPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheck(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheck = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckConnectPort(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckDomain(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckDomain = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckHttpCode(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckInterval(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckInterval = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckMethod(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckMethod = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckTimeout(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthCheckURI(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthCheckURI = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetHealthyThreshold(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.HealthyThreshold = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetIdleTimeout(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.IdleTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetListenerForward(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.ListenerForward = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetListenerPort(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetRequestId(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetRequestTimeout(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.RequestTimeout = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetScheduler(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.Scheduler = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetServerCertificateId(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.ServerCertificateId = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetStatus(v string) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) SetUnhealthyThreshold(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponseBody {
	s.UnhealthyThreshold = &v
	return s
}

type DescribeLoadBalancerHTTPSListenerAttributeResponse struct {
	Headers    map[string]*string                                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoadBalancerHTTPSListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoadBalancerHTTPSListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerHTTPSListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerHTTPSListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponse) SetStatusCode(v int32) *DescribeLoadBalancerHTTPSListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerHTTPSListenerAttributeResponse) SetBody(v *DescribeLoadBalancerHTTPSListenerAttributeResponseBody) *DescribeLoadBalancerHTTPSListenerAttributeResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerListenMonitorRequest struct {
	// The end of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2024-01-30 08:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5q73cv04zeyh43lh74lp4****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The network protocol, such as tcp or udp.
	//
	// example:
	//
	// tcp
	Proto *string `json:"Proto,omitempty" xml:"Proto,omitempty"`
	// The beginning of the time range to query.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2024-01-15 16:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The virtual IP address (VIP) port of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// 80
	VPort *string `json:"VPort,omitempty" xml:"VPort,omitempty"`
}

func (s DescribeLoadBalancerListenMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerListenMonitorRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerListenMonitorRequest) SetEndTime(v string) *DescribeLoadBalancerListenMonitorRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerListenMonitorRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorRequest) SetProto(v string) *DescribeLoadBalancerListenMonitorRequest {
	s.Proto = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorRequest) SetStartTime(v string) *DescribeLoadBalancerListenMonitorRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorRequest) SetVPort(v string) *DescribeLoadBalancerListenMonitorRequest {
	s.VPort = &v
	return s
}

type DescribeLoadBalancerListenMonitorResponseBody struct {
	// The TCP/UDP monitoring data of the ELB instance.
	LoadBalancerMonitorListenData []*DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData `json:"LoadBalancerMonitorListenData,omitempty" xml:"LoadBalancerMonitorListenData,omitempty" type:"Repeated"`
	// Id of the request.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLoadBalancerListenMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerListenMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerListenMonitorResponseBody) SetLoadBalancerMonitorListenData(v []*DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) *DescribeLoadBalancerListenMonitorResponseBody {
	s.LoadBalancerMonitorListenData = v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBody) SetRequestId(v string) *DescribeLoadBalancerListenMonitorResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData struct {
	// The number of active connections.
	//
	// example:
	//
	// 80285
	ActConns *string `json:"ActConns,omitempty" xml:"ActConns,omitempty"`
	// The business time.
	//
	// example:
	//
	// 2024-01-15 16:03:00
	BizTime *string `json:"BizTime,omitempty" xml:"BizTime,omitempty"`
	// The number of new connections.
	//
	// example:
	//
	// 37150
	Conns *string `json:"Conns,omitempty" xml:"Conns,omitempty"`
	// The number of dropped connections.
	//
	// example:
	//
	// 10
	DropConns *string `json:"DropConns,omitempty" xml:"DropConns,omitempty"`
	// The ID of the node to which the ELB instance belongs.
	//
	// example:
	//
	// cn-dongguan-9
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The number of inactive connections.
	//
	// example:
	//
	// 16322
	InActConns *string `json:"InActConns,omitempty" xml:"InActConns,omitempty"`
	// The inbound traffic.
	//
	// example:
	//
	// 67532
	InBytes *string `json:"InBytes,omitempty" xml:"InBytes,omitempty"`
	// The dropped inbound traffic.
	//
	// example:
	//
	// 324
	InDropBytes *string `json:"InDropBytes,omitempty" xml:"InDropBytes,omitempty"`
	// The number of dropped inbound packets.
	//
	// example:
	//
	// 27
	InDropPkts *string `json:"InDropPkts,omitempty" xml:"InDropPkts,omitempty"`
	// The number of inbound packets.
	//
	// example:
	//
	// 12
	InPkts *string `json:"InPkts,omitempty" xml:"InPkts,omitempty"`
	// The number of unavailable servers that are attached to the monitored ELB instance.
	//
	// example:
	//
	// 0
	InValidRsNum *string `json:"InValidRsNum,omitempty" xml:"InValidRsNum,omitempty"`
	// The ID of the ELB instance.
	//
	// example:
	//
	// lb-5q73cv04zeyh43lh74lp4****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The outbound traffic.
	//
	// example:
	//
	// 5155487
	OutBytes *string `json:"OutBytes,omitempty" xml:"OutBytes,omitempty"`
	// The dropped outbound traffic.
	//
	// example:
	//
	// 0
	OutDropBytes *string `json:"OutDropBytes,omitempty" xml:"OutDropBytes,omitempty"`
	// The number of dropped outbound packets.
	//
	// example:
	//
	// 76
	OutDropPkts *string `json:"OutDropPkts,omitempty" xml:"OutDropPkts,omitempty"`
	// The number of outbound packets.
	//
	// example:
	//
	// 34
	OutPkts *string `json:"OutPkts,omitempty" xml:"OutPkts,omitempty"`
	// The network protocol.
	//
	// example:
	//
	// tcp
	Proto *string `json:"Proto,omitempty" xml:"Proto,omitempty"`
	// The VIP port of the ELB instance.
	//
	// example:
	//
	// 80
	VPort *string `json:"VPort,omitempty" xml:"VPort,omitempty"`
	// The number of available servers that are attached to the monitored ELB instance.
	//
	// example:
	//
	// 2
	ValidRsNum *string `json:"ValidRsNum,omitempty" xml:"ValidRsNum,omitempty"`
	// The VIP of the instance.
	//
	// example:
	//
	// 10.8.*.*
	Vip *string `json:"Vip,omitempty" xml:"Vip,omitempty"`
	// The ID of the tunnel.
	//
	// example:
	//
	// 53284
	Vni *string `json:"Vni,omitempty" xml:"Vni,omitempty"`
}

func (s DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetActConns(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.ActConns = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetBizTime(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.BizTime = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetConns(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.Conns = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetDropConns(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.DropConns = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetEnsRegionId(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetInActConns(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.InActConns = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetInBytes(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.InBytes = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetInDropBytes(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.InDropBytes = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetInDropPkts(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.InDropPkts = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetInPkts(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.InPkts = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetInValidRsNum(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.InValidRsNum = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetLoadBalancerId(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetOutBytes(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.OutBytes = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetOutDropBytes(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.OutDropBytes = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetOutDropPkts(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.OutDropPkts = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetOutPkts(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.OutPkts = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetProto(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.Proto = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetVPort(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.VPort = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetValidRsNum(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.ValidRsNum = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetVip(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.Vip = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData) SetVni(v string) *DescribeLoadBalancerListenMonitorResponseBodyLoadBalancerMonitorListenData {
	s.Vni = &v
	return s
}

type DescribeLoadBalancerListenMonitorResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoadBalancerListenMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoadBalancerListenMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerListenMonitorResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerListenMonitorResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerListenMonitorResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponse) SetStatusCode(v int32) *DescribeLoadBalancerListenMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerListenMonitorResponse) SetBody(v *DescribeLoadBalancerListenMonitorResponseBody) *DescribeLoadBalancerListenMonitorResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerListenersRequest struct {
	// The description of the image.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The listener port.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5s7crik3yo3p5****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeLoadBalancerListenersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerListenersRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerListenersRequest) SetDescription(v string) *DescribeLoadBalancerListenersRequest {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerListenersRequest) SetListenerPort(v int32) *DescribeLoadBalancerListenersRequest {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerListenersRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerListenersRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeLoadBalancerListenersRequest) SetPageNumber(v int32) *DescribeLoadBalancerListenersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLoadBalancerListenersRequest) SetPageSize(v int32) *DescribeLoadBalancerListenersRequest {
	s.PageSize = &v
	return s
}

type DescribeLoadBalancerListenersResponseBody struct {
	// The listeners of the ELB instance.
	Listeners *DescribeLoadBalancerListenersResponseBodyListeners `json:"Listeners,omitempty" xml:"Listeners,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// F3B261DD-3858-4D3C-877D-303ADF374600
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries.
	//
	// example:
	//
	// 49
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLoadBalancerListenersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerListenersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerListenersResponseBody) SetListeners(v *DescribeLoadBalancerListenersResponseBodyListeners) *DescribeLoadBalancerListenersResponseBody {
	s.Listeners = v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBody) SetPageNumber(v int32) *DescribeLoadBalancerListenersResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBody) SetPageSize(v int32) *DescribeLoadBalancerListenersResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBody) SetRequestId(v string) *DescribeLoadBalancerListenersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBody) SetTotalCount(v int32) *DescribeLoadBalancerListenersResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLoadBalancerListenersResponseBodyListeners struct {
	Listener []*DescribeLoadBalancerListenersResponseBodyListenersListener `json:"Listener,omitempty" xml:"Listener,omitempty" type:"Repeated"`
}

func (s DescribeLoadBalancerListenersResponseBodyListeners) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerListenersResponseBodyListeners) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerListenersResponseBodyListeners) SetListener(v []*DescribeLoadBalancerListenersResponseBodyListenersListener) *DescribeLoadBalancerListenersResponseBodyListeners {
	s.Listener = v
	return s
}

type DescribeLoadBalancerListenersResponseBodyListenersListener struct {
	// The backend port that is used by the ELB instance. Valid values: **1*	- to **65535**.
	//
	// example:
	//
	// 3306
	BackendServerPort *int32 `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	// The timestamp when the listener was created.
	//
	// example:
	//
	// 2022-08-15T08:42:57Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the listener.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The listener port that is used for HTTP-to-HTTPS redirection.
	//
	// example:
	//
	// 443
	ForwardPort *string `json:"ForwardPort,omitempty" xml:"ForwardPort,omitempty"`
	// Indicates whether HTTP-to-HTTPS redirection is enabled for the listener. Valid values:
	//
	// 	- **on**
	//
	// 	- **off**
	//
	// example:
	//
	// off
	ListenerForward *string `json:"ListenerForward,omitempty" xml:"ListenerForward,omitempty"`
	// The listening port.
	//
	// example:
	//
	// 8080
	ListenerPort *string `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the ELB instance.
	//
	// example:
	//
	// lb-51a5fhou****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The network transmission protocol that is used by the listener.
	//
	// 	- **tcp**
	//
	// 	- **udp**
	//
	// 	- **http**
	//
	// 	- **https**
	//
	// example:
	//
	// tcp
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The status of the listener. Valid values:
	//
	// 	- **running**
	//
	// 	- **stopped**
	//
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeLoadBalancerListenersResponseBodyListenersListener) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerListenersResponseBodyListenersListener) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerListenersResponseBodyListenersListener) SetBackendServerPort(v int32) *DescribeLoadBalancerListenersResponseBodyListenersListener {
	s.BackendServerPort = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBodyListenersListener) SetCreateTime(v string) *DescribeLoadBalancerListenersResponseBodyListenersListener {
	s.CreateTime = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBodyListenersListener) SetDescription(v string) *DescribeLoadBalancerListenersResponseBodyListenersListener {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBodyListenersListener) SetForwardPort(v string) *DescribeLoadBalancerListenersResponseBodyListenersListener {
	s.ForwardPort = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBodyListenersListener) SetListenerForward(v string) *DescribeLoadBalancerListenersResponseBodyListenersListener {
	s.ListenerForward = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBodyListenersListener) SetListenerPort(v string) *DescribeLoadBalancerListenersResponseBodyListenersListener {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBodyListenersListener) SetLoadBalancerId(v string) *DescribeLoadBalancerListenersResponseBodyListenersListener {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBodyListenersListener) SetProtocol(v string) *DescribeLoadBalancerListenersResponseBodyListenersListener {
	s.Protocol = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponseBodyListenersListener) SetStatus(v string) *DescribeLoadBalancerListenersResponseBodyListenersListener {
	s.Status = &v
	return s
}

type DescribeLoadBalancerListenersResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoadBalancerListenersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoadBalancerListenersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerListenersResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerListenersResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerListenersResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerListenersResponse) SetStatusCode(v int32) *DescribeLoadBalancerListenersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerListenersResponse) SetBody(v *DescribeLoadBalancerListenersResponseBody) *DescribeLoadBalancerListenersResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerSpecRequest struct {
	// The specifications of the ELB instance.
	//
	// example:
	//
	// elb.s2.small
	LoadBalancerSpec *string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty"`
}

func (s DescribeLoadBalancerSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerSpecRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerSpecRequest) SetLoadBalancerSpec(v string) *DescribeLoadBalancerSpecRequest {
	s.LoadBalancerSpec = &v
	return s
}

type DescribeLoadBalancerSpecResponseBody struct {
	// The specifications. Valid values:
	LoadBalancerSpecs []*DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs `json:"LoadBalancerSpecs,omitempty" xml:"LoadBalancerSpecs,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 10
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 7
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLoadBalancerSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerSpecResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerSpecResponseBody) SetLoadBalancerSpecs(v []*DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs) *DescribeLoadBalancerSpecResponseBody {
	s.LoadBalancerSpecs = v
	return s
}

func (s *DescribeLoadBalancerSpecResponseBody) SetPageNumber(v int32) *DescribeLoadBalancerSpecResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLoadBalancerSpecResponseBody) SetPageSize(v int32) *DescribeLoadBalancerSpecResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLoadBalancerSpecResponseBody) SetRequestId(v string) *DescribeLoadBalancerSpecResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerSpecResponseBody) SetTotalCount(v int32) *DescribeLoadBalancerSpecResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs struct {
	// The display name of the instance type.
	//
	// example:
	//
	// elb.s1.small
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The specifications of the ELB instance.
	//
	// example:
	//
	// elb.s1.small
	LoadBalancerSpec *string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty"`
}

func (s DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs) SetDisplayName(v string) *DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs {
	s.DisplayName = &v
	return s
}

func (s *DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs) SetLoadBalancerSpec(v string) *DescribeLoadBalancerSpecResponseBodyLoadBalancerSpecs {
	s.LoadBalancerSpec = &v
	return s
}

type DescribeLoadBalancerSpecResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoadBalancerSpecResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoadBalancerSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerSpecResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerSpecResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerSpecResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerSpecResponse) SetStatusCode(v int32) *DescribeLoadBalancerSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerSpecResponse) SetBody(v *DescribeLoadBalancerSpecResponseBody) *DescribeLoadBalancerSpecResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerTCPListenerAttributeRequest struct {
	// The frontend port that is used by the Edge Load Balance (ELB) instance. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5snthcyu1x10g7tywj7iu****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DescribeLoadBalancerTCPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerTCPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerTCPListenerAttributeRequest) SetListenerPort(v int32) *DescribeLoadBalancerTCPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerTCPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerTCPListenerAttributeResponseBody struct {
	// The backend port that is used by the ELB instance. Valid values: **1*	- to **65535**.
	//
	// example:
	//
	// 8080
	BackendServerPort *int32 `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	// The maximum bandwidth of the elastic IP address (EIP). Default value: 5. Valid values: **5*	- to **10000**. Unit: Mbit/s.
	//
	// example:
	//
	// 5
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The description of the listener.
	//
	// example:
	//
	// example
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether EIP pass-through is enabled. Valid values:
	//
	// 	- **on**
	//
	// 	- **off*	- (default)
	//
	// example:
	//
	// on
	EipTransmit *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	// The timeout period of a connection. Valid values: **10*	- to **900**. Unit: seconds.
	//
	// example:
	//
	// 500
	EstablishedTimeout *int32 `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	// Indicates whether the health check feature is enabled. Valid values:
	//
	// 	- **on**
	//
	// 	- **off**
	//
	// example:
	//
	// on
	HealthCheck *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If an empty string is returned for this parameter, the port specified by BackendServerPort is used for health checks.
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// 8000
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails to pass the health check.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >
	//
	// 	- This parameter is returned only if you set HealthCheck to on.
	//
	// 	- If the value of the HealthCheckConnectTimeout parameter is smaller than that of the HealthCheckInterval parameter, the timeout period specified by the HealthCheckConnectTimeout parameter becomes invalid and the value of the HealthCheckInterval parameter is used as the timeout period.
	//
	// example:
	//
	// 100
	HealthCheckConnectTimeout *int32 `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	// The domain name that is used for health checks.
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// example.com
	HealthCheckDomain *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	// The HTTP status codes for a successful health check. Valid values:
	//
	// 	- **http_2xx*	- (default)
	//
	// 	- **http_3xx**
	//
	// 	- **http_4xx**
	//
	// 	- **http_5xx**
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// http_2xx
	HealthCheckHttpCode *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Unit: seconds.
	//
	// example:
	//
	// 5
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The type of health checks. Valid values:
	//
	// 	- **tcp*	- (default)
	//
	// 	- **http**
	//
	// example:
	//
	// tcp
	HealthCheckType *string `json:"HealthCheckType,omitempty" xml:"HealthCheckType,omitempty"`
	// The Uniform Resource Identifier (URI) that is used for health checks. The URI must be **1*	- to **80*	- characters in length.
	//
	// >
	//
	// 	- The URL must start with a forward slash (`/`) and contain characters other than forward slashes (`/`).
	//
	// 	- This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// /example/index.html
	HealthCheckURI *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// 4
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The frontend port that is used by the ELB instance.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The timeout period of session persistence.
	//
	// 	- Default value: 0. If the default value is used, the system disables session persistence.
	//
	// 	- Valid values: **0*	- to **3600**.
	//
	// 	- Unit: seconds.
	//
	// example:
	//
	// 0
	PersistenceTimeout *int32 `json:"PersistenceTimeout,omitempty" xml:"PersistenceTimeout,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The routing algorithm. Valid values:
	//
	// 	- **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
	//
	// 	- **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The status of the listener. Valid values:
	//
	// 	- **Running**
	//
	// 	- **Stopped**
	//
	// 	- **Starting**
	//
	// 	- **Configuring**
	//
	// 	- **Stopping**
	//
	// example:
	//
	// Stopped
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter is returned only if you set HealthCheck to on.
	//
	// example:
	//
	// 4
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s DescribeLoadBalancerTCPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerTCPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetBackendServerPort(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.BackendServerPort = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetBandwidth(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetDescription(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetEipTransmit(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.EipTransmit = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetEstablishedTimeout(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.EstablishedTimeout = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheck(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheck = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckConnectPort(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckConnectTimeout(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckDomain(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckDomain = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckHttpCode(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckInterval(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckInterval = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckType(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckType = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthCheckURI(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthCheckURI = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetHealthyThreshold(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.HealthyThreshold = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetListenerPort(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetPersistenceTimeout(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.PersistenceTimeout = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetRequestId(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetScheduler(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.Scheduler = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetStatus(v string) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponseBody) SetUnhealthyThreshold(v int32) *DescribeLoadBalancerTCPListenerAttributeResponseBody {
	s.UnhealthyThreshold = &v
	return s
}

type DescribeLoadBalancerTCPListenerAttributeResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoadBalancerTCPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoadBalancerTCPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerTCPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerTCPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponse) SetStatusCode(v int32) *DescribeLoadBalancerTCPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerTCPListenerAttributeResponse) SetBody(v *DescribeLoadBalancerTCPListenerAttributeResponseBody) *DescribeLoadBalancerTCPListenerAttributeResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancerUDPListenerAttributeRequest struct {
	// The listening port that you want to query. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5pzipr2fszqtl2xf64uy5****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s DescribeLoadBalancerUDPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerUDPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerUDPListenerAttributeRequest) SetListenerPort(v int32) *DescribeLoadBalancerUDPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeRequest) SetLoadBalancerId(v string) *DescribeLoadBalancerUDPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

type DescribeLoadBalancerUDPListenerAttributeResponseBody struct {
	// The port used by the backend ELB server of the ELB instance. Valid values: **1*	- to **65535**.
	//
	// example:
	//
	// 8080
	BackendServerPort *int32 `json:"BackendServerPort,omitempty" xml:"BackendServerPort,omitempty"`
	// The peak bandwidth of the Edge Load Balancer (ELB) instance. The default value is -1, which indicates that the bandwidth is not limited.
	//
	// example:
	//
	// 5
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The name of the listener.
	//
	// example:
	//
	// example
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether EIP pass-through is enabled. Valid values:
	//
	// 	- **on**
	//
	// 	- **off*	- (default)
	//
	// example:
	//
	// on
	EipTransmit *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	// The timeout period of a connection. Valid values: **10*	- to **900**. Unit: seconds.
	//
	// example:
	//
	// 500
	EstablishedTimeout *int32 `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	// Specifies whether to enable the health check feature. Valid values:
	//
	// 	- **on**
	//
	// 	- **off**
	//
	// example:
	//
	// on
	HealthCheck *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.
	//
	// example:
	//
	// 8000
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The timeout period for a health check response. If a backend server does not respond within the specified timeout period, the server fails the health check.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// 	- If the value of the HealthCheckTimeout property is smaller than the value of the HealthCheckInterval property, the timeout period specified by the HealthCheckTimeout property becomes invalid and the value of the HealthCheckInterval property is used as the timeout period.
	//
	// example:
	//
	// 100
	HealthCheckConnectTimeout *int32 `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	// The response string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.
	//
	// example:
	//
	// ok
	HealthCheckExp *string `json:"HealthCheckExp,omitempty" xml:"HealthCheckExp,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Unit: seconds.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 5
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The request string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.
	//
	// example:
	//
	// hello
	HealthCheckReq *string `json:"HealthCheckReq,omitempty" xml:"HealthCheckReq,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 4
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The listener port.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 5D7597CF-1630-54EC-A945-624A33F2E7E8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The routing algorithm. Valid values:
	//
	// 	- **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
	//
	// 	- **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The status of the listener. Valid values:
	//
	// 	- **Running**
	//
	// 	- **Stopped**
	//
	// 	- **Starting**
	//
	// 	- **Configuring**
	//
	// 	- **Stopping**
	//
	// example:
	//
	// Stopped
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 4
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s DescribeLoadBalancerUDPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerUDPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetBackendServerPort(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.BackendServerPort = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetBandwidth(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.Bandwidth = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetDescription(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetEipTransmit(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.EipTransmit = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetEstablishedTimeout(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.EstablishedTimeout = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheck(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheck = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheckConnectPort(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheckConnectTimeout(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheckExp(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheckExp = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheckInterval(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheckInterval = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthCheckReq(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthCheckReq = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetHealthyThreshold(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.HealthyThreshold = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetListenerPort(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.ListenerPort = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetRequestId(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetScheduler(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.Scheduler = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetStatus(v string) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponseBody) SetUnhealthyThreshold(v int32) *DescribeLoadBalancerUDPListenerAttributeResponseBody {
	s.UnhealthyThreshold = &v
	return s
}

type DescribeLoadBalancerUDPListenerAttributeResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoadBalancerUDPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoadBalancerUDPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancerUDPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancerUDPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponse) SetStatusCode(v int32) *DescribeLoadBalancerUDPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancerUDPListenerAttributeResponse) SetBody(v *DescribeLoadBalancerUDPListenerAttributeResponseBody) *DescribeLoadBalancerUDPListenerAttributeResponse {
	s.Body = v
	return s
}

type DescribeLoadBalancersRequest struct {
	// The IP address that the ELB instance uses to provide services.
	//
	// example:
	//
	// 10.0.XX.XX
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// The ID of the Edge Node Service (ENS) node.
	//
	// example:
	//
	// cn-guangzhou-10
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The IDs of the Edge Node Service (ENS) nodes.
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The ID of the ELB instance.
	//
	// example:
	//
	// lb-5q73cv04zeyh43lh74lp4****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The name of the ELB instance.
	//
	// example:
	//
	// example
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	// The status of the listener for the ELB instance. Valid values:
	//
	// 	- **Active**: The listener for the instance can forward the received traffic based on forwarding rules.
	//
	// 	- **InActive**: The listener for the instance does not forward the received traffic.
	//
	// example:
	//
	// InActive
	LoadBalancerStatus *string `json:"LoadBalancerStatus,omitempty" xml:"LoadBalancerStatus,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-5s9ayrxsd9hszrlt5fgv2****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: 10. Valid values: **10*	- to **100**.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the backend server.
	//
	// example:
	//
	// i-5f67ffjc004wwz0t****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5sy773iy25rulsmgskmba****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeLoadBalancersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancersRequest) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancersRequest) SetAddress(v string) *DescribeLoadBalancersRequest {
	s.Address = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetEnsRegionId(v string) *DescribeLoadBalancersRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetEnsRegionIds(v []*string) *DescribeLoadBalancersRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeLoadBalancersRequest) SetLoadBalancerId(v string) *DescribeLoadBalancersRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetLoadBalancerName(v string) *DescribeLoadBalancersRequest {
	s.LoadBalancerName = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetLoadBalancerStatus(v string) *DescribeLoadBalancersRequest {
	s.LoadBalancerStatus = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetNetworkId(v string) *DescribeLoadBalancersRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetPageNumber(v int32) *DescribeLoadBalancersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetPageSize(v int32) *DescribeLoadBalancersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetServerId(v string) *DescribeLoadBalancersRequest {
	s.ServerId = &v
	return s
}

func (s *DescribeLoadBalancersRequest) SetVSwitchId(v string) *DescribeLoadBalancersRequest {
	s.VSwitchId = &v
	return s
}

type DescribeLoadBalancersResponseBody struct {
	// An array of ELB instances.
	LoadBalancers *DescribeLoadBalancersResponseBodyLoadBalancers `json:"LoadBalancers,omitempty" xml:"LoadBalancers,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: **10*	- to **100**.
	//
	// example:
	//
	// 100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of entries returned.
	//
	// example:
	//
	// 6
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLoadBalancersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancersResponseBody) SetLoadBalancers(v *DescribeLoadBalancersResponseBodyLoadBalancers) *DescribeLoadBalancersResponseBody {
	s.LoadBalancers = v
	return s
}

func (s *DescribeLoadBalancersResponseBody) SetPageNumber(v int32) *DescribeLoadBalancersResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeLoadBalancersResponseBody) SetPageSize(v int32) *DescribeLoadBalancersResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLoadBalancersResponseBody) SetRequestId(v string) *DescribeLoadBalancersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLoadBalancersResponseBody) SetTotalCount(v int32) *DescribeLoadBalancersResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLoadBalancersResponseBodyLoadBalancers struct {
	LoadBalancer []*DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer `json:"LoadBalancer,omitempty" xml:"LoadBalancer,omitempty" type:"Repeated"`
}

func (s DescribeLoadBalancersResponseBodyLoadBalancers) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancersResponseBodyLoadBalancers) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancers) SetLoadBalancer(v []*DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) *DescribeLoadBalancersResponseBodyLoadBalancers {
	s.LoadBalancer = v
	return s
}

type DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer struct {
	// The IP address that the ELB instance uses to provide services.
	//
	// example:
	//
	// 10.10.XX.XX
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
	// The IP version. Valid values: ipv4 and ipv6.
	//
	// example:
	//
	// ipv4
	AddressIPVersion *string `json:"AddressIPVersion,omitempty" xml:"AddressIPVersion,omitempty"`
	// The time when the ELB instance was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-05-06T11:13:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-wuhan-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the ELB instance.
	//
	// example:
	//
	// lb-5snthcyu1x10g7tywj7iu****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The name of the ELB instance.
	//
	// example:
	//
	// example
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	// The status of the listener for the ELB instance. Valid values:
	//
	// 	- **Active**: The listener for the instance can forward the received traffic based on forwarding rules.
	//
	// 	- **InActive**: The listener for the instance does not forward the received traffic.
	//
	// example:
	//
	// InActive
	LoadBalancerStatus *string `json:"LoadBalancerStatus,omitempty" xml:"LoadBalancerStatus,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-5rz0rj1caexauilpsjx0w****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The billing method. Valid values:
	//
	// 	- **PrePaid**: subscription.
	//
	// 	- **PostPaid**: pay-as-you-go. Only this billing method is supported.
	//
	// example:
	//
	// PostPaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5rllcjb3ol6duzjdnbm1om****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetAddress(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.Address = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetAddressIPVersion(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.AddressIPVersion = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetCreateTime(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.CreateTime = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetEnsRegionId(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetLoadBalancerId(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetLoadBalancerName(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.LoadBalancerName = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetLoadBalancerStatus(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.LoadBalancerStatus = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetNetworkId(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.NetworkId = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetPayType(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.PayType = &v
	return s
}

func (s *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer) SetVSwitchId(v string) *DescribeLoadBalancersResponseBodyLoadBalancersLoadBalancer {
	s.VSwitchId = &v
	return s
}

type DescribeLoadBalancersResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLoadBalancersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLoadBalancersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLoadBalancersResponse) GoString() string {
	return s.String()
}

func (s *DescribeLoadBalancersResponse) SetHeaders(v map[string]*string) *DescribeLoadBalancersResponse {
	s.Headers = v
	return s
}

func (s *DescribeLoadBalancersResponse) SetStatusCode(v int32) *DescribeLoadBalancersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLoadBalancersResponse) SetBody(v *DescribeLoadBalancersResponseBody) *DescribeLoadBalancersResponse {
	s.Body = v
	return s
}

type DescribeMeasurementDataRequest struct {
	// The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2019-08-30T00:00:00Z
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2019-06-01T00:00:00Z
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s DescribeMeasurementDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataRequest) SetEndDate(v string) *DescribeMeasurementDataRequest {
	s.EndDate = &v
	return s
}

func (s *DescribeMeasurementDataRequest) SetStartDate(v string) *DescribeMeasurementDataRequest {
	s.StartDate = &v
	return s
}

type DescribeMeasurementDataResponseBody struct {
	// The metering data returned.
	MeasurementDatas *DescribeMeasurementDataResponseBodyMeasurementDatas `json:"MeasurementDatas,omitempty" xml:"MeasurementDatas,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 125B04C7-3D0D-4245-AF96-14E3758E3F06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeasurementDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBody) SetMeasurementDatas(v *DescribeMeasurementDataResponseBodyMeasurementDatas) *DescribeMeasurementDataResponseBody {
	s.MeasurementDatas = v
	return s
}

func (s *DescribeMeasurementDataResponseBody) SetRequestId(v string) *DescribeMeasurementDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatas struct {
	MeasurementData []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData `json:"MeasurementData,omitempty" xml:"MeasurementData,omitempty" type:"Repeated"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatas) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatas) SetMeasurementData(v []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) *DescribeMeasurementDataResponseBodyMeasurementDatas {
	s.MeasurementData = v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData struct {
	// The bandwidth data returned.
	BandWidthFeeDatas *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas `json:"BandWidthFeeDatas,omitempty" xml:"BandWidthFeeDatas,omitempty" type:"Struct"`
	// The metering method. Valid values:
	//
	// 	- ChargeByUnified: unified metering.
	//
	// 	- ChargeByGrade: differential metering.
	//
	// example:
	//
	// ChargeByGrade
	ChargeModel *string `json:"ChargeModel,omitempty" xml:"ChargeModel,omitempty"`
	// The metering cycle.
	//
	// example:
	//
	// 2019-07-30
	CostCycle *string `json:"CostCycle,omitempty" xml:"CostCycle,omitempty"`
	// The end time of the metering cycle.
	//
	// example:
	//
	// 2019-07-30T16:00:00Z
	CostEndTime *string `json:"CostEndTime,omitempty" xml:"CostEndTime,omitempty"`
	// The start time of the metering cycle.
	//
	// example:
	//
	// 2019-07-29T16:00:00Z
	CostStartTime *string `json:"CostStartTime,omitempty" xml:"CostStartTime,omitempty"`
	// The information about computing resources.
	ResourceFeeData *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData `json:"ResourceFeeData,omitempty" xml:"ResourceFeeData,omitempty" type:"Struct"`
	// Details of the computing resources.
	ResourceFeeDataDetails *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails `json:"ResourceFeeDataDetails,omitempty" xml:"ResourceFeeDataDetails,omitempty" type:"Struct"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetBandWidthFeeDatas(v *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.BandWidthFeeDatas = v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetChargeModel(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.ChargeModel = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostCycle(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostCycle = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostEndTime(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostEndTime = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetCostStartTime(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.CostStartTime = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetResourceFeeData(v *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.ResourceFeeData = v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData) SetResourceFeeDataDetails(v *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementData {
	s.ResourceFeeDataDetails = v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas struct {
	BandWidthFeeData []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData `json:"BandWidthFeeData,omitempty" xml:"BandWidthFeeData,omitempty" type:"Repeated"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas) SetBandWidthFeeData(v []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatas {
	s.BandWidthFeeData = v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData struct {
	// The code of the bandwidth plan.
	//
	// example:
	//
	// cn-cmcc-1
	CostCode *string `json:"CostCode,omitempty" xml:"CostCode,omitempty"`
	// The name of the bandwidth plan.
	//
	// example:
	//
	// Beijing, Shanghai, and Guangzhou Mobile
	CostName *string `json:"CostName,omitempty" xml:"CostName,omitempty"`
	// The bandwidth consumption. Unit: bit/second.
	//
	// example:
	//
	// 16486
	CostVal *int32 `json:"CostVal,omitempty" xml:"CostVal,omitempty"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostCode(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostCode = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostName(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostName = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData) SetCostVal(v int32) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataBandWidthFeeDatasBandWidthFeeData {
	s.CostVal = &v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData struct {
	// The memory size. Unit: GB.
	//
	// example:
	//
	// 24
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The storage capacity. Unit: GB.
	//
	// example:
	//
	// 60
	Storage *int32 `json:"Storage,omitempty" xml:"Storage,omitempty"`
	// The number of vCPUs.
	//
	// example:
	//
	// 12
	Vcpu *int32 `json:"Vcpu,omitempty" xml:"Vcpu,omitempty"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) SetMemory(v int32) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData {
	s.Memory = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) SetStorage(v int32) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData {
	s.Storage = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData) SetVcpu(v int32) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeData {
	s.Vcpu = &v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails struct {
	ResourceFeeDataDetail []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail `json:"ResourceFeeDataDetail,omitempty" xml:"ResourceFeeDataDetail,omitempty" type:"Repeated"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails) SetResourceFeeDataDetail(v []*DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetails {
	s.ResourceFeeDataDetail = v
	return s
}

type DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail struct {
	// The code of the resource.
	//
	// example:
	//
	// vCPU
	CostCode *string `json:"CostCode,omitempty" xml:"CostCode,omitempty"`
	// The name of the resource.
	//
	// example:
	//
	// vCPU
	CostName *string `json:"CostName,omitempty" xml:"CostName,omitempty"`
	// The consumption of the resource.
	//
	// 	- Memory unit: GB.
	//
	// 	- CPU unit: vCPU.
	//
	// 	- Storage unit: GB.
	//
	// example:
	//
	// 55
	CostVal *int32 `json:"CostVal,omitempty" xml:"CostVal,omitempty"`
	// The type of the resource.
	//
	// example:
	//
	// vCPU
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) SetCostCode(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail {
	s.CostCode = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) SetCostName(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail {
	s.CostName = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) SetCostVal(v int32) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail {
	s.CostVal = &v
	return s
}

func (s *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail) SetResourceType(v string) *DescribeMeasurementDataResponseBodyMeasurementDatasMeasurementDataResourceFeeDataDetailsResourceFeeDataDetail {
	s.ResourceType = &v
	return s
}

type DescribeMeasurementDataResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeasurementDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeasurementDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeasurementDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeasurementDataResponse) SetHeaders(v map[string]*string) *DescribeMeasurementDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeasurementDataResponse) SetStatusCode(v int32) *DescribeMeasurementDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeasurementDataResponse) SetBody(v *DescribeMeasurementDataResponseBody) *DescribeMeasurementDataResponse {
	s.Body = v
	return s
}

type DescribeMountTargetsRequest struct {
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the file system.
	//
	// This parameter is required.
	//
	// example:
	//
	// c50f8*****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// The name of the mount target.
	//
	// example:
	//
	// TestMountPath
	MountTargetName *string `json:"MountTargetName,omitempty" xml:"MountTargetName,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. The maximum value is 100. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeMountTargetsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMountTargetsRequest) GoString() string {
	return s.String()
}

func (s *DescribeMountTargetsRequest) SetEnsRegionId(v string) *DescribeMountTargetsRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeMountTargetsRequest) SetFileSystemId(v string) *DescribeMountTargetsRequest {
	s.FileSystemId = &v
	return s
}

func (s *DescribeMountTargetsRequest) SetMountTargetName(v string) *DescribeMountTargetsRequest {
	s.MountTargetName = &v
	return s
}

func (s *DescribeMountTargetsRequest) SetPageNumber(v int32) *DescribeMountTargetsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeMountTargetsRequest) SetPageSize(v int32) *DescribeMountTargetsRequest {
	s.PageSize = &v
	return s
}

type DescribeMountTargetsResponseBody struct {
	// The information about mount targets.
	MountTargets []*DescribeMountTargetsResponseBodyMountTargets `json:"MountTargets,omitempty" xml:"MountTargets,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 2
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 762DD527-358B-1E48-8005-CCE3ED4EB9E0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of mount targets.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeMountTargetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMountTargetsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMountTargetsResponseBody) SetMountTargets(v []*DescribeMountTargetsResponseBodyMountTargets) *DescribeMountTargetsResponseBody {
	s.MountTargets = v
	return s
}

func (s *DescribeMountTargetsResponseBody) SetPageNumber(v int32) *DescribeMountTargetsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeMountTargetsResponseBody) SetPageSize(v int32) *DescribeMountTargetsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeMountTargetsResponseBody) SetRequestId(v string) *DescribeMountTargetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMountTargetsResponseBody) SetTotalCount(v int32) *DescribeMountTargetsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeMountTargetsResponseBodyMountTargets struct {
	// The ID of the region.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the file system.
	//
	// example:
	//
	// c50f8*****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// The path of the mount target.
	//
	// example:
	//
	// LB:/fileSystemName/mountTargetName
	MountTargetDomain *string `json:"MountTargetDomain,omitempty" xml:"MountTargetDomain,omitempty"`
	// The name of the mount target.
	//
	// example:
	//
	// TestMountPath
	MountTargetName *string `json:"MountTargetName,omitempty" xml:"MountTargetName,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-***
	NetWorkId *string `json:"NetWorkId,omitempty" xml:"NetWorkId,omitempty"`
	// The state of the mount target. Valid values:
	//
	// 	- active: The mount target is available.
	//
	// 	- inactive: The mount target is unavailable.
	//
	// 	- pending: A task is being queued for the mount target.
	//
	// 	- deleting: The mount target is being deleted.
	//
	// example:
	//
	// active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeMountTargetsResponseBodyMountTargets) String() string {
	return tea.Prettify(s)
}

func (s DescribeMountTargetsResponseBodyMountTargets) GoString() string {
	return s.String()
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetEnsRegionId(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetFileSystemId(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.FileSystemId = &v
	return s
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetMountTargetDomain(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.MountTargetDomain = &v
	return s
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetMountTargetName(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.MountTargetName = &v
	return s
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetNetWorkId(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.NetWorkId = &v
	return s
}

func (s *DescribeMountTargetsResponseBodyMountTargets) SetStatus(v string) *DescribeMountTargetsResponseBodyMountTargets {
	s.Status = &v
	return s
}

type DescribeMountTargetsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMountTargetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMountTargetsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMountTargetsResponse) GoString() string {
	return s.String()
}

func (s *DescribeMountTargetsResponse) SetHeaders(v map[string]*string) *DescribeMountTargetsResponse {
	s.Headers = v
	return s
}

func (s *DescribeMountTargetsResponse) SetStatusCode(v int32) *DescribeMountTargetsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMountTargetsResponse) SetBody(v *DescribeMountTargetsResponseBody) *DescribeMountTargetsResponse {
	s.Body = v
	return s
}

type DescribeNCInformationRequest struct {
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	ResourceId  *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s DescribeNCInformationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationRequest) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationRequest) SetEnsRegionId(v string) *DescribeNCInformationRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNCInformationRequest) SetResourceId(v string) *DescribeNCInformationRequest {
	s.ResourceId = &v
	return s
}

type DescribeNCInformationResponseBody struct {
	CurrentPage *int32                                   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Data        []*DescribeNCInformationResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Desc        *string                                  `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Msg         *string                                  `json:"Msg,omitempty" xml:"Msg,omitempty"`
	Pager       *DescribeNCInformationResponseBodyPager  `json:"Pager,omitempty" xml:"Pager,omitempty" type:"Struct"`
	RequestId   *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount  *int32                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeNCInformationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponseBody) SetCurrentPage(v int32) *DescribeNCInformationResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *DescribeNCInformationResponseBody) SetData(v []*DescribeNCInformationResponseBodyData) *DescribeNCInformationResponseBody {
	s.Data = v
	return s
}

func (s *DescribeNCInformationResponseBody) SetDesc(v string) *DescribeNCInformationResponseBody {
	s.Desc = &v
	return s
}

func (s *DescribeNCInformationResponseBody) SetMsg(v string) *DescribeNCInformationResponseBody {
	s.Msg = &v
	return s
}

func (s *DescribeNCInformationResponseBody) SetPager(v *DescribeNCInformationResponseBodyPager) *DescribeNCInformationResponseBody {
	s.Pager = v
	return s
}

func (s *DescribeNCInformationResponseBody) SetRequestId(v string) *DescribeNCInformationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNCInformationResponseBody) SetTotalCount(v int32) *DescribeNCInformationResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeNCInformationResponseBodyData struct {
	Cpu     *DescribeNCInformationResponseBodyDataCpu    `json:"Cpu,omitempty" xml:"Cpu,omitempty" type:"Struct"`
	Gpu     *DescribeNCInformationResponseBodyDataGpu    `json:"Gpu,omitempty" xml:"Gpu,omitempty" type:"Struct"`
	Hdd     *DescribeNCInformationResponseBodyDataHdd    `json:"Hdd,omitempty" xml:"Hdd,omitempty" type:"Struct"`
	Info    *DescribeNCInformationResponseBodyDataInfo   `json:"Info,omitempty" xml:"Info,omitempty" type:"Struct"`
	Memory  *DescribeNCInformationResponseBodyDataMemory `json:"Memory,omitempty" xml:"Memory,omitempty" type:"Struct"`
	Nvme    *DescribeNCInformationResponseBodyDataNvme   `json:"Nvme,omitempty" xml:"Nvme,omitempty" type:"Struct"`
	Online  *bool                                        `json:"Online,omitempty" xml:"Online,omitempty"`
	Region  *string                                      `json:"Region,omitempty" xml:"Region,omitempty"`
	Ssd     *DescribeNCInformationResponseBodyDataSsd    `json:"Ssd,omitempty" xml:"Ssd,omitempty" type:"Struct"`
	Virtual *string                                      `json:"Virtual,omitempty" xml:"Virtual,omitempty"`
}

func (s DescribeNCInformationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponseBodyData) SetCpu(v *DescribeNCInformationResponseBodyDataCpu) *DescribeNCInformationResponseBodyData {
	s.Cpu = v
	return s
}

func (s *DescribeNCInformationResponseBodyData) SetGpu(v *DescribeNCInformationResponseBodyDataGpu) *DescribeNCInformationResponseBodyData {
	s.Gpu = v
	return s
}

func (s *DescribeNCInformationResponseBodyData) SetHdd(v *DescribeNCInformationResponseBodyDataHdd) *DescribeNCInformationResponseBodyData {
	s.Hdd = v
	return s
}

func (s *DescribeNCInformationResponseBodyData) SetInfo(v *DescribeNCInformationResponseBodyDataInfo) *DescribeNCInformationResponseBodyData {
	s.Info = v
	return s
}

func (s *DescribeNCInformationResponseBodyData) SetMemory(v *DescribeNCInformationResponseBodyDataMemory) *DescribeNCInformationResponseBodyData {
	s.Memory = v
	return s
}

func (s *DescribeNCInformationResponseBodyData) SetNvme(v *DescribeNCInformationResponseBodyDataNvme) *DescribeNCInformationResponseBodyData {
	s.Nvme = v
	return s
}

func (s *DescribeNCInformationResponseBodyData) SetOnline(v bool) *DescribeNCInformationResponseBodyData {
	s.Online = &v
	return s
}

func (s *DescribeNCInformationResponseBodyData) SetRegion(v string) *DescribeNCInformationResponseBodyData {
	s.Region = &v
	return s
}

func (s *DescribeNCInformationResponseBodyData) SetSsd(v *DescribeNCInformationResponseBodyDataSsd) *DescribeNCInformationResponseBodyData {
	s.Ssd = v
	return s
}

func (s *DescribeNCInformationResponseBodyData) SetVirtual(v string) *DescribeNCInformationResponseBodyData {
	s.Virtual = &v
	return s
}

type DescribeNCInformationResponseBodyDataCpu struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeNCInformationResponseBodyDataCpu) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponseBodyDataCpu) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetDisplay(v bool) *DescribeNCInformationResponseBodyDataCpu {
	s.Display = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetOversellRatio(v int64) *DescribeNCInformationResponseBodyDataCpu {
	s.OversellRatio = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetRemain(v int64) *DescribeNCInformationResponseBodyDataCpu {
	s.Remain = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetReserveDisable(v bool) *DescribeNCInformationResponseBodyDataCpu {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetReserveDisableTotal(v int64) *DescribeNCInformationResponseBodyDataCpu {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetReserved(v int64) *DescribeNCInformationResponseBodyDataCpu {
	s.Reserved = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetStatusDisable(v bool) *DescribeNCInformationResponseBodyDataCpu {
	s.StatusDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetStatusDisableTotal(v int64) *DescribeNCInformationResponseBodyDataCpu {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetTotal(v int64) *DescribeNCInformationResponseBodyDataCpu {
	s.Total = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetType(v string) *DescribeNCInformationResponseBodyDataCpu {
	s.Type = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetUsed(v int64) *DescribeNCInformationResponseBodyDataCpu {
	s.Used = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataCpu) SetUsedRatio(v int64) *DescribeNCInformationResponseBodyDataCpu {
	s.UsedRatio = &v
	return s
}

type DescribeNCInformationResponseBodyDataGpu struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeNCInformationResponseBodyDataGpu) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponseBodyDataGpu) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetDisplay(v bool) *DescribeNCInformationResponseBodyDataGpu {
	s.Display = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetOversellRatio(v int64) *DescribeNCInformationResponseBodyDataGpu {
	s.OversellRatio = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetRemain(v int64) *DescribeNCInformationResponseBodyDataGpu {
	s.Remain = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetReserveDisable(v bool) *DescribeNCInformationResponseBodyDataGpu {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetReserveDisableTotal(v int64) *DescribeNCInformationResponseBodyDataGpu {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetReserved(v int64) *DescribeNCInformationResponseBodyDataGpu {
	s.Reserved = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetStatusDisable(v bool) *DescribeNCInformationResponseBodyDataGpu {
	s.StatusDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetStatusDisableTotal(v int64) *DescribeNCInformationResponseBodyDataGpu {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetTotal(v int64) *DescribeNCInformationResponseBodyDataGpu {
	s.Total = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetType(v string) *DescribeNCInformationResponseBodyDataGpu {
	s.Type = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetUsed(v int64) *DescribeNCInformationResponseBodyDataGpu {
	s.Used = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataGpu) SetUsedRatio(v int64) *DescribeNCInformationResponseBodyDataGpu {
	s.UsedRatio = &v
	return s
}

type DescribeNCInformationResponseBodyDataHdd struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeNCInformationResponseBodyDataHdd) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponseBodyDataHdd) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetDisplay(v bool) *DescribeNCInformationResponseBodyDataHdd {
	s.Display = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetOversellRatio(v int64) *DescribeNCInformationResponseBodyDataHdd {
	s.OversellRatio = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetRemain(v int64) *DescribeNCInformationResponseBodyDataHdd {
	s.Remain = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetReserveDisable(v bool) *DescribeNCInformationResponseBodyDataHdd {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetReserveDisableTotal(v int64) *DescribeNCInformationResponseBodyDataHdd {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetReserved(v int64) *DescribeNCInformationResponseBodyDataHdd {
	s.Reserved = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetStatusDisable(v bool) *DescribeNCInformationResponseBodyDataHdd {
	s.StatusDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetStatusDisableTotal(v int64) *DescribeNCInformationResponseBodyDataHdd {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetTotal(v int64) *DescribeNCInformationResponseBodyDataHdd {
	s.Total = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetType(v string) *DescribeNCInformationResponseBodyDataHdd {
	s.Type = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetUsed(v int64) *DescribeNCInformationResponseBodyDataHdd {
	s.Used = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataHdd) SetUsedRatio(v int64) *DescribeNCInformationResponseBodyDataHdd {
	s.UsedRatio = &v
	return s
}

type DescribeNCInformationResponseBodyDataInfo struct {
	Ip   *string   `json:"Ip,omitempty" xml:"Ip,omitempty"`
	Name *string   `json:"Name,omitempty" xml:"Name,omitempty"`
	Tag  []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	Uuid *string   `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeNCInformationResponseBodyDataInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponseBodyDataInfo) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponseBodyDataInfo) SetIp(v string) *DescribeNCInformationResponseBodyDataInfo {
	s.Ip = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataInfo) SetName(v string) *DescribeNCInformationResponseBodyDataInfo {
	s.Name = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataInfo) SetTag(v []*string) *DescribeNCInformationResponseBodyDataInfo {
	s.Tag = v
	return s
}

func (s *DescribeNCInformationResponseBodyDataInfo) SetUuid(v string) *DescribeNCInformationResponseBodyDataInfo {
	s.Uuid = &v
	return s
}

type DescribeNCInformationResponseBodyDataMemory struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeNCInformationResponseBodyDataMemory) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponseBodyDataMemory) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetDisplay(v bool) *DescribeNCInformationResponseBodyDataMemory {
	s.Display = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetOversellRatio(v int64) *DescribeNCInformationResponseBodyDataMemory {
	s.OversellRatio = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetRemain(v int64) *DescribeNCInformationResponseBodyDataMemory {
	s.Remain = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetReserveDisable(v bool) *DescribeNCInformationResponseBodyDataMemory {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetReserveDisableTotal(v int64) *DescribeNCInformationResponseBodyDataMemory {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetReserved(v int64) *DescribeNCInformationResponseBodyDataMemory {
	s.Reserved = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetStatusDisable(v bool) *DescribeNCInformationResponseBodyDataMemory {
	s.StatusDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetStatusDisableTotal(v int64) *DescribeNCInformationResponseBodyDataMemory {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetTotal(v int64) *DescribeNCInformationResponseBodyDataMemory {
	s.Total = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetType(v string) *DescribeNCInformationResponseBodyDataMemory {
	s.Type = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetUsed(v int64) *DescribeNCInformationResponseBodyDataMemory {
	s.Used = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataMemory) SetUsedRatio(v int64) *DescribeNCInformationResponseBodyDataMemory {
	s.UsedRatio = &v
	return s
}

type DescribeNCInformationResponseBodyDataNvme struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeNCInformationResponseBodyDataNvme) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponseBodyDataNvme) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetDisplay(v bool) *DescribeNCInformationResponseBodyDataNvme {
	s.Display = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetOversellRatio(v int64) *DescribeNCInformationResponseBodyDataNvme {
	s.OversellRatio = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetRemain(v int64) *DescribeNCInformationResponseBodyDataNvme {
	s.Remain = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetReserveDisable(v bool) *DescribeNCInformationResponseBodyDataNvme {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetReserveDisableTotal(v int64) *DescribeNCInformationResponseBodyDataNvme {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetReserved(v int64) *DescribeNCInformationResponseBodyDataNvme {
	s.Reserved = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetStatusDisable(v bool) *DescribeNCInformationResponseBodyDataNvme {
	s.StatusDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetStatusDisableTotal(v int64) *DescribeNCInformationResponseBodyDataNvme {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetTotal(v int64) *DescribeNCInformationResponseBodyDataNvme {
	s.Total = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetType(v string) *DescribeNCInformationResponseBodyDataNvme {
	s.Type = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetUsed(v int64) *DescribeNCInformationResponseBodyDataNvme {
	s.Used = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataNvme) SetUsedRatio(v int64) *DescribeNCInformationResponseBodyDataNvme {
	s.UsedRatio = &v
	return s
}

type DescribeNCInformationResponseBodyDataSsd struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeNCInformationResponseBodyDataSsd) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponseBodyDataSsd) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetDisplay(v bool) *DescribeNCInformationResponseBodyDataSsd {
	s.Display = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetOversellRatio(v int64) *DescribeNCInformationResponseBodyDataSsd {
	s.OversellRatio = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetRemain(v int64) *DescribeNCInformationResponseBodyDataSsd {
	s.Remain = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetReserveDisable(v bool) *DescribeNCInformationResponseBodyDataSsd {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetReserveDisableTotal(v int64) *DescribeNCInformationResponseBodyDataSsd {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetReserved(v int64) *DescribeNCInformationResponseBodyDataSsd {
	s.Reserved = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetStatusDisable(v bool) *DescribeNCInformationResponseBodyDataSsd {
	s.StatusDisable = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetStatusDisableTotal(v int64) *DescribeNCInformationResponseBodyDataSsd {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetTotal(v int64) *DescribeNCInformationResponseBodyDataSsd {
	s.Total = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetType(v string) *DescribeNCInformationResponseBodyDataSsd {
	s.Type = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetUsed(v int64) *DescribeNCInformationResponseBodyDataSsd {
	s.Used = &v
	return s
}

func (s *DescribeNCInformationResponseBodyDataSsd) SetUsedRatio(v int64) *DescribeNCInformationResponseBodyDataSsd {
	s.UsedRatio = &v
	return s
}

type DescribeNCInformationResponseBodyPager struct {
	Page  *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	Size  *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeNCInformationResponseBodyPager) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponseBodyPager) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponseBodyPager) SetPage(v int64) *DescribeNCInformationResponseBodyPager {
	s.Page = &v
	return s
}

func (s *DescribeNCInformationResponseBodyPager) SetSize(v int64) *DescribeNCInformationResponseBodyPager {
	s.Size = &v
	return s
}

func (s *DescribeNCInformationResponseBodyPager) SetTotal(v int64) *DescribeNCInformationResponseBodyPager {
	s.Total = &v
	return s
}

type DescribeNCInformationResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNCInformationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNCInformationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNCInformationResponse) GoString() string {
	return s.String()
}

func (s *DescribeNCInformationResponse) SetHeaders(v map[string]*string) *DescribeNCInformationResponse {
	s.Headers = v
	return s
}

func (s *DescribeNCInformationResponse) SetStatusCode(v int32) *DescribeNCInformationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNCInformationResponse) SetBody(v *DescribeNCInformationResponseBody) *DescribeNCInformationResponse {
	s.Body = v
	return s
}

type DescribeNatGatewaysRequest struct {
	// The ID of the Edge Node Service (ENS) node.
	//
	// example:
	//
	// cn-wuxi-9
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The node information.
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The name of the NAT gateway.
	//
	// example:
	//
	// test0
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the NAT gateway.
	//
	// example:
	//
	// nat-5t7nh1cfm6kxiszlttr38****
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	// The IDs of NAT Gateways.
	NatGatewayIds []*string `json:"NatGatewayIds,omitempty" xml:"NatGatewayIds,omitempty" type:"Repeated"`
	// The ID of the network.
	//
	// example:
	//
	// n-2zeuphj08tt7q3brd****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The page number. Pages start from page **1**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. The maximum value is **100**.
	//
	// Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5rllcjb3ol6duzjdnbm1o****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeNatGatewaysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysRequest) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysRequest) SetEnsRegionId(v string) *DescribeNatGatewaysRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetEnsRegionIds(v []*string) *DescribeNatGatewaysRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeNatGatewaysRequest) SetName(v string) *DescribeNatGatewaysRequest {
	s.Name = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetNatGatewayId(v string) *DescribeNatGatewaysRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetNatGatewayIds(v []*string) *DescribeNatGatewaysRequest {
	s.NatGatewayIds = v
	return s
}

func (s *DescribeNatGatewaysRequest) SetNetworkId(v string) *DescribeNatGatewaysRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetPageNumber(v int32) *DescribeNatGatewaysRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetPageSize(v int32) *DescribeNatGatewaysRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNatGatewaysRequest) SetVSwitchId(v string) *DescribeNatGatewaysRequest {
	s.VSwitchId = &v
	return s
}

type DescribeNatGatewaysResponseBody struct {
	// The details of the NAT gateways.
	NatGateways []*DescribeNatGatewaysResponseBodyNatGateways `json:"NatGateways,omitempty" xml:"NatGateways,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 2818A8F4-5E2B-5611-8732-5ACF7B677059
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of NAT gateways that are returned.
	//
	// example:
	//
	// 49
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeNatGatewaysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseBody) SetNatGateways(v []*DescribeNatGatewaysResponseBodyNatGateways) *DescribeNatGatewaysResponseBody {
	s.NatGateways = v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetPageNumber(v int32) *DescribeNatGatewaysResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetPageSize(v int32) *DescribeNatGatewaysResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetRequestId(v string) *DescribeNatGatewaysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBody) SetTotalCount(v int32) *DescribeNatGatewaysResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeNatGatewaysResponseBodyNatGateways struct {
	// The time when the NAT gateway was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2021-11-22T07:03:32Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-xiangyang-5
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The list of elastic IP addresses (EIPs) that are associated with the Internet NAT gateway.
	IpLists []*DescribeNatGatewaysResponseBodyNatGatewaysIpLists `json:"IpLists,omitempty" xml:"IpLists,omitempty" type:"Repeated"`
	// The name of the NAT gateway.
	//
	// example:
	//
	// test0
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the NAT gateway.
	//
	// example:
	//
	// nat-5t7nh1cfm6kxiszlttr38****
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-5s2ml1olj0kzaws9n1yrj****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The type of the NAT gateway.
	//
	// example:
	//
	// enat.default
	Spec *string `json:"Spec,omitempty" xml:"Spec,omitempty"`
	// The status of the SNAT entry.
	//
	// 	- Pending: The SNAT entry is being created or modified.
	//
	// 	- Available: The SNAT entry is available.
	//
	// 	- Deleting: The SNAT entry is being deleted.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5szpp1os9m55myirbflfw****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeNatGatewaysResponseBodyNatGateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseBodyNatGateways) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetCreationTime(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.CreationTime = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetEnsRegionId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetIpLists(v []*DescribeNatGatewaysResponseBodyNatGatewaysIpLists) *DescribeNatGatewaysResponseBodyNatGateways {
	s.IpLists = v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetName(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.Name = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetNatGatewayId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetNetworkId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.NetworkId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetSpec(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.Spec = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetStatus(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.Status = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGateways) SetVSwitchId(v string) *DescribeNatGatewaysResponseBodyNatGateways {
	s.VSwitchId = &v
	return s
}

type DescribeNatGatewaysResponseBodyNatGatewaysIpLists struct {
	// The ID of the instance.
	//
	// example:
	//
	// eip-50g****
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	// The IP address of the EIP associated with the NAT gateway.
	//
	// example:
	//
	// 8.XX.XX.162
	IpAddress *string `json:"IpAddress,omitempty" xml:"IpAddress,omitempty"`
	// The association between the EIP and the Internet NAT gateway. Valid values:
	//
	// 	- **UsedByForwardTable**: The EIP is specified in a DNAT entry.
	//
	// 	- **UsedBySnatTable**: The EIP is specified in an SNAT entry.
	//
	// 	- **UsedByForwardSnatTable**: The EIP is specified in both an SNAT entry and a DNAT entry.
	//
	// 	- **Idle**: The EIP is not specified in a DNAT or SNAT entry.
	//
	// example:
	//
	// Idle
	UsingStatus *string `json:"UsingStatus,omitempty" xml:"UsingStatus,omitempty"`
}

func (s DescribeNatGatewaysResponseBodyNatGatewaysIpLists) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponseBodyNatGatewaysIpLists) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponseBodyNatGatewaysIpLists) SetAllocationId(v string) *DescribeNatGatewaysResponseBodyNatGatewaysIpLists {
	s.AllocationId = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGatewaysIpLists) SetIpAddress(v string) *DescribeNatGatewaysResponseBodyNatGatewaysIpLists {
	s.IpAddress = &v
	return s
}

func (s *DescribeNatGatewaysResponseBodyNatGatewaysIpLists) SetUsingStatus(v string) *DescribeNatGatewaysResponseBodyNatGatewaysIpLists {
	s.UsingStatus = &v
	return s
}

type DescribeNatGatewaysResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNatGatewaysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNatGatewaysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNatGatewaysResponse) GoString() string {
	return s.String()
}

func (s *DescribeNatGatewaysResponse) SetHeaders(v map[string]*string) *DescribeNatGatewaysResponse {
	s.Headers = v
	return s
}

func (s *DescribeNatGatewaysResponse) SetStatusCode(v int32) *DescribeNatGatewaysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNatGatewaysResponse) SetBody(v *DescribeNatGatewaysResponseBody) *DescribeNatGatewaysResponse {
	s.Body = v
	return s
}

type DescribeNetworkAclsRequest struct {
	// The ID of the network ACL.
	//
	// example:
	//
	// nacl-bp1lhl0taikrbgnh****
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	// The name of the network ACL.
	//
	// example:
	//
	// acl-1
	NetworkAclName *string `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
	// The page number. Pages start from page **1**. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: **50**. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the associated instance.
	//
	// example:
	//
	// n-5****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
}

func (s DescribeNetworkAclsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsRequest) SetNetworkAclId(v string) *DescribeNetworkAclsRequest {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetNetworkAclName(v string) *DescribeNetworkAclsRequest {
	s.NetworkAclName = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetPageNumber(v string) *DescribeNetworkAclsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetPageSize(v string) *DescribeNetworkAclsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkAclsRequest) SetResourceId(v string) *DescribeNetworkAclsRequest {
	s.ResourceId = &v
	return s
}

type DescribeNetworkAclsResponseBody struct {
	// Details of the network ACLs.
	NetworkAcls []*DescribeNetworkAclsResponseBodyNetworkAcls `json:"NetworkAcls,omitempty" xml:"NetworkAcls,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 2
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// A1707FC0-430C-423A-B624-284046B20399
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 3
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeNetworkAclsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseBody) SetNetworkAcls(v []*DescribeNetworkAclsResponseBodyNetworkAcls) *DescribeNetworkAclsResponseBody {
	s.NetworkAcls = v
	return s
}

func (s *DescribeNetworkAclsResponseBody) SetPageNumber(v string) *DescribeNetworkAclsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkAclsResponseBody) SetPageSize(v string) *DescribeNetworkAclsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkAclsResponseBody) SetRequestId(v string) *DescribeNetworkAclsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBody) SetTotalCount(v string) *DescribeNetworkAclsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeNetworkAclsResponseBodyNetworkAcls struct {
	// The time when the network ACL was created. The time follows the ISO 8601 standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-11-01T06:08:46Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the network ACL.
	//
	// example:
	//
	// This is my NetworkAcl.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Details of the outbound rules.
	EgressAclEntries []*DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries `json:"EgressAclEntries,omitempty" xml:"EgressAclEntries,omitempty" type:"Repeated"`
	// Details of the inbound rules.
	IngressAclEntries []*DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries `json:"IngressAclEntries,omitempty" xml:"IngressAclEntries,omitempty" type:"Repeated"`
	// The ID of the network ACL.
	//
	// example:
	//
	// nacl-a2do9e413e0spxscd****
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	// The name of the network ACL.
	//
	// example:
	//
	// acl-8
	NetworkAclName *string `json:"NetworkAclName,omitempty" xml:"NetworkAclName,omitempty"`
	// Details of the associated resources.
	Resources []*DescribeNetworkAclsResponseBodyNetworkAclsResources `json:"Resources,omitempty" xml:"Resources,omitempty" type:"Repeated"`
	// The status of the network ACL. Valid values:
	//
	// 	- **Available**: The network ACL is available.
	//
	// 	- **Modifying**: The network ACL is being configured.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNetworkAclsResponseBodyNetworkAcls) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseBodyNetworkAcls) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetCreationTime(v string) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetDescription(v string) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetEgressAclEntries(v []*DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.EgressAclEntries = v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetIngressAclEntries(v []*DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.IngressAclEntries = v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetNetworkAclId(v string) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetNetworkAclName(v string) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.NetworkAclName = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetResources(v []*DescribeNetworkAclsResponseBodyNetworkAclsResources) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.Resources = v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAcls) SetStatus(v string) *DescribeNetworkAclsResponseBodyNetworkAcls {
	s.Status = &v
	return s
}

type DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries struct {
	// The destination CIDR block.
	//
	// example:
	//
	// 10.0.0.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The description of the outbound rule.
	//
	// example:
	//
	// This is EgressAclEntries.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the outbound rule.
	//
	// example:
	//
	// nae-a2d447uw4tillfvgb****
	NetworkAclEntryId *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty"`
	// The name of the outbound rule.
	//
	// example:
	//
	// acl-2
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty"`
	// The action that is performed on network traffic that matches the rule. Valid values:
	//
	// 	- **accept**: allows the network traffic.
	//
	// 	- **drop**: blocks the network traffic.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The destination port range of the outbound rule.
	//
	// 	- If **Protocol*	- of the outbound rule is set to **all*	- or **icmp*	- the port range is **-1/-1**, which indicates all ports.
	//
	// 	- If **Protocol*	- of the outbound rule is set to **tcp*	- or **udp**, the port range is in the following format: **1/200*	- or **80/80**. 1/200 indicates port 1 to port 200. 80/80 indicates port 80. Valid values for a port: **1 to 65535**.
	//
	// example:
	//
	// -1/-1
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of the rule. Valid values: **1 to 100**. Default value: **1**.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The protocol type. Valid values:
	//
	// 	- **icmp**: ICMP.
	//
	// 	- **tcp**: TCP.
	//
	// 	- **udp**: UDP.
	//
	// 	- **all**: all protocols.
	//
	// example:
	//
	// all
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The type of the rule. Valid values:
	//
	// 	- **system**: The rule is created by the system.
	//
	// 	- **custom**: The rule is created by a user.
	//
	// example:
	//
	// system
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetCidrBlock(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.CidrBlock = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetDescription(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetNetworkAclEntryId(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.NetworkAclEntryId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetNetworkAclEntryName(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.NetworkAclEntryName = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetPolicy(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetPortRange(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.PortRange = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetPriority(v int32) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.Priority = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetProtocol(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries) SetType(v string) *DescribeNetworkAclsResponseBodyNetworkAclsEgressAclEntries {
	s.Type = &v
	return s
}

type DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries struct {
	// The source CIDR block.
	//
	// example:
	//
	// 10.0.0.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The description of the inbound rule.
	//
	// example:
	//
	// This is IngressAclEntries.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the inbound rule.
	//
	// example:
	//
	// nae-5dk86arlydmezasw****
	NetworkAclEntryId *string `json:"NetworkAclEntryId,omitempty" xml:"NetworkAclEntryId,omitempty"`
	// The name of the inbound rule.
	//
	// example:
	//
	// acl-3
	NetworkAclEntryName *string `json:"NetworkAclEntryName,omitempty" xml:"NetworkAclEntryName,omitempty"`
	// The action that is performed on network traffic that matches the rule. Valid values:
	//
	// 	- **accept**: allows the network traffic.
	//
	// 	- **drop**: blocks the network traffic.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The destination port range of the inbound rule.
	//
	// 	- If **Protocol*	- of the inbound rule is set to **all*	- or **icmp**, the port range is **-1/-1**, which indicates all ports.
	//
	// 	- If **Protocol*	- of the inbound rule is set to **tcp*	- or **udp**, the port range is in the following format: **1/200*	- or **80/80**. 1/200 indicates port 1 to port 200. 80/80 indicates port 80. Valid values for a port: **1 to 65535**.
	//
	// example:
	//
	// -1/-1
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of the rule. Valid values: **1 to 100**. Default value: **1**.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The protocol type. Valid values:
	//
	// 	- **icmp**: ICMP.
	//
	// 	- **tcp**: TCP.
	//
	// 	- **udp**: UDP.
	//
	// 	- **all**: all protocols.
	//
	// example:
	//
	// all
	Protocol *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	// The type of the rule. Valid values:
	//
	// 	- **system**: The rule is created by the system.
	//
	// 	- **custom**: The rule is created by a user.
	//
	// example:
	//
	// system
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetCidrBlock(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.CidrBlock = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetDescription(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetNetworkAclEntryId(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.NetworkAclEntryId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetNetworkAclEntryName(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.NetworkAclEntryName = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetPolicy(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.Policy = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetPortRange(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.PortRange = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetPriority(v int32) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.Priority = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetProtocol(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.Protocol = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries) SetType(v string) *DescribeNetworkAclsResponseBodyNetworkAclsIngressAclEntries {
	s.Type = &v
	return s
}

type DescribeNetworkAclsResponseBodyNetworkAclsResources struct {
	// The ID of the edge node.
	//
	// example:
	//
	// cn-fuzhou-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the associated resource.
	//
	// example:
	//
	// n-****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the associated resource.
	//
	// example:
	//
	// Network
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The association status of the resource. Valid values:
	//
	// 	- **BINDED**: The resource is associated with the network ACL.
	//
	// 	- **BINDING**: The resource is being associated with the network ACL.
	//
	// 	- **UNBINDING**: The resource is being disassociated from the network ACL.
	//
	// example:
	//
	// BINDING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponseBodyNetworkAclsResources) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsResources) SetEnsRegionId(v string) *DescribeNetworkAclsResponseBodyNetworkAclsResources {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsResources) SetResourceId(v string) *DescribeNetworkAclsResponseBodyNetworkAclsResources {
	s.ResourceId = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsResources) SetResourceType(v string) *DescribeNetworkAclsResponseBodyNetworkAclsResources {
	s.ResourceType = &v
	return s
}

func (s *DescribeNetworkAclsResponseBodyNetworkAclsResources) SetStatus(v string) *DescribeNetworkAclsResponseBodyNetworkAclsResources {
	s.Status = &v
	return s
}

type DescribeNetworkAclsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNetworkAclsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNetworkAclsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAclsResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAclsResponse) SetHeaders(v map[string]*string) *DescribeNetworkAclsResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkAclsResponse) SetStatusCode(v int32) *DescribeNetworkAclsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworkAclsResponse) SetBody(v *DescribeNetworkAclsResponseBody) *DescribeNetworkAclsResponse {
	s.Body = v
	return s
}

type DescribeNetworkAttributeRequest struct {
	// The ID of the network.
	//
	// This parameter is required.
	//
	// example:
	//
	// n-****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
}

func (s DescribeNetworkAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeRequest) SetNetworkId(v string) *DescribeNetworkAttributeRequest {
	s.NetworkId = &v
	return s
}

type DescribeNetworkAttributeResponseBody struct {
	// The IPv4 CIDR block of the network.
	//
	// example:
	//
	// 10.0.0.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The list of resources in the network.
	CloudResources *DescribeNetworkAttributeResponseBodyCloudResources `json:"CloudResources,omitempty" xml:"CloudResources,omitempty" type:"Struct"`
	// The time when the network was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-06-01T00:00:00Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the network.
	//
	// example:
	//
	// abc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-beijing
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the gateway route table associated with the IPv6 gateway.
	//
	// >  This parameter is available only when the IPv6 gateway is associated with a gateway route table.
	//
	// example:
	//
	// rt-539***tbs
	GatewayRouteTableId *string `json:"GatewayRouteTableId,omitempty" xml:"GatewayRouteTableId,omitempty"`
	// List of HaVipIds.
	HaVipIds *DescribeNetworkAttributeResponseBodyHaVipIds `json:"HaVipIds,omitempty" xml:"HaVipIds,omitempty" type:"Struct"`
	// The instance IDs.
	InstanceIds *DescribeNetworkAttributeResponseBodyInstanceIds `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Struct"`
	// List of ELB instances.
	LoadBalancerIds *DescribeNetworkAttributeResponseBodyLoadBalancerIds `json:"LoadBalancerIds,omitempty" xml:"LoadBalancerIds,omitempty" type:"Struct"`
	// List of NAT Gateways.
	NatGatewayIds *DescribeNetworkAttributeResponseBodyNatGatewayIds `json:"NatGatewayIds,omitempty" xml:"NatGatewayIds,omitempty" type:"Struct"`
	// The ID of the network access control list (ACL).
	//
	// example:
	//
	// nacl-a2do9e413e0sp****
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-5***
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// A list of multicast source IDs.
	NetworkInterfaceIds *DescribeNetworkAttributeResponseBodyNetworkInterfaceIds `json:"NetworkInterfaceIds,omitempty" xml:"NetworkInterfaceIds,omitempty" type:"Struct"`
	// The name of the network.
	//
	// example:
	//
	// abc
	NetworkName *string `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the route table that you want to query.
	//
	// example:
	//
	// rt-539***fpu
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	// List of routing table IDs.
	RouteTableIds *DescribeNetworkAttributeResponseBodyRouteTableIds `json:"RouteTableIds,omitempty" xml:"RouteTableIds,omitempty" type:"Struct"`
	// The ID of the route table.
	//
	// example:
	//
	// rtb-5***
	RouterTableId *string `json:"RouterTableId,omitempty" xml:"RouterTableId,omitempty"`
	// The status of the network. Valid values:
	//
	// 	- Pending
	//
	// 	- Available
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The list of vSwitches in the network.
	VSwitchIds *DescribeNetworkAttributeResponseBodyVSwitchIds `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" type:"Struct"`
}

func (s DescribeNetworkAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBody) SetCidrBlock(v string) *DescribeNetworkAttributeResponseBody {
	s.CidrBlock = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetCloudResources(v *DescribeNetworkAttributeResponseBodyCloudResources) *DescribeNetworkAttributeResponseBody {
	s.CloudResources = v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetCreatedTime(v string) *DescribeNetworkAttributeResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetDescription(v string) *DescribeNetworkAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetEnsRegionId(v string) *DescribeNetworkAttributeResponseBody {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetGatewayRouteTableId(v string) *DescribeNetworkAttributeResponseBody {
	s.GatewayRouteTableId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetHaVipIds(v *DescribeNetworkAttributeResponseBodyHaVipIds) *DescribeNetworkAttributeResponseBody {
	s.HaVipIds = v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetInstanceIds(v *DescribeNetworkAttributeResponseBodyInstanceIds) *DescribeNetworkAttributeResponseBody {
	s.InstanceIds = v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetLoadBalancerIds(v *DescribeNetworkAttributeResponseBodyLoadBalancerIds) *DescribeNetworkAttributeResponseBody {
	s.LoadBalancerIds = v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetNatGatewayIds(v *DescribeNetworkAttributeResponseBodyNatGatewayIds) *DescribeNetworkAttributeResponseBody {
	s.NatGatewayIds = v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetNetworkAclId(v string) *DescribeNetworkAttributeResponseBody {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetNetworkId(v string) *DescribeNetworkAttributeResponseBody {
	s.NetworkId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetNetworkInterfaceIds(v *DescribeNetworkAttributeResponseBodyNetworkInterfaceIds) *DescribeNetworkAttributeResponseBody {
	s.NetworkInterfaceIds = v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetNetworkName(v string) *DescribeNetworkAttributeResponseBody {
	s.NetworkName = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetRequestId(v string) *DescribeNetworkAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetRouteTableId(v string) *DescribeNetworkAttributeResponseBody {
	s.RouteTableId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetRouteTableIds(v *DescribeNetworkAttributeResponseBodyRouteTableIds) *DescribeNetworkAttributeResponseBody {
	s.RouteTableIds = v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetRouterTableId(v string) *DescribeNetworkAttributeResponseBody {
	s.RouterTableId = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetStatus(v string) *DescribeNetworkAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBody) SetVSwitchIds(v *DescribeNetworkAttributeResponseBodyVSwitchIds) *DescribeNetworkAttributeResponseBody {
	s.VSwitchIds = v
	return s
}

type DescribeNetworkAttributeResponseBodyCloudResources struct {
	CloudResourceSetType []*DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType `json:"CloudResourceSetType,omitempty" xml:"CloudResourceSetType,omitempty" type:"Repeated"`
}

func (s DescribeNetworkAttributeResponseBodyCloudResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyCloudResources) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyCloudResources) SetCloudResourceSetType(v []*DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType) *DescribeNetworkAttributeResponseBodyCloudResources {
	s.CloudResourceSetType = v
	return s
}

type DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType struct {
	// The number of resources in the network.
	//
	// example:
	//
	// 3
	ResourceCount *int32 `json:"ResourceCount,omitempty" xml:"ResourceCount,omitempty"`
	// The resource type. VSwitch.
	//
	// example:
	//
	// VSwitch
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType) SetResourceCount(v int32) *DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType {
	s.ResourceCount = &v
	return s
}

func (s *DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType) SetResourceType(v string) *DescribeNetworkAttributeResponseBodyCloudResourcesCloudResourceSetType {
	s.ResourceType = &v
	return s
}

type DescribeNetworkAttributeResponseBodyHaVipIds struct {
	HaVipId []*string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkAttributeResponseBodyHaVipIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyHaVipIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyHaVipIds) SetHaVipId(v []*string) *DescribeNetworkAttributeResponseBodyHaVipIds {
	s.HaVipId = v
	return s
}

type DescribeNetworkAttributeResponseBodyInstanceIds struct {
	InstanceId []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkAttributeResponseBodyInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyInstanceIds) SetInstanceId(v []*string) *DescribeNetworkAttributeResponseBodyInstanceIds {
	s.InstanceId = v
	return s
}

type DescribeNetworkAttributeResponseBodyLoadBalancerIds struct {
	LoadBalancerId []*string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkAttributeResponseBodyLoadBalancerIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyLoadBalancerIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyLoadBalancerIds) SetLoadBalancerId(v []*string) *DescribeNetworkAttributeResponseBodyLoadBalancerIds {
	s.LoadBalancerId = v
	return s
}

type DescribeNetworkAttributeResponseBodyNatGatewayIds struct {
	NatGatewayId []*string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkAttributeResponseBodyNatGatewayIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyNatGatewayIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyNatGatewayIds) SetNatGatewayId(v []*string) *DescribeNetworkAttributeResponseBodyNatGatewayIds {
	s.NatGatewayId = v
	return s
}

type DescribeNetworkAttributeResponseBodyNetworkInterfaceIds struct {
	NetworkInterfaceId []*string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkAttributeResponseBodyNetworkInterfaceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyNetworkInterfaceIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyNetworkInterfaceIds) SetNetworkInterfaceId(v []*string) *DescribeNetworkAttributeResponseBodyNetworkInterfaceIds {
	s.NetworkInterfaceId = v
	return s
}

type DescribeNetworkAttributeResponseBodyRouteTableIds struct {
	RouteTableId []*string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkAttributeResponseBodyRouteTableIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyRouteTableIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyRouteTableIds) SetRouteTableId(v []*string) *DescribeNetworkAttributeResponseBodyRouteTableIds {
	s.RouteTableId = v
	return s
}

type DescribeNetworkAttributeResponseBodyVSwitchIds struct {
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" type:"Repeated"`
}

func (s DescribeNetworkAttributeResponseBodyVSwitchIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponseBodyVSwitchIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponseBodyVSwitchIds) SetVSwitchId(v []*string) *DescribeNetworkAttributeResponseBodyVSwitchIds {
	s.VSwitchId = v
	return s
}

type DescribeNetworkAttributeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNetworkAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNetworkAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkAttributeResponse) SetHeaders(v map[string]*string) *DescribeNetworkAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkAttributeResponse) SetStatusCode(v int32) *DescribeNetworkAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworkAttributeResponse) SetBody(v *DescribeNetworkAttributeResponseBody) *DescribeNetworkAttributeResponse {
	s.Body = v
	return s
}

type DescribeNetworkInterfacesRequest struct {
	// The region ID of the instance.
	//
	// example:
	//
	// cn-tianjin-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The node information.
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The ID of the instance.
	//
	// example:
	//
	// i-5t7z99n32gplriv
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// IPv6 addresses N of the ENI. You can specify multiple IPv6 addresses. Valid values of N: 1 to 100.
	Ipv6Address []*string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty" type:"Repeated"`
	// The ID of the network.
	//
	// example:
	//
	// n-2zeuphj08tt7q3brd****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The ID of the ENI.
	//
	// example:
	//
	// eni-58z57orgmt6d1****
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// A list of multicast source IDs.
	NetworkInterfaceIds []*string `json:"NetworkInterfaceIds,omitempty" xml:"NetworkInterfaceIds,omitempty" type:"Repeated"`
	// The name of the ENI.
	//
	// example:
	//
	// test-01
	NetworkInterfaceName *string `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	// The page number of the returned page. Pages start from page 1. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 50.
	//
	// example:
	//
	// 50
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The primary IP address of the ENI.
	//
	// example:
	//
	// ***
	PrimaryIpAddress *string `json:"PrimaryIpAddress,omitempty" xml:"PrimaryIpAddress,omitempty"`
	// The ID of the security group to which the secondary ENI belongs. To query the details of secondary ENIs based on the ID of a security group, specify this parameter.
	//
	// example:
	//
	// sg-5p1fg655nh68xyz9i***
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The status of the ENI. Valid values:
	//
	// 	- Available: The ENI is available.
	//
	// 	- Attaching: The ENI is being attached to an instance.
	//
	// 	- InUse: The ENI is attached to an instance.
	//
	// 	- Detaching: The ENI is being detached from an instance.
	//
	// 	- Deleting: The ENI is being deleted.
	//
	// This parameter is empty by default, which indicates that ENIs in all states are queried.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the ENI. Valid values:
	//
	// 	- Primary: the primary ENI.
	//
	// 	- Secondary: the secondary ENI.
	//
	// This parameter is empty by default, which indicates that both primary and secondary ENIs are queried.
	//
	// example:
	//
	// Secondary
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-12345
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeNetworkInterfacesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesRequest) SetEnsRegionId(v string) *DescribeNetworkInterfacesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetEnsRegionIds(v []*string) *DescribeNetworkInterfacesRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetInstanceId(v string) *DescribeNetworkInterfacesRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetIpv6Address(v []*string) *DescribeNetworkInterfacesRequest {
	s.Ipv6Address = v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetNetworkId(v string) *DescribeNetworkInterfacesRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetNetworkInterfaceId(v string) *DescribeNetworkInterfacesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetNetworkInterfaceIds(v []*string) *DescribeNetworkInterfacesRequest {
	s.NetworkInterfaceIds = v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetNetworkInterfaceName(v string) *DescribeNetworkInterfacesRequest {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPageNumber(v string) *DescribeNetworkInterfacesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPageSize(v string) *DescribeNetworkInterfacesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetPrimaryIpAddress(v string) *DescribeNetworkInterfacesRequest {
	s.PrimaryIpAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetSecurityGroupId(v string) *DescribeNetworkInterfacesRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetStatus(v string) *DescribeNetworkInterfacesRequest {
	s.Status = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetType(v string) *DescribeNetworkInterfacesRequest {
	s.Type = &v
	return s
}

func (s *DescribeNetworkInterfacesRequest) SetVSwitchId(v string) *DescribeNetworkInterfacesRequest {
	s.VSwitchId = &v
	return s
}

type DescribeNetworkInterfacesResponseBody struct {
	// Details about the ENIs.
	NetworkInterfaceSets *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets `json:"NetworkInterfaceSets,omitempty" xml:"NetworkInterfaceSets,omitempty" type:"Struct"`
	// The number of the page to return. Pages start from page **1**. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page. Maximum value: **50**. Default value: **10**.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 708AF9CE-FF92-5DF9-93F8-B7754AB1061A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries in the list.
	//
	// example:
	//
	// 49
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBody) SetNetworkInterfaceSets(v *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) *DescribeNetworkInterfacesResponseBody {
	s.NetworkInterfaceSets = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetPageNumber(v int32) *DescribeNetworkInterfacesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetPageSize(v int32) *DescribeNetworkInterfacesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetRequestId(v string) *DescribeNetworkInterfacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBody) SetTotalCount(v int32) *DescribeNetworkInterfacesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets struct {
	NetworkInterfaceSet []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet `json:"NetworkInterfaceSet,omitempty" xml:"NetworkInterfaceSet,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets) SetNetworkInterfaceSet(v []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSets {
	s.NetworkInterfaceSet = v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet struct {
	// The time when the ENI was created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddThh:mmZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-02-22T03:53:25Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of ENI.
	//
	// example:
	//
	// test-description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// id-jakarta-1
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the instance to which the ENI is bound.
	//
	// example:
	//
	// i-5siavnr3
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The IPv6 addresses of the ENIs.
	Ipv6Sets *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets `json:"Ipv6Sets,omitempty" xml:"Ipv6Sets,omitempty" type:"Struct"`
	// The MAC address of the ENI.
	//
	// example:
	//
	// 00:16:3e:08:60:0a
	MacAddress *string `json:"MacAddress,omitempty" xml:"MacAddress,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-5w0qd03adw****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The ID of the ENI.
	//
	// example:
	//
	// eni-uf686a5
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The ENI name.
	//
	// example:
	//
	// primaryTest
	NetworkInterfaceName *string `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
	// The private IP address of the server.
	//
	// example:
	//
	// 12.23.3.4
	PrimaryIp *string `json:"PrimaryIp,omitempty" xml:"PrimaryIp,omitempty"`
	// The primary private IP address. Valid values:
	//
	// 	- **Public**: public IP address.
	//
	// 	- **Private**: internal IP address.
	//
	// example:
	//
	// private
	PrimaryIpType *string `json:"PrimaryIpType,omitempty" xml:"PrimaryIpType,omitempty"`
	// Details about the private IP address.
	PrivateIpSets *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets `json:"PrivateIpSets,omitempty" xml:"PrivateIpSets,omitempty" type:"Struct"`
	// The ID of the security group.
	SecurityGroupIds *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds `json:"SecurityGroupIds,omitempty" xml:"SecurityGroupIds,omitempty" type:"Struct"`
	// The status of the ENI. Valid values:
	//
	// 	- Available: The ENI is available.
	//
	// 	- Attaching: The ENI is being attached to an instance.
	//
	// 	- InUse: The ENI is attached to an instance.
	//
	// 	- Detaching: The ENI is being detached from an instance.
	//
	// 	- Deleting: The ENI is being deleted.
	//
	// example:
	//
	// In_use
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the ENI. Valid values:
	//
	// 	- Primary
	//
	// 	- Secondary
	//
	// example:
	//
	// Primary
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5rqswx1trlsj9
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetCreationTime(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.CreationTime = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetDescription(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Description = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetEnsRegionId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetInstanceId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.InstanceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetIpv6Sets(v *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Ipv6Sets = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetMacAddress(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.MacAddress = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetNetworkId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.NetworkId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetNetworkInterfaceId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetNetworkInterfaceName(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.NetworkInterfaceName = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetPrimaryIp(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.PrimaryIp = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetPrimaryIpType(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.PrimaryIpType = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetPrivateIpSets(v *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.PrivateIpSets = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetSecurityGroupIds(v *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.SecurityGroupIds = v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetStatus(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Status = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetType(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.Type = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet) SetVSwitchId(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSet {
	s.VSwitchId = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets struct {
	Ipv6Set []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set `json:"Ipv6Set,omitempty" xml:"Ipv6Set,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets) SetIpv6Set(v []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6Sets {
	s.Ipv6Set = v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set struct {
	// The IPv6 address of the ENI.
	//
	// example:
	//
	// 2605:340:cdb1:XXXX:XXXX:XXXX:XXXX:e2d6
	Ipv6Address *string `json:"Ipv6Address,omitempty" xml:"Ipv6Address,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set) SetIpv6Address(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetIpv6SetsIpv6Set {
	s.Ipv6Address = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets struct {
	PrivateIpSet []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet `json:"PrivateIpSet,omitempty" xml:"PrivateIpSet,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets) SetPrivateIpSet(v []*DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSets {
	s.PrivateIpSet = v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet struct {
	// Specifies whether the private IP address is the primary private IP address. Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	Primary *bool `json:"Primary,omitempty" xml:"Primary,omitempty"`
	// The private IP address.
	//
	// example:
	//
	// 192.168.0.130
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) SetPrimary(v bool) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet {
	s.Primary = &v
	return s
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet) SetPrivateIpAddress(v string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetPrivateIpSetsPrivateIpSet {
	s.PrivateIpAddress = &v
	return s
}

type DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds struct {
	SecurityGroup []*string `json:"SecurityGroup,omitempty" xml:"SecurityGroup,omitempty" type:"Repeated"`
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds) SetSecurityGroup(v []*string) *DescribeNetworkInterfacesResponseBodyNetworkInterfaceSetsNetworkInterfaceSetSecurityGroupIds {
	s.SecurityGroup = v
	return s
}

type DescribeNetworkInterfacesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNetworkInterfacesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNetworkInterfacesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkInterfacesResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkInterfacesResponse) SetHeaders(v map[string]*string) *DescribeNetworkInterfacesResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkInterfacesResponse) SetStatusCode(v int32) *DescribeNetworkInterfacesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworkInterfacesResponse) SetBody(v *DescribeNetworkInterfacesResponseBody) *DescribeNetworkInterfacesResponse {
	s.Body = v
	return s
}

type DescribeNetworksRequest struct {
	// The ID of the edge node.
	//
	// example:
	//
	// cn-beijing-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The IDs of edge nodes. You can specify 1 to 100 IDs.
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The ID of the network.
	//
	// example:
	//
	// n-5***
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The IDs of VPCs You can specify 1 to 100 IDs.
	NetworkIds []*string `json:"NetworkIds,omitempty" xml:"NetworkIds,omitempty" type:"Repeated"`
	// The name of the network.
	//
	// example:
	//
	// example
	NetworkName *string `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
	// The page number of the returned page. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Valid values: **1 to 50**. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeNetworksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworksRequest) SetEnsRegionId(v string) *DescribeNetworksRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworksRequest) SetEnsRegionIds(v []*string) *DescribeNetworksRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeNetworksRequest) SetNetworkId(v string) *DescribeNetworksRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeNetworksRequest) SetNetworkIds(v []*string) *DescribeNetworksRequest {
	s.NetworkIds = v
	return s
}

func (s *DescribeNetworksRequest) SetNetworkName(v string) *DescribeNetworksRequest {
	s.NetworkName = &v
	return s
}

func (s *DescribeNetworksRequest) SetPageNumber(v int32) *DescribeNetworksRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworksRequest) SetPageSize(v int32) *DescribeNetworksRequest {
	s.PageSize = &v
	return s
}

type DescribeNetworksResponseBody struct {
	// The VPCs.
	Networks *DescribeNetworksResponseBodyNetworks `json:"Networks,omitempty" xml:"Networks,omitempty" type:"Struct"`
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 2
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries in the list.
	//
	// example:
	//
	// 3
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeNetworksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponseBody) SetNetworks(v *DescribeNetworksResponseBodyNetworks) *DescribeNetworksResponseBody {
	s.Networks = v
	return s
}

func (s *DescribeNetworksResponseBody) SetPageNumber(v int32) *DescribeNetworksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeNetworksResponseBody) SetPageSize(v int32) *DescribeNetworksResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeNetworksResponseBody) SetRequestId(v string) *DescribeNetworksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetworksResponseBody) SetTotalCount(v int32) *DescribeNetworksResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeNetworksResponseBodyNetworks struct {
	Network []*DescribeNetworksResponseBodyNetworksNetwork `json:"Network,omitempty" xml:"Network,omitempty" type:"Repeated"`
}

func (s DescribeNetworksResponseBodyNetworks) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponseBodyNetworks) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponseBodyNetworks) SetNetwork(v []*DescribeNetworksResponseBodyNetworksNetwork) *DescribeNetworksResponseBodyNetworks {
	s.Network = v
	return s
}

type DescribeNetworksResponseBodyNetworksNetwork struct {
	// The IPv4 CIDR block of the network.
	//
	// example:
	//
	// 10.0.xx.xx/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The timestamp when the instance was created. Unit: milliseconds.
	//
	// example:
	//
	// 2020-06-16T06:33:15Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the network.
	//
	// example:
	//
	// exampleDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-beijing
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the gateway route table associated with the IPv6 gateway.
	//
	// >  This parameter is available only when the IPv6 gateway is associated with a gateway route table.
	//
	// example:
	//
	// rt-5*****tbs
	GatewayRouteTableId *string `json:"GatewayRouteTableId,omitempty" xml:"GatewayRouteTableId,omitempty"`
	// The ID of the network access control list (ACL).
	//
	// example:
	//
	// nacl-a2do9e413e0spxscd****
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	// The ID of the network.
	//
	// example:
	//
	// n-5***
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The name of the network.
	//
	// example:
	//
	// example
	NetworkName *string `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
	// The ID of the route table.
	//
	// example:
	//
	// rt-5*****pks
	RouteTableId *string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty"`
	// The IDs of the route tables.
	RouteTableIds *DescribeNetworksResponseBodyNetworksNetworkRouteTableIds `json:"RouteTableIds,omitempty" xml:"RouteTableIds,omitempty" type:"Struct"`
	// The route table ID.
	//
	// example:
	//
	// rtb-5**
	RouterTableId *string `json:"RouterTableId,omitempty" xml:"RouterTableId,omitempty"`
	// The status of the network. Valid values:
	//
	// 	- Pending
	//
	// 	- Available
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The list of vSwitches in the network.
	VSwitchIds *DescribeNetworksResponseBodyNetworksNetworkVSwitchIds `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" type:"Struct"`
}

func (s DescribeNetworksResponseBodyNetworksNetwork) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponseBodyNetworksNetwork) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetCidrBlock(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.CidrBlock = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetCreatedTime(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.CreatedTime = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetDescription(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.Description = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetEnsRegionId(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetGatewayRouteTableId(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.GatewayRouteTableId = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetNetworkAclId(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.NetworkAclId = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetNetworkId(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.NetworkId = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetNetworkName(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.NetworkName = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetRouteTableId(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.RouteTableId = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetRouteTableIds(v *DescribeNetworksResponseBodyNetworksNetworkRouteTableIds) *DescribeNetworksResponseBodyNetworksNetwork {
	s.RouteTableIds = v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetRouterTableId(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.RouterTableId = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetStatus(v string) *DescribeNetworksResponseBodyNetworksNetwork {
	s.Status = &v
	return s
}

func (s *DescribeNetworksResponseBodyNetworksNetwork) SetVSwitchIds(v *DescribeNetworksResponseBodyNetworksNetworkVSwitchIds) *DescribeNetworksResponseBodyNetworksNetwork {
	s.VSwitchIds = v
	return s
}

type DescribeNetworksResponseBodyNetworksNetworkRouteTableIds struct {
	RouteTableId []*string `json:"RouteTableId,omitempty" xml:"RouteTableId,omitempty" type:"Repeated"`
}

func (s DescribeNetworksResponseBodyNetworksNetworkRouteTableIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponseBodyNetworksNetworkRouteTableIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponseBodyNetworksNetworkRouteTableIds) SetRouteTableId(v []*string) *DescribeNetworksResponseBodyNetworksNetworkRouteTableIds {
	s.RouteTableId = v
	return s
}

type DescribeNetworksResponseBodyNetworksNetworkVSwitchIds struct {
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" type:"Repeated"`
}

func (s DescribeNetworksResponseBodyNetworksNetworkVSwitchIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponseBodyNetworksNetworkVSwitchIds) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponseBodyNetworksNetworkVSwitchIds) SetVSwitchId(v []*string) *DescribeNetworksResponseBodyNetworksNetworkVSwitchIds {
	s.VSwitchId = v
	return s
}

type DescribeNetworksResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNetworksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNetworksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworksResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworksResponse) SetHeaders(v map[string]*string) *DescribeNetworksResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworksResponse) SetStatusCode(v int32) *DescribeNetworksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworksResponse) SetBody(v *DescribeNetworksResponseBody) *DescribeNetworksResponse {
	s.Body = v
	return s
}

type DescribePrePaidInstanceStockRequest struct {
	// The size of the data disk. Unit: GB.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	DataDiskSize *int32 `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	// The ID of the edge node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-suzhou-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The specification of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// ens.sn1.stiny
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The size of the system disk. Unit: GB.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	SystemDiskSize *int32 `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s DescribePrePaidInstanceStockRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePrePaidInstanceStockRequest) GoString() string {
	return s.String()
}

func (s *DescribePrePaidInstanceStockRequest) SetDataDiskSize(v int32) *DescribePrePaidInstanceStockRequest {
	s.DataDiskSize = &v
	return s
}

func (s *DescribePrePaidInstanceStockRequest) SetEnsRegionId(v string) *DescribePrePaidInstanceStockRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribePrePaidInstanceStockRequest) SetInstanceSpec(v string) *DescribePrePaidInstanceStockRequest {
	s.InstanceSpec = &v
	return s
}

func (s *DescribePrePaidInstanceStockRequest) SetSystemDiskSize(v int32) *DescribePrePaidInstanceStockRequest {
	s.SystemDiskSize = &v
	return s
}

type DescribePrePaidInstanceStockResponseBody struct {
	// The number of resources that you can purchase.
	//
	// example:
	//
	// 84
	AvaliableCount *int32 `json:"AvaliableCount,omitempty" xml:"AvaliableCount,omitempty"`
	// The number of CPU cores.
	//
	// example:
	//
	// 1
	Cores *int32 `json:"Cores,omitempty" xml:"Cores,omitempty"`
	// The size of the data disk.
	//
	// example:
	//
	// 20
	DataDiskSize *int32 `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// cn-suzhou-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The specification of the instance.
	//
	// example:
	//
	// ens.sn1.stiny
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The memory size. Unit: GB.
	//
	// example:
	//
	// 2048
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 007833C8-E819-4122-B636-0D48D7BF6DFB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The reason why resources are insufficient.
	//
	// example:
	//
	// StockNotEnough
	ResourceGap *string `json:"ResourceGap,omitempty" xml:"ResourceGap,omitempty"`
	// The size of the system disk.
	//
	// example:
	//
	// 20
	SystemDiskSize *int32 `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s DescribePrePaidInstanceStockResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePrePaidInstanceStockResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePrePaidInstanceStockResponseBody) SetAvaliableCount(v int32) *DescribePrePaidInstanceStockResponseBody {
	s.AvaliableCount = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetCores(v int32) *DescribePrePaidInstanceStockResponseBody {
	s.Cores = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetDataDiskSize(v int32) *DescribePrePaidInstanceStockResponseBody {
	s.DataDiskSize = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetEnsRegionId(v string) *DescribePrePaidInstanceStockResponseBody {
	s.EnsRegionId = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetInstanceSpec(v string) *DescribePrePaidInstanceStockResponseBody {
	s.InstanceSpec = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetMemory(v int32) *DescribePrePaidInstanceStockResponseBody {
	s.Memory = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetRequestId(v string) *DescribePrePaidInstanceStockResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetResourceGap(v string) *DescribePrePaidInstanceStockResponseBody {
	s.ResourceGap = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponseBody) SetSystemDiskSize(v int32) *DescribePrePaidInstanceStockResponseBody {
	s.SystemDiskSize = &v
	return s
}

type DescribePrePaidInstanceStockResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePrePaidInstanceStockResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePrePaidInstanceStockResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePrePaidInstanceStockResponse) GoString() string {
	return s.String()
}

func (s *DescribePrePaidInstanceStockResponse) SetHeaders(v map[string]*string) *DescribePrePaidInstanceStockResponse {
	s.Headers = v
	return s
}

func (s *DescribePrePaidInstanceStockResponse) SetStatusCode(v int32) *DescribePrePaidInstanceStockResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePrePaidInstanceStockResponse) SetBody(v *DescribePrePaidInstanceStockResponseBody) *DescribePrePaidInstanceStockResponse {
	s.Body = v
	return s
}

type DescribePriceRequest struct {
	DataDisk   []*DescribePriceRequestDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	SystemDisk *DescribePriceRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	// If you leave DataDisk.1.Size empty, the value that you specified for this parameter is used.
	DataDisks []*DescribePriceRequestDataDisks `json:"DataDisks,omitempty" xml:"DataDisks,omitempty" type:"Repeated"`
	// The ID of the ENS node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The specifications of instances.
	//
	// This parameter is required.
	//
	// example:
	//
	// ens.sn1.tiny
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The bandwidth metering method of the instance. Valid values:
	//
	// 	- BandwidthByDay: Pay by daily peak bandwidth
	//
	// 	- 95BandwidthByMonth: Pay by monthly 95th percentile bandwidth
	//
	// 	- PayByBandwidth4thMonth: Pay by monthly fourth peak bandwidth
	//
	// 	- PayByBandwidth: Pay by fixed bandwidth
	//
	// This parameter is required.
	//
	// example:
	//
	// 95BandwidthByMonth
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The subscription duration of the instance.
	//
	// 	- If you leave the PeriodUnit parameter empty, the instance is purchased on a monthly basis. Valid values: Day and Month.
	//
	// 	- If you set PeriodUnit to Day, you can set Period only to 3.
	//
	// 	- If you set PeriodUnit to Month, you can set Period to a number from 1 to 9, or set Period to 12.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The billing cycle of the ENS instance. Valid values:
	//
	// 	- Month (default):
	//
	// 	- Day
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The number of instances.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Quantity *int32 `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
}

func (s DescribePriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceRequest) SetDataDisk(v []*DescribePriceRequestDataDisk) *DescribePriceRequest {
	s.DataDisk = v
	return s
}

func (s *DescribePriceRequest) SetSystemDisk(v *DescribePriceRequestSystemDisk) *DescribePriceRequest {
	s.SystemDisk = v
	return s
}

func (s *DescribePriceRequest) SetDataDisks(v []*DescribePriceRequestDataDisks) *DescribePriceRequest {
	s.DataDisks = v
	return s
}

func (s *DescribePriceRequest) SetEnsRegionId(v string) *DescribePriceRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceType(v string) *DescribePriceRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribePriceRequest) SetInternetChargeType(v string) *DescribePriceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribePriceRequest) SetPeriod(v int32) *DescribePriceRequest {
	s.Period = &v
	return s
}

func (s *DescribePriceRequest) SetPeriodUnit(v string) *DescribePriceRequest {
	s.PeriodUnit = &v
	return s
}

func (s *DescribePriceRequest) SetQuantity(v int32) *DescribePriceRequest {
	s.Quantity = &v
	return s
}

type DescribePriceRequestDataDisk struct {
	// The size of the data disk. Unit: GB. If you specify this parameter, this parameter takes precedence over the Size property in DataDisks.
	//
	// example:
	//
	// 50
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribePriceRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequestDataDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceRequestDataDisk) SetSize(v int32) *DescribePriceRequestDataDisk {
	s.Size = &v
	return s
}

type DescribePriceRequestSystemDisk struct {
	// The size of the system disk. Unit: GB.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribePriceRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceRequestSystemDisk) SetSize(v int32) *DescribePriceRequestSystemDisk {
	s.Size = &v
	return s
}

type DescribePriceRequestDataDisks struct {
	// The category of the disk.
	//
	// example:
	//
	// cloud_efficiency
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The size of the data disk. Unit: GB.
	//
	// example:
	//
	// 50
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribePriceRequestDataDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequestDataDisks) GoString() string {
	return s.String()
}

func (s *DescribePriceRequestDataDisks) SetCategory(v string) *DescribePriceRequestDataDisks {
	s.Category = &v
	return s
}

func (s *DescribePriceRequestDataDisks) SetSize(v int64) *DescribePriceRequestDataDisks {
	s.Size = &v
	return s
}

type DescribePriceShrinkRequest struct {
	DataDisk   []*DescribePriceShrinkRequestDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	SystemDisk *DescribePriceShrinkRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	// If you leave DataDisk.1.Size empty, the value that you specified for this parameter is used.
	DataDisksShrink *string `json:"DataDisks,omitempty" xml:"DataDisks,omitempty"`
	// The ID of the ENS node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The specifications of instances.
	//
	// This parameter is required.
	//
	// example:
	//
	// ens.sn1.tiny
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The bandwidth metering method of the instance. Valid values:
	//
	// 	- BandwidthByDay: Pay by daily peak bandwidth
	//
	// 	- 95BandwidthByMonth: Pay by monthly 95th percentile bandwidth
	//
	// 	- PayByBandwidth4thMonth: Pay by monthly fourth peak bandwidth
	//
	// 	- PayByBandwidth: Pay by fixed bandwidth
	//
	// This parameter is required.
	//
	// example:
	//
	// 95BandwidthByMonth
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The subscription duration of the instance.
	//
	// 	- If you leave the PeriodUnit parameter empty, the instance is purchased on a monthly basis. Valid values: Day and Month.
	//
	// 	- If you set PeriodUnit to Day, you can set Period only to 3.
	//
	// 	- If you set PeriodUnit to Month, you can set Period to a number from 1 to 9, or set Period to 12.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The billing cycle of the ENS instance. Valid values:
	//
	// 	- Month (default):
	//
	// 	- Day
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The number of instances.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Quantity *int32 `json:"Quantity,omitempty" xml:"Quantity,omitempty"`
}

func (s DescribePriceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceShrinkRequest) SetDataDisk(v []*DescribePriceShrinkRequestDataDisk) *DescribePriceShrinkRequest {
	s.DataDisk = v
	return s
}

func (s *DescribePriceShrinkRequest) SetSystemDisk(v *DescribePriceShrinkRequestSystemDisk) *DescribePriceShrinkRequest {
	s.SystemDisk = v
	return s
}

func (s *DescribePriceShrinkRequest) SetDataDisksShrink(v string) *DescribePriceShrinkRequest {
	s.DataDisksShrink = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetEnsRegionId(v string) *DescribePriceShrinkRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetInstanceType(v string) *DescribePriceShrinkRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetInternetChargeType(v string) *DescribePriceShrinkRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetPeriod(v int32) *DescribePriceShrinkRequest {
	s.Period = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetPeriodUnit(v string) *DescribePriceShrinkRequest {
	s.PeriodUnit = &v
	return s
}

func (s *DescribePriceShrinkRequest) SetQuantity(v int32) *DescribePriceShrinkRequest {
	s.Quantity = &v
	return s
}

type DescribePriceShrinkRequestDataDisk struct {
	// The size of the data disk. Unit: GB. If you specify this parameter, this parameter takes precedence over the Size property in DataDisks.
	//
	// example:
	//
	// 50
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribePriceShrinkRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceShrinkRequestDataDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceShrinkRequestDataDisk) SetSize(v int32) *DescribePriceShrinkRequestDataDisk {
	s.Size = &v
	return s
}

type DescribePriceShrinkRequestSystemDisk struct {
	// The size of the system disk. Unit: GB.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribePriceShrinkRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceShrinkRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *DescribePriceShrinkRequestSystemDisk) SetSize(v int32) *DescribePriceShrinkRequestSystemDisk {
	s.Size = &v
	return s
}

type DescribePriceResponseBody struct {
	// The price information.
	PriceInfo *DescribePriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 694EB8FF-446C-5B1E-8146-9629E492551F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBody) SetPriceInfo(v *DescribePriceResponseBodyPriceInfo) *DescribePriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribePriceResponseBody) SetRequestId(v string) *DescribePriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribePriceResponseBodyPriceInfo struct {
	// The price.
	Price *DescribePriceResponseBodyPriceInfoPrice `json:"Price,omitempty" xml:"Price,omitempty" type:"Struct"`
}

func (s DescribePriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfo) SetPrice(v *DescribePriceResponseBodyPriceInfoPrice) *DescribePriceResponseBodyPriceInfo {
	s.Price = v
	return s
}

type DescribePriceResponseBodyPriceInfoPrice struct {
	// The type of currency.
	//
	// 	- USD: US dollar
	//
	// 	- JPY: Japanese Yen
	//
	// example:
	//
	// USD
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The discount.
	//
	// example:
	//
	// 1
	DiscountPrice *float32 `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	// The original price.
	//
	// example:
	//
	// 16125.00
	OriginalPrice *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	// The final price.
	//
	// example:
	//
	// 126.75
	TradePrice *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoPrice) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetCurrency(v string) *DescribePriceResponseBodyPriceInfoPrice {
	s.Currency = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetDiscountPrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetOriginalPrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetTradePrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.TradePrice = &v
	return s
}

type DescribePriceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePriceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceResponse) SetHeaders(v map[string]*string) *DescribePriceResponse {
	s.Headers = v
	return s
}

func (s *DescribePriceResponse) SetStatusCode(v int32) *DescribePriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePriceResponse) SetBody(v *DescribePriceResponseBody) *DescribePriceResponse {
	s.Body = v
	return s
}

type DescribeRegionIspsRequest struct {
	// The ID of the node. You can specify only one node ID in a call.
	//
	// example:
	//
	// cn-dalian-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
}

func (s DescribeRegionIspsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionIspsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionIspsRequest) SetEnsRegionId(v string) *DescribeRegionIspsRequest {
	s.EnsRegionId = &v
	return s
}

type DescribeRegionIspsResponseBody struct {
	// The list of ISPs.
	Isps []*DescribeRegionIspsResponseBodyIsps `json:"Isps,omitempty" xml:"Isps,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// DC90CC7E-23B6-5A90-9097-A17CE4A161C4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionIspsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionIspsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionIspsResponseBody) SetIsps(v []*DescribeRegionIspsResponseBodyIsps) *DescribeRegionIspsResponseBody {
	s.Isps = v
	return s
}

func (s *DescribeRegionIspsResponseBody) SetRequestId(v string) *DescribeRegionIspsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRegionIspsResponseBodyIsps struct {
	// The code of the ISP.
	//
	// example:
	//
	// cmcc
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The name of the ISP.
	//
	// example:
	//
	// move
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeRegionIspsResponseBodyIsps) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionIspsResponseBodyIsps) GoString() string {
	return s.String()
}

func (s *DescribeRegionIspsResponseBodyIsps) SetCode(v string) *DescribeRegionIspsResponseBodyIsps {
	s.Code = &v
	return s
}

func (s *DescribeRegionIspsResponseBodyIsps) SetName(v string) *DescribeRegionIspsResponseBodyIsps {
	s.Name = &v
	return s
}

type DescribeRegionIspsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRegionIspsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRegionIspsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionIspsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionIspsResponse) SetHeaders(v map[string]*string) *DescribeRegionIspsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionIspsResponse) SetStatusCode(v int32) *DescribeRegionIspsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionIspsResponse) SetBody(v *DescribeRegionIspsResponseBody) *DescribeRegionIspsResponse {
	s.Body = v
	return s
}

type DescribeRegionResourceRequest struct {
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	IspType     *string `json:"IspType,omitempty" xml:"IspType,omitempty"`
}

func (s DescribeRegionResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceRequest) SetEnsRegionId(v string) *DescribeRegionResourceRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeRegionResourceRequest) SetIspType(v string) *DescribeRegionResourceRequest {
	s.IspType = &v
	return s
}

type DescribeRegionResourceResponseBody struct {
	Data      []*DescribeRegionResourceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	Desc      *string                                   `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Msg       *string                                   `json:"Msg,omitempty" xml:"Msg,omitempty"`
	Pager     *DescribeRegionResourceResponseBodyPager  `json:"Pager,omitempty" xml:"Pager,omitempty" type:"Struct"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBody) SetData(v []*DescribeRegionResourceResponseBodyData) *DescribeRegionResourceResponseBody {
	s.Data = v
	return s
}

func (s *DescribeRegionResourceResponseBody) SetDesc(v string) *DescribeRegionResourceResponseBody {
	s.Desc = &v
	return s
}

func (s *DescribeRegionResourceResponseBody) SetMsg(v string) *DescribeRegionResourceResponseBody {
	s.Msg = &v
	return s
}

func (s *DescribeRegionResourceResponseBody) SetPager(v *DescribeRegionResourceResponseBodyPager) *DescribeRegionResourceResponseBody {
	s.Pager = v
	return s
}

func (s *DescribeRegionResourceResponseBody) SetRequestId(v string) *DescribeRegionResourceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRegionResourceResponseBodyData struct {
	AreaCode       *string                                             `json:"AreaCode,omitempty" xml:"AreaCode,omitempty"`
	AreaName       *string                                             `json:"AreaName,omitempty" xml:"AreaName,omitempty"`
	ArmCard        *DescribeRegionResourceResponseBodyDataArmCard      `json:"ArmCard,omitempty" xml:"ArmCard,omitempty" type:"Struct"`
	Attributes     []*string                                           `json:"Attributes,omitempty" xml:"Attributes,omitempty" type:"Repeated"`
	Bandwidth      *DescribeRegionResourceResponseBodyDataBandwidth    `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" type:"Struct"`
	BlockStorage   *DescribeRegionResourceResponseBodyDataBlockStorage `json:"BlockStorage,omitempty" xml:"BlockStorage,omitempty" type:"Struct"`
	CountryCode    *string                                             `json:"CountryCode,omitempty" xml:"CountryCode,omitempty"`
	CountryName    *string                                             `json:"CountryName,omitempty" xml:"CountryName,omitempty"`
	Cpu            *DescribeRegionResourceResponseBodyDataCpu          `json:"Cpu,omitempty" xml:"Cpu,omitempty" type:"Struct"`
	Gpu            *DescribeRegionResourceResponseBodyDataGpu          `json:"Gpu,omitempty" xml:"Gpu,omitempty" type:"Struct"`
	Hdd            *DescribeRegionResourceResponseBodyDataHdd          `json:"Hdd,omitempty" xml:"Hdd,omitempty" type:"Struct"`
	HouseId        *string                                             `json:"HouseId,omitempty" xml:"HouseId,omitempty"`
	Ipv4s          []*DescribeRegionResourceResponseBodyDataIpv4s      `json:"Ipv4s,omitempty" xml:"Ipv4s,omitempty" type:"Repeated"`
	Ipv6s          []*DescribeRegionResourceResponseBodyDataIpv6s      `json:"Ipv6s,omitempty" xml:"Ipv6s,omitempty" type:"Repeated"`
	IspTypes       []*string                                           `json:"IspTypes,omitempty" xml:"IspTypes,omitempty" type:"Repeated"`
	Memory         *DescribeRegionResourceResponseBodyDataMemory       `json:"Memory,omitempty" xml:"Memory,omitempty" type:"Struct"`
	Name           *string                                             `json:"Name,omitempty" xml:"Name,omitempty"`
	Nvme           *DescribeRegionResourceResponseBodyDataNvme         `json:"Nvme,omitempty" xml:"Nvme,omitempty" type:"Struct"`
	OssStorage     *DescribeRegionResourceResponseBodyDataOssStorage   `json:"OssStorage,omitempty" xml:"OssStorage,omitempty" type:"Struct"`
	Pangu          *DescribeRegionResourceResponseBodyDataPangu        `json:"Pangu,omitempty" xml:"Pangu,omitempty" type:"Struct"`
	PcfarmNum      *DescribeRegionResourceResponseBodyDataPcfarmNum    `json:"PcfarmNum,omitempty" xml:"PcfarmNum,omitempty" type:"Struct"`
	Poc            *bool                                               `json:"Poc,omitempty" xml:"Poc,omitempty"`
	ProvinceCode   *string                                             `json:"ProvinceCode,omitempty" xml:"ProvinceCode,omitempty"`
	ProvinceName   *string                                             `json:"ProvinceName,omitempty" xml:"ProvinceName,omitempty"`
	ReserveDisable *bool                                               `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	Ssd            *DescribeRegionResourceResponseBodyDataSsd          `json:"Ssd,omitempty" xml:"Ssd,omitempty" type:"Struct"`
	StatusDisable  *bool                                               `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	Type           *string                                             `json:"Type,omitempty" xml:"Type,omitempty"`
	Uuid           *string                                             `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	Virtual        *string                                             `json:"Virtual,omitempty" xml:"Virtual,omitempty"`
}

func (s DescribeRegionResourceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyData) SetAreaCode(v string) *DescribeRegionResourceResponseBodyData {
	s.AreaCode = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetAreaName(v string) *DescribeRegionResourceResponseBodyData {
	s.AreaName = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetArmCard(v *DescribeRegionResourceResponseBodyDataArmCard) *DescribeRegionResourceResponseBodyData {
	s.ArmCard = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetAttributes(v []*string) *DescribeRegionResourceResponseBodyData {
	s.Attributes = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetBandwidth(v *DescribeRegionResourceResponseBodyDataBandwidth) *DescribeRegionResourceResponseBodyData {
	s.Bandwidth = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetBlockStorage(v *DescribeRegionResourceResponseBodyDataBlockStorage) *DescribeRegionResourceResponseBodyData {
	s.BlockStorage = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetCountryCode(v string) *DescribeRegionResourceResponseBodyData {
	s.CountryCode = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetCountryName(v string) *DescribeRegionResourceResponseBodyData {
	s.CountryName = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetCpu(v *DescribeRegionResourceResponseBodyDataCpu) *DescribeRegionResourceResponseBodyData {
	s.Cpu = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetGpu(v *DescribeRegionResourceResponseBodyDataGpu) *DescribeRegionResourceResponseBodyData {
	s.Gpu = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetHdd(v *DescribeRegionResourceResponseBodyDataHdd) *DescribeRegionResourceResponseBodyData {
	s.Hdd = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetHouseId(v string) *DescribeRegionResourceResponseBodyData {
	s.HouseId = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetIpv4s(v []*DescribeRegionResourceResponseBodyDataIpv4s) *DescribeRegionResourceResponseBodyData {
	s.Ipv4s = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetIpv6s(v []*DescribeRegionResourceResponseBodyDataIpv6s) *DescribeRegionResourceResponseBodyData {
	s.Ipv6s = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetIspTypes(v []*string) *DescribeRegionResourceResponseBodyData {
	s.IspTypes = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetMemory(v *DescribeRegionResourceResponseBodyDataMemory) *DescribeRegionResourceResponseBodyData {
	s.Memory = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetName(v string) *DescribeRegionResourceResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetNvme(v *DescribeRegionResourceResponseBodyDataNvme) *DescribeRegionResourceResponseBodyData {
	s.Nvme = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetOssStorage(v *DescribeRegionResourceResponseBodyDataOssStorage) *DescribeRegionResourceResponseBodyData {
	s.OssStorage = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetPangu(v *DescribeRegionResourceResponseBodyDataPangu) *DescribeRegionResourceResponseBodyData {
	s.Pangu = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetPcfarmNum(v *DescribeRegionResourceResponseBodyDataPcfarmNum) *DescribeRegionResourceResponseBodyData {
	s.PcfarmNum = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetPoc(v bool) *DescribeRegionResourceResponseBodyData {
	s.Poc = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetProvinceCode(v string) *DescribeRegionResourceResponseBodyData {
	s.ProvinceCode = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetProvinceName(v string) *DescribeRegionResourceResponseBodyData {
	s.ProvinceName = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyData {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetSsd(v *DescribeRegionResourceResponseBodyDataSsd) *DescribeRegionResourceResponseBodyData {
	s.Ssd = v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyData {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetType(v string) *DescribeRegionResourceResponseBodyData {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetUuid(v string) *DescribeRegionResourceResponseBodyData {
	s.Uuid = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyData) SetVirtual(v string) *DescribeRegionResourceResponseBodyData {
	s.Virtual = &v
	return s
}

type DescribeRegionResourceResponseBodyDataArmCard struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataArmCard) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataArmCard) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataArmCard {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataArmCard {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataArmCard {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataArmCard {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataArmCard {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataArmCard {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataArmCard {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataArmCard {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataArmCard {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetType(v string) *DescribeRegionResourceResponseBodyDataArmCard {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataArmCard {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataArmCard) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataArmCard {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataBandwidth struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataBandwidth) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataBandwidth) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetType(v string) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBandwidth) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataBandwidth {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataBlockStorage struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataBlockStorage) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataBlockStorage) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetType(v string) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataBlockStorage) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataBlockStorage {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataCpu struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataCpu) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataCpu) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataCpu {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataCpu {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataCpu {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataCpu {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataCpu {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataCpu {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataCpu {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataCpu {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataCpu {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetType(v string) *DescribeRegionResourceResponseBodyDataCpu {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataCpu {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataCpu) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataCpu {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataGpu struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataGpu) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataGpu) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataGpu {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataGpu {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataGpu {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataGpu {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataGpu {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataGpu {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataGpu {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataGpu {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataGpu {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetType(v string) *DescribeRegionResourceResponseBodyDataGpu {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataGpu {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataGpu) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataGpu {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataHdd struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataHdd) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataHdd) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataHdd {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataHdd {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataHdd {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataHdd {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataHdd {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataHdd {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataHdd {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataHdd {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataHdd {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetType(v string) *DescribeRegionResourceResponseBodyDataHdd {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataHdd {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataHdd) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataHdd {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataIpv4s struct {
	Display             *string `json:"Display,omitempty" xml:"Display,omitempty"`
	Isp                 *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
	Vlan                *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataIpv4s) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataIpv4s) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetDisplay(v string) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetIsp(v string) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.Isp = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetType(v string) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.UsedRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv4s) SetVlan(v string) *DescribeRegionResourceResponseBodyDataIpv4s {
	s.Vlan = &v
	return s
}

type DescribeRegionResourceResponseBodyDataIpv6s struct {
	Display             *string `json:"Display,omitempty" xml:"Display,omitempty"`
	Isp                 *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
	Vlan                *string `json:"Vlan,omitempty" xml:"Vlan,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataIpv6s) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataIpv6s) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetDisplay(v string) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetIsp(v string) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.Isp = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetType(v string) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.UsedRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataIpv6s) SetVlan(v string) *DescribeRegionResourceResponseBodyDataIpv6s {
	s.Vlan = &v
	return s
}

type DescribeRegionResourceResponseBodyDataMemory struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataMemory) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataMemory) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataMemory {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataMemory {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataMemory {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataMemory {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataMemory {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataMemory {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataMemory {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataMemory {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataMemory {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetType(v string) *DescribeRegionResourceResponseBodyDataMemory {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataMemory {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataMemory) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataMemory {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataNvme struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataNvme) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataNvme) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataNvme {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataNvme {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataNvme {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataNvme {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataNvme {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataNvme {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataNvme {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataNvme {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataNvme {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetType(v string) *DescribeRegionResourceResponseBodyDataNvme {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataNvme {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataNvme) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataNvme {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataOssStorage struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataOssStorage) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataOssStorage) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetType(v string) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataOssStorage) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataOssStorage {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataPangu struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataPangu) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataPangu) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataPangu {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataPangu {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataPangu {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataPangu {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataPangu {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataPangu {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataPangu {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataPangu {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataPangu {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetType(v string) *DescribeRegionResourceResponseBodyDataPangu {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataPangu {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPangu) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataPangu {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataPcfarmNum struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataPcfarmNum) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataPcfarmNum) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetType(v string) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataPcfarmNum) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataPcfarmNum {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyDataSsd struct {
	Display             *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	OversellRatio       *int64  `json:"OversellRatio,omitempty" xml:"OversellRatio,omitempty"`
	Remain              *int64  `json:"Remain,omitempty" xml:"Remain,omitempty"`
	ReserveDisable      *bool   `json:"ReserveDisable,omitempty" xml:"ReserveDisable,omitempty"`
	ReserveDisableTotal *int64  `json:"ReserveDisableTotal,omitempty" xml:"ReserveDisableTotal,omitempty"`
	Reserved            *int64  `json:"Reserved,omitempty" xml:"Reserved,omitempty"`
	StatusDisable       *bool   `json:"StatusDisable,omitempty" xml:"StatusDisable,omitempty"`
	StatusDisableTotal  *int64  `json:"StatusDisableTotal,omitempty" xml:"StatusDisableTotal,omitempty"`
	Total               *int64  `json:"Total,omitempty" xml:"Total,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Used                *int64  `json:"Used,omitempty" xml:"Used,omitempty"`
	UsedRatio           *int64  `json:"UsedRatio,omitempty" xml:"UsedRatio,omitempty"`
}

func (s DescribeRegionResourceResponseBodyDataSsd) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyDataSsd) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetDisplay(v bool) *DescribeRegionResourceResponseBodyDataSsd {
	s.Display = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetOversellRatio(v int64) *DescribeRegionResourceResponseBodyDataSsd {
	s.OversellRatio = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetRemain(v int64) *DescribeRegionResourceResponseBodyDataSsd {
	s.Remain = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetReserveDisable(v bool) *DescribeRegionResourceResponseBodyDataSsd {
	s.ReserveDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetReserveDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataSsd {
	s.ReserveDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetReserved(v int64) *DescribeRegionResourceResponseBodyDataSsd {
	s.Reserved = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetStatusDisable(v bool) *DescribeRegionResourceResponseBodyDataSsd {
	s.StatusDisable = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetStatusDisableTotal(v int64) *DescribeRegionResourceResponseBodyDataSsd {
	s.StatusDisableTotal = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetTotal(v int64) *DescribeRegionResourceResponseBodyDataSsd {
	s.Total = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetType(v string) *DescribeRegionResourceResponseBodyDataSsd {
	s.Type = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetUsed(v int64) *DescribeRegionResourceResponseBodyDataSsd {
	s.Used = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyDataSsd) SetUsedRatio(v int64) *DescribeRegionResourceResponseBodyDataSsd {
	s.UsedRatio = &v
	return s
}

type DescribeRegionResourceResponseBodyPager struct {
	Page  *int64 `json:"Page,omitempty" xml:"Page,omitempty"`
	Size  *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeRegionResourceResponseBodyPager) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponseBodyPager) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponseBodyPager) SetPage(v int64) *DescribeRegionResourceResponseBodyPager {
	s.Page = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyPager) SetSize(v int64) *DescribeRegionResourceResponseBodyPager {
	s.Size = &v
	return s
}

func (s *DescribeRegionResourceResponseBodyPager) SetTotal(v int64) *DescribeRegionResourceResponseBodyPager {
	s.Total = &v
	return s
}

type DescribeRegionResourceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRegionResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRegionResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionResourceResponse) SetHeaders(v map[string]*string) *DescribeRegionResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionResourceResponse) SetStatusCode(v int32) *DescribeRegionResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionResourceResponse) SetBody(v *DescribeRegionResourceResponseBody) *DescribeRegionResourceResponse {
	s.Body = v
	return s
}

type DescribeReservedResourceResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information about the image.
	Images *DescribeReservedResourceResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 6666C5A5-75ED-422E-A022-7121FA18C968
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The resources.
	SupportResources *DescribeReservedResourceResponseBodySupportResources `json:"SupportResources,omitempty" xml:"SupportResources,omitempty" type:"Struct"`
}

func (s DescribeReservedResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBody) SetCode(v int32) *DescribeReservedResourceResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeReservedResourceResponseBody) SetImages(v *DescribeReservedResourceResponseBodyImages) *DescribeReservedResourceResponseBody {
	s.Images = v
	return s
}

func (s *DescribeReservedResourceResponseBody) SetRequestId(v string) *DescribeReservedResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeReservedResourceResponseBody) SetSupportResources(v *DescribeReservedResourceResponseBodySupportResources) *DescribeReservedResourceResponseBody {
	s.SupportResources = v
	return s
}

type DescribeReservedResourceResponseBodyImages struct {
	Image []*DescribeReservedResourceResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeReservedResourceResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodyImages) SetImage(v []*DescribeReservedResourceResponseBodyImagesImage) *DescribeReservedResourceResponseBodyImages {
	s.Image = v
	return s
}

type DescribeReservedResourceResponseBodyImagesImage struct {
	// The ID of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_alibase_****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_alibase_****
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
}

func (s DescribeReservedResourceResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodyImagesImage) SetImageId(v string) *DescribeReservedResourceResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeReservedResourceResponseBodyImagesImage) SetImageName(v string) *DescribeReservedResourceResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

type DescribeReservedResourceResponseBodySupportResources struct {
	SupportResource []*DescribeReservedResourceResponseBodySupportResourcesSupportResource `json:"SupportResource,omitempty" xml:"SupportResource,omitempty" type:"Repeated"`
}

func (s DescribeReservedResourceResponseBodySupportResources) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodySupportResources) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodySupportResources) SetSupportResource(v []*DescribeReservedResourceResponseBodySupportResourcesSupportResource) *DescribeReservedResourceResponseBodySupportResources {
	s.SupportResource = v
	return s
}

type DescribeReservedResourceResponseBodySupportResourcesSupportResource struct {
	// The sizes of data disks.
	DataDiskSizes *DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes `json:"DataDiskSizes,omitempty" xml:"DataDiskSizes,omitempty" type:"Struct"`
	// The ID of the node.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The specifications of instances.
	//
	// example:
	//
	// ens.sn1.stiny
	InstanceSpec *string `json:"InstanceSpec,omitempty" xml:"InstanceSpec,omitempty"`
	// The number of resources that you can purchase.
	//
	// example:
	//
	// 9
	SupportResourcesCount *string `json:"SupportResourcesCount,omitempty" xml:"SupportResourcesCount,omitempty"`
	// The sizes of system disks.
	SystemDiskSizes *DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes `json:"SystemDiskSizes,omitempty" xml:"SystemDiskSizes,omitempty" type:"Struct"`
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResource) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResource) SetDataDiskSizes(v *DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes) *DescribeReservedResourceResponseBodySupportResourcesSupportResource {
	s.DataDiskSizes = v
	return s
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResource) SetEnsRegionId(v string) *DescribeReservedResourceResponseBodySupportResourcesSupportResource {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResource) SetInstanceSpec(v string) *DescribeReservedResourceResponseBodySupportResourcesSupportResource {
	s.InstanceSpec = &v
	return s
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResource) SetSupportResourcesCount(v string) *DescribeReservedResourceResponseBodySupportResourcesSupportResource {
	s.SupportResourcesCount = &v
	return s
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResource) SetSystemDiskSizes(v *DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes) *DescribeReservedResourceResponseBodySupportResourcesSupportResource {
	s.SystemDiskSizes = v
	return s
}

type DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes struct {
	DataDiskSize []*string `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty" type:"Repeated"`
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes) SetDataDiskSize(v []*string) *DescribeReservedResourceResponseBodySupportResourcesSupportResourceDataDiskSizes {
	s.DataDiskSize = v
	return s
}

type DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes struct {
	SystemDiskSize []*string `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty" type:"Repeated"`
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes) SetSystemDiskSize(v []*string) *DescribeReservedResourceResponseBodySupportResourcesSupportResourceSystemDiskSizes {
	s.SystemDiskSize = v
	return s
}

type DescribeReservedResourceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeReservedResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeReservedResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeReservedResourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeReservedResourceResponse) SetHeaders(v map[string]*string) *DescribeReservedResourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeReservedResourceResponse) SetStatusCode(v int32) *DescribeReservedResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeReservedResourceResponse) SetBody(v *DescribeReservedResourceResponseBody) *DescribeReservedResourceResponse {
	s.Body = v
	return s
}

type DescribeResourceTimelineRequest struct {
	BeginTime *string `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Uuid      *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeResourceTimelineRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTimelineRequest) GoString() string {
	return s.String()
}

func (s *DescribeResourceTimelineRequest) SetBeginTime(v string) *DescribeResourceTimelineRequest {
	s.BeginTime = &v
	return s
}

func (s *DescribeResourceTimelineRequest) SetEndTime(v string) *DescribeResourceTimelineRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeResourceTimelineRequest) SetUuid(v string) *DescribeResourceTimelineRequest {
	s.Uuid = &v
	return s
}

type DescribeResourceTimelineResponseBody struct {
	AvailableEvents []*DescribeResourceTimelineResponseBodyAvailableEvents `json:"AvailableEvents,omitempty" xml:"AvailableEvents,omitempty" type:"Repeated"`
	BizEvents       []*DescribeResourceTimelineResponseBodyBizEvents       `json:"BizEvents,omitempty" xml:"BizEvents,omitempty" type:"Repeated"`
	Desc            *string                                                `json:"Desc,omitempty" xml:"Desc,omitempty"`
	InventoryEvents []*DescribeResourceTimelineResponseBodyInventoryEvents `json:"InventoryEvents,omitempty" xml:"InventoryEvents,omitempty" type:"Repeated"`
	Msg             *string                                                `json:"Msg,omitempty" xml:"Msg,omitempty"`
	RequestId       *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ReserveEvents   []*DescribeResourceTimelineResponseBodyReserveEvents   `json:"ReserveEvents,omitempty" xml:"ReserveEvents,omitempty" type:"Repeated"`
}

func (s DescribeResourceTimelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTimelineResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceTimelineResponseBody) SetAvailableEvents(v []*DescribeResourceTimelineResponseBodyAvailableEvents) *DescribeResourceTimelineResponseBody {
	s.AvailableEvents = v
	return s
}

func (s *DescribeResourceTimelineResponseBody) SetBizEvents(v []*DescribeResourceTimelineResponseBodyBizEvents) *DescribeResourceTimelineResponseBody {
	s.BizEvents = v
	return s
}

func (s *DescribeResourceTimelineResponseBody) SetDesc(v string) *DescribeResourceTimelineResponseBody {
	s.Desc = &v
	return s
}

func (s *DescribeResourceTimelineResponseBody) SetInventoryEvents(v []*DescribeResourceTimelineResponseBodyInventoryEvents) *DescribeResourceTimelineResponseBody {
	s.InventoryEvents = v
	return s
}

func (s *DescribeResourceTimelineResponseBody) SetMsg(v string) *DescribeResourceTimelineResponseBody {
	s.Msg = &v
	return s
}

func (s *DescribeResourceTimelineResponseBody) SetRequestId(v string) *DescribeResourceTimelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceTimelineResponseBody) SetReserveEvents(v []*DescribeResourceTimelineResponseBodyReserveEvents) *DescribeResourceTimelineResponseBody {
	s.ReserveEvents = v
	return s
}

type DescribeResourceTimelineResponseBodyAvailableEvents struct {
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OccurrenceTime *string `json:"OccurrenceTime,omitempty" xml:"OccurrenceTime,omitempty"`
	Reason         *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeResourceTimelineResponseBodyAvailableEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTimelineResponseBodyAvailableEvents) GoString() string {
	return s.String()
}

func (s *DescribeResourceTimelineResponseBodyAvailableEvents) SetName(v string) *DescribeResourceTimelineResponseBodyAvailableEvents {
	s.Name = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyAvailableEvents) SetOccurrenceTime(v string) *DescribeResourceTimelineResponseBodyAvailableEvents {
	s.OccurrenceTime = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyAvailableEvents) SetReason(v string) *DescribeResourceTimelineResponseBodyAvailableEvents {
	s.Reason = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyAvailableEvents) SetType(v string) *DescribeResourceTimelineResponseBodyAvailableEvents {
	s.Type = &v
	return s
}

type DescribeResourceTimelineResponseBodyBizEvents struct {
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OccurrenceTime *string `json:"OccurrenceTime,omitempty" xml:"OccurrenceTime,omitempty"`
	Reason         *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeResourceTimelineResponseBodyBizEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTimelineResponseBodyBizEvents) GoString() string {
	return s.String()
}

func (s *DescribeResourceTimelineResponseBodyBizEvents) SetName(v string) *DescribeResourceTimelineResponseBodyBizEvents {
	s.Name = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyBizEvents) SetOccurrenceTime(v string) *DescribeResourceTimelineResponseBodyBizEvents {
	s.OccurrenceTime = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyBizEvents) SetReason(v string) *DescribeResourceTimelineResponseBodyBizEvents {
	s.Reason = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyBizEvents) SetType(v string) *DescribeResourceTimelineResponseBodyBizEvents {
	s.Type = &v
	return s
}

type DescribeResourceTimelineResponseBodyInventoryEvents struct {
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OccurrenceTime *string `json:"OccurrenceTime,omitempty" xml:"OccurrenceTime,omitempty"`
	Reason         *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeResourceTimelineResponseBodyInventoryEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTimelineResponseBodyInventoryEvents) GoString() string {
	return s.String()
}

func (s *DescribeResourceTimelineResponseBodyInventoryEvents) SetName(v string) *DescribeResourceTimelineResponseBodyInventoryEvents {
	s.Name = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyInventoryEvents) SetOccurrenceTime(v string) *DescribeResourceTimelineResponseBodyInventoryEvents {
	s.OccurrenceTime = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyInventoryEvents) SetReason(v string) *DescribeResourceTimelineResponseBodyInventoryEvents {
	s.Reason = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyInventoryEvents) SetType(v string) *DescribeResourceTimelineResponseBodyInventoryEvents {
	s.Type = &v
	return s
}

type DescribeResourceTimelineResponseBodyReserveEvents struct {
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OccurrenceTime *string `json:"OccurrenceTime,omitempty" xml:"OccurrenceTime,omitempty"`
	Reason         *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeResourceTimelineResponseBodyReserveEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTimelineResponseBodyReserveEvents) GoString() string {
	return s.String()
}

func (s *DescribeResourceTimelineResponseBodyReserveEvents) SetName(v string) *DescribeResourceTimelineResponseBodyReserveEvents {
	s.Name = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyReserveEvents) SetOccurrenceTime(v string) *DescribeResourceTimelineResponseBodyReserveEvents {
	s.OccurrenceTime = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyReserveEvents) SetReason(v string) *DescribeResourceTimelineResponseBodyReserveEvents {
	s.Reason = &v
	return s
}

func (s *DescribeResourceTimelineResponseBodyReserveEvents) SetType(v string) *DescribeResourceTimelineResponseBodyReserveEvents {
	s.Type = &v
	return s
}

type DescribeResourceTimelineResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeResourceTimelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeResourceTimelineResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTimelineResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceTimelineResponse) SetHeaders(v map[string]*string) *DescribeResourceTimelineResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceTimelineResponse) SetStatusCode(v int32) *DescribeResourceTimelineResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceTimelineResponse) SetBody(v *DescribeResourceTimelineResponseBody) *DescribeResourceTimelineResponse {
	s.Body = v
	return s
}

type DescribeSDGRequest struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Default value: 10
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The IDs of SDGs that you want to query. By default, all SDGs are queried.
	SDGIds []*string `json:"SDGIds,omitempty" xml:"SDGIds,omitempty" type:"Repeated"`
}

func (s DescribeSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGRequest) GoString() string {
	return s.String()
}

func (s *DescribeSDGRequest) SetPageNumber(v int32) *DescribeSDGRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSDGRequest) SetPageSize(v int32) *DescribeSDGRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSDGRequest) SetSDGIds(v []*string) *DescribeSDGRequest {
	s.SDGIds = v
	return s
}

type DescribeSDGShrinkRequest struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Default value: 10
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The IDs of SDGs that you want to query. By default, all SDGs are queried.
	SDGIdsShrink *string `json:"SDGIds,omitempty" xml:"SDGIds,omitempty"`
}

func (s DescribeSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeSDGShrinkRequest) SetPageNumber(v int32) *DescribeSDGShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSDGShrinkRequest) SetPageSize(v int32) *DescribeSDGShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSDGShrinkRequest) SetSDGIdsShrink(v string) *DescribeSDGShrinkRequest {
	s.SDGIdsShrink = &v
	return s
}

type DescribeSDGResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// F3B261DD-3858-4D3C-877D-303ADF374600
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the SDGs.
	SDGs []*DescribeSDGResponseBodySDGs `json:"SDGs,omitempty" xml:"SDGs,omitempty" type:"Repeated"`
	// The total number of returned entries.
	//
	// example:
	//
	// 49
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSDGResponseBody) SetPageNumber(v int32) *DescribeSDGResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSDGResponseBody) SetPageSize(v int32) *DescribeSDGResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSDGResponseBody) SetRequestId(v string) *DescribeSDGResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSDGResponseBody) SetSDGs(v []*DescribeSDGResponseBodySDGs) *DescribeSDGResponseBody {
	s.SDGs = v
	return s
}

func (s *DescribeSDGResponseBody) SetTotalCount(v int32) *DescribeSDGResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSDGResponseBodySDGs struct {
	// SDGs that have snapshots.
	AvaliableRegionIds []*DescribeSDGResponseBodySDGsAvaliableRegionIds `json:"AvaliableRegionIds,omitempty" xml:"AvaliableRegionIds,omitempty" type:"Repeated"`
	// The ID of the instance on which the SDG is created.
	//
	// example:
	//
	// aic-5x20dyeos****
	CreationInstanceId *string `json:"CreationInstanceId,omitempty" xml:"CreationInstanceId,omitempty"`
	// The ID of the node on which the SDG is created.
	//
	// example:
	//
	// cn-hangzhou-26
	CreationRegionId *string `json:"CreationRegionId,omitempty" xml:"CreationRegionId,omitempty"`
	// The time when the first SDG in the node was created.
	//
	// example:
	//
	// 2023-02-27 15:07:21
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the SDG.
	//
	// example:
	//
	// Testing SDGs
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the source SDG from which you want to create an SDG. The value of this parameter is the value of the **FromSDGId*	- parameter that you need to specify when you call the [CreateSDG](https://help.aliyun.com/document_detail/608128.html) operation.
	//
	// example:
	//
	// sdg-xxxxx
	ParentSDGId *string `json:"ParentSDGId,omitempty" xml:"ParentSDGId,omitempty"`
	// The preload information.
	PreloadInfos []*DescribeSDGResponseBodySDGsPreloadInfos `json:"PreloadInfos,omitempty" xml:"PreloadInfos,omitempty" type:"Repeated"`
	// The ID of the SDG.
	//
	// example:
	//
	// sdg-30e1fdba7196bc****
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
	// The size of the SDG. Unit: GB.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The status of the SDG creation. Valid values:
	//
	// 	- **sdg_making**
	//
	// 	- **sdg_saving**
	//
	// 	- **failed**
	//
	// 	- **success**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the SDG was last updated.
	//
	// example:
	//
	// 2023-02-27 16:04:39
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeSDGResponseBodySDGs) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGResponseBodySDGs) GoString() string {
	return s.String()
}

func (s *DescribeSDGResponseBodySDGs) SetAvaliableRegionIds(v []*DescribeSDGResponseBodySDGsAvaliableRegionIds) *DescribeSDGResponseBodySDGs {
	s.AvaliableRegionIds = v
	return s
}

func (s *DescribeSDGResponseBodySDGs) SetCreationInstanceId(v string) *DescribeSDGResponseBodySDGs {
	s.CreationInstanceId = &v
	return s
}

func (s *DescribeSDGResponseBodySDGs) SetCreationRegionId(v string) *DescribeSDGResponseBodySDGs {
	s.CreationRegionId = &v
	return s
}

func (s *DescribeSDGResponseBodySDGs) SetCreationTime(v string) *DescribeSDGResponseBodySDGs {
	s.CreationTime = &v
	return s
}

func (s *DescribeSDGResponseBodySDGs) SetDescription(v string) *DescribeSDGResponseBodySDGs {
	s.Description = &v
	return s
}

func (s *DescribeSDGResponseBodySDGs) SetParentSDGId(v string) *DescribeSDGResponseBodySDGs {
	s.ParentSDGId = &v
	return s
}

func (s *DescribeSDGResponseBodySDGs) SetPreloadInfos(v []*DescribeSDGResponseBodySDGsPreloadInfos) *DescribeSDGResponseBodySDGs {
	s.PreloadInfos = v
	return s
}

func (s *DescribeSDGResponseBodySDGs) SetSDGId(v string) *DescribeSDGResponseBodySDGs {
	s.SDGId = &v
	return s
}

func (s *DescribeSDGResponseBodySDGs) SetSize(v int64) *DescribeSDGResponseBodySDGs {
	s.Size = &v
	return s
}

func (s *DescribeSDGResponseBodySDGs) SetStatus(v string) *DescribeSDGResponseBodySDGs {
	s.Status = &v
	return s
}

func (s *DescribeSDGResponseBodySDGs) SetUpdateTime(v string) *DescribeSDGResponseBodySDGs {
	s.UpdateTime = &v
	return s
}

type DescribeSDGResponseBodySDGsAvaliableRegionIds struct {
	// The time when the SDG was created on the node.
	//
	// example:
	//
	// 2023-02-27 15:13:26
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// cn-hangzhou-26
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// sp-517qu0tgznrg622he7nf4wd7n
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The status of the SDG on the node. Valid values:
	//
	// 	- **sdg_making**
	//
	// 	- **sdg_saving**
	//
	// 	- **sdg_copying**
	//
	// 	- **failed**
	//
	// 	- **success**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSDGResponseBodySDGsAvaliableRegionIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGResponseBodySDGsAvaliableRegionIds) GoString() string {
	return s.String()
}

func (s *DescribeSDGResponseBodySDGsAvaliableRegionIds) SetCreationTime(v string) *DescribeSDGResponseBodySDGsAvaliableRegionIds {
	s.CreationTime = &v
	return s
}

func (s *DescribeSDGResponseBodySDGsAvaliableRegionIds) SetRegionId(v string) *DescribeSDGResponseBodySDGsAvaliableRegionIds {
	s.RegionId = &v
	return s
}

func (s *DescribeSDGResponseBodySDGsAvaliableRegionIds) SetSnapshotId(v string) *DescribeSDGResponseBodySDGsAvaliableRegionIds {
	s.SnapshotId = &v
	return s
}

func (s *DescribeSDGResponseBodySDGsAvaliableRegionIds) SetStatus(v string) *DescribeSDGResponseBodySDGsAvaliableRegionIds {
	s.Status = &v
	return s
}

type DescribeSDGResponseBodySDGsPreloadInfos struct {
	// The time when the SDG was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-02-16T06:18:40Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The namespace.
	//
	// example:
	//
	// test-20000
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The number of redundant replicas to quickly respond to shared mounts.
	//
	// example:
	//
	// 2
	RedundantNum *int32 `json:"RedundantNum,omitempty" xml:"RedundantNum,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The time when the status was last updated.
	//
	// example:
	//
	// 2021-01-22T08:17Z
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeSDGResponseBodySDGsPreloadInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGResponseBodySDGsPreloadInfos) GoString() string {
	return s.String()
}

func (s *DescribeSDGResponseBodySDGsPreloadInfos) SetCreationTime(v string) *DescribeSDGResponseBodySDGsPreloadInfos {
	s.CreationTime = &v
	return s
}

func (s *DescribeSDGResponseBodySDGsPreloadInfos) SetNamespace(v string) *DescribeSDGResponseBodySDGsPreloadInfos {
	s.Namespace = &v
	return s
}

func (s *DescribeSDGResponseBodySDGsPreloadInfos) SetRedundantNum(v int32) *DescribeSDGResponseBodySDGsPreloadInfos {
	s.RedundantNum = &v
	return s
}

func (s *DescribeSDGResponseBodySDGsPreloadInfos) SetRegionId(v string) *DescribeSDGResponseBodySDGsPreloadInfos {
	s.RegionId = &v
	return s
}

func (s *DescribeSDGResponseBodySDGsPreloadInfos) SetUpdateTime(v string) *DescribeSDGResponseBodySDGsPreloadInfos {
	s.UpdateTime = &v
	return s
}

type DescribeSDGResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGResponse) GoString() string {
	return s.String()
}

func (s *DescribeSDGResponse) SetHeaders(v map[string]*string) *DescribeSDGResponse {
	s.Headers = v
	return s
}

func (s *DescribeSDGResponse) SetStatusCode(v int32) *DescribeSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSDGResponse) SetBody(v *DescribeSDGResponseBody) *DescribeSDGResponse {
	s.Body = v
	return s
}

type DescribeSDGDeploymentStatusRequest struct {
	// The deployment type.
	//
	// example:
	//
	// shared
	DeploymentType *string `json:"DeploymentType,omitempty" xml:"DeploymentType,omitempty"`
	// IDs of Android in Container (AIC) instances.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The number of the page to return. Pages start from page **1**. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The IDs of the nodes.
	RegionIds []*string `json:"RegionIds,omitempty" xml:"RegionIds,omitempty" type:"Repeated"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
	// The deployment status of the SDG.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSDGDeploymentStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGDeploymentStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeSDGDeploymentStatusRequest) SetDeploymentType(v string) *DescribeSDGDeploymentStatusRequest {
	s.DeploymentType = &v
	return s
}

func (s *DescribeSDGDeploymentStatusRequest) SetInstanceIds(v []*string) *DescribeSDGDeploymentStatusRequest {
	s.InstanceIds = v
	return s
}

func (s *DescribeSDGDeploymentStatusRequest) SetPageNumber(v int32) *DescribeSDGDeploymentStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSDGDeploymentStatusRequest) SetPageSize(v int32) *DescribeSDGDeploymentStatusRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSDGDeploymentStatusRequest) SetRegionIds(v []*string) *DescribeSDGDeploymentStatusRequest {
	s.RegionIds = v
	return s
}

func (s *DescribeSDGDeploymentStatusRequest) SetSDGId(v string) *DescribeSDGDeploymentStatusRequest {
	s.SDGId = &v
	return s
}

func (s *DescribeSDGDeploymentStatusRequest) SetStatus(v string) *DescribeSDGDeploymentStatusRequest {
	s.Status = &v
	return s
}

type DescribeSDGDeploymentStatusShrinkRequest struct {
	// The deployment type.
	//
	// example:
	//
	// shared
	DeploymentType *string `json:"DeploymentType,omitempty" xml:"DeploymentType,omitempty"`
	// IDs of Android in Container (AIC) instances.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The number of the page to return. Pages start from page **1**. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The IDs of the nodes.
	RegionIdsShrink *string `json:"RegionIds,omitempty" xml:"RegionIds,omitempty"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
	// The deployment status of the SDG.
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSDGDeploymentStatusShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGDeploymentStatusShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeSDGDeploymentStatusShrinkRequest) SetDeploymentType(v string) *DescribeSDGDeploymentStatusShrinkRequest {
	s.DeploymentType = &v
	return s
}

func (s *DescribeSDGDeploymentStatusShrinkRequest) SetInstanceIdsShrink(v string) *DescribeSDGDeploymentStatusShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *DescribeSDGDeploymentStatusShrinkRequest) SetPageNumber(v int32) *DescribeSDGDeploymentStatusShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSDGDeploymentStatusShrinkRequest) SetPageSize(v int32) *DescribeSDGDeploymentStatusShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSDGDeploymentStatusShrinkRequest) SetRegionIdsShrink(v string) *DescribeSDGDeploymentStatusShrinkRequest {
	s.RegionIdsShrink = &v
	return s
}

func (s *DescribeSDGDeploymentStatusShrinkRequest) SetSDGId(v string) *DescribeSDGDeploymentStatusShrinkRequest {
	s.SDGId = &v
	return s
}

func (s *DescribeSDGDeploymentStatusShrinkRequest) SetStatus(v string) *DescribeSDGDeploymentStatusShrinkRequest {
	s.Status = &v
	return s
}

type DescribeSDGDeploymentStatusResponseBody struct {
	// The list of SDG deployment information.
	DeploymentStatus []*DescribeSDGDeploymentStatusResponseBodyDeploymentStatus `json:"DeploymentStatus,omitempty" xml:"DeploymentStatus,omitempty" type:"Repeated"`
	// The page number. Pages start from page 1. Default value: 1
	//
	// example:
	//
	// 1
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 68B85217-03B8-5141-9216-EA4D7C496B9A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of queried deployment records.
	//
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSDGDeploymentStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGDeploymentStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSDGDeploymentStatusResponseBody) SetDeploymentStatus(v []*DescribeSDGDeploymentStatusResponseBodyDeploymentStatus) *DescribeSDGDeploymentStatusResponseBody {
	s.DeploymentStatus = v
	return s
}

func (s *DescribeSDGDeploymentStatusResponseBody) SetPageNumber(v int64) *DescribeSDGDeploymentStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSDGDeploymentStatusResponseBody) SetPageSize(v int64) *DescribeSDGDeploymentStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSDGDeploymentStatusResponseBody) SetRequestId(v string) *DescribeSDGDeploymentStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSDGDeploymentStatusResponseBody) SetTotalCount(v int64) *DescribeSDGDeploymentStatusResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSDGDeploymentStatusResponseBodyDeploymentStatus struct {
	// The ID of the AIC instance.
	//
	// example:
	//
	// aic-xxxx
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The deployment type.
	//
	// Valid values:
	//
	// 	- overlay: read/write splitting.
	//
	// 	- common: common deployment.
	//
	// example:
	//
	// overlay
	MountType *string `json:"MountType,omitempty" xml:"MountType,omitempty"`
	// The deployment phase of the SDG.
	//
	// example:
	//
	// attach
	Phase *string `json:"Phase,omitempty" xml:"Phase,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The deployment status of the SDG.
	//
	// Valid values:
	//
	// 	- sdg_deploying
	//
	// 	- success
	//
	// 	- failed
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the status was last updated.
	//
	// example:
	//
	// 2023-02-17T02:44:31Z
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeSDGDeploymentStatusResponseBodyDeploymentStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGDeploymentStatusResponseBodyDeploymentStatus) GoString() string {
	return s.String()
}

func (s *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus) SetInstanceId(v string) *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus {
	s.InstanceId = &v
	return s
}

func (s *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus) SetMountType(v string) *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus {
	s.MountType = &v
	return s
}

func (s *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus) SetPhase(v string) *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus {
	s.Phase = &v
	return s
}

func (s *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus) SetRegionId(v string) *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus {
	s.RegionId = &v
	return s
}

func (s *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus) SetStatus(v string) *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus {
	s.Status = &v
	return s
}

func (s *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus) SetUpdateTime(v string) *DescribeSDGDeploymentStatusResponseBodyDeploymentStatus {
	s.UpdateTime = &v
	return s
}

type DescribeSDGDeploymentStatusResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSDGDeploymentStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSDGDeploymentStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGDeploymentStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeSDGDeploymentStatusResponse) SetHeaders(v map[string]*string) *DescribeSDGDeploymentStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeSDGDeploymentStatusResponse) SetStatusCode(v int32) *DescribeSDGDeploymentStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSDGDeploymentStatusResponse) SetBody(v *DescribeSDGDeploymentStatusResponseBody) *DescribeSDGDeploymentStatusResponse {
	s.Body = v
	return s
}

type DescribeSDGsRequest struct {
	// The AIC instance ID to be queried.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The IDs of SDGs that you want to query. By default, all SDGs are queried.
	SDGIds []*string `json:"SDGIds,omitempty" xml:"SDGIds,omitempty" type:"Repeated"`
}

func (s DescribeSDGsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSDGsRequest) SetInstanceIds(v []*string) *DescribeSDGsRequest {
	s.InstanceIds = v
	return s
}

func (s *DescribeSDGsRequest) SetSDGIds(v []*string) *DescribeSDGsRequest {
	s.SDGIds = v
	return s
}

type DescribeSDGsShrinkRequest struct {
	// The AIC instance ID to be queried.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The IDs of SDGs that you want to query. By default, all SDGs are queried.
	SDGIdsShrink *string `json:"SDGIds,omitempty" xml:"SDGIds,omitempty"`
}

func (s DescribeSDGsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGsShrinkRequest) GoString() string {
	return s.String()
}

func (s *DescribeSDGsShrinkRequest) SetInstanceIdsShrink(v string) *DescribeSDGsShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *DescribeSDGsShrinkRequest) SetSDGIdsShrink(v string) *DescribeSDGsShrinkRequest {
	s.SDGIdsShrink = &v
	return s
}

type DescribeSDGsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 3703C4AC-9396-458C-8F25-1D701334D309
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the SDGs.
	SDGs []*DescribeSDGsResponseBodySDGs `json:"SDGs,omitempty" xml:"SDGs,omitempty" type:"Repeated"`
}

func (s DescribeSDGsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSDGsResponseBody) SetRequestId(v string) *DescribeSDGsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSDGsResponseBody) SetSDGs(v []*DescribeSDGsResponseBodySDGs) *DescribeSDGsResponseBody {
	s.SDGs = v
	return s
}

type DescribeSDGsResponseBodySDGs struct {
	// The IDs of available edge nodes.
	AvaliableRegionIds []*DescribeSDGsResponseBodySDGsAvaliableRegionIds `json:"AvaliableRegionIds,omitempty" xml:"AvaliableRegionIds,omitempty" type:"Repeated"`
	// The ID of the instance on which the SDG is created.
	//
	// example:
	//
	// aic-5x20dyeos****
	CreationInstanceId *string `json:"CreationInstanceId,omitempty" xml:"CreationInstanceId,omitempty"`
	// The ID of the node on which the SDG is created.
	//
	// example:
	//
	// cn-hangzhou-26
	CreationRegionId *string `json:"CreationRegionId,omitempty" xml:"CreationRegionId,omitempty"`
	// The time when the SDG was first created.
	//
	// example:
	//
	// 2023-02-27 15:07:21
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The deployment information.
	DeployedInstanceIds []*DescribeSDGsResponseBodySDGsDeployedInstanceIds `json:"DeployedInstanceIds,omitempty" xml:"DeployedInstanceIds,omitempty" type:"Repeated"`
	// The description of the SDG.
	//
	// example:
	//
	// Testing SDGs
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the source SDG from which you want to create an SDG. The value of this parameter is the value of the **FromSDGId*	- parameter that you need to specify when you call the [CreateSDG](https://help.aliyun.com/document_detail/608128.html) operation.
	//
	// example:
	//
	// sdg-xxxxx
	ParentSDGId *string `json:"ParentSDGId,omitempty" xml:"ParentSDGId,omitempty"`
	// The ID of the SDG.
	//
	// example:
	//
	// sdg-30e1fdba7196bc****
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
	// The size of the SDG. Unit: GB.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The status of the SDG creation. Valid values:
	//
	// 	- **sdg_making**
	//
	// 	- **sdg_saving**
	//
	// 	- **failed**
	//
	// 	- **success**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the SDG was last updated.
	//
	// example:
	//
	// 2023-02-27 16:04:39
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeSDGsResponseBodySDGs) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGsResponseBodySDGs) GoString() string {
	return s.String()
}

func (s *DescribeSDGsResponseBodySDGs) SetAvaliableRegionIds(v []*DescribeSDGsResponseBodySDGsAvaliableRegionIds) *DescribeSDGsResponseBodySDGs {
	s.AvaliableRegionIds = v
	return s
}

func (s *DescribeSDGsResponseBodySDGs) SetCreationInstanceId(v string) *DescribeSDGsResponseBodySDGs {
	s.CreationInstanceId = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGs) SetCreationRegionId(v string) *DescribeSDGsResponseBodySDGs {
	s.CreationRegionId = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGs) SetCreationTime(v string) *DescribeSDGsResponseBodySDGs {
	s.CreationTime = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGs) SetDeployedInstanceIds(v []*DescribeSDGsResponseBodySDGsDeployedInstanceIds) *DescribeSDGsResponseBodySDGs {
	s.DeployedInstanceIds = v
	return s
}

func (s *DescribeSDGsResponseBodySDGs) SetDescription(v string) *DescribeSDGsResponseBodySDGs {
	s.Description = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGs) SetParentSDGId(v string) *DescribeSDGsResponseBodySDGs {
	s.ParentSDGId = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGs) SetSDGId(v string) *DescribeSDGsResponseBodySDGs {
	s.SDGId = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGs) SetSize(v int64) *DescribeSDGsResponseBodySDGs {
	s.Size = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGs) SetStatus(v string) *DescribeSDGsResponseBodySDGs {
	s.Status = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGs) SetUpdateTime(v string) *DescribeSDGsResponseBodySDGs {
	s.UpdateTime = &v
	return s
}

type DescribeSDGsResponseBodySDGsAvaliableRegionIds struct {
	// The time when the SDG was created on the node.
	//
	// example:
	//
	// 2023-02-27 15:13:26
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-hangzhou-26
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// mock-clone_snapshot_id
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The status of the SDG on the node. Valid values:
	//
	// 	- **sdg_making**
	//
	// 	- **sdg_saving**
	//
	// 	- **sdg_copying**
	//
	// 	- **failed**
	//
	// 	- **success**
	//
	// example:
	//
	// success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSDGsResponseBodySDGsAvaliableRegionIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGsResponseBodySDGsAvaliableRegionIds) GoString() string {
	return s.String()
}

func (s *DescribeSDGsResponseBodySDGsAvaliableRegionIds) SetCreationTime(v string) *DescribeSDGsResponseBodySDGsAvaliableRegionIds {
	s.CreationTime = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGsAvaliableRegionIds) SetRegionId(v string) *DescribeSDGsResponseBodySDGsAvaliableRegionIds {
	s.RegionId = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGsAvaliableRegionIds) SetSnapshotId(v string) *DescribeSDGsResponseBodySDGsAvaliableRegionIds {
	s.SnapshotId = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGsAvaliableRegionIds) SetStatus(v string) *DescribeSDGsResponseBodySDGsAvaliableRegionIds {
	s.Status = &v
	return s
}

type DescribeSDGsResponseBodySDGsDeployedInstanceIds struct {
	// The time when the SDG was deployed on the instance.
	//
	// example:
	//
	// 2023-02-27 16:48:43
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The deployment type of the SDG. Valid values:
	//
	// 	- common: common deployment.
	//
	// 	- overlay: read/write splitting deployment.
	//
	// example:
	//
	// overlay
	DeploymentType *string `json:"DeploymentType,omitempty" xml:"DeploymentType,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// aic-5x20dyeos****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The deployment status. Valid values:
	//
	// 	- **sdg_deploying**
	//
	// 	- **failed**
	//
	// 	- **success**
	//
	// example:
	//
	// sdg_deploying
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSDGsResponseBodySDGsDeployedInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGsResponseBodySDGsDeployedInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeSDGsResponseBodySDGsDeployedInstanceIds) SetCreationTime(v string) *DescribeSDGsResponseBodySDGsDeployedInstanceIds {
	s.CreationTime = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGsDeployedInstanceIds) SetDeploymentType(v string) *DescribeSDGsResponseBodySDGsDeployedInstanceIds {
	s.DeploymentType = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGsDeployedInstanceIds) SetInstanceId(v string) *DescribeSDGsResponseBodySDGsDeployedInstanceIds {
	s.InstanceId = &v
	return s
}

func (s *DescribeSDGsResponseBodySDGsDeployedInstanceIds) SetStatus(v string) *DescribeSDGsResponseBodySDGsDeployedInstanceIds {
	s.Status = &v
	return s
}

type DescribeSDGsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSDGsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSDGsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSDGsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSDGsResponse) SetHeaders(v map[string]*string) *DescribeSDGsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSDGsResponse) SetStatusCode(v int32) *DescribeSDGsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSDGsResponse) SetBody(v *DescribeSDGsResponseBody) *DescribeSDGsResponse {
	s.Body = v
	return s
}

type DescribeSecondaryPublicIpAddressesRequest struct {
	// The ID of the edge node.
	//
	// example:
	//
	// cn-hangzhou-44
	EnsRegionId  *string   `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The Internet service provider. Valid values:
	//
	// 	- cmcc: China Mobile.
	//
	// 	- unicom: China Unicom.
	//
	// 	- telecom: China Telecom.
	//
	// example:
	//
	// unicom
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The number of the page to return. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The secondary IP address.
	//
	// example:
	//
	// 12.XXX.XXX.4
	SecondaryPublicIpAddress *string `json:"SecondaryPublicIpAddress,omitempty" xml:"SecondaryPublicIpAddress,omitempty"`
	// The ID of the secondary public IP address.
	//
	// example:
	//
	// spi-5wys0pio93c9f9ukzj2f2fwyr
	SecondaryPublicIpId *string `json:"SecondaryPublicIpId,omitempty" xml:"SecondaryPublicIpId,omitempty"`
}

func (s DescribeSecondaryPublicIpAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecondaryPublicIpAddressesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecondaryPublicIpAddressesRequest) SetEnsRegionId(v string) *DescribeSecondaryPublicIpAddressesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesRequest) SetEnsRegionIds(v []*string) *DescribeSecondaryPublicIpAddressesRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesRequest) SetIsp(v string) *DescribeSecondaryPublicIpAddressesRequest {
	s.Isp = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesRequest) SetPageNumber(v int32) *DescribeSecondaryPublicIpAddressesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesRequest) SetPageSize(v int32) *DescribeSecondaryPublicIpAddressesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesRequest) SetSecondaryPublicIpAddress(v string) *DescribeSecondaryPublicIpAddressesRequest {
	s.SecondaryPublicIpAddress = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesRequest) SetSecondaryPublicIpId(v string) *DescribeSecondaryPublicIpAddressesRequest {
	s.SecondaryPublicIpId = &v
	return s
}

type DescribeSecondaryPublicIpAddressesResponseBody struct {
	// The page number returned.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The array of returned secondary IP addresses.
	SecondaryPublicIpAddresses []*DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses `json:"SecondaryPublicIpAddresses,omitempty" xml:"SecondaryPublicIpAddresses,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 13
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSecondaryPublicIpAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecondaryPublicIpAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecondaryPublicIpAddressesResponseBody) SetPageNumber(v int32) *DescribeSecondaryPublicIpAddressesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBody) SetPageSize(v int32) *DescribeSecondaryPublicIpAddressesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBody) SetRequestId(v string) *DescribeSecondaryPublicIpAddressesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBody) SetSecondaryPublicIpAddresses(v []*DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) *DescribeSecondaryPublicIpAddressesResponseBody {
	s.SecondaryPublicIpAddresses = v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBody) SetTotalCount(v int32) *DescribeSecondaryPublicIpAddressesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses struct {
	// The subnet mask of the CIDR block.
	//
	// example:
	//
	// 24
	CidrMask *int32 `json:"CidrMask,omitempty" xml:"CidrMask,omitempty"`
	// The time when the secondary public IP address was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-07-25T09:43:49Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-beijing-15
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The gateway.
	//
	// example:
	//
	// 12.XXX.XXX.1
	Gateway *string `json:"Gateway,omitempty" xml:"Gateway,omitempty"`
	// The version of the IP address. Valid values:
	//
	// 	- **ipv4**
	//
	// 	- **ipv6**
	//
	// example:
	//
	// ipv4
	IpVersion *string `json:"IpVersion,omitempty" xml:"IpVersion,omitempty"`
	// The Internet service provider. Valid values:
	//
	// 	- cmcc: China Mobile.
	//
	// 	- unicom: China Unicom.
	//
	// 	- telecom: China Telecom.
	//
	// example:
	//
	// telecom
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The secondary public IP address.
	//
	// example:
	//
	// 12.XXX.XXX.4
	SecondaryPublicIpAddress *string `json:"SecondaryPublicIpAddress,omitempty" xml:"SecondaryPublicIpAddress,omitempty"`
	// The ID of the secondary public IP address.
	//
	// example:
	//
	// spi-5wys0pio93c9f9ukzj2f2fwyr
	SecondaryPublicIpId *string `json:"SecondaryPublicIpId,omitempty" xml:"SecondaryPublicIpId,omitempty"`
}

func (s DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) GoString() string {
	return s.String()
}

func (s *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) SetCidrMask(v int32) *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses {
	s.CidrMask = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) SetCreationTime(v string) *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses {
	s.CreationTime = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) SetEnsRegionId(v string) *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) SetGateway(v string) *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses {
	s.Gateway = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) SetIpVersion(v string) *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses {
	s.IpVersion = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) SetIsp(v string) *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses {
	s.Isp = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) SetSecondaryPublicIpAddress(v string) *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses {
	s.SecondaryPublicIpAddress = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses) SetSecondaryPublicIpId(v string) *DescribeSecondaryPublicIpAddressesResponseBodySecondaryPublicIpAddresses {
	s.SecondaryPublicIpId = &v
	return s
}

type DescribeSecondaryPublicIpAddressesResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSecondaryPublicIpAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSecondaryPublicIpAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecondaryPublicIpAddressesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecondaryPublicIpAddressesResponse) SetHeaders(v map[string]*string) *DescribeSecondaryPublicIpAddressesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponse) SetStatusCode(v int32) *DescribeSecondaryPublicIpAddressesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecondaryPublicIpAddressesResponse) SetBody(v *DescribeSecondaryPublicIpAddressesResponseBody) *DescribeSecondaryPublicIpAddressesResponse {
	s.Body = v
	return s
}

type DescribeSecurityGroupAttributeRequest struct {
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp67acfmxazb4ph***
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s DescribeSecurityGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeRequest) SetSecurityGroupId(v string) *DescribeSecurityGroupAttributeRequest {
	s.SecurityGroupId = &v
	return s
}

type DescribeSecurityGroupAttributeResponseBody struct {
	// The description of the security group.
	//
	// example:
	//
	// testDescription1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Details about the rules.
	Permissions *DescribeSecurityGroupAttributeResponseBodyPermissions `json:"Permissions,omitempty" xml:"Permissions,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the destination security group.
	//
	// example:
	//
	// sg-bp1gxw6bznjjvhu3****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The name of the destination security group.
	//
	// example:
	//
	// testSecurityGroupName2
	SecurityGroupName *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
}

func (s DescribeSecurityGroupAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetDescription(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetPermissions(v *DescribeSecurityGroupAttributeResponseBodyPermissions) *DescribeSecurityGroupAttributeResponseBody {
	s.Permissions = v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetRequestId(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetSecurityGroupId(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetSecurityGroupName(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.SecurityGroupName = &v
	return s
}

type DescribeSecurityGroupAttributeResponseBodyPermissions struct {
	Permission []*DescribeSecurityGroupAttributeResponseBodyPermissionsPermission `json:"Permission,omitempty" xml:"Permission,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupAttributeResponseBodyPermissions) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBodyPermissions) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissions) SetPermission(v []*DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) *DescribeSecurityGroupAttributeResponseBodyPermissions {
	s.Permission = v
	return s
}

type DescribeSecurityGroupAttributeResponseBodyPermissionsPermission struct {
	// The time at which the security group rule was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2018-12-12T07:28:38Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description.
	//
	// example:
	//
	// testDescription1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The range of destination IP addresses for outbound access control.
	//
	// example:
	//
	// 0.0.0.0/0
	DestCidrIp *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	// The direction in which the security group rule is applied.
	//
	// example:
	//
	// ingress
	Direction *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	// The transport layer protocol.
	//
	// example:
	//
	// TCP
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The policy.
	//
	// example:
	//
	// Accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The source port range.
	//
	// example:
	//
	// 80/80
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of the rule.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The range of source IP addresses for inbound access control.
	//
	// example:
	//
	// 0.0.0.0/0
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	// The source port number range for the security group.
	//
	// example:
	//
	// 22/22
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetCreationTime(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.CreationTime = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetDescription(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetDestCidrIp(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.DestCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetDirection(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.Direction = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetIpProtocol(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.IpProtocol = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetPolicy(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.Policy = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetPortRange(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.PortRange = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetPriority(v int32) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.Priority = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetSourceCidrIp(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.SourceCidrIp = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission) SetSourcePortRange(v string) *DescribeSecurityGroupAttributeResponseBodyPermissionsPermission {
	s.SourcePortRange = &v
	return s
}

type DescribeSecurityGroupAttributeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSecurityGroupAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSecurityGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponse) SetHeaders(v map[string]*string) *DescribeSecurityGroupAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetStatusCode(v int32) *DescribeSecurityGroupAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetBody(v *DescribeSecurityGroupAttributeResponseBody) *DescribeSecurityGroupAttributeResponse {
	s.Body = v
	return s
}

type DescribeSecurityGroupsRequest struct {
	// The page number.
	//
	// 	- Pages start from page 1.
	//
	// 	- Default value: 1
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// 	- Maximum value: 50.
	//
	// 	- Default value: 10
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-bp67acfmxazb4ph***
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The name of the security group.
	//
	// example:
	//
	// DocTest
	SecurityGroupName *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
}

func (s DescribeSecurityGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsRequest) SetPageNumber(v int32) *DescribeSecurityGroupsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetPageSize(v int32) *DescribeSecurityGroupsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupId(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsRequest) SetSecurityGroupName(v string) *DescribeSecurityGroupsRequest {
	s.SecurityGroupName = &v
	return s
}

type DescribeSecurityGroupsResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details about security groups.
	SecurityGroups *DescribeSecurityGroupsResponseBodySecurityGroups `json:"SecurityGroups,omitempty" xml:"SecurityGroups,omitempty" type:"Struct"`
	// The total number of returned pages.
	//
	// example:
	//
	// 49
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSecurityGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBody) SetPageNumber(v int32) *DescribeSecurityGroupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetPageSize(v int32) *DescribeSecurityGroupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetRequestId(v string) *DescribeSecurityGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetSecurityGroups(v *DescribeSecurityGroupsResponseBodySecurityGroups) *DescribeSecurityGroupsResponseBody {
	s.SecurityGroups = v
	return s
}

func (s *DescribeSecurityGroupsResponseBody) SetTotalCount(v int32) *DescribeSecurityGroupsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSecurityGroupsResponseBodySecurityGroups struct {
	SecurityGroup []*DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup `json:"SecurityGroup,omitempty" xml:"SecurityGroup,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupsResponseBodySecurityGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBodySecurityGroups) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroups) SetSecurityGroup(v []*DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) *DescribeSecurityGroupsResponseBodySecurityGroups {
	s.SecurityGroup = v
	return s
}

type DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup struct {
	// The creation time. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-11-01T06:08:46Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the security group.
	//
	// example:
	//
	// TestDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The number of associated instances.
	//
	// example:
	//
	// 5
	InstanceCount *int32 `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty"`
	// The list of instance IDs.
	InstanceIds *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupInstanceIds `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Struct"`
	// The IDs of ENIs.
	NetworkInterfaceIds *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupNetworkInterfaceIds `json:"NetworkInterfaceIds,omitempty" xml:"NetworkInterfaceIds,omitempty" type:"Struct"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-bp67acfmxazb4ph***
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The name of the security group.
	//
	// example:
	//
	// DocTest
	SecurityGroupName *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
}

func (s DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetCreationTime(v string) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.CreationTime = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetDescription(v string) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetInstanceCount(v int32) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.InstanceCount = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetInstanceIds(v *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupInstanceIds) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.InstanceIds = v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetNetworkInterfaceIds(v *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupNetworkInterfaceIds) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.NetworkInterfaceIds = v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetSecurityGroupId(v string) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup) SetSecurityGroupName(v string) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroup {
	s.SecurityGroupName = &v
	return s
}

type DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupInstanceIds struct {
	InstanceId []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupInstanceIds) SetInstanceId(v []*string) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupInstanceIds {
	s.InstanceId = v
	return s
}

type DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupNetworkInterfaceIds struct {
	NetworkInterfaceId []*string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupNetworkInterfaceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupNetworkInterfaceIds) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupNetworkInterfaceIds) SetNetworkInterfaceId(v []*string) *DescribeSecurityGroupsResponseBodySecurityGroupsSecurityGroupNetworkInterfaceIds {
	s.NetworkInterfaceId = v
	return s
}

type DescribeSecurityGroupsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSecurityGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSecurityGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupsResponse) SetHeaders(v map[string]*string) *DescribeSecurityGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityGroupsResponse) SetStatusCode(v int32) *DescribeSecurityGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSecurityGroupsResponse) SetBody(v *DescribeSecurityGroupsResponseBody) *DescribeSecurityGroupsResponse {
	s.Body = v
	return s
}

type DescribeSelfImagesRequest struct {
	// The ID of the image. Fuzzy search is supported.
	//
	// example:
	//
	// centos_6_08_64_20G_a****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image. Fuzzy search is supported.
	//
	// example:
	//
	// centos_6_08_64_20G_a****
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The page number to return. Pages start from page **1**. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// sp-5xg63dmojc1oaa3pk****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s DescribeSelfImagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesRequest) SetImageId(v string) *DescribeSelfImagesRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeSelfImagesRequest) SetImageName(v string) *DescribeSelfImagesRequest {
	s.ImageName = &v
	return s
}

func (s *DescribeSelfImagesRequest) SetPageNumber(v int32) *DescribeSelfImagesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSelfImagesRequest) SetPageSize(v int32) *DescribeSelfImagesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSelfImagesRequest) SetSnapshotId(v string) *DescribeSelfImagesRequest {
	s.SnapshotId = &v
	return s
}

type DescribeSelfImagesResponseBody struct {
	// The HTTP status code that is returned.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The image information.
	Images *DescribeSelfImagesResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: 50. Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// A8B8EB73-B4FD-4262-8EF6-680DF39C9BA0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSelfImagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesResponseBody) SetCode(v int32) *DescribeSelfImagesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeSelfImagesResponseBody) SetImages(v *DescribeSelfImagesResponseBodyImages) *DescribeSelfImagesResponseBody {
	s.Images = v
	return s
}

func (s *DescribeSelfImagesResponseBody) SetPageNumber(v string) *DescribeSelfImagesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSelfImagesResponseBody) SetPageSize(v string) *DescribeSelfImagesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSelfImagesResponseBody) SetRequestId(v string) *DescribeSelfImagesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSelfImagesResponseBody) SetTotalCount(v string) *DescribeSelfImagesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSelfImagesResponseBodyImages struct {
	Image []*DescribeSelfImagesResponseBodyImagesImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Repeated"`
}

func (s DescribeSelfImagesResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesResponseBodyImages) SetImage(v []*DescribeSelfImagesResponseBodyImagesImage) *DescribeSelfImagesResponseBodyImages {
	s.Image = v
	return s
}

type DescribeSelfImagesResponseBodyImagesImage struct {
	// The image architecture. Valid values:
	//
	// 	- i386
	//
	// 	- x86_64
	//
	// example:
	//
	// x86_64
	Architecture *string `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	// Computing type. ens_vm/ens: x86 computing. bare_metal: x86 bare machine or x86 bare metal. arm_vm: ARM computing. arm_bare_metal: ARM bare machine or ARM bare metal. pcfarm: heterogeneous computing.
	//
	// example:
	//
	// ens_vm
	ComputeType *string `json:"ComputeType,omitempty" xml:"ComputeType,omitempty"`
	// The image creation time. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2017-12-08T12:10:03Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The mappings between the disk and the snapshot in the image.
	DiskDeviceMappings *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappings `json:"DiskDeviceMappings,omitempty" xml:"DiskDeviceMappings,omitempty" type:"Struct"`
	// The ID of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_a****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image.
	//
	// example:
	//
	// centos_6_08_64_20G_a****
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The source of the image. Valid values:
	//
	// 	- **others**: a custom image that is shared by other Alibaba Cloud accounts.
	//
	// 	- **self**: your own custom image.
	//
	// example:
	//
	// system
	ImageOwnerAlias *string `json:"ImageOwnerAlias,omitempty" xml:"ImageOwnerAlias,omitempty"`
	// The size of the image. Unit: GiB.
	//
	// example:
	//
	// 20
	ImageSize *string `json:"ImageSize,omitempty" xml:"ImageSize,omitempty"`
	// The size of the image storage.
	//
	// example:
	//
	// 400
	ImageStorageSize *string `json:"ImageStorageSize,omitempty" xml:"ImageStorageSize,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-5iqczfxps7csjrxeca****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The operating system version.
	//
	// example:
	//
	// 7.2
	OsVersion *string `json:"OsVersion,omitempty" xml:"OsVersion,omitempty"`
	// The platform.
	//
	// 	- centos
	//
	// 	- ubuntu
	//
	// 	- alios
	//
	// 	- debian
	//
	// 	- rhel
	//
	// 	- windows
	//
	// example:
	//
	// centos
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-shenzhen
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The snapshot ID.
	//
	// example:
	//
	// sp-5yt3bdedxzdz6t6uuw****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The state of the image.
	//
	// 	- Creating.
	//
	// 	- Packing.
	//
	// 	- Uploading.
	//
	// 	- Pack_failed.
	//
	// 	- Upload_failed.
	//
	// 	- Available: Only images in the Available state can be used and operated.
	//
	// 	- Unavailable.
	//
	// 	- Copying.
	//
	// example:
	//
	// Creating
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSelfImagesResponseBodyImagesImage) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesResponseBodyImagesImage) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetArchitecture(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.Architecture = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetComputeType(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.ComputeType = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetCreationTime(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.CreationTime = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetDiskDeviceMappings(v *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappings) *DescribeSelfImagesResponseBodyImagesImage {
	s.DiskDeviceMappings = v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetImageId(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.ImageId = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetImageName(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.ImageName = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetImageOwnerAlias(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.ImageOwnerAlias = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetImageSize(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.ImageSize = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetImageStorageSize(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.ImageStorageSize = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetInstanceId(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.InstanceId = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetOsVersion(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.OsVersion = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetPlatform(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.Platform = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetRegionId(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.RegionId = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetSnapshotId(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.SnapshotId = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImage) SetStatus(v string) *DescribeSelfImagesResponseBodyImagesImage {
	s.Status = &v
	return s
}

type DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappings struct {
	DiskDeviceMapping []*DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping `json:"DiskDeviceMapping,omitempty" xml:"DiskDeviceMapping,omitempty" type:"Repeated"`
}

func (s DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappings) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappings) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappings) SetDiskDeviceMapping(v []*DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappings {
	s.DiskDeviceMapping = v
	return s
}

type DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping struct {
	// The format of the image.
	//
	// example:
	//
	// The format of the image.
	//
	// raw
	//
	// qcow2
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// The size of the disk. Unit: GiB.
	//
	// example:
	//
	// 100
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
	// The type of the disk. Valid values:
	//
	// 	- system: system disk.
	//
	// 	- data: data disk.
	//
	// example:
	//
	// Data
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The ID of image.
	//
	// example:
	//
	// i-test
	ImageId *string `json:"imageId,omitempty" xml:"imageId,omitempty"`
}

func (s DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetFormat(v string) *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Format = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetSize(v string) *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Size = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetType(v string) *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.Type = &v
	return s
}

func (s *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping) SetImageId(v string) *DescribeSelfImagesResponseBodyImagesImageDiskDeviceMappingsDiskDeviceMapping {
	s.ImageId = &v
	return s
}

type DescribeSelfImagesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSelfImagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSelfImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSelfImagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSelfImagesResponse) SetHeaders(v map[string]*string) *DescribeSelfImagesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSelfImagesResponse) SetStatusCode(v int32) *DescribeSelfImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSelfImagesResponse) SetBody(v *DescribeSelfImagesResponseBody) *DescribeSelfImagesResponse {
	s.Body = v
	return s
}

type DescribeServcieScheduleRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 474bdef0-d149-4695-abfb-52912d91****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// This parameter does not take effect.
	//
	// example:
	//
	// android
	PodConfigName *string `json:"PodConfigName,omitempty" xml:"PodConfigName,omitempty"`
	// The unique ID of the device.
	//
	// This parameter is required.
	//
	// example:
	//
	// hdm_f022bf160dc69e2d8eb421e508eb****
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s DescribeServcieScheduleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleRequest) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleRequest) SetAppId(v string) *DescribeServcieScheduleRequest {
	s.AppId = &v
	return s
}

func (s *DescribeServcieScheduleRequest) SetPodConfigName(v string) *DescribeServcieScheduleRequest {
	s.PodConfigName = &v
	return s
}

func (s *DescribeServcieScheduleRequest) SetUuid(v string) *DescribeServcieScheduleRequest {
	s.Uuid = &v
	return s
}

type DescribeServcieScheduleResponseBody struct {
	// The index number of the scheduled virtual device (pod).
	//
	// example:
	//
	// 2
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// The ID of the scheduled instance.
	//
	// example:
	//
	// i-5myukg7hnpbto7m024002****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the scheduled instance.
	//
	// example:
	//
	// 120.26.XX.XX
	InstanceIp *string `json:"InstanceIp,omitempty" xml:"InstanceIp,omitempty"`
	// The start port of the scheduled instance.
	//
	// example:
	//
	// 3306
	InstancePort *int32 `json:"InstancePort,omitempty" xml:"InstancePort,omitempty"`
	// The summary information about the scheduled virtual device.
	PodAbstractInfo *DescribeServcieScheduleResponseBodyPodAbstractInfo `json:"PodAbstractInfo,omitempty" xml:"PodAbstractInfo,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is repeated.
	//
	// example:
	//
	// false
	RequestRepeated *bool `json:"RequestRepeated,omitempty" xml:"RequestRepeated,omitempty"`
	// The TCP port range of the scheduled instance or container. The value is in the ${from}-$-{to} format. Example: 80-88.
	//
	// example:
	//
	// 80-88
	TcpPorts *string `json:"TcpPorts,omitempty" xml:"TcpPorts,omitempty"`
}

func (s DescribeServcieScheduleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleResponseBody) SetIndex(v int32) *DescribeServcieScheduleResponseBody {
	s.Index = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetInstanceId(v string) *DescribeServcieScheduleResponseBody {
	s.InstanceId = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetInstanceIp(v string) *DescribeServcieScheduleResponseBody {
	s.InstanceIp = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetInstancePort(v int32) *DescribeServcieScheduleResponseBody {
	s.InstancePort = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetPodAbstractInfo(v *DescribeServcieScheduleResponseBodyPodAbstractInfo) *DescribeServcieScheduleResponseBody {
	s.PodAbstractInfo = v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetRequestId(v string) *DescribeServcieScheduleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetRequestRepeated(v bool) *DescribeServcieScheduleResponseBody {
	s.RequestRepeated = &v
	return s
}

func (s *DescribeServcieScheduleResponseBody) SetTcpPorts(v string) *DescribeServcieScheduleResponseBody {
	s.TcpPorts = &v
	return s
}

type DescribeServcieScheduleResponseBodyPodAbstractInfo struct {
	// The name of the container service.
	//
	// example:
	//
	// android
	ContainerService *bool `json:"ContainerService,omitempty" xml:"ContainerService,omitempty"`
	// The information about the container.
	ContainerStatuses *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses `json:"ContainerStatuses,omitempty" xml:"ContainerStatuses,omitempty" type:"Struct"`
	// The name of the pod.
	//
	// example:
	//
	// gcs-prod-websocket-eip-telecom
	Name *bool `json:"Name,omitempty" xml:"Name,omitempty"`
	// The name of the namespace.
	//
	// example:
	//
	// default-aliyun
	Namespace *bool `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	// The pod scope.
	//
	// example:
	//
	// FDN
	ResourceScope *bool `json:"ResourceScope,omitempty" xml:"ResourceScope,omitempty"`
	// The status of the pod.
	//
	// example:
	//
	// RUNNING
	Status *bool `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfo) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetContainerService(v bool) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.ContainerService = &v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetContainerStatuses(v *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.ContainerStatuses = v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetName(v bool) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.Name = &v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetNamespace(v bool) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.Namespace = &v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetResourceScope(v bool) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.ResourceScope = &v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfo) SetStatus(v bool) *DescribeServcieScheduleResponseBodyPodAbstractInfo {
	s.Status = &v
	return s
}

type DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses struct {
	ContainerStatus []*DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus `json:"ContainerStatus,omitempty" xml:"ContainerStatus,omitempty" type:"Repeated"`
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses) SetContainerStatus(v []*DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus) *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatuses {
	s.ContainerStatus = v
	return s
}

type DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus struct {
	// The ID of the container.
	//
	// example:
	//
	// container_e79_1638372147094_158091_02_000001
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	// The name of the container.
	//
	// example:
	//
	// nginx
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus) SetContainerId(v string) *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus {
	s.ContainerId = &v
	return s
}

func (s *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus) SetName(v string) *DescribeServcieScheduleResponseBodyPodAbstractInfoContainerStatusesContainerStatus {
	s.Name = &v
	return s
}

type DescribeServcieScheduleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeServcieScheduleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeServcieScheduleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeServcieScheduleResponse) GoString() string {
	return s.String()
}

func (s *DescribeServcieScheduleResponse) SetHeaders(v map[string]*string) *DescribeServcieScheduleResponse {
	s.Headers = v
	return s
}

func (s *DescribeServcieScheduleResponse) SetStatusCode(v int32) *DescribeServcieScheduleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeServcieScheduleResponse) SetBody(v *DescribeServcieScheduleResponseBody) *DescribeServcieScheduleResponse {
	s.Body = v
	return s
}

type DescribeServerLoadBalancerListenMonitorRequest struct {
	// The end of the time range to query. The maximum range between StartTime and EndTime is 24 hours.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-16 16:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5rcvo1n1t3hykfhhjwjgqp****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The request protocol, such as http, https, or tcp.
	//
	// example:
	//
	// tcp
	Proto *string `json:"Proto,omitempty" xml:"Proto,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2024-05-16 15:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The virtual IP address (VIP) port, such as 80, 8080, or 443.
	//
	// example:
	//
	// 80
	VPort *string `json:"VPort,omitempty" xml:"VPort,omitempty"`
}

func (s DescribeServerLoadBalancerListenMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerLoadBalancerListenMonitorRequest) GoString() string {
	return s.String()
}

func (s *DescribeServerLoadBalancerListenMonitorRequest) SetEndTime(v string) *DescribeServerLoadBalancerListenMonitorRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorRequest) SetLoadBalancerId(v string) *DescribeServerLoadBalancerListenMonitorRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorRequest) SetProto(v string) *DescribeServerLoadBalancerListenMonitorRequest {
	s.Proto = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorRequest) SetStartTime(v string) *DescribeServerLoadBalancerListenMonitorRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorRequest) SetVPort(v string) *DescribeServerLoadBalancerListenMonitorRequest {
	s.VPort = &v
	return s
}

type DescribeServerLoadBalancerListenMonitorResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 125B04C7-3D0D-4245-AF96-14E3758E3F06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The array of the monitoring data.
	ServerLoadBalancerMonitorData []*DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData `json:"ServerLoadBalancerMonitorData,omitempty" xml:"ServerLoadBalancerMonitorData,omitempty" type:"Repeated"`
}

func (s DescribeServerLoadBalancerListenMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerLoadBalancerListenMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBody) SetRequestId(v string) *DescribeServerLoadBalancerListenMonitorResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBody) SetServerLoadBalancerMonitorData(v []*DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) *DescribeServerLoadBalancerListenMonitorResponseBody {
	s.ServerLoadBalancerMonitorData = v
	return s
}

type DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData struct {
	// The total number of requests.
	//
	// example:
	//
	// 20
	Acc *int32 `json:"Acc,omitempty" xml:"Acc,omitempty"`
	// The business time of the log. Logs are collected every minute.
	//
	// example:
	//
	// 2024-05-16 15:00:00
	BizTime *string `json:"BizTime,omitempty" xml:"BizTime,omitempty"`
	// The ID of the node to which the ELB instance belongs.
	//
	// example:
	//
	// cn-fuzhou-7
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the ELB instance.
	//
	// example:
	//
	// lb-5rcvo1n1t3hykfhhjwjgqp****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The name of the ELB instance.
	//
	// example:
	//
	// esk-edge-service-lb-8377****
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	// The specification of the ELB instance.
	//
	// example:
	//
	// elb.s2.medium
	LoadBalancerSpec *string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty"`
	// The request protocol, such as http, https, or tcp.
	//
	// example:
	//
	// tcp
	Proto *string `json:"Proto,omitempty" xml:"Proto,omitempty"`
	// The number of requests with HTTP 2xx status code returned.
	//
	// example:
	//
	// 10
	Reqs2xx *int32 `json:"Reqs2xx,omitempty" xml:"Reqs2xx,omitempty"`
	// The number of requests with HTTP 3xx status code returned.
	//
	// example:
	//
	// 0
	Reqs3xx *int32 `json:"Reqs3xx,omitempty" xml:"Reqs3xx,omitempty"`
	// The number of requests with HTTP 4xx status code returned.
	//
	// example:
	//
	// 0
	Reqs4xx *int32 `json:"Reqs4xx,omitempty" xml:"Reqs4xx,omitempty"`
	// The number of requests with HTTP 5xx status code returned.
	//
	// example:
	//
	// 10
	Reqs5xx *int32 `json:"Reqs5xx,omitempty" xml:"Reqs5xx,omitempty"`
	// The average response time. Unit: milliseconds.
	//
	// example:
	//
	// 1037
	RtAvg *int32 `json:"RtAvg,omitempty" xml:"RtAvg,omitempty"`
	// The VIP of the instance.
	//
	// example:
	//
	// 10.0****
	Vip *string `json:"Vip,omitempty" xml:"Vip,omitempty"`
	// The ID of the tunnel.
	//
	// example:
	//
	// 52497
	Vni *int32 `json:"Vni,omitempty" xml:"Vni,omitempty"`
	// The VIP port, such as 80, 8080, or 443.
	//
	// example:
	//
	// 80
	Vport *int32 `json:"Vport,omitempty" xml:"Vport,omitempty"`
}

func (s DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetAcc(v int32) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Acc = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetBizTime(v string) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.BizTime = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetEnsRegionId(v string) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetLoadBalancerId(v string) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetLoadBalancerName(v string) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.LoadBalancerName = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetLoadBalancerSpec(v string) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.LoadBalancerSpec = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetProto(v string) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Proto = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetReqs2xx(v int32) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Reqs2xx = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetReqs3xx(v int32) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Reqs3xx = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetReqs4xx(v int32) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Reqs4xx = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetReqs5xx(v int32) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Reqs5xx = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetRtAvg(v int32) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.RtAvg = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetVip(v string) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Vip = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetVni(v int32) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Vni = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData) SetVport(v int32) *DescribeServerLoadBalancerListenMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Vport = &v
	return s
}

type DescribeServerLoadBalancerListenMonitorResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeServerLoadBalancerListenMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeServerLoadBalancerListenMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerLoadBalancerListenMonitorResponse) GoString() string {
	return s.String()
}

func (s *DescribeServerLoadBalancerListenMonitorResponse) SetHeaders(v map[string]*string) *DescribeServerLoadBalancerListenMonitorResponse {
	s.Headers = v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponse) SetStatusCode(v int32) *DescribeServerLoadBalancerListenMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeServerLoadBalancerListenMonitorResponse) SetBody(v *DescribeServerLoadBalancerListenMonitorResponseBody) *DescribeServerLoadBalancerListenMonitorResponse {
	s.Body = v
	return s
}

type DescribeServerLoadBalancerMonitorRequest struct {
	// The end of the time range to query. The maximum range between StartTime and EndTime is 24 hours.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2024-09-15 17:00:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5sc1s9zrui8lpb8u7cl4f****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2024-09-15 16:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeServerLoadBalancerMonitorRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerLoadBalancerMonitorRequest) GoString() string {
	return s.String()
}

func (s *DescribeServerLoadBalancerMonitorRequest) SetEndTime(v string) *DescribeServerLoadBalancerMonitorRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorRequest) SetLoadBalancerId(v string) *DescribeServerLoadBalancerMonitorRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorRequest) SetStartTime(v string) *DescribeServerLoadBalancerMonitorRequest {
	s.StartTime = &v
	return s
}

type DescribeServerLoadBalancerMonitorResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// AAE90880-4970-4D81-A534-A6C0F3631F74
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The array of the monitoring data.
	ServerLoadBalancerMonitorData []*DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData `json:"ServerLoadBalancerMonitorData,omitempty" xml:"ServerLoadBalancerMonitorData,omitempty" type:"Repeated"`
}

func (s DescribeServerLoadBalancerMonitorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerLoadBalancerMonitorResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeServerLoadBalancerMonitorResponseBody) SetRequestId(v string) *DescribeServerLoadBalancerMonitorResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBody) SetServerLoadBalancerMonitorData(v []*DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) *DescribeServerLoadBalancerMonitorResponseBody {
	s.ServerLoadBalancerMonitorData = v
	return s
}

type DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData struct {
	// The total number of requests.
	//
	// example:
	//
	// 30
	Acc *int32 `json:"Acc,omitempty" xml:"Acc,omitempty"`
	// The business time of the log. Logs are collected every minute.
	//
	// example:
	//
	// 2024-09-15 16:00:00
	BizTime *string `json:"BizTime,omitempty" xml:"BizTime,omitempty"`
	// The ID of the node to which the ELB instance belongs.
	//
	// example:
	//
	// cn-wuxi-10
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the ELB instance.
	//
	// example:
	//
	// lb-5sc1s9zrui8lpb8u7cl4f****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The name of the ELB instance.
	//
	// example:
	//
	// esk-edge-service-lb-a34****
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
	// The specification of the ELB instance.
	//
	// example:
	//
	// elb.s2.medium
	LoadBalancerSpec *string `json:"LoadBalancerSpec,omitempty" xml:"LoadBalancerSpec,omitempty"`
	// The number of requests with HTTP 2xx status code returned.
	//
	// example:
	//
	// 25
	Reqs2xx *int32 `json:"Reqs2xx,omitempty" xml:"Reqs2xx,omitempty"`
	// The number of requests with HTTP 3xx status code returned.
	//
	// example:
	//
	// 0
	Reqs3xx *int32 `json:"Reqs3xx,omitempty" xml:"Reqs3xx,omitempty"`
	// The number of requests with HTTP 4xx status code returned.
	//
	// example:
	//
	// 5
	Reqs4xx *int32 `json:"Reqs4xx,omitempty" xml:"Reqs4xx,omitempty"`
	// The number of requests with HTTP 5xx status code returned.
	//
	// example:
	//
	// 0
	Reqs5xx *int32 `json:"Reqs5xx,omitempty" xml:"Reqs5xx,omitempty"`
	// The average response time. Unit: milliseconds.
	//
	// example:
	//
	// 1404
	RtAvg *int32 `json:"RtAvg,omitempty" xml:"RtAvg,omitempty"`
	// The virtual IP address (VIP) of the instance.
	//
	// example:
	//
	// 10.0****
	Vip *string `json:"Vip,omitempty" xml:"Vip,omitempty"`
	// The ID of the tunnel.
	//
	// example:
	//
	// 3018
	Vni *int32 `json:"Vni,omitempty" xml:"Vni,omitempty"`
}

func (s DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetAcc(v int32) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Acc = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetBizTime(v string) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.BizTime = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetEnsRegionId(v string) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetLoadBalancerId(v string) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.LoadBalancerId = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetLoadBalancerName(v string) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.LoadBalancerName = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetLoadBalancerSpec(v string) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.LoadBalancerSpec = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetReqs2xx(v int32) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Reqs2xx = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetReqs3xx(v int32) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Reqs3xx = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetReqs4xx(v int32) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Reqs4xx = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetReqs5xx(v int32) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Reqs5xx = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetRtAvg(v int32) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.RtAvg = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetVip(v string) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Vip = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData) SetVni(v int32) *DescribeServerLoadBalancerMonitorResponseBodyServerLoadBalancerMonitorData {
	s.Vni = &v
	return s
}

type DescribeServerLoadBalancerMonitorResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeServerLoadBalancerMonitorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeServerLoadBalancerMonitorResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeServerLoadBalancerMonitorResponse) GoString() string {
	return s.String()
}

func (s *DescribeServerLoadBalancerMonitorResponse) SetHeaders(v map[string]*string) *DescribeServerLoadBalancerMonitorResponse {
	s.Headers = v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponse) SetStatusCode(v int32) *DescribeServerLoadBalancerMonitorResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeServerLoadBalancerMonitorResponse) SetBody(v *DescribeServerLoadBalancerMonitorResponseBody) *DescribeServerLoadBalancerMonitorResponse {
	s.Body = v
	return s
}

type DescribeSnapshotsRequest struct {
	// The ID of the disk.
	//
	// example:
	//
	// d-bp67acfmxazb4p****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The region ID of the disk. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/25609.html) operation to query the most recent list of regions.
	//
	// example:
	//
	// cn-hangzhou
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The node information.
	//
	// example:
	//
	// ["cn-suzhou-telecom","cn-chengdu-telecom"]
	EnsRegionIds *string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// i-bp67acfmxazb4p****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the snapshot. The value can be a JSON array that consists of up to 100 snapshot IDs. Separate the snapshot IDs with commas (,).
	//
	// example:
	//
	// sp-bp67acfmxazb4p****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The name of the snapshot. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// testSnapshotName
	SnapshotName *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
}

func (s DescribeSnapshotsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsRequest) SetDiskId(v string) *DescribeSnapshotsRequest {
	s.DiskId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetEnsRegionId(v string) *DescribeSnapshotsRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetEnsRegionIds(v string) *DescribeSnapshotsRequest {
	s.EnsRegionIds = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetInstanceId(v string) *DescribeSnapshotsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetPageNumber(v int32) *DescribeSnapshotsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetPageSize(v int32) *DescribeSnapshotsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotId(v string) *DescribeSnapshotsRequest {
	s.SnapshotId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotName(v string) *DescribeSnapshotsRequest {
	s.SnapshotName = &v
	return s
}

type DescribeSnapshotsResponseBody struct {
	// The page number of the returned page.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 9635ED2E-3103-1606-84D4-9F8E816B19F9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The information about the snapshots.
	Snapshots []*DescribeSnapshotsResponseBodySnapshots `json:"Snapshots,omitempty" xml:"Snapshots,omitempty" type:"Repeated"`
	// The total number of snapshots.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSnapshotsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseBody) SetPageNumber(v int32) *DescribeSnapshotsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetPageSize(v int32) *DescribeSnapshotsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetRequestId(v string) *DescribeSnapshotsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetSnapshots(v []*DescribeSnapshotsResponseBodySnapshots) *DescribeSnapshotsResponseBody {
	s.Snapshots = v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetTotalCount(v int32) *DescribeSnapshotsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSnapshotsResponseBodySnapshots struct {
	// The creation time. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-08-20T14:52:28Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the snapshot.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the edge node.
	//
	// example:
	//
	// cn-beijing-15
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The capacity of the disk. Unit: MiB.
	//
	// example:
	//
	// 40
	Size *string `json:"Size,omitempty" xml:"Size,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// s-bp67acfmxazb4p****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The name of the snapshot. This parameter is returned only if a snapshot name was specified when the snapshot was created.
	//
	// example:
	//
	// testSnapshotName
	SnapshotName *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	// The type of the disk. Valid value:
	//
	// 	- cloud_efficiency: ultra disk
	//
	// 	- cloud_ssd: all-flash disk
	//
	// 	- local_hdd: local HDD
	//
	// 	- local_ssd: local SSD
	//
	// example:
	//
	// cloud_efficiency
	SourceDiskCategory *string `json:"SourceDiskCategory,omitempty" xml:"SourceDiskCategory,omitempty"`
	// The ID of the source disk. This parameter is retained even after the source disk for which the snapshot was created is released.
	//
	// example:
	//
	// d-bp67acfmxazb4ph****
	SourceDiskId *string `json:"SourceDiskId,omitempty" xml:"SourceDiskId,omitempty"`
	// The type of the disk. Valid value:
	//
	// 	- 1: system disk
	//
	// 	- 2: data disk
	//
	// example:
	//
	// 1
	SourceDiskType *string `json:"SourceDiskType,omitempty" xml:"SourceDiskType,omitempty"`
	// The ID of the source edge node.
	//
	// example:
	//
	// cn-hangzhou-27
	SourceEnsRegionId *string `json:"SourceEnsRegionId,omitempty" xml:"SourceEnsRegionId,omitempty"`
	// The ID of the source snapshot.
	//
	// example:
	//
	// s-bpdfer893jfkdqe****
	SourceSnapshotId *string `json:"SourceSnapshotId,omitempty" xml:"SourceSnapshotId,omitempty"`
	// The status of the snapshot. Valid value:
	//
	// 	- creating: The snapshot is being created.
	//
	// 	- Available: The snapshot is available.
	//
	// 	- deleting: The snapshot is being deleted.
	//
	// 	- error: An error occurred on the snapshot.
	//
	// example:
	//
	// available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSnapshotsResponseBodySnapshots) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseBodySnapshots) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetCreationTime(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.CreationTime = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetDescription(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Description = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetEnsRegionId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSize(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Size = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotName(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotName = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceDiskCategory(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceDiskCategory = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceDiskId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceDiskId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceDiskType(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceDiskType = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceEnsRegionId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceEnsRegionId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceSnapshotId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceSnapshotId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetStatus(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Status = &v
	return s
}

type DescribeSnapshotsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSnapshotsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSnapshotsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponse) SetHeaders(v map[string]*string) *DescribeSnapshotsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnapshotsResponse) SetStatusCode(v int32) *DescribeSnapshotsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSnapshotsResponse) SetBody(v *DescribeSnapshotsResponseBody) *DescribeSnapshotsResponse {
	s.Body = v
	return s
}

type DescribeSnatAttributeRequest struct {
	// The ID of the SNAT entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// snat-5tc08qfj5ecblfdn2rqr9****
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
}

func (s DescribeSnatAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnatAttributeRequest) SetSnatEntryId(v string) *DescribeSnatAttributeRequest {
	s.SnatEntryId = &v
	return s
}

type DescribeSnatAttributeResponseBody struct {
	// The time when the entry was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-04-26T15:38:27Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The destination CIDR block. The rule takes effect only on requests that access the destination CIDR block.
	//
	// example:
	//
	// 101.10. XX.XX/24
	DestCIDR *string `json:"DestCIDR,omitempty" xml:"DestCIDR,omitempty"`
	// Specifies whether to enable EIP affinity. Valid values:
	//
	// 	- **0**: no
	//
	// 	- **1**: yes
	//
	// **
	//
	// **Description*	- After you enable EIP affinity, if multiple EIPs are associated with an SNAT entry, each client uses one EIP to access the Internet. If EIP affinity is disabled, each client uses a random EIP to access the Internet.
	//
	// example:
	//
	// false
	EipAffinity *bool `json:"EipAffinity,omitempty" xml:"EipAffinity,omitempty"`
	// The timeout period. Unit: seconds.
	//
	// example:
	//
	// 10
	IdleTimeout *int32 `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// Whether to enable operator affinity. Value taking:
	//
	// - false:Do not open.
	//
	// - true:Open.
	//
	// example:
	//
	// true
	IspAffinity *bool `json:"IspAffinity,omitempty" xml:"IspAffinity,omitempty"`
	// The ID of the Network Address Translation (NAT) gateway.
	//
	// example:
	//
	// nat-5t7nh1cfm6kxiszlttr38****
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the SNAT entry.
	//
	// example:
	//
	// snat-5tfi6f8gds82mjmlofeym****
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	// The name of the SNAT entry.
	//
	// example:
	//
	// test0
	SnatEntryName *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	// The EIP specified in the SNAT entry. Multiple EIPs are separated by commas (,).
	//
	// example:
	//
	// 120.72.XX.XX
	SnatIp *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
	// The information about the EIP specified in the SNAT entry.
	SnatIps []*DescribeSnatAttributeResponseBodySnatIps `json:"SnatIps,omitempty" xml:"SnatIps,omitempty" type:"Repeated"`
	// The source CIDR block specified in the SNAT entry.
	//
	// example:
	//
	// 10.0.XX.XX/24
	SourceCIDR *string `json:"SourceCIDR,omitempty" xml:"SourceCIDR,omitempty"`
	// The secondary EIP specified in the SNAT entry. Multiple secondary EIPs are separated by commas (,).
	//
	// example:
	//
	// 101.23. XX.XX
	StandbySnatIp *string `json:"StandbySnatIp,omitempty" xml:"StandbySnatIp,omitempty"`
	// The status of the secondary EIP.
	//
	// 	- Running
	//
	// 	- Stopping
	//
	// 	- Stopped
	//
	// 	- Starting
	//
	// example:
	//
	// Stopped
	StandbyStatus *string `json:"StandbyStatus,omitempty" xml:"StandbyStatus,omitempty"`
	// The status of the SNAT entry.
	//
	// 	- Pending: The SNAT entry is being created or modified.
	//
	// 	- Available: The SNAT entry is available.
	//
	// 	- Deleting: The SNAT entry is being deleted.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the NAT.
	//
	// 	- Empty: symmetric NAT.
	//
	// 	- FullCone: full cone NAT.
	//
	// example:
	//
	// FullCone
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSnatAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnatAttributeResponseBody) SetCreationTime(v string) *DescribeSnatAttributeResponseBody {
	s.CreationTime = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetDestCIDR(v string) *DescribeSnatAttributeResponseBody {
	s.DestCIDR = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetEipAffinity(v bool) *DescribeSnatAttributeResponseBody {
	s.EipAffinity = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetIdleTimeout(v int32) *DescribeSnatAttributeResponseBody {
	s.IdleTimeout = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetIspAffinity(v bool) *DescribeSnatAttributeResponseBody {
	s.IspAffinity = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetNatGatewayId(v string) *DescribeSnatAttributeResponseBody {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetRequestId(v string) *DescribeSnatAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetSnatEntryId(v string) *DescribeSnatAttributeResponseBody {
	s.SnatEntryId = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetSnatEntryName(v string) *DescribeSnatAttributeResponseBody {
	s.SnatEntryName = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetSnatIp(v string) *DescribeSnatAttributeResponseBody {
	s.SnatIp = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetSnatIps(v []*DescribeSnatAttributeResponseBodySnatIps) *DescribeSnatAttributeResponseBody {
	s.SnatIps = v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetSourceCIDR(v string) *DescribeSnatAttributeResponseBody {
	s.SourceCIDR = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetStandbySnatIp(v string) *DescribeSnatAttributeResponseBody {
	s.StandbySnatIp = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetStandbyStatus(v string) *DescribeSnatAttributeResponseBody {
	s.StandbyStatus = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetStatus(v string) *DescribeSnatAttributeResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeSnatAttributeResponseBody) SetType(v string) *DescribeSnatAttributeResponseBody {
	s.Type = &v
	return s
}

type DescribeSnatAttributeResponseBodySnatIps struct {
	// The time when the IP address was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-04-26T15:38:27Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The IP address.
	//
	// example:
	//
	// 203.132.XX.XX
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The status of the IP address.
	//
	// 	- Running
	//
	// 	- Stopping
	//
	// 	- Stopped
	//
	// 	- Starting
	//
	// 	- Releasing
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSnatAttributeResponseBodySnatIps) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatAttributeResponseBodySnatIps) GoString() string {
	return s.String()
}

func (s *DescribeSnatAttributeResponseBodySnatIps) SetCreationTime(v string) *DescribeSnatAttributeResponseBodySnatIps {
	s.CreationTime = &v
	return s
}

func (s *DescribeSnatAttributeResponseBodySnatIps) SetIp(v string) *DescribeSnatAttributeResponseBodySnatIps {
	s.Ip = &v
	return s
}

func (s *DescribeSnatAttributeResponseBodySnatIps) SetStatus(v string) *DescribeSnatAttributeResponseBodySnatIps {
	s.Status = &v
	return s
}

type DescribeSnatAttributeResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSnatAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSnatAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnatAttributeResponse) SetHeaders(v map[string]*string) *DescribeSnatAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnatAttributeResponse) SetStatusCode(v int32) *DescribeSnatAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSnatAttributeResponse) SetBody(v *DescribeSnatAttributeResponseBody) *DescribeSnatAttributeResponse {
	s.Body = v
	return s
}

type DescribeSnatTableEntriesRequest struct {
	// The ID of the Network Address Translation (NAT) gateway.
	//
	// This parameter is required.
	//
	// example:
	//
	// nat-5tawjw5j7sgd2deujxuk0****
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	// The page number. Pages start from page **1**.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. The maximum value is **100**.
	//
	// Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the SNAT entry.
	//
	// example:
	//
	// snat-5tfjp36fsrb36zs36faj0****
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	// The name of the SNAT entry.
	//
	// example:
	//
	// test0
	SnatEntryName *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	// The elastic IP address (EIP) specified in the SNAT entry.
	//
	// example:
	//
	// 58.XXXX.XXX.29
	SnatIp *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
	// The information about the EIP specified in the SNAT entry.
	SnatIps []*string `json:"SnatIps,omitempty" xml:"SnatIps,omitempty" type:"Repeated"`
	// The source CIDR block specified in the SNAT entry.
	//
	// example:
	//
	// 10.1.0.50/32
	SourceCIDR *string `json:"SourceCIDR,omitempty" xml:"SourceCIDR,omitempty"`
}

func (s DescribeSnatTableEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesRequest) SetNatGatewayId(v string) *DescribeSnatTableEntriesRequest {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetPageNumber(v int32) *DescribeSnatTableEntriesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetPageSize(v int32) *DescribeSnatTableEntriesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatEntryId(v string) *DescribeSnatTableEntriesRequest {
	s.SnatEntryId = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatEntryName(v string) *DescribeSnatTableEntriesRequest {
	s.SnatEntryName = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatIp(v string) *DescribeSnatTableEntriesRequest {
	s.SnatIp = &v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSnatIps(v []*string) *DescribeSnatTableEntriesRequest {
	s.SnatIps = v
	return s
}

func (s *DescribeSnatTableEntriesRequest) SetSourceCIDR(v string) *DescribeSnatTableEntriesRequest {
	s.SourceCIDR = &v
	return s
}

type DescribeSnatTableEntriesResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The details of the SNAT entries.
	SnatTableEntries []*DescribeSnatTableEntriesResponseBodySnatTableEntries `json:"SnatTableEntries,omitempty" xml:"SnatTableEntries,omitempty" type:"Repeated"`
	// The number of SNAT entries that are returned.
	//
	// example:
	//
	// 7
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSnatTableEntriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesResponseBody) SetPageNumber(v int32) *DescribeSnatTableEntriesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBody) SetPageSize(v int32) *DescribeSnatTableEntriesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBody) SetRequestId(v string) *DescribeSnatTableEntriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBody) SetSnatTableEntries(v []*DescribeSnatTableEntriesResponseBodySnatTableEntries) *DescribeSnatTableEntriesResponseBody {
	s.SnatTableEntries = v
	return s
}

func (s *DescribeSnatTableEntriesResponseBody) SetTotalCount(v int32) *DescribeSnatTableEntriesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSnatTableEntriesResponseBodySnatTableEntries struct {
	// Specifies whether to enable EIP affinity. Valid values:
	//
	// 	- **0**: no
	//
	// 	- **1**: yes
	//
	// **
	//
	// **Description*	- After you enable EIP affinity, if multiple EIPs are associated with an SNAT entry, each client uses one EIP to access the Internet. If EIP affinity is disabled, each client uses a random EIP to access the Internet.
	//
	// example:
	//
	// false
	EipAffinity *bool `json:"EipAffinity,omitempty" xml:"EipAffinity,omitempty"`
	// The timeout period for idle connections. Valid values: **1*	- to **86400**. Unit: seconds.
	//
	// example:
	//
	// 900
	IdleTimeout *int32 `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// Whether to enable operator affinity. Value taking:
	//
	// - false:Do not open.
	//
	// - true:Open.
	//
	// example:
	//
	// true
	IspAffinity *bool `json:"IspAffinity,omitempty" xml:"IspAffinity,omitempty"`
	// The ID of the NAT gateway.
	//
	// example:
	//
	// nat-5t7nh1cfm6kxiszlttr38****
	NatGatewayId *string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty"`
	// The ID of the SNAT entry.
	//
	// example:
	//
	// snat-5tfjp3537mi6iokl59g5c****
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	// The name of the SNAT entry.
	//
	// example:
	//
	// test0
	SnatEntryName *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	// The EIP specified in the SNAT entry.
	//
	// example:
	//
	// 120.XXX.XXX.71
	SnatIp *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
	// The source CIDR block specified in the SNAT entry.
	//
	// example:
	//
	// 10.0.0.13/32
	SourceCIDR *string `json:"SourceCIDR,omitempty" xml:"SourceCIDR,omitempty"`
	// The secondary EIP. Multiple EIPs are separated by commas (,).
	//
	// example:
	//
	// 101.XXX.XXX.7
	StandbySnatIp *string `json:"StandbySnatIp,omitempty" xml:"StandbySnatIp,omitempty"`
	// The status of the secondary EIP. Valid values:
	//
	// 	- Running
	//
	// 	- Stopping
	//
	// 	- Stopped
	//
	// 	- Starting
	//
	// example:
	//
	// Stopped
	StandbyStatus *string `json:"StandbyStatus,omitempty" xml:"StandbyStatus,omitempty"`
	// The status of the SNAT entry. Valid values:
	//
	// 	- Pending: The SNAT entry is being created or modified.
	//
	// 	- Available: The SNAT entry is available.
	//
	// 	- Deleting: The SNAT entry is being deleted.
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeSnatTableEntriesResponseBodySnatTableEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesResponseBodySnatTableEntries) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetEipAffinity(v bool) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.EipAffinity = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetIdleTimeout(v int32) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.IdleTimeout = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetIspAffinity(v bool) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.IspAffinity = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetNatGatewayId(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.NatGatewayId = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetSnatEntryId(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.SnatEntryId = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetSnatEntryName(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.SnatEntryName = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetSnatIp(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.SnatIp = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetSourceCIDR(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.SourceCIDR = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetStandbySnatIp(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.StandbySnatIp = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetStandbyStatus(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.StandbyStatus = &v
	return s
}

func (s *DescribeSnatTableEntriesResponseBodySnatTableEntries) SetStatus(v string) *DescribeSnatTableEntriesResponseBodySnatTableEntries {
	s.Status = &v
	return s
}

type DescribeSnatTableEntriesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSnatTableEntriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSnatTableEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnatTableEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnatTableEntriesResponse) SetHeaders(v map[string]*string) *DescribeSnatTableEntriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnatTableEntriesResponse) SetStatusCode(v int32) *DescribeSnatTableEntriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSnatTableEntriesResponse) SetBody(v *DescribeSnatTableEntriesResponseBody) *DescribeSnatTableEntriesResponse {
	s.Body = v
	return s
}

type DescribeStorageGatewayRequest struct {
	// The ID of the node.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the gateway.
	//
	// example:
	//
	// sgw-****
	GatewayId *string `json:"GatewayId,omitempty" xml:"GatewayId,omitempty"`
	// The type of the gateway. Set this parameter to **1**. **1*	- indicates iSCSI.
	//
	// example:
	//
	// 1
	GatewayType *string `json:"GatewayType,omitempty" xml:"GatewayType,omitempty"`
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the virtual private cloud (VPC).
	//
	// example:
	//
	// n-***
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeStorageGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageGatewayRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageGatewayRequest) SetEnsRegionId(v string) *DescribeStorageGatewayRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeStorageGatewayRequest) SetGatewayId(v string) *DescribeStorageGatewayRequest {
	s.GatewayId = &v
	return s
}

func (s *DescribeStorageGatewayRequest) SetGatewayType(v string) *DescribeStorageGatewayRequest {
	s.GatewayType = &v
	return s
}

func (s *DescribeStorageGatewayRequest) SetPageNumber(v string) *DescribeStorageGatewayRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageGatewayRequest) SetPageSize(v string) *DescribeStorageGatewayRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageGatewayRequest) SetVpcId(v string) *DescribeStorageGatewayRequest {
	s.VpcId = &v
	return s
}

type DescribeStorageGatewayResponseBody struct {
	// The page number. Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 6666C5A5-75ED-422E-A022-7121FA18C968
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list information.
	StorageGateways []*DescribeStorageGatewayResponseBodyStorageGateways `json:"StorageGateways,omitempty" xml:"StorageGateways,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 16
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeStorageGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStorageGatewayResponseBody) SetPageNumber(v int32) *DescribeStorageGatewayResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageGatewayResponseBody) SetPageSize(v int32) *DescribeStorageGatewayResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageGatewayResponseBody) SetRequestId(v string) *DescribeStorageGatewayResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageGatewayResponseBody) SetStorageGateways(v []*DescribeStorageGatewayResponseBodyStorageGateways) *DescribeStorageGatewayResponseBody {
	s.StorageGateways = v
	return s
}

func (s *DescribeStorageGatewayResponseBody) SetTotalCount(v int32) *DescribeStorageGatewayResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeStorageGatewayResponseBodyStorageGateways struct {
	// The internal CIDR block.
	//
	// example:
	//
	// 192.168.2.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The time when the storage gateway was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-05-14T03:07:47Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the storage gateway.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The IP address of the service.
	//
	// example:
	//
	// *.*.*.*
	ServiceIp *string `json:"ServiceIp,omitempty" xml:"ServiceIp,omitempty"`
	// The status of the storage gateway. Valid values:
	//
	// 	- creating
	//
	// 	- available
	//
	// 	- deleting
	//
	// 	- deleted
	//
	// example:
	//
	// available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the storage gateway.
	//
	// example:
	//
	// sgw-***
	StorageGatewayId *string `json:"StorageGatewayId,omitempty" xml:"StorageGatewayId,omitempty"`
	// The name of the storage gateway.
	//
	// example:
	//
	// testGateway
	StorageGatewayName *string `json:"StorageGatewayName,omitempty" xml:"StorageGatewayName,omitempty"`
	// The type of the storage gateway. Default value: 1, which indicates iSCSI.
	//
	// example:
	//
	// 1
	StorageGatewayType *int32 `json:"StorageGatewayType,omitempty" xml:"StorageGatewayType,omitempty"`
	// The ID of the VPC.
	//
	// example:
	//
	// n-***
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeStorageGatewayResponseBodyStorageGateways) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageGatewayResponseBodyStorageGateways) GoString() string {
	return s.String()
}

func (s *DescribeStorageGatewayResponseBodyStorageGateways) SetCidrBlock(v string) *DescribeStorageGatewayResponseBodyStorageGateways {
	s.CidrBlock = &v
	return s
}

func (s *DescribeStorageGatewayResponseBodyStorageGateways) SetCreationTime(v string) *DescribeStorageGatewayResponseBodyStorageGateways {
	s.CreationTime = &v
	return s
}

func (s *DescribeStorageGatewayResponseBodyStorageGateways) SetDescription(v string) *DescribeStorageGatewayResponseBodyStorageGateways {
	s.Description = &v
	return s
}

func (s *DescribeStorageGatewayResponseBodyStorageGateways) SetEnsRegionId(v string) *DescribeStorageGatewayResponseBodyStorageGateways {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeStorageGatewayResponseBodyStorageGateways) SetServiceIp(v string) *DescribeStorageGatewayResponseBodyStorageGateways {
	s.ServiceIp = &v
	return s
}

func (s *DescribeStorageGatewayResponseBodyStorageGateways) SetStatus(v string) *DescribeStorageGatewayResponseBodyStorageGateways {
	s.Status = &v
	return s
}

func (s *DescribeStorageGatewayResponseBodyStorageGateways) SetStorageGatewayId(v string) *DescribeStorageGatewayResponseBodyStorageGateways {
	s.StorageGatewayId = &v
	return s
}

func (s *DescribeStorageGatewayResponseBodyStorageGateways) SetStorageGatewayName(v string) *DescribeStorageGatewayResponseBodyStorageGateways {
	s.StorageGatewayName = &v
	return s
}

func (s *DescribeStorageGatewayResponseBodyStorageGateways) SetStorageGatewayType(v int32) *DescribeStorageGatewayResponseBodyStorageGateways {
	s.StorageGatewayType = &v
	return s
}

func (s *DescribeStorageGatewayResponseBodyStorageGateways) SetVpcId(v string) *DescribeStorageGatewayResponseBodyStorageGateways {
	s.VpcId = &v
	return s
}

type DescribeStorageGatewayResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStorageGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStorageGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageGatewayResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageGatewayResponse) SetHeaders(v map[string]*string) *DescribeStorageGatewayResponse {
	s.Headers = v
	return s
}

func (s *DescribeStorageGatewayResponse) SetStatusCode(v int32) *DescribeStorageGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStorageGatewayResponse) SetBody(v *DescribeStorageGatewayResponseBody) *DescribeStorageGatewayResponse {
	s.Body = v
	return s
}

type DescribeStorageVolumeRequest struct {
	// The ID of the node.
	//
	// example:
	//
	// cn-shenzhen-3
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the gateway.
	//
	// example:
	//
	// sgw-****
	GatewayId *string `json:"GatewayId,omitempty" xml:"GatewayId,omitempty"`
	// Specifies whether to enable the volume. Valid values:
	//
	// 	- **1*	- (default): enables the volume.
	//
	// 	- **0**: disables the volume.
	//
	// example:
	//
	// 1
	IsEnable *int32 `json:"IsEnable,omitempty" xml:"IsEnable,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the storage medium.
	//
	// example:
	//
	// d-***
	StorageId *string `json:"StorageId,omitempty" xml:"StorageId,omitempty"`
	// The ID of the volume.
	//
	// example:
	//
	// sv-***
	VolumeId *string `json:"VolumeId,omitempty" xml:"VolumeId,omitempty"`
}

func (s DescribeStorageVolumeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageVolumeRequest) GoString() string {
	return s.String()
}

func (s *DescribeStorageVolumeRequest) SetEnsRegionId(v string) *DescribeStorageVolumeRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeStorageVolumeRequest) SetGatewayId(v string) *DescribeStorageVolumeRequest {
	s.GatewayId = &v
	return s
}

func (s *DescribeStorageVolumeRequest) SetIsEnable(v int32) *DescribeStorageVolumeRequest {
	s.IsEnable = &v
	return s
}

func (s *DescribeStorageVolumeRequest) SetPageNumber(v int32) *DescribeStorageVolumeRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageVolumeRequest) SetPageSize(v int32) *DescribeStorageVolumeRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageVolumeRequest) SetStorageId(v string) *DescribeStorageVolumeRequest {
	s.StorageId = &v
	return s
}

func (s *DescribeStorageVolumeRequest) SetVolumeId(v string) *DescribeStorageVolumeRequest {
	s.VolumeId = &v
	return s
}

type DescribeStorageVolumeResponseBody struct {
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// AAE90880-4970-4D81-A534-A6C0F3631F74
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The list of returned results.
	StorageVolumes []*DescribeStorageVolumeResponseBodyStorageVolumes `json:"StorageVolumes,omitempty" xml:"StorageVolumes,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 15
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeStorageVolumeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageVolumeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeStorageVolumeResponseBody) SetPageNumber(v string) *DescribeStorageVolumeResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeStorageVolumeResponseBody) SetPageSize(v string) *DescribeStorageVolumeResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeStorageVolumeResponseBody) SetRequestId(v string) *DescribeStorageVolumeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeStorageVolumeResponseBody) SetStorageVolumes(v []*DescribeStorageVolumeResponseBodyStorageVolumes) *DescribeStorageVolumeResponseBody {
	s.StorageVolumes = v
	return s
}

func (s *DescribeStorageVolumeResponseBody) SetTotalCount(v string) *DescribeStorageVolumeResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeStorageVolumeResponseBodyStorageVolumes struct {
	// The authentication protocol. The value is set to **CHAP**.
	//
	// example:
	//
	// CHAP
	AuthProtocol *string `json:"AuthProtocol,omitempty" xml:"AuthProtocol,omitempty"`
	// The time when the volume was created. The time is displayed in UTC.
	//
	// example:
	//
	// 2024-03-14T09:35:32Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the volume.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the node.
	//
	// example:
	//
	// cn-shenzhen-3
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// Indicates whether authentication is enabled. Valid values:
	//
	// 	- **1**: Authentication is enabled.
	//
	// 	- **0*	- (default): Authentication is disabled.
	//
	// example:
	//
	// 0
	IsAuth *int32 `json:"IsAuth,omitempty" xml:"IsAuth,omitempty"`
	// Indicates whether the volume is enabled. Valid values:
	//
	// 	- **1*	- (default): The volume is enabled.
	//
	// 	- **0**: The volume is disabled.
	//
	// example:
	//
	// 1
	IsEnable *int32 `json:"IsEnable,omitempty" xml:"IsEnable,omitempty"`
	// The status of the volume. Valid values:
	//
	// 	- creating
	//
	// 	- available
	//
	// 	- deleting
	//
	// 	- deleted
	//
	// example:
	//
	// available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the storage gateway.
	//
	// example:
	//
	// sgw-***
	StorageGatewayId *string `json:"StorageGatewayId,omitempty" xml:"StorageGatewayId,omitempty"`
	// The ID of the storage medium.
	//
	// example:
	//
	// d-***
	StorageId *string `json:"StorageId,omitempty" xml:"StorageId,omitempty"`
	// The ID of the volume.
	//
	// example:
	//
	// sv-***
	StorageVolumeId *string `json:"StorageVolumeId,omitempty" xml:"StorageVolumeId,omitempty"`
	// The name of the volume.
	//
	// example:
	//
	// testVolumeName
	StorageVolumeName *string `json:"StorageVolumeName,omitempty" xml:"StorageVolumeName,omitempty"`
	// The destination of the volume.
	//
	// example:
	//
	// iqn.*.*.*:*
	TargetName *string `json:"TargetName,omitempty" xml:"TargetName,omitempty"`
}

func (s DescribeStorageVolumeResponseBodyStorageVolumes) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageVolumeResponseBodyStorageVolumes) GoString() string {
	return s.String()
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetAuthProtocol(v string) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.AuthProtocol = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetCreationTime(v string) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.CreationTime = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetDescription(v string) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.Description = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetEnsRegionId(v string) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetIsAuth(v int32) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.IsAuth = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetIsEnable(v int32) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.IsEnable = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetStatus(v string) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.Status = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetStorageGatewayId(v string) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.StorageGatewayId = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetStorageId(v string) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.StorageId = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetStorageVolumeId(v string) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.StorageVolumeId = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetStorageVolumeName(v string) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.StorageVolumeName = &v
	return s
}

func (s *DescribeStorageVolumeResponseBodyStorageVolumes) SetTargetName(v string) *DescribeStorageVolumeResponseBodyStorageVolumes {
	s.TargetName = &v
	return s
}

type DescribeStorageVolumeResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeStorageVolumeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeStorageVolumeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeStorageVolumeResponse) GoString() string {
	return s.String()
}

func (s *DescribeStorageVolumeResponse) SetHeaders(v map[string]*string) *DescribeStorageVolumeResponse {
	s.Headers = v
	return s
}

func (s *DescribeStorageVolumeResponse) SetStatusCode(v int32) *DescribeStorageVolumeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeStorageVolumeResponse) SetBody(v *DescribeStorageVolumeResponseBody) *DescribeStorageVolumeResponse {
	s.Body = v
	return s
}

type DescribeUserBandWidthDataRequest struct {
	// The end of the time range to query.
	//
	// 	- Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- If the value of the seconds place is not 00, the start time is automatically set to the next minute.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2019-05-21T12:22:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the node. You can specify only one node ID. By default, all nodes are queried.
	//
	// example:
	//
	// cn-taiyuan-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the instance for which you want to query the data. You can specify only one instance ID. By default, all instances are queried.
	//
	// example:
	//
	// i-5inkeimcipxk26yqtzm4q****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The Internet service provider (ISP). Valid values:
	//
	// 	- cmcc: China Mobile
	//
	// 	- telecom: China Telecom
	//
	// 	- unicom: China Unicom
	//
	// 	- multiCarrier: multi-line ISP
	//
	// example:
	//
	// cmcc
	Isp *string `json:"Isp,omitempty" xml:"Isp,omitempty"`
	// The precision of the monitoring data that you want to obtain. Valid values: 300, 1200, 3600, and 14400. Default value: 300. Unit: seconds.
	//
	// This parameter is required.
	//
	// example:
	//
	// 300
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The beginning of the time range to query.
	//
	// 	- Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// 	- If the value of the seconds place is not 00, the start time is automatically set to the next minute.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2019-05-21T10:22:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeUserBandWidthDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBandWidthDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserBandWidthDataRequest) SetEndTime(v string) *DescribeUserBandWidthDataRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetEnsRegionId(v string) *DescribeUserBandWidthDataRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetInstanceId(v string) *DescribeUserBandWidthDataRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetIsp(v string) *DescribeUserBandWidthDataRequest {
	s.Isp = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetPeriod(v string) *DescribeUserBandWidthDataRequest {
	s.Period = &v
	return s
}

func (s *DescribeUserBandWidthDataRequest) SetStartTime(v string) *DescribeUserBandWidthDataRequest {
	s.StartTime = &v
	return s
}

type DescribeUserBandWidthDataResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The monitoring data.
	MonitorData *DescribeUserBandWidthDataResponseBodyMonitorData `json:"MonitorData,omitempty" xml:"MonitorData,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 50373E71-7710-4620-8AAB-133CCE49451C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUserBandWidthDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBandWidthDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserBandWidthDataResponseBody) SetCode(v int32) *DescribeUserBandWidthDataResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBody) SetMonitorData(v *DescribeUserBandWidthDataResponseBodyMonitorData) *DescribeUserBandWidthDataResponseBody {
	s.MonitorData = v
	return s
}

func (s *DescribeUserBandWidthDataResponseBody) SetRequestId(v string) *DescribeUserBandWidthDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUserBandWidthDataResponseBodyMonitorData struct {
	// The bandwidth data.
	BandWidthMonitorData []*DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData `json:"BandWidthMonitorData,omitempty" xml:"BandWidthMonitorData,omitempty" type:"Repeated"`
	// The maximum outbound bandwidth within the queried time range. Unit: bit/s.
	//
	// example:
	//
	// 16817468
	MaxDownBandWidth *string `json:"MaxDownBandWidth,omitempty" xml:"MaxDownBandWidth,omitempty"`
	// The maximum inbound bandwidth within the queried time range. Unit: bit/s.
	//
	// example:
	//
	// 231008
	MaxUpBandWidth *string `json:"MaxUpBandWidth,omitempty" xml:"MaxUpBandWidth,omitempty"`
}

func (s DescribeUserBandWidthDataResponseBodyMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBandWidthDataResponseBodyMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorData) SetBandWidthMonitorData(v []*DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) *DescribeUserBandWidthDataResponseBodyMonitorData {
	s.BandWidthMonitorData = v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorData) SetMaxDownBandWidth(v string) *DescribeUserBandWidthDataResponseBodyMonitorData {
	s.MaxDownBandWidth = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorData) SetMaxUpBandWidth(v string) *DescribeUserBandWidthDataResponseBodyMonitorData {
	s.MaxUpBandWidth = &v
	return s
}

type DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData struct {
	// The outbound bandwidth. Unit: bit/s.
	//
	// example:
	//
	// 0
	DownBandWidth *int64 `json:"DownBandWidth,omitempty" xml:"DownBandWidth,omitempty"`
	// The Internet traffic to the instance. Unit: bytes.
	//
	// example:
	//
	// 0
	InternetRX *int64 `json:"InternetRX,omitempty" xml:"InternetRX,omitempty"`
	// The Internet traffic from the instance. Unit: bytes.
	//
	// example:
	//
	// 0
	InternetTX *int64 `json:"InternetTX,omitempty" xml:"InternetTX,omitempty"`
	// The timestamp when the monitoring data was queried. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2019-10-12T05:45:00Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	// The inbound bandwidth. Unit: bit/s.
	//
	// example:
	//
	// 0
	UpBandWidth *int64 `json:"UpBandWidth,omitempty" xml:"UpBandWidth,omitempty"`
}

func (s DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) GoString() string {
	return s.String()
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetDownBandWidth(v int64) *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.DownBandWidth = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetInternetRX(v int64) *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.InternetRX = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetInternetTX(v int64) *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.InternetTX = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetTimeStamp(v string) *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.TimeStamp = &v
	return s
}

func (s *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData) SetUpBandWidth(v int64) *DescribeUserBandWidthDataResponseBodyMonitorDataBandWidthMonitorData {
	s.UpBandWidth = &v
	return s
}

type DescribeUserBandWidthDataResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUserBandWidthDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUserBandWidthDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserBandWidthDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserBandWidthDataResponse) SetHeaders(v map[string]*string) *DescribeUserBandWidthDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserBandWidthDataResponse) SetStatusCode(v int32) *DescribeUserBandWidthDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserBandWidthDataResponse) SetBody(v *DescribeUserBandWidthDataResponseBody) *DescribeUserBandWidthDataResponse {
	s.Body = v
	return s
}

type DescribeVSwitchAttributesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// vsw-5****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeVSwitchAttributesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesRequest) SetVSwitchId(v string) *DescribeVSwitchAttributesRequest {
	s.VSwitchId = &v
	return s
}

type DescribeVSwitchAttributesResponseBody struct {
	// example:
	//
	// 253
	AvailableIpAddressCount *int64 `json:"AvailableIpAddressCount,omitempty" xml:"AvailableIpAddressCount,omitempty"`
	// example:
	//
	// 10.0.0.0/24
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// example:
	//
	// 2019-06-01T00:00:00Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// example:
	//
	// This is my vswitch.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// cn-xian-unicom
	EnsRegionId     *string                                               `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	HaVipIds        *DescribeVSwitchAttributesResponseBodyHaVipIds        `json:"HaVipIds,omitempty" xml:"HaVipIds,omitempty" type:"Struct"`
	InstanceIds     *DescribeVSwitchAttributesResponseBodyInstanceIds     `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Struct"`
	LoadBalancerIds *DescribeVSwitchAttributesResponseBodyLoadBalancerIds `json:"LoadBalancerIds,omitempty" xml:"LoadBalancerIds,omitempty" type:"Struct"`
	NatGatewayIds   *DescribeVSwitchAttributesResponseBodyNatGatewayIds   `json:"NatGatewayIds,omitempty" xml:"NatGatewayIds,omitempty" type:"Struct"`
	// example:
	//
	// n-257gqcdfvx6n****
	NetworkId           *string                                                   `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NetworkInterfaceIds *DescribeVSwitchAttributesResponseBodyNetworkInterfaceIds `json:"NetworkInterfaceIds,omitempty" xml:"NetworkInterfaceIds,omitempty" type:"Struct"`
	// example:
	//
	// C0003****2A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// vsw-5****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// example:
	//
	// Test-switch
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeVSwitchAttributesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesResponseBody) SetAvailableIpAddressCount(v int64) *DescribeVSwitchAttributesResponseBody {
	s.AvailableIpAddressCount = &v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetCidrBlock(v string) *DescribeVSwitchAttributesResponseBody {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetCreatedTime(v string) *DescribeVSwitchAttributesResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetDescription(v string) *DescribeVSwitchAttributesResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetEnsRegionId(v string) *DescribeVSwitchAttributesResponseBody {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetHaVipIds(v *DescribeVSwitchAttributesResponseBodyHaVipIds) *DescribeVSwitchAttributesResponseBody {
	s.HaVipIds = v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetInstanceIds(v *DescribeVSwitchAttributesResponseBodyInstanceIds) *DescribeVSwitchAttributesResponseBody {
	s.InstanceIds = v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetLoadBalancerIds(v *DescribeVSwitchAttributesResponseBodyLoadBalancerIds) *DescribeVSwitchAttributesResponseBody {
	s.LoadBalancerIds = v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetNatGatewayIds(v *DescribeVSwitchAttributesResponseBodyNatGatewayIds) *DescribeVSwitchAttributesResponseBody {
	s.NatGatewayIds = v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetNetworkId(v string) *DescribeVSwitchAttributesResponseBody {
	s.NetworkId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetNetworkInterfaceIds(v *DescribeVSwitchAttributesResponseBodyNetworkInterfaceIds) *DescribeVSwitchAttributesResponseBody {
	s.NetworkInterfaceIds = v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetRequestId(v string) *DescribeVSwitchAttributesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetStatus(v string) *DescribeVSwitchAttributesResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetVSwitchId(v string) *DescribeVSwitchAttributesResponseBody {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchAttributesResponseBody) SetVSwitchName(v string) *DescribeVSwitchAttributesResponseBody {
	s.VSwitchName = &v
	return s
}

type DescribeVSwitchAttributesResponseBodyHaVipIds struct {
	HaVipId []*string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty" type:"Repeated"`
}

func (s DescribeVSwitchAttributesResponseBodyHaVipIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesResponseBodyHaVipIds) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesResponseBodyHaVipIds) SetHaVipId(v []*string) *DescribeVSwitchAttributesResponseBodyHaVipIds {
	s.HaVipId = v
	return s
}

type DescribeVSwitchAttributesResponseBodyInstanceIds struct {
	InstanceId []*string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" type:"Repeated"`
}

func (s DescribeVSwitchAttributesResponseBodyInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesResponseBodyInstanceIds) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesResponseBodyInstanceIds) SetInstanceId(v []*string) *DescribeVSwitchAttributesResponseBodyInstanceIds {
	s.InstanceId = v
	return s
}

type DescribeVSwitchAttributesResponseBodyLoadBalancerIds struct {
	LoadBalancerId []*string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty" type:"Repeated"`
}

func (s DescribeVSwitchAttributesResponseBodyLoadBalancerIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesResponseBodyLoadBalancerIds) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesResponseBodyLoadBalancerIds) SetLoadBalancerId(v []*string) *DescribeVSwitchAttributesResponseBodyLoadBalancerIds {
	s.LoadBalancerId = v
	return s
}

type DescribeVSwitchAttributesResponseBodyNatGatewayIds struct {
	NatGatewayId []*string `json:"NatGatewayId,omitempty" xml:"NatGatewayId,omitempty" type:"Repeated"`
}

func (s DescribeVSwitchAttributesResponseBodyNatGatewayIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesResponseBodyNatGatewayIds) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesResponseBodyNatGatewayIds) SetNatGatewayId(v []*string) *DescribeVSwitchAttributesResponseBodyNatGatewayIds {
	s.NatGatewayId = v
	return s
}

type DescribeVSwitchAttributesResponseBodyNetworkInterfaceIds struct {
	NetworkInterfaceId []*string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty" type:"Repeated"`
}

func (s DescribeVSwitchAttributesResponseBodyNetworkInterfaceIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesResponseBodyNetworkInterfaceIds) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesResponseBodyNetworkInterfaceIds) SetNetworkInterfaceId(v []*string) *DescribeVSwitchAttributesResponseBodyNetworkInterfaceIds {
	s.NetworkInterfaceId = v
	return s
}

type DescribeVSwitchAttributesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVSwitchAttributesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVSwitchAttributesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchAttributesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchAttributesResponse) SetHeaders(v map[string]*string) *DescribeVSwitchAttributesResponse {
	s.Headers = v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetStatusCode(v int32) *DescribeVSwitchAttributesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVSwitchAttributesResponse) SetBody(v *DescribeVSwitchAttributesResponseBody) *DescribeVSwitchAttributesResponse {
	s.Body = v
	return s
}

type DescribeVSwitchesRequest struct {
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-xian-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The node information.
	EnsRegionIds []*string `json:"EnsRegionIds,omitempty" xml:"EnsRegionIds,omitempty" type:"Repeated"`
	// The ID of the VPC to which the vSwitch belongs.
	//
	// example:
	//
	// vpc-25cdvfeq58pl****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The page number. Default value: **1**.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. Maximum value: **50**. Default value: **10**.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5m9xhlq8oh***
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The list of vSwitches in the network.
	VSwitchIds []*string `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" type:"Repeated"`
	// The name of the vSwitch.
	//
	// example:
	//
	// testVSwitchName
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeVSwitchesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesRequest) SetEnsRegionId(v string) *DescribeVSwitchesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetEnsRegionIds(v []*string) *DescribeVSwitchesRequest {
	s.EnsRegionIds = v
	return s
}

func (s *DescribeVSwitchesRequest) SetNetworkId(v string) *DescribeVSwitchesRequest {
	s.NetworkId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetPageNumber(v int32) *DescribeVSwitchesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetPageSize(v int32) *DescribeVSwitchesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVSwitchId(v string) *DescribeVSwitchesRequest {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchesRequest) SetVSwitchIds(v []*string) *DescribeVSwitchesRequest {
	s.VSwitchIds = v
	return s
}

func (s *DescribeVSwitchesRequest) SetVSwitchName(v string) *DescribeVSwitchesRequest {
	s.VSwitchName = &v
	return s
}

type DescribeVSwitchesResponseBody struct {
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned on each page.
	//
	// example:
	//
	// 2
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 3
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The information about the vSwitches. For more information, see the array of vSwitches in the response examples in the JSON format.
	VSwitches *DescribeVSwitchesResponseBodyVSwitches `json:"VSwitches,omitempty" xml:"VSwitches,omitempty" type:"Struct"`
}

func (s DescribeVSwitchesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseBody) SetPageNumber(v int32) *DescribeVSwitchesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetPageSize(v int32) *DescribeVSwitchesResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetRequestId(v string) *DescribeVSwitchesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetTotalCount(v int32) *DescribeVSwitchesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *DescribeVSwitchesResponseBody) SetVSwitches(v *DescribeVSwitchesResponseBodyVSwitches) *DescribeVSwitchesResponseBody {
	s.VSwitches = v
	return s
}

type DescribeVSwitchesResponseBodyVSwitches struct {
	VSwitch []*DescribeVSwitchesResponseBodyVSwitchesVSwitch `json:"VSwitch,omitempty" xml:"VSwitch,omitempty" type:"Repeated"`
}

func (s DescribeVSwitchesResponseBodyVSwitches) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseBodyVSwitches) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseBodyVSwitches) SetVSwitch(v []*DescribeVSwitchesResponseBodyVSwitchesVSwitch) *DescribeVSwitchesResponseBodyVSwitches {
	s.VSwitch = v
	return s
}

type DescribeVSwitchesResponseBodyVSwitchesVSwitch struct {
	// The IPv4 CIDR block of the vSwitch.
	//
	// example:
	//
	// 10.21.224.0/22
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The time when the VPC was created. The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-06-16T06:33:15Z
	CreatedTime *string `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	// The description of the vSwitch.
	//
	// example:
	//
	// VSwitchDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the ENS node.
	//
	// example:
	//
	// cn-xian-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The number of available IP addresses.
	//
	// example:
	//
	// 1024
	FreeIpCount *int64 `json:"FreeIpCount,omitempty" xml:"FreeIpCount,omitempty"`
	// The ID of the virtual private cloud (VPC).
	//
	// example:
	//
	// vpc-25cdvfeq58pl****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The status of the vSwitch. Valid values:
	//
	// 	- Pending
	//
	// 	- Available
	//
	// example:
	//
	// Pending
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the vSwitch.
	//
	// example:
	//
	// vsw-5m9xhlq8oh***
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The name of the vSwitch.
	//
	// example:
	//
	// testVSwitchName
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s DescribeVSwitchesResponseBodyVSwitchesVSwitch) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponseBodyVSwitchesVSwitch) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetCidrBlock(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.CidrBlock = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetCreatedTime(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.CreatedTime = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetDescription(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.Description = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetEnsRegionId(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.EnsRegionId = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetFreeIpCount(v int64) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.FreeIpCount = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetNetworkId(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.NetworkId = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetStatus(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.Status = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetVSwitchId(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.VSwitchId = &v
	return s
}

func (s *DescribeVSwitchesResponseBodyVSwitchesVSwitch) SetVSwitchName(v string) *DescribeVSwitchesResponseBodyVSwitchesVSwitch {
	s.VSwitchName = &v
	return s
}

type DescribeVSwitchesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVSwitchesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVSwitchesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVSwitchesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVSwitchesResponse) SetHeaders(v map[string]*string) *DescribeVSwitchesResponse {
	s.Headers = v
	return s
}

func (s *DescribeVSwitchesResponse) SetStatusCode(v int32) *DescribeVSwitchesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVSwitchesResponse) SetBody(v *DescribeVSwitchesResponseBody) *DescribeVSwitchesResponse {
	s.Body = v
	return s
}

type DetachDiskRequest struct {
	// The ID of the disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-5r7v69e0bejrnzger09w7****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-5inkeimcipxk26yqtzm4q****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DetachDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskRequest) GoString() string {
	return s.String()
}

func (s *DetachDiskRequest) SetDiskId(v string) *DetachDiskRequest {
	s.DiskId = &v
	return s
}

func (s *DetachDiskRequest) SetInstanceId(v string) *DetachDiskRequest {
	s.InstanceId = &v
	return s
}

type DetachDiskResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskResponseBody) GoString() string {
	return s.String()
}

func (s *DetachDiskResponseBody) SetCode(v int32) *DetachDiskResponseBody {
	s.Code = &v
	return s
}

func (s *DetachDiskResponseBody) SetRequestId(v string) *DetachDiskResponseBody {
	s.RequestId = &v
	return s
}

type DetachDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachDiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachDiskResponse) GoString() string {
	return s.String()
}

func (s *DetachDiskResponse) SetHeaders(v map[string]*string) *DetachDiskResponse {
	s.Headers = v
	return s
}

func (s *DetachDiskResponse) SetStatusCode(v int32) *DetachDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachDiskResponse) SetBody(v *DetachDiskResponseBody) *DetachDiskResponse {
	s.Body = v
	return s
}

type DetachInstanceSDGRequest struct {
	// The IDs of the instances.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s DetachInstanceSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceSDGRequest) GoString() string {
	return s.String()
}

func (s *DetachInstanceSDGRequest) SetInstanceIds(v []*string) *DetachInstanceSDGRequest {
	s.InstanceIds = v
	return s
}

func (s *DetachInstanceSDGRequest) SetSDGId(v string) *DetachInstanceSDGRequest {
	s.SDGId = &v
	return s
}

type DetachInstanceSDGShrinkRequest struct {
	// The IDs of the instances.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s DetachInstanceSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *DetachInstanceSDGShrinkRequest) SetInstanceIdsShrink(v string) *DetachInstanceSDGShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *DetachInstanceSDGShrinkRequest) SetSDGId(v string) *DetachInstanceSDGShrinkRequest {
	s.SDGId = &v
	return s
}

type DetachInstanceSDGResponseBody struct {
	// The returned data object.
	Data *DetachInstanceSDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachInstanceSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceSDGResponseBody) GoString() string {
	return s.String()
}

func (s *DetachInstanceSDGResponseBody) SetData(v *DetachInstanceSDGResponseBodyData) *DetachInstanceSDGResponseBody {
	s.Data = v
	return s
}

func (s *DetachInstanceSDGResponseBody) SetRequestId(v string) *DetachInstanceSDGResponseBody {
	s.RequestId = &v
	return s
}

type DetachInstanceSDGResponseBodyData struct {
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The execution result of the synchronization request.
	Result *DetachInstanceSDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- true: All tasks are successful.
	//
	// 	- false: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DetachInstanceSDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceSDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *DetachInstanceSDGResponseBodyData) SetMessage(v string) *DetachInstanceSDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *DetachInstanceSDGResponseBodyData) SetResult(v *DetachInstanceSDGResponseBodyDataResult) *DetachInstanceSDGResponseBodyData {
	s.Result = v
	return s
}

func (s *DetachInstanceSDGResponseBodyData) SetSuccess(v bool) *DetachInstanceSDGResponseBodyData {
	s.Success = &v
	return s
}

type DetachInstanceSDGResponseBodyDataResult struct {
	// The number of failed tasks.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details about failed tasks.
	FailedItems []*DetachInstanceSDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful tasks.
	//
	// example:
	//
	// 1
	SuccessCount *string `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s DetachInstanceSDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceSDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *DetachInstanceSDGResponseBodyDataResult) SetFailedCount(v int64) *DetachInstanceSDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *DetachInstanceSDGResponseBodyDataResult) SetFailedItems(v []*DetachInstanceSDGResponseBodyDataResultFailedItems) *DetachInstanceSDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *DetachInstanceSDGResponseBodyDataResult) SetSuccessCount(v string) *DetachInstanceSDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type DetachInstanceSDGResponseBodyDataResultFailedItems struct {
	// The error message.
	//
	// example:
	//
	// sdg not found
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// aic-xxxxx-0
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DetachInstanceSDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceSDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *DetachInstanceSDGResponseBodyDataResultFailedItems) SetErrMessage(v string) *DetachInstanceSDGResponseBodyDataResultFailedItems {
	s.ErrMessage = &v
	return s
}

func (s *DetachInstanceSDGResponseBodyDataResultFailedItems) SetInstanceId(v string) *DetachInstanceSDGResponseBodyDataResultFailedItems {
	s.InstanceId = &v
	return s
}

type DetachInstanceSDGResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachInstanceSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachInstanceSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachInstanceSDGResponse) GoString() string {
	return s.String()
}

func (s *DetachInstanceSDGResponse) SetHeaders(v map[string]*string) *DetachInstanceSDGResponse {
	s.Headers = v
	return s
}

func (s *DetachInstanceSDGResponse) SetStatusCode(v int32) *DetachInstanceSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachInstanceSDGResponse) SetBody(v *DetachInstanceSDGResponseBody) *DetachInstanceSDGResponse {
	s.Body = v
	return s
}

type DetachNetworkInterfaceRequest struct {
	// The ID of the ENI.
	//
	// This parameter is required.
	//
	// example:
	//
	// eni-58z57orgmt6d1****
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
}

func (s DetachNetworkInterfaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachNetworkInterfaceRequest) GoString() string {
	return s.String()
}

func (s *DetachNetworkInterfaceRequest) SetNetworkInterfaceId(v string) *DetachNetworkInterfaceRequest {
	s.NetworkInterfaceId = &v
	return s
}

type DetachNetworkInterfaceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// BE1B8ECF-9507-4C78-B197-5DE9FED344AF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachNetworkInterfaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachNetworkInterfaceResponseBody) GoString() string {
	return s.String()
}

func (s *DetachNetworkInterfaceResponseBody) SetRequestId(v string) *DetachNetworkInterfaceResponseBody {
	s.RequestId = &v
	return s
}

type DetachNetworkInterfaceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachNetworkInterfaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachNetworkInterfaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachNetworkInterfaceResponse) GoString() string {
	return s.String()
}

func (s *DetachNetworkInterfaceResponse) SetHeaders(v map[string]*string) *DetachNetworkInterfaceResponse {
	s.Headers = v
	return s
}

func (s *DetachNetworkInterfaceResponse) SetStatusCode(v int32) *DetachNetworkInterfaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachNetworkInterfaceResponse) SetBody(v *DetachNetworkInterfaceResponseBody) *DetachNetworkInterfaceResponse {
	s.Body = v
	return s
}

type DistApplicationDataRequest struct {
	// The ID of the application. To obtain the application ID, call the ListApplications operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// e76f8985-7965-41fc-925b-9648bb6bf650
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The list of data files that you want to distribute. The value must be a JSON string.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{\\"name\\":\\"app01\\",        \\"version\\":\\"1.0\\",        \\"destPath\\":\\"/root/installed\\",        \\"decompress\\":true,        \\"targetDirName\\":\\"target01\\",        \\"fileMode\\":755,        \\"timeout\\":1000    },    {        \\"name\\":\\"app02\\",        \\"version\\":\\"1.1\\",        \\"destPath\\":\\"/tmp/test.txt\\",        \\"decompress\\":false    }]
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The canary release policy. The value must be a JSON string. You can specify multiple distribution policies. By default, all data files are distributed.
	//
	// example:
	//
	// {\\"name\\":\\"ScheduleToAllByMatchExpressions\\",\\"parameters\\":{\\"match_expressions\\":[{\\"key\\":\\"region_id\\",\\"operator\\":\\"In\\",\\"values\\":[\\"cn-wuhan-telecom_unicom_cmcc-2\\"]}]}}
	DistStrategy *string `json:"DistStrategy,omitempty" xml:"DistStrategy,omitempty"`
}

func (s DistApplicationDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataRequest) GoString() string {
	return s.String()
}

func (s *DistApplicationDataRequest) SetAppId(v string) *DistApplicationDataRequest {
	s.AppId = &v
	return s
}

func (s *DistApplicationDataRequest) SetData(v string) *DistApplicationDataRequest {
	s.Data = &v
	return s
}

func (s *DistApplicationDataRequest) SetDistStrategy(v string) *DistApplicationDataRequest {
	s.DistStrategy = &v
	return s
}

type DistApplicationDataResponseBody struct {
	// The list of ENS instance IDs.
	DistInstanceIds *DistApplicationDataResponseBodyDistInstanceIds `json:"DistInstanceIds,omitempty" xml:"DistInstanceIds,omitempty" type:"Struct"`
	// The total number of ENS instance IDs.
	//
	// example:
	//
	// 2
	DistInstanceTotalCount *int32 `json:"DistInstanceTotalCount,omitempty" xml:"DistInstanceTotalCount,omitempty"`
	// The distribution result of the data file.
	DistResults *DistApplicationDataResponseBodyDistResults `json:"DistResults,omitempty" xml:"DistResults,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DistApplicationDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataResponseBody) GoString() string {
	return s.String()
}

func (s *DistApplicationDataResponseBody) SetDistInstanceIds(v *DistApplicationDataResponseBodyDistInstanceIds) *DistApplicationDataResponseBody {
	s.DistInstanceIds = v
	return s
}

func (s *DistApplicationDataResponseBody) SetDistInstanceTotalCount(v int32) *DistApplicationDataResponseBody {
	s.DistInstanceTotalCount = &v
	return s
}

func (s *DistApplicationDataResponseBody) SetDistResults(v *DistApplicationDataResponseBodyDistResults) *DistApplicationDataResponseBody {
	s.DistResults = v
	return s
}

func (s *DistApplicationDataResponseBody) SetRequestId(v string) *DistApplicationDataResponseBody {
	s.RequestId = &v
	return s
}

type DistApplicationDataResponseBodyDistInstanceIds struct {
	DistInstanceId []*string `json:"DistInstanceId,omitempty" xml:"DistInstanceId,omitempty" type:"Repeated"`
}

func (s DistApplicationDataResponseBodyDistInstanceIds) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataResponseBodyDistInstanceIds) GoString() string {
	return s.String()
}

func (s *DistApplicationDataResponseBodyDistInstanceIds) SetDistInstanceId(v []*string) *DistApplicationDataResponseBodyDistInstanceIds {
	s.DistInstanceId = v
	return s
}

type DistApplicationDataResponseBodyDistResults struct {
	DistResult []*DistApplicationDataResponseBodyDistResultsDistResult `json:"DistResult,omitempty" xml:"DistResult,omitempty" type:"Repeated"`
}

func (s DistApplicationDataResponseBodyDistResults) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataResponseBodyDistResults) GoString() string {
	return s.String()
}

func (s *DistApplicationDataResponseBodyDistResults) SetDistResult(v []*DistApplicationDataResponseBodyDistResultsDistResult) *DistApplicationDataResponseBodyDistResults {
	s.DistResult = v
	return s
}

type DistApplicationDataResponseBodyDistResultsDistResult struct {
	// The name of the data file.
	//
	// example:
	//
	// gcs-prod-websocket-eip-unicom
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The error code. The value is of the enumerated data type.
	//
	// example:
	//
	// 400
	ResultCode *int32 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	// The description of the distribution result.
	//
	// example:
	//
	// Success
	ResultDescrip *string `json:"ResultDescrip,omitempty" xml:"ResultDescrip,omitempty"`
	// The version number of the data file.
	//
	// example:
	//
	// standard
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DistApplicationDataResponseBodyDistResultsDistResult) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataResponseBodyDistResultsDistResult) GoString() string {
	return s.String()
}

func (s *DistApplicationDataResponseBodyDistResultsDistResult) SetName(v string) *DistApplicationDataResponseBodyDistResultsDistResult {
	s.Name = &v
	return s
}

func (s *DistApplicationDataResponseBodyDistResultsDistResult) SetResultCode(v int32) *DistApplicationDataResponseBodyDistResultsDistResult {
	s.ResultCode = &v
	return s
}

func (s *DistApplicationDataResponseBodyDistResultsDistResult) SetResultDescrip(v string) *DistApplicationDataResponseBodyDistResultsDistResult {
	s.ResultDescrip = &v
	return s
}

func (s *DistApplicationDataResponseBodyDistResultsDistResult) SetVersion(v string) *DistApplicationDataResponseBodyDistResultsDistResult {
	s.Version = &v
	return s
}

type DistApplicationDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DistApplicationDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DistApplicationDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DistApplicationDataResponse) GoString() string {
	return s.String()
}

func (s *DistApplicationDataResponse) SetHeaders(v map[string]*string) *DistApplicationDataResponse {
	s.Headers = v
	return s
}

func (s *DistApplicationDataResponse) SetStatusCode(v int32) *DistApplicationDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DistApplicationDataResponse) SetBody(v *DistApplicationDataResponseBody) *DistApplicationDataResponse {
	s.Body = v
	return s
}

type ExportBillDetailDataRequest struct {
	// The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2020-08-30T00:00:00Z
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2020-06-01T00:00:00Z
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s ExportBillDetailDataRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportBillDetailDataRequest) GoString() string {
	return s.String()
}

func (s *ExportBillDetailDataRequest) SetEndDate(v string) *ExportBillDetailDataRequest {
	s.EndDate = &v
	return s
}

func (s *ExportBillDetailDataRequest) SetStartDate(v string) *ExportBillDetailDataRequest {
	s.StartDate = &v
	return s
}

type ExportBillDetailDataResponseBody struct {
	// The download path of the exported file.
	//
	// example:
	//
	// http://test-oss.com/image_01.jpeg
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// The ID of the request. This parameter is a common parameter. Each request has a unique ID. You can use the ID to troubleshoot issues.
	//
	// example:
	//
	// BEA05990-B90D-594F-8C8E-650AEEB94C5D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportBillDetailDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportBillDetailDataResponseBody) GoString() string {
	return s.String()
}

func (s *ExportBillDetailDataResponseBody) SetFilePath(v string) *ExportBillDetailDataResponseBody {
	s.FilePath = &v
	return s
}

func (s *ExportBillDetailDataResponseBody) SetRequestId(v string) *ExportBillDetailDataResponseBody {
	s.RequestId = &v
	return s
}

type ExportBillDetailDataResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportBillDetailDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportBillDetailDataResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportBillDetailDataResponse) GoString() string {
	return s.String()
}

func (s *ExportBillDetailDataResponse) SetHeaders(v map[string]*string) *ExportBillDetailDataResponse {
	s.Headers = v
	return s
}

func (s *ExportBillDetailDataResponse) SetStatusCode(v int32) *ExportBillDetailDataResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportBillDetailDataResponse) SetBody(v *ExportBillDetailDataResponseBody) *ExportBillDetailDataResponse {
	s.Body = v
	return s
}

type ExportImageRequest struct {
	// The ID of the image.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-5ragaz3s74b7go8ks7jp9****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The OSS bucket to which you want to export the image.
	//
	// This parameter is required.
	//
	// example:
	//
	// whxyl****
	OSSBucket *string `json:"OSSBucket,omitempty" xml:"OSSBucket,omitempty"`
	// The prefix of the object as which you want to store the image in the OSS bucket. The prefix must be 1 to 30 characters in length and can contain digits and letters.
	OSSPrefix *string `json:"OSSPrefix,omitempty" xml:"OSSPrefix,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	OSSRegionId *string `json:"OSSRegionId,omitempty" xml:"OSSRegionId,omitempty"`
	// The name of the Resource Access Management (RAM) role.
	//
	// example:
	//
	// AliyunMNSLoggingRole
	RoleName *string `json:"RoleName,omitempty" xml:"RoleName,omitempty"`
}

func (s ExportImageRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportImageRequest) GoString() string {
	return s.String()
}

func (s *ExportImageRequest) SetImageId(v string) *ExportImageRequest {
	s.ImageId = &v
	return s
}

func (s *ExportImageRequest) SetOSSBucket(v string) *ExportImageRequest {
	s.OSSBucket = &v
	return s
}

func (s *ExportImageRequest) SetOSSPrefix(v string) *ExportImageRequest {
	s.OSSPrefix = &v
	return s
}

func (s *ExportImageRequest) SetOSSRegionId(v string) *ExportImageRequest {
	s.OSSRegionId = &v
	return s
}

func (s *ExportImageRequest) SetRoleName(v string) *ExportImageRequest {
	s.RoleName = &v
	return s
}

type ExportImageResponseBody struct {
	// The URL that points to the exported image.
	//
	// example:
	//
	// http://oss.url
	ExportedImageURL *string `json:"ExportedImageURL,omitempty" xml:"ExportedImageURL,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 43A426AD-3F2E-5DD9-9C08-D4DBDCA48D85
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportImageResponseBody) GoString() string {
	return s.String()
}

func (s *ExportImageResponseBody) SetExportedImageURL(v string) *ExportImageResponseBody {
	s.ExportedImageURL = &v
	return s
}

func (s *ExportImageResponseBody) SetRequestId(v string) *ExportImageResponseBody {
	s.RequestId = &v
	return s
}

type ExportImageResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportImageResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportImageResponse) GoString() string {
	return s.String()
}

func (s *ExportImageResponse) SetHeaders(v map[string]*string) *ExportImageResponse {
	s.Headers = v
	return s
}

func (s *ExportImageResponse) SetStatusCode(v int32) *ExportImageResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportImageResponse) SetBody(v *ExportImageResponseBody) *ExportImageResponse {
	s.Body = v
	return s
}

type ExportMeasurementDataRequest struct {
	// The end of the time range to query. Specify the time in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2021-10-30T16:00:00Z
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the yyyy-mm-ddthh:mm:ssz format. The time must be in UTC.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2019-06-01T00:00:00Z
	StartDate *string `json:"StartDate,omitempty" xml:"StartDate,omitempty"`
}

func (s ExportMeasurementDataRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportMeasurementDataRequest) GoString() string {
	return s.String()
}

func (s *ExportMeasurementDataRequest) SetEndDate(v string) *ExportMeasurementDataRequest {
	s.EndDate = &v
	return s
}

func (s *ExportMeasurementDataRequest) SetStartDate(v string) *ExportMeasurementDataRequest {
	s.StartDate = &v
	return s
}

type ExportMeasurementDataResponseBody struct {
	// The download path of the exported file.
	//
	// example:
	//
	// http://test-oss.com/image_01.jpeg
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ExportMeasurementDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportMeasurementDataResponseBody) GoString() string {
	return s.String()
}

func (s *ExportMeasurementDataResponseBody) SetFilePath(v string) *ExportMeasurementDataResponseBody {
	s.FilePath = &v
	return s
}

func (s *ExportMeasurementDataResponseBody) SetRequestId(v string) *ExportMeasurementDataResponseBody {
	s.RequestId = &v
	return s
}

type ExportMeasurementDataResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportMeasurementDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportMeasurementDataResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportMeasurementDataResponse) GoString() string {
	return s.String()
}

func (s *ExportMeasurementDataResponse) SetHeaders(v map[string]*string) *ExportMeasurementDataResponse {
	s.Headers = v
	return s
}

func (s *ExportMeasurementDataResponse) SetStatusCode(v int32) *ExportMeasurementDataResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportMeasurementDataResponse) SetBody(v *ExportMeasurementDataResponseBody) *ExportMeasurementDataResponse {
	s.Body = v
	return s
}

type GetBucketAclRequest struct {
	// The name of the bucket.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
}

func (s GetBucketAclRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBucketAclRequest) GoString() string {
	return s.String()
}

func (s *GetBucketAclRequest) SetBucketName(v string) *GetBucketAclRequest {
	s.BucketName = &v
	return s
}

type GetBucketAclResponseBody struct {
	// The ACL of the bucket.
	//
	// example:
	//
	// private
	BucketAcl *string `json:"BucketAcl,omitempty" xml:"BucketAcl,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 5C881388-2D4B-46F4-A96B-D4E6BD0886A2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetBucketAclResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBucketAclResponseBody) GoString() string {
	return s.String()
}

func (s *GetBucketAclResponseBody) SetBucketAcl(v string) *GetBucketAclResponseBody {
	s.BucketAcl = &v
	return s
}

func (s *GetBucketAclResponseBody) SetRequestId(v string) *GetBucketAclResponseBody {
	s.RequestId = &v
	return s
}

type GetBucketAclResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBucketAclResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBucketAclResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBucketAclResponse) GoString() string {
	return s.String()
}

func (s *GetBucketAclResponse) SetHeaders(v map[string]*string) *GetBucketAclResponse {
	s.Headers = v
	return s
}

func (s *GetBucketAclResponse) SetStatusCode(v int32) *GetBucketAclResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBucketAclResponse) SetBody(v *GetBucketAclResponseBody) *GetBucketAclResponse {
	s.Body = v
	return s
}

type GetBucketInfoRequest struct {
	// The name of the bucket.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
}

func (s GetBucketInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBucketInfoRequest) GoString() string {
	return s.String()
}

func (s *GetBucketInfoRequest) SetBucketName(v string) *GetBucketInfoRequest {
	s.BucketName = &v
	return s
}

type GetBucketInfoResponseBody struct {
	// The list of bucket information.
	BucketInfo *GetBucketInfoResponseBodyBucketInfo `json:"BucketInfo,omitempty" xml:"BucketInfo,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// C5831388-2D4B-46F4-A96B-D4E6BD06E7521
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetBucketInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBucketInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetBucketInfoResponseBody) SetBucketInfo(v *GetBucketInfoResponseBodyBucketInfo) *GetBucketInfoResponseBody {
	s.BucketInfo = v
	return s
}

func (s *GetBucketInfoResponseBody) SetRequestId(v string) *GetBucketInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetBucketInfoResponseBodyBucketInfo struct {
	// The ACL of the bucket.
	//
	// 	- **public-read-write**
	//
	// 	- **public-read**
	//
	// 	- **private*	- (default)
	//
	// example:
	//
	// private
	BucketAcl *string `json:"BucketAcl,omitempty" xml:"BucketAcl,omitempty"`
	// The name of the bucket.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The remarks.
	//
	// example:
	//
	// das
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The time when the bucket was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-10-12T05:45:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// Single-node storage. Set the value to sink.
	//
	// example:
	//
	// sink
	LogicalBucketType *string `json:"LogicalBucketType,omitempty" xml:"LogicalBucketType,omitempty"`
	// The time when the bucket was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-10-12T06:45:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
}

func (s GetBucketInfoResponseBodyBucketInfo) String() string {
	return tea.Prettify(s)
}

func (s GetBucketInfoResponseBodyBucketInfo) GoString() string {
	return s.String()
}

func (s *GetBucketInfoResponseBodyBucketInfo) SetBucketAcl(v string) *GetBucketInfoResponseBodyBucketInfo {
	s.BucketAcl = &v
	return s
}

func (s *GetBucketInfoResponseBodyBucketInfo) SetBucketName(v string) *GetBucketInfoResponseBodyBucketInfo {
	s.BucketName = &v
	return s
}

func (s *GetBucketInfoResponseBodyBucketInfo) SetComment(v string) *GetBucketInfoResponseBodyBucketInfo {
	s.Comment = &v
	return s
}

func (s *GetBucketInfoResponseBodyBucketInfo) SetCreateTime(v string) *GetBucketInfoResponseBodyBucketInfo {
	s.CreateTime = &v
	return s
}

func (s *GetBucketInfoResponseBodyBucketInfo) SetLogicalBucketType(v string) *GetBucketInfoResponseBodyBucketInfo {
	s.LogicalBucketType = &v
	return s
}

func (s *GetBucketInfoResponseBodyBucketInfo) SetModifyTime(v string) *GetBucketInfoResponseBodyBucketInfo {
	s.ModifyTime = &v
	return s
}

type GetBucketInfoResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBucketInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBucketInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBucketInfoResponse) GoString() string {
	return s.String()
}

func (s *GetBucketInfoResponse) SetHeaders(v map[string]*string) *GetBucketInfoResponse {
	s.Headers = v
	return s
}

func (s *GetBucketInfoResponse) SetStatusCode(v int32) *GetBucketInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBucketInfoResponse) SetBody(v *GetBucketInfoResponseBody) *GetBucketInfoResponse {
	s.Body = v
	return s
}

type GetBucketLifecycleRequest struct {
	// The name of the bucket.
	//
	// This parameter is required.
	//
	// example:
	//
	// tese
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The ID of the rule that you want to query. If this parameter is not specified, all rules are returned.
	//
	// example:
	//
	// 1
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s GetBucketLifecycleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBucketLifecycleRequest) GoString() string {
	return s.String()
}

func (s *GetBucketLifecycleRequest) SetBucketName(v string) *GetBucketLifecycleRequest {
	s.BucketName = &v
	return s
}

func (s *GetBucketLifecycleRequest) SetRuleId(v string) *GetBucketLifecycleRequest {
	s.RuleId = &v
	return s
}

type GetBucketLifecycleResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// A2583E8B-B930-4F59-ADC0-0E209A90C46E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The detailed information about the rule.
	Rule []*GetBucketLifecycleResponseBodyRule `json:"Rule,omitempty" xml:"Rule,omitempty" type:"Repeated"`
}

func (s GetBucketLifecycleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBucketLifecycleResponseBody) GoString() string {
	return s.String()
}

func (s *GetBucketLifecycleResponseBody) SetRequestId(v string) *GetBucketLifecycleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBucketLifecycleResponseBody) SetRule(v []*GetBucketLifecycleResponseBodyRule) *GetBucketLifecycleResponseBody {
	s.Rule = v
	return s
}

type GetBucketLifecycleResponseBodyRule struct {
	// The expiration time.
	Expiration *GetBucketLifecycleResponseBodyRuleExpiration `json:"Expiration,omitempty" xml:"Expiration,omitempty" type:"Struct"`
	// The unique ID of the rule.
	//
	// example:
	//
	// 1
	ID *string `json:"ID,omitempty" xml:"ID,omitempty"`
	// The prefix that is applied to the rule.
	//
	// example:
	//
	// image
	Prefix *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
	// The status of the rule. Valid values:
	//
	// 	- **Enabled**: The rule is periodically executed.
	//
	// 	- **Disabled**: The rule is ignored.
	//
	// example:
	//
	// Enabled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBucketLifecycleResponseBodyRule) String() string {
	return tea.Prettify(s)
}

func (s GetBucketLifecycleResponseBodyRule) GoString() string {
	return s.String()
}

func (s *GetBucketLifecycleResponseBodyRule) SetExpiration(v *GetBucketLifecycleResponseBodyRuleExpiration) *GetBucketLifecycleResponseBodyRule {
	s.Expiration = v
	return s
}

func (s *GetBucketLifecycleResponseBodyRule) SetID(v string) *GetBucketLifecycleResponseBodyRule {
	s.ID = &v
	return s
}

func (s *GetBucketLifecycleResponseBodyRule) SetPrefix(v string) *GetBucketLifecycleResponseBodyRule {
	s.Prefix = &v
	return s
}

func (s *GetBucketLifecycleResponseBodyRule) SetStatus(v string) *GetBucketLifecycleResponseBodyRule {
	s.Status = &v
	return s
}

type GetBucketLifecycleResponseBodyRuleExpiration struct {
	// The expiration date.
	//
	// example:
	//
	// yyy-MM-DDThh:mm:ssZ
	CreatedBeforeDate *string `json:"CreatedBeforeDate,omitempty" xml:"CreatedBeforeDate,omitempty"`
	// The validity period, in days.
	//
	// example:
	//
	// 5
	Days *string `json:"Days,omitempty" xml:"Days,omitempty"`
}

func (s GetBucketLifecycleResponseBodyRuleExpiration) String() string {
	return tea.Prettify(s)
}

func (s GetBucketLifecycleResponseBodyRuleExpiration) GoString() string {
	return s.String()
}

func (s *GetBucketLifecycleResponseBodyRuleExpiration) SetCreatedBeforeDate(v string) *GetBucketLifecycleResponseBodyRuleExpiration {
	s.CreatedBeforeDate = &v
	return s
}

func (s *GetBucketLifecycleResponseBodyRuleExpiration) SetDays(v string) *GetBucketLifecycleResponseBodyRuleExpiration {
	s.Days = &v
	return s
}

type GetBucketLifecycleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBucketLifecycleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBucketLifecycleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBucketLifecycleResponse) GoString() string {
	return s.String()
}

func (s *GetBucketLifecycleResponse) SetHeaders(v map[string]*string) *GetBucketLifecycleResponse {
	s.Headers = v
	return s
}

func (s *GetBucketLifecycleResponse) SetStatusCode(v int32) *GetBucketLifecycleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBucketLifecycleResponse) SetBody(v *GetBucketLifecycleResponseBody) *GetBucketLifecycleResponse {
	s.Body = v
	return s
}

type GetOssStorageAndAccByBucketsRequest struct {
	// The information about the bucket.
	//
	// example:
	//
	// my-bucket
	BucketList *string `json:"BucketList,omitempty" xml:"BucketList,omitempty"`
}

func (s GetOssStorageAndAccByBucketsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOssStorageAndAccByBucketsRequest) GoString() string {
	return s.String()
}

func (s *GetOssStorageAndAccByBucketsRequest) SetBucketList(v string) *GetOssStorageAndAccByBucketsRequest {
	s.BucketList = &v
	return s
}

type GetOssStorageAndAccByBucketsResponseBody struct {
	// The information about the bucket.
	BucketList []*GetOssStorageAndAccByBucketsResponseBodyBucketList `json:"BucketList,omitempty" xml:"BucketList,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 112F4860-F1B2-58DD-8FC0-75F19DA1C4BF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetOssStorageAndAccByBucketsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOssStorageAndAccByBucketsResponseBody) GoString() string {
	return s.String()
}

func (s *GetOssStorageAndAccByBucketsResponseBody) SetBucketList(v []*GetOssStorageAndAccByBucketsResponseBodyBucketList) *GetOssStorageAndAccByBucketsResponseBody {
	s.BucketList = v
	return s
}

func (s *GetOssStorageAndAccByBucketsResponseBody) SetRequestId(v string) *GetOssStorageAndAccByBucketsResponseBody {
	s.RequestId = &v
	return s
}

type GetOssStorageAndAccByBucketsResponseBodyBucketList struct {
	// The number of times that the bucket is accessed.
	//
	// example:
	//
	// 1000
	Acc *int64 `json:"Acc,omitempty" xml:"Acc,omitempty"`
	// The name of the bucket.
	//
	// example:
	//
	// my-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The storage usage of the bucket. Unit: bytes.
	//
	// example:
	//
	// 1024
	StorageUsageByte *int64 `json:"StorageUsageByte,omitempty" xml:"StorageUsageByte,omitempty"`
}

func (s GetOssStorageAndAccByBucketsResponseBodyBucketList) String() string {
	return tea.Prettify(s)
}

func (s GetOssStorageAndAccByBucketsResponseBodyBucketList) GoString() string {
	return s.String()
}

func (s *GetOssStorageAndAccByBucketsResponseBodyBucketList) SetAcc(v int64) *GetOssStorageAndAccByBucketsResponseBodyBucketList {
	s.Acc = &v
	return s
}

func (s *GetOssStorageAndAccByBucketsResponseBodyBucketList) SetBucket(v string) *GetOssStorageAndAccByBucketsResponseBodyBucketList {
	s.Bucket = &v
	return s
}

func (s *GetOssStorageAndAccByBucketsResponseBodyBucketList) SetStorageUsageByte(v int64) *GetOssStorageAndAccByBucketsResponseBodyBucketList {
	s.StorageUsageByte = &v
	return s
}

type GetOssStorageAndAccByBucketsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetOssStorageAndAccByBucketsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetOssStorageAndAccByBucketsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOssStorageAndAccByBucketsResponse) GoString() string {
	return s.String()
}

func (s *GetOssStorageAndAccByBucketsResponse) SetHeaders(v map[string]*string) *GetOssStorageAndAccByBucketsResponse {
	s.Headers = v
	return s
}

func (s *GetOssStorageAndAccByBucketsResponse) SetStatusCode(v int32) *GetOssStorageAndAccByBucketsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOssStorageAndAccByBucketsResponse) SetBody(v *GetOssStorageAndAccByBucketsResponseBody) *GetOssStorageAndAccByBucketsResponse {
	s.Body = v
	return s
}

type GetOssUsageDataRequest struct {
	// The name of the logical Object Storage Service (OSS) bucket.
	//
	// example:
	//
	// ens-sink-bucketzyp1656903494
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// The end of the time range to query. The time must be in UTC. Format: 2010-01-21T09:50:23Z.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-01-12T00:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The aggregation granularity. Unit: minutes.
	//
	// Default value: 5. Valid values: 5 to 1440.
	//
	// example:
	//
	// 10
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The beginning of the time range to query. The time must be in UTC. Format: 2010-01-21T09:50:23Z.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2022-01-11T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetOssUsageDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOssUsageDataRequest) GoString() string {
	return s.String()
}

func (s *GetOssUsageDataRequest) SetBucket(v string) *GetOssUsageDataRequest {
	s.Bucket = &v
	return s
}

func (s *GetOssUsageDataRequest) SetEndTime(v string) *GetOssUsageDataRequest {
	s.EndTime = &v
	return s
}

func (s *GetOssUsageDataRequest) SetPeriod(v string) *GetOssUsageDataRequest {
	s.Period = &v
	return s
}

func (s *GetOssUsageDataRequest) SetStartTime(v string) *GetOssUsageDataRequest {
	s.StartTime = &v
	return s
}

type GetOssUsageDataResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 2A8CCD48-14F9-0309-B957-7B1D74A8119D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The array of usage data.
	UsageList []*GetOssUsageDataResponseBodyUsageList `json:"UsageList,omitempty" xml:"UsageList,omitempty" type:"Repeated"`
}

func (s GetOssUsageDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOssUsageDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetOssUsageDataResponseBody) SetRequestId(v string) *GetOssUsageDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetOssUsageDataResponseBody) SetUsageList(v []*GetOssUsageDataResponseBodyUsageList) *GetOssUsageDataResponseBody {
	s.UsageList = v
	return s
}

type GetOssUsageDataResponseBodyUsageList struct {
	// The inbound bandwidth over the internal network. Unit: bit/s.
	//
	// example:
	//
	// 37865147
	LanRxBw *int64 `json:"LanRxBw,omitempty" xml:"LanRxBw,omitempty"`
	// The outbound bandwidth over the internal network. Unit: bit/s.
	//
	// example:
	//
	// 22012187890
	LanTxBw *int64 `json:"LanTxBw,omitempty" xml:"LanTxBw,omitempty"`
	// The number of time points within a day.
	//
	// example:
	//
	// 144
	Point *int64 `json:"Point,omitempty" xml:"Point,omitempty"`
	// The point in time, in UTC. Format: 2010-01-21T09:50:23Z.
	//
	// example:
	//
	// 2022-01-12T00:00:00Z
	PointTs *string `json:"PointTs,omitempty" xml:"PointTs,omitempty"`
	// The storage usage. Unit: bytes.
	//
	// example:
	//
	// 85462146217
	StorageUsageByte *int64 `json:"StorageUsageByte,omitempty" xml:"StorageUsageByte,omitempty"`
	// The outbound bandwidth over the Internet. Unit: bit/s.
	//
	// example:
	//
	// 542155715
	WanRxBw *int64 `json:"WanRxBw,omitempty" xml:"WanRxBw,omitempty"`
	// The outbound bandwidth over the Internet. Unit: bit/s.
	//
	// example:
	//
	// 547126175217
	WanTxBw *int64 `json:"WanTxBw,omitempty" xml:"WanTxBw,omitempty"`
}

func (s GetOssUsageDataResponseBodyUsageList) String() string {
	return tea.Prettify(s)
}

func (s GetOssUsageDataResponseBodyUsageList) GoString() string {
	return s.String()
}

func (s *GetOssUsageDataResponseBodyUsageList) SetLanRxBw(v int64) *GetOssUsageDataResponseBodyUsageList {
	s.LanRxBw = &v
	return s
}

func (s *GetOssUsageDataResponseBodyUsageList) SetLanTxBw(v int64) *GetOssUsageDataResponseBodyUsageList {
	s.LanTxBw = &v
	return s
}

func (s *GetOssUsageDataResponseBodyUsageList) SetPoint(v int64) *GetOssUsageDataResponseBodyUsageList {
	s.Point = &v
	return s
}

func (s *GetOssUsageDataResponseBodyUsageList) SetPointTs(v string) *GetOssUsageDataResponseBodyUsageList {
	s.PointTs = &v
	return s
}

func (s *GetOssUsageDataResponseBodyUsageList) SetStorageUsageByte(v int64) *GetOssUsageDataResponseBodyUsageList {
	s.StorageUsageByte = &v
	return s
}

func (s *GetOssUsageDataResponseBodyUsageList) SetWanRxBw(v int64) *GetOssUsageDataResponseBodyUsageList {
	s.WanRxBw = &v
	return s
}

func (s *GetOssUsageDataResponseBodyUsageList) SetWanTxBw(v int64) *GetOssUsageDataResponseBodyUsageList {
	s.WanTxBw = &v
	return s
}

type GetOssUsageDataResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetOssUsageDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetOssUsageDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOssUsageDataResponse) GoString() string {
	return s.String()
}

func (s *GetOssUsageDataResponse) SetHeaders(v map[string]*string) *GetOssUsageDataResponse {
	s.Headers = v
	return s
}

func (s *GetOssUsageDataResponse) SetStatusCode(v int32) *GetOssUsageDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOssUsageDataResponse) SetBody(v *GetOssUsageDataResponseBody) *GetOssUsageDataResponse {
	s.Body = v
	return s
}

type ImportImageRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// x86_64
	Architecture *string `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ens_vm
	ComputeType       *string                                `json:"ComputeType,omitempty" xml:"ComputeType,omitempty"`
	DiskDeviceMapping []*ImportImageRequestDiskDeviceMapping `json:"DiskDeviceMapping,omitempty" xml:"DiskDeviceMapping,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// qcow2
	ImageFormat *string `json:"ImageFormat,omitempty" xml:"ImageFormat,omitempty"`
	// This parameter is required.
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// example:
	//
	// tmp-hybrid
	OSSBucket *string `json:"OSSBucket,omitempty" xml:"OSSBucket,omitempty"`
	// example:
	//
	// image-test
	OSSObject *string `json:"OSSObject,omitempty" xml:"OSSObject,omitempty"`
	// example:
	//
	// cn-beijing
	OSSRegion *string `json:"OSSRegion,omitempty" xml:"OSSRegion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// example:
	//
	// 6.8
	OSVersion *string `json:"OSVersion,omitempty" xml:"OSVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// centos
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	// example:
	//
	// cn-beijing
	TargetOSSRegionId *string `json:"TargetOSSRegionId,omitempty" xml:"TargetOSSRegionId,omitempty"`
}

func (s ImportImageRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportImageRequest) GoString() string {
	return s.String()
}

func (s *ImportImageRequest) SetArchitecture(v string) *ImportImageRequest {
	s.Architecture = &v
	return s
}

func (s *ImportImageRequest) SetComputeType(v string) *ImportImageRequest {
	s.ComputeType = &v
	return s
}

func (s *ImportImageRequest) SetDiskDeviceMapping(v []*ImportImageRequestDiskDeviceMapping) *ImportImageRequest {
	s.DiskDeviceMapping = v
	return s
}

func (s *ImportImageRequest) SetImageFormat(v string) *ImportImageRequest {
	s.ImageFormat = &v
	return s
}

func (s *ImportImageRequest) SetImageName(v string) *ImportImageRequest {
	s.ImageName = &v
	return s
}

func (s *ImportImageRequest) SetOSSBucket(v string) *ImportImageRequest {
	s.OSSBucket = &v
	return s
}

func (s *ImportImageRequest) SetOSSObject(v string) *ImportImageRequest {
	s.OSSObject = &v
	return s
}

func (s *ImportImageRequest) SetOSSRegion(v string) *ImportImageRequest {
	s.OSSRegion = &v
	return s
}

func (s *ImportImageRequest) SetOSType(v string) *ImportImageRequest {
	s.OSType = &v
	return s
}

func (s *ImportImageRequest) SetOSVersion(v string) *ImportImageRequest {
	s.OSVersion = &v
	return s
}

func (s *ImportImageRequest) SetPlatform(v string) *ImportImageRequest {
	s.Platform = &v
	return s
}

func (s *ImportImageRequest) SetTargetOSSRegionId(v string) *ImportImageRequest {
	s.TargetOSSRegionId = &v
	return s
}

type ImportImageRequestDiskDeviceMapping struct {
	// example:
	//
	// www-cn
	OSSBucket *string `json:"OSSBucket,omitempty" xml:"OSSBucket,omitempty"`
	// example:
	//
	// image-bucket
	OSSObject *string `json:"OSSObject,omitempty" xml:"OSSObject,omitempty"`
	// example:
	//
	// cn-beijing
	OSSRegion *string `json:"OSSRegion,omitempty" xml:"OSSRegion,omitempty"`
}

func (s ImportImageRequestDiskDeviceMapping) String() string {
	return tea.Prettify(s)
}

func (s ImportImageRequestDiskDeviceMapping) GoString() string {
	return s.String()
}

func (s *ImportImageRequestDiskDeviceMapping) SetOSSBucket(v string) *ImportImageRequestDiskDeviceMapping {
	s.OSSBucket = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetOSSObject(v string) *ImportImageRequestDiskDeviceMapping {
	s.OSSObject = &v
	return s
}

func (s *ImportImageRequestDiskDeviceMapping) SetOSSRegion(v string) *ImportImageRequestDiskDeviceMapping {
	s.OSSRegion = &v
	return s
}

type ImportImageShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// x86_64
	Architecture *string `json:"Architecture,omitempty" xml:"Architecture,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ens_vm
	ComputeType             *string `json:"ComputeType,omitempty" xml:"ComputeType,omitempty"`
	DiskDeviceMappingShrink *string `json:"DiskDeviceMapping,omitempty" xml:"DiskDeviceMapping,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// qcow2
	ImageFormat *string `json:"ImageFormat,omitempty" xml:"ImageFormat,omitempty"`
	// This parameter is required.
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// example:
	//
	// tmp-hybrid
	OSSBucket *string `json:"OSSBucket,omitempty" xml:"OSSBucket,omitempty"`
	// example:
	//
	// image-test
	OSSObject *string `json:"OSSObject,omitempty" xml:"OSSObject,omitempty"`
	// example:
	//
	// cn-beijing
	OSSRegion *string `json:"OSSRegion,omitempty" xml:"OSSRegion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// linux
	OSType *string `json:"OSType,omitempty" xml:"OSType,omitempty"`
	// example:
	//
	// 6.8
	OSVersion *string `json:"OSVersion,omitempty" xml:"OSVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// centos
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	// example:
	//
	// cn-beijing
	TargetOSSRegionId *string `json:"TargetOSSRegionId,omitempty" xml:"TargetOSSRegionId,omitempty"`
}

func (s ImportImageShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportImageShrinkRequest) GoString() string {
	return s.String()
}

func (s *ImportImageShrinkRequest) SetArchitecture(v string) *ImportImageShrinkRequest {
	s.Architecture = &v
	return s
}

func (s *ImportImageShrinkRequest) SetComputeType(v string) *ImportImageShrinkRequest {
	s.ComputeType = &v
	return s
}

func (s *ImportImageShrinkRequest) SetDiskDeviceMappingShrink(v string) *ImportImageShrinkRequest {
	s.DiskDeviceMappingShrink = &v
	return s
}

func (s *ImportImageShrinkRequest) SetImageFormat(v string) *ImportImageShrinkRequest {
	s.ImageFormat = &v
	return s
}

func (s *ImportImageShrinkRequest) SetImageName(v string) *ImportImageShrinkRequest {
	s.ImageName = &v
	return s
}

func (s *ImportImageShrinkRequest) SetOSSBucket(v string) *ImportImageShrinkRequest {
	s.OSSBucket = &v
	return s
}

func (s *ImportImageShrinkRequest) SetOSSObject(v string) *ImportImageShrinkRequest {
	s.OSSObject = &v
	return s
}

func (s *ImportImageShrinkRequest) SetOSSRegion(v string) *ImportImageShrinkRequest {
	s.OSSRegion = &v
	return s
}

func (s *ImportImageShrinkRequest) SetOSType(v string) *ImportImageShrinkRequest {
	s.OSType = &v
	return s
}

func (s *ImportImageShrinkRequest) SetOSVersion(v string) *ImportImageShrinkRequest {
	s.OSVersion = &v
	return s
}

func (s *ImportImageShrinkRequest) SetPlatform(v string) *ImportImageShrinkRequest {
	s.Platform = &v
	return s
}

func (s *ImportImageShrinkRequest) SetTargetOSSRegionId(v string) *ImportImageShrinkRequest {
	s.TargetOSSRegionId = &v
	return s
}

type ImportImageResponseBody struct {
	// example:
	//
	// m-5wn1dh*******b48f440ntvad
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportImageResponseBody) GoString() string {
	return s.String()
}

func (s *ImportImageResponseBody) SetImageId(v string) *ImportImageResponseBody {
	s.ImageId = &v
	return s
}

func (s *ImportImageResponseBody) SetRequestId(v string) *ImportImageResponseBody {
	s.RequestId = &v
	return s
}

type ImportImageResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportImageResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportImageResponse) GoString() string {
	return s.String()
}

func (s *ImportImageResponse) SetHeaders(v map[string]*string) *ImportImageResponse {
	s.Headers = v
	return s
}

func (s *ImportImageResponse) SetStatusCode(v int32) *ImportImageResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportImageResponse) SetBody(v *ImportImageResponseBody) *ImportImageResponse {
	s.Body = v
	return s
}

type ImportKeyPairRequest struct {
	// The name of the key pair. The name must conform to the following naming conventions:
	//
	// 	- The name must be 2 to 128 characters in length.
	//
	// 	- The name must start with a letter but cannot start with `http://` or `https://`.
	//
	// 	- The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// You can specify the name of only one key pair.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestKeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The public key of the key pair. You can specify only one public key.
	//
	// This parameter is required.
	//
	// example:
	//
	// ssh-rsa AAAAB****
	PublicKeyBody *string `json:"PublicKeyBody,omitempty" xml:"PublicKeyBody,omitempty"`
}

func (s ImportKeyPairRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairRequest) GoString() string {
	return s.String()
}

func (s *ImportKeyPairRequest) SetKeyPairName(v string) *ImportKeyPairRequest {
	s.KeyPairName = &v
	return s
}

func (s *ImportKeyPairRequest) SetPublicKeyBody(v string) *ImportKeyPairRequest {
	s.PublicKeyBody = &v
	return s
}

type ImportKeyPairResponseBody struct {
	// The fingerprint of the key pair. The message-digest algorithm 5 (MD5) is used based on the public key fingerprint format defined in RFC 4716.
	//
	// example:
	//
	// fdaf8ff7a756ef843814fc****
	KeyPairFingerPrint *string `json:"KeyPairFingerPrint,omitempty" xml:"KeyPairFingerPrint,omitempty"`
	// The name of the key pair.
	//
	// example:
	//
	// TestKeyPairName
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ImportKeyPairResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairResponseBody) GoString() string {
	return s.String()
}

func (s *ImportKeyPairResponseBody) SetKeyPairFingerPrint(v string) *ImportKeyPairResponseBody {
	s.KeyPairFingerPrint = &v
	return s
}

func (s *ImportKeyPairResponseBody) SetKeyPairName(v string) *ImportKeyPairResponseBody {
	s.KeyPairName = &v
	return s
}

func (s *ImportKeyPairResponseBody) SetRequestId(v string) *ImportKeyPairResponseBody {
	s.RequestId = &v
	return s
}

type ImportKeyPairResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ImportKeyPairResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ImportKeyPairResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportKeyPairResponse) GoString() string {
	return s.String()
}

func (s *ImportKeyPairResponse) SetHeaders(v map[string]*string) *ImportKeyPairResponse {
	s.Headers = v
	return s
}

func (s *ImportKeyPairResponse) SetStatusCode(v int32) *ImportKeyPairResponse {
	s.StatusCode = &v
	return s
}

func (s *ImportKeyPairResponse) SetBody(v *ImportKeyPairResponseBody) *ImportKeyPairResponse {
	s.Body = v
	return s
}

type JoinPublicIpsToEpnInstanceRequest struct {
	// The ID of the EPN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// epn-xxxx
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	// The information about the public IP address that you want to add to the EPN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// InstanceInfos=[{"PublicIpAddress":"2.230.XX.XX"},{"PublicIpAddress":"2.230.XX.XX"}]
	InstanceInfos *string `json:"InstanceInfos,omitempty" xml:"InstanceInfos,omitempty"`
}

func (s JoinPublicIpsToEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinPublicIpsToEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *JoinPublicIpsToEpnInstanceRequest) SetEPNInstanceId(v string) *JoinPublicIpsToEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *JoinPublicIpsToEpnInstanceRequest) SetInstanceInfos(v string) *JoinPublicIpsToEpnInstanceRequest {
	s.InstanceInfos = &v
	return s
}

type JoinPublicIpsToEpnInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinPublicIpsToEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinPublicIpsToEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *JoinPublicIpsToEpnInstanceResponseBody) SetRequestId(v string) *JoinPublicIpsToEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type JoinPublicIpsToEpnInstanceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *JoinPublicIpsToEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s JoinPublicIpsToEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinPublicIpsToEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *JoinPublicIpsToEpnInstanceResponse) SetHeaders(v map[string]*string) *JoinPublicIpsToEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *JoinPublicIpsToEpnInstanceResponse) SetStatusCode(v int32) *JoinPublicIpsToEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinPublicIpsToEpnInstanceResponse) SetBody(v *JoinPublicIpsToEpnInstanceResponseBody) *JoinPublicIpsToEpnInstanceResponse {
	s.Body = v
	return s
}

type JoinSecurityGroupRequest struct {
	// The ID of the instance.
	//
	// example:
	//
	// i-bp67acfmxazb4ph***
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the ENI.
	//
	// example:
	//
	// eni-58z57orgmt6d1****
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp67acfmxazb4ph***
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s JoinSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupRequest) SetInstanceId(v string) *JoinSecurityGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetNetworkInterfaceId(v string) *JoinSecurityGroupRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *JoinSecurityGroupRequest) SetSecurityGroupId(v string) *JoinSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

type JoinSecurityGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupResponseBody) SetRequestId(v string) *JoinSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type JoinSecurityGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *JoinSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s JoinSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinSecurityGroupResponse) SetHeaders(v map[string]*string) *JoinSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *JoinSecurityGroupResponse) SetStatusCode(v int32) *JoinSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinSecurityGroupResponse) SetBody(v *JoinSecurityGroupResponseBody) *JoinSecurityGroupResponse {
	s.Body = v
	return s
}

type JoinVSwitchesToEpnInstanceRequest struct {
	// The ID of the edge network instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// epn-xxxx
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	// The information about the internal networking to which you want to add the edge network instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{"VSwitchId":"vs-ixxxx"},{"VSwitchId":"vs-ixxxx"}]
	VSwitchesInfo *string `json:"VSwitchesInfo,omitempty" xml:"VSwitchesInfo,omitempty"`
}

func (s JoinVSwitchesToEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinVSwitchesToEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *JoinVSwitchesToEpnInstanceRequest) SetEPNInstanceId(v string) *JoinVSwitchesToEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *JoinVSwitchesToEpnInstanceRequest) SetVSwitchesInfo(v string) *JoinVSwitchesToEpnInstanceRequest {
	s.VSwitchesInfo = &v
	return s
}

type JoinVSwitchesToEpnInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinVSwitchesToEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinVSwitchesToEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *JoinVSwitchesToEpnInstanceResponseBody) SetRequestId(v string) *JoinVSwitchesToEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type JoinVSwitchesToEpnInstanceResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *JoinVSwitchesToEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s JoinVSwitchesToEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinVSwitchesToEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *JoinVSwitchesToEpnInstanceResponse) SetHeaders(v map[string]*string) *JoinVSwitchesToEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *JoinVSwitchesToEpnInstanceResponse) SetStatusCode(v int32) *JoinVSwitchesToEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinVSwitchesToEpnInstanceResponse) SetBody(v *JoinVSwitchesToEpnInstanceResponseBody) *JoinVSwitchesToEpnInstanceResponse {
	s.Body = v
	return s
}

type LeaveSecurityGroupRequest struct {
	// The instance ID.
	//
	// example:
	//
	// i-bp67acfmxazb4p****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the ENI.
	//
	// example:
	//
	// eni-58z57orgmt6d1****
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp67acfmxazb4p****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
}

func (s LeaveSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupRequest) SetInstanceId(v string) *LeaveSecurityGroupRequest {
	s.InstanceId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetNetworkInterfaceId(v string) *LeaveSecurityGroupRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *LeaveSecurityGroupRequest) SetSecurityGroupId(v string) *LeaveSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

type LeaveSecurityGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s LeaveSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupResponseBody) SetRequestId(v string) *LeaveSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type LeaveSecurityGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *LeaveSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s LeaveSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s LeaveSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *LeaveSecurityGroupResponse) SetHeaders(v map[string]*string) *LeaveSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *LeaveSecurityGroupResponse) SetStatusCode(v int32) *LeaveSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *LeaveSecurityGroupResponse) SetBody(v *LeaveSecurityGroupResponseBody) *LeaveSecurityGroupResponse {
	s.Body = v
	return s
}

type ListApplicationsRequest struct {
	// The version number of the application. Separate multiple version numbers with commas (,). If you want to query data of all versions of applications, specify All for this parameter. By default, only data of applications in the stable versions are queried.
	//
	// example:
	//
	// v1,v2
	AppVersions *string `json:"AppVersions,omitempty" xml:"AppVersions,omitempty"`
	// The name of the application cluster. Separate multiple names with commas (,). If you want to query applications of all clusters in your account, specify All for this parameter. Default value: All.
	//
	// example:
	//
	// poc,pre
	ClusterNames *string `json:"ClusterNames,omitempty" xml:"ClusterNames,omitempty"`
	// The region level by which edge resources of the application are collected. The value is of the enumeration type. Valid values:
	//
	// 	- National: Chinese mainland
	//
	// 	- Big: area
	//
	// 	- Middle: province
	//
	// 	- Small: city
	//
	// 	- RegionId: edge node
	//
	// Default value: National.
	//
	// example:
	//
	// National
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The end of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2022-02-20
	MaxDate *string `json:"MaxDate,omitempty" xml:"MaxDate,omitempty"`
	// The beginning of the time range to query. Specify the time in the 2006-01-02 format. By default, the time range to query is not restricted.
	//
	// example:
	//
	// 2022-02-15
	MinDate *string `json:"MinDate,omitempty" xml:"MinDate,omitempty"`
	// Specifies whether to return other information about the application, such as statistics on resource instances and pods. The value must be a JSON string. By default, all information is returned.
	//
	// example:
	//
	// {\\"appInfo\\":true,\\"detailStat\\": true, \\"appVersionStat\\": true, \\"districtStat\\":true ,\\"instanceStat\\": true, \\"podCountStat\\": true}
	OutAppInfoParams *string `json:"OutAppInfoParams,omitempty" xml:"OutAppInfoParams,omitempty"`
	// The page number. Pages start from page 1. This parameter is optional if you want to return all information about the applications.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page. This parameter is optional if you want to return all information about the applications.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationsRequest) SetAppVersions(v string) *ListApplicationsRequest {
	s.AppVersions = &v
	return s
}

func (s *ListApplicationsRequest) SetClusterNames(v string) *ListApplicationsRequest {
	s.ClusterNames = &v
	return s
}

func (s *ListApplicationsRequest) SetLevel(v string) *ListApplicationsRequest {
	s.Level = &v
	return s
}

func (s *ListApplicationsRequest) SetMaxDate(v string) *ListApplicationsRequest {
	s.MaxDate = &v
	return s
}

func (s *ListApplicationsRequest) SetMinDate(v string) *ListApplicationsRequest {
	s.MinDate = &v
	return s
}

func (s *ListApplicationsRequest) SetOutAppInfoParams(v string) *ListApplicationsRequest {
	s.OutAppInfoParams = &v
	return s
}

func (s *ListApplicationsRequest) SetPageNumber(v int32) *ListApplicationsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListApplicationsRequest) SetPageSize(v int32) *ListApplicationsRequest {
	s.PageSize = &v
	return s
}

type ListApplicationsResponseBody struct {
	// Details about applications.
	Applications *ListApplicationsResponseBodyApplications `json:"Applications,omitempty" xml:"Applications,omitempty" type:"Struct"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 50373E71-7710-4620-8AAB-133CCE49451C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 49
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBody) SetApplications(v *ListApplicationsResponseBodyApplications) *ListApplicationsResponseBody {
	s.Applications = v
	return s
}

func (s *ListApplicationsResponseBody) SetPageNumber(v int32) *ListApplicationsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListApplicationsResponseBody) SetPageSize(v int32) *ListApplicationsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListApplicationsResponseBody) SetRequestId(v string) *ListApplicationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListApplicationsResponseBody) SetTotalCount(v int32) *ListApplicationsResponseBody {
	s.TotalCount = &v
	return s
}

type ListApplicationsResponseBodyApplications struct {
	Application []*ListApplicationsResponseBodyApplicationsApplication `json:"Application,omitempty" xml:"Application,omitempty" type:"Repeated"`
}

func (s ListApplicationsResponseBodyApplications) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyApplications) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyApplications) SetApplication(v []*ListApplicationsResponseBodyApplicationsApplication) *ListApplicationsResponseBodyApplications {
	s.Application = v
	return s
}

type ListApplicationsResponseBodyApplicationsApplication struct {
	// Details about the application.
	AppList *ListApplicationsResponseBodyApplicationsApplicationAppList `json:"AppList,omitempty" xml:"AppList,omitempty" type:"Struct"`
	// The name of the cluster.
	//
	// example:
	//
	// ay-ads-hz-h
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
}

func (s ListApplicationsResponseBodyApplicationsApplication) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyApplicationsApplication) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyApplicationsApplication) SetAppList(v *ListApplicationsResponseBodyApplicationsApplicationAppList) *ListApplicationsResponseBodyApplicationsApplication {
	s.AppList = v
	return s
}

func (s *ListApplicationsResponseBodyApplicationsApplication) SetClusterName(v string) *ListApplicationsResponseBodyApplicationsApplication {
	s.ClusterName = &v
	return s
}

type ListApplicationsResponseBodyApplicationsApplicationAppList struct {
	App []*ListApplicationsResponseBodyApplicationsApplicationAppListApp `json:"App,omitempty" xml:"App,omitempty" type:"Repeated"`
}

func (s ListApplicationsResponseBodyApplicationsApplicationAppList) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyApplicationsApplicationAppList) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyApplicationsApplicationAppList) SetApp(v []*ListApplicationsResponseBodyApplicationsApplicationAppListApp) *ListApplicationsResponseBodyApplicationsApplicationAppList {
	s.App = v
	return s
}

type ListApplicationsResponseBodyApplicationsApplicationAppListApp struct {
	// The ID of the application.
	//
	// example:
	//
	// e76f8985-7965-41fc-925b-9648bb6bf650
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The information about the application, such as the resource specification, parameter configuration, and resources.
	//
	// example:
	//
	// {
	//
	//     "AppStatus":{
	//
	//         "Phase":"RUNNING",
	//
	//         "StatusDescrip":"{\\"status\\":\\"UPDATE_SUCCESS\\",\\"step\\":\\"DONE\\",\\"descrip\\":\\"update to version:1022 success\\",\\"start_time\\":\\"2022-03-01 16:18:22\\"}",
	//
	//         "UpdateTime":"2022-03-01 16:18:22",
	//
	//         "OrderStatus":null
	//
	//     },
	//
	//     "ResourceAttribute":{
	//
	//         "NetSecurityInfo":null,
	//
	//         "InitConfig":null,
	//
	//         "InventoryType":"Ens",
	//
	//         "InstanceSpec":"ens.gi6s-c12g1.large",
	//
	//         "SystemDiskSize":100,
	//
	//         "DataDiskSize":0,
	//
	//         "BandwithOut":5000,
	//
	//         "SchedulingStrategy":"Disperse",
	//
	//         "ImageId":"m-5or73kzkuxytv7hh6wxr6yc5q",
	//
	//         "ResourceType":"Linux",
	//
	//         "AreaLevel":"National",
	//
	//         "IpType":"PublicIP"
	//
	//     },
	//
	//     "WorkloadAttribute":[
	//
	//         {
	//
	//             "Name":"andorid",
	//
	//             "Count":15,
	//
	//             "ServiceConfig":{
	//
	//                 "PortsBindConfig":{
	//
	//                     "NetServiceContainer":"uravi-service",
	//
	//                     "Ports":[
	//
	//                         {
	//
	//                             "Protocol":"TCP",
	//
	//                             "BindType":"Mapping",
	//
	//                             "StartNodePorts":"31000-31009",
	//
	//                             "ContainerPorts":"4440-4449"
	//
	//                         },
	//
	//                         {
	//
	//                             "Protocol":"TCP",
	//
	//                             "BindType":"PassThrough",
	//
	//                             "StartNodePorts":"59000-59000",
	//
	//                             "ContainerPorts":"59000-59000"
	//
	//                         },
	//
	//                         {
	//
	//                             "Protocol":"UDP",
	//
	//                             "BindType":"PassThrough",
	//
	//                             "StartNodePorts":"40001-40010",
	//
	//                             "ContainerPorts":"40001-40010"
	//
	//                         }
	//
	//                     ]
	//
	//                 },
	//
	//                 "ServiceContainerName":"android"
	//
	//             }
	//
	//         },
	//
	//         {
	//
	//             "Name":"coturn",
	//
	//             "Count":1,
	//
	//             "ServiceConfig":{
	//
	//                 "PortsBindConfig":{
	//
	//                     "NetServiceContainer":"coturn",
	//
	//                     "Ports":[
	//
	//                         {
	//
	//                             "Protocol":"TCP",
	//
	//                             "BindType":"PassThrough",
	//
	//                             "StartNodePorts":"3478-3478",
	//
	//                             "ContainerPorts":"3478-3478"
	//
	//                         },
	//
	//                         {
	//
	//                             "Protocol":"UDP",
	//
	//                             "BindType":"PassThrough",
	//
	//                             "StartNodePorts":"3478-3478",
	//
	//                             "ContainerPorts":"3478-3478"
	//
	//                         }
	//
	//                     ]
	//
	//                 },
	//
	//                 "ServiceContainerName":"coturn"
	//
	//             }
	//
	//         },
	//
	//         {
	//
	//             "Name":"aic-manager",
	//
	//             "Count":1,
	//
	//             "ServiceConfig":null
	//
	//         }
	//
	//     ]
	//
	// }
	AppInfo *string `json:"AppInfo,omitempty" xml:"AppInfo,omitempty"`
}

func (s ListApplicationsResponseBodyApplicationsApplicationAppListApp) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponseBodyApplicationsApplicationAppListApp) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponseBodyApplicationsApplicationAppListApp) SetAppId(v string) *ListApplicationsResponseBodyApplicationsApplicationAppListApp {
	s.AppId = &v
	return s
}

func (s *ListApplicationsResponseBodyApplicationsApplicationAppListApp) SetAppInfo(v string) *ListApplicationsResponseBodyApplicationsApplicationAppListApp {
	s.AppInfo = &v
	return s
}

type ListApplicationsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationsResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationsResponse) SetHeaders(v map[string]*string) *ListApplicationsResponse {
	s.Headers = v
	return s
}

func (s *ListApplicationsResponse) SetStatusCode(v int32) *ListApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListApplicationsResponse) SetBody(v *ListApplicationsResponseBody) *ListApplicationsResponse {
	s.Body = v
	return s
}

type ListBucketsRequest struct {
	// The page number. Pages start from page 1.
	//
	// example:
	//
	// 1
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The maximum number of returned buckets. You can leave this parameter empty. The default value is 10. The value cannot be greater than 100.
	//
	// example:
	//
	// 5
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The prefix that returned bucket names must contain. If this parameter is not specified, prefix information will not be used as a filter.
	//
	// example:
	//
	// image
	Prefix *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
}

func (s ListBucketsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBucketsRequest) GoString() string {
	return s.String()
}

func (s *ListBucketsRequest) SetPageNumber(v string) *ListBucketsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListBucketsRequest) SetPageSize(v string) *ListBucketsRequest {
	s.PageSize = &v
	return s
}

func (s *ListBucketsRequest) SetPrefix(v string) *ListBucketsRequest {
	s.Prefix = &v
	return s
}

type ListBucketsResponseBody struct {
	// The list of bucket information.
	BucketInfos []*ListBucketsResponseBodyBucketInfos `json:"BucketInfos,omitempty" xml:"BucketInfos,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 435769C7-AA6F-4DC5-B3DB-A3DC0DE7E853
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of buckets that match the conditions.
	//
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListBucketsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBucketsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBucketsResponseBody) SetBucketInfos(v []*ListBucketsResponseBodyBucketInfos) *ListBucketsResponseBody {
	s.BucketInfos = v
	return s
}

func (s *ListBucketsResponseBody) SetRequestId(v string) *ListBucketsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListBucketsResponseBody) SetTotalCount(v int64) *ListBucketsResponseBody {
	s.TotalCount = &v
	return s
}

type ListBucketsResponseBodyBucketInfos struct {
	// The access control list (ACL) of the bucket.
	//
	// 	- **public-read-write**
	//
	// 	- **public-read**
	//
	// 	- **private*	- (default)
	//
	// example:
	//
	// private
	BucketAcl *string `json:"BucketAcl,omitempty" xml:"BucketAcl,omitempty"`
	// The name of the bucket.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The remarks.
	//
	// example:
	//
	// numb
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	// The time when the bucket was created. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-10-12T05:45:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the region where the node is located.
	//
	// example:
	//
	// cn-dalian-unicom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The type of the single-node storage. Set the value to sink.
	//
	// example:
	//
	// sink
	LogicalBucketType *string `json:"LogicalBucketType,omitempty" xml:"LogicalBucketType,omitempty"`
	// The time when the bucket was modified. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2022-10-12T06:45:00Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
}

func (s ListBucketsResponseBodyBucketInfos) String() string {
	return tea.Prettify(s)
}

func (s ListBucketsResponseBodyBucketInfos) GoString() string {
	return s.String()
}

func (s *ListBucketsResponseBodyBucketInfos) SetBucketAcl(v string) *ListBucketsResponseBodyBucketInfos {
	s.BucketAcl = &v
	return s
}

func (s *ListBucketsResponseBodyBucketInfos) SetBucketName(v string) *ListBucketsResponseBodyBucketInfos {
	s.BucketName = &v
	return s
}

func (s *ListBucketsResponseBodyBucketInfos) SetComment(v string) *ListBucketsResponseBodyBucketInfos {
	s.Comment = &v
	return s
}

func (s *ListBucketsResponseBodyBucketInfos) SetCreateTime(v string) *ListBucketsResponseBodyBucketInfos {
	s.CreateTime = &v
	return s
}

func (s *ListBucketsResponseBodyBucketInfos) SetEnsRegionId(v string) *ListBucketsResponseBodyBucketInfos {
	s.EnsRegionId = &v
	return s
}

func (s *ListBucketsResponseBodyBucketInfos) SetLogicalBucketType(v string) *ListBucketsResponseBodyBucketInfos {
	s.LogicalBucketType = &v
	return s
}

func (s *ListBucketsResponseBodyBucketInfos) SetModifyTime(v string) *ListBucketsResponseBodyBucketInfos {
	s.ModifyTime = &v
	return s
}

type ListBucketsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListBucketsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListBucketsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBucketsResponse) GoString() string {
	return s.String()
}

func (s *ListBucketsResponse) SetHeaders(v map[string]*string) *ListBucketsResponse {
	s.Headers = v
	return s
}

func (s *ListBucketsResponse) SetStatusCode(v int32) *ListBucketsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListBucketsResponse) SetBody(v *ListBucketsResponseBody) *ListBucketsResponse {
	s.Body = v
	return s
}

type ListObjectsRequest struct {
	// The name of the bucket.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The token used in this list operation. If the number of objects exceeds the value of MaxKeys, the NextContinuationToken is included in the response as the token for the next list operation.
	//
	// example:
	//
	// test1.txt
	ContinuationToken *string `json:"ContinuationToken,omitempty" xml:"ContinuationToken,omitempty"`
	// The encoding type of the object names in the response. Only URL encoding is supported.
	//
	// example:
	//
	// url
	EncodingType *string `json:"EncodingType,omitempty" xml:"EncodingType,omitempty"`
	// The position from which the list operation starts. If this parameter is specified, objects whose names are alphabetically greater than value of Marker are returned. The Marker parameter is used to list the returned objects by page, and its value must be smaller than 1,024 bytes in length.
	//
	// Even if the value specified for Marker does not exist in the list during a conditional query, the list starts from the object whose name is alphabetically greater than the value of Marker.
	//
	// example:
	//
	// a
	Marker *string `json:"Marker,omitempty" xml:"Marker,omitempty"`
	// The maximum number of objects to return. Valid values: 0 to 1000. Default value: 100.
	//
	// example:
	//
	// 100
	MaxKeys *int64 `json:"MaxKeys,omitempty" xml:"MaxKeys,omitempty"`
	// The prefix that must be included in the names of objects you want to list. If you specify a prefix to query objects, the returned object names contain the prefix.
	//
	// The value of the parameter must be less than 1,000 bytes in length.
	//
	// example:
	//
	// b
	Prefix *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
	// The position from which the list operation starts. If this parameter is specified, objects whose names are alphabetically greater than the value of StartAfter are returned. The StartAfter parameter is used to list the returned objects by page, and its value must be less than 1,000 bytes in length. Even if the value specified for StartAfter does not exist in the list during a conditional query, the list starts from the object whose name is alphabetically greater than the value of StartAfter.
	//
	// example:
	//
	// b
	StartAfter *string `json:"StartAfter,omitempty" xml:"StartAfter,omitempty"`
}

func (s ListObjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListObjectsRequest) GoString() string {
	return s.String()
}

func (s *ListObjectsRequest) SetBucketName(v string) *ListObjectsRequest {
	s.BucketName = &v
	return s
}

func (s *ListObjectsRequest) SetContinuationToken(v string) *ListObjectsRequest {
	s.ContinuationToken = &v
	return s
}

func (s *ListObjectsRequest) SetEncodingType(v string) *ListObjectsRequest {
	s.EncodingType = &v
	return s
}

func (s *ListObjectsRequest) SetMarker(v string) *ListObjectsRequest {
	s.Marker = &v
	return s
}

func (s *ListObjectsRequest) SetMaxKeys(v int64) *ListObjectsRequest {
	s.MaxKeys = &v
	return s
}

func (s *ListObjectsRequest) SetPrefix(v string) *ListObjectsRequest {
	s.Prefix = &v
	return s
}

func (s *ListObjectsRequest) SetStartAfter(v string) *ListObjectsRequest {
	s.StartAfter = &v
	return s
}

type ListObjectsResponseBody struct {
	// The name of the bucket.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// If the delimiter parameter is specified in the request, the response contains CommonPrefixes. Objects whose names contain the same string from the prefix to the next occurrence of the delimiter are grouped as a single result element in CommonPrefixes.
	CommonPrefixes []*string `json:"CommonPrefixes,omitempty" xml:"CommonPrefixes,omitempty" type:"Repeated"`
	// The list of object metadata.
	Contents []*ListObjectsResponseBodyContents `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
	// The token used in this list operation.
	//
	// example:
	//
	// test1.txt
	ContinuationToken *string `json:"ContinuationToken,omitempty" xml:"ContinuationToken,omitempty"`
	// The character used to group objects by name.
	//
	// example:
	//
	// /
	Delimiter *string `json:"Delimiter,omitempty" xml:"Delimiter,omitempty"`
	// The encoding type of the object names in the response.
	//
	// example:
	//
	// N/A
	EncodingType *string `json:"EncodingType,omitempty" xml:"EncodingType,omitempty"`
	// Indicates whether the listed objects are truncated. Valid values:
	//
	// 	- **false**
	//
	// 	- **true**
	//
	// example:
	//
	// true
	IsTruncated *bool `json:"IsTruncated,omitempty" xml:"IsTruncated,omitempty"`
	// The number of keys returned for this request.
	//
	// example:
	//
	// 10
	KeyCount *int64 `json:"KeyCount,omitempty" xml:"KeyCount,omitempty"`
	// The position from which the list operation starts.
	//
	// example:
	//
	// ceshi.txt1617853707991
	Marker *string `json:"Marker,omitempty" xml:"Marker,omitempty"`
	// The maximum number of objects returned.
	//
	// example:
	//
	// 10
	MaxKeys *int64 `json:"MaxKeys,omitempty" xml:"MaxKeys,omitempty"`
	// The token used in the next list operation.
	//
	// example:
	//
	// CgJiYw--
	NextContinuationToken *string `json:"NextContinuationToken,omitempty" xml:"NextContinuationToken,omitempty"`
	// The position from which the next list operation starts.
	//
	// example:
	//
	// ceshi.txt1617853707991
	NextMarker *string `json:"NextMarker,omitempty" xml:"NextMarker,omitempty"`
	// The prefix contained in the names of returned objects.
	//
	// example:
	//
	// b
	Prefix *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4833C4AC-9396-458C-8F25-1D701334E560
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListObjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListObjectsResponseBody) GoString() string {
	return s.String()
}

func (s *ListObjectsResponseBody) SetBucketName(v string) *ListObjectsResponseBody {
	s.BucketName = &v
	return s
}

func (s *ListObjectsResponseBody) SetCommonPrefixes(v []*string) *ListObjectsResponseBody {
	s.CommonPrefixes = v
	return s
}

func (s *ListObjectsResponseBody) SetContents(v []*ListObjectsResponseBodyContents) *ListObjectsResponseBody {
	s.Contents = v
	return s
}

func (s *ListObjectsResponseBody) SetContinuationToken(v string) *ListObjectsResponseBody {
	s.ContinuationToken = &v
	return s
}

func (s *ListObjectsResponseBody) SetDelimiter(v string) *ListObjectsResponseBody {
	s.Delimiter = &v
	return s
}

func (s *ListObjectsResponseBody) SetEncodingType(v string) *ListObjectsResponseBody {
	s.EncodingType = &v
	return s
}

func (s *ListObjectsResponseBody) SetIsTruncated(v bool) *ListObjectsResponseBody {
	s.IsTruncated = &v
	return s
}

func (s *ListObjectsResponseBody) SetKeyCount(v int64) *ListObjectsResponseBody {
	s.KeyCount = &v
	return s
}

func (s *ListObjectsResponseBody) SetMarker(v string) *ListObjectsResponseBody {
	s.Marker = &v
	return s
}

func (s *ListObjectsResponseBody) SetMaxKeys(v int64) *ListObjectsResponseBody {
	s.MaxKeys = &v
	return s
}

func (s *ListObjectsResponseBody) SetNextContinuationToken(v string) *ListObjectsResponseBody {
	s.NextContinuationToken = &v
	return s
}

func (s *ListObjectsResponseBody) SetNextMarker(v string) *ListObjectsResponseBody {
	s.NextMarker = &v
	return s
}

func (s *ListObjectsResponseBody) SetPrefix(v string) *ListObjectsResponseBody {
	s.Prefix = &v
	return s
}

func (s *ListObjectsResponseBody) SetRequestId(v string) *ListObjectsResponseBody {
	s.RequestId = &v
	return s
}

type ListObjectsResponseBodyContents struct {
	// The entity tag (ETag). When an object is created, an ETag is created to identify the content of the object.
	//
	// 	- For an object that is created by calling the PutObject operation, the ETag value of the object is the MD5 hash of the object content.
	//
	// 	- For an object that is not created by calling the PutObject operation, the ETag value of the object is the UUID of the object content.
	//
	// 	- The ETag of an object can be used to check whether the object content is modified. However, we recommend that you use the MD5 hash of an object rather than the ETag value of the object to verify data integrity.
	//
	// example:
	//
	// 5B3C1A2E053D763E1B002CC607C5****
	ETag *string `json:"ETag,omitempty" xml:"ETag,omitempty"`
	// The name of the object.
	//
	// example:
	//
	// ceshi.txt1617853706546
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The time when the object was last modified.
	//
	// example:
	//
	// 2021-04-08T03:48:47.488Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// The size of the returned object. Unit: bytes.
	//
	// example:
	//
	// 15
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s ListObjectsResponseBodyContents) String() string {
	return tea.Prettify(s)
}

func (s ListObjectsResponseBodyContents) GoString() string {
	return s.String()
}

func (s *ListObjectsResponseBodyContents) SetETag(v string) *ListObjectsResponseBodyContents {
	s.ETag = &v
	return s
}

func (s *ListObjectsResponseBodyContents) SetKey(v string) *ListObjectsResponseBodyContents {
	s.Key = &v
	return s
}

func (s *ListObjectsResponseBodyContents) SetLastModified(v string) *ListObjectsResponseBodyContents {
	s.LastModified = &v
	return s
}

func (s *ListObjectsResponseBodyContents) SetSize(v int64) *ListObjectsResponseBodyContents {
	s.Size = &v
	return s
}

type ListObjectsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListObjectsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListObjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListObjectsResponse) GoString() string {
	return s.String()
}

func (s *ListObjectsResponse) SetHeaders(v map[string]*string) *ListObjectsResponse {
	s.Headers = v
	return s
}

func (s *ListObjectsResponse) SetStatusCode(v int32) *ListObjectsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListObjectsResponse) SetBody(v *ListObjectsResponseBody) *ListObjectsResponse {
	s.Body = v
	return s
}

type ListProductAbilitiesResponseBody struct {
	ProductAbilities []*string `json:"ProductAbilities,omitempty" xml:"ProductAbilities,omitempty" type:"Repeated"`
	// example:
	//
	// xxxxx-75ED-422E-A022-7121FA18C968
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListProductAbilitiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListProductAbilitiesResponseBody) GoString() string {
	return s.String()
}

func (s *ListProductAbilitiesResponseBody) SetProductAbilities(v []*string) *ListProductAbilitiesResponseBody {
	s.ProductAbilities = v
	return s
}

func (s *ListProductAbilitiesResponseBody) SetRequestId(v string) *ListProductAbilitiesResponseBody {
	s.RequestId = &v
	return s
}

type ListProductAbilitiesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListProductAbilitiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListProductAbilitiesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListProductAbilitiesResponse) GoString() string {
	return s.String()
}

func (s *ListProductAbilitiesResponse) SetHeaders(v map[string]*string) *ListProductAbilitiesResponse {
	s.Headers = v
	return s
}

func (s *ListProductAbilitiesResponse) SetStatusCode(v int32) *ListProductAbilitiesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListProductAbilitiesResponse) SetBody(v *ListProductAbilitiesResponseBody) *ListProductAbilitiesResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	// The token of the first page to query.
	//
	// example:
	//
	// 153ba0bbb2be03f84eb48b699f0a4123
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The IDs of resources. Valid values of N: 1 to 50.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource. Set the value to instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags.
	Tag []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	// The key of tag N of the instance. Valid values of N: **1*	- to **20**.
	//
	// 	- The key cannot start with `aliyun`, `acs:`, `http://`, or `https://`.
	//
	// 	- The key must be up to 64 characters in length.
	//
	// 	- The tag key cannot be an empty string.
	//
	// example:
	//
	// team
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of a tag that is attached to the topics you want to query. This parameter is not required. If you configure this parameter, you must also configure the **Key*	- parameter.***	- If you include the Key and Value parameters in a request, this operation queries only the topics that use the specified tags. If you do not include these parameters in a request, this operation queries all topics that you can access.
	//
	// 	- Valid values of N: 1 to 20.
	//
	// 	- The value of this parameter can be an empty string.
	//
	// 	- The tag key can be up to 128 characters in length and cannot contain http:// or https://. The tag key cannot start with acs: or aliyun.
	//
	// example:
	//
	// tagValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	// The token of the first page to query.
	//
	// example:
	//
	// abcfeg368547ccdef
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// C78D9B61-69D8-5655-A312-A15DA5EA5D5E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The tags that are added to specified one or more resources.
	TagResources []*ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v []*ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	// The ID of the associated resources.
	//
	// example:
	//
	// i-5zy93g7z1hnkdmav84joxyzgn
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the resource.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag key of the instance.
	//
	// example:
	//
	// test_tag_key-2
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// CLUSTER
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceId(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceType(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagKey(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagValue(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ModifyEnsEipAddressAttributeRequest struct {
	// The ID of the EIP.
	//
	// This parameter is required.
	//
	// example:
	//
	// eip-5sw5dxzgi6umq4uexxkt8wpma
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	// The peak bandwidth of the EIP. Default value: 5. Valid values: **5*	- to **10000**. Unit: Mbit/s.
	//
	// example:
	//
	// 50
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The new description of the EIP. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	//
	// example:
	//
	// abc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The new name of the EIP. The name must be 2 to 128 characters in length and cannot start with http:// or https://.
	//
	// example:
	//
	// test-api-modify
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifyEnsEipAddressAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEnsEipAddressAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyEnsEipAddressAttributeRequest) SetAllocationId(v string) *ModifyEnsEipAddressAttributeRequest {
	s.AllocationId = &v
	return s
}

func (s *ModifyEnsEipAddressAttributeRequest) SetBandwidth(v int32) *ModifyEnsEipAddressAttributeRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyEnsEipAddressAttributeRequest) SetDescription(v string) *ModifyEnsEipAddressAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyEnsEipAddressAttributeRequest) SetName(v string) *ModifyEnsEipAddressAttributeRequest {
	s.Name = &v
	return s
}

type ModifyEnsEipAddressAttributeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyEnsEipAddressAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEnsEipAddressAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEnsEipAddressAttributeResponseBody) SetRequestId(v string) *ModifyEnsEipAddressAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyEnsEipAddressAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyEnsEipAddressAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyEnsEipAddressAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEnsEipAddressAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyEnsEipAddressAttributeResponse) SetHeaders(v map[string]*string) *ModifyEnsEipAddressAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyEnsEipAddressAttributeResponse) SetStatusCode(v int32) *ModifyEnsEipAddressAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEnsEipAddressAttributeResponse) SetBody(v *ModifyEnsEipAddressAttributeResponseBody) *ModifyEnsEipAddressAttributeResponse {
	s.Body = v
	return s
}

type ModifyEnsRouteEntryRequest struct {
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// rte-5****
	RouteEntryId *string `json:"RouteEntryId,omitempty" xml:"RouteEntryId,omitempty"`
	// example:
	//
	// test
	RouteEntryName *string `json:"RouteEntryName,omitempty" xml:"RouteEntryName,omitempty"`
}

func (s ModifyEnsRouteEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEnsRouteEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifyEnsRouteEntryRequest) SetDescription(v string) *ModifyEnsRouteEntryRequest {
	s.Description = &v
	return s
}

func (s *ModifyEnsRouteEntryRequest) SetRouteEntryId(v string) *ModifyEnsRouteEntryRequest {
	s.RouteEntryId = &v
	return s
}

func (s *ModifyEnsRouteEntryRequest) SetRouteEntryName(v string) *ModifyEnsRouteEntryRequest {
	s.RouteEntryName = &v
	return s
}

type ModifyEnsRouteEntryResponseBody struct {
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyEnsRouteEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEnsRouteEntryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEnsRouteEntryResponseBody) SetRequestId(v string) *ModifyEnsRouteEntryResponseBody {
	s.RequestId = &v
	return s
}

type ModifyEnsRouteEntryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyEnsRouteEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyEnsRouteEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEnsRouteEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifyEnsRouteEntryResponse) SetHeaders(v map[string]*string) *ModifyEnsRouteEntryResponse {
	s.Headers = v
	return s
}

func (s *ModifyEnsRouteEntryResponse) SetStatusCode(v int32) *ModifyEnsRouteEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEnsRouteEntryResponse) SetBody(v *ModifyEnsRouteEntryResponseBody) *ModifyEnsRouteEntryResponse {
	s.Body = v
	return s
}

type ModifyEpnInstanceRequest struct {
	// The ID of the EPN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// epn-****
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	// The name of the EPN instance.
	//
	// example:
	//
	// ens_test_epn
	EPNInstanceName *string `json:"EPNInstanceName,omitempty" xml:"EPNInstanceName,omitempty"`
	// The maximum outbound public bandwidth. Unit: Mbit/s. Valid values: 1 Mbit/s to 100 Mbit/s.
	//
	// example:
	//
	// 10
	InternetMaxBandwidthOut *int32 `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	// The networking mode. Valid values:
	//
	// 	- **SpeedUp**: Intelligent acceleration network (Internet).
	//
	// 	- **Connection**: Internal network.
	//
	// 	- **SpeedUpAndConnection**: Intelligent acceleration network and internal network.
	//
	// >  The internal network supports only **Connection*	- and **SpeedUpAndConnection**.
	//
	// example:
	//
	// SpeedUp
	NetworkingModel *string `json:"NetworkingModel,omitempty" xml:"NetworkingModel,omitempty"`
}

func (s ModifyEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *ModifyEpnInstanceRequest) SetEPNInstanceId(v string) *ModifyEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *ModifyEpnInstanceRequest) SetEPNInstanceName(v string) *ModifyEpnInstanceRequest {
	s.EPNInstanceName = &v
	return s
}

func (s *ModifyEpnInstanceRequest) SetInternetMaxBandwidthOut(v int32) *ModifyEpnInstanceRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *ModifyEpnInstanceRequest) SetNetworkingModel(v string) *ModifyEpnInstanceRequest {
	s.NetworkingModel = &v
	return s
}

type ModifyEpnInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEpnInstanceResponseBody) SetRequestId(v string) *ModifyEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ModifyEpnInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *ModifyEpnInstanceResponse) SetHeaders(v map[string]*string) *ModifyEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *ModifyEpnInstanceResponse) SetStatusCode(v int32) *ModifyEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEpnInstanceResponse) SetBody(v *ModifyEpnInstanceResponseBody) *ModifyEpnInstanceResponse {
	s.Body = v
	return s
}

type ModifyFileSystemRequest struct {
	// The description of the file system.
	//
	// This parameter is required.
	//
	// example:
	//
	// fileSystemTest
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the edge node.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing-cmcc
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The ID of the file system.
	//
	// This parameter is required.
	//
	// example:
	//
	// c50f8*****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
}

func (s ModifyFileSystemRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFileSystemRequest) GoString() string {
	return s.String()
}

func (s *ModifyFileSystemRequest) SetDescription(v string) *ModifyFileSystemRequest {
	s.Description = &v
	return s
}

func (s *ModifyFileSystemRequest) SetEnsRegionId(v string) *ModifyFileSystemRequest {
	s.EnsRegionId = &v
	return s
}

func (s *ModifyFileSystemRequest) SetFileSystemId(v string) *ModifyFileSystemRequest {
	s.FileSystemId = &v
	return s
}

type ModifyFileSystemResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 4EC47282-1B74-4534-BD0E-403F3EE64CAF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyFileSystemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFileSystemResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFileSystemResponseBody) SetRequestId(v string) *ModifyFileSystemResponseBody {
	s.RequestId = &v
	return s
}

type ModifyFileSystemResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyFileSystemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyFileSystemResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFileSystemResponse) GoString() string {
	return s.String()
}

func (s *ModifyFileSystemResponse) SetHeaders(v map[string]*string) *ModifyFileSystemResponse {
	s.Headers = v
	return s
}

func (s *ModifyFileSystemResponse) SetStatusCode(v int32) *ModifyFileSystemResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyFileSystemResponse) SetBody(v *ModifyFileSystemResponseBody) *ModifyFileSystemResponse {
	s.Body = v
	return s
}

type ModifyForwardEntryRequest struct {
	// The elastic IP address (EIP) that is used to access the Internet.
	//
	// example:
	//
	// 121.XXX.XXX.28
	ExternalIp *string `json:"ExternalIp,omitempty" xml:"ExternalIp,omitempty"`
	// The external port or port range that is used for port forwarding.
	//
	// 	- Valid values: 1 to 65535.
	//
	// 	- To specify a port range, separate the first port and the last port with a forward slash (/), such as 10/20.
	//
	// 	- If you set ExternalPort to a port range, you must also set InternalPort to a port range. The number of ports in the port ranges must be the same. For example, if you set ExternalPort to 10/20, you can set InternalPort to 80/90.
	//
	// example:
	//
	// 22
	ExternalPort *string `json:"ExternalPort,omitempty" xml:"ExternalPort,omitempty"`
	// The ID of the DNAT entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// dnat-5tfjp3537mi6iokl59g5c****
	ForwardEntryId *string `json:"ForwardEntryId,omitempty" xml:"ForwardEntryId,omitempty"`
	// The name of the DNAT entry. The name must be 2 to 128 characters in length. It cannot start with `http://` or `https://`.
	//
	// example:
	//
	// test0
	ForwardEntryName *string `json:"ForwardEntryName,omitempty" xml:"ForwardEntryName,omitempty"`
	// The probe port. The port must be within the internal port range. By default, this parameter is left empty.
	//
	// example:
	//
	// 80
	HealthCheckPort *int32 `json:"HealthCheckPort,omitempty" xml:"HealthCheckPort,omitempty"`
	// The private IP address of the instance that uses the DNAT entry for Internet communication.
	//
	// example:
	//
	// 10.XXX.XXX.50
	InternalIp *string `json:"InternalIp,omitempty" xml:"InternalIp,omitempty"`
	// The internal port or port range that is used for port forwarding.
	//
	// 	- Valid values: 1 to 65535.
	//
	// 	- To specify a port range, separate the first port and the last port with a forward slash (/), such as 10/20.
	//
	// example:
	//
	// 22
	InternalPort *string `json:"InternalPort,omitempty" xml:"InternalPort,omitempty"`
	// The protocol. Valid values:
	//
	// 	- **TCP**: forwards TCP packets.
	//
	// 	- **UDP**: forwards UDP packets.
	//
	// 	- **Any*	- (default): forwards all packets.
	//
	// example:
	//
	// Any
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
}

func (s ModifyForwardEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryRequest) SetExternalIp(v string) *ModifyForwardEntryRequest {
	s.ExternalIp = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetExternalPort(v string) *ModifyForwardEntryRequest {
	s.ExternalPort = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetForwardEntryId(v string) *ModifyForwardEntryRequest {
	s.ForwardEntryId = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetForwardEntryName(v string) *ModifyForwardEntryRequest {
	s.ForwardEntryName = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetHealthCheckPort(v int32) *ModifyForwardEntryRequest {
	s.HealthCheckPort = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetInternalIp(v string) *ModifyForwardEntryRequest {
	s.InternalIp = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetInternalPort(v string) *ModifyForwardEntryRequest {
	s.InternalPort = &v
	return s
}

func (s *ModifyForwardEntryRequest) SetIpProtocol(v string) *ModifyForwardEntryRequest {
	s.IpProtocol = &v
	return s
}

type ModifyForwardEntryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyForwardEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryResponseBody) SetRequestId(v string) *ModifyForwardEntryResponseBody {
	s.RequestId = &v
	return s
}

type ModifyForwardEntryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyForwardEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyForwardEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyForwardEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifyForwardEntryResponse) SetHeaders(v map[string]*string) *ModifyForwardEntryResponse {
	s.Headers = v
	return s
}

func (s *ModifyForwardEntryResponse) SetStatusCode(v int32) *ModifyForwardEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyForwardEntryResponse) SetBody(v *ModifyForwardEntryResponseBody) *ModifyForwardEntryResponse {
	s.Body = v
	return s
}

type ModifyHaVipAttributeRequest struct {
	// The ID of the HAVIP that you want to modify.
	//
	// This parameter is required.
	//
	// example:
	//
	// havip-52y28****
	HaVipId *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
	// The name of the HAVIP. The name must be 1 to 128 characters in length and cannot start with http:// or https://.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifyHaVipAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyHaVipAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyHaVipAttributeRequest) SetHaVipId(v string) *ModifyHaVipAttributeRequest {
	s.HaVipId = &v
	return s
}

func (s *ModifyHaVipAttributeRequest) SetName(v string) *ModifyHaVipAttributeRequest {
	s.Name = &v
	return s
}

type ModifyHaVipAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// F3B261DD-3858-4D3C-877D-303ADF374600
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyHaVipAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyHaVipAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyHaVipAttributeResponseBody) SetRequestId(v string) *ModifyHaVipAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyHaVipAttributeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyHaVipAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyHaVipAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyHaVipAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyHaVipAttributeResponse) SetHeaders(v map[string]*string) *ModifyHaVipAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyHaVipAttributeResponse) SetStatusCode(v int32) *ModifyHaVipAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyHaVipAttributeResponse) SetBody(v *ModifyHaVipAttributeResponseBody) *ModifyHaVipAttributeResponse {
	s.Body = v
	return s
}

type ModifyImageAttributeRequest struct {
	// The ID of the image.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-5t4xwkfkbs0uxv0kymdb6uip7
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image.
	//
	// This parameter is required.
	//
	// example:
	//
	// Image Name
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
}

func (s ModifyImageAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeRequest) SetImageId(v string) *ModifyImageAttributeRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetImageName(v string) *ModifyImageAttributeRequest {
	s.ImageName = &v
	return s
}

type ModifyImageAttributeResponseBody struct {
	// The service code. 0 is returned for a successful request. An error code is returned for a failed request.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// AC66B8F3-0B0A-5FB1-9EA2-DC03B2CD5B04
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImageAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeResponseBody) SetCode(v int32) *ModifyImageAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyImageAttributeResponseBody) SetRequestId(v string) *ModifyImageAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyImageAttributeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyImageAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyImageAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeResponse) SetHeaders(v map[string]*string) *ModifyImageAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyImageAttributeResponse) SetStatusCode(v int32) *ModifyImageAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyImageAttributeResponse) SetBody(v *ModifyImageAttributeResponseBody) *ModifyImageAttributeResponse {
	s.Body = v
	return s
}

type ModifyImageSharePermissionRequest struct {
	// The ID of the Alibaba Cloud account with which you want to share the image. You can specify multiple Alibaba Cloud IDs. Separate multiple IDs with commas (,).
	//
	// example:
	//
	// 1122334455**
	AddAccounts *string `json:"AddAccounts,omitempty" xml:"AddAccounts,omitempty"`
	// The ID of the image. You can specify only one image ID. Custom images and public images are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-5s7qotzavwbrnzaqh4unm****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The ID of the Alibaba Cloud account from which you want to unshare the image. You can specify only one Alibaba Cloud account ID.
	//
	// example:
	//
	// 113355**
	RemoveAccounts *string `json:"RemoveAccounts,omitempty" xml:"RemoveAccounts,omitempty"`
}

func (s ModifyImageSharePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionRequest) SetAddAccounts(v string) *ModifyImageSharePermissionRequest {
	s.AddAccounts = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetImageId(v string) *ModifyImageSharePermissionRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageSharePermissionRequest) SetRemoveAccounts(v string) *ModifyImageSharePermissionRequest {
	s.RemoveAccounts = &v
	return s
}

type ModifyImageSharePermissionResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 701B3BB9-9190-544D-90D1-328B0527380C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImageSharePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionResponseBody) SetRequestId(v string) *ModifyImageSharePermissionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyImageSharePermissionResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyImageSharePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyImageSharePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageSharePermissionResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageSharePermissionResponse) SetHeaders(v map[string]*string) *ModifyImageSharePermissionResponse {
	s.Headers = v
	return s
}

func (s *ModifyImageSharePermissionResponse) SetStatusCode(v int32) *ModifyImageSharePermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyImageSharePermissionResponse) SetBody(v *ModifyImageSharePermissionResponseBody) *ModifyImageSharePermissionResponse {
	s.Body = v
	return s
}

type ModifyInstanceAttributeRequest struct {
	// The hostname of the Elastic Compute Service (ECS) instance. The value can be 2 to 64 characters in length. You can use periods (.) to separate the value into multiple segments. Each segment can contain letters, digits, hyphens (-), and periods. Consecutive periods or hyphens are not allowed. The name cannot start or end with a period (.) or a hyphen (-).
	//
	// example:
	//
	// testHostName
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the instance for which you want to modify attributes. You can specify only one ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-instanc****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The name of the instance.
	//
	// The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// i-instanceidname
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The password of the instance.
	//
	// example:
	//
	// yourPassword
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The user data of the instance. User data must be encoded in Base64.
	//
	// The size of your UserData cannot exceed 16 KB. We recommend that you do not pass in confidential information such as passwords and private keys in the plaintext format. If you must pass in confidential information, we recommend that you encrypt and Base64-encode the information before you pass it in. Then you can decode and decrypt the information in the same way within the instance.
	//
	// example:
	//
	// /9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAgGBgcGBQgHBwcJCQgK****
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ModifyInstanceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeRequest) SetHostName(v string) *ModifyInstanceAttributeRequest {
	s.HostName = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetInstanceId(v string) *ModifyInstanceAttributeRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetInstanceName(v string) *ModifyInstanceAttributeRequest {
	s.InstanceName = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetPassword(v string) *ModifyInstanceAttributeRequest {
	s.Password = &v
	return s
}

func (s *ModifyInstanceAttributeRequest) SetUserData(v string) *ModifyInstanceAttributeRequest {
	s.UserData = &v
	return s
}

type ModifyInstanceAttributeResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 200
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponseBody) SetCode(v int32) *ModifyInstanceAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyInstanceAttributeResponseBody) SetRequestId(v string) *ModifyInstanceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAttributeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAttributeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAttributeResponse) SetStatusCode(v int32) *ModifyInstanceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceAttributeResponse) SetBody(v *ModifyInstanceAttributeResponseBody) *ModifyInstanceAttributeResponse {
	s.Body = v
	return s
}

type ModifyInstanceAutoRenewAttributeRequest struct {
	// Specifies whether to enable the auto-renewal feature. Valid values: **True and False**. Default value: False.
	//
	// This parameter is required.
	//
	// example:
	//
	// false
	AutoRenew *string `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The auto-renewal period of the instance. Unit: months. Valid values: 1 to 9 and 12. This parameter is required if the AutoRenew parameter is set to true.
	//
	// example:
	//
	// 12
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// The IDs of the instances. Separate IDs with semicolons (;).
	//
	// This parameter is required.
	//
	// example:
	//
	// instance-test
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	OwnerId     *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// Specifies whether to renew the instance. The **RenewalStatus*	- parameter has a higher priority than the **AutoRenew*	- parameter. If you do not specify **RenewalStatus**, the **AutoRenew*	- parameter is used by default.
	//
	// 	- AutoRenewal: Auto-renewal is enabled for the instance.
	//
	// 	- Normal: Auto-renewal is disabled for the instance.
	//
	// 	- NotRenewal: The instance is not renewed.
	//
	// The system no longer sends an expiration notification but sends only a renewal notification three days before the instance expires. To renew the instance, you can change the value of this parameter from NotRenewal to Normal and then manually renew the instance, or change the value of this parameter from NotRenewal to AutoRenewal.
	//
	// example:
	//
	// Normal
	RenewalStatus *string `json:"RenewalStatus,omitempty" xml:"RenewalStatus,omitempty"`
}

func (s ModifyInstanceAutoRenewAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetAutoRenew(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetDuration(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.Duration = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetInstanceIds(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.InstanceIds = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetOwnerId(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.OwnerId = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeRequest) SetRenewalStatus(v string) *ModifyInstanceAutoRenewAttributeRequest {
	s.RenewalStatus = &v
	return s
}

type ModifyInstanceAutoRenewAttributeResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4DD66F05-3116-4BAA-B588-52EB2E7F431D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceAutoRenewAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeResponseBody) SetCode(v int32) *ModifyInstanceAutoRenewAttributeResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeResponseBody) SetRequestId(v string) *ModifyInstanceAutoRenewAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceAutoRenewAttributeResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceAutoRenewAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceAutoRenewAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceAutoRenewAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceAutoRenewAttributeResponse) SetHeaders(v map[string]*string) *ModifyInstanceAutoRenewAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeResponse) SetStatusCode(v int32) *ModifyInstanceAutoRenewAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceAutoRenewAttributeResponse) SetBody(v *ModifyInstanceAutoRenewAttributeResponseBody) *ModifyInstanceAutoRenewAttributeResponse {
	s.Body = v
	return s
}

type ModifyInstanceBootConfigurationRequest struct {
	// example:
	//
	// legacy
	BootSet *string `json:"BootSet,omitempty" xml:"BootSet,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// pxe
	BootType *string `json:"BootType,omitempty" xml:"BootType,omitempty"`
	// example:
	//
	// on
	DiskSet *string `json:"DiskSet,omitempty" xml:"DiskSet,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// i-instance****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ModifyInstanceBootConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceBootConfigurationRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceBootConfigurationRequest) SetBootSet(v string) *ModifyInstanceBootConfigurationRequest {
	s.BootSet = &v
	return s
}

func (s *ModifyInstanceBootConfigurationRequest) SetBootType(v string) *ModifyInstanceBootConfigurationRequest {
	s.BootType = &v
	return s
}

func (s *ModifyInstanceBootConfigurationRequest) SetDiskSet(v string) *ModifyInstanceBootConfigurationRequest {
	s.DiskSet = &v
	return s
}

func (s *ModifyInstanceBootConfigurationRequest) SetInstanceId(v string) *ModifyInstanceBootConfigurationRequest {
	s.InstanceId = &v
	return s
}

type ModifyInstanceBootConfigurationResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// 6666C5A5-75ED-422E-A022-7121FA18C968
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceBootConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceBootConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceBootConfigurationResponseBody) SetRequestId(v string) *ModifyInstanceBootConfigurationResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceBootConfigurationResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceBootConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceBootConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceBootConfigurationResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceBootConfigurationResponse) SetHeaders(v map[string]*string) *ModifyInstanceBootConfigurationResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceBootConfigurationResponse) SetStatusCode(v int32) *ModifyInstanceBootConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceBootConfigurationResponse) SetBody(v *ModifyInstanceBootConfigurationResponseBody) *ModifyInstanceBootConfigurationResponse {
	s.Body = v
	return s
}

type ModifyInstanceChargeTypeRequest struct {
	// Specifies whether to enable auto-payment when you change the billing method from pay-as-you-go to subscription. Valid values:
	//
	// true: enables auto-payment. Make sure that your account has sufficient balance.
	//
	// false (default): does not enable auto-payment. The order is generated but not paid.
	//
	// example:
	//
	// false
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// Specifies whether to enable auto-renewal when you change the billing method from pay-as-you-go to subscription. Valid values:
	//
	// true: enables auto-renewal for the instance.
	//
	// false
	//
	// example:
	//
	// false
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// Specifies whether to change the billing method of all data disks that are created with the instance to subscription when you change the billing method of the instance from pay-as-you-go to subscription. Valid values:
	//
	// true
	//
	// false (default)
	//
	// example:
	//
	// true
	IncludeDataDisks *bool `json:"IncludeDataDisks,omitempty" xml:"IncludeDataDisks,omitempty"`
	// The new billing method. Valid values:
	//
	// PrePaid
	//
	// PostPaid (default)
	//
	// This parameter is required.
	//
	// example:
	//
	// PostPaid
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// The IDs of the instances.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The subscription duration. This parameter is required if you set the InstanceChargeType parameter to PrePaid. Valid values:
	//
	// If the PeriodUnit parameter is set to Day, Period can only be set to 3.
	//
	// If PeriodUnit is Month, Period can be set to 1 to 9 or 12.
	//
	// example:
	//
	// 1
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription duration. This parameter is required if you set the InstanceChargeType parameter to PrePaid. Valid values:
	//
	// Month
	//
	// Day
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
}

func (s ModifyInstanceChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeRequest) SetAutoPay(v bool) *ModifyInstanceChargeTypeRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetAutoRenew(v bool) *ModifyInstanceChargeTypeRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetIncludeDataDisks(v bool) *ModifyInstanceChargeTypeRequest {
	s.IncludeDataDisks = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetInstanceChargeType(v string) *ModifyInstanceChargeTypeRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetInstanceIds(v []*string) *ModifyInstanceChargeTypeRequest {
	s.InstanceIds = v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetPeriod(v string) *ModifyInstanceChargeTypeRequest {
	s.Period = &v
	return s
}

func (s *ModifyInstanceChargeTypeRequest) SetPeriodUnit(v string) *ModifyInstanceChargeTypeRequest {
	s.PeriodUnit = &v
	return s
}

type ModifyInstanceChargeTypeShrinkRequest struct {
	// Specifies whether to enable auto-payment when you change the billing method from pay-as-you-go to subscription. Valid values:
	//
	// true: enables auto-payment. Make sure that your account has sufficient balance.
	//
	// false (default): does not enable auto-payment. The order is generated but not paid.
	//
	// example:
	//
	// false
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// Specifies whether to enable auto-renewal when you change the billing method from pay-as-you-go to subscription. Valid values:
	//
	// true: enables auto-renewal for the instance.
	//
	// false
	//
	// example:
	//
	// false
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// Specifies whether to change the billing method of all data disks that are created with the instance to subscription when you change the billing method of the instance from pay-as-you-go to subscription. Valid values:
	//
	// true
	//
	// false (default)
	//
	// example:
	//
	// true
	IncludeDataDisks *bool `json:"IncludeDataDisks,omitempty" xml:"IncludeDataDisks,omitempty"`
	// The new billing method. Valid values:
	//
	// PrePaid
	//
	// PostPaid (default)
	//
	// This parameter is required.
	//
	// example:
	//
	// PostPaid
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// The IDs of the instances.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The subscription duration. This parameter is required if you set the InstanceChargeType parameter to PrePaid. Valid values:
	//
	// If the PeriodUnit parameter is set to Day, Period can only be set to 3.
	//
	// If PeriodUnit is Month, Period can be set to 1 to 9 or 12.
	//
	// example:
	//
	// 1
	Period *string `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription duration. This parameter is required if you set the InstanceChargeType parameter to PrePaid. Valid values:
	//
	// Month
	//
	// Day
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
}

func (s ModifyInstanceChargeTypeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeShrinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeShrinkRequest) SetAutoPay(v bool) *ModifyInstanceChargeTypeShrinkRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyInstanceChargeTypeShrinkRequest) SetAutoRenew(v bool) *ModifyInstanceChargeTypeShrinkRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyInstanceChargeTypeShrinkRequest) SetIncludeDataDisks(v bool) *ModifyInstanceChargeTypeShrinkRequest {
	s.IncludeDataDisks = &v
	return s
}

func (s *ModifyInstanceChargeTypeShrinkRequest) SetInstanceChargeType(v string) *ModifyInstanceChargeTypeShrinkRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ModifyInstanceChargeTypeShrinkRequest) SetInstanceIdsShrink(v string) *ModifyInstanceChargeTypeShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *ModifyInstanceChargeTypeShrinkRequest) SetPeriod(v string) *ModifyInstanceChargeTypeShrinkRequest {
	s.Period = &v
	return s
}

func (s *ModifyInstanceChargeTypeShrinkRequest) SetPeriodUnit(v string) *ModifyInstanceChargeTypeShrinkRequest {
	s.PeriodUnit = &v
	return s
}

type ModifyInstanceChargeTypeResponseBody struct {
	// The IDs of the instances.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The ID of the order.
	//
	// example:
	//
	// 21522202681****
	OrderId *int64 `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// E2CE5821-7A18-5F7B-A18A-1C751B933D2A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyInstanceChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponseBody) SetInstanceIds(v []*string) *ModifyInstanceChargeTypeResponseBody {
	s.InstanceIds = v
	return s
}

func (s *ModifyInstanceChargeTypeResponseBody) SetOrderId(v int64) *ModifyInstanceChargeTypeResponseBody {
	s.OrderId = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponseBody) SetRequestId(v string) *ModifyInstanceChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyInstanceChargeTypeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyInstanceChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyInstanceChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyInstanceChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyInstanceChargeTypeResponse) SetHeaders(v map[string]*string) *ModifyInstanceChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyInstanceChargeTypeResponse) SetStatusCode(v int32) *ModifyInstanceChargeTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyInstanceChargeTypeResponse) SetBody(v *ModifyInstanceChargeTypeResponseBody) *ModifyInstanceChargeTypeResponse {
	s.Body = v
	return s
}

type ModifyLoadBalancerAttributeRequest struct {
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5q73cv04zeyh43lh74lp4gtm8
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The name of the ELB instance. The name must be **2*	- to **128*	- characters in length.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	LoadBalancerName *string `json:"LoadBalancerName,omitempty" xml:"LoadBalancerName,omitempty"`
}

func (s ModifyLoadBalancerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoadBalancerAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyLoadBalancerAttributeRequest) SetLoadBalancerId(v string) *ModifyLoadBalancerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *ModifyLoadBalancerAttributeRequest) SetLoadBalancerName(v string) *ModifyLoadBalancerAttributeRequest {
	s.LoadBalancerName = &v
	return s
}

type ModifyLoadBalancerAttributeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyLoadBalancerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoadBalancerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyLoadBalancerAttributeResponseBody) SetRequestId(v string) *ModifyLoadBalancerAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyLoadBalancerAttributeResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyLoadBalancerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyLoadBalancerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyLoadBalancerAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyLoadBalancerAttributeResponse) SetHeaders(v map[string]*string) *ModifyLoadBalancerAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyLoadBalancerAttributeResponse) SetStatusCode(v int32) *ModifyLoadBalancerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyLoadBalancerAttributeResponse) SetBody(v *ModifyLoadBalancerAttributeResponseBody) *ModifyLoadBalancerAttributeResponse {
	s.Body = v
	return s
}

type ModifyNetworkAttributeRequest struct {
	// The description of the network.
	//
	// The description must be 2 to 256 characters in length. It must start with a letter but cannot start with http:// or https://.
	//
	// example:
	//
	// this is my first network
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the network.
	//
	// This parameter is required.
	//
	// example:
	//
	// n-****
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// The name of the network. The name must meet the following requirements:
	//
	// 	- The name must be 2 to 128 characters in length
	//
	// 	- It must start with a letter but cannot start with http:// or https://.
	//
	// 	- The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// abc
	NetworkName *string `json:"NetworkName,omitempty" xml:"NetworkName,omitempty"`
}

func (s ModifyNetworkAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyNetworkAttributeRequest) SetDescription(v string) *ModifyNetworkAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyNetworkAttributeRequest) SetNetworkId(v string) *ModifyNetworkAttributeRequest {
	s.NetworkId = &v
	return s
}

func (s *ModifyNetworkAttributeRequest) SetNetworkName(v string) *ModifyNetworkAttributeRequest {
	s.NetworkName = &v
	return s
}

type ModifyNetworkAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyNetworkAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyNetworkAttributeResponseBody) SetRequestId(v string) *ModifyNetworkAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyNetworkAttributeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyNetworkAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyNetworkAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyNetworkAttributeResponse) SetHeaders(v map[string]*string) *ModifyNetworkAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyNetworkAttributeResponse) SetStatusCode(v int32) *ModifyNetworkAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyNetworkAttributeResponse) SetBody(v *ModifyNetworkAttributeResponseBody) *ModifyNetworkAttributeResponse {
	s.Body = v
	return s
}

type ModifyNetworkInterfaceAttributeRequest struct {
	// The description. The description must be 1 to 256 characters in length and cannot start with http:// or https://.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the ENI.
	//
	// This parameter is required.
	//
	// example:
	//
	// eni-5f6533jbifugr5fo***
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The name of the ENI. The name must be 1 to 128 characters in length, The name cannot start with http:// or https://.
	//
	// example:
	//
	// test-01
	NetworkInterfaceName *string `json:"NetworkInterfaceName,omitempty" xml:"NetworkInterfaceName,omitempty"`
}

func (s ModifyNetworkInterfaceAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkInterfaceAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetDescription(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetNetworkInterfaceId(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeRequest) SetNetworkInterfaceName(v string) *ModifyNetworkInterfaceAttributeRequest {
	s.NetworkInterfaceName = &v
	return s
}

type ModifyNetworkInterfaceAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyNetworkInterfaceAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkInterfaceAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyNetworkInterfaceAttributeResponseBody) SetRequestId(v string) *ModifyNetworkInterfaceAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyNetworkInterfaceAttributeResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyNetworkInterfaceAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyNetworkInterfaceAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkInterfaceAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyNetworkInterfaceAttributeResponse) SetHeaders(v map[string]*string) *ModifyNetworkInterfaceAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyNetworkInterfaceAttributeResponse) SetStatusCode(v int32) *ModifyNetworkInterfaceAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyNetworkInterfaceAttributeResponse) SetBody(v *ModifyNetworkInterfaceAttributeResponseBody) *ModifyNetworkInterfaceAttributeResponse {
	s.Body = v
	return s
}

type ModifyPrepayInstanceSpecRequest struct {
	// The ID of the instance that you want to upgrade or downgrade.
	//
	// example:
	//
	// i-bp67acfmxazb4p****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The updated configuration.
	//
	// example:
	//
	// ens.sn1.tiny
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s ModifyPrepayInstanceSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecRequest) SetInstanceId(v string) *ModifyPrepayInstanceSpecRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyPrepayInstanceSpecRequest) SetInstanceType(v string) *ModifyPrepayInstanceSpecRequest {
	s.InstanceType = &v
	return s
}

type ModifyPrepayInstanceSpecResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// FD94C8E8-128E-525C-A0C3-60E063B70330
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyPrepayInstanceSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecResponseBody) SetRequestId(v string) *ModifyPrepayInstanceSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyPrepayInstanceSpecResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyPrepayInstanceSpecResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyPrepayInstanceSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPrepayInstanceSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyPrepayInstanceSpecResponse) SetHeaders(v map[string]*string) *ModifyPrepayInstanceSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyPrepayInstanceSpecResponse) SetStatusCode(v int32) *ModifyPrepayInstanceSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPrepayInstanceSpecResponse) SetBody(v *ModifyPrepayInstanceSpecResponseBody) *ModifyPrepayInstanceSpecResponse {
	s.Body = v
	return s
}

type ModifySecurityGroupAttributeRequest struct {
	// The description of the security group.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp67acfmxazb4p****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The name of the security group. The name of a bucket must meet the following requirements:
	//
	// 	- The name must be 2 to 128 characters in length.
	//
	// 	- The name must start with a letter but cannot start with http:// or https://.
	//
	// 	- The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// example
	SecurityGroupName *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
}

func (s ModifySecurityGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeRequest) SetDescription(v string) *ModifySecurityGroupAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetSecurityGroupId(v string) *ModifySecurityGroupAttributeRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifySecurityGroupAttributeRequest) SetSecurityGroupName(v string) *ModifySecurityGroupAttributeRequest {
	s.SecurityGroupName = &v
	return s
}

type ModifySecurityGroupAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySecurityGroupAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeResponseBody) SetRequestId(v string) *ModifySecurityGroupAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifySecurityGroupAttributeResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySecurityGroupAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySecurityGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySecurityGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifySecurityGroupAttributeResponse) SetHeaders(v map[string]*string) *ModifySecurityGroupAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifySecurityGroupAttributeResponse) SetStatusCode(v int32) *ModifySecurityGroupAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySecurityGroupAttributeResponse) SetBody(v *ModifySecurityGroupAttributeResponseBody) *ModifySecurityGroupAttributeResponse {
	s.Body = v
	return s
}

type ModifySnapshotAttributeRequest struct {
	// The description of the snapshot. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the snapshot.
	//
	// This parameter is required.
	//
	// example:
	//
	// sp-bp199lyny9bb47pa****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The name of the snapshot. The name must be 2 to 128 characters in length. It must start with a letter but cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// The name cannot start with **auto*	- because snapshots whose names start with auto are recognized as automatic snapshots.
	//
	// example:
	//
	// testSnapshotName
	SnapshotName *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
}

func (s ModifySnapshotAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySnapshotAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifySnapshotAttributeRequest) SetDescription(v string) *ModifySnapshotAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetSnapshotId(v string) *ModifySnapshotAttributeRequest {
	s.SnapshotId = &v
	return s
}

func (s *ModifySnapshotAttributeRequest) SetSnapshotName(v string) *ModifySnapshotAttributeRequest {
	s.SnapshotName = &v
	return s
}

type ModifySnapshotAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySnapshotAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySnapshotAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySnapshotAttributeResponseBody) SetRequestId(v string) *ModifySnapshotAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifySnapshotAttributeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySnapshotAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySnapshotAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySnapshotAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifySnapshotAttributeResponse) SetHeaders(v map[string]*string) *ModifySnapshotAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifySnapshotAttributeResponse) SetStatusCode(v int32) *ModifySnapshotAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySnapshotAttributeResponse) SetBody(v *ModifySnapshotAttributeResponseBody) *ModifySnapshotAttributeResponse {
	s.Body = v
	return s
}

type ModifySnatEntryRequest struct {
	EipAffinity *bool `json:"EipAffinity,omitempty" xml:"EipAffinity,omitempty"`
	// example:
	//
	// true
	IspAffinity *bool `json:"IspAffinity,omitempty" xml:"IspAffinity,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// snat-5tfjp36fsrb36zs36faj0****
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	// example:
	//
	// test0
	SnatEntryName *string `json:"SnatEntryName,omitempty" xml:"SnatEntryName,omitempty"`
	SnatIp        *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
}

func (s ModifySnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifySnatEntryRequest) GoString() string {
	return s.String()
}

func (s *ModifySnatEntryRequest) SetEipAffinity(v bool) *ModifySnatEntryRequest {
	s.EipAffinity = &v
	return s
}

func (s *ModifySnatEntryRequest) SetIspAffinity(v bool) *ModifySnatEntryRequest {
	s.IspAffinity = &v
	return s
}

func (s *ModifySnatEntryRequest) SetSnatEntryId(v string) *ModifySnatEntryRequest {
	s.SnatEntryId = &v
	return s
}

func (s *ModifySnatEntryRequest) SetSnatEntryName(v string) *ModifySnatEntryRequest {
	s.SnatEntryName = &v
	return s
}

func (s *ModifySnatEntryRequest) SetSnatIp(v string) *ModifySnatEntryRequest {
	s.SnatIp = &v
	return s
}

type ModifySnatEntryResponseBody struct {
	// example:
	//
	// 125B04C7-3D0D-4245-AF96-14E3758E3F06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifySnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifySnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifySnatEntryResponseBody) SetRequestId(v string) *ModifySnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type ModifySnatEntryResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifySnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifySnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifySnatEntryResponse) GoString() string {
	return s.String()
}

func (s *ModifySnatEntryResponse) SetHeaders(v map[string]*string) *ModifySnatEntryResponse {
	s.Headers = v
	return s
}

func (s *ModifySnatEntryResponse) SetStatusCode(v int32) *ModifySnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifySnatEntryResponse) SetBody(v *ModifySnatEntryResponseBody) *ModifySnatEntryResponse {
	s.Body = v
	return s
}

type ModifyVSwitchAttributeRequest struct {
	// The description of the vSwitch.
	//
	// 	- The description must be 2 to 256 characters in length.
	//
	// 	- The description cannot start with http:// or https://.
	//
	// example:
	//
	// this is my first network
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the vSwitch.
	//
	// This parameter is required.
	//
	// example:
	//
	// n-****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// The name of the vSwitch.
	//
	// 	- The name must be 2 to 128 characters in length.
	//
	// 	- The name must start with a letter and cannot start with http:// or https://.
	//
	// example:
	//
	// Test-switch
	VSwitchName *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s ModifyVSwitchAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeRequest) SetDescription(v string) *ModifyVSwitchAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetVSwitchId(v string) *ModifyVSwitchAttributeRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyVSwitchAttributeRequest) SetVSwitchName(v string) *ModifyVSwitchAttributeRequest {
	s.VSwitchName = &v
	return s
}

type ModifyVSwitchAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyVSwitchAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeResponseBody) SetRequestId(v string) *ModifyVSwitchAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyVSwitchAttributeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyVSwitchAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyVSwitchAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyVSwitchAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyVSwitchAttributeResponse) SetHeaders(v map[string]*string) *ModifyVSwitchAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyVSwitchAttributeResponse) SetStatusCode(v int32) *ModifyVSwitchAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyVSwitchAttributeResponse) SetBody(v *ModifyVSwitchAttributeResponseBody) *ModifyVSwitchAttributeResponse {
	s.Body = v
	return s
}

type MountInstanceSDGRequest struct {
	// The IDs of the instances.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s MountInstanceSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s MountInstanceSDGRequest) GoString() string {
	return s.String()
}

func (s *MountInstanceSDGRequest) SetInstanceIds(v []*string) *MountInstanceSDGRequest {
	s.InstanceIds = v
	return s
}

func (s *MountInstanceSDGRequest) SetSDGId(v string) *MountInstanceSDGRequest {
	s.SDGId = &v
	return s
}

type MountInstanceSDGShrinkRequest struct {
	// The IDs of the instances.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s MountInstanceSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s MountInstanceSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *MountInstanceSDGShrinkRequest) SetInstanceIdsShrink(v string) *MountInstanceSDGShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *MountInstanceSDGShrinkRequest) SetSDGId(v string) *MountInstanceSDGShrinkRequest {
	s.SDGId = &v
	return s
}

type MountInstanceSDGResponseBody struct {
	// The returned data object.
	Data *MountInstanceSDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// F3B261DD-3858-4D3C-877D-303ADF374600
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MountInstanceSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MountInstanceSDGResponseBody) GoString() string {
	return s.String()
}

func (s *MountInstanceSDGResponseBody) SetData(v *MountInstanceSDGResponseBodyData) *MountInstanceSDGResponseBody {
	s.Data = v
	return s
}

func (s *MountInstanceSDGResponseBody) SetRequestId(v string) *MountInstanceSDGResponseBody {
	s.RequestId = &v
	return s
}

type MountInstanceSDGResponseBodyData struct {
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The execution result of the synchronization request.
	Result *MountInstanceSDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- **true**: All tasks are successful.
	//
	// 	- **false**: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s MountInstanceSDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s MountInstanceSDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *MountInstanceSDGResponseBodyData) SetMessage(v string) *MountInstanceSDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *MountInstanceSDGResponseBodyData) SetResult(v *MountInstanceSDGResponseBodyDataResult) *MountInstanceSDGResponseBodyData {
	s.Result = v
	return s
}

func (s *MountInstanceSDGResponseBodyData) SetSuccess(v bool) *MountInstanceSDGResponseBodyData {
	s.Success = &v
	return s
}

type MountInstanceSDGResponseBodyDataResult struct {
	// The number of failed tasks.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details about failed tasks.
	FailedItems []*MountInstanceSDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful tasks.
	//
	// example:
	//
	// 1
	SuccessCount *int64 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s MountInstanceSDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s MountInstanceSDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *MountInstanceSDGResponseBodyDataResult) SetFailedCount(v int64) *MountInstanceSDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *MountInstanceSDGResponseBodyDataResult) SetFailedItems(v []*MountInstanceSDGResponseBodyDataResultFailedItems) *MountInstanceSDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *MountInstanceSDGResponseBodyDataResult) SetSuccessCount(v int64) *MountInstanceSDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type MountInstanceSDGResponseBodyDataResultFailedItems struct {
	// The error message.
	//
	// example:
	//
	// sdg not found
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// aic-xxxxx-0
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s MountInstanceSDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s MountInstanceSDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *MountInstanceSDGResponseBodyDataResultFailedItems) SetErrMessage(v string) *MountInstanceSDGResponseBodyDataResultFailedItems {
	s.ErrMessage = &v
	return s
}

func (s *MountInstanceSDGResponseBodyDataResultFailedItems) SetInstanceId(v string) *MountInstanceSDGResponseBodyDataResultFailedItems {
	s.InstanceId = &v
	return s
}

type MountInstanceSDGResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MountInstanceSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MountInstanceSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s MountInstanceSDGResponse) GoString() string {
	return s.String()
}

func (s *MountInstanceSDGResponse) SetHeaders(v map[string]*string) *MountInstanceSDGResponse {
	s.Headers = v
	return s
}

func (s *MountInstanceSDGResponse) SetStatusCode(v int32) *MountInstanceSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *MountInstanceSDGResponse) SetBody(v *MountInstanceSDGResponseBody) *MountInstanceSDGResponse {
	s.Body = v
	return s
}

type PreloadRegionSDGRequest struct {
	// The IDs of the destination nodes.
	//
	// This parameter is required.
	DestinationRegionIds []*string `json:"DestinationRegionIds,omitempty" xml:"DestinationRegionIds,omitempty" type:"Repeated"`
	// The namespaces.
	Namespaces []*string `json:"Namespaces,omitempty" xml:"Namespaces,omitempty" type:"Repeated"`
	// The number of redundant replicas to support rapid deployment.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	RedundantNum *int32 `json:"RedundantNum,omitempty" xml:"RedundantNum,omitempty"`
	// The ID of the SDG for which data is preloaded.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s PreloadRegionSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s PreloadRegionSDGRequest) GoString() string {
	return s.String()
}

func (s *PreloadRegionSDGRequest) SetDestinationRegionIds(v []*string) *PreloadRegionSDGRequest {
	s.DestinationRegionIds = v
	return s
}

func (s *PreloadRegionSDGRequest) SetNamespaces(v []*string) *PreloadRegionSDGRequest {
	s.Namespaces = v
	return s
}

func (s *PreloadRegionSDGRequest) SetRedundantNum(v int32) *PreloadRegionSDGRequest {
	s.RedundantNum = &v
	return s
}

func (s *PreloadRegionSDGRequest) SetSDGId(v string) *PreloadRegionSDGRequest {
	s.SDGId = &v
	return s
}

type PreloadRegionSDGShrinkRequest struct {
	// The IDs of the destination nodes.
	//
	// This parameter is required.
	DestinationRegionIdsShrink *string `json:"DestinationRegionIds,omitempty" xml:"DestinationRegionIds,omitempty"`
	// The namespaces.
	NamespacesShrink *string `json:"Namespaces,omitempty" xml:"Namespaces,omitempty"`
	// The number of redundant replicas to support rapid deployment.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	RedundantNum *int32 `json:"RedundantNum,omitempty" xml:"RedundantNum,omitempty"`
	// The ID of the SDG for which data is preloaded.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s PreloadRegionSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s PreloadRegionSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *PreloadRegionSDGShrinkRequest) SetDestinationRegionIdsShrink(v string) *PreloadRegionSDGShrinkRequest {
	s.DestinationRegionIdsShrink = &v
	return s
}

func (s *PreloadRegionSDGShrinkRequest) SetNamespacesShrink(v string) *PreloadRegionSDGShrinkRequest {
	s.NamespacesShrink = &v
	return s
}

func (s *PreloadRegionSDGShrinkRequest) SetRedundantNum(v int32) *PreloadRegionSDGShrinkRequest {
	s.RedundantNum = &v
	return s
}

func (s *PreloadRegionSDGShrinkRequest) SetSDGId(v string) *PreloadRegionSDGShrinkRequest {
	s.SDGId = &v
	return s
}

type PreloadRegionSDGResponseBody struct {
	// The returned data object.
	Data *PreloadRegionSDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PreloadRegionSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PreloadRegionSDGResponseBody) GoString() string {
	return s.String()
}

func (s *PreloadRegionSDGResponseBody) SetData(v *PreloadRegionSDGResponseBodyData) *PreloadRegionSDGResponseBody {
	s.Data = v
	return s
}

func (s *PreloadRegionSDGResponseBody) SetRequestId(v string) *PreloadRegionSDGResponseBody {
	s.RequestId = &v
	return s
}

type PreloadRegionSDGResponseBodyData struct {
	// The message returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The execution result of the synchronization request.
	Result *PreloadRegionSDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- true: All tasks are successful.
	//
	// 	- false: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s PreloadRegionSDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s PreloadRegionSDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *PreloadRegionSDGResponseBodyData) SetMessage(v string) *PreloadRegionSDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *PreloadRegionSDGResponseBodyData) SetResult(v *PreloadRegionSDGResponseBodyDataResult) *PreloadRegionSDGResponseBodyData {
	s.Result = v
	return s
}

func (s *PreloadRegionSDGResponseBodyData) SetSuccess(v bool) *PreloadRegionSDGResponseBodyData {
	s.Success = &v
	return s
}

type PreloadRegionSDGResponseBodyDataResult struct {
	// The number of failed tasks.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details about failed tasks.
	FailedItems []*PreloadRegionSDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful tasks.
	//
	// example:
	//
	// 1
	SuccessCount *int64 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s PreloadRegionSDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s PreloadRegionSDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *PreloadRegionSDGResponseBodyDataResult) SetFailedCount(v int64) *PreloadRegionSDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *PreloadRegionSDGResponseBodyDataResult) SetFailedItems(v []*PreloadRegionSDGResponseBodyDataResultFailedItems) *PreloadRegionSDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *PreloadRegionSDGResponseBodyDataResult) SetSuccessCount(v int64) *PreloadRegionSDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type PreloadRegionSDGResponseBodyDataResultFailedItems struct {
	// The ID of the destination node.
	//
	// example:
	//
	// cn-hangzhou-xxx
	DestinationRegionId *string `json:"DestinationRegionId,omitempty" xml:"DestinationRegionId,omitempty"`
	// The error message that is returned.
	//
	// example:
	//
	// region not found
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s PreloadRegionSDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s PreloadRegionSDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *PreloadRegionSDGResponseBodyDataResultFailedItems) SetDestinationRegionId(v string) *PreloadRegionSDGResponseBodyDataResultFailedItems {
	s.DestinationRegionId = &v
	return s
}

func (s *PreloadRegionSDGResponseBodyDataResultFailedItems) SetErrorMessage(v string) *PreloadRegionSDGResponseBodyDataResultFailedItems {
	s.ErrorMessage = &v
	return s
}

type PreloadRegionSDGResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PreloadRegionSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PreloadRegionSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s PreloadRegionSDGResponse) GoString() string {
	return s.String()
}

func (s *PreloadRegionSDGResponse) SetHeaders(v map[string]*string) *PreloadRegionSDGResponse {
	s.Headers = v
	return s
}

func (s *PreloadRegionSDGResponse) SetStatusCode(v int32) *PreloadRegionSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *PreloadRegionSDGResponse) SetBody(v *PreloadRegionSDGResponseBody) *PreloadRegionSDGResponse {
	s.Body = v
	return s
}

type PrepareUploadRequest struct {
	// The name of the bucket.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The specified IP address. This parameter is applicable to scenarios where the user IP address is inconsistent with the operation calling IP address, such as the scenario where the server obtains authorization and sends the authorization to the client.
	//
	// example:
	//
	// 180.166.XX.XXX
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
}

func (s PrepareUploadRequest) String() string {
	return tea.Prettify(s)
}

func (s PrepareUploadRequest) GoString() string {
	return s.String()
}

func (s *PrepareUploadRequest) SetBucketName(v string) *PrepareUploadRequest {
	s.BucketName = &v
	return s
}

func (s *PrepareUploadRequest) SetClientIp(v string) *PrepareUploadRequest {
	s.ClientIp = &v
	return s
}

type PrepareUploadResponseBody struct {
	// The name of the bucket. This parameter is available only when the OSS SDK is used.
	//
	// example:
	//
	// test-xxxxxx
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The endpoint. This parameter is available only when the OSS SDK is used.
	//
	// example:
	//
	// eos.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 6666C5A5-75ED-422E-A022-7121FA18C968
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PrepareUploadResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PrepareUploadResponseBody) GoString() string {
	return s.String()
}

func (s *PrepareUploadResponseBody) SetBucketName(v string) *PrepareUploadResponseBody {
	s.BucketName = &v
	return s
}

func (s *PrepareUploadResponseBody) SetEndpoint(v string) *PrepareUploadResponseBody {
	s.Endpoint = &v
	return s
}

func (s *PrepareUploadResponseBody) SetRequestId(v string) *PrepareUploadResponseBody {
	s.RequestId = &v
	return s
}

type PrepareUploadResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PrepareUploadResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PrepareUploadResponse) String() string {
	return tea.Prettify(s)
}

func (s PrepareUploadResponse) GoString() string {
	return s.String()
}

func (s *PrepareUploadResponse) SetHeaders(v map[string]*string) *PrepareUploadResponse {
	s.Headers = v
	return s
}

func (s *PrepareUploadResponse) SetStatusCode(v int32) *PrepareUploadResponse {
	s.StatusCode = &v
	return s
}

func (s *PrepareUploadResponse) SetBody(v *PrepareUploadResponseBody) *PrepareUploadResponse {
	s.Body = v
	return s
}

type PushApplicationDataRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// e76f8985-7965-41fc-925b-9648bb6bf650
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The data files that you want to push. The value must be a JSON string.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{\\"name\\":\\"app01\\",       \\"version\\":\\"1.0\\",       \\"size\\":100,\\"archiveType\\":\\"tar.gz\\",       \\"md5\\":\\"\\",       \\"url\\":\\"http://xxxx\\",\\"timeout\\": 1000   },    {       \\"name\\":\\"app02\\",       \\"version\\":\\"1.1\\",       \\"size\\":10,\\"archiveType\\":\\"zip\\",       \\"md5\\":\\"xxxx\\",       \\"url\\":\\"http://xxxxxx\\",\\"timeout\\": 1000   }]
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The push policy in the canary release environment. The value must be a JSON string. You can specify multiple push policies. By default, all data files are pushed.
	//
	// example:
	//
	// {\\"name\\": \\"ScheduleToRegionId\\",  \\"parameters\\":{      \\"operator\\": \\"In\\",       \\"values\\": [\\"cn-chegndu-telecom-4\\", \\"cn-shanghai-cmcc-4\\"]  }}
	PushStrategy *string `json:"PushStrategy,omitempty" xml:"PushStrategy,omitempty"`
	// This parameter does not take effect.
	//
	// example:
	//
	// 1800
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s PushApplicationDataRequest) String() string {
	return tea.Prettify(s)
}

func (s PushApplicationDataRequest) GoString() string {
	return s.String()
}

func (s *PushApplicationDataRequest) SetAppId(v string) *PushApplicationDataRequest {
	s.AppId = &v
	return s
}

func (s *PushApplicationDataRequest) SetData(v string) *PushApplicationDataRequest {
	s.Data = &v
	return s
}

func (s *PushApplicationDataRequest) SetPushStrategy(v string) *PushApplicationDataRequest {
	s.PushStrategy = &v
	return s
}

func (s *PushApplicationDataRequest) SetTimeout(v int32) *PushApplicationDataRequest {
	s.Timeout = &v
	return s
}

type PushApplicationDataResponseBody struct {
	// The push results of data files.
	PushResults *PushApplicationDataResponseBodyPushResults `json:"PushResults,omitempty" xml:"PushResults,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PushApplicationDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PushApplicationDataResponseBody) GoString() string {
	return s.String()
}

func (s *PushApplicationDataResponseBody) SetPushResults(v *PushApplicationDataResponseBodyPushResults) *PushApplicationDataResponseBody {
	s.PushResults = v
	return s
}

func (s *PushApplicationDataResponseBody) SetRequestId(v string) *PushApplicationDataResponseBody {
	s.RequestId = &v
	return s
}

type PushApplicationDataResponseBodyPushResults struct {
	PushResult []*PushApplicationDataResponseBodyPushResultsPushResult `json:"PushResult,omitempty" xml:"PushResult,omitempty" type:"Repeated"`
}

func (s PushApplicationDataResponseBodyPushResults) String() string {
	return tea.Prettify(s)
}

func (s PushApplicationDataResponseBodyPushResults) GoString() string {
	return s.String()
}

func (s *PushApplicationDataResponseBodyPushResults) SetPushResult(v []*PushApplicationDataResponseBodyPushResultsPushResult) *PushApplicationDataResponseBodyPushResults {
	s.PushResult = v
	return s
}

type PushApplicationDataResponseBodyPushResultsPushResult struct {
	// The name of the data file.
	//
	// example:
	//
	// gcs-pre-websocket-eip-telecom
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The push result. The value is of the enumeration type. Valid values:
	//
	// 	- 0: The push operation is successful.
	//
	// 	- 100: The push operation has been performed and the file is pushed.
	//
	// 	- 200: The push operation has been performed and the file is being pushed to specific file servers.
	//
	// 	- 300: The push operation failed. You must trigger the push operation again. The ResultDescrip parameter indicates the error description.
	//
	// example:
	//
	// 100
	ResultCode *int32 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	// The description of the push status.
	//
	// example:
	//
	// success
	ResultDescrip *string `json:"ResultDescrip,omitempty" xml:"ResultDescrip,omitempty"`
	// The version number of the data file.
	//
	// example:
	//
	// standard
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s PushApplicationDataResponseBodyPushResultsPushResult) String() string {
	return tea.Prettify(s)
}

func (s PushApplicationDataResponseBodyPushResultsPushResult) GoString() string {
	return s.String()
}

func (s *PushApplicationDataResponseBodyPushResultsPushResult) SetName(v string) *PushApplicationDataResponseBodyPushResultsPushResult {
	s.Name = &v
	return s
}

func (s *PushApplicationDataResponseBodyPushResultsPushResult) SetResultCode(v int32) *PushApplicationDataResponseBodyPushResultsPushResult {
	s.ResultCode = &v
	return s
}

func (s *PushApplicationDataResponseBodyPushResultsPushResult) SetResultDescrip(v string) *PushApplicationDataResponseBodyPushResultsPushResult {
	s.ResultDescrip = &v
	return s
}

func (s *PushApplicationDataResponseBodyPushResultsPushResult) SetVersion(v string) *PushApplicationDataResponseBodyPushResultsPushResult {
	s.Version = &v
	return s
}

type PushApplicationDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PushApplicationDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PushApplicationDataResponse) String() string {
	return tea.Prettify(s)
}

func (s PushApplicationDataResponse) GoString() string {
	return s.String()
}

func (s *PushApplicationDataResponse) SetHeaders(v map[string]*string) *PushApplicationDataResponse {
	s.Headers = v
	return s
}

func (s *PushApplicationDataResponse) SetStatusCode(v int32) *PushApplicationDataResponse {
	s.StatusCode = &v
	return s
}

func (s *PushApplicationDataResponse) SetBody(v *PushApplicationDataResponseBody) *PushApplicationDataResponse {
	s.Body = v
	return s
}

type PutBucketRequest struct {
	BucketAcl *string `json:"BucketAcl,omitempty" xml:"BucketAcl,omitempty"`
	// This parameter is required.
	BucketName        *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	Comment           *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	DispatchScope     *string `json:"DispatchScope,omitempty" xml:"DispatchScope,omitempty"`
	EnsRegionId       *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	LogicalBucketType *string `json:"LogicalBucketType,omitempty" xml:"LogicalBucketType,omitempty"`
}

func (s PutBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s PutBucketRequest) GoString() string {
	return s.String()
}

func (s *PutBucketRequest) SetBucketAcl(v string) *PutBucketRequest {
	s.BucketAcl = &v
	return s
}

func (s *PutBucketRequest) SetBucketName(v string) *PutBucketRequest {
	s.BucketName = &v
	return s
}

func (s *PutBucketRequest) SetComment(v string) *PutBucketRequest {
	s.Comment = &v
	return s
}

func (s *PutBucketRequest) SetDispatchScope(v string) *PutBucketRequest {
	s.DispatchScope = &v
	return s
}

func (s *PutBucketRequest) SetEnsRegionId(v string) *PutBucketRequest {
	s.EnsRegionId = &v
	return s
}

func (s *PutBucketRequest) SetLogicalBucketType(v string) *PutBucketRequest {
	s.LogicalBucketType = &v
	return s
}

type PutBucketResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 85123E71-7710-4620-8AAB-133CCE49EC83
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PutBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutBucketResponseBody) GoString() string {
	return s.String()
}

func (s *PutBucketResponseBody) SetRequestId(v string) *PutBucketResponseBody {
	s.RequestId = &v
	return s
}

type PutBucketResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutBucketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s PutBucketResponse) GoString() string {
	return s.String()
}

func (s *PutBucketResponse) SetHeaders(v map[string]*string) *PutBucketResponse {
	s.Headers = v
	return s
}

func (s *PutBucketResponse) SetStatusCode(v int32) *PutBucketResponse {
	s.StatusCode = &v
	return s
}

func (s *PutBucketResponse) SetBody(v *PutBucketResponseBody) *PutBucketResponse {
	s.Body = v
	return s
}

type PutBucketAclRequest struct {
	// The access control list (ACL) of the bucket.
	//
	// 	- **public-read-write**
	//
	// 	- **public-read**
	//
	// 	- **private*	- (default)
	//
	// This parameter is required.
	//
	// example:
	//
	// private
	BucketAcl *string `json:"BucketAcl,omitempty" xml:"BucketAcl,omitempty"`
	// The name of the bucket.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
}

func (s PutBucketAclRequest) String() string {
	return tea.Prettify(s)
}

func (s PutBucketAclRequest) GoString() string {
	return s.String()
}

func (s *PutBucketAclRequest) SetBucketAcl(v string) *PutBucketAclRequest {
	s.BucketAcl = &v
	return s
}

func (s *PutBucketAclRequest) SetBucketName(v string) *PutBucketAclRequest {
	s.BucketName = &v
	return s
}

type PutBucketAclResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// C0066F05-3116-4BAA-B588-52EB2E7F5D23
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s PutBucketAclResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutBucketAclResponseBody) GoString() string {
	return s.String()
}

func (s *PutBucketAclResponseBody) SetRequestId(v string) *PutBucketAclResponseBody {
	s.RequestId = &v
	return s
}

type PutBucketAclResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutBucketAclResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutBucketAclResponse) String() string {
	return tea.Prettify(s)
}

func (s PutBucketAclResponse) GoString() string {
	return s.String()
}

func (s *PutBucketAclResponse) SetHeaders(v map[string]*string) *PutBucketAclResponse {
	s.Headers = v
	return s
}

func (s *PutBucketAclResponse) SetStatusCode(v int32) *PutBucketAclResponse {
	s.StatusCode = &v
	return s
}

func (s *PutBucketAclResponse) SetBody(v *PutBucketAclResponseBody) *PutBucketAclResponse {
	s.Body = v
	return s
}

type PutBucketLifecycleRequest struct {
	// Specifies whether to allow overlapped prefixes. Valid values:
	//
	// 	- **true**
	//
	// 	- **false*	- (default)
	//
	// example:
	//
	// false
	AllowSameActionOverlap *string `json:"AllowSameActionOverlap,omitempty" xml:"AllowSameActionOverlap,omitempty"`
	// The name of the bucket.
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	BucketName *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	// The expiration time. EOS executes a lifecycle rule for objects that were last updated before the expiration time.
	//
	// Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	//
	// >  ExpirationDays and CreateBeforeDate are mutually exclusive.
	//
	// example:
	//
	// 2023-10-12T05:45:00Z
	CreatedBeforeDate *string `json:"CreatedBeforeDate,omitempty" xml:"CreatedBeforeDate,omitempty"`
	// The number of days from when the objects were last modified to when the lifecycle rule takes effect. The value must be a positive integer that is greater than 0.
	//
	// >  ExpirationDays and CreateBeforeDate are mutually exclusive.
	//
	// example:
	//
	// 5
	ExpirationDays *int64 `json:"ExpirationDays,omitempty" xml:"ExpirationDays,omitempty"`
	// The prefix of a object name. The prefix must be unique.
	//
	// 	- If you specify a prefix, the rule applies only to objects in the bucket that match the prefix.
	//
	// 	- If you do not specify a prefix, the rule applies to all objects in the bucket.
	//
	// example:
	//
	// image
	Prefix *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
	// The unique ID of the rule. The ID of a lifecycle rule can be up to 255 bytes in length.
	//
	// 	- You do not need to configure this parameter when you create a rule. The system automatically generates a unique ID.
	//
	// 	- When you update a rule, you need to specify this parameter. Make sure that the rule specified by RuleId exists. Otherwise, an error occurs.
	//
	// example:
	//
	// 1
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The status of the rule. Valid values:
	//
	// 	- **Enabled**
	//
	// 	- **Disabled**
	//
	// This parameter is required.
	//
	// example:
	//
	// Enabled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s PutBucketLifecycleRequest) String() string {
	return tea.Prettify(s)
}

func (s PutBucketLifecycleRequest) GoString() string {
	return s.String()
}

func (s *PutBucketLifecycleRequest) SetAllowSameActionOverlap(v string) *PutBucketLifecycleRequest {
	s.AllowSameActionOverlap = &v
	return s
}

func (s *PutBucketLifecycleRequest) SetBucketName(v string) *PutBucketLifecycleRequest {
	s.BucketName = &v
	return s
}

func (s *PutBucketLifecycleRequest) SetCreatedBeforeDate(v string) *PutBucketLifecycleRequest {
	s.CreatedBeforeDate = &v
	return s
}

func (s *PutBucketLifecycleRequest) SetExpirationDays(v int64) *PutBucketLifecycleRequest {
	s.ExpirationDays = &v
	return s
}

func (s *PutBucketLifecycleRequest) SetPrefix(v string) *PutBucketLifecycleRequest {
	s.Prefix = &v
	return s
}

func (s *PutBucketLifecycleRequest) SetRuleId(v string) *PutBucketLifecycleRequest {
	s.RuleId = &v
	return s
}

func (s *PutBucketLifecycleRequest) SetStatus(v string) *PutBucketLifecycleRequest {
	s.Status = &v
	return s
}

type PutBucketLifecycleResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 62373E71-5521-4620-8AAB-133CCE49357A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the rule.
	//
	// example:
	//
	// b8f93xxxxx4881xxxxxc71d991
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s PutBucketLifecycleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PutBucketLifecycleResponseBody) GoString() string {
	return s.String()
}

func (s *PutBucketLifecycleResponseBody) SetRequestId(v string) *PutBucketLifecycleResponseBody {
	s.RequestId = &v
	return s
}

func (s *PutBucketLifecycleResponseBody) SetRuleId(v string) *PutBucketLifecycleResponseBody {
	s.RuleId = &v
	return s
}

type PutBucketLifecycleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PutBucketLifecycleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PutBucketLifecycleResponse) String() string {
	return tea.Prettify(s)
}

func (s PutBucketLifecycleResponse) GoString() string {
	return s.String()
}

func (s *PutBucketLifecycleResponse) SetHeaders(v map[string]*string) *PutBucketLifecycleResponse {
	s.Headers = v
	return s
}

func (s *PutBucketLifecycleResponse) SetStatusCode(v int32) *PutBucketLifecycleResponse {
	s.StatusCode = &v
	return s
}

func (s *PutBucketLifecycleResponse) SetBody(v *PutBucketLifecycleResponseBody) *PutBucketLifecycleResponse {
	s.Body = v
	return s
}

type ReInitDiskRequest struct {
	// The ID of the disk to be initialized. You can initialize only one disk at a time.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-5r7v69e0bejrnzger09w71yjv
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The ID of the image to use to create the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-5rz3i231o531s4p4ozanxmgx7
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
}

func (s ReInitDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskRequest) GoString() string {
	return s.String()
}

func (s *ReInitDiskRequest) SetDiskId(v string) *ReInitDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ReInitDiskRequest) SetImageId(v string) *ReInitDiskRequest {
	s.ImageId = &v
	return s
}

type ReInitDiskResponseBody struct {
	// The returned service code. A value of 0 indicates that the operation was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 4DD66F05-3116-4BAA-B588-52EB2E7F431D
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReInitDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskResponseBody) GoString() string {
	return s.String()
}

func (s *ReInitDiskResponseBody) SetCode(v int32) *ReInitDiskResponseBody {
	s.Code = &v
	return s
}

func (s *ReInitDiskResponseBody) SetRequestId(v string) *ReInitDiskResponseBody {
	s.RequestId = &v
	return s
}

type ReInitDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReInitDiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReInitDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ReInitDiskResponse) GoString() string {
	return s.String()
}

func (s *ReInitDiskResponse) SetHeaders(v map[string]*string) *ReInitDiskResponse {
	s.Headers = v
	return s
}

func (s *ReInitDiskResponse) SetStatusCode(v int32) *ReInitDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *ReInitDiskResponse) SetBody(v *ReInitDiskResponseBody) *ReInitDiskResponse {
	s.Body = v
	return s
}

type RebootAICInstanceRequest struct {
	// The ID of the AIC instance.
	//
	// example:
	//
	// aic-instance****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The IDs of the AIC instance groups.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The ID of the server.
	//
	// example:
	//
	// cas-instance****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
}

func (s RebootAICInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootAICInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebootAICInstanceRequest) SetInstanceId(v string) *RebootAICInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RebootAICInstanceRequest) SetInstanceIds(v []*string) *RebootAICInstanceRequest {
	s.InstanceIds = v
	return s
}

func (s *RebootAICInstanceRequest) SetServerId(v string) *RebootAICInstanceRequest {
	s.ServerId = &v
	return s
}

type RebootAICInstanceShrinkRequest struct {
	// The ID of the AIC instance.
	//
	// example:
	//
	// aic-instance****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The IDs of the AIC instance groups.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The ID of the server.
	//
	// example:
	//
	// cas-instance****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
}

func (s RebootAICInstanceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootAICInstanceShrinkRequest) GoString() string {
	return s.String()
}

func (s *RebootAICInstanceShrinkRequest) SetInstanceId(v string) *RebootAICInstanceShrinkRequest {
	s.InstanceId = &v
	return s
}

func (s *RebootAICInstanceShrinkRequest) SetInstanceIdsShrink(v string) *RebootAICInstanceShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *RebootAICInstanceShrinkRequest) SetServerId(v string) *RebootAICInstanceShrinkRequest {
	s.ServerId = &v
	return s
}

type RebootAICInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootAICInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootAICInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebootAICInstanceResponseBody) SetRequestId(v string) *RebootAICInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RebootAICInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebootAICInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebootAICInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootAICInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootAICInstanceResponse) SetHeaders(v map[string]*string) *RebootAICInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebootAICInstanceResponse) SetStatusCode(v int32) *RebootAICInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootAICInstanceResponse) SetBody(v *RebootAICInstanceResponseBody) *RebootAICInstanceResponse {
	s.Body = v
	return s
}

type RebootARMServerInstanceRequest struct {
	// The ID of the server.
	//
	// example:
	//
	// yourInstance ID
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
}

func (s RebootARMServerInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootARMServerInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebootARMServerInstanceRequest) SetServerId(v string) *RebootARMServerInstanceRequest {
	s.ServerId = &v
	return s
}

type RebootARMServerInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootARMServerInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootARMServerInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebootARMServerInstanceResponseBody) SetRequestId(v string) *RebootARMServerInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RebootARMServerInstanceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebootARMServerInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebootARMServerInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootARMServerInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootARMServerInstanceResponse) SetHeaders(v map[string]*string) *RebootARMServerInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebootARMServerInstanceResponse) SetStatusCode(v int32) *RebootARMServerInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootARMServerInstanceResponse) SetBody(v *RebootARMServerInstanceResponseBody) *RebootARMServerInstanceResponse {
	s.Body = v
	return s
}

type RebootInstanceRequest struct {
	// Indicates whether to stop the instance forcibly before you reboot it. Default value: false. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// example:
	//
	// true
	ForceStop *string `json:"ForceStop,omitempty" xml:"ForceStop,omitempty"`
	// The ID of the instance that you want to reboot. You can specify only one instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-instanceid****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s RebootInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceRequest) GoString() string {
	return s.String()
}

func (s *RebootInstanceRequest) SetForceStop(v string) *RebootInstanceRequest {
	s.ForceStop = &v
	return s
}

func (s *RebootInstanceRequest) SetInstanceId(v string) *RebootInstanceRequest {
	s.InstanceId = &v
	return s
}

type RebootInstanceResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RebootInstanceResponseBody) SetCode(v int32) *RebootInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *RebootInstanceResponseBody) SetRequestId(v string) *RebootInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RebootInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebootInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebootInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootInstanceResponse) GoString() string {
	return s.String()
}

func (s *RebootInstanceResponse) SetHeaders(v map[string]*string) *RebootInstanceResponse {
	s.Headers = v
	return s
}

func (s *RebootInstanceResponse) SetStatusCode(v int32) *RebootInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootInstanceResponse) SetBody(v *RebootInstanceResponseBody) *RebootInstanceResponse {
	s.Body = v
	return s
}

type RebootInstancesRequest struct {
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s RebootInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesRequest) GoString() string {
	return s.String()
}

func (s *RebootInstancesRequest) SetInstanceIds(v []*string) *RebootInstancesRequest {
	s.InstanceIds = v
	return s
}

type RebootInstancesShrinkRequest struct {
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s RebootInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *RebootInstancesShrinkRequest) SetInstanceIdsShrink(v string) *RebootInstancesShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

type RebootInstancesResponseBody struct {
	InstanceResponses []*InstanceOperateResponse `json:"InstanceResponses,omitempty" xml:"InstanceResponses,omitempty" type:"Repeated"`
	RequestId         *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *RebootInstancesResponseBody) SetInstanceResponses(v []*InstanceOperateResponse) *RebootInstancesResponseBody {
	s.InstanceResponses = v
	return s
}

func (s *RebootInstancesResponseBody) SetRequestId(v string) *RebootInstancesResponseBody {
	s.RequestId = &v
	return s
}

type RebootInstancesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebootInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebootInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootInstancesResponse) GoString() string {
	return s.String()
}

func (s *RebootInstancesResponse) SetHeaders(v map[string]*string) *RebootInstancesResponse {
	s.Headers = v
	return s
}

func (s *RebootInstancesResponse) SetStatusCode(v int32) *RebootInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootInstancesResponse) SetBody(v *RebootInstancesResponseBody) *RebootInstancesResponse {
	s.Body = v
	return s
}

type RecoverAICInstanceRequest struct {
	// The ID of the server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cas-instance****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
}

func (s RecoverAICInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RecoverAICInstanceRequest) GoString() string {
	return s.String()
}

func (s *RecoverAICInstanceRequest) SetServerId(v string) *RecoverAICInstanceRequest {
	s.ServerId = &v
	return s
}

type RecoverAICInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RecoverAICInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RecoverAICInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RecoverAICInstanceResponseBody) SetRequestId(v string) *RecoverAICInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RecoverAICInstanceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RecoverAICInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RecoverAICInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RecoverAICInstanceResponse) GoString() string {
	return s.String()
}

func (s *RecoverAICInstanceResponse) SetHeaders(v map[string]*string) *RecoverAICInstanceResponse {
	s.Headers = v
	return s
}

func (s *RecoverAICInstanceResponse) SetStatusCode(v int32) *RecoverAICInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RecoverAICInstanceResponse) SetBody(v *RecoverAICInstanceResponseBody) *RecoverAICInstanceResponse {
	s.Body = v
	return s
}

type ReinitInstanceRequest struct {
	// The ID of the image file that is used to reset the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-5wn1dhz5syoo9b48f440ntvad
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// if can be null:
	// false
	//
	// example:
	//
	// i-5vn4n3y4laeb2ii9zxxltlvzi
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The password of the instance.
	//
	// It must be 8 to 30 characters in length. It must include at least three of the following characters types: uppercase letters, lowercase letters, digits, and special characters. The following special character are supported: `()\\"~! @#$%^&*-_+={}[]:;\\"<>,.?/`
	//
	// example:
	//
	// ***
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
}

func (s ReinitInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReinitInstanceRequest) SetImageId(v string) *ReinitInstanceRequest {
	s.ImageId = &v
	return s
}

func (s *ReinitInstanceRequest) SetInstanceId(v string) *ReinitInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *ReinitInstanceRequest) SetPassword(v string) *ReinitInstanceRequest {
	s.Password = &v
	return s
}

type ReinitInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// C46C79B7-0C31-5947-9D86-82207661EADA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReinitInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReinitInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReinitInstanceResponseBody) SetRequestId(v string) *ReinitInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReinitInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReinitInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReinitInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReinitInstanceResponse) SetHeaders(v map[string]*string) *ReinitInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReinitInstanceResponse) SetStatusCode(v int32) *ReinitInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReinitInstanceResponse) SetBody(v *ReinitInstanceResponseBody) *ReinitInstanceResponse {
	s.Body = v
	return s
}

type ReinitInstancesRequest struct {
	ImageId     *string   `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	Password    *string   `json:"Password,omitempty" xml:"Password,omitempty"`
}

func (s ReinitInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitInstancesRequest) GoString() string {
	return s.String()
}

func (s *ReinitInstancesRequest) SetImageId(v string) *ReinitInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *ReinitInstancesRequest) SetInstanceIds(v []*string) *ReinitInstancesRequest {
	s.InstanceIds = v
	return s
}

func (s *ReinitInstancesRequest) SetPassword(v string) *ReinitInstancesRequest {
	s.Password = &v
	return s
}

type ReinitInstancesShrinkRequest struct {
	ImageId           *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	Password          *string `json:"Password,omitempty" xml:"Password,omitempty"`
}

func (s ReinitInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ReinitInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ReinitInstancesShrinkRequest) SetImageId(v string) *ReinitInstancesShrinkRequest {
	s.ImageId = &v
	return s
}

func (s *ReinitInstancesShrinkRequest) SetInstanceIdsShrink(v string) *ReinitInstancesShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *ReinitInstancesShrinkRequest) SetPassword(v string) *ReinitInstancesShrinkRequest {
	s.Password = &v
	return s
}

type ReinitInstancesResponseBody struct {
	InstanceResponses []*InstanceOperateResponse `json:"InstanceResponses,omitempty" xml:"InstanceResponses,omitempty" type:"Repeated"`
	RequestId         *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReinitInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReinitInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ReinitInstancesResponseBody) SetInstanceResponses(v []*InstanceOperateResponse) *ReinitInstancesResponseBody {
	s.InstanceResponses = v
	return s
}

func (s *ReinitInstancesResponseBody) SetRequestId(v string) *ReinitInstancesResponseBody {
	s.RequestId = &v
	return s
}

type ReinitInstancesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReinitInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReinitInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ReinitInstancesResponse) GoString() string {
	return s.String()
}

func (s *ReinitInstancesResponse) SetHeaders(v map[string]*string) *ReinitInstancesResponse {
	s.Headers = v
	return s
}

func (s *ReinitInstancesResponse) SetStatusCode(v int32) *ReinitInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *ReinitInstancesResponse) SetBody(v *ReinitInstancesResponseBody) *ReinitInstancesResponse {
	s.Body = v
	return s
}

type ReleaseAICInstanceRequest struct {
	// The ID of the server.
	//
	// This parameter is required.
	//
	// example:
	//
	// cas-instance****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
}

func (s ReleaseAICInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseAICInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleaseAICInstanceRequest) SetServerId(v string) *ReleaseAICInstanceRequest {
	s.ServerId = &v
	return s
}

type ReleaseAICInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseAICInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseAICInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseAICInstanceResponseBody) SetRequestId(v string) *ReleaseAICInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseAICInstanceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseAICInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseAICInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseAICInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleaseAICInstanceResponse) SetHeaders(v map[string]*string) *ReleaseAICInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleaseAICInstanceResponse) SetStatusCode(v int32) *ReleaseAICInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseAICInstanceResponse) SetBody(v *ReleaseAICInstanceResponseBody) *ReleaseAICInstanceResponse {
	s.Body = v
	return s
}

type ReleaseARMServerInstanceRequest struct {
	// The ID of the server.
	//
	// This parameter is required.
	//
	// example:
	//
	// yourInstance ID
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ReleaseARMServerInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseARMServerInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleaseARMServerInstanceRequest) SetInstanceId(v string) *ReleaseARMServerInstanceRequest {
	s.InstanceId = &v
	return s
}

type ReleaseARMServerInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// DCAE84DF-4187-5CC5-B819-37BCD2B83BD3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseARMServerInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseARMServerInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseARMServerInstanceResponseBody) SetRequestId(v string) *ReleaseARMServerInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseARMServerInstanceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseARMServerInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseARMServerInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseARMServerInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleaseARMServerInstanceResponse) SetHeaders(v map[string]*string) *ReleaseARMServerInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleaseARMServerInstanceResponse) SetStatusCode(v int32) *ReleaseARMServerInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseARMServerInstanceResponse) SetBody(v *ReleaseARMServerInstanceResponseBody) *ReleaseARMServerInstanceResponse {
	s.Body = v
	return s
}

type ReleaseInstanceRequest struct {
	// The ID of the EIP.
	//
	// This parameter is required.
	//
	// example:
	//
	// eip-****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ReleaseInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceRequest) SetInstanceId(v string) *ReleaseInstanceRequest {
	s.InstanceId = &v
	return s
}

type ReleaseInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 4EC47282-1B74-4534-BD0E-403F3EE64CAF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The type of the resource.
	//
	// Valid values:
	//
	// 	- instance
	//
	// 	- eip
	//
	// 	- disk
	//
	// 	- network
	//
	// 	- natgateway
	//
	// 	- vswitch
	//
	// example:
	//
	// eip
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s ReleaseInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceResponseBody) SetRequestId(v string) *ReleaseInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReleaseInstanceResponseBody) SetResourceType(v string) *ReleaseInstanceResponseBody {
	s.ResourceType = &v
	return s
}

type ReleaseInstanceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleaseInstanceResponse) SetHeaders(v map[string]*string) *ReleaseInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleaseInstanceResponse) SetStatusCode(v int32) *ReleaseInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseInstanceResponse) SetBody(v *ReleaseInstanceResponseBody) *ReleaseInstanceResponse {
	s.Body = v
	return s
}

type ReleasePostPaidInstanceRequest struct {
	// The ID of the instance to be deleted. You can specify only one instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-instance****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ReleasePostPaidInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleasePostPaidInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleasePostPaidInstanceRequest) SetInstanceId(v string) *ReleasePostPaidInstanceRequest {
	s.InstanceId = &v
	return s
}

type ReleasePostPaidInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleasePostPaidInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleasePostPaidInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleasePostPaidInstanceResponseBody) SetRequestId(v string) *ReleasePostPaidInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReleasePostPaidInstanceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleasePostPaidInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleasePostPaidInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleasePostPaidInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleasePostPaidInstanceResponse) SetHeaders(v map[string]*string) *ReleasePostPaidInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleasePostPaidInstanceResponse) SetStatusCode(v int32) *ReleasePostPaidInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleasePostPaidInstanceResponse) SetBody(v *ReleasePostPaidInstanceResponseBody) *ReleasePostPaidInstanceResponse {
	s.Body = v
	return s
}

type ReleasePrePaidInstanceRequest struct {
	// The ID of the instance to be deleted. You can specify only one instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-instance****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s ReleasePrePaidInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleasePrePaidInstanceRequest) GoString() string {
	return s.String()
}

func (s *ReleasePrePaidInstanceRequest) SetInstanceId(v string) *ReleasePrePaidInstanceRequest {
	s.InstanceId = &v
	return s
}

type ReleasePrePaidInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleasePrePaidInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleasePrePaidInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ReleasePrePaidInstanceResponseBody) SetRequestId(v string) *ReleasePrePaidInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ReleasePrePaidInstanceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleasePrePaidInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleasePrePaidInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleasePrePaidInstanceResponse) GoString() string {
	return s.String()
}

func (s *ReleasePrePaidInstanceResponse) SetHeaders(v map[string]*string) *ReleasePrePaidInstanceResponse {
	s.Headers = v
	return s
}

func (s *ReleasePrePaidInstanceResponse) SetStatusCode(v int32) *ReleasePrePaidInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleasePrePaidInstanceResponse) SetBody(v *ReleasePrePaidInstanceResponseBody) *ReleasePrePaidInstanceResponse {
	s.Body = v
	return s
}

type RemoveBackendServersRequest struct {
	// The list of backend servers that you want to remove. You can remove up to 20 backend servers at a time.
	//
	// This parameter is required.
	BackendServers []*RemoveBackendServersRequestBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Repeated"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5ovkn1piwqmoqrfjdyhq4****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s RemoveBackendServersRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersRequest) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersRequest) SetBackendServers(v []*RemoveBackendServersRequestBackendServers) *RemoveBackendServersRequest {
	s.BackendServers = v
	return s
}

func (s *RemoveBackendServersRequest) SetLoadBalancerId(v string) *RemoveBackendServersRequest {
	s.LoadBalancerId = &v
	return s
}

type RemoveBackendServersRequestBackendServers struct {
	// The IP address of the backend server.
	//
	// example:
	//
	// 192.XXX.X.X
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The backend port that is used by the Edge Load Balancer (ELB) instance.
	//
	// example:
	//
	// 0
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The instance ID of the backend server.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-5uf68ts0fqexe1a4n****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	// The type of backend server. Valid values:
	//
	// 	- **ens**: an Edge Node Service (ENS) instance.
	//
	// 	- **eni**: an Elastic Network Interface (ENI).
	//
	// example:
	//
	// ens
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The weight of the backend server.
	//
	// example:
	//
	// 100
	Weight *int32 `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s RemoveBackendServersRequestBackendServers) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersRequestBackendServers) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersRequestBackendServers) SetIp(v string) *RemoveBackendServersRequestBackendServers {
	s.Ip = &v
	return s
}

func (s *RemoveBackendServersRequestBackendServers) SetPort(v int32) *RemoveBackendServersRequestBackendServers {
	s.Port = &v
	return s
}

func (s *RemoveBackendServersRequestBackendServers) SetServerId(v string) *RemoveBackendServersRequestBackendServers {
	s.ServerId = &v
	return s
}

func (s *RemoveBackendServersRequestBackendServers) SetType(v string) *RemoveBackendServersRequestBackendServers {
	s.Type = &v
	return s
}

func (s *RemoveBackendServersRequestBackendServers) SetWeight(v int32) *RemoveBackendServersRequestBackendServers {
	s.Weight = &v
	return s
}

type RemoveBackendServersShrinkRequest struct {
	// The list of backend servers that you want to remove. You can remove up to 20 backend servers at a time.
	//
	// This parameter is required.
	BackendServersShrink *string `json:"BackendServers,omitempty" xml:"BackendServers,omitempty"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5ovkn1piwqmoqrfjdyhq4****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s RemoveBackendServersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersShrinkRequest) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersShrinkRequest) SetBackendServersShrink(v string) *RemoveBackendServersShrinkRequest {
	s.BackendServersShrink = &v
	return s
}

func (s *RemoveBackendServersShrinkRequest) SetLoadBalancerId(v string) *RemoveBackendServersShrinkRequest {
	s.LoadBalancerId = &v
	return s
}

type RemoveBackendServersResponseBody struct {
	// The list of backend servers that you want to add to the SLB instance.
	BackendServers *RemoveBackendServersResponseBodyBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveBackendServersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersResponseBody) SetBackendServers(v *RemoveBackendServersResponseBodyBackendServers) *RemoveBackendServersResponseBody {
	s.BackendServers = v
	return s
}

func (s *RemoveBackendServersResponseBody) SetRequestId(v string) *RemoveBackendServersResponseBody {
	s.RequestId = &v
	return s
}

type RemoveBackendServersResponseBodyBackendServers struct {
	BackendServer []*RemoveBackendServersResponseBodyBackendServersBackendServer `json:"BackendServer,omitempty" xml:"BackendServer,omitempty" type:"Repeated"`
}

func (s RemoveBackendServersResponseBodyBackendServers) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersResponseBodyBackendServers) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersResponseBodyBackendServers) SetBackendServer(v []*RemoveBackendServersResponseBodyBackendServersBackendServer) *RemoveBackendServersResponseBodyBackendServers {
	s.BackendServer = v
	return s
}

type RemoveBackendServersResponseBodyBackendServersBackendServer struct {
	// The IP address of the backend server.
	//
	// example:
	//
	// 192.1XX.X.X
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The backend port that is used by the ELB instance.
	//
	// example:
	//
	// 0
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The instance ID of the backend server.
	//
	// example:
	//
	// i-5vb5h5njxiuhn48a****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	// The type of the backend server. Valid values:
	//
	// 	- **ens**: an ENS instance.
	//
	// 	- **eni**: an ENI.
	//
	// example:
	//
	// ens
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The weight of the backend server.
	//
	// >  The value 0 indicates that requests are not forwarded to the backend server.
	//
	// example:
	//
	// 50
	Weight *int32 `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s RemoveBackendServersResponseBodyBackendServersBackendServer) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersResponseBodyBackendServersBackendServer) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersResponseBodyBackendServersBackendServer) SetIp(v string) *RemoveBackendServersResponseBodyBackendServersBackendServer {
	s.Ip = &v
	return s
}

func (s *RemoveBackendServersResponseBodyBackendServersBackendServer) SetPort(v int32) *RemoveBackendServersResponseBodyBackendServersBackendServer {
	s.Port = &v
	return s
}

func (s *RemoveBackendServersResponseBodyBackendServersBackendServer) SetServerId(v string) *RemoveBackendServersResponseBodyBackendServersBackendServer {
	s.ServerId = &v
	return s
}

func (s *RemoveBackendServersResponseBodyBackendServersBackendServer) SetType(v string) *RemoveBackendServersResponseBodyBackendServersBackendServer {
	s.Type = &v
	return s
}

func (s *RemoveBackendServersResponseBodyBackendServersBackendServer) SetWeight(v int32) *RemoveBackendServersResponseBodyBackendServersBackendServer {
	s.Weight = &v
	return s
}

type RemoveBackendServersResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveBackendServersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveBackendServersResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveBackendServersResponse) GoString() string {
	return s.String()
}

func (s *RemoveBackendServersResponse) SetHeaders(v map[string]*string) *RemoveBackendServersResponse {
	s.Headers = v
	return s
}

func (s *RemoveBackendServersResponse) SetStatusCode(v int32) *RemoveBackendServersResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveBackendServersResponse) SetBody(v *RemoveBackendServersResponseBody) *RemoveBackendServersResponse {
	s.Body = v
	return s
}

type RemoveInstanceSDGRequest struct {
	// The IDs of the instances. The value is a JSON array that consists of up to 100 IDs.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s RemoveInstanceSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveInstanceSDGRequest) GoString() string {
	return s.String()
}

func (s *RemoveInstanceSDGRequest) SetInstanceIds(v []*string) *RemoveInstanceSDGRequest {
	s.InstanceIds = v
	return s
}

type RemoveInstanceSDGShrinkRequest struct {
	// The IDs of the instances. The value is a JSON array that consists of up to 100 IDs.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s RemoveInstanceSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveInstanceSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *RemoveInstanceSDGShrinkRequest) SetInstanceIdsShrink(v string) *RemoveInstanceSDGShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

type RemoveInstanceSDGResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data object.
	Data *RemoveInstanceSDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 125B04C7-3D0D-4245-AF96-14E3758E3F06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveInstanceSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveInstanceSDGResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveInstanceSDGResponseBody) SetCode(v int32) *RemoveInstanceSDGResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveInstanceSDGResponseBody) SetData(v *RemoveInstanceSDGResponseBodyData) *RemoveInstanceSDGResponseBody {
	s.Data = v
	return s
}

func (s *RemoveInstanceSDGResponseBody) SetRequestId(v string) *RemoveInstanceSDGResponseBody {
	s.RequestId = &v
	return s
}

type RemoveInstanceSDGResponseBodyData struct {
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The execution result of the synchronization request.
	Result *RemoveInstanceSDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- **true**: All tasks are successful.
	//
	// 	- **false**: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemoveInstanceSDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RemoveInstanceSDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *RemoveInstanceSDGResponseBodyData) SetMessage(v string) *RemoveInstanceSDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *RemoveInstanceSDGResponseBodyData) SetResult(v *RemoveInstanceSDGResponseBodyDataResult) *RemoveInstanceSDGResponseBodyData {
	s.Result = v
	return s
}

func (s *RemoveInstanceSDGResponseBodyData) SetSuccess(v bool) *RemoveInstanceSDGResponseBodyData {
	s.Success = &v
	return s
}

type RemoveInstanceSDGResponseBodyDataResult struct {
	// The number of failed tasks.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details about the failed tasks.
	FailedItems []*RemoveInstanceSDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful tasks.
	//
	// example:
	//
	// 1
	SuccessCount *int64 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s RemoveInstanceSDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s RemoveInstanceSDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *RemoveInstanceSDGResponseBodyDataResult) SetFailedCount(v int64) *RemoveInstanceSDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *RemoveInstanceSDGResponseBodyDataResult) SetFailedItems(v []*RemoveInstanceSDGResponseBodyDataResultFailedItems) *RemoveInstanceSDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *RemoveInstanceSDGResponseBodyDataResult) SetSuccessCount(v int64) *RemoveInstanceSDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type RemoveInstanceSDGResponseBodyDataResultFailedItems struct {
	// The error message that is returned.
	//
	// example:
	//
	// sdg not found
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// aic-xxxxx-0
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s RemoveInstanceSDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s RemoveInstanceSDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *RemoveInstanceSDGResponseBodyDataResultFailedItems) SetErrMessage(v string) *RemoveInstanceSDGResponseBodyDataResultFailedItems {
	s.ErrMessage = &v
	return s
}

func (s *RemoveInstanceSDGResponseBodyDataResultFailedItems) SetInstanceId(v string) *RemoveInstanceSDGResponseBodyDataResultFailedItems {
	s.InstanceId = &v
	return s
}

type RemoveInstanceSDGResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveInstanceSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveInstanceSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveInstanceSDGResponse) GoString() string {
	return s.String()
}

func (s *RemoveInstanceSDGResponse) SetHeaders(v map[string]*string) *RemoveInstanceSDGResponse {
	s.Headers = v
	return s
}

func (s *RemoveInstanceSDGResponse) SetStatusCode(v int32) *RemoveInstanceSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveInstanceSDGResponse) SetBody(v *RemoveInstanceSDGResponseBody) *RemoveInstanceSDGResponse {
	s.Body = v
	return s
}

type RemovePublicIpsFromEpnInstanceRequest struct {
	// The ID of the EPN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// epn-xxxx
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	// The information about the public IP addresses that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{"PublicIpAddress":"2.230.XX.XX"},{"PublicIpAddress":"2.230.XX.XX"}]
	InstanceInfos *string `json:"InstanceInfos,omitempty" xml:"InstanceInfos,omitempty"`
}

func (s RemovePublicIpsFromEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RemovePublicIpsFromEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *RemovePublicIpsFromEpnInstanceRequest) SetEPNInstanceId(v string) *RemovePublicIpsFromEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *RemovePublicIpsFromEpnInstanceRequest) SetInstanceInfos(v string) *RemovePublicIpsFromEpnInstanceRequest {
	s.InstanceInfos = &v
	return s
}

type RemovePublicIpsFromEpnInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E	 Request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemovePublicIpsFromEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemovePublicIpsFromEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RemovePublicIpsFromEpnInstanceResponseBody) SetRequestId(v string) *RemovePublicIpsFromEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RemovePublicIpsFromEpnInstanceResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemovePublicIpsFromEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemovePublicIpsFromEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RemovePublicIpsFromEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *RemovePublicIpsFromEpnInstanceResponse) SetHeaders(v map[string]*string) *RemovePublicIpsFromEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *RemovePublicIpsFromEpnInstanceResponse) SetStatusCode(v int32) *RemovePublicIpsFromEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RemovePublicIpsFromEpnInstanceResponse) SetBody(v *RemovePublicIpsFromEpnInstanceResponseBody) *RemovePublicIpsFromEpnInstanceResponse {
	s.Body = v
	return s
}

type RemoveSDGRequest struct {
	// IDs of Android in Container (AIC) instances.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s RemoveSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveSDGRequest) GoString() string {
	return s.String()
}

func (s *RemoveSDGRequest) SetInstanceIds(v []*string) *RemoveSDGRequest {
	s.InstanceIds = v
	return s
}

type RemoveSDGShrinkRequest struct {
	// IDs of Android in Container (AIC) instances.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s RemoveSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *RemoveSDGShrinkRequest) SetInstanceIdsShrink(v string) *RemoveSDGShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

type RemoveSDGResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 6666C5A5-75ED-422E-A022-7121FA18C968
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveSDGResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveSDGResponseBody) SetRequestId(v string) *RemoveSDGResponseBody {
	s.RequestId = &v
	return s
}

type RemoveSDGResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveSDGResponse) GoString() string {
	return s.String()
}

func (s *RemoveSDGResponse) SetHeaders(v map[string]*string) *RemoveSDGResponse {
	s.Headers = v
	return s
}

func (s *RemoveSDGResponse) SetStatusCode(v int32) *RemoveSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveSDGResponse) SetBody(v *RemoveSDGResponseBody) *RemoveSDGResponse {
	s.Body = v
	return s
}

type RemoveVSwitchesFromEpnInstanceRequest struct {
	// The ID of theEPN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// epn-****
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
	// The internal networking information that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// VSwitchesInfo=[{"VSwitchId":"vs-ixxxx"},{"VSwitchId":"vs-ixxxx"}]
	VSwitchesInfo *string `json:"VSwitchesInfo,omitempty" xml:"VSwitchesInfo,omitempty"`
}

func (s RemoveVSwitchesFromEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveVSwitchesFromEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *RemoveVSwitchesFromEpnInstanceRequest) SetEPNInstanceId(v string) *RemoveVSwitchesFromEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

func (s *RemoveVSwitchesFromEpnInstanceRequest) SetVSwitchesInfo(v string) *RemoveVSwitchesFromEpnInstanceRequest {
	s.VSwitchesInfo = &v
	return s
}

type RemoveVSwitchesFromEpnInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveVSwitchesFromEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveVSwitchesFromEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveVSwitchesFromEpnInstanceResponseBody) SetRequestId(v string) *RemoveVSwitchesFromEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RemoveVSwitchesFromEpnInstanceResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveVSwitchesFromEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveVSwitchesFromEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveVSwitchesFromEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *RemoveVSwitchesFromEpnInstanceResponse) SetHeaders(v map[string]*string) *RemoveVSwitchesFromEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *RemoveVSwitchesFromEpnInstanceResponse) SetStatusCode(v int32) *RemoveVSwitchesFromEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveVSwitchesFromEpnInstanceResponse) SetBody(v *RemoveVSwitchesFromEpnInstanceResponseBody) *RemoveVSwitchesFromEpnInstanceResponse {
	s.Body = v
	return s
}

type RenewARMServerInstanceRequest struct {
	// Specifies whether to enable auto-renewal for the premium bandwidth plan. Valid values:
	//
	// 	- **true**.
	//
	// 	- **false*	- (default).
	//
	// example:
	//
	// true
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The ID of the instance that you want to renew.
	//
	// This parameter is required.
	//
	// example:
	//
	// yourInstance ID
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The renewal period. By default, instances are renewed on a monthly basis. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, and 12.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the renewal period. Valid values:
	//
	// 	- Month (default)
	//
	// 	- Year
	//
	// This parameter is required.
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
}

func (s RenewARMServerInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewARMServerInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewARMServerInstanceRequest) SetAutoRenew(v bool) *RenewARMServerInstanceRequest {
	s.AutoRenew = &v
	return s
}

func (s *RenewARMServerInstanceRequest) SetInstanceId(v string) *RenewARMServerInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewARMServerInstanceRequest) SetPeriod(v int32) *RenewARMServerInstanceRequest {
	s.Period = &v
	return s
}

func (s *RenewARMServerInstanceRequest) SetPeriodUnit(v string) *RenewARMServerInstanceRequest {
	s.PeriodUnit = &v
	return s
}

type RenewARMServerInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 370E61E0-6E6E-50FE-9259-EE706C55ABF1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewARMServerInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewARMServerInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewARMServerInstanceResponseBody) SetRequestId(v string) *RenewARMServerInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RenewARMServerInstanceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewARMServerInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewARMServerInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewARMServerInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewARMServerInstanceResponse) SetHeaders(v map[string]*string) *RenewARMServerInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewARMServerInstanceResponse) SetStatusCode(v int32) *RenewARMServerInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewARMServerInstanceResponse) SetBody(v *RenewARMServerInstanceResponseBody) *RenewARMServerInstanceResponse {
	s.Body = v
	return s
}

type RenewInstanceRequest struct {
	// The ID of the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-56789acfmxazb4p****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The renewal duration of the subscription instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Period *int64 `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s RenewInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceRequest) GoString() string {
	return s.String()
}

func (s *RenewInstanceRequest) SetInstanceId(v string) *RenewInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *RenewInstanceRequest) SetPeriod(v int64) *RenewInstanceRequest {
	s.Period = &v
	return s
}

type RenewInstanceResponseBody struct {
	// The ID of the request. This parameter is a common parameter. Each request has a unique ID. You can use the ID to troubleshoot issues.
	//
	// example:
	//
	// 86A6D421-A0C7-4C01-8648-47377CA6A2CE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponseBody) SetRequestId(v string) *RenewInstanceResponseBody {
	s.RequestId = &v
	return s
}

type RenewInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewInstanceResponse) GoString() string {
	return s.String()
}

func (s *RenewInstanceResponse) SetHeaders(v map[string]*string) *RenewInstanceResponse {
	s.Headers = v
	return s
}

func (s *RenewInstanceResponse) SetStatusCode(v int32) *RenewInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewInstanceResponse) SetBody(v *RenewInstanceResponseBody) *RenewInstanceResponse {
	s.Body = v
	return s
}

type RescaleApplicationRequest struct {
	// The ID of the application. You can query the application ID by calling the ListApplications operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// 474bdef0-d149-4695-abfb-52912d9143f0
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The level of resource scaling. The value must be of the enumerated data type. Valid values:
	//
	// 	- AreaIspCode (default): scales resources based on the Internet service provider (ISP).
	//
	// 	- RegionId: scales resources based on the edge node.
	//
	// 	- InstanceId: scales resources based on the instance ID. Resource scale-out specifies resource hosting and scale-in specifies resource release.
	//
	// example:
	//
	// RegionId
	RescaleLevel *string `json:"RescaleLevel,omitempty" xml:"RescaleLevel,omitempty"`
	// The scaling operation. The value must be of the enumerated data type. Valid values:
	//
	// 	- Add: adds new resources.
	//
	// 	- Del: releases resources.
	//
	// This parameter is required.
	//
	// example:
	//
	// Add
	RescaleType *string `json:"RescaleType,omitempty" xml:"RescaleType,omitempty"`
	// The required resources. The value must be a JSON string.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{\\"regionCode\\": \\"cn-wuxi-telecom_unicom_cmcc-3\\",    \\"ispCode\\": \\"telecom\\",    \\"count\\": 2	},{    \\"regionCode\\": \\"cn-shanghai-cmcc\\",    \\"count\\": 4	}]
	ResourceSelector *string `json:"ResourceSelector,omitempty" xml:"ResourceSelector,omitempty"`
	// The timeout period for asynchronous scaling. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 1800
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The version number of the application deployment package. By default, the stable version number is used. This parameter takes effect only when you perform resource scale-out.
	//
	// example:
	//
	// v2
	ToAppVersion *string `json:"ToAppVersion,omitempty" xml:"ToAppVersion,omitempty"`
}

func (s RescaleApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationRequest) GoString() string {
	return s.String()
}

func (s *RescaleApplicationRequest) SetAppId(v string) *RescaleApplicationRequest {
	s.AppId = &v
	return s
}

func (s *RescaleApplicationRequest) SetRescaleLevel(v string) *RescaleApplicationRequest {
	s.RescaleLevel = &v
	return s
}

func (s *RescaleApplicationRequest) SetRescaleType(v string) *RescaleApplicationRequest {
	s.RescaleType = &v
	return s
}

func (s *RescaleApplicationRequest) SetResourceSelector(v string) *RescaleApplicationRequest {
	s.ResourceSelector = &v
	return s
}

func (s *RescaleApplicationRequest) SetTimeout(v int32) *RescaleApplicationRequest {
	s.Timeout = &v
	return s
}

func (s *RescaleApplicationRequest) SetToAppVersion(v string) *RescaleApplicationRequest {
	s.ToAppVersion = &v
	return s
}

type RescaleApplicationResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// AAE90880-4970-4D81-A534-A6C0F3631F74
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RescaleApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RescaleApplicationResponseBody) SetRequestId(v string) *RescaleApplicationResponseBody {
	s.RequestId = &v
	return s
}

type RescaleApplicationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RescaleApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RescaleApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RescaleApplicationResponse) GoString() string {
	return s.String()
}

func (s *RescaleApplicationResponse) SetHeaders(v map[string]*string) *RescaleApplicationResponse {
	s.Headers = v
	return s
}

func (s *RescaleApplicationResponse) SetStatusCode(v int32) *RescaleApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *RescaleApplicationResponse) SetBody(v *RescaleApplicationResponseBody) *RescaleApplicationResponse {
	s.Body = v
	return s
}

type RescaleDeviceServiceRequest struct {
	// The ID of the application.
	//
	// example:
	//
	// 7aedc50b-b1cb-4a7c-9e3d-4cf3c9ee55a4
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// m-5rynw9g1ow1e928lb83bqmbnf
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The type of the network. The value must be of the enumerated data type. Valid values:
	//
	// 	- **1*	- (default): Internet
	//
	// 	- **2**: internal network
	//
	// example:
	//
	// 1
	IpType *int32 `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// The region level of the scale-out. Set the value to RegionId. RegionId specifies that resource scale-out is performed based on the ID of the edge node.
	//
	// This parameter is required.
	//
	// example:
	//
	// RegionId
	RescaleLevel *string `json:"RescaleLevel,omitempty" xml:"RescaleLevel,omitempty"`
	// The scaling operation. Set the value to Add to add new resources.
	//
	// This parameter is required.
	//
	// example:
	//
	// Add
	RescaleType *string `json:"RescaleType,omitempty" xml:"RescaleType,omitempty"`
	// The information about the resource specification template. The value must be a JSON string.
	//
	// example:
	//
	// {\\"imageId\\":\\"m-5s4z4c10avgwvwtn33gl2vgob\\",\\"ipType\\":2,\\"specName\\":\\"ens.pfb-c3m7.medium\\"}
	ResourceInfo *string `json:"ResourceInfo,omitempty" xml:"ResourceInfo,omitempty"`
	// The required resources. The value must be a JSON string.
	//
	// This parameter is required.
	//
	// example:
	//
	// [{\\"regionCode\\": \\"cn-wuxi-telecom_unicom_cmcc-3\\",    \\"ispCode\\": \\"telecom\\",    \\"count\\": 2	},{    \\"regionCode\\": \\"cn-shanghai-cmcc\\",    \\"count\\": 4	}]
	ResourceSelector *string `json:"ResourceSelector,omitempty" xml:"ResourceSelector,omitempty"`
	// The resource specification.
	//
	// example:
	//
	// ens.a6e.large
	ResourceSpec *string `json:"ResourceSpec,omitempty" xml:"ResourceSpec,omitempty"`
	// The ID of the service.
	//
	// example:
	//
	// service-01c6dd6e93f040698566
	ServiceId *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty"`
	// The timeout period for asynchronous scale-out. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 1800
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s RescaleDeviceServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s RescaleDeviceServiceRequest) GoString() string {
	return s.String()
}

func (s *RescaleDeviceServiceRequest) SetAppId(v string) *RescaleDeviceServiceRequest {
	s.AppId = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetImageId(v string) *RescaleDeviceServiceRequest {
	s.ImageId = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetIpType(v int32) *RescaleDeviceServiceRequest {
	s.IpType = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetRescaleLevel(v string) *RescaleDeviceServiceRequest {
	s.RescaleLevel = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetRescaleType(v string) *RescaleDeviceServiceRequest {
	s.RescaleType = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetResourceInfo(v string) *RescaleDeviceServiceRequest {
	s.ResourceInfo = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetResourceSelector(v string) *RescaleDeviceServiceRequest {
	s.ResourceSelector = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetResourceSpec(v string) *RescaleDeviceServiceRequest {
	s.ResourceSpec = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetServiceId(v string) *RescaleDeviceServiceRequest {
	s.ServiceId = &v
	return s
}

func (s *RescaleDeviceServiceRequest) SetTimeout(v int64) *RescaleDeviceServiceRequest {
	s.Timeout = &v
	return s
}

type RescaleDeviceServiceResponseBody struct {
	// The IDs of the devices.
	DeviceIds []*string `json:"DeviceIds,omitempty" xml:"DeviceIds,omitempty" type:"Repeated"`
	// The ID of the order.
	//
	// example:
	//
	// b3b5bb9a-4e0b-4cac-8ebf-e5e015726723
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 3F3F3570-E721-53F6-853F-37B7725AC6CB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The key properties of the device.
	ResourceDetailInfos []*RescaleDeviceServiceResponseBodyResourceDetailInfos `json:"ResourceDetailInfos,omitempty" xml:"ResourceDetailInfos,omitempty" type:"Repeated"`
}

func (s RescaleDeviceServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RescaleDeviceServiceResponseBody) GoString() string {
	return s.String()
}

func (s *RescaleDeviceServiceResponseBody) SetDeviceIds(v []*string) *RescaleDeviceServiceResponseBody {
	s.DeviceIds = v
	return s
}

func (s *RescaleDeviceServiceResponseBody) SetOrderId(v string) *RescaleDeviceServiceResponseBody {
	s.OrderId = &v
	return s
}

func (s *RescaleDeviceServiceResponseBody) SetRequestId(v string) *RescaleDeviceServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *RescaleDeviceServiceResponseBody) SetResourceDetailInfos(v []*RescaleDeviceServiceResponseBodyResourceDetailInfos) *RescaleDeviceServiceResponseBody {
	s.ResourceDetailInfos = v
	return s
}

type RescaleDeviceServiceResponseBodyResourceDetailInfos struct {
	// The ID of the device.
	//
	// example:
	//
	// h-uf6009zoa6hdbjyqxcn1
	ID *string `json:"ID,omitempty" xml:"ID,omitempty"`
	// The IP address of the device.
	//
	// example:
	//
	// 10.152.196.36
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// The Internet service provider (ISP) to which the device belongs.
	//
	// example:
	//
	// telecom
	ISP *string `json:"ISP,omitempty" xml:"ISP,omitempty"`
	// The media access control (MAC) address of the device.
	//
	// example:
	//
	// 24:0B:88:04:71:E0
	Mac *string `json:"Mac,omitempty" xml:"Mac,omitempty"`
	// The ID of the edge node to which the device belongs.
	//
	// example:
	//
	// cn-chongqing-1
	RegionID *string `json:"RegionID,omitempty" xml:"RegionID,omitempty"`
	// The name of the server on which the device is deployed.
	//
	// example:
	//
	// ens-nc2
	Server *string `json:"Server,omitempty" xml:"Server,omitempty"`
	// The status of the device.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the instance.
	//
	// example:
	//
	// ens.ac6.large
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s RescaleDeviceServiceResponseBodyResourceDetailInfos) String() string {
	return tea.Prettify(s)
}

func (s RescaleDeviceServiceResponseBodyResourceDetailInfos) GoString() string {
	return s.String()
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetID(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.ID = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetIP(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.IP = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetISP(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.ISP = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetMac(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.Mac = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetRegionID(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.RegionID = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetServer(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.Server = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetStatus(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.Status = &v
	return s
}

func (s *RescaleDeviceServiceResponseBodyResourceDetailInfos) SetType(v string) *RescaleDeviceServiceResponseBodyResourceDetailInfos {
	s.Type = &v
	return s
}

type RescaleDeviceServiceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RescaleDeviceServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RescaleDeviceServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s RescaleDeviceServiceResponse) GoString() string {
	return s.String()
}

func (s *RescaleDeviceServiceResponse) SetHeaders(v map[string]*string) *RescaleDeviceServiceResponse {
	s.Headers = v
	return s
}

func (s *RescaleDeviceServiceResponse) SetStatusCode(v int32) *RescaleDeviceServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *RescaleDeviceServiceResponse) SetBody(v *RescaleDeviceServiceResponseBody) *RescaleDeviceServiceResponse {
	s.Body = v
	return s
}

type ResetAICInstanceRequest struct {
	// The ID of the AIC instance.
	//
	// example:
	//
	// aic-instance****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the server.
	//
	// example:
	//
	// cas-instance****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
}

func (s ResetAICInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAICInstanceRequest) GoString() string {
	return s.String()
}

func (s *ResetAICInstanceRequest) SetInstanceId(v string) *ResetAICInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *ResetAICInstanceRequest) SetServerId(v string) *ResetAICInstanceRequest {
	s.ServerId = &v
	return s
}

type ResetAICInstanceResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetAICInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAICInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAICInstanceResponseBody) SetRequestId(v string) *ResetAICInstanceResponseBody {
	s.RequestId = &v
	return s
}

type ResetAICInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetAICInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetAICInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAICInstanceResponse) GoString() string {
	return s.String()
}

func (s *ResetAICInstanceResponse) SetHeaders(v map[string]*string) *ResetAICInstanceResponse {
	s.Headers = v
	return s
}

func (s *ResetAICInstanceResponse) SetStatusCode(v int32) *ResetAICInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAICInstanceResponse) SetBody(v *ResetAICInstanceResponseBody) *ResetAICInstanceResponse {
	s.Body = v
	return s
}

type ResetDiskRequest struct {
	// The ID of the disk that you want to roll back.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-bp199lyny9b3****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The ID of the snapshot that you want to use to roll back the disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// sp-bp199lyny9b3****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s ResetDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetDiskRequest) GoString() string {
	return s.String()
}

func (s *ResetDiskRequest) SetDiskId(v string) *ResetDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ResetDiskRequest) SetSnapshotId(v string) *ResetDiskRequest {
	s.SnapshotId = &v
	return s
}

type ResetDiskResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetDiskResponseBody) GoString() string {
	return s.String()
}

func (s *ResetDiskResponseBody) SetRequestId(v string) *ResetDiskResponseBody {
	s.RequestId = &v
	return s
}

type ResetDiskResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetDiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetDiskResponse) GoString() string {
	return s.String()
}

func (s *ResetDiskResponse) SetHeaders(v map[string]*string) *ResetDiskResponse {
	s.Headers = v
	return s
}

func (s *ResetDiskResponse) SetStatusCode(v int32) *ResetDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetDiskResponse) SetBody(v *ResetDiskResponseBody) *ResetDiskResponse {
	s.Body = v
	return s
}

type ResizeDiskRequest struct {
	// The ID of the disk that you want to resize.
	//
	// This parameter is required.
	//
	// example:
	//
	// d-5tzm9wnhzlhjzcbtxo465****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The size of the disk that you want to resize. Unit: GiB.
	//
	// This parameter is required.
	//
	// example:
	//
	// 100
	NewSize *string `json:"NewSize,omitempty" xml:"NewSize,omitempty"`
}

func (s ResizeDiskRequest) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskRequest) GoString() string {
	return s.String()
}

func (s *ResizeDiskRequest) SetDiskId(v string) *ResizeDiskRequest {
	s.DiskId = &v
	return s
}

func (s *ResizeDiskRequest) SetNewSize(v string) *ResizeDiskRequest {
	s.NewSize = &v
	return s
}

type ResizeDiskResponseBody struct {
	// The order ID.
	//
	// example:
	//
	// 21522202681****
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 689412F2-8402-181E-8C87-1EF62331DCC4
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResizeDiskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskResponseBody) GoString() string {
	return s.String()
}

func (s *ResizeDiskResponseBody) SetOrderId(v string) *ResizeDiskResponseBody {
	s.OrderId = &v
	return s
}

func (s *ResizeDiskResponseBody) SetRequestId(v string) *ResizeDiskResponseBody {
	s.RequestId = &v
	return s
}

type ResizeDiskResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResizeDiskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResizeDiskResponse) String() string {
	return tea.Prettify(s)
}

func (s ResizeDiskResponse) GoString() string {
	return s.String()
}

func (s *ResizeDiskResponse) SetHeaders(v map[string]*string) *ResizeDiskResponse {
	s.Headers = v
	return s
}

func (s *ResizeDiskResponse) SetStatusCode(v int32) *ResizeDiskResponse {
	s.StatusCode = &v
	return s
}

func (s *ResizeDiskResponse) SetBody(v *ResizeDiskResponseBody) *ResizeDiskResponse {
	s.Body = v
	return s
}

type RevokeSecurityGroupRequest struct {
	// The transport layer protocol. The value of this parameter is case-sensitive. Valid values:
	//
	// 	- tcp
	//
	// 	- udp
	//
	// 	- icmp
	//
	// 	- gre
	//
	// 	- all: all protocols.
	//
	// This parameter is required.
	//
	// example:
	//
	// all
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The authorization policy. Valid values:
	//
	// 	- accept: allows access. This is the default value.
	//
	// 	- drop: denies access and does not return responses.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The range of destination ports that correspond to the transport layer protocol for the security group rule. Valid values:
	//
	// 	- When the IpProtocol parameter is set to tcp or udp, the port number range is **1*	- to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
	//
	// 	- When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.
	//
	// This parameter is required.
	//
	// example:
	//
	// 22/22
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of the security group rule. Valid values: **1*	- to **100**. Default value: **1**.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp67acfmxazb4p****
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The source CIDR block. CIDR blocks and IPv4 addresses are supported. Default value: 0.0.XX.XX/0.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10.0.XX.XX/8
	SourceCidrIp *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	// The range of source ports that correspond to the transport layer protocol for the security group rule. Valid values:
	//
	// 	- When the IpProtocol parameter is set to tcp or udp, the port number range is **1*	- to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
	//
	// 	- When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.
	//
	// example:
	//
	// 22/22
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s RevokeSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupRequest) SetIpProtocol(v string) *RevokeSecurityGroupRequest {
	s.IpProtocol = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPolicy(v string) *RevokeSecurityGroupRequest {
	s.Policy = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPortRange(v string) *RevokeSecurityGroupRequest {
	s.PortRange = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetPriority(v int32) *RevokeSecurityGroupRequest {
	s.Priority = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSecurityGroupId(v string) *RevokeSecurityGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourceCidrIp(v string) *RevokeSecurityGroupRequest {
	s.SourceCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupRequest) SetSourcePortRange(v string) *RevokeSecurityGroupRequest {
	s.SourcePortRange = &v
	return s
}

type RevokeSecurityGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupResponseBody) SetRequestId(v string) *RevokeSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type RevokeSecurityGroupResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RevokeSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RevokeSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupResponse) SetHeaders(v map[string]*string) *RevokeSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *RevokeSecurityGroupResponse) SetStatusCode(v int32) *RevokeSecurityGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokeSecurityGroupResponse) SetBody(v *RevokeSecurityGroupResponseBody) *RevokeSecurityGroupResponse {
	s.Body = v
	return s
}

type RevokeSecurityGroupEgressRequest struct {
	// The destination IP addresses. CIDR blocks and IPv4 addresses are supported.
	//
	// By default, this parameter is empty.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10.0.0.0/8
	DestCidrIp *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	// The transport layer protocol. The value of this parameter is case-sensitive. Valid values:
	//
	// 	- tcp
	//
	// 	- udp
	//
	// 	- icmp
	//
	// 	- gre
	//
	// 	- all: All protocols are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// all
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The action of the security group rule. Valid values:
	//
	// 	- **accept**: allows access.
	//
	// 	- **drop**: denies access and returns no responses.
	//
	// Default value: **accept**.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The range of destination ports that correspond to the transport layer protocol for the security group rule. Valid values:
	//
	// 	- If you set the IpProtocol parameter to tcp or udp, the port number ranges from **1*	- to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
	//
	// 	- When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.
	//
	// This parameter is required.
	//
	// example:
	//
	// 22/22
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of the security group rule. Valid values: **1*	- to **100**. A smaller value indicates a higher priority.
	//
	// Default value: **1**.
	//
	// example:
	//
	// 1
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The ID of the security group.
	//
	// This parameter is required.
	//
	// example:
	//
	// sg-bp67acfmxazb4ph***
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	// The range of port numbers that correspond to the transport layer protocol for the source security group. Valid values:
	//
	// 	- If you set the IpProtocol parameter to tcp or udp, the port number ranges from **1*	- to **65535**. The start port number and the end port number are separated by a forward slash (/). Correct example: **1/200**. Incorrect example: **200/1**.
	//
	// 	- When the IpProtocol parameter is set to icmp, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to gre, the port number range is **-1/-1**, which indicates all ports.
	//
	// 	- When the IpProtocol parameter is set to all, the port number range is **-1/-1**, which indicates all ports.
	//
	// example:
	//
	// 22/22
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s RevokeSecurityGroupEgressRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressRequest) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressRequest) SetDestCidrIp(v string) *RevokeSecurityGroupEgressRequest {
	s.DestCidrIp = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetIpProtocol(v string) *RevokeSecurityGroupEgressRequest {
	s.IpProtocol = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPolicy(v string) *RevokeSecurityGroupEgressRequest {
	s.Policy = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPortRange(v string) *RevokeSecurityGroupEgressRequest {
	s.PortRange = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetPriority(v int32) *RevokeSecurityGroupEgressRequest {
	s.Priority = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetSecurityGroupId(v string) *RevokeSecurityGroupEgressRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *RevokeSecurityGroupEgressRequest) SetSourcePortRange(v string) *RevokeSecurityGroupEgressRequest {
	s.SourcePortRange = &v
	return s
}

type RevokeSecurityGroupEgressResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeSecurityGroupEgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressResponseBody) SetRequestId(v string) *RevokeSecurityGroupEgressResponseBody {
	s.RequestId = &v
	return s
}

type RevokeSecurityGroupEgressResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RevokeSecurityGroupEgressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RevokeSecurityGroupEgressResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeSecurityGroupEgressResponse) GoString() string {
	return s.String()
}

func (s *RevokeSecurityGroupEgressResponse) SetHeaders(v map[string]*string) *RevokeSecurityGroupEgressResponse {
	s.Headers = v
	return s
}

func (s *RevokeSecurityGroupEgressResponse) SetStatusCode(v int32) *RevokeSecurityGroupEgressResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokeSecurityGroupEgressResponse) SetBody(v *RevokeSecurityGroupEgressResponseBody) *RevokeSecurityGroupEgressResponse {
	s.Body = v
	return s
}

type RollbackApplicationRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 474bdef0-d149-4695-abfb-52912d91****
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The current version number.
	//
	// This parameter is required.
	//
	// example:
	//
	// v2-1
	FromAppVersion *string `json:"FromAppVersion,omitempty" xml:"FromAppVersion,omitempty"`
	// The timeout period of the asynchronous rollback operation. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 1800
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The target version number. By default, the system automatically rolls back the container version to the previous version.
	//
	// example:
	//
	// v2
	ToAppVersion *string `json:"ToAppVersion,omitempty" xml:"ToAppVersion,omitempty"`
}

func (s RollbackApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationRequest) GoString() string {
	return s.String()
}

func (s *RollbackApplicationRequest) SetAppId(v string) *RollbackApplicationRequest {
	s.AppId = &v
	return s
}

func (s *RollbackApplicationRequest) SetFromAppVersion(v string) *RollbackApplicationRequest {
	s.FromAppVersion = &v
	return s
}

func (s *RollbackApplicationRequest) SetTimeout(v int32) *RollbackApplicationRequest {
	s.Timeout = &v
	return s
}

func (s *RollbackApplicationRequest) SetToAppVersion(v string) *RollbackApplicationRequest {
	s.ToAppVersion = &v
	return s
}

type RollbackApplicationResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RollbackApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponseBody) SetRequestId(v string) *RollbackApplicationResponseBody {
	s.RequestId = &v
	return s
}

type RollbackApplicationResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RollbackApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RollbackApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponse) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponse) SetHeaders(v map[string]*string) *RollbackApplicationResponse {
	s.Headers = v
	return s
}

func (s *RollbackApplicationResponse) SetStatusCode(v int32) *RollbackApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *RollbackApplicationResponse) SetBody(v *RollbackApplicationResponseBody) *RollbackApplicationResponse {
	s.Body = v
	return s
}

type RunInstancesRequest struct {
	// The number of instances that you want to create. Valid values: 1 to 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Amount *int64 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The time when to automatically release the pay-as-you-go instance. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in Coordinated Universal Time (UTC).
	//
	// 	- If the value of `ss` is not `00`, the start time is automatically rounded down to the nearest minute based on the value of `mm`.
	//
	// 	- The specified time must be at least one hour later than the current time.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2023-06-28T14:38:52Z
	AutoReleaseTime *string `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	// Specifies whether to enable auto-renewal for the premium bandwidth plan. Examples:
	//
	// 	- **true**.
	//
	// 	- **false*	- (default).
	//
	// >  This parameter is not available when InstanceChargeType is set to PostPaid.
	//
	// example:
	//
	// true
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// Specifies whether to use coupons. Default value: true.
	//
	// example:
	//
	// true
	AutoUseCoupon *string `json:"AutoUseCoupon,omitempty" xml:"AutoUseCoupon,omitempty"`
	// The billing cycle of computing resources of the instance. Only pay-as-you-go instances are supported. Valid values:
	//
	// 	- **Day**.
	//
	// 	- **Month**.
	//
	// example:
	//
	// Day
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The Internet service provider (ISP).
	//
	// >  This parameter is not available if ScheduleAreaLevel is set to Region and is required if ScheduleAreaLevel is set to other values.
	//
	// example:
	//
	// telecom
	Carrier *string `json:"Carrier,omitempty" xml:"Carrier,omitempty"`
	// The specifications of data disks.
	DataDisk []*RunInstancesRequestDataDisk `json:"DataDisk,omitempty" xml:"DataDisk,omitempty" type:"Repeated"`
	// The ID of the node.
	//
	// >  This parameter is required if ScheduleAreaLevel is set to Region and is not available if ScheduleAreaLevel is set to other values.
	//
	// example:
	//
	// cn-foshan-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the host.
	//
	// example:
	//
	// test-HostName
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the image. For ARM PCB-based server instances, leave this parameter empty. For other instances, this parameter is required.
	//
	// example:
	//
	// m-5si16wo6simkt267p8b7hcmy3
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The billing policy of the instance. Valid values:
	//
	// 	- **instance**: Bills are generated based on instances.
	//
	// 	- If you do not specify this parameter, bills are generated based on users.
	//
	// example:
	//
	// instance
	InstanceChargeStrategy *string `json:"InstanceChargeStrategy,omitempty" xml:"InstanceChargeStrategy,omitempty"`
	// The billing method of the instance. Examples:
	//
	// 	- **PrePaid**: subscription.
	//
	// 	- **PostPaid**: pay-as-you-go.
	//
	// This parameter is required.
	//
	// example:
	//
	// PostPaid
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
	//
	// The default value of this parameter is the value of the InstanceId parameter.
	//
	// example:
	//
	// TestName
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The instance type.
	//
	// This parameter is required.
	//
	// example:
	//
	// ens.sn1.small
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The bandwidth billing method. Valid values:
	//
	// 	- **BandwidthByDay**: pay by daily peak bandwidth
	//
	// 	- **95BandwidthByMonth**: pay by monthly 95th percentile bandwidth
	//
	// >  This parameter is required if you purchase an ENS instance for the first time. The value that you specified is used as the default value for subsequent purchases.
	//
	// example:
	//
	// BandwidthByDay
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The maximum public bandwidth. If the value of this parameter is greater than 0, a public IP address is assigned to the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	InternetMaxBandwidthOut *int64 `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	// The type of the IP address. Valid values:
	//
	// 	- **ipv4*	- (default).
	//
	// 	- **ipv6**.
	//
	// 	- **ipv4Andipv6*	- (single stack).
	//
	// 	- **ipv4Withipv6*	- (dual stack).
	//
	// example:
	//
	// ipv4
	IpType *string `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// The name of the key pair.
	//
	// >  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.
	//
	// example:
	//
	// wx2-jumpserver
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The code of the region.
	//
	// >  This parameter is not available if ScheduleAreaLevel is set to Region and is required if ScheduleAreaLevel is set to other values.
	//
	// example:
	//
	// 350000
	NetDistrictCode *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	// The ID of the network.
	//
	// >  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs.
	//
	// example:
	//
	// net-id
	NetWorkId *string `json:"NetWorkId,omitempty" xml:"NetWorkId,omitempty"`
	// The password that is used to connect to the instance.
	//
	// >  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.
	//
	// example:
	//
	// testPassword
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Specifies whether to use the preset password of the image. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.
	//
	// example:
	//
	// false
	PasswordInherit *bool `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	// The unit of the subscription period.
	//
	// 	- If **PeriodUnit*	- is set to **Day**, **Period*	- can only be set to **3**.
	//
	// 	- If **PeriodUnit*	- is **Month**, **Period*	- can be set to **1 to 9*	- or **12**.
	//
	// example:
	//
	// 1-9,12
	Period *int64 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription period. Valid values:
	//
	// 	- **Month*	- (default).
	//
	// 	- **Day**.
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The private IP address.
	//
	// >  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs. If you specify a private IP address, the number of instances must be 1. The private IP address takes effect only when the private IP address and the vSwitch ID are not empty.
	//
	// example:
	//
	// 10.0.0.120
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	// Specifies whether to enable public IP address identification. Valid values: true and false. Default value: false.
	//
	// example:
	//
	// true
	PublicIpIdentification *bool `json:"PublicIpIdentification,omitempty" xml:"PublicIpIdentification,omitempty"`
	// The scheduling level. This parameter specifies area-level scheduling or node-level scheduling. Valid values:
	//
	// 	- **Big**: greater area
	//
	// 	- **Middle**: province
	//
	// 	- **Small**: city
	//
	// 	- **Region**: node
	//
	// This parameter is required.
	//
	// example:
	//
	// Region
	ScheduleAreaLevel *string `json:"ScheduleAreaLevel,omitempty" xml:"ScheduleAreaLevel,omitempty"`
	// The scheduling price policy. Examples:
	//
	// 	- **PriceHighPriority**: The high price prevails.
	//
	// 	- **PriceLowPriority**: The low price prevails.
	//
	// example:
	//
	// PriceHighPriority
	SchedulingPriceStrategy *string `json:"SchedulingPriceStrategy,omitempty" xml:"SchedulingPriceStrategy,omitempty"`
	// The scheduling policy of the taint. Valid values:
	//
	// 	- **Concentrate**
	//
	// 	- **Disperse**
	//
	// >  If ScheduleAreaLevel is set to Region, set this parameter to **Concentrate**. If ScheduleAreaLevel is set to other values, set this parameter to Concentrate or Disperse based on your business requirements.
	//
	// example:
	//
	// concentrate
	SchedulingStrategy *string `json:"SchedulingStrategy,omitempty" xml:"SchedulingStrategy,omitempty"`
	// The ID of security group.
	//
	// example:
	//
	// sg-test
	SecurityId *string `json:"SecurityId,omitempty" xml:"SecurityId,omitempty"`
	// The protection period of the preemptible instance. Unit: hours. Default value: 1. Valid values:
	//
	// 	- 1: After a preemptible instance is created, Alibaba Cloud ensures that the instance is not automatically released within 1 hour. After the 1-hour protection period ends, the system compares the bid price with the market price and checks the resource inventory to determine whether to retain or release the instance.
	//
	// 	- 0: After a preemptible instance is created, Alibaba Cloud does not ensure that the instance runs for 1 hour. The system compares the bid price with the market price and checks the resource inventory to determine whether to retain or release the instance.
	//
	// Alibaba Cloud sends an ECS system event to notify you 5 minutes before the instance is released. Preemptible instances are billed by second. We recommend that you specify an appropriate protection period based on your business requirements.
	//
	// example:
	//
	// 2
	SpotDuration *int32 `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	// The bidding policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Valid values:
	//
	// 	- NoSpot: The elastic container instances are pay-as-you-go instances.
	//
	// 	- SpotAsPriceGo: The instance is a preemptible instance for which the market price at the time of purchase is automatically used as the bidding price.
	//
	// Default value: NoSpot.
	//
	// example:
	//
	// SpotAsPriceGo
	SpotStrategy *string `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	// The specification of the system disk.
	SystemDisk *RunInstancesRequestSystemDisk `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty" type:"Struct"`
	// The tags.
	Tag []*RunInstancesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// Specifies whether to append sequential suffixes to the hostname specified by the **HostName*	- parameter and to the instance name specified by the **InstanceName*	- parameter. The sequential suffixes range from 001 to 999.
	//
	// example:
	//
	// True
	UniqueSuffix *bool `json:"UniqueSuffix,omitempty" xml:"UniqueSuffix,omitempty"`
	// The custom data. The maximum data size is 16 KB. You can specify **UserData**. **UserData*	- must be Base64-encoded.
	//
	// example:
	//
	// ZWtest
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The ID of the vSwitch.
	//
	// >  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs.
	//
	// example:
	//
	// vsw-5sagnw7m613oulalkd10nv0ob
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s RunInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequest) GoString() string {
	return s.String()
}

func (s *RunInstancesRequest) SetAmount(v int64) *RunInstancesRequest {
	s.Amount = &v
	return s
}

func (s *RunInstancesRequest) SetAutoReleaseTime(v string) *RunInstancesRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *RunInstancesRequest) SetAutoRenew(v bool) *RunInstancesRequest {
	s.AutoRenew = &v
	return s
}

func (s *RunInstancesRequest) SetAutoUseCoupon(v string) *RunInstancesRequest {
	s.AutoUseCoupon = &v
	return s
}

func (s *RunInstancesRequest) SetBillingCycle(v string) *RunInstancesRequest {
	s.BillingCycle = &v
	return s
}

func (s *RunInstancesRequest) SetCarrier(v string) *RunInstancesRequest {
	s.Carrier = &v
	return s
}

func (s *RunInstancesRequest) SetDataDisk(v []*RunInstancesRequestDataDisk) *RunInstancesRequest {
	s.DataDisk = v
	return s
}

func (s *RunInstancesRequest) SetEnsRegionId(v string) *RunInstancesRequest {
	s.EnsRegionId = &v
	return s
}

func (s *RunInstancesRequest) SetHostName(v string) *RunInstancesRequest {
	s.HostName = &v
	return s
}

func (s *RunInstancesRequest) SetImageId(v string) *RunInstancesRequest {
	s.ImageId = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceChargeStrategy(v string) *RunInstancesRequest {
	s.InstanceChargeStrategy = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceChargeType(v string) *RunInstancesRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceName(v string) *RunInstancesRequest {
	s.InstanceName = &v
	return s
}

func (s *RunInstancesRequest) SetInstanceType(v string) *RunInstancesRequest {
	s.InstanceType = &v
	return s
}

func (s *RunInstancesRequest) SetInternetChargeType(v string) *RunInstancesRequest {
	s.InternetChargeType = &v
	return s
}

func (s *RunInstancesRequest) SetInternetMaxBandwidthOut(v int64) *RunInstancesRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *RunInstancesRequest) SetIpType(v string) *RunInstancesRequest {
	s.IpType = &v
	return s
}

func (s *RunInstancesRequest) SetKeyPairName(v string) *RunInstancesRequest {
	s.KeyPairName = &v
	return s
}

func (s *RunInstancesRequest) SetNetDistrictCode(v string) *RunInstancesRequest {
	s.NetDistrictCode = &v
	return s
}

func (s *RunInstancesRequest) SetNetWorkId(v string) *RunInstancesRequest {
	s.NetWorkId = &v
	return s
}

func (s *RunInstancesRequest) SetPassword(v string) *RunInstancesRequest {
	s.Password = &v
	return s
}

func (s *RunInstancesRequest) SetPasswordInherit(v bool) *RunInstancesRequest {
	s.PasswordInherit = &v
	return s
}

func (s *RunInstancesRequest) SetPeriod(v int64) *RunInstancesRequest {
	s.Period = &v
	return s
}

func (s *RunInstancesRequest) SetPeriodUnit(v string) *RunInstancesRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RunInstancesRequest) SetPrivateIpAddress(v string) *RunInstancesRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *RunInstancesRequest) SetPublicIpIdentification(v bool) *RunInstancesRequest {
	s.PublicIpIdentification = &v
	return s
}

func (s *RunInstancesRequest) SetScheduleAreaLevel(v string) *RunInstancesRequest {
	s.ScheduleAreaLevel = &v
	return s
}

func (s *RunInstancesRequest) SetSchedulingPriceStrategy(v string) *RunInstancesRequest {
	s.SchedulingPriceStrategy = &v
	return s
}

func (s *RunInstancesRequest) SetSchedulingStrategy(v string) *RunInstancesRequest {
	s.SchedulingStrategy = &v
	return s
}

func (s *RunInstancesRequest) SetSecurityId(v string) *RunInstancesRequest {
	s.SecurityId = &v
	return s
}

func (s *RunInstancesRequest) SetSpotDuration(v int32) *RunInstancesRequest {
	s.SpotDuration = &v
	return s
}

func (s *RunInstancesRequest) SetSpotStrategy(v string) *RunInstancesRequest {
	s.SpotStrategy = &v
	return s
}

func (s *RunInstancesRequest) SetSystemDisk(v *RunInstancesRequestSystemDisk) *RunInstancesRequest {
	s.SystemDisk = v
	return s
}

func (s *RunInstancesRequest) SetTag(v []*RunInstancesRequestTag) *RunInstancesRequest {
	s.Tag = v
	return s
}

func (s *RunInstancesRequest) SetUniqueSuffix(v bool) *RunInstancesRequest {
	s.UniqueSuffix = &v
	return s
}

func (s *RunInstancesRequest) SetUserData(v string) *RunInstancesRequest {
	s.UserData = &v
	return s
}

func (s *RunInstancesRequest) SetVSwitchId(v string) *RunInstancesRequest {
	s.VSwitchId = &v
	return s
}

type RunInstancesRequestDataDisk struct {
	// The category of the disk. Examples:
	//
	// 	- **cloud_efficiency**: ultra disk.
	//
	// 	- **cloud_ssd**: all-flash disk.
	//
	// 	- **local_hdd**: local HDD.
	//
	// 	- **local_ssd**: local SSD.
	//
	// example:
	//
	// cloud_efficiency
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// Specifies whether to encrypt the disk. Valid values:
	//
	// 	- true.
	//
	// 	- false (default).
	//
	// example:
	//
	// false
	Encrypted *bool `json:"Encrypted,omitempty" xml:"Encrypted,omitempty"`
	// The ID of the Key Management Service (KMS) key that is used for the disk. Valid values:
	//
	// 	- true.
	//
	// 	- false (default).
	//
	// >  If you set the Encrypted parameter to true, the default service key is used when the KMSKeyId parameter is empty.
	//
	// example:
	//
	// false
	KMSKeyId *string `json:"KMSKeyId,omitempty" xml:"KMSKeyId,omitempty"`
	// The size of a data disk. Unit: GiB.
	//
	// example:
	//
	// 20
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s RunInstancesRequestDataDisk) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestDataDisk) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestDataDisk) SetCategory(v string) *RunInstancesRequestDataDisk {
	s.Category = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetEncrypted(v bool) *RunInstancesRequestDataDisk {
	s.Encrypted = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetKMSKeyId(v string) *RunInstancesRequestDataDisk {
	s.KMSKeyId = &v
	return s
}

func (s *RunInstancesRequestDataDisk) SetSize(v int64) *RunInstancesRequestDataDisk {
	s.Size = &v
	return s
}

type RunInstancesRequestSystemDisk struct {
	// The category of the system disk.
	//
	// example:
	//
	// local_ssd
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The size of the system disk. Unit: GiB.
	//
	// example:
	//
	// 50
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s RunInstancesRequestSystemDisk) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestSystemDisk) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestSystemDisk) SetCategory(v string) *RunInstancesRequestSystemDisk {
	s.Category = &v
	return s
}

func (s *RunInstancesRequestSystemDisk) SetSize(v int64) *RunInstancesRequestSystemDisk {
	s.Size = &v
	return s
}

type RunInstancesRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// team
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// tagValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s RunInstancesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesRequestTag) GoString() string {
	return s.String()
}

func (s *RunInstancesRequestTag) SetKey(v string) *RunInstancesRequestTag {
	s.Key = &v
	return s
}

func (s *RunInstancesRequestTag) SetValue(v string) *RunInstancesRequestTag {
	s.Value = &v
	return s
}

type RunInstancesShrinkRequest struct {
	// The number of instances that you want to create. Valid values: 1 to 100.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Amount *int64 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The time when to automatically release the pay-as-you-go instance. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in Coordinated Universal Time (UTC).
	//
	// 	- If the value of `ss` is not `00`, the start time is automatically rounded down to the nearest minute based on the value of `mm`.
	//
	// 	- The specified time must be at least one hour later than the current time.
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2023-06-28T14:38:52Z
	AutoReleaseTime *string `json:"AutoReleaseTime,omitempty" xml:"AutoReleaseTime,omitempty"`
	// Specifies whether to enable auto-renewal for the premium bandwidth plan. Examples:
	//
	// 	- **true**.
	//
	// 	- **false*	- (default).
	//
	// >  This parameter is not available when InstanceChargeType is set to PostPaid.
	//
	// example:
	//
	// true
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// Specifies whether to use coupons. Default value: true.
	//
	// example:
	//
	// true
	AutoUseCoupon *string `json:"AutoUseCoupon,omitempty" xml:"AutoUseCoupon,omitempty"`
	// The billing cycle of computing resources of the instance. Only pay-as-you-go instances are supported. Valid values:
	//
	// 	- **Day**.
	//
	// 	- **Month**.
	//
	// example:
	//
	// Day
	BillingCycle *string `json:"BillingCycle,omitempty" xml:"BillingCycle,omitempty"`
	// The Internet service provider (ISP).
	//
	// >  This parameter is not available if ScheduleAreaLevel is set to Region and is required if ScheduleAreaLevel is set to other values.
	//
	// example:
	//
	// telecom
	Carrier *string `json:"Carrier,omitempty" xml:"Carrier,omitempty"`
	// The specifications of data disks.
	DataDiskShrink *string `json:"DataDisk,omitempty" xml:"DataDisk,omitempty"`
	// The ID of the node.
	//
	// >  This parameter is required if ScheduleAreaLevel is set to Region and is not available if ScheduleAreaLevel is set to other values.
	//
	// example:
	//
	// cn-foshan-telecom
	EnsRegionId *string `json:"EnsRegionId,omitempty" xml:"EnsRegionId,omitempty"`
	// The name of the host.
	//
	// example:
	//
	// test-HostName
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The ID of the image. For ARM PCB-based server instances, leave this parameter empty. For other instances, this parameter is required.
	//
	// example:
	//
	// m-5si16wo6simkt267p8b7hcmy3
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The billing policy of the instance. Valid values:
	//
	// 	- **instance**: Bills are generated based on instances.
	//
	// 	- If you do not specify this parameter, bills are generated based on users.
	//
	// example:
	//
	// instance
	InstanceChargeStrategy *string `json:"InstanceChargeStrategy,omitempty" xml:"InstanceChargeStrategy,omitempty"`
	// The billing method of the instance. Examples:
	//
	// 	- **PrePaid**: subscription.
	//
	// 	- **PostPaid**: pay-as-you-go.
	//
	// This parameter is required.
	//
	// example:
	//
	// PostPaid
	InstanceChargeType *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	// The name of the instance. The name must be 2 to 128 characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
	//
	// The default value of this parameter is the value of the InstanceId parameter.
	//
	// example:
	//
	// TestName
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The instance type.
	//
	// This parameter is required.
	//
	// example:
	//
	// ens.sn1.small
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The bandwidth billing method. Valid values:
	//
	// 	- **BandwidthByDay**: pay by daily peak bandwidth
	//
	// 	- **95BandwidthByMonth**: pay by monthly 95th percentile bandwidth
	//
	// >  This parameter is required if you purchase an ENS instance for the first time. The value that you specified is used as the default value for subsequent purchases.
	//
	// example:
	//
	// BandwidthByDay
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The maximum public bandwidth. If the value of this parameter is greater than 0, a public IP address is assigned to the instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	InternetMaxBandwidthOut *int64 `json:"InternetMaxBandwidthOut,omitempty" xml:"InternetMaxBandwidthOut,omitempty"`
	// The type of the IP address. Valid values:
	//
	// 	- **ipv4*	- (default).
	//
	// 	- **ipv6**.
	//
	// 	- **ipv4Andipv6*	- (single stack).
	//
	// 	- **ipv4Withipv6*	- (dual stack).
	//
	// example:
	//
	// ipv4
	IpType *string `json:"IpType,omitempty" xml:"IpType,omitempty"`
	// The name of the key pair.
	//
	// >  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.
	//
	// example:
	//
	// wx2-jumpserver
	KeyPairName *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	// The code of the region.
	//
	// >  This parameter is not available if ScheduleAreaLevel is set to Region and is required if ScheduleAreaLevel is set to other values.
	//
	// example:
	//
	// 350000
	NetDistrictCode *string `json:"NetDistrictCode,omitempty" xml:"NetDistrictCode,omitempty"`
	// The ID of the network.
	//
	// >  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs.
	//
	// example:
	//
	// net-id
	NetWorkId *string `json:"NetWorkId,omitempty" xml:"NetWorkId,omitempty"`
	// The password that is used to connect to the instance.
	//
	// >  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.
	//
	// example:
	//
	// testPassword
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// Specifies whether to use the preset password of the image. Valid values:
	//
	// 	- **true**
	//
	// 	- **false**
	//
	// >  You need to specify at least one of **Password**, **KeyPairName**, and **PasswordInherit**.
	//
	// example:
	//
	// false
	PasswordInherit *bool `json:"PasswordInherit,omitempty" xml:"PasswordInherit,omitempty"`
	// The unit of the subscription period.
	//
	// 	- If **PeriodUnit*	- is set to **Day**, **Period*	- can only be set to **3**.
	//
	// 	- If **PeriodUnit*	- is **Month**, **Period*	- can be set to **1 to 9*	- or **12**.
	//
	// example:
	//
	// 1-9,12
	Period *int64 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription period. Valid values:
	//
	// 	- **Month*	- (default).
	//
	// 	- **Day**.
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The private IP address.
	//
	// >  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs. If you specify a private IP address, the number of instances must be 1. The private IP address takes effect only when the private IP address and the vSwitch ID are not empty.
	//
	// example:
	//
	// 10.0.0.120
	PrivateIpAddress *string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty"`
	// Specifies whether to enable public IP address identification. Valid values: true and false. Default value: false.
	//
	// example:
	//
	// true
	PublicIpIdentification *bool `json:"PublicIpIdentification,omitempty" xml:"PublicIpIdentification,omitempty"`
	// The scheduling level. This parameter specifies area-level scheduling or node-level scheduling. Valid values:
	//
	// 	- **Big**: greater area
	//
	// 	- **Middle**: province
	//
	// 	- **Small**: city
	//
	// 	- **Region**: node
	//
	// This parameter is required.
	//
	// example:
	//
	// Region
	ScheduleAreaLevel *string `json:"ScheduleAreaLevel,omitempty" xml:"ScheduleAreaLevel,omitempty"`
	// The scheduling price policy. Examples:
	//
	// 	- **PriceHighPriority**: The high price prevails.
	//
	// 	- **PriceLowPriority**: The low price prevails.
	//
	// example:
	//
	// PriceHighPriority
	SchedulingPriceStrategy *string `json:"SchedulingPriceStrategy,omitempty" xml:"SchedulingPriceStrategy,omitempty"`
	// The scheduling policy of the taint. Valid values:
	//
	// 	- **Concentrate**
	//
	// 	- **Disperse**
	//
	// >  If ScheduleAreaLevel is set to Region, set this parameter to **Concentrate**. If ScheduleAreaLevel is set to other values, set this parameter to Concentrate or Disperse based on your business requirements.
	//
	// example:
	//
	// concentrate
	SchedulingStrategy *string `json:"SchedulingStrategy,omitempty" xml:"SchedulingStrategy,omitempty"`
	// The ID of security group.
	//
	// example:
	//
	// sg-test
	SecurityId *string `json:"SecurityId,omitempty" xml:"SecurityId,omitempty"`
	// The protection period of the preemptible instance. Unit: hours. Default value: 1. Valid values:
	//
	// 	- 1: After a preemptible instance is created, Alibaba Cloud ensures that the instance is not automatically released within 1 hour. After the 1-hour protection period ends, the system compares the bid price with the market price and checks the resource inventory to determine whether to retain or release the instance.
	//
	// 	- 0: After a preemptible instance is created, Alibaba Cloud does not ensure that the instance runs for 1 hour. The system compares the bid price with the market price and checks the resource inventory to determine whether to retain or release the instance.
	//
	// Alibaba Cloud sends an ECS system event to notify you 5 minutes before the instance is released. Preemptible instances are billed by second. We recommend that you specify an appropriate protection period based on your business requirements.
	//
	// example:
	//
	// 2
	SpotDuration *int32 `json:"SpotDuration,omitempty" xml:"SpotDuration,omitempty"`
	// The bidding policy for the pay-as-you-go instance. This parameter is valid only when the `InstanceChargeType` parameter is set to `PostPaid`. Valid values:
	//
	// 	- NoSpot: The elastic container instances are pay-as-you-go instances.
	//
	// 	- SpotAsPriceGo: The instance is a preemptible instance for which the market price at the time of purchase is automatically used as the bidding price.
	//
	// Default value: NoSpot.
	//
	// example:
	//
	// SpotAsPriceGo
	SpotStrategy *string `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	// The specification of the system disk.
	SystemDiskShrink *string `json:"SystemDisk,omitempty" xml:"SystemDisk,omitempty"`
	// The tags.
	Tag []*RunInstancesShrinkRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// Specifies whether to append sequential suffixes to the hostname specified by the **HostName*	- parameter and to the instance name specified by the **InstanceName*	- parameter. The sequential suffixes range from 001 to 999.
	//
	// example:
	//
	// True
	UniqueSuffix *bool `json:"UniqueSuffix,omitempty" xml:"UniqueSuffix,omitempty"`
	// The custom data. The maximum data size is 16 KB. You can specify **UserData**. **UserData*	- must be Base64-encoded.
	//
	// example:
	//
	// ZWtest
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// The ID of the vSwitch.
	//
	// >  This parameter is available only if ScheduleAreaLevel is set to Region and cannot be configured if ScheduleAreaLevel is set to other values. Otherwise, an error occurs.
	//
	// example:
	//
	// vsw-5sagnw7m613oulalkd10nv0ob
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s RunInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunInstancesShrinkRequest) SetAmount(v int64) *RunInstancesShrinkRequest {
	s.Amount = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetAutoReleaseTime(v string) *RunInstancesShrinkRequest {
	s.AutoReleaseTime = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetAutoRenew(v bool) *RunInstancesShrinkRequest {
	s.AutoRenew = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetAutoUseCoupon(v string) *RunInstancesShrinkRequest {
	s.AutoUseCoupon = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetBillingCycle(v string) *RunInstancesShrinkRequest {
	s.BillingCycle = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetCarrier(v string) *RunInstancesShrinkRequest {
	s.Carrier = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetDataDiskShrink(v string) *RunInstancesShrinkRequest {
	s.DataDiskShrink = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetEnsRegionId(v string) *RunInstancesShrinkRequest {
	s.EnsRegionId = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetHostName(v string) *RunInstancesShrinkRequest {
	s.HostName = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetImageId(v string) *RunInstancesShrinkRequest {
	s.ImageId = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInstanceChargeStrategy(v string) *RunInstancesShrinkRequest {
	s.InstanceChargeStrategy = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInstanceChargeType(v string) *RunInstancesShrinkRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInstanceName(v string) *RunInstancesShrinkRequest {
	s.InstanceName = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInstanceType(v string) *RunInstancesShrinkRequest {
	s.InstanceType = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInternetChargeType(v string) *RunInstancesShrinkRequest {
	s.InternetChargeType = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetInternetMaxBandwidthOut(v int64) *RunInstancesShrinkRequest {
	s.InternetMaxBandwidthOut = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetIpType(v string) *RunInstancesShrinkRequest {
	s.IpType = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetKeyPairName(v string) *RunInstancesShrinkRequest {
	s.KeyPairName = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetNetDistrictCode(v string) *RunInstancesShrinkRequest {
	s.NetDistrictCode = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetNetWorkId(v string) *RunInstancesShrinkRequest {
	s.NetWorkId = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPassword(v string) *RunInstancesShrinkRequest {
	s.Password = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPasswordInherit(v bool) *RunInstancesShrinkRequest {
	s.PasswordInherit = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPeriod(v int64) *RunInstancesShrinkRequest {
	s.Period = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPeriodUnit(v string) *RunInstancesShrinkRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPrivateIpAddress(v string) *RunInstancesShrinkRequest {
	s.PrivateIpAddress = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetPublicIpIdentification(v bool) *RunInstancesShrinkRequest {
	s.PublicIpIdentification = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetScheduleAreaLevel(v string) *RunInstancesShrinkRequest {
	s.ScheduleAreaLevel = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetSchedulingPriceStrategy(v string) *RunInstancesShrinkRequest {
	s.SchedulingPriceStrategy = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetSchedulingStrategy(v string) *RunInstancesShrinkRequest {
	s.SchedulingStrategy = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetSecurityId(v string) *RunInstancesShrinkRequest {
	s.SecurityId = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetSpotDuration(v int32) *RunInstancesShrinkRequest {
	s.SpotDuration = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetSpotStrategy(v string) *RunInstancesShrinkRequest {
	s.SpotStrategy = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetSystemDiskShrink(v string) *RunInstancesShrinkRequest {
	s.SystemDiskShrink = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetTag(v []*RunInstancesShrinkRequestTag) *RunInstancesShrinkRequest {
	s.Tag = v
	return s
}

func (s *RunInstancesShrinkRequest) SetUniqueSuffix(v bool) *RunInstancesShrinkRequest {
	s.UniqueSuffix = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetUserData(v string) *RunInstancesShrinkRequest {
	s.UserData = &v
	return s
}

func (s *RunInstancesShrinkRequest) SetVSwitchId(v string) *RunInstancesShrinkRequest {
	s.VSwitchId = &v
	return s
}

type RunInstancesShrinkRequestTag struct {
	// The key of the tag.
	//
	// example:
	//
	// team
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// tagValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s RunInstancesShrinkRequestTag) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesShrinkRequestTag) GoString() string {
	return s.String()
}

func (s *RunInstancesShrinkRequestTag) SetKey(v string) *RunInstancesShrinkRequestTag {
	s.Key = &v
	return s
}

func (s *RunInstancesShrinkRequestTag) SetValue(v string) *RunInstancesShrinkRequestTag {
	s.Value = &v
	return s
}

type RunInstancesResponseBody struct {
	// The IDs of instances.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The order ID.
	//
	// example:
	//
	// 213177957850399
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 91E4AFBE-4E35-5D2A-A886-BB477C9953D2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *RunInstancesResponseBody) SetInstanceIds(v []*string) *RunInstancesResponseBody {
	s.InstanceIds = v
	return s
}

func (s *RunInstancesResponseBody) SetOrderId(v string) *RunInstancesResponseBody {
	s.OrderId = &v
	return s
}

func (s *RunInstancesResponseBody) SetRequestId(v string) *RunInstancesResponseBody {
	s.RequestId = &v
	return s
}

type RunInstancesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s RunInstancesResponse) GoString() string {
	return s.String()
}

func (s *RunInstancesResponse) SetHeaders(v map[string]*string) *RunInstancesResponse {
	s.Headers = v
	return s
}

func (s *RunInstancesResponse) SetStatusCode(v int32) *RunInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *RunInstancesResponse) SetBody(v *RunInstancesResponseBody) *RunInstancesResponse {
	s.Body = v
	return s
}

type RunServiceScheduleRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// 474bdef0-d149-4695-abfb-52912d9143f0
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The IP address of the client.
	//
	// This parameter is required.
	//
	// example:
	//
	// 180.166.45.146
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The directory to which the data file is mounted. The value must be a full path and cannot be \\"/../\\". Example: ["/data/app01", "/data/user"]. Specify the relative path of the virtual device for this parameter. For example, specify /data for this parameter when the actual path of the virtual device is /data/{input path}.
	//
	// example:
	//
	// [\\"/data/app01\\", \\"/data/user\\"]
	Directorys *string `json:"Directorys,omitempty" xml:"Directorys,omitempty"`
	// The parameter does not take effect.
	//
	// example:
	//
	// android
	PodConfigName *string `json:"PodConfigName,omitempty" xml:"PodConfigName,omitempty"`
	// The maximum duration for locking an idle device. Unit: seconds. This parameter takes effect only if you set ServiceAction to PreSchedule. Default value: 300.
	//
	// example:
	//
	// 300
	PreLockedTimeout *int32 `json:"PreLockedTimeout,omitempty" xml:"PreLockedTimeout,omitempty"`
	// The scheduling policy of the device. The value must be a JSON string.
	//
	// example:
	//
	// {\\"selectLevel\\": \\"RegionId\\", \\"values\\": [\\"cn-chengdu-telecom-2\\"]  }
	ScheduleStrategy *string `json:"ScheduleStrategy,omitempty" xml:"ScheduleStrategy,omitempty"`
	// The scheduling operation. The value must be of the enumeration type. Valid values:
	//
	// Container scenario:
	//
	// 	- Start: selects and activates an idle cloud device.
	//
	// 	- Stop: stops and releases the cloud device.
	//
	// 	- Console: performs the scheduling operation when the device is in the scheduling state.
	//
	// Bare metal instance or virtual machine scenario:
	//
	// 	- PreSchedule: locks a virtual machine instance for scheduling.
	//
	// 	- Confirm: confirms the scheduling operation.
	//
	// 	- Cancel: cancels the scheduling operation.
	//
	// 	- Console: performs the scheduling operation when the device is in the scheduling state.
	//
	// This parameter is required.
	//
	// example:
	//
	// Start
	ServiceAction *string `json:"ServiceAction,omitempty" xml:"ServiceAction,omitempty"`
	// The service commands. The value must be a JSON string.
	//
	// example:
	//
	// [{\\"containerName\\": \\"android\\",       \\"commands\\":[\\"cat /tmp/token.json\\"]    },    {      \\"commands\\":[\\"ls -l /data/data\\"]    }]
	ServiceCommands *string `json:"ServiceCommands,omitempty" xml:"ServiceCommands,omitempty"`
	// The UUID of the device.
	//
	// This parameter is required.
	//
	// example:
	//
	// hdm_d4f1059a8e1afc0956bd71b497faa433
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s RunServiceScheduleRequest) String() string {
	return tea.Prettify(s)
}

func (s RunServiceScheduleRequest) GoString() string {
	return s.String()
}

func (s *RunServiceScheduleRequest) SetAppId(v string) *RunServiceScheduleRequest {
	s.AppId = &v
	return s
}

func (s *RunServiceScheduleRequest) SetClientIp(v string) *RunServiceScheduleRequest {
	s.ClientIp = &v
	return s
}

func (s *RunServiceScheduleRequest) SetDirectorys(v string) *RunServiceScheduleRequest {
	s.Directorys = &v
	return s
}

func (s *RunServiceScheduleRequest) SetPodConfigName(v string) *RunServiceScheduleRequest {
	s.PodConfigName = &v
	return s
}

func (s *RunServiceScheduleRequest) SetPreLockedTimeout(v int32) *RunServiceScheduleRequest {
	s.PreLockedTimeout = &v
	return s
}

func (s *RunServiceScheduleRequest) SetScheduleStrategy(v string) *RunServiceScheduleRequest {
	s.ScheduleStrategy = &v
	return s
}

func (s *RunServiceScheduleRequest) SetServiceAction(v string) *RunServiceScheduleRequest {
	s.ServiceAction = &v
	return s
}

func (s *RunServiceScheduleRequest) SetServiceCommands(v string) *RunServiceScheduleRequest {
	s.ServiceCommands = &v
	return s
}

func (s *RunServiceScheduleRequest) SetUuid(v string) *RunServiceScheduleRequest {
	s.Uuid = &v
	return s
}

type RunServiceScheduleResponseBody struct {
	// The execution results of the commands.
	CommandResults *RunServiceScheduleResponseBodyCommandResults `json:"CommandResults,omitempty" xml:"CommandResults,omitempty" type:"Struct"`
	// The index number of the scheduled virtual device (pod).
	//
	// example:
	//
	// 1
	Index *int32 `json:"Index,omitempty" xml:"Index,omitempty"`
	// The ID of the scheduled instance.
	//
	// example:
	//
	// i-5qvji3mom4ec013dyygmtxlkj
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The IP address of the scheduled instance.
	//
	// example:
	//
	// 172.16.246.11
	InstanceIp *string `json:"InstanceIp,omitempty" xml:"InstanceIp,omitempty"`
	// The start port of the scheduled instance.
	//
	// example:
	//
	// 1024
	InstancePort *int32 `json:"InstancePort,omitempty" xml:"InstancePort,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is repeated. This parameter is not returned if ServcieAction is set to Console.
	//
	// example:
	//
	// false
	RequestRepeated *string `json:"RequestRepeated,omitempty" xml:"RequestRepeated,omitempty"`
	// The TCP port range of the scheduled instance or container. The value is in the ${from}-$-{to} format. Example: 80-88.
	//
	// example:
	//
	// "80-88"
	TcpPorts *bool `json:"TcpPorts,omitempty" xml:"TcpPorts,omitempty"`
}

func (s RunServiceScheduleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunServiceScheduleResponseBody) GoString() string {
	return s.String()
}

func (s *RunServiceScheduleResponseBody) SetCommandResults(v *RunServiceScheduleResponseBodyCommandResults) *RunServiceScheduleResponseBody {
	s.CommandResults = v
	return s
}

func (s *RunServiceScheduleResponseBody) SetIndex(v int32) *RunServiceScheduleResponseBody {
	s.Index = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetInstanceId(v string) *RunServiceScheduleResponseBody {
	s.InstanceId = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetInstanceIp(v string) *RunServiceScheduleResponseBody {
	s.InstanceIp = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetInstancePort(v int32) *RunServiceScheduleResponseBody {
	s.InstancePort = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetRequestId(v string) *RunServiceScheduleResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetRequestRepeated(v string) *RunServiceScheduleResponseBody {
	s.RequestRepeated = &v
	return s
}

func (s *RunServiceScheduleResponseBody) SetTcpPorts(v bool) *RunServiceScheduleResponseBody {
	s.TcpPorts = &v
	return s
}

type RunServiceScheduleResponseBodyCommandResults struct {
	CommandResult []*RunServiceScheduleResponseBodyCommandResultsCommandResult `json:"CommandResult,omitempty" xml:"CommandResult,omitempty" type:"Repeated"`
}

func (s RunServiceScheduleResponseBodyCommandResults) String() string {
	return tea.Prettify(s)
}

func (s RunServiceScheduleResponseBodyCommandResults) GoString() string {
	return s.String()
}

func (s *RunServiceScheduleResponseBodyCommandResults) SetCommandResult(v []*RunServiceScheduleResponseBodyCommandResultsCommandResult) *RunServiceScheduleResponseBodyCommandResults {
	s.CommandResult = v
	return s
}

type RunServiceScheduleResponseBodyCommandResultsCommandResult struct {
	// The command.
	//
	// example:
	//
	// ls -l /data
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The name of the container.
	//
	// example:
	//
	// android
	ContainerName *string `json:"ContainerName,omitempty" xml:"ContainerName,omitempty"`
	// The execution result of the command.
	//
	// example:
	//
	// success
	ResultMsg *string `json:"ResultMsg,omitempty" xml:"ResultMsg,omitempty"`
}

func (s RunServiceScheduleResponseBodyCommandResultsCommandResult) String() string {
	return tea.Prettify(s)
}

func (s RunServiceScheduleResponseBodyCommandResultsCommandResult) GoString() string {
	return s.String()
}

func (s *RunServiceScheduleResponseBodyCommandResultsCommandResult) SetCommand(v string) *RunServiceScheduleResponseBodyCommandResultsCommandResult {
	s.Command = &v
	return s
}

func (s *RunServiceScheduleResponseBodyCommandResultsCommandResult) SetContainerName(v string) *RunServiceScheduleResponseBodyCommandResultsCommandResult {
	s.ContainerName = &v
	return s
}

func (s *RunServiceScheduleResponseBodyCommandResultsCommandResult) SetResultMsg(v string) *RunServiceScheduleResponseBodyCommandResultsCommandResult {
	s.ResultMsg = &v
	return s
}

type RunServiceScheduleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunServiceScheduleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunServiceScheduleResponse) String() string {
	return tea.Prettify(s)
}

func (s RunServiceScheduleResponse) GoString() string {
	return s.String()
}

func (s *RunServiceScheduleResponse) SetHeaders(v map[string]*string) *RunServiceScheduleResponse {
	s.Headers = v
	return s
}

func (s *RunServiceScheduleResponse) SetStatusCode(v int32) *RunServiceScheduleResponse {
	s.StatusCode = &v
	return s
}

func (s *RunServiceScheduleResponse) SetBody(v *RunServiceScheduleResponseBody) *RunServiceScheduleResponse {
	s.Body = v
	return s
}

type SaveSDGRequest struct {
	// The ID of the SDG to be saved.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s SaveSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveSDGRequest) GoString() string {
	return s.String()
}

func (s *SaveSDGRequest) SetSDGId(v string) *SaveSDGRequest {
	s.SDGId = &v
	return s
}

type SaveSDGResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SaveSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveSDGResponseBody) GoString() string {
	return s.String()
}

func (s *SaveSDGResponseBody) SetRequestId(v string) *SaveSDGResponseBody {
	s.RequestId = &v
	return s
}

type SaveSDGResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveSDGResponse) GoString() string {
	return s.String()
}

func (s *SaveSDGResponse) SetHeaders(v map[string]*string) *SaveSDGResponse {
	s.Headers = v
	return s
}

func (s *SaveSDGResponse) SetStatusCode(v int32) *SaveSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveSDGResponse) SetBody(v *SaveSDGResponseBody) *SaveSDGResponse {
	s.Body = v
	return s
}

type SetBackendServersRequest struct {
	// The list of backend servers that you want to add. You can modify at most 20 backend servers.
	//
	// This parameter is required.
	BackendServers []*SetBackendServersRequestBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Repeated"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5s7crik3yo3bp03gqrbp5****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s SetBackendServersRequest) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersRequest) GoString() string {
	return s.String()
}

func (s *SetBackendServersRequest) SetBackendServers(v []*SetBackendServersRequestBackendServers) *SetBackendServersRequest {
	s.BackendServers = v
	return s
}

func (s *SetBackendServersRequest) SetLoadBalancerId(v string) *SetBackendServersRequest {
	s.LoadBalancerId = &v
	return s
}

type SetBackendServersRequestBackendServers struct {
	// The ID of the instance that you want to use as the backend server.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-5ze0o05xccvbljtn****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	// The type of the backend server. Valid values:
	//
	// 	- **ens**: ENS instance.
	//
	// 	- **eni**: Elastic Network Interface (ENI) instance.
	//
	// example:
	//
	// ens
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The weight of the backend server. Default value: 100. Valid values: **0*	- to **100**.
	//
	// >  The value 0 indicates that requests are not forwarded to the backend server.
	//
	// This parameter is required.
	//
	// example:
	//
	// 20
	Weight *int32 `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s SetBackendServersRequestBackendServers) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersRequestBackendServers) GoString() string {
	return s.String()
}

func (s *SetBackendServersRequestBackendServers) SetServerId(v string) *SetBackendServersRequestBackendServers {
	s.ServerId = &v
	return s
}

func (s *SetBackendServersRequestBackendServers) SetType(v string) *SetBackendServersRequestBackendServers {
	s.Type = &v
	return s
}

func (s *SetBackendServersRequestBackendServers) SetWeight(v int32) *SetBackendServersRequestBackendServers {
	s.Weight = &v
	return s
}

type SetBackendServersShrinkRequest struct {
	// The list of backend servers that you want to add. You can modify at most 20 backend servers.
	//
	// This parameter is required.
	BackendServersShrink *string `json:"BackendServers,omitempty" xml:"BackendServers,omitempty"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5s7crik3yo3bp03gqrbp5****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s SetBackendServersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetBackendServersShrinkRequest) SetBackendServersShrink(v string) *SetBackendServersShrinkRequest {
	s.BackendServersShrink = &v
	return s
}

func (s *SetBackendServersShrinkRequest) SetLoadBalancerId(v string) *SetBackendServersShrinkRequest {
	s.LoadBalancerId = &v
	return s
}

type SetBackendServersResponseBody struct {
	// The backend servers.
	BackendServers *SetBackendServersResponseBodyBackendServers `json:"BackendServers,omitempty" xml:"BackendServers,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetBackendServersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersResponseBody) GoString() string {
	return s.String()
}

func (s *SetBackendServersResponseBody) SetBackendServers(v *SetBackendServersResponseBodyBackendServers) *SetBackendServersResponseBody {
	s.BackendServers = v
	return s
}

func (s *SetBackendServersResponseBody) SetRequestId(v string) *SetBackendServersResponseBody {
	s.RequestId = &v
	return s
}

type SetBackendServersResponseBodyBackendServers struct {
	BackendServer []*SetBackendServersResponseBodyBackendServersBackendServer `json:"BackendServer,omitempty" xml:"BackendServer,omitempty" type:"Repeated"`
}

func (s SetBackendServersResponseBodyBackendServers) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersResponseBodyBackendServers) GoString() string {
	return s.String()
}

func (s *SetBackendServersResponseBodyBackendServers) SetBackendServer(v []*SetBackendServersResponseBodyBackendServersBackendServer) *SetBackendServersResponseBodyBackendServers {
	s.BackendServer = v
	return s
}

type SetBackendServersResponseBodyBackendServersBackendServer struct {
	// The IP address of the backend server.
	//
	// example:
	//
	// 192.168.0.1
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The backend port that is used by the ELB instance.
	//
	// example:
	//
	// 0
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the instance that you want to use as the backend server.
	//
	// example:
	//
	// i-5uf6hj58zvml4ali8****
	ServerId *string `json:"ServerId,omitempty" xml:"ServerId,omitempty"`
	// The type of the backend server. Valid values:
	//
	// 	- **ens**: ENS instance.
	//
	// 	- **eni**: ENI instance.
	//
	// example:
	//
	// ens
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The weight of the backend server. Default value: 100. Valid values: **0*	- to **100**.
	//
	// >  The value 0 indicates that requests are not forwarded to the backend server.
	//
	// example:
	//
	// 100
	Weight *int32 `json:"Weight,omitempty" xml:"Weight,omitempty"`
}

func (s SetBackendServersResponseBodyBackendServersBackendServer) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersResponseBodyBackendServersBackendServer) GoString() string {
	return s.String()
}

func (s *SetBackendServersResponseBodyBackendServersBackendServer) SetIp(v string) *SetBackendServersResponseBodyBackendServersBackendServer {
	s.Ip = &v
	return s
}

func (s *SetBackendServersResponseBodyBackendServersBackendServer) SetPort(v int32) *SetBackendServersResponseBodyBackendServersBackendServer {
	s.Port = &v
	return s
}

func (s *SetBackendServersResponseBodyBackendServersBackendServer) SetServerId(v string) *SetBackendServersResponseBodyBackendServersBackendServer {
	s.ServerId = &v
	return s
}

func (s *SetBackendServersResponseBodyBackendServersBackendServer) SetType(v string) *SetBackendServersResponseBodyBackendServersBackendServer {
	s.Type = &v
	return s
}

func (s *SetBackendServersResponseBodyBackendServersBackendServer) SetWeight(v int32) *SetBackendServersResponseBodyBackendServersBackendServer {
	s.Weight = &v
	return s
}

type SetBackendServersResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetBackendServersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetBackendServersResponse) String() string {
	return tea.Prettify(s)
}

func (s SetBackendServersResponse) GoString() string {
	return s.String()
}

func (s *SetBackendServersResponse) SetHeaders(v map[string]*string) *SetBackendServersResponse {
	s.Headers = v
	return s
}

func (s *SetBackendServersResponse) SetStatusCode(v int32) *SetBackendServersResponse {
	s.StatusCode = &v
	return s
}

func (s *SetBackendServersResponse) SetBody(v *SetBackendServersResponseBody) *SetBackendServersResponse {
	s.Body = v
	return s
}

type SetLoadBalancerHTTPListenerAttributeRequest struct {
	// The name of the listener. The value must be **1*	- to **80*	- characters in length.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// example:
	//
	// http_8080
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the health check feature. Valid values:
	//
	// 	- **on**
	//
	// 	- **off**
	//
	// example:
	//
	// on
	HealthCheck *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 65500
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The domain name that is used for health checks.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// www.aliyundoc.com
	HealthCheckDomain *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	// The HTTP status code for a successful health check. Valid values:
	//
	// 	- **http_2xx*	- (default)
	//
	// 	- **http_3xx**.
	//
	// 	- **http_4xx**
	//
	// 	- **http_5xx**
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// http_2xx
	HealthCheckHttpCode *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Unit: seconds.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 2
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The HTTP request method for health checks. Valid values:
	//
	// 	- **head**
	//
	// 	- **get**
	//
	// >  This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// head
	HealthCheckMethod *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	// The timeout period of a health check response. If a backend server does not respond within the specified timeout period, the server fails to pass the health check.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// 	- If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.
	//
	// example:
	//
	// 5
	HealthCheckTimeout *int32 `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	// The URI used for health checks. The URI must be **1*	- to **80*	- characters in length.
	//
	// >
	//
	// 	- A URL must start with a forward slash (`/`) but cannot contain only forward slashes (`/`).
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// /checkpreload.htm
	HealthCheckURI *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 3
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The timeout period for idle connections. Default value: 15. Valid values: **1*	- to **60**. Unit: seconds.
	//
	// >  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, CLB establishes a new connection.
	//
	// example:
	//
	// 15
	IdleTimeout *int32 `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// The listener port whose attributes are to be modified. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8080
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5snthcyu1x10g7tywj7iu****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The timeout period of requests. Default value: 60. Valid values: **1*	- to **180**. Unit: seconds.
	//
	// >  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.
	//
	// example:
	//
	// 60
	RequestTimeout *int32 `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	// The scheduling algorithm. Valid values:
	//
	// 	- **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: Consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: Consistent hashing based on Quick UDP Internet Connection (QUIC) IDs. Requests that contain the same QUIC ID are scheduled to the same backend server.
	//
	// 	- **iqch**: Consistent hashing based on three specific bytes of iQUIC CID. Requests with the same second, third, and forth bytes are scheduled to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 3
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
	// Specifies whether to use the X-Forwarded-For header to obtain the real IP address of the client. Valid values:
	//
	// 	- **on*	- (default)
	//
	// 	- **off**
	//
	// example:
	//
	// on
	XForwardedFor *string `json:"XForwardedFor,omitempty" xml:"XForwardedFor,omitempty"`
}

func (s SetLoadBalancerHTTPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetDescription(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.Description = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheck(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheck = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckConnectPort(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckDomain(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckHttpCode(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckInterval(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckMethod(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckMethod = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckTimeout(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthCheckURI(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetHealthyThreshold(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetIdleTimeout(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.IdleTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetListenerPort(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetLoadBalancerId(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetRequestTimeout(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.RequestTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetScheduler(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.Scheduler = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetUnhealthyThreshold(v int32) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.UnhealthyThreshold = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeRequest) SetXForwardedFor(v string) *SetLoadBalancerHTTPListenerAttributeRequest {
	s.XForwardedFor = &v
	return s
}

type SetLoadBalancerHTTPListenerAttributeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLoadBalancerHTTPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPListenerAttributeResponseBody) SetRequestId(v string) *SetLoadBalancerHTTPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

type SetLoadBalancerHTTPListenerAttributeResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetLoadBalancerHTTPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetLoadBalancerHTTPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPListenerAttributeResponse) SetHeaders(v map[string]*string) *SetLoadBalancerHTTPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeResponse) SetStatusCode(v int32) *SetLoadBalancerHTTPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLoadBalancerHTTPListenerAttributeResponse) SetBody(v *SetLoadBalancerHTTPListenerAttributeResponseBody) *SetLoadBalancerHTTPListenerAttributeResponse {
	s.Body = v
	return s
}

type SetLoadBalancerHTTPSListenerAttributeRequest struct {
	// The name of the listener. The value must be **1*	- to **80*	- characters in length.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// example:
	//
	// Monitoring instructions
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable the health check feature. Valid values:
	//
	// 	- **on**
	//
	// 	- **off**
	//
	// example:
	//
	// on
	HealthCheck *string `json:"HealthCheck,omitempty" xml:"HealthCheck,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 7001
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The domain name that you want to use for health checks.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// www.example.com
	HealthCheckDomain *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	// The HTTP status code for a successful health check. Valid values:
	//
	// 	- **http_2xx*	- (default)
	//
	// 	- **http_3xx**.
	//
	// 	- **http_4xx**
	//
	// 	- **http_5xx**
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// http_2xx
	HealthCheckHttpCode *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Unit: seconds.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 2
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The health check method used in HTTP health checks. Valid values:
	//
	// 	- **head*	- (default): requests the head of the page.
	//
	// 	- **get**: requests the specified part of the page and returns the entity body.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// get
	HealthCheckMethod *string `json:"HealthCheckMethod,omitempty" xml:"HealthCheckMethod,omitempty"`
	// The timeout period of a health check response. If the backend ENS does not respond within the specified time, the health check fails.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// 	- If the value of the HealthCheckTimeout property is smaller than the value of the HealthCheckInterval property, the timeout period specified by the HealthCheckTimeout property becomes invalid and the value of the HealthCheckInterval property is used as the timeout period.
	//
	// example:
	//
	// 9
	HealthCheckTimeout *int32 `json:"HealthCheckTimeout,omitempty" xml:"HealthCheckTimeout,omitempty"`
	// The URI used for health checks. The URI must be **1*	- to **80*	- characters in length.
	//
	// >
	//
	// 	- A URL must start with a forward slash (`/`) but cannot contain only forward slashes (`/`).
	//
	// 	- This parameter takes effect only if the HealthCheck parameter is set to on.
	//
	// example:
	//
	// /checkpreload.htm
	HealthCheckURI *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 3
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The timeout period for idle connections. Default value: 15. Valid values: **1*	- to **60**. Unit: seconds.
	//
	// >  If no request is received within the specified timeout period, ELB closes the connection. When another request is received, ELB establishes a new connection.
	//
	// example:
	//
	// 15
	IdleTimeout *int32 `json:"IdleTimeout,omitempty" xml:"IdleTimeout,omitempty"`
	// The listener port whose attributes are to be modified. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10002
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5snthcyu1x10g7tywj7iu****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The timeout period of requests. Default value: 60. Valid values: **1*	- to **180**. Unit: seconds.
	//
	// >  If no response is received from the backend server within the specified timeout period, ELB returns an HTTP 504 error code to the client.
	//
	// example:
	//
	// 60
	RequestTimeout *int32 `json:"RequestTimeout,omitempty" xml:"RequestTimeout,omitempty"`
	// The routing algorithm. Valid values:
	//
	// 	- **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
	//
	// 	- **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The ID of the server certificate.
	//
	// example:
	//
	// 6027667
	ServerCertificateId *string `json:"ServerCertificateId,omitempty" xml:"ServerCertificateId,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**.
	//
	// >  This parameter takes effect only if you set HealthCheck to on.
	//
	// example:
	//
	// 3
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s SetLoadBalancerHTTPSListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPSListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetDescription(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.Description = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheck(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheck = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckConnectPort(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckDomain(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckHttpCode(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckInterval(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckMethod(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckMethod = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckTimeout(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthCheckURI(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetHealthyThreshold(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetIdleTimeout(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.IdleTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetListenerPort(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetLoadBalancerId(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetRequestTimeout(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.RequestTimeout = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetScheduler(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.Scheduler = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetServerCertificateId(v string) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.ServerCertificateId = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeRequest) SetUnhealthyThreshold(v int32) *SetLoadBalancerHTTPSListenerAttributeRequest {
	s.UnhealthyThreshold = &v
	return s
}

type SetLoadBalancerHTTPSListenerAttributeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLoadBalancerHTTPSListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPSListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPSListenerAttributeResponseBody) SetRequestId(v string) *SetLoadBalancerHTTPSListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

type SetLoadBalancerHTTPSListenerAttributeResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetLoadBalancerHTTPSListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetLoadBalancerHTTPSListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerHTTPSListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerHTTPSListenerAttributeResponse) SetHeaders(v map[string]*string) *SetLoadBalancerHTTPSListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeResponse) SetStatusCode(v int32) *SetLoadBalancerHTTPSListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLoadBalancerHTTPSListenerAttributeResponse) SetBody(v *SetLoadBalancerHTTPSListenerAttributeResponseBody) *SetLoadBalancerHTTPSListenerAttributeResponse {
	s.Body = v
	return s
}

type SetLoadBalancerStatusRequest struct {
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5t18quoohsrc3xkf86spmnu77
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The status of the listener after the modification. Valid values:
	//
	// 	- **Active**: The listener for the instance can forward the received traffic based on forwarding rules.
	//
	// 	- **InActive**: The listener for the instance does not forward the received traffic.
	//
	// This parameter is required.
	//
	// example:
	//
	// Active
	LoadBalancerStatus *string `json:"LoadBalancerStatus,omitempty" xml:"LoadBalancerStatus,omitempty"`
}

func (s SetLoadBalancerStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerStatusRequest) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerStatusRequest) SetLoadBalancerId(v string) *SetLoadBalancerStatusRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *SetLoadBalancerStatusRequest) SetLoadBalancerStatus(v string) *SetLoadBalancerStatusRequest {
	s.LoadBalancerStatus = &v
	return s
}

type SetLoadBalancerStatusResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLoadBalancerStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerStatusResponseBody) SetRequestId(v string) *SetLoadBalancerStatusResponseBody {
	s.RequestId = &v
	return s
}

type SetLoadBalancerStatusResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetLoadBalancerStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetLoadBalancerStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerStatusResponse) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerStatusResponse) SetHeaders(v map[string]*string) *SetLoadBalancerStatusResponse {
	s.Headers = v
	return s
}

func (s *SetLoadBalancerStatusResponse) SetStatusCode(v int32) *SetLoadBalancerStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLoadBalancerStatusResponse) SetBody(v *SetLoadBalancerStatusResponseBody) *SetLoadBalancerStatusResponse {
	s.Body = v
	return s
}

type SetLoadBalancerTCPListenerAttributeRequest struct {
	// The description of the listener. The description must be **1*	- to **80*	- characters in length.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// example:
	//
	// example
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable Elastic IP address (EIP) pass-through. Valid values:
	//
	// 	- **on**
	//
	// 	- **off*	- (default)
	//
	// example:
	//
	// on
	EipTransmit *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	// The timeout period of a connection. Valid values: **10*	- to **900**. Unit: seconds.
	//
	// example:
	//
	// 500
	EstablishedTimeout *int32 `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If you leave this parameter empty, the port specified by BackendServerPort is used for health checks.
	//
	// example:
	//
	// 8000
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The timeout period for a health check response. If the value of HealthCheckTimeout is smaller than the value of HealthCheckInterval, the timeout period specified by HealthCheckTimeout becomes invalid, and the value of HealthCheckInterval is used as the timeout period.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >  If the value of the HealthCheckConnectTimeout parameter is smaller than that of the HealthCheckInterval parameter, the timeout period specified by the HealthCheckConnectTimeout parameter is ignored and the period of time specified by the HealthCheckInterval parameter is used as the timeout period.
	//
	// example:
	//
	// 100
	HealthCheckConnectTimeout *int32 `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	// The domain name that you want to use for health checks.
	//
	// example:
	//
	// www.aliyundoc.com
	HealthCheckDomain *string `json:"HealthCheckDomain,omitempty" xml:"HealthCheckDomain,omitempty"`
	// The HTTP status code for a successful health check. Valid values:
	//
	// 	- **http_2xx*	- (default)
	//
	// 	- **http_3xx**.
	//
	// 	- **http_4xx**
	//
	// 	- **http_5xx**
	//
	// example:
	//
	// http_2xx
	HealthCheckHttpCode *string `json:"HealthCheckHttpCode,omitempty" xml:"HealthCheckHttpCode,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Unit: seconds.
	//
	// example:
	//
	// 5
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The type of health checks. Valid values:
	//
	// 	- **tcp*	- (default)
	//
	// 	- **http**
	//
	// example:
	//
	// tcp
	HealthCheckType *string `json:"HealthCheckType,omitempty" xml:"HealthCheckType,omitempty"`
	// The Uniform Resource Identifier (URI) that you want to use for health checks. The URI must be **1*	- to **80*	- characters in length.
	//
	// >  The URL must start with `/` and contain characters other than `/`.
	//
	// example:
	//
	// /aliyundoc/index.html
	HealthCheckURI *string `json:"HealthCheckURI,omitempty" xml:"HealthCheckURI,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**.
	//
	// example:
	//
	// 4
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The listener port whose attributes are to be modified. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5snthcyu1x10g7tywj7iu****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The timeout period of session persistence.
	//
	// 	- Default value: 0. If the default value is used, the system disables session persistence.
	//
	// 	- Valid values: **0*	- to **3600**.
	//
	// 	- Unit: seconds.
	//
	// example:
	//
	// 0
	PersistenceTimeout *int32 `json:"PersistenceTimeout,omitempty" xml:"PersistenceTimeout,omitempty"`
	// The routing algorithm. Valid values:
	//
	// 	- **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections to a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
	//
	// 	- **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**.
	//
	// example:
	//
	// 4
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s SetLoadBalancerTCPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerTCPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetDescription(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.Description = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetEipTransmit(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.EipTransmit = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetEstablishedTimeout(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.EstablishedTimeout = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckConnectPort(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckConnectTimeout(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckDomain(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckDomain = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckHttpCode(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckHttpCode = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckInterval(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckType(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckType = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthCheckURI(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthCheckURI = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetHealthyThreshold(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetListenerPort(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetLoadBalancerId(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetPersistenceTimeout(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.PersistenceTimeout = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetScheduler(v string) *SetLoadBalancerTCPListenerAttributeRequest {
	s.Scheduler = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeRequest) SetUnhealthyThreshold(v int32) *SetLoadBalancerTCPListenerAttributeRequest {
	s.UnhealthyThreshold = &v
	return s
}

type SetLoadBalancerTCPListenerAttributeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 06F00FBB-3D9E-4CCE-9D43-1A6946A75456
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLoadBalancerTCPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerTCPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerTCPListenerAttributeResponseBody) SetRequestId(v string) *SetLoadBalancerTCPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

type SetLoadBalancerTCPListenerAttributeResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetLoadBalancerTCPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetLoadBalancerTCPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerTCPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerTCPListenerAttributeResponse) SetHeaders(v map[string]*string) *SetLoadBalancerTCPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeResponse) SetStatusCode(v int32) *SetLoadBalancerTCPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLoadBalancerTCPListenerAttributeResponse) SetBody(v *SetLoadBalancerTCPListenerAttributeResponseBody) *SetLoadBalancerTCPListenerAttributeResponse {
	s.Body = v
	return s
}

type SetLoadBalancerUDPListenerAttributeRequest struct {
	// The name of the listener. The valuemust be **1*	- to **80*	- characters in length.
	//
	// >  The value cannot start with `http://` or `https://`.
	//
	// example:
	//
	// example
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable Elastic IP address (EIP) pass-through. Valid values:
	//
	// 	- **on**
	//
	// 	- **off*	- (default)
	//
	// example:
	//
	// on
	EipTransmit *string `json:"EipTransmit,omitempty" xml:"EipTransmit,omitempty"`
	// The timeout period of a connection. Valid values: **10*	- to **900**. Default value: **900**. Unit: seconds.
	//
	// example:
	//
	// 500
	EstablishedTimeout *int32 `json:"EstablishedTimeout,omitempty" xml:"EstablishedTimeout,omitempty"`
	// The port that is used for health checks. Valid values: **1*	- to **65535**. If you leave this parameter empty, the port specified for BackendServerPort is used for health checks.
	//
	// example:
	//
	// 8080
	HealthCheckConnectPort *int32 `json:"HealthCheckConnectPort,omitempty" xml:"HealthCheckConnectPort,omitempty"`
	// The timeout period of a health check response. If the backend ENS does not respond within the specified time, the health check fails.
	//
	// 	- Default value: 5.
	//
	// 	- Valid values: **1*	- to **300**.
	//
	// 	- Unit: seconds.
	//
	// >  If the value of the HealthCheckTimeout property is smaller than the value of the HealthCheckInterval property, the timeout period specified by the HealthCheckTimeout property becomes invalid and the value of the HealthCheckInterval property is used as the timeout period.
	//
	// example:
	//
	// 100
	HealthCheckConnectTimeout *int32 `json:"HealthCheckConnectTimeout,omitempty" xml:"HealthCheckConnectTimeout,omitempty"`
	// The response string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.
	//
	// example:
	//
	// ok
	HealthCheckExp *string `json:"HealthCheckExp,omitempty" xml:"HealthCheckExp,omitempty"`
	// The interval at which health checks are performed. Valid values: **1*	- to **50**. Unit: seconds.
	//
	// example:
	//
	// 5
	HealthCheckInterval *int32 `json:"HealthCheckInterval,omitempty" xml:"HealthCheckInterval,omitempty"`
	// The request string for UDP listener health checks. The string can be up to 64 characters in length and can contain only letters and digits.
	//
	// example:
	//
	// hello
	HealthCheckReq *string `json:"HealthCheckReq,omitempty" xml:"HealthCheckReq,omitempty"`
	// The number of consecutive successful health checks that must occur before an unhealthy and inaccessible backend server is declared healthy and accessible. Valid values: **2*	- to **10**.
	//
	// example:
	//
	// 4
	HealthyThreshold *int32 `json:"HealthyThreshold,omitempty" xml:"HealthyThreshold,omitempty"`
	// The listener port whose attributes are to be modified. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 80
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The ID of the Edge Load Balancer (ELB) instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5pzipr2fszqtl2xf64uy5****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
	// The routing algorithm. Valid values:
	//
	// 	- **wrr**: Backend servers with higher weights receive more requests than those with lower weights.
	//
	// 	- **wlc**: Requests are distributed based on the weight and load of each backend server. The load refers to the number of connections on a backend server. If two backend servers have the same weight, the backend server that has fewer connections receives more requests.
	//
	// 	- **rr**: Requests are distributed to backend servers in sequence.
	//
	// 	- **sch**: consistent hashing that is based on source IP addresses. Requests from the same source IP address are distributed to the same backend server.
	//
	// 	- **qch**: consistent hashing that is based on QUIC connection IDs. Requests that contain the same QUIC connection ID are distributed to the same backend server.
	//
	// 	- **iqch**: consistent hashing that is based on specific three bytes of the iQUIC CIDs. Requests whose second to fourth bytes are the same are distributed to the same backend server.
	//
	// example:
	//
	// wrr
	Scheduler *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	// The number of consecutive failed health checks that must occur before a healthy and accessible backend server is declared unhealthy and inaccessible. Valid values: **2*	- to **10**.
	//
	// example:
	//
	// 4
	UnhealthyThreshold *int32 `json:"UnhealthyThreshold,omitempty" xml:"UnhealthyThreshold,omitempty"`
}

func (s SetLoadBalancerUDPListenerAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerUDPListenerAttributeRequest) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetDescription(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.Description = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetEipTransmit(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.EipTransmit = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetEstablishedTimeout(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.EstablishedTimeout = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthCheckConnectPort(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthCheckConnectPort = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthCheckConnectTimeout(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthCheckConnectTimeout = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthCheckExp(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthCheckExp = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthCheckInterval(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthCheckInterval = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthCheckReq(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthCheckReq = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetHealthyThreshold(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.HealthyThreshold = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetListenerPort(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.ListenerPort = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetLoadBalancerId(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.LoadBalancerId = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetScheduler(v string) *SetLoadBalancerUDPListenerAttributeRequest {
	s.Scheduler = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeRequest) SetUnhealthyThreshold(v int32) *SetLoadBalancerUDPListenerAttributeRequest {
	s.UnhealthyThreshold = &v
	return s
}

type SetLoadBalancerUDPListenerAttributeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 06F00FBB-3D9E-4CCE-9D43-1A6946A75456
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetLoadBalancerUDPListenerAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerUDPListenerAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerUDPListenerAttributeResponseBody) SetRequestId(v string) *SetLoadBalancerUDPListenerAttributeResponseBody {
	s.RequestId = &v
	return s
}

type SetLoadBalancerUDPListenerAttributeResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetLoadBalancerUDPListenerAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetLoadBalancerUDPListenerAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s SetLoadBalancerUDPListenerAttributeResponse) GoString() string {
	return s.String()
}

func (s *SetLoadBalancerUDPListenerAttributeResponse) SetHeaders(v map[string]*string) *SetLoadBalancerUDPListenerAttributeResponse {
	s.Headers = v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeResponse) SetStatusCode(v int32) *SetLoadBalancerUDPListenerAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *SetLoadBalancerUDPListenerAttributeResponse) SetBody(v *SetLoadBalancerUDPListenerAttributeResponseBody) *SetLoadBalancerUDPListenerAttributeResponse {
	s.Body = v
	return s
}

type StartEpnInstanceRequest struct {
	// The ID of the EPN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// epn-****
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
}

func (s StartEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartEpnInstanceRequest) SetEPNInstanceId(v string) *StartEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

type StartEpnInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartEpnInstanceResponseBody) SetRequestId(v string) *StartEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StartEpnInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartEpnInstanceResponse) SetHeaders(v map[string]*string) *StartEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartEpnInstanceResponse) SetStatusCode(v int32) *StartEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartEpnInstanceResponse) SetBody(v *StartEpnInstanceResponseBody) *StartEpnInstanceResponse {
	s.Body = v
	return s
}

type StartInstanceRequest struct {
	// The ID of the instance. You can start only one instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-instance****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s StartInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartInstanceRequest) SetInstanceId(v string) *StartInstanceRequest {
	s.InstanceId = &v
	return s
}

type StartInstanceResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartInstanceResponseBody) SetCode(v int32) *StartInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *StartInstanceResponseBody) SetRequestId(v string) *StartInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StartInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartInstanceResponse) SetHeaders(v map[string]*string) *StartInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartInstanceResponse) SetStatusCode(v int32) *StartInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartInstanceResponse) SetBody(v *StartInstanceResponseBody) *StartInstanceResponse {
	s.Body = v
	return s
}

type StartInstancesRequest struct {
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s StartInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesRequest) GoString() string {
	return s.String()
}

func (s *StartInstancesRequest) SetInstanceIds(v []*string) *StartInstancesRequest {
	s.InstanceIds = v
	return s
}

type StartInstancesShrinkRequest struct {
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s StartInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *StartInstancesShrinkRequest) SetInstanceIdsShrink(v string) *StartInstancesShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

type StartInstancesResponseBody struct {
	InstanceResponses []*InstanceOperateResponse `json:"InstanceResponses,omitempty" xml:"InstanceResponses,omitempty" type:"Repeated"`
	RequestId         *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *StartInstancesResponseBody) SetInstanceResponses(v []*InstanceOperateResponse) *StartInstancesResponseBody {
	s.InstanceResponses = v
	return s
}

func (s *StartInstancesResponseBody) SetRequestId(v string) *StartInstancesResponseBody {
	s.RequestId = &v
	return s
}

type StartInstancesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s StartInstancesResponse) GoString() string {
	return s.String()
}

func (s *StartInstancesResponse) SetHeaders(v map[string]*string) *StartInstancesResponse {
	s.Headers = v
	return s
}

func (s *StartInstancesResponse) SetStatusCode(v int32) *StartInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *StartInstancesResponse) SetBody(v *StartInstancesResponseBody) *StartInstancesResponse {
	s.Body = v
	return s
}

type StartLoadBalancerListenerRequest struct {
	// The listener port to be enabled. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8080
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The frontend protocol that is used by the ELB instance. Valid values:
	//
	// 	- tcp
	//
	// 	- udp
	//
	// 	- http
	//
	// 	- https
	//
	// >  This parameter is required if the same port is used by listeners that use different protocols.
	//
	// example:
	//
	// tcp
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5saivuir6b1mupxjfbhmk****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s StartLoadBalancerListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s StartLoadBalancerListenerRequest) GoString() string {
	return s.String()
}

func (s *StartLoadBalancerListenerRequest) SetListenerPort(v int32) *StartLoadBalancerListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *StartLoadBalancerListenerRequest) SetListenerProtocol(v string) *StartLoadBalancerListenerRequest {
	s.ListenerProtocol = &v
	return s
}

func (s *StartLoadBalancerListenerRequest) SetLoadBalancerId(v string) *StartLoadBalancerListenerRequest {
	s.LoadBalancerId = &v
	return s
}

type StartLoadBalancerListenerResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartLoadBalancerListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartLoadBalancerListenerResponseBody) GoString() string {
	return s.String()
}

func (s *StartLoadBalancerListenerResponseBody) SetRequestId(v string) *StartLoadBalancerListenerResponseBody {
	s.RequestId = &v
	return s
}

type StartLoadBalancerListenerResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartLoadBalancerListenerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartLoadBalancerListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s StartLoadBalancerListenerResponse) GoString() string {
	return s.String()
}

func (s *StartLoadBalancerListenerResponse) SetHeaders(v map[string]*string) *StartLoadBalancerListenerResponse {
	s.Headers = v
	return s
}

func (s *StartLoadBalancerListenerResponse) SetStatusCode(v int32) *StartLoadBalancerListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *StartLoadBalancerListenerResponse) SetBody(v *StartLoadBalancerListenerResponseBody) *StartLoadBalancerListenerResponse {
	s.Body = v
	return s
}

type StartSnatIpForSnatEntryRequest struct {
	// The ID of the SNAT entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// snat-5tfi6f8gds82mjmlofeym****
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	// The EIP specified in the SNAT entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// 219.152.82.143
	SnatIp *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
}

func (s StartSnatIpForSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s StartSnatIpForSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *StartSnatIpForSnatEntryRequest) SetSnatEntryId(v string) *StartSnatIpForSnatEntryRequest {
	s.SnatEntryId = &v
	return s
}

func (s *StartSnatIpForSnatEntryRequest) SetSnatIp(v string) *StartSnatIpForSnatEntryRequest {
	s.SnatIp = &v
	return s
}

type StartSnatIpForSnatEntryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 85BBD491-CE05-5BDA-979E-843FE52B74CF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartSnatIpForSnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartSnatIpForSnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *StartSnatIpForSnatEntryResponseBody) SetRequestId(v string) *StartSnatIpForSnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type StartSnatIpForSnatEntryResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartSnatIpForSnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartSnatIpForSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s StartSnatIpForSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *StartSnatIpForSnatEntryResponse) SetHeaders(v map[string]*string) *StartSnatIpForSnatEntryResponse {
	s.Headers = v
	return s
}

func (s *StartSnatIpForSnatEntryResponse) SetStatusCode(v int32) *StartSnatIpForSnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *StartSnatIpForSnatEntryResponse) SetBody(v *StartSnatIpForSnatEntryResponseBody) *StartSnatIpForSnatEntryResponse {
	s.Body = v
	return s
}

type StopEpnInstanceRequest struct {
	// The ID of the EPN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// epn-20201014152822q2S9tQ
	EPNInstanceId *string `json:"EPNInstanceId,omitempty" xml:"EPNInstanceId,omitempty"`
}

func (s StopEpnInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopEpnInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopEpnInstanceRequest) SetEPNInstanceId(v string) *StopEpnInstanceRequest {
	s.EPNInstanceId = &v
	return s
}

type StopEpnInstanceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopEpnInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopEpnInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopEpnInstanceResponseBody) SetRequestId(v string) *StopEpnInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StopEpnInstanceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopEpnInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopEpnInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopEpnInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopEpnInstanceResponse) SetHeaders(v map[string]*string) *StopEpnInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopEpnInstanceResponse) SetStatusCode(v int32) *StopEpnInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StopEpnInstanceResponse) SetBody(v *StopEpnInstanceResponseBody) *StopEpnInstanceResponse {
	s.Body = v
	return s
}

type StopInstanceRequest struct {
	// Specifies whether to forcibly stop the servers.
	//
	// 	- **true**: forcibly stops the instance.
	//
	// 	- **false**: normally stops the servers. This is the default value.
	//
	// example:
	//
	// true
	ForceStop *string `json:"ForceStop,omitempty" xml:"ForceStop,omitempty"`
	// The ID of the instance that you want to stop. You can specify only one instance ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-instanceid****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s StopInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceRequest) GoString() string {
	return s.String()
}

func (s *StopInstanceRequest) SetForceStop(v string) *StopInstanceRequest {
	s.ForceStop = &v
	return s
}

func (s *StopInstanceRequest) SetInstanceId(v string) *StopInstanceRequest {
	s.InstanceId = &v
	return s
}

type StopInstanceResponseBody struct {
	// The returned service code. 0 indicates that the request was successful.
	//
	// example:
	//
	// 0
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StopInstanceResponseBody) SetCode(v int32) *StopInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *StopInstanceResponseBody) SetRequestId(v string) *StopInstanceResponseBody {
	s.RequestId = &v
	return s
}

type StopInstanceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInstanceResponse) GoString() string {
	return s.String()
}

func (s *StopInstanceResponse) SetHeaders(v map[string]*string) *StopInstanceResponse {
	s.Headers = v
	return s
}

func (s *StopInstanceResponse) SetStatusCode(v int32) *StopInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StopInstanceResponse) SetBody(v *StopInstanceResponseBody) *StopInstanceResponse {
	s.Body = v
	return s
}

type StopInstancesRequest struct {
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
}

func (s StopInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesRequest) GoString() string {
	return s.String()
}

func (s *StopInstancesRequest) SetInstanceIds(v []*string) *StopInstancesRequest {
	s.InstanceIds = v
	return s
}

type StopInstancesShrinkRequest struct {
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s StopInstancesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesShrinkRequest) GoString() string {
	return s.String()
}

func (s *StopInstancesShrinkRequest) SetInstanceIdsShrink(v string) *StopInstancesShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

type StopInstancesResponseBody struct {
	InstanceResponses []*InstanceOperateResponse `json:"InstanceResponses,omitempty" xml:"InstanceResponses,omitempty" type:"Repeated"`
	RequestId         *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *StopInstancesResponseBody) SetInstanceResponses(v []*InstanceOperateResponse) *StopInstancesResponseBody {
	s.InstanceResponses = v
	return s
}

func (s *StopInstancesResponseBody) SetRequestId(v string) *StopInstancesResponseBody {
	s.RequestId = &v
	return s
}

type StopInstancesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInstancesResponse) GoString() string {
	return s.String()
}

func (s *StopInstancesResponse) SetHeaders(v map[string]*string) *StopInstancesResponse {
	s.Headers = v
	return s
}

func (s *StopInstancesResponse) SetStatusCode(v int32) *StopInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *StopInstancesResponse) SetBody(v *StopInstancesResponseBody) *StopInstancesResponse {
	s.Body = v
	return s
}

type StopLoadBalancerListenerRequest struct {
	// The listener port that you want to disable. Valid values: **1*	- to **65535**.
	//
	// This parameter is required.
	//
	// example:
	//
	// 8080
	ListenerPort *int32 `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	// The frontend protocol that is used by the ELB instance.
	//
	// >  This parameter is required if the same port is used by listeners that use different protocols.
	//
	// example:
	//
	// tcp
	ListenerProtocol *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty"`
	// The ID of the ELB instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// lb-5sc1s9zrui8lpb8u7cl4f****
	LoadBalancerId *string `json:"LoadBalancerId,omitempty" xml:"LoadBalancerId,omitempty"`
}

func (s StopLoadBalancerListenerRequest) String() string {
	return tea.Prettify(s)
}

func (s StopLoadBalancerListenerRequest) GoString() string {
	return s.String()
}

func (s *StopLoadBalancerListenerRequest) SetListenerPort(v int32) *StopLoadBalancerListenerRequest {
	s.ListenerPort = &v
	return s
}

func (s *StopLoadBalancerListenerRequest) SetListenerProtocol(v string) *StopLoadBalancerListenerRequest {
	s.ListenerProtocol = &v
	return s
}

func (s *StopLoadBalancerListenerRequest) SetLoadBalancerId(v string) *StopLoadBalancerListenerRequest {
	s.LoadBalancerId = &v
	return s
}

type StopLoadBalancerListenerResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopLoadBalancerListenerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopLoadBalancerListenerResponseBody) GoString() string {
	return s.String()
}

func (s *StopLoadBalancerListenerResponseBody) SetRequestId(v string) *StopLoadBalancerListenerResponseBody {
	s.RequestId = &v
	return s
}

type StopLoadBalancerListenerResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopLoadBalancerListenerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopLoadBalancerListenerResponse) String() string {
	return tea.Prettify(s)
}

func (s StopLoadBalancerListenerResponse) GoString() string {
	return s.String()
}

func (s *StopLoadBalancerListenerResponse) SetHeaders(v map[string]*string) *StopLoadBalancerListenerResponse {
	s.Headers = v
	return s
}

func (s *StopLoadBalancerListenerResponse) SetStatusCode(v int32) *StopLoadBalancerListenerResponse {
	s.StatusCode = &v
	return s
}

func (s *StopLoadBalancerListenerResponse) SetBody(v *StopLoadBalancerListenerResponseBody) *StopLoadBalancerListenerResponse {
	s.Body = v
	return s
}

type StopSnatIpForSnatEntryRequest struct {
	// The ID of the SNAT entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// snat-5tfi6f8gds82mjmlofeym****
	SnatEntryId *string `json:"SnatEntryId,omitempty" xml:"SnatEntryId,omitempty"`
	// The EIP specified in the SNAT entry.
	//
	// This parameter is required.
	//
	// example:
	//
	// 221.178.103.143
	SnatIp *string `json:"SnatIp,omitempty" xml:"SnatIp,omitempty"`
}

func (s StopSnatIpForSnatEntryRequest) String() string {
	return tea.Prettify(s)
}

func (s StopSnatIpForSnatEntryRequest) GoString() string {
	return s.String()
}

func (s *StopSnatIpForSnatEntryRequest) SetSnatEntryId(v string) *StopSnatIpForSnatEntryRequest {
	s.SnatEntryId = &v
	return s
}

func (s *StopSnatIpForSnatEntryRequest) SetSnatIp(v string) *StopSnatIpForSnatEntryRequest {
	s.SnatIp = &v
	return s
}

type StopSnatIpForSnatEntryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 9A415CB9-7591-566F-924B-32709578756B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopSnatIpForSnatEntryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopSnatIpForSnatEntryResponseBody) GoString() string {
	return s.String()
}

func (s *StopSnatIpForSnatEntryResponseBody) SetRequestId(v string) *StopSnatIpForSnatEntryResponseBody {
	s.RequestId = &v
	return s
}

type StopSnatIpForSnatEntryResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopSnatIpForSnatEntryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopSnatIpForSnatEntryResponse) String() string {
	return tea.Prettify(s)
}

func (s StopSnatIpForSnatEntryResponse) GoString() string {
	return s.String()
}

func (s *StopSnatIpForSnatEntryResponse) SetHeaders(v map[string]*string) *StopSnatIpForSnatEntryResponse {
	s.Headers = v
	return s
}

func (s *StopSnatIpForSnatEntryResponse) SetStatusCode(v int32) *StopSnatIpForSnatEntryResponse {
	s.StatusCode = &v
	return s
}

func (s *StopSnatIpForSnatEntryResponse) SetBody(v *StopSnatIpForSnatEntryResponseBody) *StopSnatIpForSnatEntryResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	// The resource IDs. You can add up to 50 resource IDs in a call.
	//
	// This parameter is required.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource. Set the value to instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag that is bound to the instance.
	//
	// This parameter is required.
	Tag []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	// The key of tag N that is added to the resource. Valid values of N: 1 to 20. The tag value cannot be an empty string. The tag value can be up to 128 characters in length. It cannot start with aliyun or acs: and cannot contain http:// or https://.
	//
	// This parameter is required.
	//
	// example:
	//
	// team
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of tag N that is added to the resource. Valid values of N: 1 to 20. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with acs: or contain http:// or https://.
	//
	// This parameter is required.
	//
	// example:
	//
	// Deep
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C50C391C-533A-55D3-AC97-5D9333DE288F
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type UnAssociateEnsEipAddressRequest struct {
	// The ID of the EIP.
	//
	// This parameter is required.
	//
	// example:
	//
	// eip-5sqa431nx3vee8heqxfxp****
	AllocationId *string `json:"AllocationId,omitempty" xml:"AllocationId,omitempty"`
	// Specifies whether to forcefully release the instance if it is in the Running status. Valid values:
	//
	// 	- true. If you set the Force parameter to true, temporary data in the memory and storage of the instance is erased and cannot be restored after you call the operation, which is similar to the effect of a power-off action.
	//
	// 	- false (default)
	//
	// example:
	//
	// false
	Force *bool `json:"Force,omitempty" xml:"Force,omitempty"`
}

func (s UnAssociateEnsEipAddressRequest) String() string {
	return tea.Prettify(s)
}

func (s UnAssociateEnsEipAddressRequest) GoString() string {
	return s.String()
}

func (s *UnAssociateEnsEipAddressRequest) SetAllocationId(v string) *UnAssociateEnsEipAddressRequest {
	s.AllocationId = &v
	return s
}

func (s *UnAssociateEnsEipAddressRequest) SetForce(v bool) *UnAssociateEnsEipAddressRequest {
	s.Force = &v
	return s
}

type UnAssociateEnsEipAddressResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 4A431388-2D4B-46F4-A96B-D4E6BD0688C1
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnAssociateEnsEipAddressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnAssociateEnsEipAddressResponseBody) GoString() string {
	return s.String()
}

func (s *UnAssociateEnsEipAddressResponseBody) SetRequestId(v string) *UnAssociateEnsEipAddressResponseBody {
	s.RequestId = &v
	return s
}

type UnAssociateEnsEipAddressResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnAssociateEnsEipAddressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnAssociateEnsEipAddressResponse) String() string {
	return tea.Prettify(s)
}

func (s UnAssociateEnsEipAddressResponse) GoString() string {
	return s.String()
}

func (s *UnAssociateEnsEipAddressResponse) SetHeaders(v map[string]*string) *UnAssociateEnsEipAddressResponse {
	s.Headers = v
	return s
}

func (s *UnAssociateEnsEipAddressResponse) SetStatusCode(v int32) *UnAssociateEnsEipAddressResponse {
	s.StatusCode = &v
	return s
}

func (s *UnAssociateEnsEipAddressResponse) SetBody(v *UnAssociateEnsEipAddressResponseBody) *UnAssociateEnsEipAddressResponse {
	s.Body = v
	return s
}

type UnassignPrivateIpAddressesRequest struct {
	// The ID of the ENI.
	//
	// This parameter is required.
	//
	// example:
	//
	// eni-f8z57orgmt6d144t****
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The secondary private IP addresses to unassign.
	//
	// This parameter is required.
	PrivateIpAddress []*string `json:"PrivateIpAddress,omitempty" xml:"PrivateIpAddress,omitempty" type:"Repeated"`
}

func (s UnassignPrivateIpAddressesRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesRequest) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesRequest) SetNetworkInterfaceId(v string) *UnassignPrivateIpAddressesRequest {
	s.NetworkInterfaceId = &v
	return s
}

func (s *UnassignPrivateIpAddressesRequest) SetPrivateIpAddress(v []*string) *UnassignPrivateIpAddressesRequest {
	s.PrivateIpAddress = v
	return s
}

type UnassignPrivateIpAddressesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1ECC937A-AE0E-4626-BE51-DED1D6D1C888
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnassignPrivateIpAddressesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesResponseBody) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesResponseBody) SetRequestId(v string) *UnassignPrivateIpAddressesResponseBody {
	s.RequestId = &v
	return s
}

type UnassignPrivateIpAddressesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnassignPrivateIpAddressesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnassignPrivateIpAddressesResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassignPrivateIpAddressesResponse) GoString() string {
	return s.String()
}

func (s *UnassignPrivateIpAddressesResponse) SetHeaders(v map[string]*string) *UnassignPrivateIpAddressesResponse {
	s.Headers = v
	return s
}

func (s *UnassignPrivateIpAddressesResponse) SetStatusCode(v int32) *UnassignPrivateIpAddressesResponse {
	s.StatusCode = &v
	return s
}

func (s *UnassignPrivateIpAddressesResponse) SetBody(v *UnassignPrivateIpAddressesResponseBody) *UnassignPrivateIpAddressesResponse {
	s.Body = v
	return s
}

type UnassociateHaVipRequest struct {
	// The ID of the HAVIP that you want to disassociate.
	//
	// This parameter is required.
	//
	// example:
	//
	// havip-5p14t****
	HaVipId *string `json:"HaVipId,omitempty" xml:"HaVipId,omitempty"`
	// The ID of the ENS instance or ENI that you want to disassociate from the HAVIP.
	//
	// This parameter is required.
	//
	// example:
	//
	// i-5ecpqvk****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UnassociateHaVipRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateHaVipRequest) GoString() string {
	return s.String()
}

func (s *UnassociateHaVipRequest) SetHaVipId(v string) *UnassociateHaVipRequest {
	s.HaVipId = &v
	return s
}

func (s *UnassociateHaVipRequest) SetInstanceId(v string) *UnassociateHaVipRequest {
	s.InstanceId = &v
	return s
}

type UnassociateHaVipResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C0003E8B-B930-4F59-ADC0-0E209A9012A8
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnassociateHaVipResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnassociateHaVipResponseBody) GoString() string {
	return s.String()
}

func (s *UnassociateHaVipResponseBody) SetRequestId(v string) *UnassociateHaVipResponseBody {
	s.RequestId = &v
	return s
}

type UnassociateHaVipResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnassociateHaVipResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnassociateHaVipResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateHaVipResponse) GoString() string {
	return s.String()
}

func (s *UnassociateHaVipResponse) SetHeaders(v map[string]*string) *UnassociateHaVipResponse {
	s.Headers = v
	return s
}

func (s *UnassociateHaVipResponse) SetStatusCode(v int32) *UnassociateHaVipResponse {
	s.StatusCode = &v
	return s
}

func (s *UnassociateHaVipResponse) SetBody(v *UnassociateHaVipResponseBody) *UnassociateHaVipResponse {
	s.Body = v
	return s
}

type UnassociateNetworkAclRequest struct {
	// The ID of the network ACL that you want to disassociate from a resource.
	//
	// This parameter is required.
	//
	// example:
	//
	// nacl-a2do9e413e0sp****
	NetworkAclId *string `json:"NetworkAclId,omitempty" xml:"NetworkAclId,omitempty"`
	// Resources that you want to disassociate. Valid values of **N**: 0 to 29. A maximum of 30 resources can be unbound.
	//
	// This parameter is required.
	Resource []*UnassociateNetworkAclRequestResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s UnassociateNetworkAclRequest) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclRequest) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclRequest) SetNetworkAclId(v string) *UnassociateNetworkAclRequest {
	s.NetworkAclId = &v
	return s
}

func (s *UnassociateNetworkAclRequest) SetResource(v []*UnassociateNetworkAclRequestResource) *UnassociateNetworkAclRequest {
	s.Resource = v
	return s
}

type UnassociateNetworkAclRequestResource struct {
	// The ID of the resource that you want to disassociate.
	//
	// This parameter is required.
	//
	// example:
	//
	// n-5***
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the resource that you want to disassociate. Valid values:
	//
	// 	- Network
	//
	// This parameter is required.
	//
	// example:
	//
	// Network
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s UnassociateNetworkAclRequestResource) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclRequestResource) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclRequestResource) SetResourceId(v string) *UnassociateNetworkAclRequestResource {
	s.ResourceId = &v
	return s
}

func (s *UnassociateNetworkAclRequestResource) SetResourceType(v string) *UnassociateNetworkAclRequestResource {
	s.ResourceType = &v
	return s
}

type UnassociateNetworkAclResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// CEF72CEB-54B6-4AE8-B225-F876FF7BA984
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnassociateNetworkAclResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclResponseBody) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclResponseBody) SetRequestId(v string) *UnassociateNetworkAclResponseBody {
	s.RequestId = &v
	return s
}

type UnassociateNetworkAclResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnassociateNetworkAclResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnassociateNetworkAclResponse) String() string {
	return tea.Prettify(s)
}

func (s UnassociateNetworkAclResponse) GoString() string {
	return s.String()
}

func (s *UnassociateNetworkAclResponse) SetHeaders(v map[string]*string) *UnassociateNetworkAclResponse {
	s.Headers = v
	return s
}

func (s *UnassociateNetworkAclResponse) SetStatusCode(v int32) *UnassociateNetworkAclResponse {
	s.StatusCode = &v
	return s
}

func (s *UnassociateNetworkAclResponse) SetBody(v *UnassociateNetworkAclResponseBody) *UnassociateNetworkAclResponse {
	s.Body = v
	return s
}

type UnloadRegionSDGRequest struct {
	// The destination nodes.
	//
	// This parameter is required.
	DestinationRegionIds []*string `json:"DestinationRegionIds,omitempty" xml:"DestinationRegionIds,omitempty" type:"Repeated"`
	// The namespaces.
	Namespaces []*string `json:"Namespaces,omitempty" xml:"Namespaces,omitempty" type:"Repeated"`
	// Deletes the shared data group (SDG) ID of the preloaded data.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s UnloadRegionSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s UnloadRegionSDGRequest) GoString() string {
	return s.String()
}

func (s *UnloadRegionSDGRequest) SetDestinationRegionIds(v []*string) *UnloadRegionSDGRequest {
	s.DestinationRegionIds = v
	return s
}

func (s *UnloadRegionSDGRequest) SetNamespaces(v []*string) *UnloadRegionSDGRequest {
	s.Namespaces = v
	return s
}

func (s *UnloadRegionSDGRequest) SetSDGId(v string) *UnloadRegionSDGRequest {
	s.SDGId = &v
	return s
}

type UnloadRegionSDGShrinkRequest struct {
	// The destination nodes.
	//
	// This parameter is required.
	DestinationRegionIdsShrink *string `json:"DestinationRegionIds,omitempty" xml:"DestinationRegionIds,omitempty"`
	// The namespaces.
	NamespacesShrink *string `json:"Namespaces,omitempty" xml:"Namespaces,omitempty"`
	// Deletes the shared data group (SDG) ID of the preloaded data.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s UnloadRegionSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UnloadRegionSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *UnloadRegionSDGShrinkRequest) SetDestinationRegionIdsShrink(v string) *UnloadRegionSDGShrinkRequest {
	s.DestinationRegionIdsShrink = &v
	return s
}

func (s *UnloadRegionSDGShrinkRequest) SetNamespacesShrink(v string) *UnloadRegionSDGShrinkRequest {
	s.NamespacesShrink = &v
	return s
}

func (s *UnloadRegionSDGShrinkRequest) SetSDGId(v string) *UnloadRegionSDGShrinkRequest {
	s.SDGId = &v
	return s
}

type UnloadRegionSDGResponseBody struct {
	// The returned data object.
	Data *UnloadRegionSDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 125B04C7-3D0D-4245-AF96-14E3758E3F06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnloadRegionSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnloadRegionSDGResponseBody) GoString() string {
	return s.String()
}

func (s *UnloadRegionSDGResponseBody) SetData(v *UnloadRegionSDGResponseBodyData) *UnloadRegionSDGResponseBody {
	s.Data = v
	return s
}

func (s *UnloadRegionSDGResponseBody) SetRequestId(v string) *UnloadRegionSDGResponseBody {
	s.RequestId = &v
	return s
}

type UnloadRegionSDGResponseBodyData struct {
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The execution result of the synchronization request.
	Result *UnloadRegionSDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- true: All tasks are successful.
	//
	// 	- false: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UnloadRegionSDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UnloadRegionSDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *UnloadRegionSDGResponseBodyData) SetMessage(v string) *UnloadRegionSDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *UnloadRegionSDGResponseBodyData) SetResult(v *UnloadRegionSDGResponseBodyDataResult) *UnloadRegionSDGResponseBodyData {
	s.Result = v
	return s
}

func (s *UnloadRegionSDGResponseBodyData) SetSuccess(v bool) *UnloadRegionSDGResponseBodyData {
	s.Success = &v
	return s
}

type UnloadRegionSDGResponseBodyDataResult struct {
	// The number of failed tasks.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details about failed tasks.
	FailedItems []*UnloadRegionSDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful tasks.
	//
	// example:
	//
	// 1
	SuccessCount *int64 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s UnloadRegionSDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s UnloadRegionSDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *UnloadRegionSDGResponseBodyDataResult) SetFailedCount(v int64) *UnloadRegionSDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *UnloadRegionSDGResponseBodyDataResult) SetFailedItems(v []*UnloadRegionSDGResponseBodyDataResultFailedItems) *UnloadRegionSDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *UnloadRegionSDGResponseBodyDataResult) SetSuccessCount(v int64) *UnloadRegionSDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type UnloadRegionSDGResponseBodyDataResultFailedItems struct {
	// The ID of the destination node.
	//
	// example:
	//
	// cn-hangzhou-xxx
	DestinationRegionId *string `json:"DestinationRegionId,omitempty" xml:"DestinationRegionId,omitempty"`
	// The error message that is returned.
	//
	// example:
	//
	// region not found
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
}

func (s UnloadRegionSDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s UnloadRegionSDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *UnloadRegionSDGResponseBodyDataResultFailedItems) SetDestinationRegionId(v string) *UnloadRegionSDGResponseBodyDataResultFailedItems {
	s.DestinationRegionId = &v
	return s
}

func (s *UnloadRegionSDGResponseBodyDataResultFailedItems) SetErrorMessage(v string) *UnloadRegionSDGResponseBodyDataResultFailedItems {
	s.ErrorMessage = &v
	return s
}

type UnloadRegionSDGResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnloadRegionSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnloadRegionSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s UnloadRegionSDGResponse) GoString() string {
	return s.String()
}

func (s *UnloadRegionSDGResponse) SetHeaders(v map[string]*string) *UnloadRegionSDGResponse {
	s.Headers = v
	return s
}

func (s *UnloadRegionSDGResponse) SetStatusCode(v int32) *UnloadRegionSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *UnloadRegionSDGResponse) SetBody(v *UnloadRegionSDGResponseBody) *UnloadRegionSDGResponse {
	s.Body = v
	return s
}

type UnmountInstanceSDGRequest struct {
	// The IDs of the instances.
	//
	// This parameter is required.
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s UnmountInstanceSDGRequest) String() string {
	return tea.Prettify(s)
}

func (s UnmountInstanceSDGRequest) GoString() string {
	return s.String()
}

func (s *UnmountInstanceSDGRequest) SetInstanceIds(v []*string) *UnmountInstanceSDGRequest {
	s.InstanceIds = v
	return s
}

func (s *UnmountInstanceSDGRequest) SetSDGId(v string) *UnmountInstanceSDGRequest {
	s.SDGId = &v
	return s
}

type UnmountInstanceSDGShrinkRequest struct {
	// The IDs of the instances.
	//
	// This parameter is required.
	InstanceIdsShrink *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The ID of the SDG.
	//
	// This parameter is required.
	//
	// example:
	//
	// sdg-xxxx
	SDGId *string `json:"SDGId,omitempty" xml:"SDGId,omitempty"`
}

func (s UnmountInstanceSDGShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UnmountInstanceSDGShrinkRequest) GoString() string {
	return s.String()
}

func (s *UnmountInstanceSDGShrinkRequest) SetInstanceIdsShrink(v string) *UnmountInstanceSDGShrinkRequest {
	s.InstanceIdsShrink = &v
	return s
}

func (s *UnmountInstanceSDGShrinkRequest) SetSDGId(v string) *UnmountInstanceSDGShrinkRequest {
	s.SDGId = &v
	return s
}

type UnmountInstanceSDGResponseBody struct {
	// The returned data object.
	Data *UnmountInstanceSDGResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 125B04C7-3D0D-4245-AF96-14E3758E3F06
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnmountInstanceSDGResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnmountInstanceSDGResponseBody) GoString() string {
	return s.String()
}

func (s *UnmountInstanceSDGResponseBody) SetData(v *UnmountInstanceSDGResponseBodyData) *UnmountInstanceSDGResponseBody {
	s.Data = v
	return s
}

func (s *UnmountInstanceSDGResponseBody) SetRequestId(v string) *UnmountInstanceSDGResponseBody {
	s.RequestId = &v
	return s
}

type UnmountInstanceSDGResponseBodyData struct {
	// The response message. Success is returned for a successful request.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The execution result of the synchronization request.
	Result *UnmountInstanceSDGResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// Indicates whether all tasks are successful. Valid values:
	//
	// 	- true: All tasks are successful.
	//
	// 	- false: Failed tasks exist.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UnmountInstanceSDGResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UnmountInstanceSDGResponseBodyData) GoString() string {
	return s.String()
}

func (s *UnmountInstanceSDGResponseBodyData) SetMessage(v string) *UnmountInstanceSDGResponseBodyData {
	s.Message = &v
	return s
}

func (s *UnmountInstanceSDGResponseBodyData) SetResult(v *UnmountInstanceSDGResponseBodyDataResult) *UnmountInstanceSDGResponseBodyData {
	s.Result = v
	return s
}

func (s *UnmountInstanceSDGResponseBodyData) SetSuccess(v bool) *UnmountInstanceSDGResponseBodyData {
	s.Success = &v
	return s
}

type UnmountInstanceSDGResponseBodyDataResult struct {
	// The number of failed tasks.
	//
	// example:
	//
	// 0
	FailedCount *int64 `json:"FailedCount,omitempty" xml:"FailedCount,omitempty"`
	// Details about failed tasks.
	FailedItems []*UnmountInstanceSDGResponseBodyDataResultFailedItems `json:"FailedItems,omitempty" xml:"FailedItems,omitempty" type:"Repeated"`
	// The number of successful tasks.
	//
	// example:
	//
	// 1
	SuccessCount *int64 `json:"SuccessCount,omitempty" xml:"SuccessCount,omitempty"`
}

func (s UnmountInstanceSDGResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s UnmountInstanceSDGResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *UnmountInstanceSDGResponseBodyDataResult) SetFailedCount(v int64) *UnmountInstanceSDGResponseBodyDataResult {
	s.FailedCount = &v
	return s
}

func (s *UnmountInstanceSDGResponseBodyDataResult) SetFailedItems(v []*UnmountInstanceSDGResponseBodyDataResultFailedItems) *UnmountInstanceSDGResponseBodyDataResult {
	s.FailedItems = v
	return s
}

func (s *UnmountInstanceSDGResponseBodyDataResult) SetSuccessCount(v int64) *UnmountInstanceSDGResponseBodyDataResult {
	s.SuccessCount = &v
	return s
}

type UnmountInstanceSDGResponseBodyDataResultFailedItems struct {
	// The error message.
	//
	// example:
	//
	// sdg not found
	ErrMessage *string `json:"ErrMessage,omitempty" xml:"ErrMessage,omitempty"`
	// The ID of the instance.
	//
	// example:
	//
	// aic-xxxxx-0
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UnmountInstanceSDGResponseBodyDataResultFailedItems) String() string {
	return tea.Prettify(s)
}

func (s UnmountInstanceSDGResponseBodyDataResultFailedItems) GoString() string {
	return s.String()
}

func (s *UnmountInstanceSDGResponseBodyDataResultFailedItems) SetErrMessage(v string) *UnmountInstanceSDGResponseBodyDataResultFailedItems {
	s.ErrMessage = &v
	return s
}

func (s *UnmountInstanceSDGResponseBodyDataResultFailedItems) SetInstanceId(v string) *UnmountInstanceSDGResponseBodyDataResultFailedItems {
	s.InstanceId = &v
	return s
}

type UnmountInstanceSDGResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnmountInstanceSDGResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnmountInstanceSDGResponse) String() string {
	return tea.Prettify(s)
}

func (s UnmountInstanceSDGResponse) GoString() string {
	return s.String()
}

func (s *UnmountInstanceSDGResponse) SetHeaders(v map[string]*string) *UnmountInstanceSDGResponse {
	s.Headers = v
	return s
}

func (s *UnmountInstanceSDGResponse) SetStatusCode(v int32) *UnmountInstanceSDGResponse {
	s.StatusCode = &v
	return s
}

func (s *UnmountInstanceSDGResponse) SetBody(v *UnmountInstanceSDGResponseBody) *UnmountInstanceSDGResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	// Specifies whether to remove all tags from the resource. This parameter takes effect only if you do not specify TagKey.N. Valid values:
	//
	// 	- **true**
	//
	// 	- **false*	- (default)
	//
	// example:
	//
	// true
	All *bool `json:"All,omitempty" xml:"All,omitempty"`
	// The resource IDs. You can specify up to 50 resource IDs.
	//
	// This parameter is required.
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource.
	//
	// Valid values:
	//
	// 	- instance
	//
	// 	- eip
	//
	// 	- disk
	//
	// 	- network
	//
	// 	- natgateway
	//
	// 	- vswitch
	//
	// This parameter is required.
	//
	// example:
	//
	// instance
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The keys of the tags. Valid values of N: 1 to 20.
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 6AB7715D-8B97-5E81-854B-2429F8C7DEF2
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpdateEnsSaleControlRequest struct {
	AliUidAccount *string `json:"AliUidAccount,omitempty" xml:"AliUidAccount,omitempty"`
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	// This parameter is required.
	SaleControls []*UpdateEnsSaleControlRequestSaleControls `json:"SaleControls,omitempty" xml:"SaleControls,omitempty" type:"Repeated"`
}

func (s UpdateEnsSaleControlRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnsSaleControlRequest) GoString() string {
	return s.String()
}

func (s *UpdateEnsSaleControlRequest) SetAliUidAccount(v string) *UpdateEnsSaleControlRequest {
	s.AliUidAccount = &v
	return s
}

func (s *UpdateEnsSaleControlRequest) SetCommodityCode(v string) *UpdateEnsSaleControlRequest {
	s.CommodityCode = &v
	return s
}

func (s *UpdateEnsSaleControlRequest) SetCustomAccount(v string) *UpdateEnsSaleControlRequest {
	s.CustomAccount = &v
	return s
}

func (s *UpdateEnsSaleControlRequest) SetSaleControls(v []*UpdateEnsSaleControlRequestSaleControls) *UpdateEnsSaleControlRequest {
	s.SaleControls = v
	return s
}

type UpdateEnsSaleControlRequestSaleControls struct {
	ConditionControls []*UpdateEnsSaleControlRequestSaleControlsConditionControls `json:"ConditionControls,omitempty" xml:"ConditionControls,omitempty" type:"Repeated"`
	Description       *string                                                     `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	ModuleCode *string `json:"ModuleCode,omitempty" xml:"ModuleCode,omitempty"`
	// This parameter is required.
	ModuleValue *UpdateEnsSaleControlRequestSaleControlsModuleValue `json:"ModuleValue,omitempty" xml:"ModuleValue,omitempty" type:"Struct"`
	// This parameter is required.
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty"`
	// This parameter is required.
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
}

func (s UpdateEnsSaleControlRequestSaleControls) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnsSaleControlRequestSaleControls) GoString() string {
	return s.String()
}

func (s *UpdateEnsSaleControlRequestSaleControls) SetConditionControls(v []*UpdateEnsSaleControlRequestSaleControlsConditionControls) *UpdateEnsSaleControlRequestSaleControls {
	s.ConditionControls = v
	return s
}

func (s *UpdateEnsSaleControlRequestSaleControls) SetDescription(v string) *UpdateEnsSaleControlRequestSaleControls {
	s.Description = &v
	return s
}

func (s *UpdateEnsSaleControlRequestSaleControls) SetModuleCode(v string) *UpdateEnsSaleControlRequestSaleControls {
	s.ModuleCode = &v
	return s
}

func (s *UpdateEnsSaleControlRequestSaleControls) SetModuleValue(v *UpdateEnsSaleControlRequestSaleControlsModuleValue) *UpdateEnsSaleControlRequestSaleControls {
	s.ModuleValue = v
	return s
}

func (s *UpdateEnsSaleControlRequestSaleControls) SetOperator(v string) *UpdateEnsSaleControlRequestSaleControls {
	s.Operator = &v
	return s
}

func (s *UpdateEnsSaleControlRequestSaleControls) SetOrderType(v string) *UpdateEnsSaleControlRequestSaleControls {
	s.OrderType = &v
	return s
}

type UpdateEnsSaleControlRequestSaleControlsConditionControls struct {
	ConditionControlModuleCode  *string `json:"ConditionControlModuleCode,omitempty" xml:"ConditionControlModuleCode,omitempty"`
	ConditionControlModuleValue *string `json:"ConditionControlModuleValue,omitempty" xml:"ConditionControlModuleValue,omitempty"`
}

func (s UpdateEnsSaleControlRequestSaleControlsConditionControls) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnsSaleControlRequestSaleControlsConditionControls) GoString() string {
	return s.String()
}

func (s *UpdateEnsSaleControlRequestSaleControlsConditionControls) SetConditionControlModuleCode(v string) *UpdateEnsSaleControlRequestSaleControlsConditionControls {
	s.ConditionControlModuleCode = &v
	return s
}

func (s *UpdateEnsSaleControlRequestSaleControlsConditionControls) SetConditionControlModuleValue(v string) *UpdateEnsSaleControlRequestSaleControlsConditionControls {
	s.ConditionControlModuleValue = &v
	return s
}

type UpdateEnsSaleControlRequestSaleControlsModuleValue struct {
	ModuleMaxValue *string   `json:"ModuleMaxValue,omitempty" xml:"ModuleMaxValue,omitempty"`
	ModuleMinValue *string   `json:"ModuleMinValue,omitempty" xml:"ModuleMinValue,omitempty"`
	ModuleValue    []*string `json:"ModuleValue,omitempty" xml:"ModuleValue,omitempty" type:"Repeated"`
}

func (s UpdateEnsSaleControlRequestSaleControlsModuleValue) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnsSaleControlRequestSaleControlsModuleValue) GoString() string {
	return s.String()
}

func (s *UpdateEnsSaleControlRequestSaleControlsModuleValue) SetModuleMaxValue(v string) *UpdateEnsSaleControlRequestSaleControlsModuleValue {
	s.ModuleMaxValue = &v
	return s
}

func (s *UpdateEnsSaleControlRequestSaleControlsModuleValue) SetModuleMinValue(v string) *UpdateEnsSaleControlRequestSaleControlsModuleValue {
	s.ModuleMinValue = &v
	return s
}

func (s *UpdateEnsSaleControlRequestSaleControlsModuleValue) SetModuleValue(v []*string) *UpdateEnsSaleControlRequestSaleControlsModuleValue {
	s.ModuleValue = v
	return s
}

type UpdateEnsSaleControlShrinkRequest struct {
	AliUidAccount *string `json:"AliUidAccount,omitempty" xml:"AliUidAccount,omitempty"`
	// This parameter is required.
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CustomAccount *string `json:"CustomAccount,omitempty" xml:"CustomAccount,omitempty"`
	// This parameter is required.
	SaleControlsShrink *string `json:"SaleControls,omitempty" xml:"SaleControls,omitempty"`
}

func (s UpdateEnsSaleControlShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnsSaleControlShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateEnsSaleControlShrinkRequest) SetAliUidAccount(v string) *UpdateEnsSaleControlShrinkRequest {
	s.AliUidAccount = &v
	return s
}

func (s *UpdateEnsSaleControlShrinkRequest) SetCommodityCode(v string) *UpdateEnsSaleControlShrinkRequest {
	s.CommodityCode = &v
	return s
}

func (s *UpdateEnsSaleControlShrinkRequest) SetCustomAccount(v string) *UpdateEnsSaleControlShrinkRequest {
	s.CustomAccount = &v
	return s
}

func (s *UpdateEnsSaleControlShrinkRequest) SetSaleControlsShrink(v string) *UpdateEnsSaleControlShrinkRequest {
	s.SaleControlsShrink = &v
	return s
}

type UpdateEnsSaleControlResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateEnsSaleControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnsSaleControlResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEnsSaleControlResponseBody) SetRequestId(v string) *UpdateEnsSaleControlResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEnsSaleControlResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEnsSaleControlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEnsSaleControlResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnsSaleControlResponse) GoString() string {
	return s.String()
}

func (s *UpdateEnsSaleControlResponse) SetHeaders(v map[string]*string) *UpdateEnsSaleControlResponse {
	s.Headers = v
	return s
}

func (s *UpdateEnsSaleControlResponse) SetStatusCode(v int32) *UpdateEnsSaleControlResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEnsSaleControlResponse) SetBody(v *UpdateEnsSaleControlResponseBody) *UpdateEnsSaleControlResponse {
	s.Body = v
	return s
}

type UpgradeAICInstanceImageRequest struct {
	// The ID of the AIC image.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The IDs of the servers.
	//
	// This parameter is required.
	ServerIds []*string `json:"ServerIds,omitempty" xml:"ServerIds,omitempty" type:"Repeated"`
	// The timeout period of the update. Unit: seconds.
	//
	// example:
	//
	// 1800
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpgradeAICInstanceImageRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAICInstanceImageRequest) GoString() string {
	return s.String()
}

func (s *UpgradeAICInstanceImageRequest) SetImageId(v string) *UpgradeAICInstanceImageRequest {
	s.ImageId = &v
	return s
}

func (s *UpgradeAICInstanceImageRequest) SetServerIds(v []*string) *UpgradeAICInstanceImageRequest {
	s.ServerIds = v
	return s
}

func (s *UpgradeAICInstanceImageRequest) SetTimeout(v int32) *UpgradeAICInstanceImageRequest {
	s.Timeout = &v
	return s
}

type UpgradeAICInstanceImageShrinkRequest struct {
	// The ID of the AIC image.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The IDs of the servers.
	//
	// This parameter is required.
	ServerIdsShrink *string `json:"ServerIds,omitempty" xml:"ServerIds,omitempty"`
	// The timeout period of the update. Unit: seconds.
	//
	// example:
	//
	// 1800
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpgradeAICInstanceImageShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAICInstanceImageShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpgradeAICInstanceImageShrinkRequest) SetImageId(v string) *UpgradeAICInstanceImageShrinkRequest {
	s.ImageId = &v
	return s
}

func (s *UpgradeAICInstanceImageShrinkRequest) SetServerIdsShrink(v string) *UpgradeAICInstanceImageShrinkRequest {
	s.ServerIdsShrink = &v
	return s
}

func (s *UpgradeAICInstanceImageShrinkRequest) SetTimeout(v int32) *UpgradeAICInstanceImageShrinkRequest {
	s.Timeout = &v
	return s
}

type UpgradeAICInstanceImageResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpgradeAICInstanceImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAICInstanceImageResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeAICInstanceImageResponseBody) SetRequestId(v string) *UpgradeAICInstanceImageResponseBody {
	s.RequestId = &v
	return s
}

type UpgradeAICInstanceImageResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeAICInstanceImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeAICInstanceImageResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeAICInstanceImageResponse) GoString() string {
	return s.String()
}

func (s *UpgradeAICInstanceImageResponse) SetHeaders(v map[string]*string) *UpgradeAICInstanceImageResponse {
	s.Headers = v
	return s
}

func (s *UpgradeAICInstanceImageResponse) SetStatusCode(v int32) *UpgradeAICInstanceImageResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeAICInstanceImageResponse) SetBody(v *UpgradeAICInstanceImageResponseBody) *UpgradeAICInstanceImageResponse {
	s.Body = v
	return s
}

type UpgradeApplicationRequest struct {
	// The ID of the application.
	//
	// This parameter is required.
	//
	// example:
	//
	// a2bac6f4-75dc-455e-8389-2dc8e47526d3
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// The information template for phased update. The value must be a JSON string and contain the following information:
	//
	// 	- Version range that you want to update
	//
	// 	- Configuration information of the target version
	//
	// 	- Canary release policy for resources
	//
	// 	- Intelligent upgrade policy that contains information such as the time window and resource usage limit
	//
	// This parameter is required.
	//
	// example:
	//
	// {\\"fromAppVersions\\":{        \\"operator\\":\\"In\\",        \\"values\\":[            \\"v1\\",            \\"v2\\"        ]    },    \\"toAppVersion\\":\\"v3\\",    \\"descrip\\":\\"xxx\\",    \\"workload\\":[        {            \\"name\\":\\"nginx\\",            \\"podSpec\\":{            }        }    ],    \\"upgradeStrategy\\":{        \\"name\\":\\"ScheduleToISP\\",        \\"parameters\\":{            \\"operator\\":\\"In\\",            \\"values\\":[                \\"telecom\\"            ]        }    },    \\"autoUpgradeStrategy\\":{        \\"name\\":\\"AdjustToPodUsage\\",        \\"checkInterval\\":600,        \\"startTime\\":\\"2021-02-19 00:00:00\\",        \\"startHourPoint\\":\\"0\\",        \\"endHourPoint\\":\\"8\\",        \\"endTime\\":\\"2021-02-19 08:00:00\\",        \\"level\\":\\"RegionId\\",        \\"rules\\":[            {                \\"regionCodes\\":[                    \\"cn-wuxi-telecom_unicom_cmcc\\",                    \\"cn-shijiazhuang-telecom_unicom_cmcc\\"                ],                \\"usageRatioLimit\\":{                    \\"maxPodUsageRatio\\":50                },                \\"maxUpgradingRatio\\":50            },            {                \\"regionCodes\\":[                    \\"cn-wuhan-telecom_unicom_cmcc\\"                ],                \\"usageRatioLimit\\":{                    \\"maxPodUsageRatio\\":30                },                \\"maxUpgradingRatio\\":20            },            {                \\"regionCodes\\":[                    \\"All\\"                ],                \\"usageRatioLimit\\":{                    \\"maxPodUsageRatio\\":20                },                \\"maxUpgradingRatio\\":50,                \\"maxUpgradingCount\\":2            }        ]    }}
	Template *string `json:"Template,omitempty" xml:"Template,omitempty"`
	// The timeout period for asynchronous upgrade. Unit: seconds. Default value: 300.
	//
	// example:
	//
	// 1800
	Timeout *int32 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpgradeApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeApplicationRequest) GoString() string {
	return s.String()
}

func (s *UpgradeApplicationRequest) SetAppId(v string) *UpgradeApplicationRequest {
	s.AppId = &v
	return s
}

func (s *UpgradeApplicationRequest) SetTemplate(v string) *UpgradeApplicationRequest {
	s.Template = &v
	return s
}

func (s *UpgradeApplicationRequest) SetTimeout(v int32) *UpgradeApplicationRequest {
	s.Timeout = &v
	return s
}

type UpgradeApplicationResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The task ID. You can use the task ID to query the upgrade progress or status.
	//
	// example:
	//
	// 6f24a774-6bd5-4026-bb7d-deffb1dad875
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpgradeApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeApplicationResponseBody) SetRequestId(v string) *UpgradeApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeApplicationResponseBody) SetTaskId(v string) *UpgradeApplicationResponseBody {
	s.TaskId = &v
	return s
}

type UpgradeApplicationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeApplicationResponse) GoString() string {
	return s.String()
}

func (s *UpgradeApplicationResponse) SetHeaders(v map[string]*string) *UpgradeApplicationResponse {
	s.Headers = v
	return s
}

func (s *UpgradeApplicationResponse) SetStatusCode(v int32) *UpgradeApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeApplicationResponse) SetBody(v *UpgradeApplicationResponseBody) *UpgradeApplicationResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("ens"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Associates a network access control list (ACL) with a network.
//
// @param request - AccosicateNetworkAclRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AccosicateNetworkAclResponse
func (client *Client) AccosicateNetworkAclWithOptions(request *AccosicateNetworkAclRequest, runtime *util.RuntimeOptions) (_result *AccosicateNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkAclId)) {
		query["NetworkAclId"] = request.NetworkAclId
	}

	if !tea.BoolValue(util.IsUnset(request.Resource)) {
		query["Resource"] = request.Resource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AccosicateNetworkAcl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AccosicateNetworkAclResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AccosicateNetworkAclResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Associates a network access control list (ACL) with a network.
//
// @param request - AccosicateNetworkAclRequest
//
// @return AccosicateNetworkAclResponse
func (client *Client) AccosicateNetworkAcl(request *AccosicateNetworkAclRequest) (_result *AccosicateNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AccosicateNetworkAclResponse{}
	_body, _err := client.AccosicateNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds backend servers.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param tmpReq - AddBackendServersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddBackendServersResponse
func (client *Client) AddBackendServersWithOptions(tmpReq *AddBackendServersRequest, runtime *util.RuntimeOptions) (_result *AddBackendServersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddBackendServersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.BackendServers)) {
		request.BackendServersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.BackendServers, tea.String("BackendServers"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServersShrink)) {
		query["BackendServers"] = request.BackendServersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddBackendServers"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AddBackendServersResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AddBackendServersResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds backend servers.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - AddBackendServersRequest
//
// @return AddBackendServersResponse
func (client *Client) AddBackendServers(request *AddBackendServersRequest) (_result *AddBackendServersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddBackendServersResponse{}
	_body, _err := client.AddBackendServersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an IPv6 network interface controller (NIC). A public IP address is automatically assigned at the same time.
//
// Description:
//
// # [](#)Usage notes
//
//   - You can call this operation up to 100 times per second.
//
//   - You can call this operation up to 5 times per second per user.
//
//   - Internal networks and IPv4 addresses are not supported.
//
// @param request - AddNetworkInterfaceToInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddNetworkInterfaceToInstanceResponse
func (client *Client) AddNetworkInterfaceToInstanceWithOptions(request *AddNetworkInterfaceToInstanceRequest, runtime *util.RuntimeOptions) (_result *AddNetworkInterfaceToInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoStart)) {
		query["AutoStart"] = request.AutoStart
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Networks)) {
		query["Networks"] = request.Networks
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddNetworkInterfaceToInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AddNetworkInterfaceToInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AddNetworkInterfaceToInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds an IPv6 network interface controller (NIC). A public IP address is automatically assigned at the same time.
//
// Description:
//
// # [](#)Usage notes
//
//   - You can call this operation up to 100 times per second.
//
//   - You can call this operation up to 5 times per second per user.
//
//   - Internal networks and IPv4 addresses are not supported.
//
// @param request - AddNetworkInterfaceToInstanceRequest
//
// @return AddNetworkInterfaceToInstanceResponse
func (client *Client) AddNetworkInterfaceToInstance(request *AddNetworkInterfaceToInstanceRequest) (_result *AddNetworkInterfaceToInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddNetworkInterfaceToInstanceResponse{}
	_body, _err := client.AddNetworkInterfaceToInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an elastic IP address (EIP) to a Source Network Address Translation (SNAT) entry.
//
// @param request - AddSnatIpForSnatEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddSnatIpForSnatEntryResponse
func (client *Client) AddSnatIpForSnatEntryWithOptions(request *AddSnatIpForSnatEntryRequest, runtime *util.RuntimeOptions) (_result *AddSnatIpForSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SnatEntryId)) {
		query["SnatEntryId"] = request.SnatEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.SnatIp)) {
		query["SnatIp"] = request.SnatIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddSnatIpForSnatEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AddSnatIpForSnatEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AddSnatIpForSnatEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds an elastic IP address (EIP) to a Source Network Address Translation (SNAT) entry.
//
// @param request - AddSnatIpForSnatEntryRequest
//
// @return AddSnatIpForSnatEntryResponse
func (client *Client) AddSnatIpForSnatEntry(request *AddSnatIpForSnatEntryRequest) (_result *AddSnatIpForSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddSnatIpForSnatEntryResponse{}
	_body, _err := client.AddSnatIpForSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Assigns secondary private IP addresses to an elastic network interface (ENI).
//
// @param request - AssignPrivateIpAddressesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AssignPrivateIpAddressesResponse
func (client *Client) AssignPrivateIpAddressesWithOptions(request *AssignPrivateIpAddressesRequest, runtime *util.RuntimeOptions) (_result *AssignPrivateIpAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssignPrivateIpAddresses"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AssignPrivateIpAddressesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AssignPrivateIpAddressesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Assigns secondary private IP addresses to an elastic network interface (ENI).
//
// @param request - AssignPrivateIpAddressesRequest
//
// @return AssignPrivateIpAddressesResponse
func (client *Client) AssignPrivateIpAddresses(request *AssignPrivateIpAddressesRequest) (_result *AssignPrivateIpAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssignPrivateIpAddressesResponse{}
	_body, _err := client.AssignPrivateIpAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Associates an elastic IP address (EIP) with a cloud resource that is deployed in the same region.
//
// @param request - AssociateEnsEipAddressRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AssociateEnsEipAddressResponse
func (client *Client) AssociateEnsEipAddressWithOptions(request *AssociateEnsEipAddressRequest, runtime *util.RuntimeOptions) (_result *AssociateEnsEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllocationId)) {
		query["AllocationId"] = request.AllocationId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.Standby)) {
		query["Standby"] = request.Standby
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssociateEnsEipAddress"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AssociateEnsEipAddressResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AssociateEnsEipAddressResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Associates an elastic IP address (EIP) with a cloud resource that is deployed in the same region.
//
// @param request - AssociateEnsEipAddressRequest
//
// @return AssociateEnsEipAddressResponse
func (client *Client) AssociateEnsEipAddress(request *AssociateEnsEipAddressRequest) (_result *AssociateEnsEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateEnsEipAddressResponse{}
	_body, _err := client.AssociateEnsEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Associates a high-availability virtual IP address (HAVIP) with an Edge Node Service (ENS) instance or elastic network interface (ENI).
//
// Description:
//
// When you call this operation to associate an HAVIP, take note of the following items:
//
//   - An HAVIP immediately takes effect after it is associated. You do not need to restart the ENS instance. However, you need to associate the HAVIP with the ENI of the ENS instance.
//
//   - The HAVIP and ENS instance must belong to the same vSwitch.
//
//   - The ENS instance must be in the Running or Stopped state.
//
//   - The HAVIP must be in the Available or InUse state.
//
//   - AssociateHaVip is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the DescribeHaVips operation to query the status of an HAVIP:
//
//   - If the HAVIP is in the Associating state, the HAVIP is being associated.
//
//     <!---->
//
//   - If the HAVIP is in the InUse state, the HAVIP is associated.
//
// @param request - AssociateHaVipRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AssociateHaVipResponse
func (client *Client) AssociateHaVipWithOptions(request *AssociateHaVipRequest, runtime *util.RuntimeOptions) (_result *AssociateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HaVipId)) {
		query["HaVipId"] = request.HaVipId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssociateHaVip"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AssociateHaVipResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AssociateHaVipResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Associates a high-availability virtual IP address (HAVIP) with an Edge Node Service (ENS) instance or elastic network interface (ENI).
//
// Description:
//
// When you call this operation to associate an HAVIP, take note of the following items:
//
//   - An HAVIP immediately takes effect after it is associated. You do not need to restart the ENS instance. However, you need to associate the HAVIP with the ENI of the ENS instance.
//
//   - The HAVIP and ENS instance must belong to the same vSwitch.
//
//   - The ENS instance must be in the Running or Stopped state.
//
//   - The HAVIP must be in the Available or InUse state.
//
//   - AssociateHaVip is an asynchronous operation. After a request is sent, the system returns a request ID and runs the task in the background. You can call the DescribeHaVips operation to query the status of an HAVIP:
//
//   - If the HAVIP is in the Associating state, the HAVIP is being associated.
//
//     <!---->
//
//   - If the HAVIP is in the InUse state, the HAVIP is associated.
//
// @param request - AssociateHaVipRequest
//
// @return AssociateHaVipResponse
func (client *Client) AssociateHaVip(request *AssociateHaVipRequest) (_result *AssociateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateHaVipResponse{}
	_body, _err := client.AssociateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Attaches a disk to an Edge Node Service (ENS) instance.
//
// @param request - AttachDiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachDiskResponse
func (client *Client) AttachDiskWithOptions(request *AttachDiskRequest, runtime *util.RuntimeOptions) (_result *AttachDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeleteWithInstance)) {
		query["DeleteWithInstance"] = request.DeleteWithInstance
	}

	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachDiskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachDiskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Attaches a disk to an Edge Node Service (ENS) instance.
//
// @param request - AttachDiskRequest
//
// @return AttachDiskResponse
func (client *Client) AttachDisk(request *AttachDiskRequest) (_result *AttachDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachDiskResponse{}
	_body, _err := client.AttachDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an Edge Node Service (ENS) instance to Container Service for Kubernetes (ACK).
//
// Description:
//
// # [](#)Usage notes
//
//   - You can call this operation up to 10 times per second per account.
//
//   - After you execute the command, the instance restarts loading.
//
//   - Limits: The instance has at least two vCPUs and 4 GB memory. An image of CentOS 7.4 or later is required.
//
// @param request - AttachEnsInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachEnsInstancesResponse
func (client *Client) AttachEnsInstancesWithOptions(request *AttachEnsInstancesRequest, runtime *util.RuntimeOptions) (_result *AttachEnsInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Scripts)) {
		query["Scripts"] = request.Scripts
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachEnsInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachEnsInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachEnsInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds an Edge Node Service (ENS) instance to Container Service for Kubernetes (ACK).
//
// Description:
//
// # [](#)Usage notes
//
//   - You can call this operation up to 10 times per second per account.
//
//   - After you execute the command, the instance restarts loading.
//
//   - Limits: The instance has at least two vCPUs and 4 GB memory. An image of CentOS 7.4 or later is required.
//
// @param request - AttachEnsInstancesRequest
//
// @return AttachEnsInstancesResponse
func (client *Client) AttachEnsInstances(request *AttachEnsInstancesRequest) (_result *AttachEnsInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachEnsInstancesResponse{}
	_body, _err := client.AttachEnsInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Attaches a shared data group (SDG) to the corresponding Android in Container (AIC) instance.
//
// @param tmpReq - AttachInstanceSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachInstanceSDGResponse
func (client *Client) AttachInstanceSDGWithOptions(tmpReq *AttachInstanceSDGRequest, runtime *util.RuntimeOptions) (_result *AttachInstanceSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AttachInstanceSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SDGId)) {
		query["SDGId"] = request.SDGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachInstanceSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachInstanceSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachInstanceSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Attaches a shared data group (SDG) to the corresponding Android in Container (AIC) instance.
//
// @param request - AttachInstanceSDGRequest
//
// @return AttachInstanceSDGResponse
func (client *Client) AttachInstanceSDG(request *AttachInstanceSDGRequest) (_result *AttachInstanceSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachInstanceSDGResponse{}
	_body, _err := client.AttachInstanceSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Attaches an Elastic Network Interface (ENI) to an Edge Node Service (ECS) instance.
//
// Description:
//
// When you call this operation, take note of the following limits:
//
//   - The ENI must be in the Available state.
//
//   - An ENI can be attached to only one instance that is the same zone and the same Virtual Private Cloud (VPC).
//
//   - The instance must be in the Stopped state.
//
//   - A maximum of 10 ENIs can be attached to an instance.
//
//   - This operation is an asynchronous operation. After you call this operation to attach an ENI, you can view the status of the ENI to check whether the ENI is attached.
//
// @param request - AttachNetworkInterfaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachNetworkInterfaceResponse
func (client *Client) AttachNetworkInterfaceWithOptions(request *AttachNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *AttachNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachNetworkInterface"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AttachNetworkInterfaceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AttachNetworkInterfaceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Attaches an Elastic Network Interface (ENI) to an Edge Node Service (ECS) instance.
//
// Description:
//
// When you call this operation, take note of the following limits:
//
//   - The ENI must be in the Available state.
//
//   - An ENI can be attached to only one instance that is the same zone and the same Virtual Private Cloud (VPC).
//
//   - The instance must be in the Stopped state.
//
//   - A maximum of 10 ENIs can be attached to an instance.
//
//   - This operation is an asynchronous operation. After you call this operation to attach an ENI, you can view the status of the ENI to check whether the ENI is attached.
//
// @param request - AttachNetworkInterfaceRequest
//
// @return AttachNetworkInterfaceResponse
func (client *Client) AttachNetworkInterface(request *AttachNetworkInterfaceRequest) (_result *AttachNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachNetworkInterfaceResponse{}
	_body, _err := client.AttachNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an inbound security group rule. This operation allows or denies the inbound traffic from other devices to instances in the security group.
//
// @param request - AuthorizeSecurityGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AuthorizeSecurityGroupResponse
func (client *Client) AuthorizeSecurityGroupWithOptions(request *AuthorizeSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *AuthorizeSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.PortRange)) {
		query["PortRange"] = request.PortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCidrIp)) {
		query["SourceCidrIp"] = request.SourceCidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AuthorizeSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AuthorizeSecurityGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AuthorizeSecurityGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an inbound security group rule. This operation allows or denies the inbound traffic from other devices to instances in the security group.
//
// @param request - AuthorizeSecurityGroupRequest
//
// @return AuthorizeSecurityGroupResponse
func (client *Client) AuthorizeSecurityGroup(request *AuthorizeSecurityGroupRequest) (_result *AuthorizeSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeSecurityGroupResponse{}
	_body, _err := client.AuthorizeSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an outbound security group rule. This operation allows or denies the outbound traffic from the instances in the security group to other devices.
//
// Description:
//
// In the security group-related API documents, outbound traffic refers to the traffic that is sent by the source device and received at the destination device.
//
// @param request - AuthorizeSecurityGroupEgressRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AuthorizeSecurityGroupEgressResponse
func (client *Client) AuthorizeSecurityGroupEgressWithOptions(request *AuthorizeSecurityGroupEgressRequest, runtime *util.RuntimeOptions) (_result *AuthorizeSecurityGroupEgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestCidrIp)) {
		query["DestCidrIp"] = request.DestCidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.PortRange)) {
		query["PortRange"] = request.PortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AuthorizeSecurityGroupEgress"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &AuthorizeSecurityGroupEgressResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &AuthorizeSecurityGroupEgressResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an outbound security group rule. This operation allows or denies the outbound traffic from the instances in the security group to other devices.
//
// Description:
//
// In the security group-related API documents, outbound traffic refers to the traffic that is sent by the source device and received at the destination device.
//
// @param request - AuthorizeSecurityGroupEgressRequest
//
// @return AuthorizeSecurityGroupEgressResponse
func (client *Client) AuthorizeSecurityGroupEgress(request *AuthorizeSecurityGroupEgressRequest) (_result *AuthorizeSecurityGroupEgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeSecurityGroupEgressResponse{}
	_body, _err := client.AuthorizeSecurityGroupEgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 清理分发数据
//
// @param request - CleanDistDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CleanDistDataResponse
func (client *Client) CleanDistDataWithOptions(request *CleanDistDataRequest, runtime *util.RuntimeOptions) (_result *CleanDistDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DataName)) {
		query["DataName"] = request.DataName
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersion)) {
		query["DataVersion"] = request.DataVersion
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CleanDistData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CleanDistDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CleanDistDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 清理分发数据
//
// @param request - CleanDistDataRequest
//
// @return CleanDistDataResponse
func (client *Client) CleanDistData(request *CleanDistDataRequest) (_result *CleanDistDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CleanDistDataResponse{}
	_body, _err := client.CleanDistDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Copies a shared data group (SDG) across nodes.
//
// @param tmpReq - CopySDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CopySDGResponse
func (client *Client) CopySDGWithOptions(tmpReq *CopySDGRequest, runtime *util.RuntimeOptions) (_result *CopySDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CopySDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DestinationRegionIds)) {
		request.DestinationRegionIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestinationRegionIds, tea.String("DestinationRegionIds"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CopySDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CopySDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CopySDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Copies a shared data group (SDG) across nodes.
//
// @param request - CopySDGRequest
//
// @return CopySDGResponse
func (client *Client) CopySDG(request *CopySDGRequest) (_result *CopySDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopySDGResponse{}
	_body, _err := client.CopySDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Copies a snapshot across nodes.
//
// @param tmpReq - CopySnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CopySnapshotResponse
func (client *Client) CopySnapshotWithOptions(tmpReq *CopySnapshotRequest, runtime *util.RuntimeOptions) (_result *CopySnapshotResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CopySnapshotShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DestinationRegionIds)) {
		request.DestinationRegionIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestinationRegionIds, tea.String("DestinationRegionIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationRegionIdsShrink)) {
		query["DestinationRegionIds"] = request.DestinationRegionIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationSnapshotDescription)) {
		query["DestinationSnapshotDescription"] = request.DestinationSnapshotDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationSnapshotName)) {
		query["DestinationSnapshotName"] = request.DestinationSnapshotName
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CopySnapshot"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CopySnapshotResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CopySnapshotResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Copies a snapshot across nodes.
//
// @param request - CopySnapshotRequest
//
// @return CopySnapshotResponse
func (client *Client) CopySnapshot(request *CopySnapshotRequest) (_result *CopySnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopySnapshotResponse{}
	_body, _err := client.CopySnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an ARM server.
//
// @param request - CreateARMServerInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateARMServerInstancesResponse
func (client *Client) CreateARMServerInstancesWithOptions(request *CreateARMServerInstancesRequest, runtime *util.RuntimeOptions) (_result *CreateARMServerInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.AutoUseCoupon)) {
		query["AutoUseCoupon"] = request.AutoUseCoupon
	}

	if !tea.BoolValue(util.IsUnset(request.Cidr)) {
		query["Cidr"] = request.Cidr
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnvironmentVar)) {
		query["EnvironmentVar"] = request.EnvironmentVar
	}

	if !tea.BoolValue(util.IsUnset(request.Frequency)) {
		query["Frequency"] = request.Frequency
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.NameSpace)) {
		query["NameSpace"] = request.NameSpace
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.Resolution)) {
		query["Resolution"] = request.Resolution
	}

	if !tea.BoolValue(util.IsUnset(request.ServerName)) {
		query["ServerName"] = request.ServerName
	}

	if !tea.BoolValue(util.IsUnset(request.ServerType)) {
		query["ServerType"] = request.ServerType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateARMServerInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateARMServerInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateARMServerInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an ARM server.
//
// @param request - CreateARMServerInstancesRequest
//
// @return CreateARMServerInstancesResponse
func (client *Client) CreateARMServerInstances(request *CreateARMServerInstancesRequest) (_result *CreateARMServerInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateARMServerInstancesResponse{}
	_body, _err := client.CreateARMServerInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an edge application that allows you to manage Edge Node Service (ENS) nodes in containers, bare metal instances, and virtual machines.
//
// @param request - CreateApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateApplicationResponse
func (client *Client) CreateApplicationWithOptions(request *CreateApplicationRequest, runtime *util.RuntimeOptions) (_result *CreateApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateApplicationResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateApplicationResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an edge application that allows you to manage Edge Node Service (ENS) nodes in containers, bare metal instances, and virtual machines.
//
// @param request - CreateApplicationRequest
//
// @return CreateApplicationResponse
func (client *Client) CreateApplication(request *CreateApplicationRequest) (_result *CreateApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateApplicationResponse{}
	_body, _err := client.CreateApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// # Creates a classic network
//
// @param request - CreateClassicNetworkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateClassicNetworkResponse
func (client *Client) CreateClassicNetworkWithOptions(request *CreateClassicNetworkRequest, runtime *util.RuntimeOptions) (_result *CreateClassicNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkName)) {
		query["NetworkName"] = request.NetworkName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateClassicNetwork"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateClassicNetworkResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateClassicNetworkResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// # Creates a classic network
//
// @param request - CreateClassicNetworkRequest
//
// @return CreateClassicNetworkResponse
func (client *Client) CreateClassicNetwork(request *CreateClassicNetworkRequest) (_result *CreateClassicNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClassicNetworkResponse{}
	_body, _err := client.CreateClassicNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Container Service for Kubernetes (ACK) edge cluster.
//
// Description:
//
//	  You can call this operation up to 10 times per second per account.
//
//		- Creating a cluster is an asynchronous operation. After this operation returns the response, it takes 10 to 20 minutes to initialize the cluster. You can call the DescribeCluster operation to query the cluster status. After you create a cluster, you can call the DescribeClusterKubeConfig operation to obtain the cluster certificate.
//
// @param request - CreateClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateClusterResponse
func (client *Client) CreateClusterWithOptions(request *CreateClusterRequest, runtime *util.RuntimeOptions) (_result *CreateClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterVersion)) {
		query["ClusterVersion"] = request.ClusterVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCluster"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateClusterResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateClusterResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a Container Service for Kubernetes (ACK) edge cluster.
//
// Description:
//
//	  You can call this operation up to 10 times per second per account.
//
//		- Creating a cluster is an asynchronous operation. After this operation returns the response, it takes 10 to 20 minutes to initialize the cluster. You can call the DescribeCluster operation to query the cluster status. After you create a cluster, you can call the DescribeClusterKubeConfig operation to obtain the cluster certificate.
//
// @param request - CreateClusterRequest
//
// @return CreateClusterResponse
func (client *Client) CreateCluster(request *CreateClusterRequest) (_result *CreateClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClusterResponse{}
	_body, _err := client.CreateClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a pay-as-you-go or subscription data disk.
//
// @param request - CreateDiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDiskResponse
func (client *Client) CreateDiskWithOptions(request *CreateDiskRequest, runtime *util.RuntimeOptions) (_result *CreateDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.DiskName)) {
		query["DiskName"] = request.DiskName
	}

	if !tea.BoolValue(util.IsUnset(request.Encrypted)) {
		query["Encrypted"] = request.Encrypted
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.KMSKeyId)) {
		query["KMSKeyId"] = request.KMSKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		query["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateDiskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateDiskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a pay-as-you-go or subscription data disk.
//
// @param request - CreateDiskRequest
//
// @return CreateDiskResponse
func (client *Client) CreateDisk(request *CreateDiskRequest) (_result *CreateDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiskResponse{}
	_body, _err := client.CreateDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Applies for an elastic IP address (EIP).
//
// Description:
//
//	  You can call this operation up to 5,000 times per second per account.
//
//		- You can call this operation up to 50 times per second per user.
//
// @param request - CreateEipInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEipInstanceResponse
func (client *Client) CreateEipInstanceWithOptions(request *CreateEipInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateEipInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEipInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateEipInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateEipInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Applies for an elastic IP address (EIP).
//
// Description:
//
//	  You can call this operation up to 5,000 times per second per account.
//
//		- You can call this operation up to 50 times per second per user.
//
// @param request - CreateEipInstanceRequest
//
// @return CreateEipInstanceResponse
func (client *Client) CreateEipInstance(request *CreateEipInstanceRequest) (_result *CreateEipInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEipInstanceResponse{}
	_body, _err := client.CreateEipInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a custom route entry.
//
// @param request - CreateEnsRouteEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEnsRouteEntryResponse
func (client *Client) CreateEnsRouteEntryWithOptions(request *CreateEnsRouteEntryRequest, runtime *util.RuntimeOptions) (_result *CreateEnsRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationCidrBlock)) {
		query["DestinationCidrBlock"] = request.DestinationCidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.NextHopId)) {
		query["NextHopId"] = request.NextHopId
	}

	if !tea.BoolValue(util.IsUnset(request.NextHopType)) {
		query["NextHopType"] = request.NextHopType
	}

	if !tea.BoolValue(util.IsUnset(request.RouteEntryName)) {
		query["RouteEntryName"] = request.RouteEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.RouteTableId)) {
		query["RouteTableId"] = request.RouteTableId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCidrBlock)) {
		query["SourceCidrBlock"] = request.SourceCidrBlock
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEnsRouteEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateEnsRouteEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateEnsRouteEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a custom route entry.
//
// @param request - CreateEnsRouteEntryRequest
//
// @return CreateEnsRouteEntryResponse
func (client *Client) CreateEnsRouteEntry(request *CreateEnsRouteEntryRequest) (_result *CreateEnsRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnsRouteEntryResponse{}
	_body, _err := client.CreateEnsRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建售卖约束
//
// @param tmpReq - CreateEnsSaleControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEnsSaleControlResponse
func (client *Client) CreateEnsSaleControlWithOptions(tmpReq *CreateEnsSaleControlRequest, runtime *util.RuntimeOptions) (_result *CreateEnsSaleControlResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateEnsSaleControlShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SaleControls)) {
		request.SaleControlsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SaleControls, tea.String("SaleControls"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUidAccount)) {
		query["AliUidAccount"] = request.AliUidAccount
	}

	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CustomAccount)) {
		query["CustomAccount"] = request.CustomAccount
	}

	if !tea.BoolValue(util.IsUnset(request.SaleControlsShrink)) {
		query["SaleControls"] = request.SaleControlsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEnsSaleControl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateEnsSaleControlResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateEnsSaleControlResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 创建售卖约束
//
// @param request - CreateEnsSaleControlRequest
//
// @return CreateEnsSaleControlResponse
func (client *Client) CreateEnsSaleControl(request *CreateEnsSaleControlRequest) (_result *CreateEnsSaleControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnsSaleControlResponse{}
	_body, _err := client.CreateEnsSaleControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an edge service.
//
// @param request - CreateEnsServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEnsServiceResponse
func (client *Client) CreateEnsServiceWithOptions(request *CreateEnsServiceRequest, runtime *util.RuntimeOptions) (_result *CreateEnsServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsServiceId)) {
		query["EnsServiceId"] = request.EnsServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEnsService"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateEnsServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateEnsServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an edge service.
//
// @param request - CreateEnsServiceRequest
//
// @return CreateEnsServiceResponse
func (client *Client) CreateEnsService(request *CreateEnsServiceRequest) (_result *CreateEnsServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnsServiceResponse{}
	_body, _err := client.CreateEnsServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an edge private network (EPN) instance.
//
// @param request - CreateEpnInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEpnInstanceResponse
func (client *Client) CreateEpnInstanceWithOptions(request *CreateEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceName)) {
		query["EPNInstanceName"] = request.EPNInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.EPNInstanceType)) {
		query["EPNInstanceType"] = request.EPNInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthOut)) {
		query["InternetMaxBandwidthOut"] = request.InternetMaxBandwidthOut
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkingModel)) {
		query["NetworkingModel"] = request.NetworkingModel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateEpnInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateEpnInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an edge private network (EPN) instance.
//
// @param request - CreateEpnInstanceRequest
//
// @return CreateEpnInstanceResponse
func (client *Client) CreateEpnInstance(request *CreateEpnInstanceRequest) (_result *CreateEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEpnInstanceResponse{}
	_body, _err := client.CreateEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a NAS file system.
//
// @param tmpReq - CreateFileSystemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFileSystemResponse
func (client *Client) CreateFileSystemWithOptions(tmpReq *CreateFileSystemRequest, runtime *util.RuntimeOptions) (_result *CreateFileSystemResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateFileSystemShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.OrderDetails)) {
		request.OrderDetailsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OrderDetails, tea.String("OrderDetails"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFileSystem"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateFileSystemResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateFileSystemResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a NAS file system.
//
// @param request - CreateFileSystemRequest
//
// @return CreateFileSystemResponse
func (client *Client) CreateFileSystem(request *CreateFileSystemRequest) (_result *CreateFileSystemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFileSystemResponse{}
	_body, _err := client.CreateFileSystemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a Destination Network Address Translation (DNAT) entry to a DNAT table.
//
// @param request - CreateForwardEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateForwardEntryResponse
func (client *Client) CreateForwardEntryWithOptions(request *CreateForwardEntryRequest, runtime *util.RuntimeOptions) (_result *CreateForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExternalIp)) {
		query["ExternalIp"] = request.ExternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalPort)) {
		query["ExternalPort"] = request.ExternalPort
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardEntryName)) {
		query["ForwardEntryName"] = request.ForwardEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckPort)) {
		query["HealthCheckPort"] = request.HealthCheckPort
	}

	if !tea.BoolValue(util.IsUnset(request.InternalIp)) {
		query["InternalIp"] = request.InternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.InternalPort)) {
		query["InternalPort"] = request.InternalPort
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.NatGatewayId)) {
		query["NatGatewayId"] = request.NatGatewayId
	}

	if !tea.BoolValue(util.IsUnset(request.StandbyExternalIp)) {
		query["StandbyExternalIp"] = request.StandbyExternalIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateForwardEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateForwardEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateForwardEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds a Destination Network Address Translation (DNAT) entry to a DNAT table.
//
// @param request - CreateForwardEntryRequest
//
// @return CreateForwardEntryResponse
func (client *Client) CreateForwardEntry(request *CreateForwardEntryRequest) (_result *CreateForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateForwardEntryResponse{}
	_body, _err := client.CreateForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建高可用VIP
//
// @param request - CreateHaVipRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateHaVipResponse
func (client *Client) CreateHaVipWithOptions(request *CreateHaVipRequest, runtime *util.RuntimeOptions) (_result *CreateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IpAddress)) {
		query["IpAddress"] = request.IpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateHaVip"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateHaVipResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateHaVipResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 创建高可用VIP
//
// @param request - CreateHaVipRequest
//
// @return CreateHaVipResponse
func (client *Client) CreateHaVip(request *CreateHaVipRequest) (_result *CreateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateHaVipResponse{}
	_body, _err := client.CreateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an image from an instance.
//
// @param request - CreateImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateImageResponse
func (client *Client) CreateImageWithOptions(request *CreateImageRequest, runtime *util.RuntimeOptions) (_result *CreateImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeleteAfterImageUpload)) {
		query["DeleteAfterImageUpload"] = request.DeleteAfterImageUpload
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetOSSRegionId)) {
		query["TargetOSSRegionId"] = request.TargetOSSRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.WithDataDisks)) {
		query["WithDataDisks"] = request.WithDataDisks
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateImage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateImageResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateImageResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an image from an instance.
//
// @param request - CreateImageRequest
//
// @return CreateImageResponse
func (client *Client) CreateImage(request *CreateImageRequest) (_result *CreateImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateImageResponse{}
	_body, _err := client.CreateImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an instance.
//
// Description:
//
//	  You can call this operation up to 10 times per second per account.
//
//		- We recommend that you increase the request time because instance creation is an asynchronous operation. If the return code of the API operation is 0, it indicates that the request is successful, but does not indicate that the instance is created. If the request is successful, an instance ID is returned. You can check whether the instance is created based on the instance ID.
//
//		- InvalidUserData.NotInWhiteList operation restriction: You can create an instance only if you are in the whitelist in which members have the purchase permissions. Otherwise, an error is returned.
//
// @param request - CreateInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateInstanceResponse
func (client *Client) CreateInstanceWithOptions(request *CreateInstanceRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenewPeriod)) {
		query["AutoRenewPeriod"] = request.AutoRenewPeriod
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.IpType)) {
		query["IpType"] = request.IpType
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.PasswordInherit)) {
		query["PasswordInherit"] = request.PasswordInherit
	}

	if !tea.BoolValue(util.IsUnset(request.PaymentType)) {
		query["PaymentType"] = request.PaymentType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIpAddress)) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.PublicIpIdentification)) {
		query["PublicIpIdentification"] = request.PublicIpIdentification
	}

	if !tea.BoolValue(util.IsUnset(request.Quantity)) {
		query["Quantity"] = request.Quantity
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueSuffix)) {
		query["UniqueSuffix"] = request.UniqueSuffix
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.DataDisk)) {
		query["DataDisk"] = request.DataDisk
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDisk)) {
		query["SystemDisk"] = request.SystemDisk
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an instance.
//
// Description:
//
//	  You can call this operation up to 10 times per second per account.
//
//		- We recommend that you increase the request time because instance creation is an asynchronous operation. If the return code of the API operation is 0, it indicates that the request is successful, but does not indicate that the instance is created. If the request is successful, an instance ID is returned. You can check whether the instance is created based on the instance ID.
//
//		- InvalidUserData.NotInWhiteList operation restriction: You can create an instance only if you are in the whitelist in which members have the purchase permissions. Otherwise, an error is returned.
//
// @param request - CreateInstanceRequest
//
// @return CreateInstanceResponse
func (client *Client) CreateInstance(request *CreateInstanceRequest) (_result *CreateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceResponse{}
	_body, _err := client.CreateInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 调用CreateInstanceOpsTask来针对一个实例或实例运维组发起运维任务
//
// @param tmpReq - CreateInstanceActiveOpsTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateInstanceActiveOpsTaskResponse
func (client *Client) CreateInstanceActiveOpsTaskWithOptions(tmpReq *CreateInstanceActiveOpsTaskRequest, runtime *util.RuntimeOptions) (_result *CreateInstanceActiveOpsTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateInstanceActiveOpsTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateInstanceActiveOpsTask"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateInstanceActiveOpsTaskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateInstanceActiveOpsTaskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 调用CreateInstanceOpsTask来针对一个实例或实例运维组发起运维任务
//
// @param request - CreateInstanceActiveOpsTaskRequest
//
// @return CreateInstanceActiveOpsTaskResponse
func (client *Client) CreateInstanceActiveOpsTask(request *CreateInstanceActiveOpsTaskRequest) (_result *CreateInstanceActiveOpsTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInstanceActiveOpsTaskResponse{}
	_body, _err := client.CreateInstanceActiveOpsTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an SSH key pair.
//
// Description:
//
// An SSH key pair consists of a public key and a private key. ENS stores the public key and returns the unencrypted private key that is PEM-encoded in the PKCS#8 format. You must securely lock away the private key.
//
// @param request - CreateKeyPairRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateKeyPairResponse
func (client *Client) CreateKeyPairWithOptions(request *CreateKeyPairRequest, runtime *util.RuntimeOptions) (_result *CreateKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateKeyPair"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateKeyPairResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateKeyPairResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an SSH key pair.
//
// Description:
//
// An SSH key pair consists of a public key and a private key. ENS stores the public key and returns the unencrypted private key that is PEM-encoded in the PKCS#8 format. You must securely lock away the private key.
//
// @param request - CreateKeyPairRequest
//
// @return CreateKeyPairResponse
func (client *Client) CreateKeyPair(request *CreateKeyPairRequest) (_result *CreateKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateKeyPairResponse{}
	_body, _err := client.CreateKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an Edge Load Balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 5 times per second per user.
//
// @param request - CreateLoadBalancerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLoadBalancerResponse
func (client *Client) CreateLoadBalancerWithOptions(request *CreateLoadBalancerRequest, runtime *util.RuntimeOptions) (_result *CreateLoadBalancerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerName)) {
		query["LoadBalancerName"] = request.LoadBalancerName
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerSpec)) {
		query["LoadBalancerSpec"] = request.LoadBalancerSpec
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLoadBalancer"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateLoadBalancerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateLoadBalancerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an Edge Load Balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 5 times per second per user.
//
// @param request - CreateLoadBalancerRequest
//
// @return CreateLoadBalancerResponse
func (client *Client) CreateLoadBalancer(request *CreateLoadBalancerRequest) (_result *CreateLoadBalancerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoadBalancerResponse{}
	_body, _err := client.CreateLoadBalancerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an HTTP listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - CreateLoadBalancerHTTPListenerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLoadBalancerHTTPListenerResponse
func (client *Client) CreateLoadBalancerHTTPListenerWithOptions(request *CreateLoadBalancerHTTPListenerRequest, runtime *util.RuntimeOptions) (_result *CreateLoadBalancerHTTPListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServerPort)) {
		query["BackendServerPort"] = request.BackendServerPort
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardPort)) {
		query["ForwardPort"] = request.ForwardPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheck)) {
		query["HealthCheck"] = request.HealthCheck
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckMethod)) {
		query["HealthCheckMethod"] = request.HealthCheckMethod
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckTimeout)) {
		query["HealthCheckTimeout"] = request.HealthCheckTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerForward)) {
		query["ListenerForward"] = request.ListenerForward
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestTimeout)) {
		query["RequestTimeout"] = request.RequestTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.XForwardedFor)) {
		query["XForwardedFor"] = request.XForwardedFor
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLoadBalancerHTTPListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateLoadBalancerHTTPListenerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateLoadBalancerHTTPListenerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an HTTP listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - CreateLoadBalancerHTTPListenerRequest
//
// @return CreateLoadBalancerHTTPListenerResponse
func (client *Client) CreateLoadBalancerHTTPListener(request *CreateLoadBalancerHTTPListenerRequest) (_result *CreateLoadBalancerHTTPListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoadBalancerHTTPListenerResponse{}
	_body, _err := client.CreateLoadBalancerHTTPListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an HTTPS listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - CreateLoadBalancerHTTPSListenerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLoadBalancerHTTPSListenerResponse
func (client *Client) CreateLoadBalancerHTTPSListenerWithOptions(request *CreateLoadBalancerHTTPSListenerRequest, runtime *util.RuntimeOptions) (_result *CreateLoadBalancerHTTPSListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServerPort)) {
		query["BackendServerPort"] = request.BackendServerPort
	}

	if !tea.BoolValue(util.IsUnset(request.Cookie)) {
		query["Cookie"] = request.Cookie
	}

	if !tea.BoolValue(util.IsUnset(request.CookieTimeout)) {
		query["CookieTimeout"] = request.CookieTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardPort)) {
		query["ForwardPort"] = request.ForwardPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheck)) {
		query["HealthCheck"] = request.HealthCheck
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckMethod)) {
		query["HealthCheckMethod"] = request.HealthCheckMethod
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckTimeout)) {
		query["HealthCheckTimeout"] = request.HealthCheckTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerForward)) {
		query["ListenerForward"] = request.ListenerForward
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestTimeout)) {
		query["RequestTimeout"] = request.RequestTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.ServerCertificateId)) {
		query["ServerCertificateId"] = request.ServerCertificateId
	}

	if !tea.BoolValue(util.IsUnset(request.StickySessionType)) {
		query["StickySessionType"] = request.StickySessionType
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLoadBalancerHTTPSListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateLoadBalancerHTTPSListenerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateLoadBalancerHTTPSListenerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an HTTPS listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - CreateLoadBalancerHTTPSListenerRequest
//
// @return CreateLoadBalancerHTTPSListenerResponse
func (client *Client) CreateLoadBalancerHTTPSListener(request *CreateLoadBalancerHTTPSListenerRequest) (_result *CreateLoadBalancerHTTPSListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoadBalancerHTTPSListenerResponse{}
	_body, _err := client.CreateLoadBalancerHTTPSListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Transmission Control Protocol (TCP) listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - CreateLoadBalancerTCPListenerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLoadBalancerTCPListenerResponse
func (client *Client) CreateLoadBalancerTCPListenerWithOptions(request *CreateLoadBalancerTCPListenerRequest, runtime *util.RuntimeOptions) (_result *CreateLoadBalancerTCPListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServerPort)) {
		query["BackendServerPort"] = request.BackendServerPort
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EipTransmit)) {
		query["EipTransmit"] = request.EipTransmit
	}

	if !tea.BoolValue(util.IsUnset(request.EstablishedTimeout)) {
		query["EstablishedTimeout"] = request.EstablishedTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectTimeout)) {
		query["HealthCheckConnectTimeout"] = request.HealthCheckConnectTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckType)) {
		query["HealthCheckType"] = request.HealthCheckType
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.PersistenceTimeout)) {
		query["PersistenceTimeout"] = request.PersistenceTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLoadBalancerTCPListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateLoadBalancerTCPListenerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateLoadBalancerTCPListenerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a Transmission Control Protocol (TCP) listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - CreateLoadBalancerTCPListenerRequest
//
// @return CreateLoadBalancerTCPListenerResponse
func (client *Client) CreateLoadBalancerTCPListener(request *CreateLoadBalancerTCPListenerRequest) (_result *CreateLoadBalancerTCPListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoadBalancerTCPListenerResponse{}
	_body, _err := client.CreateLoadBalancerTCPListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a User Datagram Protocol (UDP) listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - CreateLoadBalancerUDPListenerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLoadBalancerUDPListenerResponse
func (client *Client) CreateLoadBalancerUDPListenerWithOptions(request *CreateLoadBalancerUDPListenerRequest, runtime *util.RuntimeOptions) (_result *CreateLoadBalancerUDPListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServerPort)) {
		query["BackendServerPort"] = request.BackendServerPort
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EipTransmit)) {
		query["EipTransmit"] = request.EipTransmit
	}

	if !tea.BoolValue(util.IsUnset(request.EstablishedTimeout)) {
		query["EstablishedTimeout"] = request.EstablishedTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectTimeout)) {
		query["HealthCheckConnectTimeout"] = request.HealthCheckConnectTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckExp)) {
		query["HealthCheckExp"] = request.HealthCheckExp
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckReq)) {
		query["HealthCheckReq"] = request.HealthCheckReq
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLoadBalancerUDPListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateLoadBalancerUDPListenerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateLoadBalancerUDPListenerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a User Datagram Protocol (UDP) listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - CreateLoadBalancerUDPListenerRequest
//
// @return CreateLoadBalancerUDPListenerResponse
func (client *Client) CreateLoadBalancerUDPListener(request *CreateLoadBalancerUDPListenerRequest) (_result *CreateLoadBalancerUDPListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLoadBalancerUDPListenerResponse{}
	_body, _err := client.CreateLoadBalancerUDPListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a mount target.
//
// Description:
//
// ## [](#)Precautions
//
// After you call this operation, a mount target is not immediately created. Therefore, we recommend that you call the DescribeMountTargets operation to query the status of the mount target. If the mount target is in the Active state, you can then mount the file system. Otherwise, the file system may fail to be mounted.
//
// @param request - CreateMountTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMountTargetResponse
func (client *Client) CreateMountTargetWithOptions(request *CreateMountTargetRequest, runtime *util.RuntimeOptions) (_result *CreateMountTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.MountTargetName)) {
		query["MountTargetName"] = request.MountTargetName
	}

	if !tea.BoolValue(util.IsUnset(request.NetWorkId)) {
		query["NetWorkId"] = request.NetWorkId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMountTarget"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateMountTargetResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateMountTargetResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a mount target.
//
// Description:
//
// ## [](#)Precautions
//
// After you call this operation, a mount target is not immediately created. Therefore, we recommend that you call the DescribeMountTargets operation to query the status of the mount target. If the mount target is in the Active state, you can then mount the file system. Otherwise, the file system may fail to be mounted.
//
// @param request - CreateMountTargetRequest
//
// @return CreateMountTargetResponse
func (client *Client) CreateMountTarget(request *CreateMountTargetRequest) (_result *CreateMountTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMountTargetResponse{}
	_body, _err := client.CreateMountTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a network address translation (NAT) gateway.
//
// @param request - CreateNatGatewayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNatGatewayResponse
func (client *Client) CreateNatGatewayWithOptions(request *CreateNatGatewayRequest, runtime *util.RuntimeOptions) (_result *CreateNatGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceBillingCycle)) {
		query["InstanceBillingCycle"] = request.InstanceBillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNatGateway"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateNatGatewayResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateNatGatewayResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a network address translation (NAT) gateway.
//
// @param request - CreateNatGatewayRequest
//
// @return CreateNatGatewayResponse
func (client *Client) CreateNatGateway(request *CreateNatGatewayRequest) (_result *CreateNatGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNatGatewayResponse{}
	_body, _err := client.CreateNatGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a virtual private cloud (VPC).
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 5 times per second per user.
//
// @param request - CreateNetworkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNetworkResponse
func (client *Client) CreateNetworkWithOptions(request *CreateNetworkRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkName)) {
		query["NetworkName"] = request.NetworkName
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetwork"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateNetworkResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateNetworkResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a virtual private cloud (VPC).
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 5 times per second per user.
//
// @param request - CreateNetworkRequest
//
// @return CreateNetworkResponse
func (client *Client) CreateNetwork(request *CreateNetworkRequest) (_result *CreateNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkResponse{}
	_body, _err := client.CreateNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a network access control list (ACL).
//
// @param request - CreateNetworkAclRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNetworkAclResponse
func (client *Client) CreateNetworkAclWithOptions(request *CreateNetworkAclRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkAclName)) {
		query["NetworkAclName"] = request.NetworkAclName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetworkAcl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateNetworkAclResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateNetworkAclResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a network access control list (ACL).
//
// @param request - CreateNetworkAclRequest
//
// @return CreateNetworkAclResponse
func (client *Client) CreateNetworkAcl(request *CreateNetworkAclRequest) (_result *CreateNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkAclResponse{}
	_body, _err := client.CreateNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a network access control list (ACL) rule.
//
// @param request - CreateNetworkAclEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNetworkAclEntryResponse
func (client *Client) CreateNetworkAclEntryWithOptions(request *CreateNetworkAclEntryRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkAclEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		query["Direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkAclEntryName)) {
		query["NetworkAclEntryName"] = request.NetworkAclEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkAclId)) {
		query["NetworkAclId"] = request.NetworkAclId
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.PortRange)) {
		query["PortRange"] = request.PortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		query["Protocol"] = request.Protocol
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetworkAclEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateNetworkAclEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateNetworkAclEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a network access control list (ACL) rule.
//
// @param request - CreateNetworkAclEntryRequest
//
// @return CreateNetworkAclEntryResponse
func (client *Client) CreateNetworkAclEntry(request *CreateNetworkAclEntryRequest) (_result *CreateNetworkAclEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkAclEntryResponse{}
	_body, _err := client.CreateNetworkAclEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建弹性网卡
//
// @param tmpReq - CreateNetworkInterfaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNetworkInterfaceResponse
func (client *Client) CreateNetworkInterfaceWithOptions(tmpReq *CreateNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateNetworkInterfaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SecurityGroupIds)) {
		request.SecurityGroupIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SecurityGroupIds, tea.String("SecurityGroupIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupIdsShrink)) {
		query["SecurityGroupIds"] = request.SecurityGroupIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetworkInterface"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateNetworkInterfaceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateNetworkInterfaceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 创建弹性网卡
//
// @param request - CreateNetworkInterfaceRequest
//
// @return CreateNetworkInterfaceResponse
func (client *Client) CreateNetworkInterface(request *CreateNetworkInterfaceRequest) (_result *CreateNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkInterfaceResponse{}
	_body, _err := client.CreateNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a shared data group (SDG) on an Android in Container (AIC) instance.
//
// Description:
//
// A SDG can be regarded as a data partition image of a virtual device. You can save a data partition of a virtual device as an SDG. A created SDG can be deployed in data partitions of other virtual devices to achieve rapid data distribution and application. The procedure for calling SDG-related API operations:
//
//   - Call the [CreateSDG](~~CreateSDG~~) operation to create an SDG, which is bound to AIC Instance A (InstanceId). After you create the SDG, a blank cloud disk (also known as an original cloud disk) is attached to Device A (InstanceId).
//
//   - Install applications on and deliver files to AIC Instance A (InstanceId).
//
//   - Call the [SaveSDG](~~SaveSDG~~) operation to save the data disk of AIC instance A as SDG A.
//
//   - Call the [DeploySDG](~~DeploySDG~~) operation to deploy SDG A to AIC Instance B. This operattion is executed asynchronously. You can call the [DescribeARMServerInstances](~~DescribeARMServerInstances~~) operation to query the status of AIC Instance B. If the status of AIC Instance B changes to success, AIC insance B is available, and AIC Instances A and B have the same applications running.
//
// @param request - CreateSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSDGResponse
func (client *Client) CreateSDGWithOptions(request *CreateSDGRequest, runtime *util.RuntimeOptions) (_result *CreateSDGResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a shared data group (SDG) on an Android in Container (AIC) instance.
//
// Description:
//
// A SDG can be regarded as a data partition image of a virtual device. You can save a data partition of a virtual device as an SDG. A created SDG can be deployed in data partitions of other virtual devices to achieve rapid data distribution and application. The procedure for calling SDG-related API operations:
//
//   - Call the [CreateSDG](~~CreateSDG~~) operation to create an SDG, which is bound to AIC Instance A (InstanceId). After you create the SDG, a blank cloud disk (also known as an original cloud disk) is attached to Device A (InstanceId).
//
//   - Install applications on and deliver files to AIC Instance A (InstanceId).
//
//   - Call the [SaveSDG](~~SaveSDG~~) operation to save the data disk of AIC instance A as SDG A.
//
//   - Call the [DeploySDG](~~DeploySDG~~) operation to deploy SDG A to AIC Instance B. This operattion is executed asynchronously. You can call the [DescribeARMServerInstances](~~DescribeARMServerInstances~~) operation to query the status of AIC Instance B. If the status of AIC Instance B changes to success, AIC insance B is available, and AIC Instances A and B have the same applications running.
//
// @param request - CreateSDGRequest
//
// @return CreateSDGResponse
func (client *Client) CreateSDG(request *CreateSDGRequest) (_result *CreateSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSDGResponse{}
	_body, _err := client.CreateSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a security group.
//
// @param tmpReq - CreateSecurityGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSecurityGroupResponse
func (client *Client) CreateSecurityGroupWithOptions(tmpReq *CreateSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *CreateSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSecurityGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Permissions)) {
		request.PermissionsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Permissions, tea.String("Permissions"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.PermissionsShrink)) {
		query["Permissions"] = request.PermissionsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupName)) {
		query["SecurityGroupName"] = request.SecurityGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateSecurityGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateSecurityGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a security group.
//
// @param request - CreateSecurityGroupRequest
//
// @return CreateSecurityGroupResponse
func (client *Client) CreateSecurityGroup(request *CreateSecurityGroupRequest) (_result *CreateSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSecurityGroupResponse{}
	_body, _err := client.CreateSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a snapshot.
//
// @param request - CreateSnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSnapshotResponse
func (client *Client) CreateSnapshotWithOptions(request *CreateSnapshotRequest, runtime *util.RuntimeOptions) (_result *CreateSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotName)) {
		query["SnapshotName"] = request.SnapshotName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSnapshot"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateSnapshotResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateSnapshotResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a snapshot.
//
// @param request - CreateSnapshotRequest
//
// @return CreateSnapshotResponse
func (client *Client) CreateSnapshot(request *CreateSnapshotRequest) (_result *CreateSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSnapshotResponse{}
	_body, _err := client.CreateSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds a source network address translation (SNAT) entry to a specified SNAT table.
//
// @param request - CreateSnatEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSnatEntryResponse
func (client *Client) CreateSnatEntryWithOptions(request *CreateSnatEntryRequest, runtime *util.RuntimeOptions) (_result *CreateSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EipAffinity)) {
		query["EipAffinity"] = request.EipAffinity
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.IspAffinity)) {
		query["IspAffinity"] = request.IspAffinity
	}

	if !tea.BoolValue(util.IsUnset(request.NatGatewayId)) {
		query["NatGatewayId"] = request.NatGatewayId
	}

	if !tea.BoolValue(util.IsUnset(request.SnatEntryName)) {
		query["SnatEntryName"] = request.SnatEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.SnatIp)) {
		query["SnatIp"] = request.SnatIp
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCIDR)) {
		query["SourceCIDR"] = request.SourceCIDR
	}

	if !tea.BoolValue(util.IsUnset(request.SourceNetworkId)) {
		query["SourceNetworkId"] = request.SourceNetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceVSwitchId)) {
		query["SourceVSwitchId"] = request.SourceVSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.StandbySnatIp)) {
		query["StandbySnatIp"] = request.StandbySnatIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSnatEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateSnatEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateSnatEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds a source network address translation (SNAT) entry to a specified SNAT table.
//
// @param request - CreateSnatEntryRequest
//
// @return CreateSnatEntryResponse
func (client *Client) CreateSnatEntry(request *CreateSnatEntryRequest) (_result *CreateSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSnatEntryResponse{}
	_body, _err := client.CreateSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a storage gateway.
//
// @param tmpReq - CreateStorageGatewayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateStorageGatewayResponse
func (client *Client) CreateStorageGatewayWithOptions(tmpReq *CreateStorageGatewayRequest, runtime *util.RuntimeOptions) (_result *CreateStorageGatewayResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateStorageGatewayShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.OrderDetails)) {
		request.OrderDetailsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OrderDetails, tea.String("OrderDetails"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderDetailsShrink)) {
		query["OrderDetails"] = request.OrderDetailsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateStorageGateway"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateStorageGatewayResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateStorageGatewayResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a storage gateway.
//
// @param request - CreateStorageGatewayRequest
//
// @return CreateStorageGatewayResponse
func (client *Client) CreateStorageGateway(request *CreateStorageGatewayRequest) (_result *CreateStorageGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateStorageGatewayResponse{}
	_body, _err := client.CreateStorageGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a storage volume.
//
// @param request - CreateStorageVolumeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateStorageVolumeResponse
func (client *Client) CreateStorageVolumeWithOptions(request *CreateStorageVolumeRequest, runtime *util.RuntimeOptions) (_result *CreateStorageVolumeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthPassword)) {
		query["AuthPassword"] = request.AuthPassword
	}

	if !tea.BoolValue(util.IsUnset(request.AuthProtocol)) {
		query["AuthProtocol"] = request.AuthProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.AuthUser)) {
		query["AuthUser"] = request.AuthUser
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.GatewayId)) {
		query["GatewayId"] = request.GatewayId
	}

	if !tea.BoolValue(util.IsUnset(request.IsAuth)) {
		query["IsAuth"] = request.IsAuth
	}

	if !tea.BoolValue(util.IsUnset(request.IsEnable)) {
		query["IsEnable"] = request.IsEnable
	}

	if !tea.BoolValue(util.IsUnset(request.StorageId)) {
		query["StorageId"] = request.StorageId
	}

	if !tea.BoolValue(util.IsUnset(request.VolumeName)) {
		query["VolumeName"] = request.VolumeName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateStorageVolume"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateStorageVolumeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateStorageVolumeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates a storage volume.
//
// @param request - CreateStorageVolumeRequest
//
// @return CreateStorageVolumeResponse
func (client *Client) CreateStorageVolume(request *CreateStorageVolumeRequest) (_result *CreateStorageVolumeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateStorageVolumeResponse{}
	_body, _err := client.CreateStorageVolumeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// A vSwitch is created.
//
// @param request - CreateVSwitchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateVSwitchResponse
func (client *Client) CreateVSwitchWithOptions(request *CreateVSwitchRequest, runtime *util.RuntimeOptions) (_result *CreateVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchName)) {
		query["VSwitchName"] = request.VSwitchName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVSwitch"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &CreateVSwitchResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &CreateVSwitchResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// A vSwitch is created.
//
// @param request - CreateVSwitchRequest
//
// @return CreateVSwitchResponse
func (client *Client) CreateVSwitch(request *CreateVSwitchRequest) (_result *CreateVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateVSwitchResponse{}
	_body, _err := client.CreateVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases all containers and resource instances related to a specific application in an asynchronous manner.
//
// @param request - DeleteApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteApplicationResponse
func (client *Client) DeleteApplicationWithOptions(request *DeleteApplicationRequest, runtime *util.RuntimeOptions) (_result *DeleteApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteApplicationResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteApplicationResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Releases all containers and resource instances related to a specific application in an asynchronous manner.
//
// @param request - DeleteApplicationRequest
//
// @return DeleteApplicationResponse
func (client *Client) DeleteApplication(request *DeleteApplicationRequest) (_result *DeleteApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApplicationResponse{}
	_body, _err := client.DeleteApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a bucket.
//
// Description:
//
//	  Only the Alibaba Cloud Account ID owner of a bucket can delete the bucket from the account.
//
//		- You cannot delete buckets that store objects. You can only delete empty buckets.
//
// @param request - DeleteBucketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBucketResponse
func (client *Client) DeleteBucketWithOptions(request *DeleteBucketRequest, runtime *util.RuntimeOptions) (_result *DeleteBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBucket"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteBucketResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteBucketResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a bucket.
//
// Description:
//
//	  Only the Alibaba Cloud Account ID owner of a bucket can delete the bucket from the account.
//
//		- You cannot delete buckets that store objects. You can only delete empty buckets.
//
// @param request - DeleteBucketRequest
//
// @return DeleteBucketResponse
func (client *Client) DeleteBucket(request *DeleteBucketRequest) (_result *DeleteBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBucketResponse{}
	_body, _err := client.DeleteBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the lifecycle rules for objects in a bucket.
//
// @param request - DeleteBucketLifecycleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBucketLifecycleResponse
func (client *Client) DeleteBucketLifecycleWithOptions(request *DeleteBucketLifecycleRequest, runtime *util.RuntimeOptions) (_result *DeleteBucketLifecycleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBucketLifecycle"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteBucketLifecycleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteBucketLifecycleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes the lifecycle rules for objects in a bucket.
//
// @param request - DeleteBucketLifecycleRequest
//
// @return DeleteBucketLifecycleResponse
func (client *Client) DeleteBucketLifecycle(request *DeleteBucketLifecycleRequest) (_result *DeleteBucketLifecycleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBucketLifecycleResponse{}
	_body, _err := client.DeleteBucketLifecycleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a disk.
//
// Description:
//
// When you release a disk, the disk must be in the Available state.
//
// @param request - DeleteDiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDiskResponse
func (client *Client) DeleteDiskWithOptions(request *DeleteDiskRequest, runtime *util.RuntimeOptions) (_result *DeleteDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteDiskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteDiskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a disk.
//
// Description:
//
// When you release a disk, the disk must be in the Available state.
//
// @param request - DeleteDiskRequest
//
// @return DeleteDiskResponse
func (client *Client) DeleteDisk(request *DeleteDiskRequest) (_result *DeleteDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDiskResponse{}
	_body, _err := client.DeleteDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 调用DeleteEip删除后付费的弹性公网EIP实例。
//
// @param request - DeleteEipRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEipResponse
func (client *Client) DeleteEipWithOptions(request *DeleteEipRequest, runtime *util.RuntimeOptions) (_result *DeleteEipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEip"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteEipResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteEipResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 调用DeleteEip删除后付费的弹性公网EIP实例。
//
// @param request - DeleteEipRequest
//
// @return DeleteEipResponse
func (client *Client) DeleteEip(request *DeleteEipRequest) (_result *DeleteEipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEipResponse{}
	_body, _err := client.DeleteEipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a custom route entry.
//
// @param request - DeleteEnsRouteEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEnsRouteEntryResponse
func (client *Client) DeleteEnsRouteEntryWithOptions(request *DeleteEnsRouteEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteEnsRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RouteEntryId)) {
		query["RouteEntryId"] = request.RouteEntryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEnsRouteEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteEnsRouteEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteEnsRouteEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a custom route entry.
//
// @param request - DeleteEnsRouteEntryRequest
//
// @return DeleteEnsRouteEntryResponse
func (client *Client) DeleteEnsRouteEntry(request *DeleteEnsRouteEntryRequest) (_result *DeleteEnsRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnsRouteEntryResponse{}
	_body, _err := client.DeleteEnsRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除售卖约束的条件约束
//
// @param tmpReq - DeleteEnsSaleConditionControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEnsSaleConditionControlResponse
func (client *Client) DeleteEnsSaleConditionControlWithOptions(tmpReq *DeleteEnsSaleConditionControlRequest, runtime *util.RuntimeOptions) (_result *DeleteEnsSaleConditionControlResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteEnsSaleConditionControlShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SaleControls)) {
		request.SaleControlsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SaleControls, tea.String("SaleControls"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUidAccount)) {
		query["AliUidAccount"] = request.AliUidAccount
	}

	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CustomAccount)) {
		query["CustomAccount"] = request.CustomAccount
	}

	if !tea.BoolValue(util.IsUnset(request.SaleControlsShrink)) {
		query["SaleControls"] = request.SaleControlsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEnsSaleConditionControl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteEnsSaleConditionControlResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteEnsSaleConditionControlResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除售卖约束的条件约束
//
// @param request - DeleteEnsSaleConditionControlRequest
//
// @return DeleteEnsSaleConditionControlResponse
func (client *Client) DeleteEnsSaleConditionControl(request *DeleteEnsSaleConditionControlRequest) (_result *DeleteEnsSaleConditionControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnsSaleConditionControlResponse{}
	_body, _err := client.DeleteEnsSaleConditionControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除售卖约束基础约束
//
// @param tmpReq - DeleteEnsSaleControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEnsSaleControlResponse
func (client *Client) DeleteEnsSaleControlWithOptions(tmpReq *DeleteEnsSaleControlRequest, runtime *util.RuntimeOptions) (_result *DeleteEnsSaleControlResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteEnsSaleControlShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SaleControls)) {
		request.SaleControlsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SaleControls, tea.String("SaleControls"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUidAccount)) {
		query["AliUidAccount"] = request.AliUidAccount
	}

	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CustomAccount)) {
		query["CustomAccount"] = request.CustomAccount
	}

	if !tea.BoolValue(util.IsUnset(request.SaleControlsShrink)) {
		query["SaleControls"] = request.SaleControlsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEnsSaleControl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteEnsSaleControlResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteEnsSaleControlResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除售卖约束基础约束
//
// @param request - DeleteEnsSaleControlRequest
//
// @return DeleteEnsSaleControlResponse
func (client *Client) DeleteEnsSaleControl(request *DeleteEnsSaleControlRequest) (_result *DeleteEnsSaleControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnsSaleControlResponse{}
	_body, _err := client.DeleteEnsSaleControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an edge private network (EPN) instance.
//
// Description:
//
// You can delete an EPN instance only when the instance group information is empty.
//
// @param request - DeleteEpnInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEpnInstanceResponse
func (client *Client) DeleteEpnInstanceWithOptions(request *DeleteEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *DeleteEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteEpnInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteEpnInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes an edge private network (EPN) instance.
//
// Description:
//
// You can delete an EPN instance only when the instance group information is empty.
//
// @param request - DeleteEpnInstanceRequest
//
// @return DeleteEpnInstanceResponse
func (client *Client) DeleteEpnInstance(request *DeleteEpnInstanceRequest) (_result *DeleteEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEpnInstanceResponse{}
	_body, _err := client.DeleteEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a File Storage NAS file system.
//
// @param request - DeleteFileSystemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFileSystemResponse
func (client *Client) DeleteFileSystemWithOptions(request *DeleteFileSystemRequest, runtime *util.RuntimeOptions) (_result *DeleteFileSystemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFileSystem"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteFileSystemResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteFileSystemResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a File Storage NAS file system.
//
// @param request - DeleteFileSystemRequest
//
// @return DeleteFileSystemResponse
func (client *Client) DeleteFileSystem(request *DeleteFileSystemRequest) (_result *DeleteFileSystemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFileSystemResponse{}
	_body, _err := client.DeleteFileSystemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a Destination Network Address Translation (DNAT) entry from a specified DNAT table.
//
// @param request - DeleteForwardEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteForwardEntryResponse
func (client *Client) DeleteForwardEntryWithOptions(request *DeleteForwardEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ForwardEntryId)) {
		query["ForwardEntryId"] = request.ForwardEntryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteForwardEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteForwardEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteForwardEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a Destination Network Address Translation (DNAT) entry from a specified DNAT table.
//
// @param request - DeleteForwardEntryRequest
//
// @return DeleteForwardEntryResponse
func (client *Client) DeleteForwardEntry(request *DeleteForwardEntryRequest) (_result *DeleteForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteForwardEntryResponse{}
	_body, _err := client.DeleteForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除高可用VIP实例
//
// @param tmpReq - DeleteHaVipsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteHaVipsResponse
func (client *Client) DeleteHaVipsWithOptions(tmpReq *DeleteHaVipsRequest, runtime *util.RuntimeOptions) (_result *DeleteHaVipsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteHaVipsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.HaVipIds)) {
		request.HaVipIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.HaVipIds, tea.String("HaVipIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HaVipIdsShrink)) {
		query["HaVipIds"] = request.HaVipIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteHaVips"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteHaVipsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteHaVipsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除高可用VIP实例
//
// @param request - DeleteHaVipsRequest
//
// @return DeleteHaVipsResponse
func (client *Client) DeleteHaVips(request *DeleteHaVipsRequest) (_result *DeleteHaVipsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteHaVipsResponse{}
	_body, _err := client.DeleteHaVipsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a custom image.
//
// @param request - DeleteImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteImageResponse
func (client *Client) DeleteImageWithOptions(request *DeleteImageRequest, runtime *util.RuntimeOptions) (_result *DeleteImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteImage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteImageResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteImageResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a custom image.
//
// @param request - DeleteImageRequest
//
// @return DeleteImageResponse
func (client *Client) DeleteImage(request *DeleteImageRequest) (_result *DeleteImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteImageResponse{}
	_body, _err := client.DeleteImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes SSH key pairs.
//
// Description:
//
//	  After you delete an SSH key pair, you can no longer query the key pair by calling the DescribeKeyPairs operation.
//
//		- If you delete an SSH key pair that is bound to an Edge Node Service (ENS) instance, ENS no longer stores the SSH key pair. However, you can still use the key pair to access the instance. When you call the DescribeInstance operation to query instance information, no other information but the name of the key pair (**KeyPairName**) is returned.
//
// @param request - DeleteKeyPairsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteKeyPairsResponse
func (client *Client) DeleteKeyPairsWithOptions(request *DeleteKeyPairsRequest, runtime *util.RuntimeOptions) (_result *DeleteKeyPairsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyPairId)) {
		query["KeyPairId"] = request.KeyPairId
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteKeyPairs"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteKeyPairsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteKeyPairsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes SSH key pairs.
//
// Description:
//
//	  After you delete an SSH key pair, you can no longer query the key pair by calling the DescribeKeyPairs operation.
//
//		- If you delete an SSH key pair that is bound to an Edge Node Service (ENS) instance, ENS no longer stores the SSH key pair. However, you can still use the key pair to access the instance. When you call the DescribeInstance operation to query instance information, no other information but the name of the key pair (**KeyPairName**) is returned.
//
// @param request - DeleteKeyPairsRequest
//
// @return DeleteKeyPairsResponse
func (client *Client) DeleteKeyPairs(request *DeleteKeyPairsRequest) (_result *DeleteKeyPairsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteKeyPairsResponse{}
	_body, _err := client.DeleteKeyPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DeleteLoadBalancerListenerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLoadBalancerListenerResponse
func (client *Client) DeleteLoadBalancerListenerWithOptions(request *DeleteLoadBalancerListenerRequest, runtime *util.RuntimeOptions) (_result *DeleteLoadBalancerListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerProtocol)) {
		query["ListenerProtocol"] = request.ListenerProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLoadBalancerListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteLoadBalancerListenerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteLoadBalancerListenerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DeleteLoadBalancerListenerRequest
//
// @return DeleteLoadBalancerListenerResponse
func (client *Client) DeleteLoadBalancerListener(request *DeleteLoadBalancerListenerRequest) (_result *DeleteLoadBalancerListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLoadBalancerListenerResponse{}
	_body, _err := client.DeleteLoadBalancerListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a mount target.
//
// Description:
//
// After you delete a mount target, the mount target cannot be restored. Proceed with caution.
//
// @param request - DeleteMountTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMountTargetResponse
func (client *Client) DeleteMountTargetWithOptions(request *DeleteMountTargetRequest, runtime *util.RuntimeOptions) (_result *DeleteMountTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.MountTargetName)) {
		query["MountTargetName"] = request.MountTargetName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMountTarget"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteMountTargetResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteMountTargetResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a mount target.
//
// Description:
//
// After you delete a mount target, the mount target cannot be restored. Proceed with caution.
//
// @param request - DeleteMountTargetRequest
//
// @return DeleteMountTargetResponse
func (client *Client) DeleteMountTarget(request *DeleteMountTargetRequest) (_result *DeleteMountTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMountTargetResponse{}
	_body, _err := client.DeleteMountTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an Internet network address translation (NAT) gateway.
//
// @param request - DeleteNatGatewayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNatGatewayResponse
func (client *Client) DeleteNatGatewayWithOptions(request *DeleteNatGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteNatGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ForceDelete)) {
		query["ForceDelete"] = request.ForceDelete
	}

	if !tea.BoolValue(util.IsUnset(request.NatGatewayId)) {
		query["NatGatewayId"] = request.NatGatewayId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNatGateway"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteNatGatewayResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteNatGatewayResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes an Internet network address translation (NAT) gateway.
//
// @param request - DeleteNatGatewayRequest
//
// @return DeleteNatGatewayResponse
func (client *Client) DeleteNatGateway(request *DeleteNatGatewayRequest) (_result *DeleteNatGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNatGatewayResponse{}
	_body, _err := client.DeleteNatGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a virtual private cloud (VPC).
//
// @param request - DeleteNetworkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNetworkResponse
func (client *Client) DeleteNetworkWithOptions(request *DeleteNetworkRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetwork"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteNetworkResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteNetworkResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a virtual private cloud (VPC).
//
// @param request - DeleteNetworkRequest
//
// @return DeleteNetworkResponse
func (client *Client) DeleteNetwork(request *DeleteNetworkRequest) (_result *DeleteNetworkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkResponse{}
	_body, _err := client.DeleteNetworkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a network access control list (ACL).
//
// @param request - DeleteNetworkAclRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNetworkAclResponse
func (client *Client) DeleteNetworkAclWithOptions(request *DeleteNetworkAclRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkAclId)) {
		query["NetworkAclId"] = request.NetworkAclId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetworkAcl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteNetworkAclResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteNetworkAclResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a network access control list (ACL).
//
// @param request - DeleteNetworkAclRequest
//
// @return DeleteNetworkAclResponse
func (client *Client) DeleteNetworkAcl(request *DeleteNetworkAclRequest) (_result *DeleteNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkAclResponse{}
	_body, _err := client.DeleteNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a network access control list (ACL) rule.
//
// @param request - DeleteNetworkAclEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNetworkAclEntryResponse
func (client *Client) DeleteNetworkAclEntryWithOptions(request *DeleteNetworkAclEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkAclEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkAclEntryId)) {
		query["NetworkAclEntryId"] = request.NetworkAclEntryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetworkAclEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteNetworkAclEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteNetworkAclEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a network access control list (ACL) rule.
//
// @param request - DeleteNetworkAclEntryRequest
//
// @return DeleteNetworkAclEntryResponse
func (client *Client) DeleteNetworkAclEntry(request *DeleteNetworkAclEntryRequest) (_result *DeleteNetworkAclEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkAclEntryResponse{}
	_body, _err := client.DeleteNetworkAclEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除弹性网卡
//
// @param tmpReq - DeleteNetworkInterfacesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNetworkInterfacesResponse
func (client *Client) DeleteNetworkInterfacesWithOptions(tmpReq *DeleteNetworkInterfacesRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkInterfacesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteNetworkInterfacesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.NetworkInterfaceIds)) {
		request.NetworkInterfaceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.NetworkInterfaceIds, tea.String("NetworkInterfaceIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceIdsShrink)) {
		query["NetworkInterfaceIds"] = request.NetworkInterfaceIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetworkInterfaces"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteNetworkInterfacesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteNetworkInterfacesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 删除弹性网卡
//
// @param request - DeleteNetworkInterfacesRequest
//
// @return DeleteNetworkInterfacesResponse
func (client *Client) DeleteNetworkInterfaces(request *DeleteNetworkInterfacesRequest) (_result *DeleteNetworkInterfacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkInterfacesResponse{}
	_body, _err := client.DeleteNetworkInterfacesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an object.
//
// @param request - DeleteObjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteObjectResponse
func (client *Client) DeleteObjectWithOptions(request *DeleteObjectRequest, runtime *util.RuntimeOptions) (_result *DeleteObjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	if !tea.BoolValue(util.IsUnset(request.ObjectKey)) {
		query["ObjectKey"] = request.ObjectKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteObject"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteObjectResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteObjectResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes an object.
//
// @param request - DeleteObjectRequest
//
// @return DeleteObjectResponse
func (client *Client) DeleteObject(request *DeleteObjectRequest) (_result *DeleteObjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteObjectResponse{}
	_body, _err := client.DeleteObjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a shared data group (SDG).
//
// Description:
//
// If all the SDGs corresponding to the original disk are deleted, the original disk is automatically cleared.
//
// @param tmpReq - DeleteSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSDGResponse
func (client *Client) DeleteSDGWithOptions(tmpReq *DeleteSDGRequest, runtime *util.RuntimeOptions) (_result *DeleteSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SDGId)) {
		request.SDGIdShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SDGId, tea.String("SDGId"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SDGIdShrink)) {
		query["SDGId"] = request.SDGIdShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a shared data group (SDG).
//
// Description:
//
// If all the SDGs corresponding to the original disk are deleted, the original disk is automatically cleared.
//
// @param request - DeleteSDGRequest
//
// @return DeleteSDGResponse
func (client *Client) DeleteSDG(request *DeleteSDGRequest) (_result *DeleteSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSDGResponse{}
	_body, _err := client.DeleteSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a security group.
//
// Description:
//
// Before you delete a security group, make sure that no instances exist in the security group.
//
// @param request - DeleteSecurityGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSecurityGroupResponse
func (client *Client) DeleteSecurityGroupWithOptions(request *DeleteSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteSecurityGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteSecurityGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a security group.
//
// Description:
//
// Before you delete a security group, make sure that no instances exist in the security group.
//
// @param request - DeleteSecurityGroupRequest
//
// @return DeleteSecurityGroupResponse
func (client *Client) DeleteSecurityGroup(request *DeleteSecurityGroupRequest) (_result *DeleteSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSecurityGroupResponse{}
	_body, _err := client.DeleteSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a snapshot.
//
// @param request - DeleteSnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSnapshotResponse
func (client *Client) DeleteSnapshotWithOptions(request *DeleteSnapshotRequest, runtime *util.RuntimeOptions) (_result *DeleteSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSnapshot"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteSnapshotResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteSnapshotResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a snapshot.
//
// @param request - DeleteSnapshotRequest
//
// @return DeleteSnapshotResponse
func (client *Client) DeleteSnapshot(request *DeleteSnapshotRequest) (_result *DeleteSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnapshotResponse{}
	_body, _err := client.DeleteSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a source network address translation (SNAT) entry from a specified SNAT table.
//
// @param request - DeleteSnatEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSnatEntryResponse
func (client *Client) DeleteSnatEntryWithOptions(request *DeleteSnatEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SnatEntryId)) {
		query["SnatEntryId"] = request.SnatEntryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSnatEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteSnatEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteSnatEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a source network address translation (SNAT) entry from a specified SNAT table.
//
// @param request - DeleteSnatEntryRequest
//
// @return DeleteSnatEntryResponse
func (client *Client) DeleteSnatEntry(request *DeleteSnatEntryRequest) (_result *DeleteSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnatEntryResponse{}
	_body, _err := client.DeleteSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an elastic IP address (EIP) from a source network address translation (SNAT) entry.
//
// @param request - DeleteSnatIpForSnatEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSnatIpForSnatEntryResponse
func (client *Client) DeleteSnatIpForSnatEntryWithOptions(request *DeleteSnatIpForSnatEntryRequest, runtime *util.RuntimeOptions) (_result *DeleteSnatIpForSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SnatEntryId)) {
		query["SnatEntryId"] = request.SnatEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.SnatIp)) {
		query["SnatIp"] = request.SnatIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSnatIpForSnatEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteSnatIpForSnatEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteSnatIpForSnatEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes an elastic IP address (EIP) from a source network address translation (SNAT) entry.
//
// @param request - DeleteSnatIpForSnatEntryRequest
//
// @return DeleteSnatIpForSnatEntryResponse
func (client *Client) DeleteSnatIpForSnatEntry(request *DeleteSnatIpForSnatEntryRequest) (_result *DeleteSnatIpForSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnatIpForSnatEntryResponse{}
	_body, _err := client.DeleteSnatIpForSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a storage gateway.
//
// @param request - DeleteStorageGatewayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStorageGatewayResponse
func (client *Client) DeleteStorageGatewayWithOptions(request *DeleteStorageGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteStorageGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GatewayId)) {
		query["GatewayId"] = request.GatewayId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteStorageGateway"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteStorageGatewayResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteStorageGatewayResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a storage gateway.
//
// @param request - DeleteStorageGatewayRequest
//
// @return DeleteStorageGatewayResponse
func (client *Client) DeleteStorageGateway(request *DeleteStorageGatewayRequest) (_result *DeleteStorageGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStorageGatewayResponse{}
	_body, _err := client.DeleteStorageGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a storage volume.
//
// @param request - DeleteStorageVolumeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteStorageVolumeResponse
func (client *Client) DeleteStorageVolumeWithOptions(request *DeleteStorageVolumeRequest, runtime *util.RuntimeOptions) (_result *DeleteStorageVolumeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VolumeId)) {
		query["VolumeId"] = request.VolumeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteStorageVolume"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteStorageVolumeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteStorageVolumeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a storage volume.
//
// @param request - DeleteStorageVolumeRequest
//
// @return DeleteStorageVolumeResponse
func (client *Client) DeleteStorageVolume(request *DeleteStorageVolumeRequest) (_result *DeleteStorageVolumeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStorageVolumeResponse{}
	_body, _err := client.DeleteStorageVolumeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a vSwitch.
//
// Description:
//
// Before you delete a vSwitch, make sure that no instances exist in the vSwitch.
//
// @param request - DeleteVSwitchRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVSwitchResponse
func (client *Client) DeleteVSwitchWithOptions(request *DeleteVSwitchRequest, runtime *util.RuntimeOptions) (_result *DeleteVSwitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVSwitch"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeleteVSwitchResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeleteVSwitchResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a vSwitch.
//
// Description:
//
// Before you delete a vSwitch, make sure that no instances exist in the vSwitch.
//
// @param request - DeleteVSwitchRequest
//
// @return DeleteVSwitchResponse
func (client *Client) DeleteVSwitch(request *DeleteVSwitchRequest) (_result *DeleteVSwitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVSwitchResponse{}
	_body, _err := client.DeleteVSwitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deploys a shared data group (SDG) to compute instances.
//
// @param tmpReq - DeployInstanceSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeployInstanceSDGResponse
func (client *Client) DeployInstanceSDGWithOptions(tmpReq *DeployInstanceSDGRequest, runtime *util.RuntimeOptions) (_result *DeployInstanceSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeployInstanceSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeploymentType)) {
		query["DeploymentType"] = request.DeploymentType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SDGId)) {
		query["SDGId"] = request.SDGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeployInstanceSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeployInstanceSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeployInstanceSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deploys a shared data group (SDG) to compute instances.
//
// @param request - DeployInstanceSDGRequest
//
// @return DeployInstanceSDGResponse
func (client *Client) DeployInstanceSDG(request *DeployInstanceSDGRequest) (_result *DeployInstanceSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeployInstanceSDGResponse{}
	_body, _err := client.DeployInstanceSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deploys shared data groups (SDGs).
//
// @param tmpReq - DeploySDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeploySDGResponse
func (client *Client) DeploySDGWithOptions(tmpReq *DeploySDGRequest, runtime *util.RuntimeOptions) (_result *DeploySDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeploySDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeploySDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DeploySDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DeploySDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deploys shared data groups (SDGs).
//
// @param request - DeploySDGRequest
//
// @return DeploySDGResponse
func (client *Client) DeploySDG(request *DeploySDGRequest) (_result *DeploySDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeploySDGResponse{}
	_body, _err := client.DeploySDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about images of the Android in Container (AIC) instance.
//
// @param request - DescribeAICImagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAICImagesResponse
func (client *Client) DescribeAICImagesWithOptions(request *DescribeAICImagesRequest, runtime *util.RuntimeOptions) (_result *DescribeAICImagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageType)) {
		query["ImageType"] = request.ImageType
	}

	if !tea.BoolValue(util.IsUnset(request.ImageUrl)) {
		query["ImageUrl"] = request.ImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDate)) {
		query["MaxDate"] = request.MaxDate
	}

	if !tea.BoolValue(util.IsUnset(request.MinDate)) {
		query["MinDate"] = request.MinDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAICImages"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeAICImagesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeAICImagesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries information about images of the Android in Container (AIC) instance.
//
// @param request - DescribeAICImagesRequest
//
// @return DescribeAICImagesResponse
func (client *Client) DescribeAICImages(request *DescribeAICImagesRequest) (_result *DescribeAICImagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAICImagesResponse{}
	_body, _err := client.DescribeAICImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about ARM servers and Android in Container (AIC) instances.
//
// @param tmpReq - DescribeARMServerInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeARMServerInstancesResponse
func (client *Client) DescribeARMServerInstancesWithOptions(tmpReq *DescribeARMServerInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeARMServerInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeARMServerInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.AICSpecs)) {
		request.AICSpecsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AICSpecs, tea.String("AICSpecs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.EnsRegionIds)) {
		request.EnsRegionIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.EnsRegionIds, tea.String("EnsRegionIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ServerIds)) {
		request.ServerIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ServerIds, tea.String("ServerIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ServerSpecs)) {
		request.ServerSpecsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ServerSpecs, tea.String("ServerSpecs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.States)) {
		request.StatesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.States, tea.String("States"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeARMServerInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeARMServerInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeARMServerInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries information about ARM servers and Android in Container (AIC) instances.
//
// @param request - DescribeARMServerInstancesRequest
//
// @return DescribeARMServerInstancesResponse
func (client *Client) DescribeARMServerInstances(request *DescribeARMServerInstancesRequest) (_result *DescribeARMServerInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeARMServerInstancesResponse{}
	_body, _err := client.DescribeARMServerInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the basic properties, resources, and container status of an application.
//
// @param request - DescribeApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeApplicationResponse
func (client *Client) DescribeApplicationWithOptions(request *DescribeApplicationRequest, runtime *util.RuntimeOptions) (_result *DescribeApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AppVersions)) {
		query["AppVersions"] = request.AppVersions
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.OutDetailStatParams)) {
		query["OutDetailStatParams"] = request.OutDetailStatParams
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSelector)) {
		query["ResourceSelector"] = request.ResourceSelector
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeApplicationResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeApplicationResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the basic properties, resources, and container status of an application.
//
// @param request - DescribeApplicationRequest
//
// @return DescribeApplicationResponse
func (client *Client) DescribeApplication(request *DescribeApplicationRequest) (_result *DescribeApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApplicationResponse{}
	_body, _err := client.DescribeApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the resources that can be created.
//
// @param request - DescribeAvailableResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAvailableResourceResponse
func (client *Client) DescribeAvailableResourceWithOptions(runtime *util.RuntimeOptions) (_result *DescribeAvailableResourceResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeAvailableResource"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeAvailableResourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeAvailableResourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the resources that can be created.
//
// @return DescribeAvailableResourceResponse
func (client *Client) DescribeAvailableResource() (_result *DescribeAvailableResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableResourceResponse{}
	_body, _err := client.DescribeAvailableResourceWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the specifications of resources that you can purchase when you create an instance.
//
// @param request - DescribeAvailableResourceInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAvailableResourceInfoResponse
func (client *Client) DescribeAvailableResourceInfoWithOptions(runtime *util.RuntimeOptions) (_result *DescribeAvailableResourceInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeAvailableResourceInfo"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeAvailableResourceInfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeAvailableResourceInfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the specifications of resources that you can purchase when you create an instance.
//
// @return DescribeAvailableResourceInfoResponse
func (client *Client) DescribeAvailableResourceInfo() (_result *DescribeAvailableResourceInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAvailableResourceInfoResponse{}
	_body, _err := client.DescribeAvailableResourceInfoWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries available bandwidth metering methods.
//
// @param request - DescribeBandWithdChargeTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBandWithdChargeTypeResponse
func (client *Client) DescribeBandWithdChargeTypeWithOptions(runtime *util.RuntimeOptions) (_result *DescribeBandWithdChargeTypeResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeBandWithdChargeType"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeBandWithdChargeTypeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeBandWithdChargeTypeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries available bandwidth metering methods.
//
// @return DescribeBandWithdChargeTypeResponse
func (client *Client) DescribeBandWithdChargeType() (_result *DescribeBandWithdChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBandWithdChargeTypeResponse{}
	_body, _err := client.DescribeBandWithdChargeTypeWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the metering method for the bandwidth.
//
// @param request - DescribeBandwitdhByInternetChargeTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBandwitdhByInternetChargeTypeResponse
func (client *Client) DescribeBandwitdhByInternetChargeTypeWithOptions(request *DescribeBandwitdhByInternetChargeTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeBandwitdhByInternetChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBandwitdhByInternetChargeType"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeBandwitdhByInternetChargeTypeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeBandwitdhByInternetChargeTypeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the metering method for the bandwidth.
//
// @param request - DescribeBandwitdhByInternetChargeTypeRequest
//
// @return DescribeBandwitdhByInternetChargeTypeResponse
func (client *Client) DescribeBandwitdhByInternetChargeType(request *DescribeBandwitdhByInternetChargeTypeRequest) (_result *DescribeBandwitdhByInternetChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBandwitdhByInternetChargeTypeResponse{}
	_body, _err := client.DescribeBandwitdhByInternetChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the available resources in a region.
//
// @param request - DescribeCloudDiskAvailableResourceInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudDiskAvailableResourceInfoResponse
func (client *Client) DescribeCloudDiskAvailableResourceInfoWithOptions(runtime *util.RuntimeOptions) (_result *DescribeCloudDiskAvailableResourceInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudDiskAvailableResourceInfo"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeCloudDiskAvailableResourceInfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeCloudDiskAvailableResourceInfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the available resources in a region.
//
// @return DescribeCloudDiskAvailableResourceInfoResponse
func (client *Client) DescribeCloudDiskAvailableResourceInfo() (_result *DescribeCloudDiskAvailableResourceInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudDiskAvailableResourceInfoResponse{}
	_body, _err := client.DescribeCloudDiskAvailableResourceInfoWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The specifications of available resources are queried when you create a disk.
//
// @param tmpReq - DescribeCloudDiskTypesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudDiskTypesResponse
func (client *Client) DescribeCloudDiskTypesWithOptions(tmpReq *DescribeCloudDiskTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudDiskTypesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeCloudDiskTypesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.EnsRegionIds)) {
		request.EnsRegionIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.EnsRegionIds, tea.String("EnsRegionIds"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudDiskTypes"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeCloudDiskTypesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeCloudDiskTypesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// The specifications of available resources are queried when you create a disk.
//
// @param request - DescribeCloudDiskTypesRequest
//
// @return DescribeCloudDiskTypesResponse
func (client *Client) DescribeCloudDiskTypes(request *DescribeCloudDiskTypesRequest) (_result *DescribeCloudDiskTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudDiskTypesResponse{}
	_body, _err := client.DescribeCloudDiskTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries Container Service for Kubernetes (ACK) edge clusters.
//
// Description:
//
//	You can call this operation up to 100 times per second per account.
//
// @param request - DescribeClusterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClusterResponse
func (client *Client) DescribeClusterWithOptions(request *DescribeClusterRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCluster"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeClusterResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeClusterResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries Container Service for Kubernetes (ACK) edge clusters.
//
// Description:
//
//	You can call this operation up to 100 times per second per account.
//
// @param request - DescribeClusterRequest
//
// @return DescribeClusterResponse
func (client *Client) DescribeCluster(request *DescribeClusterRequest) (_result *DescribeClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterResponse{}
	_body, _err := client.DescribeClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the certificate of a Container Service for Kubernetes (ACK) edge cluster.
//
// Description:
//
//	The maximum number of times that each user can call this operation per second is 100.
//
// @param request - DescribeClusterKubeConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClusterKubeConfigResponse
func (client *Client) DescribeClusterKubeConfigWithOptions(request *DescribeClusterKubeConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterKubeConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterKubeConfig"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeClusterKubeConfigResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeClusterKubeConfigResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the certificate of a Container Service for Kubernetes (ACK) edge cluster.
//
// Description:
//
//	The maximum number of times that each user can call this operation per second is 100.
//
// @param request - DescribeClusterKubeConfigRequest
//
// @return DescribeClusterKubeConfigResponse
func (client *Client) DescribeClusterKubeConfig(request *DescribeClusterKubeConfigRequest) (_result *DescribeClusterKubeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterKubeConfigResponse{}
	_body, _err := client.DescribeClusterKubeConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the results of creating an instance.
//
// @param request - DescribeCreatePrePaidInstanceResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCreatePrePaidInstanceResultResponse
func (client *Client) DescribeCreatePrePaidInstanceResultWithOptions(request *DescribeCreatePrePaidInstanceResultRequest, runtime *util.RuntimeOptions) (_result *DescribeCreatePrePaidInstanceResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCreatePrePaidInstanceResult"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeCreatePrePaidInstanceResultResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeCreatePrePaidInstanceResultResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the results of creating an instance.
//
// @param request - DescribeCreatePrePaidInstanceResultRequest
//
// @return DescribeCreatePrePaidInstanceResultResponse
func (client *Client) DescribeCreatePrePaidInstanceResult(request *DescribeCreatePrePaidInstanceResultRequest) (_result *DescribeCreatePrePaidInstanceResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCreatePrePaidInstanceResultResponse{}
	_body, _err := client.DescribeCreatePrePaidInstanceResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the distribution status of data files on edge instances of an application.
//
// @param tmpReq - DescribeDataDistResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataDistResultResponse
func (client *Client) DescribeDataDistResultWithOptions(tmpReq *DescribeDataDistResultRequest, runtime *util.RuntimeOptions) (_result *DescribeDataDistResultResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeDataDistResultShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.EnsRegionIds)) {
		request.EnsRegionIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.EnsRegionIds, tea.String("EnsRegionIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DataNames)) {
		query["DataNames"] = request.DataNames
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersions)) {
		query["DataVersions"] = request.DataVersions
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIdsShrink)) {
		query["EnsRegionIds"] = request.EnsRegionIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDate)) {
		query["MaxDate"] = request.MaxDate
	}

	if !tea.BoolValue(util.IsUnset(request.MinDate)) {
		query["MinDate"] = request.MinDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataDistResult"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDataDistResultResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDataDistResultResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the distribution status of data files on edge instances of an application.
//
// @param request - DescribeDataDistResultRequest
//
// @return DescribeDataDistResultResponse
func (client *Client) DescribeDataDistResult(request *DescribeDataDistResultRequest) (_result *DescribeDataDistResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataDistResultResponse{}
	_body, _err := client.DescribeDataDistResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the download URLs of application data on file servers and returns the file servers on which data is pushed.
//
// @param request - DescribeDataDownloadURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataDownloadURLResponse
func (client *Client) DescribeDataDownloadURLWithOptions(request *DescribeDataDownloadURLRequest, runtime *util.RuntimeOptions) (_result *DescribeDataDownloadURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataDownloadURL"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDataDownloadURLResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDataDownloadURLResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the download URLs of application data on file servers and returns the file servers on which data is pushed.
//
// @param request - DescribeDataDownloadURLRequest
//
// @return DescribeDataDownloadURLResponse
func (client *Client) DescribeDataDownloadURL(request *DescribeDataDownloadURLRequest) (_result *DescribeDataDownloadURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataDownloadURLResponse{}
	_body, _err := client.DescribeDataDownloadURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the push status of application data files on Edge Node Service (ENS) nodes.
//
// @param request - DescribeDataPushResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDataPushResultResponse
func (client *Client) DescribeDataPushResultWithOptions(request *DescribeDataPushResultRequest, runtime *util.RuntimeOptions) (_result *DescribeDataPushResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.DataNames)) {
		query["DataNames"] = request.DataNames
	}

	if !tea.BoolValue(util.IsUnset(request.DataVersions)) {
		query["DataVersions"] = request.DataVersions
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDate)) {
		query["MaxDate"] = request.MaxDate
	}

	if !tea.BoolValue(util.IsUnset(request.MinDate)) {
		query["MinDate"] = request.MinDate
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionIds)) {
		query["RegionIds"] = request.RegionIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDataPushResult"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDataPushResultResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDataPushResultResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the push status of application data files on Edge Node Service (ENS) nodes.
//
// @param request - DescribeDataPushResultRequest
//
// @return DescribeDataPushResultResponse
func (client *Client) DescribeDataPushResult(request *DescribeDataPushResultRequest) (_result *DescribeDataPushResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataPushResultResponse{}
	_body, _err := client.DescribeDataPushResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the properties of instances and virtual devices in a specific edge application.
//
// @param request - DescribeDeviceServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDeviceServiceResponse
func (client *Client) DescribeDeviceServiceWithOptions(request *DescribeDeviceServiceRequest, runtime *util.RuntimeOptions) (_result *DescribeDeviceServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDeviceService"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDeviceServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDeviceServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the properties of instances and virtual devices in a specific edge application.
//
// @param request - DescribeDeviceServiceRequest
//
// @return DescribeDeviceServiceResponse
func (client *Client) DescribeDeviceService(request *DescribeDeviceServiceRequest) (_result *DescribeDeviceServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDeviceServiceResponse{}
	_body, _err := client.DescribeDeviceServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the disk IOPS monitoring data.
//
// @param request - DescribeDiskIopsListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDiskIopsListResponse
func (client *Client) DescribeDiskIopsListWithOptions(request *DescribeDiskIopsListRequest, runtime *util.RuntimeOptions) (_result *DescribeDiskIopsListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiskIopsList"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDiskIopsListResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDiskIopsListResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the disk IOPS monitoring data.
//
// @param request - DescribeDiskIopsListRequest
//
// @return DescribeDiskIopsListResponse
func (client *Client) DescribeDiskIopsList(request *DescribeDiskIopsListRequest) (_result *DescribeDiskIopsListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiskIopsListResponse{}
	_body, _err := client.DescribeDiskIopsListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about one or more disks.
//
// @param request - DescribeDisksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDisksResponse
func (client *Client) DescribeDisksWithOptions(request *DescribeDisksRequest, runtime *util.RuntimeOptions) (_result *DescribeDisksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.DiskChargeType)) {
		query["DiskChargeType"] = request.DiskChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.DiskIds)) {
		query["DiskIds"] = request.DiskIds
	}

	if !tea.BoolValue(util.IsUnset(request.DiskName)) {
		query["DiskName"] = request.DiskName
	}

	if !tea.BoolValue(util.IsUnset(request.DiskType)) {
		query["DiskType"] = request.DiskType
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderByParams)) {
		query["OrderByParams"] = request.OrderByParams
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDisks"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeDisksResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeDisksResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about one or more disks.
//
// @param request - DescribeDisksRequest
//
// @return DescribeDisksResponse
func (client *Client) DescribeDisks(request *DescribeDisksRequest) (_result *DescribeDisksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDisksResponse{}
	_body, _err := client.DescribeDisksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the specifications of resources that you can purchase when you create an instance.
//
// @param request - DescribeElbAvailableResourceInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeElbAvailableResourceInfoResponse
func (client *Client) DescribeElbAvailableResourceInfoWithOptions(runtime *util.RuntimeOptions) (_result *DescribeElbAvailableResourceInfoResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeElbAvailableResourceInfo"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeElbAvailableResourceInfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeElbAvailableResourceInfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the specifications of resources that you can purchase when you create an instance.
//
// @return DescribeElbAvailableResourceInfoResponse
func (client *Client) DescribeElbAvailableResourceInfo() (_result *DescribeElbAvailableResourceInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeElbAvailableResourceInfoResponse{}
	_body, _err := client.DescribeElbAvailableResourceInfoWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 描述商品code
//
// @param request - DescribeEnsCommodityCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsCommodityCodeResponse
func (client *Client) DescribeEnsCommodityCodeWithOptions(request *DescribeEnsCommodityCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsCommodityCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsCommodityCode"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsCommodityCodeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsCommodityCodeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 描述商品code
//
// @param request - DescribeEnsCommodityCodeRequest
//
// @return DescribeEnsCommodityCodeResponse
func (client *Client) DescribeEnsCommodityCode(request *DescribeEnsCommodityCodeRequest) (_result *DescribeEnsCommodityCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsCommodityCodeResponse{}
	_body, _err := client.DescribeEnsCommodityCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取模块code
//
// @param request - DescribeEnsCommodityModuleCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsCommodityModuleCodeResponse
func (client *Client) DescribeEnsCommodityModuleCodeWithOptions(request *DescribeEnsCommodityModuleCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsCommodityModuleCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.ModuleCode)) {
		query["ModuleCode"] = request.ModuleCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsCommodityModuleCode"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsCommodityModuleCodeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsCommodityModuleCodeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取模块code
//
// @param request - DescribeEnsCommodityModuleCodeRequest
//
// @return DescribeEnsCommodityModuleCodeResponse
func (client *Client) DescribeEnsCommodityModuleCode(request *DescribeEnsCommodityModuleCodeRequest) (_result *DescribeEnsCommodityModuleCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsCommodityModuleCodeResponse{}
	_body, _err := client.DescribeEnsCommodityModuleCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries elastic IP addresses (EIPs).
//
// @param request - DescribeEnsEipAddressesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsEipAddressesResponse
func (client *Client) DescribeEnsEipAddressesWithOptions(request *DescribeEnsEipAddressesRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsEipAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllocationId)) {
		query["AllocationId"] = request.AllocationId
	}

	if !tea.BoolValue(util.IsUnset(request.AssociatedInstanceId)) {
		query["AssociatedInstanceId"] = request.AssociatedInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.AssociatedInstanceType)) {
		query["AssociatedInstanceType"] = request.AssociatedInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.EipAddress)) {
		query["EipAddress"] = request.EipAddress
	}

	if !tea.BoolValue(util.IsUnset(request.EipName)) {
		query["EipName"] = request.EipName
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Standby)) {
		query["Standby"] = request.Standby
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsEipAddresses"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsEipAddressesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsEipAddressesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries elastic IP addresses (EIPs).
//
// @param request - DescribeEnsEipAddressesRequest
//
// @return DescribeEnsEipAddressesResponse
func (client *Client) DescribeEnsEipAddresses(request *DescribeEnsEipAddressesRequest) (_result *DescribeEnsEipAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsEipAddressesResponse{}
	_body, _err := client.DescribeEnsEipAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries regions in which ENS resources can be created.
//
// @param request - DescribeEnsNetDistrictRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsNetDistrictResponse
func (client *Client) DescribeEnsNetDistrictWithOptions(request *DescribeEnsNetDistrictRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsNetDistrictResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetDistrictCode)) {
		query["NetDistrictCode"] = request.NetDistrictCode
	}

	if !tea.BoolValue(util.IsUnset(request.NetLevelCode)) {
		query["NetLevelCode"] = request.NetLevelCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsNetDistrict"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsNetDistrictResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsNetDistrictResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries regions in which ENS resources can be created.
//
// @param request - DescribeEnsNetDistrictRequest
//
// @return DescribeEnsNetDistrictResponse
func (client *Client) DescribeEnsNetDistrict(request *DescribeEnsNetDistrictRequest) (_result *DescribeEnsNetDistrictResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsNetDistrictResponse{}
	_body, _err := client.DescribeEnsNetDistrictWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the supported network levels.
//
// @param request - DescribeEnsNetLevelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsNetLevelResponse
func (client *Client) DescribeEnsNetLevelWithOptions(runtime *util.RuntimeOptions) (_result *DescribeEnsNetLevelResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsNetLevel"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsNetLevelResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsNetLevelResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the supported network levels.
//
// @return DescribeEnsNetLevelResponse
func (client *Client) DescribeEnsNetLevel() (_result *DescribeEnsNetLevelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsNetLevelResponse{}
	_body, _err := client.DescribeEnsNetLevelWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about ISPs and number of ISPs in an area.
//
// @param request - DescribeEnsNetSaleDistrictRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsNetSaleDistrictResponse
func (client *Client) DescribeEnsNetSaleDistrictWithOptions(request *DescribeEnsNetSaleDistrictRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsNetSaleDistrictResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetDistrictCode)) {
		query["NetDistrictCode"] = request.NetDistrictCode
	}

	if !tea.BoolValue(util.IsUnset(request.NetLevelCode)) {
		query["NetLevelCode"] = request.NetLevelCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsNetSaleDistrict"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsNetSaleDistrictResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsNetSaleDistrictResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about ISPs and number of ISPs in an area.
//
// @param request - DescribeEnsNetSaleDistrictRequest
//
// @return DescribeEnsNetSaleDistrictResponse
func (client *Client) DescribeEnsNetSaleDistrict(request *DescribeEnsNetSaleDistrictRequest) (_result *DescribeEnsNetSaleDistrictResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsNetSaleDistrictResponse{}
	_body, _err := client.DescribeEnsNetSaleDistrictWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether a node supports IPv6.
//
// @param request - DescribeEnsRegionIdIpv6InfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsRegionIdIpv6InfoResponse
func (client *Client) DescribeEnsRegionIdIpv6InfoWithOptions(request *DescribeEnsRegionIdIpv6InfoRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsRegionIdIpv6InfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsRegionIdIpv6Info"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsRegionIdIpv6InfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsRegionIdIpv6InfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries whether a node supports IPv6.
//
// @param request - DescribeEnsRegionIdIpv6InfoRequest
//
// @return DescribeEnsRegionIdIpv6InfoResponse
func (client *Client) DescribeEnsRegionIdIpv6Info(request *DescribeEnsRegionIdIpv6InfoRequest) (_result *DescribeEnsRegionIdIpv6InfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsRegionIdIpv6InfoResponse{}
	_body, _err := client.DescribeEnsRegionIdIpv6InfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries node resources.
//
// Description:
//
// ***
//
// @param request - DescribeEnsRegionIdResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsRegionIdResourceResponse
func (client *Client) DescribeEnsRegionIdResourceWithOptions(request *DescribeEnsRegionIdResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsRegionIdResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.OrderByParams)) {
		query["OrderByParams"] = request.OrderByParams
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsRegionIdResource"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsRegionIdResourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsRegionIdResourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries node resources.
//
// Description:
//
// ***
//
// @param request - DescribeEnsRegionIdResourceRequest
//
// @return DescribeEnsRegionIdResourceResponse
func (client *Client) DescribeEnsRegionIdResource(request *DescribeEnsRegionIdResourceRequest) (_result *DescribeEnsRegionIdResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsRegionIdResourceResponse{}
	_body, _err := client.DescribeEnsRegionIdResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the Edge Node Service (ENS) nodes that you can use.
//
// @param request - DescribeEnsRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsRegionsResponse
func (client *Client) DescribeEnsRegionsWithOptions(request *DescribeEnsRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsRegions"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsRegionsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsRegionsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the Edge Node Service (ENS) nodes that you can use.
//
// @param request - DescribeEnsRegionsRequest
//
// @return DescribeEnsRegionsResponse
func (client *Client) DescribeEnsRegions(request *DescribeEnsRegionsRequest) (_result *DescribeEnsRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsRegionsResponse{}
	_body, _err := client.DescribeEnsRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the usage summary of ENS virtual machines (VMs), disks, and networks.
//
// @param request - DescribeEnsResourceUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsResourceUsageResponse
func (client *Client) DescribeEnsResourceUsageWithOptions(request *DescribeEnsResourceUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsResourceUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsResourceUsage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsResourceUsageResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsResourceUsageResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the usage summary of ENS virtual machines (VMs), disks, and networks.
//
// @param request - DescribeEnsResourceUsageRequest
//
// @return DescribeEnsResourceUsageResponse
func (client *Client) DescribeEnsResourceUsage(request *DescribeEnsResourceUsageRequest) (_result *DescribeEnsResourceUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsResourceUsageResponse{}
	_body, _err := client.DescribeEnsResourceUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries route entries.
//
// @param request - DescribeEnsRouteEntryListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsRouteEntryListResponse
func (client *Client) DescribeEnsRouteEntryListWithOptions(request *DescribeEnsRouteEntryListRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsRouteEntryListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationCidrBlock)) {
		query["DestinationCidrBlock"] = request.DestinationCidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.NextHopId)) {
		query["NextHopId"] = request.NextHopId
	}

	if !tea.BoolValue(util.IsUnset(request.NextHopType)) {
		query["NextHopType"] = request.NextHopType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RouteEntryId)) {
		query["RouteEntryId"] = request.RouteEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.RouteEntryName)) {
		query["RouteEntryName"] = request.RouteEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.RouteEntryType)) {
		query["RouteEntryType"] = request.RouteEntryType
	}

	if !tea.BoolValue(util.IsUnset(request.RouteTableId)) {
		query["RouteTableId"] = request.RouteTableId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsRouteEntryList"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsRouteEntryListResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsRouteEntryListResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries route entries.
//
// @param request - DescribeEnsRouteEntryListRequest
//
// @return DescribeEnsRouteEntryListResponse
func (client *Client) DescribeEnsRouteEntryList(request *DescribeEnsRouteEntryListRequest) (_result *DescribeEnsRouteEntryListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsRouteEntryListResponse{}
	_body, _err := client.DescribeEnsRouteEntryListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries route tables.
//
// @param request - DescribeEnsRouteTablesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsRouteTablesResponse
func (client *Client) DescribeEnsRouteTablesWithOptions(request *DescribeEnsRouteTablesRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsRouteTablesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssociateType)) {
		query["AssociateType"] = request.AssociateType
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RouteTableId)) {
		query["RouteTableId"] = request.RouteTableId
	}

	if !tea.BoolValue(util.IsUnset(request.RouteTableName)) {
		query["RouteTableName"] = request.RouteTableName
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsRouteTables"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsRouteTablesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsRouteTablesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries route tables.
//
// @param request - DescribeEnsRouteTablesRequest
//
// @return DescribeEnsRouteTablesResponse
func (client *Client) DescribeEnsRouteTables(request *DescribeEnsRouteTablesRequest) (_result *DescribeEnsRouteTablesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsRouteTablesResponse{}
	_body, _err := client.DescribeEnsRouteTablesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 展示配置的售卖约束信息
//
// @param request - DescribeEnsSaleControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsSaleControlResponse
func (client *Client) DescribeEnsSaleControlWithOptions(request *DescribeEnsSaleControlRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsSaleControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUidAccount)) {
		query["AliUidAccount"] = request.AliUidAccount
	}

	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CustomAccount)) {
		query["CustomAccount"] = request.CustomAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ModuleCode)) {
		query["ModuleCode"] = request.ModuleCode
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsSaleControl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsSaleControlResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsSaleControlResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 展示配置的售卖约束信息
//
// @param request - DescribeEnsSaleControlRequest
//
// @return DescribeEnsSaleControlResponse
func (client *Client) DescribeEnsSaleControl(request *DescribeEnsSaleControlRequest) (_result *DescribeEnsSaleControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsSaleControlResponse{}
	_body, _err := client.DescribeEnsSaleControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取可用资源
//
// @param request - DescribeEnsSaleControlAvailableResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsSaleControlAvailableResourceResponse
func (client *Client) DescribeEnsSaleControlAvailableResourceWithOptions(request *DescribeEnsSaleControlAvailableResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsSaleControlAvailableResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CustomAccount)) {
		query["CustomAccount"] = request.CustomAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsSaleControlAvailableResource"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsSaleControlAvailableResourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsSaleControlAvailableResourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取可用资源
//
// @param request - DescribeEnsSaleControlAvailableResourceRequest
//
// @return DescribeEnsSaleControlAvailableResourceResponse
func (client *Client) DescribeEnsSaleControlAvailableResource(request *DescribeEnsSaleControlAvailableResourceRequest) (_result *DescribeEnsSaleControlAvailableResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsSaleControlAvailableResourceResponse{}
	_body, _err := client.DescribeEnsSaleControlAvailableResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取售卖约束库存
//
// @param request - DescribeEnsSaleControlStockRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEnsSaleControlStockResponse
func (client *Client) DescribeEnsSaleControlStockWithOptions(request *DescribeEnsSaleControlStockRequest, runtime *util.RuntimeOptions) (_result *DescribeEnsSaleControlStockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUidAccount)) {
		query["AliUidAccount"] = request.AliUidAccount
	}

	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CustomAccount)) {
		query["CustomAccount"] = request.CustomAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ModuleCode)) {
		query["ModuleCode"] = request.ModuleCode
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEnsSaleControlStock"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEnsSaleControlStockResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEnsSaleControlStockResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取售卖约束库存
//
// @param request - DescribeEnsSaleControlStockRequest
//
// @return DescribeEnsSaleControlStockResponse
func (client *Client) DescribeEnsSaleControlStock(request *DescribeEnsSaleControlStockRequest) (_result *DescribeEnsSaleControlStockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEnsSaleControlStockResponse{}
	_body, _err := client.DescribeEnsSaleControlStockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the EPN bandwidth usage.
//
// @param request - DescribeEpnBandWidthDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEpnBandWidthDataResponse
func (client *Client) DescribeEpnBandWidthDataWithOptions(request *DescribeEpnBandWidthDataRequest, runtime *util.RuntimeOptions) (_result *DescribeEpnBandWidthDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkingModel)) {
		query["NetworkingModel"] = request.NetworkingModel
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEpnBandWidthData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEpnBandWidthDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEpnBandWidthDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the EPN bandwidth usage.
//
// @param request - DescribeEpnBandWidthDataRequest
//
// @return DescribeEpnBandWidthDataResponse
func (client *Client) DescribeEpnBandWidthData(request *DescribeEpnBandWidthDataRequest) (_result *DescribeEpnBandWidthDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEpnBandWidthDataResponse{}
	_body, _err := client.DescribeEpnBandWidthDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the metering method of the EPN bandwidth within a time period.
//
// @param request - DescribeEpnBandwitdhByInternetChargeTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEpnBandwitdhByInternetChargeTypeResponse
func (client *Client) DescribeEpnBandwitdhByInternetChargeTypeWithOptions(request *DescribeEpnBandwitdhByInternetChargeTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeEpnBandwitdhByInternetChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkingModel)) {
		query["NetworkingModel"] = request.NetworkingModel
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEpnBandwitdhByInternetChargeType"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEpnBandwitdhByInternetChargeTypeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEpnBandwitdhByInternetChargeTypeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the metering method of the EPN bandwidth within a time period.
//
// @param request - DescribeEpnBandwitdhByInternetChargeTypeRequest
//
// @return DescribeEpnBandwitdhByInternetChargeTypeResponse
func (client *Client) DescribeEpnBandwitdhByInternetChargeType(request *DescribeEpnBandwitdhByInternetChargeTypeRequest) (_result *DescribeEpnBandwitdhByInternetChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEpnBandwitdhByInternetChargeTypeResponse{}
	_body, _err := client.DescribeEpnBandwitdhByInternetChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries networking information about an EPN instance.
//
// Description:
//
// In internal networking mode, the value of Instances is empty in the response. In public networking mode, the value of VSwitches is empty in the response.
//
// @param request - DescribeEpnInstanceAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEpnInstanceAttributeResponse
func (client *Client) DescribeEpnInstanceAttributeWithOptions(request *DescribeEpnInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeEpnInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEpnInstanceAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEpnInstanceAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEpnInstanceAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries networking information about an EPN instance.
//
// Description:
//
// In internal networking mode, the value of Instances is empty in the response. In public networking mode, the value of VSwitches is empty in the response.
//
// @param request - DescribeEpnInstanceAttributeRequest
//
// @return DescribeEpnInstanceAttributeResponse
func (client *Client) DescribeEpnInstanceAttribute(request *DescribeEpnInstanceAttributeRequest) (_result *DescribeEpnInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEpnInstanceAttributeResponse{}
	_body, _err := client.DescribeEpnInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries EPN instances.
//
// @param request - DescribeEpnInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEpnInstancesResponse
func (client *Client) DescribeEpnInstancesWithOptions(request *DescribeEpnInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeEpnInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EPNInstanceName)) {
		query["EPNInstanceName"] = request.EPNInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEpnInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEpnInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEpnInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries EPN instances.
//
// @param request - DescribeEpnInstancesRequest
//
// @return DescribeEpnInstancesResponse
func (client *Client) DescribeEpnInstances(request *DescribeEpnInstancesRequest) (_result *DescribeEpnInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEpnInstancesResponse{}
	_body, _err := client.DescribeEpnInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the metering data of the edge private network (EPN).
//
// @param request - DescribeEpnMeasurementDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEpnMeasurementDataResponse
func (client *Client) DescribeEpnMeasurementDataWithOptions(request *DescribeEpnMeasurementDataRequest, runtime *util.RuntimeOptions) (_result *DescribeEpnMeasurementDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEpnMeasurementData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeEpnMeasurementDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeEpnMeasurementDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the metering data of the edge private network (EPN).
//
// @param request - DescribeEpnMeasurementDataRequest
//
// @return DescribeEpnMeasurementDataResponse
func (client *Client) DescribeEpnMeasurementData(request *DescribeEpnMeasurementDataRequest) (_result *DescribeEpnMeasurementDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEpnMeasurementDataResponse{}
	_body, _err := client.DescribeEpnMeasurementDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the export result of an image.
//
// Description:
//
//	  You can call this operation to query information about all custom images in your account. The information include the image properties, image export status, and the Object Storage Service (OSS) download links.
//
//		- Empty strings are returned for images that are not exported.
//
//		- The download links may become invalid if you delete objects in OSS.
//
// @param request - DescribeExportImageInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExportImageInfoResponse
func (client *Client) DescribeExportImageInfoWithOptions(request *DescribeExportImageInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeExportImageInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExportImageInfo"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeExportImageInfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeExportImageInfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the export result of an image.
//
// Description:
//
//	  You can call this operation to query information about all custom images in your account. The information include the image properties, image export status, and the Object Storage Service (OSS) download links.
//
//		- Empty strings are returned for images that are not exported.
//
//		- The download links may become invalid if you delete objects in OSS.
//
// @param request - DescribeExportImageInfoRequest
//
// @return DescribeExportImageInfoResponse
func (client *Client) DescribeExportImageInfo(request *DescribeExportImageInfoRequest) (_result *DescribeExportImageInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExportImageInfoResponse{}
	_body, _err := client.DescribeExportImageInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the export status of an image.
//
// @param request - DescribeExportImageStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExportImageStatusResponse
func (client *Client) DescribeExportImageStatusWithOptions(request *DescribeExportImageStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeExportImageStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExportImageStatus"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeExportImageStatusResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeExportImageStatusResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the export status of an image.
//
// @param request - DescribeExportImageStatusRequest
//
// @return DescribeExportImageStatusResponse
func (client *Client) DescribeExportImageStatus(request *DescribeExportImageStatusRequest) (_result *DescribeExportImageStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExportImageStatusResponse{}
	_body, _err := client.DescribeExportImageStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about file systems.
//
// @param request - DescribeFileSystemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFileSystemsResponse
func (client *Client) DescribeFileSystemsWithOptions(request *DescribeFileSystemsRequest, runtime *util.RuntimeOptions) (_result *DescribeFileSystemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFileSystems"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeFileSystemsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeFileSystemsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about file systems.
//
// @param request - DescribeFileSystemsRequest
//
// @return DescribeFileSystemsResponse
func (client *Client) DescribeFileSystems(request *DescribeFileSystemsRequest) (_result *DescribeFileSystemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFileSystemsResponse{}
	_body, _err := client.DescribeFileSystemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries Destination Network Address Translation (DNAT) entries that you created.
//
// @param request - DescribeForwardTableEntriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeForwardTableEntriesResponse
func (client *Client) DescribeForwardTableEntriesWithOptions(request *DescribeForwardTableEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeForwardTableEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExternalIp)) {
		query["ExternalIp"] = request.ExternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardEntryId)) {
		query["ForwardEntryId"] = request.ForwardEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardEntryName)) {
		query["ForwardEntryName"] = request.ForwardEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.InternalIp)) {
		query["InternalIp"] = request.InternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.NatGatewayId)) {
		query["NatGatewayId"] = request.NatGatewayId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeForwardTableEntries"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeForwardTableEntriesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeForwardTableEntriesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries Destination Network Address Translation (DNAT) entries that you created.
//
// @param request - DescribeForwardTableEntriesRequest
//
// @return DescribeForwardTableEntriesResponse
func (client *Client) DescribeForwardTableEntries(request *DescribeForwardTableEntriesRequest) (_result *DescribeForwardTableEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeForwardTableEntriesResponse{}
	_body, _err := client.DescribeForwardTableEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries high-availability virtual IP addresses (HAVIPs).
//
// @param request - DescribeHaVipsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeHaVipsResponse
func (client *Client) DescribeHaVipsWithOptions(request *DescribeHaVipsRequest, runtime *util.RuntimeOptions) (_result *DescribeHaVipsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHaVips"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeHaVipsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeHaVipsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries high-availability virtual IP addresses (HAVIPs).
//
// @param request - DescribeHaVipsRequest
//
// @return DescribeHaVipsResponse
func (client *Client) DescribeHaVips(request *DescribeHaVipsRequest) (_result *DescribeHaVipsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHaVipsResponse{}
	_body, _err := client.DescribeHaVipsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries available images.
//
// @param request - DescribeImageInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageInfosResponse
func (client *Client) DescribeImageInfosWithOptions(request *DescribeImageInfosRequest, runtime *util.RuntimeOptions) (_result *DescribeImageInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OsType)) {
		query["OsType"] = request.OsType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageInfos"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeImageInfosResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeImageInfosResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries available images.
//
// @param request - DescribeImageInfosRequest
//
// @return DescribeImageInfosResponse
func (client *Client) DescribeImageInfos(request *DescribeImageInfosRequest) (_result *DescribeImageInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageInfosResponse{}
	_body, _err := client.DescribeImageInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the accounts with which you share an image specified by the ImageId parameter.
//
// @param request - DescribeImageSharePermissionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageSharePermissionResponse
func (client *Client) DescribeImageSharePermissionWithOptions(request *DescribeImageSharePermissionRequest, runtime *util.RuntimeOptions) (_result *DescribeImageSharePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliyunId)) {
		query["AliyunId"] = request.AliyunId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageSharePermission"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeImageSharePermissionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeImageSharePermissionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the accounts with which you share an image specified by the ImageId parameter.
//
// @param request - DescribeImageSharePermissionRequest
//
// @return DescribeImageSharePermissionResponse
func (client *Client) DescribeImageSharePermission(request *DescribeImageSharePermissionRequest) (_result *DescribeImageSharePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageSharePermissionResponse{}
	_body, _err := client.DescribeImageSharePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries available images.
//
// @param request - DescribeImagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImagesResponse
func (client *Client) DescribeImagesWithOptions(request *DescribeImagesRequest, runtime *util.RuntimeOptions) (_result *DescribeImagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImages"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeImagesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeImagesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries available images.
//
// @param request - DescribeImagesRequest
//
// @return DescribeImagesResponse
func (client *Client) DescribeImages(request *DescribeImagesRequest) (_result *DescribeImagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImagesResponse{}
	_body, _err := client.DescribeImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// You can call this operation to query whether auto-renewal is enabled for an instance.
//
// @param request - DescribeInstanceAutoRenewAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceAutoRenewAttributeResponse
func (client *Client) DescribeInstanceAutoRenewAttributeWithOptions(request *DescribeInstanceAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceAutoRenewAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstanceAutoRenewAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstanceAutoRenewAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// You can call this operation to query whether auto-renewal is enabled for an instance.
//
// @param request - DescribeInstanceAutoRenewAttributeRequest
//
// @return DescribeInstanceAutoRenewAttributeResponse
func (client *Client) DescribeInstanceAutoRenewAttribute(request *DescribeInstanceAutoRenewAttributeRequest) (_result *DescribeInstanceAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceAutoRenewAttributeResponse{}
	_body, _err := client.DescribeInstanceAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询实例5分钟粒度带宽明细
//
// @param request - DescribeInstanceBandwidthDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceBandwidthDetailResponse
func (client *Client) DescribeInstanceBandwidthDetailWithOptions(request *DescribeInstanceBandwidthDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceBandwidthDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceBandwidthDetail"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstanceBandwidthDetailResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstanceBandwidthDetailResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 查询实例5分钟粒度带宽明细
//
// @param request - DescribeInstanceBandwidthDetailRequest
//
// @return DescribeInstanceBandwidthDetailResponse
func (client *Client) DescribeInstanceBandwidthDetail(request *DescribeInstanceBandwidthDetailRequest) (_result *DescribeInstanceBandwidthDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceBandwidthDetailResponse{}
	_body, _err := client.DescribeInstanceBandwidthDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改启动配置，只支持异构实例(PCFarm裸金属)。
//
// @param request - DescribeInstanceBootConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceBootConfigurationResponse
func (client *Client) DescribeInstanceBootConfigurationWithOptions(request *DescribeInstanceBootConfigurationRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceBootConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BootSet)) {
		query["BootSet"] = request.BootSet
	}

	if !tea.BoolValue(util.IsUnset(request.BootType)) {
		query["BootType"] = request.BootType
	}

	if !tea.BoolValue(util.IsUnset(request.DiskSet)) {
		query["DiskSet"] = request.DiskSet
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceBootConfiguration"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstanceBootConfigurationResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstanceBootConfigurationResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 修改启动配置，只支持异构实例(PCFarm裸金属)。
//
// @param request - DescribeInstanceBootConfigurationRequest
//
// @return DescribeInstanceBootConfigurationResponse
func (client *Client) DescribeInstanceBootConfiguration(request *DescribeInstanceBootConfigurationRequest) (_result *DescribeInstanceBootConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceBootConfigurationResponse{}
	_body, _err := client.DescribeInstanceBootConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the vCPU and memory usage of an instance.
//
// @param request - DescribeInstanceMonitorDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceMonitorDataResponse
func (client *Client) DescribeInstanceMonitorDataWithOptions(request *DescribeInstanceMonitorDataRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceMonitorDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceMonitorData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstanceMonitorDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstanceMonitorDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the vCPU and memory usage of an instance.
//
// @param request - DescribeInstanceMonitorDataRequest
//
// @return DescribeInstanceMonitorDataResponse
func (client *Client) DescribeInstanceMonitorData(request *DescribeInstanceMonitorDataRequest) (_result *DescribeInstanceMonitorDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceMonitorDataResponse{}
	_body, _err := client.DescribeInstanceMonitorDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries shared data groups (SDGs) that are mounted to an Android in Container (AIC) instance.
//
// @param tmpReq - DescribeInstanceSDGStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceSDGStatusResponse
func (client *Client) DescribeInstanceSDGStatusWithOptions(tmpReq *DescribeInstanceSDGStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceSDGStatusResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeInstanceSDGStatusShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SDGIds)) {
		request.SDGIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SDGIds, tea.String("SDGIds"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceSDGStatus"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstanceSDGStatusResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstanceSDGStatusResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries shared data groups (SDGs) that are mounted to an Android in Container (AIC) instance.
//
// @param request - DescribeInstanceSDGStatusRequest
//
// @return DescribeInstanceSDGStatusResponse
func (client *Client) DescribeInstanceSDGStatus(request *DescribeInstanceSDGStatusRequest) (_result *DescribeInstanceSDGStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceSDGStatusResponse{}
	_body, _err := client.DescribeInstanceSDGStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the instance specifications that you can purchase.
//
// @param request - DescribeInstanceSpecRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceSpecResponse
func (client *Client) DescribeInstanceSpecWithOptions(runtime *util.RuntimeOptions) (_result *DescribeInstanceSpecResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceSpec"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstanceSpecResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstanceSpecResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the instance specifications that you can purchase.
//
// @return DescribeInstanceSpecResponse
func (client *Client) DescribeInstanceSpec() (_result *DescribeInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceSpecResponse{}
	_body, _err := client.DescribeInstanceSpecWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the specifications of instance types.
//
// @param request - DescribeInstanceTypesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceTypesResponse
func (client *Client) DescribeInstanceTypesWithOptions(runtime *util.RuntimeOptions) (_result *DescribeInstanceTypesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceTypes"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstanceTypesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstanceTypesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the specifications of instance types.
//
// @return DescribeInstanceTypesResponse
func (client *Client) DescribeInstanceTypes() (_result *DescribeInstanceTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceTypesResponse{}
	_body, _err := client.DescribeInstanceTypesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the Virtual Network Computing (VNC) URL of an Edge Node Service (ENS) instance.
//
// @param request - DescribeInstanceVncUrlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstanceVncUrlResponse
func (client *Client) DescribeInstanceVncUrlWithOptions(request *DescribeInstanceVncUrlRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceVncUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceVncUrl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstanceVncUrlResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstanceVncUrlResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the Virtual Network Computing (VNC) URL of an Edge Node Service (ENS) instance.
//
// @param request - DescribeInstanceVncUrlRequest
//
// @return DescribeInstanceVncUrlResponse
func (client *Client) DescribeInstanceVncUrl(request *DescribeInstanceVncUrlRequest) (_result *DescribeInstanceVncUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceVncUrlResponse{}
	_body, _err := client.DescribeInstanceVncUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// You can call this operation to view the details of one or more instances.
//
// Description:
//
//	  You can call this operation up to 800 times per second per account.
//
//		- You can call this operation up to 100 times per second per user.
//
//		- You can specify multiple request parameters to be queried. Specified parameters are evaluated by using the AND operator. Only the specified parameters are included in the filter conditions. However, if InstanceIds is set to an empty JSON array, it is regarded as a valid filter condition and an empty result is returned.
//
// @param tmpReq - DescribeInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInstancesResponse
func (client *Client) DescribeInstancesWithOptions(tmpReq *DescribeInstancesRequest, runtime *util.RuntimeOptions) (_result *DescribeInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ServiceStatus)) {
		request.ServiceStatusShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ServiceStatus, tea.String("ServiceStatus"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Tags)) {
		request.TagsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Tags, tea.String("Tags"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.EnsServiceId)) {
		query["EnsServiceId"] = request.EnsServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceResourceType)) {
		query["InstanceResourceType"] = request.InstanceResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.IntranetIp)) {
		query["IntranetIp"] = request.IntranetIp
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderByParams)) {
		query["OrderByParams"] = request.OrderByParams
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		query["SearchKey"] = request.SearchKey
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceStatusShrink)) {
		query["ServiceStatus"] = request.ServiceStatusShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TagsShrink)) {
		query["Tags"] = request.TagsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// You can call this operation to view the details of one or more instances.
//
// Description:
//
//	  You can call this operation up to 800 times per second per account.
//
//		- You can call this operation up to 100 times per second per user.
//
//		- You can specify multiple request parameters to be queried. Specified parameters are evaluated by using the AND operator. Only the specified parameters are included in the filter conditions. However, if InstanceIds is set to an empty JSON array, it is regarded as a valid filter condition and an empty result is returned.
//
// @param request - DescribeInstancesRequest
//
// @return DescribeInstancesResponse
func (client *Client) DescribeInstances(request *DescribeInstancesRequest) (_result *DescribeInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstancesResponse{}
	_body, _err := client.DescribeInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries one or more key pairs.
//
// @param request - DescribeKeyPairsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeKeyPairsResponse
func (client *Client) DescribeKeyPairsWithOptions(request *DescribeKeyPairsRequest, runtime *util.RuntimeOptions) (_result *DescribeKeyPairsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyPairId)) {
		query["KeyPairId"] = request.KeyPairId
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeKeyPairs"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeKeyPairsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeKeyPairsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries one or more key pairs.
//
// @param request - DescribeKeyPairsRequest
//
// @return DescribeKeyPairsResponse
func (client *Client) DescribeKeyPairs(request *DescribeKeyPairsRequest) (_result *DescribeKeyPairsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeKeyPairsResponse{}
	_body, _err := client.DescribeKeyPairsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries detailed information about an Edge Load Balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - DescribeLoadBalancerAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoadBalancerAttributeResponse
func (client *Client) DescribeLoadBalancerAttributeWithOptions(request *DescribeLoadBalancerAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeLoadBalancerAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeLoadBalancerAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries detailed information about an Edge Load Balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - DescribeLoadBalancerAttributeRequest
//
// @return DescribeLoadBalancerAttributeResponse
func (client *Client) DescribeLoadBalancerAttribute(request *DescribeLoadBalancerAttributeRequest) (_result *DescribeLoadBalancerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerAttributeResponse{}
	_body, _err := client.DescribeLoadBalancerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration of an HTTP listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancerHTTPListenerAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoadBalancerHTTPListenerAttributeResponse
func (client *Client) DescribeLoadBalancerHTTPListenerAttributeWithOptions(request *DescribeLoadBalancerHTTPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerHTTPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerHTTPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeLoadBalancerHTTPListenerAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeLoadBalancerHTTPListenerAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configuration of an HTTP listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancerHTTPListenerAttributeRequest
//
// @return DescribeLoadBalancerHTTPListenerAttributeResponse
func (client *Client) DescribeLoadBalancerHTTPListenerAttribute(request *DescribeLoadBalancerHTTPListenerAttributeRequest) (_result *DescribeLoadBalancerHTTPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerHTTPListenerAttributeResponse{}
	_body, _err := client.DescribeLoadBalancerHTTPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of an HTTPS listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancerHTTPSListenerAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoadBalancerHTTPSListenerAttributeResponse
func (client *Client) DescribeLoadBalancerHTTPSListenerAttributeWithOptions(request *DescribeLoadBalancerHTTPSListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerHTTPSListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerHTTPSListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeLoadBalancerHTTPSListenerAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeLoadBalancerHTTPSListenerAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configurations of an HTTPS listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancerHTTPSListenerAttributeRequest
//
// @return DescribeLoadBalancerHTTPSListenerAttributeResponse
func (client *Client) DescribeLoadBalancerHTTPSListenerAttribute(request *DescribeLoadBalancerHTTPSListenerAttributeRequest) (_result *DescribeLoadBalancerHTTPSListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerHTTPSListenerAttributeResponse{}
	_body, _err := client.DescribeLoadBalancerHTTPSListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries monitoring data of an edge load balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancerListenMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoadBalancerListenMonitorResponse
func (client *Client) DescribeLoadBalancerListenMonitorWithOptions(request *DescribeLoadBalancerListenMonitorRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerListenMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerListenMonitor"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeLoadBalancerListenMonitorResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeLoadBalancerListenMonitorResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries monitoring data of an edge load balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancerListenMonitorRequest
//
// @return DescribeLoadBalancerListenMonitorResponse
func (client *Client) DescribeLoadBalancerListenMonitor(request *DescribeLoadBalancerListenMonitorRequest) (_result *DescribeLoadBalancerListenMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerListenMonitorResponse{}
	_body, _err := client.DescribeLoadBalancerListenMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries listeners of Edge Load Balancer (ELB) instances.
//
// @param request - DescribeLoadBalancerListenersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoadBalancerListenersResponse
func (client *Client) DescribeLoadBalancerListenersWithOptions(request *DescribeLoadBalancerListenersRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerListenersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerListeners"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeLoadBalancerListenersResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeLoadBalancerListenersResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries listeners of Edge Load Balancer (ELB) instances.
//
// @param request - DescribeLoadBalancerListenersRequest
//
// @return DescribeLoadBalancerListenersResponse
func (client *Client) DescribeLoadBalancerListeners(request *DescribeLoadBalancerListenersRequest) (_result *DescribeLoadBalancerListenersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerListenersResponse{}
	_body, _err := client.DescribeLoadBalancerListenersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the specifications of an Edge Load Balancer (ELB) instance.
//
// @param request - DescribeLoadBalancerSpecRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoadBalancerSpecResponse
func (client *Client) DescribeLoadBalancerSpecWithOptions(request *DescribeLoadBalancerSpecRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerSpec"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeLoadBalancerSpecResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeLoadBalancerSpecResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the specifications of an Edge Load Balancer (ELB) instance.
//
// @param request - DescribeLoadBalancerSpecRequest
//
// @return DescribeLoadBalancerSpecResponse
func (client *Client) DescribeLoadBalancerSpec(request *DescribeLoadBalancerSpecRequest) (_result *DescribeLoadBalancerSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerSpecResponse{}
	_body, _err := client.DescribeLoadBalancerSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of a Transmission Control Protocol (TCP) listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancerTCPListenerAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoadBalancerTCPListenerAttributeResponse
func (client *Client) DescribeLoadBalancerTCPListenerAttributeWithOptions(request *DescribeLoadBalancerTCPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerTCPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerTCPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeLoadBalancerTCPListenerAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeLoadBalancerTCPListenerAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configurations of a Transmission Control Protocol (TCP) listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancerTCPListenerAttributeRequest
//
// @return DescribeLoadBalancerTCPListenerAttributeResponse
func (client *Client) DescribeLoadBalancerTCPListenerAttribute(request *DescribeLoadBalancerTCPListenerAttributeRequest) (_result *DescribeLoadBalancerTCPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerTCPListenerAttributeResponse{}
	_body, _err := client.DescribeLoadBalancerTCPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration of a User Datagram Protocol (UDP) listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancerUDPListenerAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoadBalancerUDPListenerAttributeResponse
func (client *Client) DescribeLoadBalancerUDPListenerAttributeWithOptions(request *DescribeLoadBalancerUDPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancerUDPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancerUDPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeLoadBalancerUDPListenerAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeLoadBalancerUDPListenerAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configuration of a User Datagram Protocol (UDP) listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancerUDPListenerAttributeRequest
//
// @return DescribeLoadBalancerUDPListenerAttributeResponse
func (client *Client) DescribeLoadBalancerUDPListenerAttribute(request *DescribeLoadBalancerUDPListenerAttributeRequest) (_result *DescribeLoadBalancerUDPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancerUDPListenerAttributeResponse{}
	_body, _err := client.DescribeLoadBalancerUDPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the Edge Load Balance (ELB) instances that you have created.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLoadBalancersResponse
func (client *Client) DescribeLoadBalancersWithOptions(request *DescribeLoadBalancersRequest, runtime *util.RuntimeOptions) (_result *DescribeLoadBalancersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLoadBalancers"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeLoadBalancersResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeLoadBalancersResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the Edge Load Balance (ELB) instances that you have created.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeLoadBalancersRequest
//
// @return DescribeLoadBalancersResponse
func (client *Client) DescribeLoadBalancers(request *DescribeLoadBalancersRequest) (_result *DescribeLoadBalancersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLoadBalancersResponse{}
	_body, _err := client.DescribeLoadBalancersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the metering data of the user.
//
// @param request - DescribeMeasurementDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeasurementDataResponse
func (client *Client) DescribeMeasurementDataWithOptions(request *DescribeMeasurementDataRequest, runtime *util.RuntimeOptions) (_result *DescribeMeasurementDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeasurementData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeMeasurementDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeMeasurementDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the metering data of the user.
//
// @param request - DescribeMeasurementDataRequest
//
// @return DescribeMeasurementDataResponse
func (client *Client) DescribeMeasurementData(request *DescribeMeasurementDataRequest) (_result *DescribeMeasurementDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeasurementDataResponse{}
	_body, _err := client.DescribeMeasurementDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about mount targets.
//
// @param request - DescribeMountTargetsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMountTargetsResponse
func (client *Client) DescribeMountTargetsWithOptions(request *DescribeMountTargetsRequest, runtime *util.RuntimeOptions) (_result *DescribeMountTargetsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.MountTargetName)) {
		query["MountTargetName"] = request.MountTargetName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMountTargets"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeMountTargetsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeMountTargetsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about mount targets.
//
// @param request - DescribeMountTargetsRequest
//
// @return DescribeMountTargetsResponse
func (client *Client) DescribeMountTargets(request *DescribeMountTargetsRequest) (_result *DescribeMountTargetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMountTargetsResponse{}
	_body, _err := client.DescribeMountTargetsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据筛选条件获取指定NC属性和资源量信息
//
// @param request - DescribeNCInformationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNCInformationResponse
func (client *Client) DescribeNCInformationWithOptions(request *DescribeNCInformationRequest, runtime *util.RuntimeOptions) (_result *DescribeNCInformationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNCInformation"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeNCInformationResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeNCInformationResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 根据筛选条件获取指定NC属性和资源量信息
//
// @param request - DescribeNCInformationRequest
//
// @return DescribeNCInformationResponse
func (client *Client) DescribeNCInformation(request *DescribeNCInformationRequest) (_result *DescribeNCInformationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNCInformationResponse{}
	_body, _err := client.DescribeNCInformationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries created Network Address Translation (NAT) gateways.
//
// @param request - DescribeNatGatewaysRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNatGatewaysResponse
func (client *Client) DescribeNatGatewaysWithOptions(request *DescribeNatGatewaysRequest, runtime *util.RuntimeOptions) (_result *DescribeNatGatewaysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNatGateways"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeNatGatewaysResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeNatGatewaysResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries created Network Address Translation (NAT) gateways.
//
// @param request - DescribeNatGatewaysRequest
//
// @return DescribeNatGatewaysResponse
func (client *Client) DescribeNatGateways(request *DescribeNatGatewaysRequest) (_result *DescribeNatGatewaysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNatGatewaysResponse{}
	_body, _err := client.DescribeNatGatewaysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries network access control lists (ACLs).
//
// @param request - DescribeNetworkAclsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNetworkAclsResponse
func (client *Client) DescribeNetworkAclsWithOptions(request *DescribeNetworkAclsRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkAclsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworkAcls"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeNetworkAclsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeNetworkAclsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries network access control lists (ACLs).
//
// @param request - DescribeNetworkAclsRequest
//
// @return DescribeNetworkAclsResponse
func (client *Client) DescribeNetworkAcls(request *DescribeNetworkAclsRequest) (_result *DescribeNetworkAclsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkAclsResponse{}
	_body, _err := client.DescribeNetworkAclsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configuration of a specified network.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - DescribeNetworkAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNetworkAttributeResponse
func (client *Client) DescribeNetworkAttributeWithOptions(request *DescribeNetworkAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworkAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeNetworkAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeNetworkAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the configuration of a specified network.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - DescribeNetworkAttributeRequest
//
// @return DescribeNetworkAttributeResponse
func (client *Client) DescribeNetworkAttribute(request *DescribeNetworkAttributeRequest) (_result *DescribeNetworkAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkAttributeResponse{}
	_body, _err := client.DescribeNetworkAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries Elastic Network Interfaces (ENIs).
//
// @param request - DescribeNetworkInterfacesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNetworkInterfacesResponse
func (client *Client) DescribeNetworkInterfacesWithOptions(request *DescribeNetworkInterfacesRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkInterfacesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Ipv6Address)) {
		query["Ipv6Address"] = request.Ipv6Address
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceIds)) {
		query["NetworkInterfaceIds"] = request.NetworkInterfaceIds
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceName)) {
		query["NetworkInterfaceName"] = request.NetworkInterfaceName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryIpAddress)) {
		query["PrimaryIpAddress"] = request.PrimaryIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworkInterfaces"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeNetworkInterfacesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeNetworkInterfacesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries Elastic Network Interfaces (ENIs).
//
// @param request - DescribeNetworkInterfacesRequest
//
// @return DescribeNetworkInterfacesResponse
func (client *Client) DescribeNetworkInterfaces(request *DescribeNetworkInterfacesRequest) (_result *DescribeNetworkInterfacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkInterfacesResponse{}
	_body, _err := client.DescribeNetworkInterfacesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Query the network list.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - DescribeNetworksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNetworksResponse
func (client *Client) DescribeNetworksWithOptions(request *DescribeNetworksRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkIds)) {
		query["NetworkIds"] = request.NetworkIds
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkName)) {
		query["NetworkName"] = request.NetworkName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworks"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeNetworksResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeNetworksResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Query the network list.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - DescribeNetworksRequest
//
// @return DescribeNetworksResponse
func (client *Client) DescribeNetworks(request *DescribeNetworksRequest) (_result *DescribeNetworksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworksResponse{}
	_body, _err := client.DescribeNetworksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// The specifications of resources that can be purchased in subscription billing mode are queried.
//
// @param request - DescribePrePaidInstanceStockRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePrePaidInstanceStockResponse
func (client *Client) DescribePrePaidInstanceStockWithOptions(request *DescribePrePaidInstanceStockRequest, runtime *util.RuntimeOptions) (_result *DescribePrePaidInstanceStockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataDiskSize)) {
		query["DataDiskSize"] = request.DataDiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceSpec)) {
		query["InstanceSpec"] = request.InstanceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskSize)) {
		query["SystemDiskSize"] = request.SystemDiskSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePrePaidInstanceStock"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribePrePaidInstanceStockResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribePrePaidInstanceStockResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// The specifications of resources that can be purchased in subscription billing mode are queried.
//
// @param request - DescribePrePaidInstanceStockRequest
//
// @return DescribePrePaidInstanceStockResponse
func (client *Client) DescribePrePaidInstanceStock(request *DescribePrePaidInstanceStockRequest) (_result *DescribePrePaidInstanceStockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePrePaidInstanceStockResponse{}
	_body, _err := client.DescribePrePaidInstanceStockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the most recent price of an Edge Node Service (ENS) instance.
//
// @param tmpReq - DescribePriceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePriceResponse
func (client *Client) DescribePriceWithOptions(tmpReq *DescribePriceRequest, runtime *util.RuntimeOptions) (_result *DescribePriceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribePriceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataDisks)) {
		request.DataDisksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataDisks, tea.String("DataDisks"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataDisksShrink)) {
		query["DataDisks"] = request.DataDisksShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.Quantity)) {
		query["Quantity"] = request.Quantity
	}

	if !tea.BoolValue(util.IsUnset(request.DataDisk)) {
		query["DataDisk"] = request.DataDisk
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDisk)) {
		query["SystemDisk"] = request.SystemDisk
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePrice"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribePriceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribePriceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the most recent price of an Edge Node Service (ENS) instance.
//
// @param request - DescribePriceRequest
//
// @return DescribePriceResponse
func (client *Client) DescribePrice(request *DescribePriceRequest) (_result *DescribePriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceResponse{}
	_body, _err := client.DescribePriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about the Internet service providers (ISPs) of edge nodes.
//
// @param request - DescribeRegionIspsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRegionIspsResponse
func (client *Client) DescribeRegionIspsWithOptions(request *DescribeRegionIspsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionIspsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegionIsps"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeRegionIspsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeRegionIspsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries information about the Internet service providers (ISPs) of edge nodes.
//
// @param request - DescribeRegionIspsRequest
//
// @return DescribeRegionIspsResponse
func (client *Client) DescribeRegionIsps(request *DescribeRegionIspsRequest) (_result *DescribeRegionIspsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionIspsResponse{}
	_body, _err := client.DescribeRegionIspsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取区域节点资源量信息
//
// @param request - DescribeRegionResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRegionResourceResponse
func (client *Client) DescribeRegionResourceWithOptions(request *DescribeRegionResourceRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegionResource"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeRegionResourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeRegionResourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取区域节点资源量信息
//
// @param request - DescribeRegionResourceRequest
//
// @return DescribeRegionResourceResponse
func (client *Client) DescribeRegionResource(request *DescribeRegionResourceRequest) (_result *DescribeRegionResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionResourceResponse{}
	_body, _err := client.DescribeRegionResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the specifications of resources that you can purchase.
//
// @param request - DescribeReservedResourceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeReservedResourceResponse
func (client *Client) DescribeReservedResourceWithOptions(runtime *util.RuntimeOptions) (_result *DescribeReservedResourceResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeReservedResource"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeReservedResourceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeReservedResourceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the specifications of resources that you can purchase.
//
// @return DescribeReservedResourceResponse
func (client *Client) DescribeReservedResource() (_result *DescribeReservedResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeReservedResourceResponse{}
	_body, _err := client.DescribeReservedResourceWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取资源状态变化时间线
//
// @param request - DescribeResourceTimelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeResourceTimelineResponse
func (client *Client) DescribeResourceTimelineWithOptions(request *DescribeResourceTimelineRequest, runtime *util.RuntimeOptions) (_result *DescribeResourceTimelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceTimeline"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeResourceTimelineResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeResourceTimelineResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取资源状态变化时间线
//
// @param request - DescribeResourceTimelineRequest
//
// @return DescribeResourceTimelineResponse
func (client *Client) DescribeResourceTimeline(request *DescribeResourceTimelineRequest) (_result *DescribeResourceTimelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceTimelineResponse{}
	_body, _err := client.DescribeResourceTimelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries basic information about shared data groups (SDGs), including node preload information.
//
// @param tmpReq - DescribeSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSDGResponse
func (client *Client) DescribeSDGWithOptions(tmpReq *DescribeSDGRequest, runtime *util.RuntimeOptions) (_result *DescribeSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SDGIds)) {
		request.SDGIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SDGIds, tea.String("SDGIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SDGIdsShrink)) {
		query["SDGIds"] = request.SDGIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries basic information about shared data groups (SDGs), including node preload information.
//
// @param request - DescribeSDGRequest
//
// @return DescribeSDGResponse
func (client *Client) DescribeSDG(request *DescribeSDGRequest) (_result *DescribeSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSDGResponse{}
	_body, _err := client.DescribeSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the deployment status of the shared data group (SDG).
//
// @param tmpReq - DescribeSDGDeploymentStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSDGDeploymentStatusResponse
func (client *Client) DescribeSDGDeploymentStatusWithOptions(tmpReq *DescribeSDGDeploymentStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeSDGDeploymentStatusResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeSDGDeploymentStatusShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RegionIds)) {
		request.RegionIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RegionIds, tea.String("RegionIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeploymentType)) {
		query["DeploymentType"] = request.DeploymentType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionIdsShrink)) {
		query["RegionIds"] = request.RegionIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SDGId)) {
		query["SDGId"] = request.SDGId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSDGDeploymentStatus"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSDGDeploymentStatusResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSDGDeploymentStatusResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the deployment status of the shared data group (SDG).
//
// @param request - DescribeSDGDeploymentStatusRequest
//
// @return DescribeSDGDeploymentStatusResponse
func (client *Client) DescribeSDGDeploymentStatus(request *DescribeSDGDeploymentStatusRequest) (_result *DescribeSDGDeploymentStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSDGDeploymentStatusResponse{}
	_body, _err := client.DescribeSDGDeploymentStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about created shared data groups (SDGs).
//
// @param tmpReq - DescribeSDGsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSDGsResponse
func (client *Client) DescribeSDGsWithOptions(tmpReq *DescribeSDGsRequest, runtime *util.RuntimeOptions) (_result *DescribeSDGsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DescribeSDGsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SDGIds)) {
		request.SDGIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SDGIds, tea.String("SDGIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SDGIdsShrink)) {
		query["SDGIds"] = request.SDGIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSDGs"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSDGsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSDGsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries information about created shared data groups (SDGs).
//
// @param request - DescribeSDGsRequest
//
// @return DescribeSDGsResponse
func (client *Client) DescribeSDGs(request *DescribeSDGsRequest) (_result *DescribeSDGsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSDGsResponse{}
	_body, _err := client.DescribeSDGsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries created secondary public IP addresses.
//
// @param request - DescribeSecondaryPublicIpAddressesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecondaryPublicIpAddressesResponse
func (client *Client) DescribeSecondaryPublicIpAddressesWithOptions(request *DescribeSecondaryPublicIpAddressesRequest, runtime *util.RuntimeOptions) (_result *DescribeSecondaryPublicIpAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecondaryPublicIpAddress)) {
		query["SecondaryPublicIpAddress"] = request.SecondaryPublicIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.SecondaryPublicIpId)) {
		query["SecondaryPublicIpId"] = request.SecondaryPublicIpId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecondaryPublicIpAddresses"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSecondaryPublicIpAddressesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSecondaryPublicIpAddressesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries created secondary public IP addresses.
//
// @param request - DescribeSecondaryPublicIpAddressesRequest
//
// @return DescribeSecondaryPublicIpAddressesResponse
func (client *Client) DescribeSecondaryPublicIpAddresses(request *DescribeSecondaryPublicIpAddressesRequest) (_result *DescribeSecondaryPublicIpAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecondaryPublicIpAddressesResponse{}
	_body, _err := client.DescribeSecondaryPublicIpAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the rules of a security group.
//
// @param request - DescribeSecurityGroupAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecurityGroupAttributeResponse
func (client *Client) DescribeSecurityGroupAttributeWithOptions(request *DescribeSecurityGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecurityGroupAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSecurityGroupAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSecurityGroupAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the rules of a security group.
//
// @param request - DescribeSecurityGroupAttributeRequest
//
// @return DescribeSecurityGroupAttributeResponse
func (client *Client) DescribeSecurityGroupAttribute(request *DescribeSecurityGroupAttributeRequest) (_result *DescribeSecurityGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupAttributeResponse{}
	_body, _err := client.DescribeSecurityGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries details about created security groups.
//
// @param request - DescribeSecurityGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSecurityGroupsResponse
func (client *Client) DescribeSecurityGroupsWithOptions(request *DescribeSecurityGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupName)) {
		query["SecurityGroupName"] = request.SecurityGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSecurityGroups"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSecurityGroupsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSecurityGroupsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries details about created security groups.
//
// @param request - DescribeSecurityGroupsRequest
//
// @return DescribeSecurityGroupsResponse
func (client *Client) DescribeSecurityGroups(request *DescribeSecurityGroupsRequest) (_result *DescribeSecurityGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupsResponse{}
	_body, _err := client.DescribeSecurityGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries custom images.
//
// @param request - DescribeSelfImagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSelfImagesResponse
func (client *Client) DescribeSelfImagesWithOptions(request *DescribeSelfImagesRequest, runtime *util.RuntimeOptions) (_result *DescribeSelfImagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSelfImages"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSelfImagesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSelfImagesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries custom images.
//
// @param request - DescribeSelfImagesRequest
//
// @return DescribeSelfImagesResponse
func (client *Client) DescribeSelfImages(request *DescribeSelfImagesRequest) (_result *DescribeSelfImagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSelfImagesResponse{}
	_body, _err := client.DescribeSelfImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// You can call the DescribeServcieSchedule to query the real-time status of the instance device or container that is being occupied by the UUID.
//
// @param request - DescribeServcieScheduleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeServcieScheduleResponse
func (client *Client) DescribeServcieScheduleWithOptions(request *DescribeServcieScheduleRequest, runtime *util.RuntimeOptions) (_result *DescribeServcieScheduleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.PodConfigName)) {
		query["PodConfigName"] = request.PodConfigName
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeServcieSchedule"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeServcieScheduleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeServcieScheduleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// You can call the DescribeServcieSchedule to query the real-time status of the instance device or container that is being occupied by the UUID.
//
// @param request - DescribeServcieScheduleRequest
//
// @return DescribeServcieScheduleResponse
func (client *Client) DescribeServcieSchedule(request *DescribeServcieScheduleRequest) (_result *DescribeServcieScheduleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeServcieScheduleResponse{}
	_body, _err := client.DescribeServcieScheduleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the monitoring data of an edge load balancer (ELB) instance based on the listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeServerLoadBalancerListenMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeServerLoadBalancerListenMonitorResponse
func (client *Client) DescribeServerLoadBalancerListenMonitorWithOptions(request *DescribeServerLoadBalancerListenMonitorRequest, runtime *util.RuntimeOptions) (_result *DescribeServerLoadBalancerListenMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeServerLoadBalancerListenMonitor"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeServerLoadBalancerListenMonitorResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeServerLoadBalancerListenMonitorResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the monitoring data of an edge load balancer (ELB) instance based on the listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeServerLoadBalancerListenMonitorRequest
//
// @return DescribeServerLoadBalancerListenMonitorResponse
func (client *Client) DescribeServerLoadBalancerListenMonitor(request *DescribeServerLoadBalancerListenMonitorRequest) (_result *DescribeServerLoadBalancerListenMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeServerLoadBalancerListenMonitorResponse{}
	_body, _err := client.DescribeServerLoadBalancerListenMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the request monitoring data of an edge load balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeServerLoadBalancerMonitorRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeServerLoadBalancerMonitorResponse
func (client *Client) DescribeServerLoadBalancerMonitorWithOptions(request *DescribeServerLoadBalancerMonitorRequest, runtime *util.RuntimeOptions) (_result *DescribeServerLoadBalancerMonitorResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeServerLoadBalancerMonitor"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeServerLoadBalancerMonitorResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeServerLoadBalancerMonitorResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the request monitoring data of an edge load balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - DescribeServerLoadBalancerMonitorRequest
//
// @return DescribeServerLoadBalancerMonitorResponse
func (client *Client) DescribeServerLoadBalancerMonitor(request *DescribeServerLoadBalancerMonitorRequest) (_result *DescribeServerLoadBalancerMonitorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeServerLoadBalancerMonitorResponse{}
	_body, _err := client.DescribeServerLoadBalancerMonitorWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about snapshots.
//
// @param request - DescribeSnapshotsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSnapshotsResponse
func (client *Client) DescribeSnapshotsWithOptions(request *DescribeSnapshotsRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotName)) {
		query["SnapshotName"] = request.SnapshotName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSnapshots"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSnapshotsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSnapshotsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries information about snapshots.
//
// @param request - DescribeSnapshotsRequest
//
// @return DescribeSnapshotsResponse
func (client *Client) DescribeSnapshots(request *DescribeSnapshotsRequest) (_result *DescribeSnapshotsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotsResponse{}
	_body, _err := client.DescribeSnapshotsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of a specific source network address translation (SNAT) entry.
//
// @param request - DescribeSnatAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSnatAttributeResponse
func (client *Client) DescribeSnatAttributeWithOptions(request *DescribeSnatAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeSnatAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SnatEntryId)) {
		query["SnatEntryId"] = request.SnatEntryId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSnatAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSnatAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSnatAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the details of a specific source network address translation (SNAT) entry.
//
// @param request - DescribeSnatAttributeRequest
//
// @return DescribeSnatAttributeResponse
func (client *Client) DescribeSnatAttribute(request *DescribeSnatAttributeRequest) (_result *DescribeSnatAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnatAttributeResponse{}
	_body, _err := client.DescribeSnatAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries source network address translation (SNAT) entries.
//
// @param request - DescribeSnatTableEntriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSnatTableEntriesResponse
func (client *Client) DescribeSnatTableEntriesWithOptions(request *DescribeSnatTableEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeSnatTableEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSnatTableEntries"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeSnatTableEntriesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeSnatTableEntriesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries source network address translation (SNAT) entries.
//
// @param request - DescribeSnatTableEntriesRequest
//
// @return DescribeSnatTableEntriesResponse
func (client *Client) DescribeSnatTableEntries(request *DescribeSnatTableEntriesRequest) (_result *DescribeSnatTableEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnatTableEntriesResponse{}
	_body, _err := client.DescribeSnatTableEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries storage gateways.
//
// @param request - DescribeStorageGatewayRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStorageGatewayResponse
func (client *Client) DescribeStorageGatewayWithOptions(request *DescribeStorageGatewayRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.GatewayId)) {
		query["GatewayId"] = request.GatewayId
	}

	if !tea.BoolValue(util.IsUnset(request.GatewayType)) {
		query["GatewayType"] = request.GatewayType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStorageGateway"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeStorageGatewayResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeStorageGatewayResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries storage gateways.
//
// @param request - DescribeStorageGatewayRequest
//
// @return DescribeStorageGatewayResponse
func (client *Client) DescribeStorageGateway(request *DescribeStorageGatewayRequest) (_result *DescribeStorageGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageGatewayResponse{}
	_body, _err := client.DescribeStorageGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries volumes.
//
// @param request - DescribeStorageVolumeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeStorageVolumeResponse
func (client *Client) DescribeStorageVolumeWithOptions(request *DescribeStorageVolumeRequest, runtime *util.RuntimeOptions) (_result *DescribeStorageVolumeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.GatewayId)) {
		query["GatewayId"] = request.GatewayId
	}

	if !tea.BoolValue(util.IsUnset(request.IsEnable)) {
		query["IsEnable"] = request.IsEnable
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StorageId)) {
		query["StorageId"] = request.StorageId
	}

	if !tea.BoolValue(util.IsUnset(request.VolumeId)) {
		query["VolumeId"] = request.VolumeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeStorageVolume"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeStorageVolumeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeStorageVolumeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries volumes.
//
// @param request - DescribeStorageVolumeRequest
//
// @return DescribeStorageVolumeResponse
func (client *Client) DescribeStorageVolume(request *DescribeStorageVolumeRequest) (_result *DescribeStorageVolumeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeStorageVolumeResponse{}
	_body, _err := client.DescribeStorageVolumeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the bandwidth that you use within a specified period of time.
//
// @param request - DescribeUserBandWidthDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUserBandWidthDataResponse
func (client *Client) DescribeUserBandWidthDataWithOptions(request *DescribeUserBandWidthDataRequest, runtime *util.RuntimeOptions) (_result *DescribeUserBandWidthDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Isp)) {
		query["Isp"] = request.Isp
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserBandWidthData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeUserBandWidthDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeUserBandWidthDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the bandwidth that you use within a specified period of time.
//
// @param request - DescribeUserBandWidthDataRequest
//
// @return DescribeUserBandWidthDataResponse
func (client *Client) DescribeUserBandWidthData(request *DescribeUserBandWidthDataRequest) (_result *DescribeUserBandWidthDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserBandWidthDataResponse{}
	_body, _err := client.DescribeUserBandWidthDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 调用DescribeVSwitchAttributes接口查询指定交换机的配置信息。
//
// @param request - DescribeVSwitchAttributesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVSwitchAttributesResponse
func (client *Client) DescribeVSwitchAttributesWithOptions(request *DescribeVSwitchAttributesRequest, runtime *util.RuntimeOptions) (_result *DescribeVSwitchAttributesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVSwitchAttributes"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeVSwitchAttributesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeVSwitchAttributesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 调用DescribeVSwitchAttributes接口查询指定交换机的配置信息。
//
// @param request - DescribeVSwitchAttributesRequest
//
// @return DescribeVSwitchAttributesResponse
func (client *Client) DescribeVSwitchAttributes(request *DescribeVSwitchAttributesRequest) (_result *DescribeVSwitchAttributesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVSwitchAttributesResponse{}
	_body, _err := client.DescribeVSwitchAttributesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about available vSwitches.
//
// @param request - DescribeVSwitchesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVSwitchesResponse
func (client *Client) DescribeVSwitchesWithOptions(request *DescribeVSwitchesRequest, runtime *util.RuntimeOptions) (_result *DescribeVSwitchesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionIds)) {
		query["EnsRegionIds"] = request.EnsRegionIds
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchIds)) {
		query["VSwitchIds"] = request.VSwitchIds
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchName)) {
		query["VSwitchName"] = request.VSwitchName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVSwitches"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DescribeVSwitchesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DescribeVSwitchesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries information about available vSwitches.
//
// @param request - DescribeVSwitchesRequest
//
// @return DescribeVSwitchesResponse
func (client *Client) DescribeVSwitches(request *DescribeVSwitchesRequest) (_result *DescribeVSwitchesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVSwitchesResponse{}
	_body, _err := client.DescribeVSwitchesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Detaches a pay-as-you-go disk from an Edge Node Service (ENS) instance. You cannot call this operation to detach a disk that is created together with an instance.
//
// @param request - DetachDiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachDiskResponse
func (client *Client) DetachDiskWithOptions(request *DetachDiskRequest, runtime *util.RuntimeOptions) (_result *DetachDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DetachDiskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DetachDiskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Detaches a pay-as-you-go disk from an Edge Node Service (ENS) instance. You cannot call this operation to detach a disk that is created together with an instance.
//
// @param request - DetachDiskRequest
//
// @return DetachDiskResponse
func (client *Client) DetachDisk(request *DetachDiskRequest) (_result *DetachDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachDiskResponse{}
	_body, _err := client.DetachDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Detaches a shared data group (SDG).
//
// @param tmpReq - DetachInstanceSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachInstanceSDGResponse
func (client *Client) DetachInstanceSDGWithOptions(tmpReq *DetachInstanceSDGRequest, runtime *util.RuntimeOptions) (_result *DetachInstanceSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DetachInstanceSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SDGId)) {
		query["SDGId"] = request.SDGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachInstanceSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DetachInstanceSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DetachInstanceSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Detaches a shared data group (SDG).
//
// @param request - DetachInstanceSDGRequest
//
// @return DetachInstanceSDGResponse
func (client *Client) DetachInstanceSDG(request *DetachInstanceSDGRequest) (_result *DetachInstanceSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachInstanceSDGResponse{}
	_body, _err := client.DetachInstanceSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Detach an elastic network interface (ENI) from an instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
//   - You cannot detach a primary ENI from an instance.
//
//   - The ENI must be in the InUse state.
//
//   - The instances are in the Stopped state.
//
//   - This operation is an asynchronous operation. After this operation is called to detach an ENI, you can check the state of the ENI to determine whether the ENI is detached.
//
// @param request - DetachNetworkInterfaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachNetworkInterfaceResponse
func (client *Client) DetachNetworkInterfaceWithOptions(request *DetachNetworkInterfaceRequest, runtime *util.RuntimeOptions) (_result *DetachNetworkInterfaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachNetworkInterface"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DetachNetworkInterfaceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DetachNetworkInterfaceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Detach an elastic network interface (ENI) from an instance.
//
// Description:
//
// Before you call this operation, take note of the following items:
//
//   - You cannot detach a primary ENI from an instance.
//
//   - The ENI must be in the InUse state.
//
//   - The instances are in the Stopped state.
//
//   - This operation is an asynchronous operation. After this operation is called to detach an ENI, you can check the state of the ENI to determine whether the ENI is detached.
//
// @param request - DetachNetworkInterfaceRequest
//
// @return DetachNetworkInterfaceResponse
func (client *Client) DetachNetworkInterface(request *DetachNetworkInterfaceRequest) (_result *DetachNetworkInterfaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachNetworkInterfaceResponse{}
	_body, _err := client.DetachNetworkInterfaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Distributes pushed data to the Edge Node Service (ENS) instances of the application. You can specify multiple canary release policies, decompress files, and restart containers.
//
// @param request - DistApplicationDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DistApplicationDataResponse
func (client *Client) DistApplicationDataWithOptions(request *DistApplicationDataRequest, runtime *util.RuntimeOptions) (_result *DistApplicationDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.DistStrategy)) {
		query["DistStrategy"] = request.DistStrategy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DistApplicationData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &DistApplicationDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &DistApplicationDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Distributes pushed data to the Edge Node Service (ENS) instances of the application. You can specify multiple canary release policies, decompress files, and restart containers.
//
// @param request - DistApplicationDataRequest
//
// @return DistApplicationDataResponse
func (client *Client) DistApplicationData(request *DistApplicationDataRequest) (_result *DistApplicationDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DistApplicationDataResponse{}
	_body, _err := client.DistApplicationDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Exports billing details within a specific time range.
//
// @param request - ExportBillDetailDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportBillDetailDataResponse
func (client *Client) ExportBillDetailDataWithOptions(request *ExportBillDetailDataRequest, runtime *util.RuntimeOptions) (_result *ExportBillDetailDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportBillDetailData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ExportBillDetailDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ExportBillDetailDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Exports billing details within a specific time range.
//
// @param request - ExportBillDetailDataRequest
//
// @return ExportBillDetailDataResponse
func (client *Client) ExportBillDetailData(request *ExportBillDetailDataRequest) (_result *ExportBillDetailDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportBillDetailDataResponse{}
	_body, _err := client.ExportBillDetailDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Exports a custom image to an Object Storage Service (OSS) bucket in the same region.
//
// @param request - ExportImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportImageResponse
func (client *Client) ExportImageWithOptions(request *ExportImageRequest, runtime *util.RuntimeOptions) (_result *ExportImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.OSSBucket)) {
		query["OSSBucket"] = request.OSSBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OSSPrefix)) {
		query["OSSPrefix"] = request.OSSPrefix
	}

	if !tea.BoolValue(util.IsUnset(request.OSSRegionId)) {
		query["OSSRegionId"] = request.OSSRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RoleName)) {
		query["RoleName"] = request.RoleName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportImage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ExportImageResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ExportImageResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Exports a custom image to an Object Storage Service (OSS) bucket in the same region.
//
// @param request - ExportImageRequest
//
// @return ExportImageResponse
func (client *Client) ExportImage(request *ExportImageRequest) (_result *ExportImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportImageResponse{}
	_body, _err := client.ExportImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Exports the metering data within a specific time range.
//
// @param request - ExportMeasurementDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportMeasurementDataResponse
func (client *Client) ExportMeasurementDataWithOptions(request *ExportMeasurementDataRequest, runtime *util.RuntimeOptions) (_result *ExportMeasurementDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndDate)) {
		query["EndDate"] = request.EndDate
	}

	if !tea.BoolValue(util.IsUnset(request.StartDate)) {
		query["StartDate"] = request.StartDate
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportMeasurementData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ExportMeasurementDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ExportMeasurementDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Exports the metering data within a specific time range.
//
// @param request - ExportMeasurementDataRequest
//
// @return ExportMeasurementDataResponse
func (client *Client) ExportMeasurementData(request *ExportMeasurementDataRequest) (_result *ExportMeasurementDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportMeasurementDataResponse{}
	_body, _err := client.ExportMeasurementDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the access control list (ACL) of a bucket.
//
// @param request - GetBucketAclRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBucketAclResponse
func (client *Client) GetBucketAclWithOptions(request *GetBucketAclRequest, runtime *util.RuntimeOptions) (_result *GetBucketAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBucketAcl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetBucketAclResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetBucketAclResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the access control list (ACL) of a bucket.
//
// @param request - GetBucketAclRequest
//
// @return GetBucketAclResponse
func (client *Client) GetBucketAcl(request *GetBucketAclRequest) (_result *GetBucketAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBucketAclResponse{}
	_body, _err := client.GetBucketAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the detailed information about a bucket.
//
// @param request - GetBucketInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBucketInfoResponse
func (client *Client) GetBucketInfoWithOptions(request *GetBucketInfoRequest, runtime *util.RuntimeOptions) (_result *GetBucketInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBucketInfo"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetBucketInfoResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetBucketInfoResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the detailed information about a bucket.
//
// @param request - GetBucketInfoRequest
//
// @return GetBucketInfoResponse
func (client *Client) GetBucketInfo(request *GetBucketInfoRequest) (_result *GetBucketInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBucketInfoResponse{}
	_body, _err := client.GetBucketInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries lifecycle rules.
//
// @param request - GetBucketLifecycleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBucketLifecycleResponse
func (client *Client) GetBucketLifecycleWithOptions(request *GetBucketLifecycleRequest, runtime *util.RuntimeOptions) (_result *GetBucketLifecycleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBucketLifecycle"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetBucketLifecycleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetBucketLifecycleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries lifecycle rules.
//
// @param request - GetBucketLifecycleRequest
//
// @return GetBucketLifecycleResponse
func (client *Client) GetBucketLifecycle(request *GetBucketLifecycleRequest) (_result *GetBucketLifecycleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBucketLifecycleResponse{}
	_body, _err := client.GetBucketLifecycleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the storage usage in the previous billing cycle and the cumulative number of calls in this month.
//
// @param request - GetOssStorageAndAccByBucketsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOssStorageAndAccByBucketsResponse
func (client *Client) GetOssStorageAndAccByBucketsWithOptions(request *GetOssStorageAndAccByBucketsRequest, runtime *util.RuntimeOptions) (_result *GetOssStorageAndAccByBucketsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOssStorageAndAccByBuckets"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetOssStorageAndAccByBucketsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetOssStorageAndAccByBucketsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the storage usage in the previous billing cycle and the cumulative number of calls in this month.
//
// @param request - GetOssStorageAndAccByBucketsRequest
//
// @return GetOssStorageAndAccByBucketsResponse
func (client *Client) GetOssStorageAndAccByBuckets(request *GetOssStorageAndAccByBucketsRequest) (_result *GetOssStorageAndAccByBucketsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetOssStorageAndAccByBucketsResponse{}
	_body, _err := client.GetOssStorageAndAccByBucketsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the storage and bandwidth usage within a specific time range.
//
// Description:
//
// The query and aggregation granularity of bandwidth and storage usage cannot exceed one day. Data aggregation is to collect the maximum values of usage data within a period of time.
//
// @param request - GetOssUsageDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOssUsageDataResponse
func (client *Client) GetOssUsageDataWithOptions(request *GetOssUsageDataRequest, runtime *util.RuntimeOptions) (_result *GetOssUsageDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOssUsageData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &GetOssUsageDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &GetOssUsageDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the storage and bandwidth usage within a specific time range.
//
// Description:
//
// The query and aggregation granularity of bandwidth and storage usage cannot exceed one day. Data aggregation is to collect the maximum values of usage data within a period of time.
//
// @param request - GetOssUsageDataRequest
//
// @return GetOssUsageDataResponse
func (client *Client) GetOssUsageData(request *GetOssUsageDataRequest) (_result *GetOssUsageDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetOssUsageDataResponse{}
	_body, _err := client.GetOssUsageDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 调用ImportImage导入一份您的镜像文件到云服务器。
//
// @param tmpReq - ImportImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportImageResponse
func (client *Client) ImportImageWithOptions(tmpReq *ImportImageRequest, runtime *util.RuntimeOptions) (_result *ImportImageResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ImportImageShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DiskDeviceMapping)) {
		request.DiskDeviceMappingShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DiskDeviceMapping, tea.String("DiskDeviceMapping"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Architecture)) {
		query["Architecture"] = request.Architecture
	}

	if !tea.BoolValue(util.IsUnset(request.ComputeType)) {
		query["ComputeType"] = request.ComputeType
	}

	if !tea.BoolValue(util.IsUnset(request.DiskDeviceMappingShrink)) {
		query["DiskDeviceMapping"] = request.DiskDeviceMappingShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ImageFormat)) {
		query["ImageFormat"] = request.ImageFormat
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.OSSBucket)) {
		query["OSSBucket"] = request.OSSBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OSSObject)) {
		query["OSSObject"] = request.OSSObject
	}

	if !tea.BoolValue(util.IsUnset(request.OSSRegion)) {
		query["OSSRegion"] = request.OSSRegion
	}

	if !tea.BoolValue(util.IsUnset(request.OSType)) {
		query["OSType"] = request.OSType
	}

	if !tea.BoolValue(util.IsUnset(request.OSVersion)) {
		query["OSVersion"] = request.OSVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Platform)) {
		query["Platform"] = request.Platform
	}

	if !tea.BoolValue(util.IsUnset(request.TargetOSSRegionId)) {
		query["TargetOSSRegionId"] = request.TargetOSSRegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportImage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ImportImageResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ImportImageResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 调用ImportImage导入一份您的镜像文件到云服务器。
//
// @param request - ImportImageRequest
//
// @return ImportImageResponse
func (client *Client) ImportImage(request *ImportImageRequest) (_result *ImportImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportImageResponse{}
	_body, _err := client.ImportImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Imports the public key of a Rivest–Shamir–Adleman (RSA)-encrypted key pair that is generated by a third-party tool.
//
// Description:
//
//	  After the key pair is imported, ENS stores the public key. You must securely store the private key.
//
//		- The key pair can be only in the ssh-rsa format.
//
// @param request - ImportKeyPairRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ImportKeyPairResponse
func (client *Client) ImportKeyPairWithOptions(request *ImportKeyPairRequest, runtime *util.RuntimeOptions) (_result *ImportKeyPairResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.PublicKeyBody)) {
		query["PublicKeyBody"] = request.PublicKeyBody
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ImportKeyPair"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ImportKeyPairResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ImportKeyPairResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Imports the public key of a Rivest–Shamir–Adleman (RSA)-encrypted key pair that is generated by a third-party tool.
//
// Description:
//
//	  After the key pair is imported, ENS stores the public key. You must securely store the private key.
//
//		- The key pair can be only in the ssh-rsa format.
//
// @param request - ImportKeyPairRequest
//
// @return ImportKeyPairResponse
func (client *Client) ImportKeyPair(request *ImportKeyPairRequest) (_result *ImportKeyPairResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportKeyPairResponse{}
	_body, _err := client.ImportKeyPairWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Assigns public IP addresses to an EPN instance.
//
// @param request - JoinPublicIpsToEpnInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return JoinPublicIpsToEpnInstanceResponse
func (client *Client) JoinPublicIpsToEpnInstanceWithOptions(request *JoinPublicIpsToEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *JoinPublicIpsToEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceInfos)) {
		query["InstanceInfos"] = request.InstanceInfos
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinPublicIpsToEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &JoinPublicIpsToEpnInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &JoinPublicIpsToEpnInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Assigns public IP addresses to an EPN instance.
//
// @param request - JoinPublicIpsToEpnInstanceRequest
//
// @return JoinPublicIpsToEpnInstanceResponse
func (client *Client) JoinPublicIpsToEpnInstance(request *JoinPublicIpsToEpnInstanceRequest) (_result *JoinPublicIpsToEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinPublicIpsToEpnInstanceResponse{}
	_body, _err := client.JoinPublicIpsToEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds an Edge Node Service (ENS) instance to a specified security group.
//
// Description:
//
// Before you call this operation to add an instance to a security group, make sure that the instance is in the Stopped or Running state.
//
// @param request - JoinSecurityGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return JoinSecurityGroupResponse
func (client *Client) JoinSecurityGroupWithOptions(request *JoinSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *JoinSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &JoinSecurityGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &JoinSecurityGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Adds an Edge Node Service (ENS) instance to a specified security group.
//
// Description:
//
// Before you call this operation to add an instance to a security group, make sure that the instance is in the Stopped or Running state.
//
// @param request - JoinSecurityGroupRequest
//
// @return JoinSecurityGroupResponse
func (client *Client) JoinSecurityGroup(request *JoinSecurityGroupRequest) (_result *JoinSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinSecurityGroupResponse{}
	_body, _err := client.JoinSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// For internal connections, instances that are associated with a vSwitch automatically take effect. For public connections such as intelligent acceleration, you need to manually add the instances.
//
// @param request - JoinVSwitchesToEpnInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return JoinVSwitchesToEpnInstanceResponse
func (client *Client) JoinVSwitchesToEpnInstanceWithOptions(request *JoinVSwitchesToEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *JoinVSwitchesToEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchesInfo)) {
		query["VSwitchesInfo"] = request.VSwitchesInfo
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinVSwitchesToEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &JoinVSwitchesToEpnInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &JoinVSwitchesToEpnInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// For internal connections, instances that are associated with a vSwitch automatically take effect. For public connections such as intelligent acceleration, you need to manually add the instances.
//
// @param request - JoinVSwitchesToEpnInstanceRequest
//
// @return JoinVSwitchesToEpnInstanceResponse
func (client *Client) JoinVSwitchesToEpnInstance(request *JoinVSwitchesToEpnInstanceRequest) (_result *JoinVSwitchesToEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinVSwitchesToEpnInstanceResponse{}
	_body, _err := client.JoinVSwitchesToEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes an instance from a security group.
//
// Description:
//
// Before you remove an instance from a security group, the instance must be in the Stopped or Running state.
//
// @param request - LeaveSecurityGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LeaveSecurityGroupResponse
func (client *Client) LeaveSecurityGroupWithOptions(request *LeaveSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *LeaveSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("LeaveSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &LeaveSecurityGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &LeaveSecurityGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes an instance from a security group.
//
// Description:
//
// Before you remove an instance from a security group, the instance must be in the Stopped or Running state.
//
// @param request - LeaveSecurityGroupRequest
//
// @return LeaveSecurityGroupResponse
func (client *Client) LeaveSecurityGroup(request *LeaveSecurityGroupRequest) (_result *LeaveSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LeaveSecurityGroupResponse{}
	_body, _err := client.LeaveSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the created applications.
//
// @param request - ListApplicationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListApplicationsResponse
func (client *Client) ListApplicationsWithOptions(request *ListApplicationsRequest, runtime *util.RuntimeOptions) (_result *ListApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppVersions)) {
		query["AppVersions"] = request.AppVersions
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterNames)) {
		query["ClusterNames"] = request.ClusterNames
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDate)) {
		query["MaxDate"] = request.MaxDate
	}

	if !tea.BoolValue(util.IsUnset(request.MinDate)) {
		query["MinDate"] = request.MinDate
	}

	if !tea.BoolValue(util.IsUnset(request.OutAppInfoParams)) {
		query["OutAppInfoParams"] = request.OutAppInfoParams
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListApplications"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListApplicationsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListApplicationsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the created applications.
//
// @param request - ListApplicationsRequest
//
// @return ListApplicationsResponse
func (client *Client) ListApplications(request *ListApplicationsRequest) (_result *ListApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListApplicationsResponse{}
	_body, _err := client.ListApplicationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries all buckets of a user.
//
// @param request - ListBucketsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBucketsResponse
func (client *Client) ListBucketsWithOptions(request *ListBucketsRequest, runtime *util.RuntimeOptions) (_result *ListBucketsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Prefix)) {
		query["Prefix"] = request.Prefix
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBuckets"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListBucketsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListBucketsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries all buckets of a user.
//
// @param request - ListBucketsRequest
//
// @return ListBucketsResponse
func (client *Client) ListBuckets(request *ListBucketsRequest) (_result *ListBucketsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBucketsResponse{}
	_body, _err := client.ListBucketsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about all objects in a bucket.
//
// @param request - ListObjectsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListObjectsResponse
func (client *Client) ListObjectsWithOptions(request *ListObjectsRequest, runtime *util.RuntimeOptions) (_result *ListObjectsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	if !tea.BoolValue(util.IsUnset(request.ContinuationToken)) {
		query["ContinuationToken"] = request.ContinuationToken
	}

	if !tea.BoolValue(util.IsUnset(request.EncodingType)) {
		query["EncodingType"] = request.EncodingType
	}

	if !tea.BoolValue(util.IsUnset(request.Marker)) {
		query["Marker"] = request.Marker
	}

	if !tea.BoolValue(util.IsUnset(request.MaxKeys)) {
		query["MaxKeys"] = request.MaxKeys
	}

	if !tea.BoolValue(util.IsUnset(request.Prefix)) {
		query["Prefix"] = request.Prefix
	}

	if !tea.BoolValue(util.IsUnset(request.StartAfter)) {
		query["StartAfter"] = request.StartAfter
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListObjects"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListObjectsResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListObjectsResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries the information about all objects in a bucket.
//
// @param request - ListObjectsRequest
//
// @return ListObjectsResponse
func (client *Client) ListObjects(request *ListObjectsRequest) (_result *ListObjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListObjectsResponse{}
	_body, _err := client.ListObjectsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取所有产品能力
//
// @param request - ListProductAbilitiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListProductAbilitiesResponse
func (client *Client) ListProductAbilitiesWithOptions(runtime *util.RuntimeOptions) (_result *ListProductAbilitiesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListProductAbilities"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListProductAbilitiesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListProductAbilitiesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 获取所有产品能力
//
// @return ListProductAbilitiesResponse
func (client *Client) ListProductAbilities() (_result *ListProductAbilitiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListProductAbilitiesResponse{}
	_body, _err := client.ListProductAbilitiesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries tags that are added to Edge Node Service (ENS) instances.
//
// @param request - ListTagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ListTagResourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ListTagResourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Queries tags that are added to Edge Node Service (ENS) instances.
//
// @param request - ListTagResourcesRequest
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the name, description, and peak bandwidth of a specified elastic IP address (EIP).
//
// @param request - ModifyEnsEipAddressAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyEnsEipAddressAttributeResponse
func (client *Client) ModifyEnsEipAddressAttributeWithOptions(request *ModifyEnsEipAddressAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyEnsEipAddressAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllocationId)) {
		query["AllocationId"] = request.AllocationId
	}

	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEnsEipAddressAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyEnsEipAddressAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyEnsEipAddressAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the name, description, and peak bandwidth of a specified elastic IP address (EIP).
//
// @param request - ModifyEnsEipAddressAttributeRequest
//
// @return ModifyEnsEipAddressAttributeResponse
func (client *Client) ModifyEnsEipAddressAttribute(request *ModifyEnsEipAddressAttributeRequest) (_result *ModifyEnsEipAddressAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEnsEipAddressAttributeResponse{}
	_body, _err := client.ModifyEnsEipAddressAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 调用ModifyEnsRouteEntry接口修改自定义路由条目名称、描述。
//
// @param request - ModifyEnsRouteEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyEnsRouteEntryResponse
func (client *Client) ModifyEnsRouteEntryWithOptions(request *ModifyEnsRouteEntryRequest, runtime *util.RuntimeOptions) (_result *ModifyEnsRouteEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.RouteEntryId)) {
		query["RouteEntryId"] = request.RouteEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.RouteEntryName)) {
		query["RouteEntryName"] = request.RouteEntryName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEnsRouteEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyEnsRouteEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyEnsRouteEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 调用ModifyEnsRouteEntry接口修改自定义路由条目名称、描述。
//
// @param request - ModifyEnsRouteEntryRequest
//
// @return ModifyEnsRouteEntryResponse
func (client *Client) ModifyEnsRouteEntry(request *ModifyEnsRouteEntryRequest) (_result *ModifyEnsRouteEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEnsRouteEntryResponse{}
	_body, _err := client.ModifyEnsRouteEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an Edge Private Network (EPN) instance.
//
// @param request - ModifyEpnInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyEpnInstanceResponse
func (client *Client) ModifyEpnInstanceWithOptions(request *ModifyEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *ModifyEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EPNInstanceName)) {
		query["EPNInstanceName"] = request.EPNInstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthOut)) {
		query["InternetMaxBandwidthOut"] = request.InternetMaxBandwidthOut
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkingModel)) {
		query["NetworkingModel"] = request.NetworkingModel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyEpnInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyEpnInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies an Edge Private Network (EPN) instance.
//
// @param request - ModifyEpnInstanceRequest
//
// @return ModifyEpnInstanceResponse
func (client *Client) ModifyEpnInstance(request *ModifyEpnInstanceRequest) (_result *ModifyEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEpnInstanceResponse{}
	_body, _err := client.ModifyEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the description of a NAS file system.
//
// @param request - ModifyFileSystemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyFileSystemResponse
func (client *Client) ModifyFileSystemWithOptions(request *ModifyFileSystemRequest, runtime *util.RuntimeOptions) (_result *ModifyFileSystemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyFileSystem"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyFileSystemResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyFileSystemResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the description of a NAS file system.
//
// @param request - ModifyFileSystemRequest
//
// @return ModifyFileSystemResponse
func (client *Client) ModifyFileSystem(request *ModifyFileSystemRequest) (_result *ModifyFileSystemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFileSystemResponse{}
	_body, _err := client.ModifyFileSystemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a Destination Network Address Translation (DNAT) rule.
//
// @param request - ModifyForwardEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyForwardEntryResponse
func (client *Client) ModifyForwardEntryWithOptions(request *ModifyForwardEntryRequest, runtime *util.RuntimeOptions) (_result *ModifyForwardEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExternalIp)) {
		query["ExternalIp"] = request.ExternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalPort)) {
		query["ExternalPort"] = request.ExternalPort
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardEntryId)) {
		query["ForwardEntryId"] = request.ForwardEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.ForwardEntryName)) {
		query["ForwardEntryName"] = request.ForwardEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckPort)) {
		query["HealthCheckPort"] = request.HealthCheckPort
	}

	if !tea.BoolValue(util.IsUnset(request.InternalIp)) {
		query["InternalIp"] = request.InternalIp
	}

	if !tea.BoolValue(util.IsUnset(request.InternalPort)) {
		query["InternalPort"] = request.InternalPort
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyForwardEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyForwardEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyForwardEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies a Destination Network Address Translation (DNAT) rule.
//
// @param request - ModifyForwardEntryRequest
//
// @return ModifyForwardEntryResponse
func (client *Client) ModifyForwardEntry(request *ModifyForwardEntryRequest) (_result *ModifyForwardEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyForwardEntryResponse{}
	_body, _err := client.ModifyForwardEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the name of a high-availability virtual IP address (HAVIP).
//
// @param request - ModifyHaVipAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyHaVipAttributeResponse
func (client *Client) ModifyHaVipAttributeWithOptions(request *ModifyHaVipAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyHaVipAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HaVipId)) {
		query["HaVipId"] = request.HaVipId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyHaVipAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyHaVipAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyHaVipAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the name of a high-availability virtual IP address (HAVIP).
//
// @param request - ModifyHaVipAttributeRequest
//
// @return ModifyHaVipAttributeResponse
func (client *Client) ModifyHaVipAttribute(request *ModifyHaVipAttributeRequest) (_result *ModifyHaVipAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyHaVipAttributeResponse{}
	_body, _err := client.ModifyHaVipAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the image attributes.
//
// @param request - ModifyImageAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyImageAttributeResponse
func (client *Client) ModifyImageAttributeWithOptions(request *ModifyImageAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyImageAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyImageAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyImageAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyImageAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the image attributes.
//
// @param request - ModifyImageAttributeRequest
//
// @return ModifyImageAttributeResponse
func (client *Client) ModifyImageAttribute(request *ModifyImageAttributeRequest) (_result *ModifyImageAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageAttributeResponse{}
	_body, _err := client.ModifyImageAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Shares or unshares an image.
//
// @param request - ModifyImageSharePermissionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyImageSharePermissionResponse
func (client *Client) ModifyImageSharePermissionWithOptions(request *ModifyImageSharePermissionRequest, runtime *util.RuntimeOptions) (_result *ModifyImageSharePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddAccounts)) {
		query["AddAccounts"] = request.AddAccounts
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoveAccounts)) {
		query["RemoveAccounts"] = request.RemoveAccounts
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyImageSharePermission"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyImageSharePermissionResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyImageSharePermissionResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Shares or unshares an image.
//
// @param request - ModifyImageSharePermissionRequest
//
// @return ModifyImageSharePermissionResponse
func (client *Client) ModifyImageSharePermission(request *ModifyImageSharePermissionRequest) (_result *ModifyImageSharePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageSharePermissionResponse{}
	_body, _err := client.ModifyImageSharePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the attributes of an instance, such as the name and the password.
//
// Description:
//
//	  If an instance is in the Starting state, you cannot reset the password of the instance.
//
//		- When the instance is in the Running state, you cannot change the password of the instance.
//
//		- After resetting the password, you must Restart the instance in the ECS console or call the RebootInstance operation to validate the modifications. The restart operation within the instance does not validate the modifications.
//
// @param request - ModifyInstanceAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceAttributeResponse
func (client *Client) ModifyInstanceAttributeWithOptions(request *ModifyInstanceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyInstanceAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyInstanceAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the attributes of an instance, such as the name and the password.
//
// Description:
//
//	  If an instance is in the Starting state, you cannot reset the password of the instance.
//
//		- When the instance is in the Running state, you cannot change the password of the instance.
//
//		- After resetting the password, you must Restart the instance in the ECS console or call the RebootInstance operation to validate the modifications. The restart operation within the instance does not validate the modifications.
//
// @param request - ModifyInstanceAttributeRequest
//
// @return ModifyInstanceAttributeResponse
func (client *Client) ModifyInstanceAttribute(request *ModifyInstanceAttributeRequest) (_result *ModifyInstanceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAttributeResponse{}
	_body, _err := client.ModifyInstanceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures auto-renewal for instances.
//
// @param request - ModifyInstanceAutoRenewAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceAutoRenewAttributeResponse
func (client *Client) ModifyInstanceAutoRenewAttributeWithOptions(request *ModifyInstanceAutoRenewAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceAutoRenewAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.RenewalStatus)) {
		query["RenewalStatus"] = request.RenewalStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceAutoRenewAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyInstanceAutoRenewAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyInstanceAutoRenewAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures auto-renewal for instances.
//
// @param request - ModifyInstanceAutoRenewAttributeRequest
//
// @return ModifyInstanceAutoRenewAttributeResponse
func (client *Client) ModifyInstanceAutoRenewAttribute(request *ModifyInstanceAutoRenewAttributeRequest) (_result *ModifyInstanceAutoRenewAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceAutoRenewAttributeResponse{}
	_body, _err := client.ModifyInstanceAutoRenewAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改启动配置，只支持异构实例(PCFarm裸金属)。
//
// @param request - ModifyInstanceBootConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceBootConfigurationResponse
func (client *Client) ModifyInstanceBootConfigurationWithOptions(request *ModifyInstanceBootConfigurationRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceBootConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceBootConfiguration"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyInstanceBootConfigurationResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyInstanceBootConfigurationResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 修改启动配置，只支持异构实例(PCFarm裸金属)。
//
// @param request - ModifyInstanceBootConfigurationRequest
//
// @return ModifyInstanceBootConfigurationResponse
func (client *Client) ModifyInstanceBootConfiguration(request *ModifyInstanceBootConfigurationRequest) (_result *ModifyInstanceBootConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceBootConfigurationResponse{}
	_body, _err := client.ModifyInstanceBootConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the billing method of Edge Node Service (ENS) instances. You can switch between the pay-as-you-go and subscription billing methods for instances. You can also change the billing method for disks that you created with pay-as-you-go instances to subscription.
//
// Description:
//
// Before you call this operation, make sure that you fully understand the billing methods and pricing of ENS.
//
// The instances must be in the Running or Stopped state, and you have no overdue payments for them.
//
// @param tmpReq - ModifyInstanceChargeTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyInstanceChargeTypeResponse
func (client *Client) ModifyInstanceChargeTypeWithOptions(tmpReq *ModifyInstanceChargeTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyInstanceChargeTypeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ModifyInstanceChargeTypeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeDataDisks)) {
		query["IncludeDataDisks"] = request.IncludeDataDisks
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyInstanceChargeType"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyInstanceChargeTypeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyInstanceChargeTypeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Changes the billing method of Edge Node Service (ENS) instances. You can switch between the pay-as-you-go and subscription billing methods for instances. You can also change the billing method for disks that you created with pay-as-you-go instances to subscription.
//
// Description:
//
// Before you call this operation, make sure that you fully understand the billing methods and pricing of ENS.
//
// The instances must be in the Running or Stopped state, and you have no overdue payments for them.
//
// @param request - ModifyInstanceChargeTypeRequest
//
// @return ModifyInstanceChargeTypeResponse
func (client *Client) ModifyInstanceChargeType(request *ModifyInstanceChargeTypeRequest) (_result *ModifyInstanceChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyInstanceChargeTypeResponse{}
	_body, _err := client.ModifyInstanceChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about an Edge Load Balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - ModifyLoadBalancerAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyLoadBalancerAttributeResponse
func (client *Client) ModifyLoadBalancerAttributeWithOptions(request *ModifyLoadBalancerAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyLoadBalancerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerName)) {
		query["LoadBalancerName"] = request.LoadBalancerName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyLoadBalancerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyLoadBalancerAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyLoadBalancerAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the information about an Edge Load Balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - ModifyLoadBalancerAttributeRequest
//
// @return ModifyLoadBalancerAttributeResponse
func (client *Client) ModifyLoadBalancerAttribute(request *ModifyLoadBalancerAttributeRequest) (_result *ModifyLoadBalancerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyLoadBalancerAttributeResponse{}
	_body, _err := client.ModifyLoadBalancerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the network information.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 5 times per second per user.
//
// @param request - ModifyNetworkAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyNetworkAttributeResponse
func (client *Client) ModifyNetworkAttributeWithOptions(request *ModifyNetworkAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyNetworkAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		query["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkName)) {
		query["NetworkName"] = request.NetworkName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyNetworkAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyNetworkAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyNetworkAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the network information.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 5 times per second per user.
//
// @param request - ModifyNetworkAttributeRequest
//
// @return ModifyNetworkAttributeResponse
func (client *Client) ModifyNetworkAttribute(request *ModifyNetworkAttributeRequest) (_result *ModifyNetworkAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNetworkAttributeResponse{}
	_body, _err := client.ModifyNetworkAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the attributes of an elastic network interface (ENI), such as its name and description.
//
// @param request - ModifyNetworkInterfaceAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyNetworkInterfaceAttributeResponse
func (client *Client) ModifyNetworkInterfaceAttributeWithOptions(request *ModifyNetworkInterfaceAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyNetworkInterfaceAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceName)) {
		query["NetworkInterfaceName"] = request.NetworkInterfaceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyNetworkInterfaceAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyNetworkInterfaceAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyNetworkInterfaceAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the attributes of an elastic network interface (ENI), such as its name and description.
//
// @param request - ModifyNetworkInterfaceAttributeRequest
//
// @return ModifyNetworkInterfaceAttributeResponse
func (client *Client) ModifyNetworkInterfaceAttribute(request *ModifyNetworkInterfaceAttributeRequest) (_result *ModifyNetworkInterfaceAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNetworkInterfaceAttributeResponse{}
	_body, _err := client.ModifyNetworkInterfaceAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Upgrades or downgrades the instance type of a subscription Edge Node Service (ENS) instance. The new instance type takes effect for the remaining lifecycle of the instance.
//
// @param request - ModifyPrepayInstanceSpecRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyPrepayInstanceSpecResponse
func (client *Client) ModifyPrepayInstanceSpecWithOptions(request *ModifyPrepayInstanceSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyPrepayInstanceSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPrepayInstanceSpec"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyPrepayInstanceSpecResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyPrepayInstanceSpecResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Upgrades or downgrades the instance type of a subscription Edge Node Service (ENS) instance. The new instance type takes effect for the remaining lifecycle of the instance.
//
// @param request - ModifyPrepayInstanceSpecRequest
//
// @return ModifyPrepayInstanceSpecResponse
func (client *Client) ModifyPrepayInstanceSpec(request *ModifyPrepayInstanceSpecRequest) (_result *ModifyPrepayInstanceSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPrepayInstanceSpecResponse{}
	_body, _err := client.ModifyPrepayInstanceSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about a security group.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 5 times per second per user.
//
// @param request - ModifySecurityGroupAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySecurityGroupAttributeResponse
func (client *Client) ModifySecurityGroupAttributeWithOptions(request *ModifySecurityGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifySecurityGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupName)) {
		query["SecurityGroupName"] = request.SecurityGroupName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySecurityGroupAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifySecurityGroupAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifySecurityGroupAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the information about a security group.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 5 times per second per user.
//
// @param request - ModifySecurityGroupAttributeRequest
//
// @return ModifySecurityGroupAttributeResponse
func (client *Client) ModifySecurityGroupAttribute(request *ModifySecurityGroupAttributeRequest) (_result *ModifySecurityGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySecurityGroupAttributeResponse{}
	_body, _err := client.ModifySecurityGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the information about a snapshot.
//
// @param request - ModifySnapshotAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySnapshotAttributeResponse
func (client *Client) ModifySnapshotAttributeWithOptions(request *ModifySnapshotAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifySnapshotAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotName)) {
		query["SnapshotName"] = request.SnapshotName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySnapshotAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifySnapshotAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifySnapshotAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the information about a snapshot.
//
// @param request - ModifySnapshotAttributeRequest
//
// @return ModifySnapshotAttributeResponse
func (client *Client) ModifySnapshotAttribute(request *ModifySnapshotAttributeRequest) (_result *ModifySnapshotAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySnapshotAttributeResponse{}
	_body, _err := client.ModifySnapshotAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改snat规则
//
// @param request - ModifySnatEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifySnatEntryResponse
func (client *Client) ModifySnatEntryWithOptions(request *ModifySnatEntryRequest, runtime *util.RuntimeOptions) (_result *ModifySnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EipAffinity)) {
		query["EipAffinity"] = request.EipAffinity
	}

	if !tea.BoolValue(util.IsUnset(request.IspAffinity)) {
		query["IspAffinity"] = request.IspAffinity
	}

	if !tea.BoolValue(util.IsUnset(request.SnatEntryId)) {
		query["SnatEntryId"] = request.SnatEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.SnatEntryName)) {
		query["SnatEntryName"] = request.SnatEntryName
	}

	if !tea.BoolValue(util.IsUnset(request.SnatIp)) {
		query["SnatIp"] = request.SnatIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifySnatEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifySnatEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifySnatEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 修改snat规则
//
// @param request - ModifySnatEntryRequest
//
// @return ModifySnatEntryResponse
func (client *Client) ModifySnatEntry(request *ModifySnatEntryRequest) (_result *ModifySnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifySnatEntryResponse{}
	_body, _err := client.ModifySnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies information about a vSwitch.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 5 times per second per user.
//
// @param request - ModifyVSwitchAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyVSwitchAttributeResponse
func (client *Client) ModifyVSwitchAttributeWithOptions(request *ModifyVSwitchAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyVSwitchAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchName)) {
		query["VSwitchName"] = request.VSwitchName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyVSwitchAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ModifyVSwitchAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ModifyVSwitchAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies information about a vSwitch.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 5 times per second per user.
//
// @param request - ModifyVSwitchAttributeRequest
//
// @return ModifyVSwitchAttributeResponse
func (client *Client) ModifyVSwitchAttribute(request *ModifyVSwitchAttributeRequest) (_result *ModifyVSwitchAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyVSwitchAttributeResponse{}
	_body, _err := client.ModifyVSwitchAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deploys the SDG that has been attached to instances on the corresponding Android in Container (AIC) instance.
//
// @param tmpReq - MountInstanceSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MountInstanceSDGResponse
func (client *Client) MountInstanceSDGWithOptions(tmpReq *MountInstanceSDGRequest, runtime *util.RuntimeOptions) (_result *MountInstanceSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &MountInstanceSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SDGId)) {
		query["SDGId"] = request.SDGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MountInstanceSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &MountInstanceSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &MountInstanceSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deploys the SDG that has been attached to instances on the corresponding Android in Container (AIC) instance.
//
// @param request - MountInstanceSDGRequest
//
// @return MountInstanceSDGResponse
func (client *Client) MountInstanceSDG(request *MountInstanceSDGRequest) (_result *MountInstanceSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MountInstanceSDGResponse{}
	_body, _err := client.MountInstanceSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Preloads a shared data group (SDG).
//
// @param tmpReq - PreloadRegionSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PreloadRegionSDGResponse
func (client *Client) PreloadRegionSDGWithOptions(tmpReq *PreloadRegionSDGRequest, runtime *util.RuntimeOptions) (_result *PreloadRegionSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &PreloadRegionSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DestinationRegionIds)) {
		request.DestinationRegionIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestinationRegionIds, tea.String("DestinationRegionIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Namespaces)) {
		request.NamespacesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Namespaces, tea.String("Namespaces"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationRegionIdsShrink)) {
		query["DestinationRegionIds"] = request.DestinationRegionIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacesShrink)) {
		query["Namespaces"] = request.NamespacesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RedundantNum)) {
		query["RedundantNum"] = request.RedundantNum
	}

	if !tea.BoolValue(util.IsUnset(request.SDGId)) {
		query["SDGId"] = request.SDGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PreloadRegionSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &PreloadRegionSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &PreloadRegionSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Preloads a shared data group (SDG).
//
// @param request - PreloadRegionSDGRequest
//
// @return PreloadRegionSDGResponse
func (client *Client) PreloadRegionSDG(request *PreloadRegionSDGRequest) (_result *PreloadRegionSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PreloadRegionSDGResponse{}
	_body, _err := client.PreloadRegionSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Prepares the upload and obtains the location of the bucket.
//
// @param request - PrepareUploadRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PrepareUploadResponse
func (client *Client) PrepareUploadWithOptions(request *PrepareUploadRequest, runtime *util.RuntimeOptions) (_result *PrepareUploadResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	if !tea.BoolValue(util.IsUnset(request.ClientIp)) {
		query["ClientIp"] = request.ClientIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PrepareUpload"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &PrepareUploadResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &PrepareUploadResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Prepares the upload and obtains the location of the bucket.
//
// @param request - PrepareUploadRequest
//
// @return PrepareUploadResponse
func (client *Client) PrepareUpload(request *PrepareUploadRequest) (_result *PrepareUploadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PrepareUploadResponse{}
	_body, _err := client.PrepareUploadWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Pushes the business or service data of an application to file servers.
//
// @param request - PushApplicationDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PushApplicationDataResponse
func (client *Client) PushApplicationDataWithOptions(request *PushApplicationDataRequest, runtime *util.RuntimeOptions) (_result *PushApplicationDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Data)) {
		query["Data"] = request.Data
	}

	if !tea.BoolValue(util.IsUnset(request.PushStrategy)) {
		query["PushStrategy"] = request.PushStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PushApplicationData"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &PushApplicationDataResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &PushApplicationDataResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Pushes the business or service data of an application to file servers.
//
// @param request - PushApplicationDataRequest
//
// @return PushApplicationDataResponse
func (client *Client) PushApplicationData(request *PushApplicationDataRequest) (_result *PushApplicationDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PushApplicationDataResponse{}
	_body, _err := client.PushApplicationDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an Edge Object Storage (EOS) bucket.
//
// @param request - PutBucketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutBucketResponse
func (client *Client) PutBucketWithOptions(request *PutBucketRequest, runtime *util.RuntimeOptions) (_result *PutBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BucketAcl)) {
		query["BucketAcl"] = request.BucketAcl
	}

	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.DispatchScope)) {
		query["DispatchScope"] = request.DispatchScope
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalBucketType)) {
		query["LogicalBucketType"] = request.LogicalBucketType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutBucket"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &PutBucketResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &PutBucketResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates an Edge Object Storage (EOS) bucket.
//
// @param request - PutBucketRequest
//
// @return PutBucketResponse
func (client *Client) PutBucket(request *PutBucketRequest) (_result *PutBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutBucketResponse{}
	_body, _err := client.PutBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the access control list (ACL) of a bucket.
//
// @param request - PutBucketAclRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutBucketAclResponse
func (client *Client) PutBucketAclWithOptions(request *PutBucketAclRequest, runtime *util.RuntimeOptions) (_result *PutBucketAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BucketAcl)) {
		query["BucketAcl"] = request.BucketAcl
	}

	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutBucketAcl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &PutBucketAclResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &PutBucketAclResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the access control list (ACL) of a bucket.
//
// @param request - PutBucketAclRequest
//
// @return PutBucketAclResponse
func (client *Client) PutBucketAcl(request *PutBucketAclRequest) (_result *PutBucketAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutBucketAclResponse{}
	_body, _err := client.PutBucketAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures lifecycle rules for objects.
//
// Description:
//
//	  You can configure up to 1,000 rules.
//
//		- If an object meets multiple rules, the rule that has the earliest expiration time prevails.
//
// @param request - PutBucketLifecycleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PutBucketLifecycleResponse
func (client *Client) PutBucketLifecycleWithOptions(request *PutBucketLifecycleRequest, runtime *util.RuntimeOptions) (_result *PutBucketLifecycleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowSameActionOverlap)) {
		query["AllowSameActionOverlap"] = request.AllowSameActionOverlap
	}

	if !tea.BoolValue(util.IsUnset(request.BucketName)) {
		query["BucketName"] = request.BucketName
	}

	if !tea.BoolValue(util.IsUnset(request.CreatedBeforeDate)) {
		query["CreatedBeforeDate"] = request.CreatedBeforeDate
	}

	if !tea.BoolValue(util.IsUnset(request.ExpirationDays)) {
		query["ExpirationDays"] = request.ExpirationDays
	}

	if !tea.BoolValue(util.IsUnset(request.Prefix)) {
		query["Prefix"] = request.Prefix
	}

	if !tea.BoolValue(util.IsUnset(request.RuleId)) {
		query["RuleId"] = request.RuleId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("PutBucketLifecycle"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &PutBucketLifecycleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &PutBucketLifecycleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Configures lifecycle rules for objects.
//
// Description:
//
//	  You can configure up to 1,000 rules.
//
//		- If an object meets multiple rules, the rule that has the earliest expiration time prevails.
//
// @param request - PutBucketLifecycleRequest
//
// @return PutBucketLifecycleResponse
func (client *Client) PutBucketLifecycle(request *PutBucketLifecycleRequest) (_result *PutBucketLifecycleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PutBucketLifecycleResponse{}
	_body, _err := client.PutBucketLifecycleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Initializes a disk.
//
// @param request - ReInitDiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReInitDiskResponse
func (client *Client) ReInitDiskWithOptions(request *ReInitDiskRequest, runtime *util.RuntimeOptions) (_result *ReInitDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReInitDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ReInitDiskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ReInitDiskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Initializes a disk.
//
// @param request - ReInitDiskRequest
//
// @return ReInitDiskResponse
func (client *Client) ReInitDisk(request *ReInitDiskRequest) (_result *ReInitDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReInitDiskResponse{}
	_body, _err := client.ReInitDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restarts an Android in Container (AIC) instance.
//
// @param tmpReq - RebootAICInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebootAICInstanceResponse
func (client *Client) RebootAICInstanceWithOptions(tmpReq *RebootAICInstanceRequest, runtime *util.RuntimeOptions) (_result *RebootAICInstanceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RebootAICInstanceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootAICInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RebootAICInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RebootAICInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Restarts an Android in Container (AIC) instance.
//
// @param request - RebootAICInstanceRequest
//
// @return RebootAICInstanceResponse
func (client *Client) RebootAICInstance(request *RebootAICInstanceRequest) (_result *RebootAICInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootAICInstanceResponse{}
	_body, _err := client.RebootAICInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Reboots an Android in Container (AIC) server.
//
// @param request - RebootARMServerInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebootARMServerInstanceResponse
func (client *Client) RebootARMServerInstanceWithOptions(request *RebootARMServerInstanceRequest, runtime *util.RuntimeOptions) (_result *RebootARMServerInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootARMServerInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RebootARMServerInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RebootARMServerInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Reboots an Android in Container (AIC) server.
//
// @param request - RebootARMServerInstanceRequest
//
// @return RebootARMServerInstanceResponse
func (client *Client) RebootARMServerInstance(request *RebootARMServerInstanceRequest) (_result *RebootARMServerInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootARMServerInstanceResponse{}
	_body, _err := client.RebootARMServerInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Reboots an instance.
//
// Description:
//
//	  Only instances that are in the Running state can be restarted.
//
//		- If the operation is successful, the status of the instance becomes Starting.
//
// @param request - RebootInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebootInstanceResponse
func (client *Client) RebootInstanceWithOptions(request *RebootInstanceRequest, runtime *util.RuntimeOptions) (_result *RebootInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ForceStop)) {
		query["ForceStop"] = request.ForceStop
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RebootInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RebootInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Reboots an instance.
//
// Description:
//
//	  Only instances that are in the Running state can be restarted.
//
//		- If the operation is successful, the status of the instance becomes Starting.
//
// @param request - RebootInstanceRequest
//
// @return RebootInstanceResponse
func (client *Client) RebootInstance(request *RebootInstanceRequest) (_result *RebootInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootInstanceResponse{}
	_body, _err := client.RebootInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 选择批量实例进行重启操作
//
// @param tmpReq - RebootInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebootInstancesResponse
func (client *Client) RebootInstancesWithOptions(tmpReq *RebootInstancesRequest, runtime *util.RuntimeOptions) (_result *RebootInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RebootInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RebootInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RebootInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 选择批量实例进行重启操作
//
// @param request - RebootInstancesRequest
//
// @return RebootInstancesResponse
func (client *Client) RebootInstances(request *RebootInstancesRequest) (_result *RebootInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootInstancesResponse{}
	_body, _err := client.RebootInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Recovers an Android in Container (AIC) instance on the server.
//
// @param request - RecoverAICInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RecoverAICInstanceResponse
func (client *Client) RecoverAICInstanceWithOptions(request *RecoverAICInstanceRequest, runtime *util.RuntimeOptions) (_result *RecoverAICInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RecoverAICInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RecoverAICInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RecoverAICInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Recovers an Android in Container (AIC) instance on the server.
//
// @param request - RecoverAICInstanceRequest
//
// @return RecoverAICInstanceResponse
func (client *Client) RecoverAICInstance(request *RecoverAICInstanceRequest) (_result *RecoverAICInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RecoverAICInstanceResponse{}
	_body, _err := client.RecoverAICInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets an instance based on specific parameters.
//
// @param request - ReinitInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReinitInstanceResponse
func (client *Client) ReinitInstanceWithOptions(request *ReinitInstanceRequest, runtime *util.RuntimeOptions) (_result *ReinitInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		body["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ReinitInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ReinitInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ReinitInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resets an instance based on specific parameters.
//
// @param request - ReinitInstanceRequest
//
// @return ReinitInstanceResponse
func (client *Client) ReinitInstance(request *ReinitInstanceRequest) (_result *ReinitInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReinitInstanceResponse{}
	_body, _err := client.ReinitInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 选择批量实例进行重置操作
//
// @param tmpReq - ReinitInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReinitInstancesResponse
func (client *Client) ReinitInstancesWithOptions(tmpReq *ReinitInstancesRequest, runtime *util.RuntimeOptions) (_result *ReinitInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ReinitInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReinitInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ReinitInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ReinitInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 选择批量实例进行重置操作
//
// @param request - ReinitInstancesRequest
//
// @return ReinitInstancesResponse
func (client *Client) ReinitInstances(request *ReinitInstancesRequest) (_result *ReinitInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReinitInstancesResponse{}
	_body, _err := client.ReinitInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases an Android in Container (AIC) instance from the server.
//
// @param request - ReleaseAICInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleaseAICInstanceResponse
func (client *Client) ReleaseAICInstanceWithOptions(request *ReleaseAICInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleaseAICInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ServerId)) {
		query["ServerId"] = request.ServerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseAICInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ReleaseAICInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ReleaseAICInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Releases an Android in Container (AIC) instance from the server.
//
// @param request - ReleaseAICInstanceRequest
//
// @return ReleaseAICInstanceResponse
func (client *Client) ReleaseAICInstance(request *ReleaseAICInstanceRequest) (_result *ReleaseAICInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseAICInstanceResponse{}
	_body, _err := client.ReleaseAICInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases an ARM server.
//
// @param request - ReleaseARMServerInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleaseARMServerInstanceResponse
func (client *Client) ReleaseARMServerInstanceWithOptions(request *ReleaseARMServerInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleaseARMServerInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseARMServerInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ReleaseARMServerInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ReleaseARMServerInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Releases an ARM server.
//
// @param request - ReleaseARMServerInstanceRequest
//
// @return ReleaseARMServerInstanceResponse
func (client *Client) ReleaseARMServerInstance(request *ReleaseARMServerInstanceRequest) (_result *ReleaseARMServerInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseARMServerInstanceResponse{}
	_body, _err := client.ReleaseARMServerInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases an instance. You can call this operation to release only Elastic IP Addresses (EIPs), Edge Load Balancer (ELB) instances, and cloud disk-based instances. We recommend that you call service-specific operations to release or unsubscribe from instances.
//
// Description:
//
//	  You can call this operation up to 10,000 times per second per account.
//
//		- The maximum number of times that each user can call this operation per second is 50.
//
// @param request - ReleaseInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleaseInstanceResponse
func (client *Client) ReleaseInstanceWithOptions(request *ReleaseInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleaseInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ReleaseInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ReleaseInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Releases an instance. You can call this operation to release only Elastic IP Addresses (EIPs), Edge Load Balancer (ELB) instances, and cloud disk-based instances. We recommend that you call service-specific operations to release or unsubscribe from instances.
//
// Description:
//
//	  You can call this operation up to 10,000 times per second per account.
//
//		- The maximum number of times that each user can call this operation per second is 50.
//
// @param request - ReleaseInstanceRequest
//
// @return ReleaseInstanceResponse
func (client *Client) ReleaseInstance(request *ReleaseInstanceRequest) (_result *ReleaseInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseInstanceResponse{}
	_body, _err := client.ReleaseInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a pay-as-you-go instance.
//
// @param request - ReleasePostPaidInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleasePostPaidInstanceResponse
func (client *Client) ReleasePostPaidInstanceWithOptions(request *ReleasePostPaidInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleasePostPaidInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleasePostPaidInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ReleasePostPaidInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ReleasePostPaidInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes a pay-as-you-go instance.
//
// @param request - ReleasePostPaidInstanceRequest
//
// @return ReleasePostPaidInstanceResponse
func (client *Client) ReleasePostPaidInstance(request *ReleasePostPaidInstanceRequest) (_result *ReleasePostPaidInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleasePostPaidInstanceResponse{}
	_body, _err := client.ReleasePostPaidInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Call ReleasePrePaidInstance to delete a subscription instance.
//
// @param request - ReleasePrePaidInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReleasePrePaidInstanceResponse
func (client *Client) ReleasePrePaidInstanceWithOptions(request *ReleasePrePaidInstanceRequest, runtime *util.RuntimeOptions) (_result *ReleasePrePaidInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleasePrePaidInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ReleasePrePaidInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ReleasePrePaidInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Call ReleasePrePaidInstance to delete a subscription instance.
//
// @param request - ReleasePrePaidInstanceRequest
//
// @return ReleasePrePaidInstanceResponse
func (client *Client) ReleasePrePaidInstance(request *ReleasePrePaidInstanceRequest) (_result *ReleasePrePaidInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleasePrePaidInstanceResponse{}
	_body, _err := client.ReleasePrePaidInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes backend servers.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param tmpReq - RemoveBackendServersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveBackendServersResponse
func (client *Client) RemoveBackendServersWithOptions(tmpReq *RemoveBackendServersRequest, runtime *util.RuntimeOptions) (_result *RemoveBackendServersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RemoveBackendServersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.BackendServers)) {
		request.BackendServersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.BackendServers, tea.String("BackendServers"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServersShrink)) {
		query["BackendServers"] = request.BackendServersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveBackendServers"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RemoveBackendServersResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RemoveBackendServersResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes backend servers.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - RemoveBackendServersRequest
//
// @return RemoveBackendServersResponse
func (client *Client) RemoveBackendServers(request *RemoveBackendServersRequest) (_result *RemoveBackendServersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveBackendServersResponse{}
	_body, _err := client.RemoveBackendServersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes a shared data group (SDG) that is attached to the compute instance.
//
// @param tmpReq - RemoveInstanceSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveInstanceSDGResponse
func (client *Client) RemoveInstanceSDGWithOptions(tmpReq *RemoveInstanceSDGRequest, runtime *util.RuntimeOptions) (_result *RemoveInstanceSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RemoveInstanceSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveInstanceSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RemoveInstanceSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RemoveInstanceSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes a shared data group (SDG) that is attached to the compute instance.
//
// @param request - RemoveInstanceSDGRequest
//
// @return RemoveInstanceSDGResponse
func (client *Client) RemoveInstanceSDG(request *RemoveInstanceSDGRequest) (_result *RemoveInstanceSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveInstanceSDGResponse{}
	_body, _err := client.RemoveInstanceSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes IP addresses from an edge private network (EPN) instance.
//
// @param request - RemovePublicIpsFromEpnInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemovePublicIpsFromEpnInstanceResponse
func (client *Client) RemovePublicIpsFromEpnInstanceWithOptions(request *RemovePublicIpsFromEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *RemovePublicIpsFromEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceInfos)) {
		query["InstanceInfos"] = request.InstanceInfos
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemovePublicIpsFromEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RemovePublicIpsFromEpnInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RemovePublicIpsFromEpnInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes IP addresses from an edge private network (EPN) instance.
//
// @param request - RemovePublicIpsFromEpnInstanceRequest
//
// @return RemovePublicIpsFromEpnInstanceResponse
func (client *Client) RemovePublicIpsFromEpnInstance(request *RemovePublicIpsFromEpnInstanceRequest) (_result *RemovePublicIpsFromEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemovePublicIpsFromEpnInstanceResponse{}
	_body, _err := client.RemovePublicIpsFromEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes shared data groups (SDGs) that are deployed on instances.
//
// @param tmpReq - RemoveSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveSDGResponse
func (client *Client) RemoveSDGWithOptions(tmpReq *RemoveSDGRequest, runtime *util.RuntimeOptions) (_result *RemoveSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RemoveSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RemoveSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RemoveSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes shared data groups (SDGs) that are deployed on instances.
//
// @param request - RemoveSDGRequest
//
// @return RemoveSDGResponse
func (client *Client) RemoveSDG(request *RemoveSDGRequest) (_result *RemoveSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveSDGResponse{}
	_body, _err := client.RemoveSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes the networking information. This operation is applicable only for instances that reside in the internal network.
//
// @param request - RemoveVSwitchesFromEpnInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveVSwitchesFromEpnInstanceResponse
func (client *Client) RemoveVSwitchesFromEpnInstanceWithOptions(request *RemoveVSwitchesFromEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *RemoveVSwitchesFromEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchesInfo)) {
		query["VSwitchesInfo"] = request.VSwitchesInfo
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveVSwitchesFromEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RemoveVSwitchesFromEpnInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RemoveVSwitchesFromEpnInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes the networking information. This operation is applicable only for instances that reside in the internal network.
//
// @param request - RemoveVSwitchesFromEpnInstanceRequest
//
// @return RemoveVSwitchesFromEpnInstanceResponse
func (client *Client) RemoveVSwitchesFromEpnInstance(request *RemoveVSwitchesFromEpnInstanceRequest) (_result *RemoveVSwitchesFromEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveVSwitchesFromEpnInstanceResponse{}
	_body, _err := client.RemoveVSwitchesFromEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Renews a subscription Android in Container (AIC) instance.
//
// @param request - RenewARMServerInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenewARMServerInstanceResponse
func (client *Client) RenewARMServerInstanceWithOptions(request *RenewARMServerInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewARMServerInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewARMServerInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RenewARMServerInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RenewARMServerInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Renews a subscription Android in Container (AIC) instance.
//
// @param request - RenewARMServerInstanceRequest
//
// @return RenewARMServerInstanceResponse
func (client *Client) RenewARMServerInstance(request *RenewARMServerInstanceRequest) (_result *RenewARMServerInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewARMServerInstanceResponse{}
	_body, _err := client.RenewARMServerInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Renews a subscription instance.
//
// @param request - RenewInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenewInstanceResponse
func (client *Client) RenewInstanceWithOptions(request *RenewInstanceRequest, runtime *util.RuntimeOptions) (_result *RenewInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RenewInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RenewInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Renews a subscription instance.
//
// @param request - RenewInstanceRequest
//
// @return RenewInstanceResponse
func (client *Client) RenewInstance(request *RenewInstanceRequest) (_result *RenewInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewInstanceResponse{}
	_body, _err := client.RenewInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Scales resources in an asynchronous manner and deploys or releases the container.
//
// @param request - RescaleApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RescaleApplicationResponse
func (client *Client) RescaleApplicationWithOptions(request *RescaleApplicationRequest, runtime *util.RuntimeOptions) (_result *RescaleApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.RescaleLevel)) {
		query["RescaleLevel"] = request.RescaleLevel
	}

	if !tea.BoolValue(util.IsUnset(request.RescaleType)) {
		query["RescaleType"] = request.RescaleType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSelector)) {
		query["ResourceSelector"] = request.ResourceSelector
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.ToAppVersion)) {
		query["ToAppVersion"] = request.ToAppVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RescaleApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RescaleApplicationResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RescaleApplicationResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Scales resources in an asynchronous manner and deploys or releases the container.
//
// @param request - RescaleApplicationRequest
//
// @return RescaleApplicationResponse
func (client *Client) RescaleApplication(request *RescaleApplicationRequest) (_result *RescaleApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RescaleApplicationResponse{}
	_body, _err := client.RescaleApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Scales out a bare metal device.
//
// @param request - RescaleDeviceServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RescaleDeviceServiceResponse
func (client *Client) RescaleDeviceServiceWithOptions(request *RescaleDeviceServiceRequest, runtime *util.RuntimeOptions) (_result *RescaleDeviceServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.IpType)) {
		query["IpType"] = request.IpType
	}

	if !tea.BoolValue(util.IsUnset(request.RescaleLevel)) {
		query["RescaleLevel"] = request.RescaleLevel
	}

	if !tea.BoolValue(util.IsUnset(request.RescaleType)) {
		query["RescaleType"] = request.RescaleType
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSpec)) {
		query["ResourceSpec"] = request.ResourceSpec
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceId)) {
		query["ServiceId"] = request.ServiceId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceInfo)) {
		body["ResourceInfo"] = request.ResourceInfo
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSelector)) {
		body["ResourceSelector"] = request.ResourceSelector
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RescaleDeviceService"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RescaleDeviceServiceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RescaleDeviceServiceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Scales out a bare metal device.
//
// @param request - RescaleDeviceServiceRequest
//
// @return RescaleDeviceServiceResponse
func (client *Client) RescaleDeviceService(request *RescaleDeviceServiceRequest) (_result *RescaleDeviceServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RescaleDeviceServiceResponse{}
	_body, _err := client.RescaleDeviceServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets an Android in Container (AIC) instance.
//
// @param request - ResetAICInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetAICInstanceResponse
func (client *Client) ResetAICInstanceWithOptions(request *ResetAICInstanceRequest, runtime *util.RuntimeOptions) (_result *ResetAICInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetAICInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ResetAICInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ResetAICInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resets an Android in Container (AIC) instance.
//
// @param request - ResetAICInstanceRequest
//
// @return ResetAICInstanceResponse
func (client *Client) ResetAICInstance(request *ResetAICInstanceRequest) (_result *ResetAICInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAICInstanceResponse{}
	_body, _err := client.ResetAICInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Rolls back a disk by using a snapshot.
//
// Description:
//
// When you call this operation, take note of the following items:
//
//   - The disk must be in the In Use (In_Use) or Unattached (Available) state.
//
//   - The instance to which the disk is attached must be in the Stopped (Stopped) state. You can call the [StopInstance](~~StopInstance~~) operation to stop an instance.
//
//   - The specified snapshot must be created from the disk specified by the DiskId parameter.
//
//   - If the response contains `{"OperationLocks": {"LockReason" : "security"}}` when you query information about an ENS instance by calling the [DescribeInstances](~~DescribeInstances~~) operation, the instance is locked for security reasons and no operations are allowed on the instance.
//
// @param request - ResetDiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetDiskResponse
func (client *Client) ResetDiskWithOptions(request *ResetDiskRequest, runtime *util.RuntimeOptions) (_result *ResetDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ResetDiskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ResetDiskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Rolls back a disk by using a snapshot.
//
// Description:
//
// When you call this operation, take note of the following items:
//
//   - The disk must be in the In Use (In_Use) or Unattached (Available) state.
//
//   - The instance to which the disk is attached must be in the Stopped (Stopped) state. You can call the [StopInstance](~~StopInstance~~) operation to stop an instance.
//
//   - The specified snapshot must be created from the disk specified by the DiskId parameter.
//
//   - If the response contains `{"OperationLocks": {"LockReason" : "security"}}` when you query information about an ENS instance by calling the [DescribeInstances](~~DescribeInstances~~) operation, the instance is locked for security reasons and no operations are allowed on the instance.
//
// @param request - ResetDiskRequest
//
// @return ResetDiskResponse
func (client *Client) ResetDisk(request *ResetDiskRequest) (_result *ResetDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetDiskResponse{}
	_body, _err := client.ResetDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resizes a pay-as-you-go disk that you purchase.
//
// @param request - ResizeDiskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResizeDiskResponse
func (client *Client) ResizeDiskWithOptions(request *ResizeDiskRequest, runtime *util.RuntimeOptions) (_result *ResizeDiskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DiskId)) {
		query["DiskId"] = request.DiskId
	}

	if !tea.BoolValue(util.IsUnset(request.NewSize)) {
		query["NewSize"] = request.NewSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResizeDisk"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &ResizeDiskResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &ResizeDiskResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Resizes a pay-as-you-go disk that you purchase.
//
// @param request - ResizeDiskRequest
//
// @return ResizeDiskResponse
func (client *Client) ResizeDisk(request *ResizeDiskRequest) (_result *ResizeDiskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResizeDiskResponse{}
	_body, _err := client.ResizeDiskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an inbound security group rule. After the rule is deleted, the access control implemented by the rule is removed.
//
// Description:
//
//	  In the security group-related API documents, inbound traffic refers to the traffic sent by the source and received by the destination.
//
//		- You can determine an inbound security group rule by specifying one of the following groups of parameters. You cannot determine a security group rule by specifying only one parameter.
//
//		- You can specify one or more of the following parameters to remove access control for a CIDR block: IpProtocol, PortRange, Policy, and SourceCidrIp.
//
// @param request - RevokeSecurityGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RevokeSecurityGroupResponse
func (client *Client) RevokeSecurityGroupWithOptions(request *RevokeSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *RevokeSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.PortRange)) {
		query["PortRange"] = request.PortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceCidrIp)) {
		query["SourceCidrIp"] = request.SourceCidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeSecurityGroup"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RevokeSecurityGroupResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RevokeSecurityGroupResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes an inbound security group rule. After the rule is deleted, the access control implemented by the rule is removed.
//
// Description:
//
//	  In the security group-related API documents, inbound traffic refers to the traffic sent by the source and received by the destination.
//
//		- You can determine an inbound security group rule by specifying one of the following groups of parameters. You cannot determine a security group rule by specifying only one parameter.
//
//		- You can specify one or more of the following parameters to remove access control for a CIDR block: IpProtocol, PortRange, Policy, and SourceCidrIp.
//
// @param request - RevokeSecurityGroupRequest
//
// @return RevokeSecurityGroupResponse
func (client *Client) RevokeSecurityGroup(request *RevokeSecurityGroupRequest) (_result *RevokeSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeSecurityGroupResponse{}
	_body, _err := client.RevokeSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an outbound security group rule. After the rule is deleted, the access control implemented by the rule is removed.
//
// Description:
//
// >  In the security group-related API documents, outbound traffic refers to the traffic sent by the source and received by the destination.
//
// @param request - RevokeSecurityGroupEgressRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RevokeSecurityGroupEgressResponse
func (client *Client) RevokeSecurityGroupEgressWithOptions(request *RevokeSecurityGroupEgressRequest, runtime *util.RuntimeOptions) (_result *RevokeSecurityGroupEgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestCidrIp)) {
		query["DestCidrIp"] = request.DestCidrIp
	}

	if !tea.BoolValue(util.IsUnset(request.IpProtocol)) {
		query["IpProtocol"] = request.IpProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.PortRange)) {
		query["PortRange"] = request.PortRange
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SourcePortRange)) {
		query["SourcePortRange"] = request.SourcePortRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeSecurityGroupEgress"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RevokeSecurityGroupEgressResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RevokeSecurityGroupEgressResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes an outbound security group rule. After the rule is deleted, the access control implemented by the rule is removed.
//
// Description:
//
// >  In the security group-related API documents, outbound traffic refers to the traffic sent by the source and received by the destination.
//
// @param request - RevokeSecurityGroupEgressRequest
//
// @return RevokeSecurityGroupEgressResponse
func (client *Client) RevokeSecurityGroupEgress(request *RevokeSecurityGroupEgressRequest) (_result *RevokeSecurityGroupEgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeSecurityGroupEgressResponse{}
	_body, _err := client.RevokeSecurityGroupEgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Rolls back the container version of a specific application.
//
// @param request - RollbackApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RollbackApplicationResponse
func (client *Client) RollbackApplicationWithOptions(request *RollbackApplicationRequest, runtime *util.RuntimeOptions) (_result *RollbackApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.FromAppVersion)) {
		query["FromAppVersion"] = request.FromAppVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.ToAppVersion)) {
		query["ToAppVersion"] = request.ToAppVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RollbackApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RollbackApplicationResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RollbackApplicationResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Rolls back the container version of a specific application.
//
// @param request - RollbackApplicationRequest
//
// @return RollbackApplicationResponse
func (client *Client) RollbackApplication(request *RollbackApplicationRequest) (_result *RollbackApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RollbackApplicationResponse{}
	_body, _err := client.RollbackApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Purchases instances.
//
// @param tmpReq - RunInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunInstancesResponse
func (client *Client) RunInstancesWithOptions(tmpReq *RunInstancesRequest, runtime *util.RuntimeOptions) (_result *RunInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DataDisk)) {
		request.DataDiskShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DataDisk, tea.String("DataDisk"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SystemDisk)) {
		request.SystemDiskShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SystemDisk, tea.String("SystemDisk"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.AutoReleaseTime)) {
		query["AutoReleaseTime"] = request.AutoReleaseTime
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.AutoUseCoupon)) {
		query["AutoUseCoupon"] = request.AutoUseCoupon
	}

	if !tea.BoolValue(util.IsUnset(request.BillingCycle)) {
		query["BillingCycle"] = request.BillingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.Carrier)) {
		query["Carrier"] = request.Carrier
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskShrink)) {
		query["DataDisk"] = request.DataDiskShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EnsRegionId)) {
		query["EnsRegionId"] = request.EnsRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeStrategy)) {
		query["InstanceChargeStrategy"] = request.InstanceChargeStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceName)) {
		query["InstanceName"] = request.InstanceName
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetMaxBandwidthOut)) {
		query["InternetMaxBandwidthOut"] = request.InternetMaxBandwidthOut
	}

	if !tea.BoolValue(util.IsUnset(request.IpType)) {
		query["IpType"] = request.IpType
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.NetDistrictCode)) {
		query["NetDistrictCode"] = request.NetDistrictCode
	}

	if !tea.BoolValue(util.IsUnset(request.NetWorkId)) {
		query["NetWorkId"] = request.NetWorkId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.PasswordInherit)) {
		query["PasswordInherit"] = request.PasswordInherit
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIpAddress)) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	if !tea.BoolValue(util.IsUnset(request.PublicIpIdentification)) {
		query["PublicIpIdentification"] = request.PublicIpIdentification
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleAreaLevel)) {
		query["ScheduleAreaLevel"] = request.ScheduleAreaLevel
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulingPriceStrategy)) {
		query["SchedulingPriceStrategy"] = request.SchedulingPriceStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulingStrategy)) {
		query["SchedulingStrategy"] = request.SchedulingStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityId)) {
		query["SecurityId"] = request.SecurityId
	}

	if !tea.BoolValue(util.IsUnset(request.SpotDuration)) {
		query["SpotDuration"] = request.SpotDuration
	}

	if !tea.BoolValue(util.IsUnset(request.SpotStrategy)) {
		query["SpotStrategy"] = request.SpotStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskShrink)) {
		query["SystemDisk"] = request.SystemDiskShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueSuffix)) {
		query["UniqueSuffix"] = request.UniqueSuffix
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RunInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RunInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Purchases instances.
//
// @param request - RunInstancesRequest
//
// @return RunInstancesResponse
func (client *Client) RunInstances(request *RunInstancesRequest) (_result *RunInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunInstancesResponse{}
	_body, _err := client.RunInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Schedules the nearest idle resources including instances and pods for your device based on the user ID and IP address and initializes the virtual environment.
//
// @param request - RunServiceScheduleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunServiceScheduleResponse
func (client *Client) RunServiceScheduleWithOptions(request *RunServiceScheduleRequest, runtime *util.RuntimeOptions) (_result *RunServiceScheduleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientIp)) {
		query["ClientIp"] = request.ClientIp
	}

	if !tea.BoolValue(util.IsUnset(request.Directorys)) {
		query["Directorys"] = request.Directorys
	}

	if !tea.BoolValue(util.IsUnset(request.PodConfigName)) {
		query["PodConfigName"] = request.PodConfigName
	}

	if !tea.BoolValue(util.IsUnset(request.PreLockedTimeout)) {
		query["PreLockedTimeout"] = request.PreLockedTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleStrategy)) {
		query["ScheduleStrategy"] = request.ScheduleStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceAction)) {
		query["ServiceAction"] = request.ServiceAction
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceCommands)) {
		query["ServiceCommands"] = request.ServiceCommands
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunServiceSchedule"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &RunServiceScheduleResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &RunServiceScheduleResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Schedules the nearest idle resources including instances and pods for your device based on the user ID and IP address and initializes the virtual environment.
//
// @param request - RunServiceScheduleRequest
//
// @return RunServiceScheduleResponse
func (client *Client) RunServiceSchedule(request *RunServiceScheduleRequest) (_result *RunServiceScheduleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunServiceScheduleResponse{}
	_body, _err := client.RunServiceScheduleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Saves the disk of a specific device as a shared data group (SDG).
//
// @param request - SaveSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveSDGResponse
func (client *Client) SaveSDGWithOptions(request *SaveSDGRequest, runtime *util.RuntimeOptions) (_result *SaveSDGResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SaveSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SaveSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Saves the disk of a specific device as a shared data group (SDG).
//
// @param request - SaveSDGRequest
//
// @return SaveSDGResponse
func (client *Client) SaveSDG(request *SaveSDGRequest) (_result *SaveSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SaveSDGResponse{}
	_body, _err := client.SaveSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sets the weights of backend servers.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param tmpReq - SetBackendServersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetBackendServersResponse
func (client *Client) SetBackendServersWithOptions(tmpReq *SetBackendServersRequest, runtime *util.RuntimeOptions) (_result *SetBackendServersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetBackendServersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.BackendServers)) {
		request.BackendServersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.BackendServers, tea.String("BackendServers"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackendServersShrink)) {
		query["BackendServers"] = request.BackendServersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetBackendServers"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetBackendServersResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetBackendServersResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Sets the weights of backend servers.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - SetBackendServersRequest
//
// @return SetBackendServersResponse
func (client *Client) SetBackendServers(request *SetBackendServersRequest) (_result *SetBackendServersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetBackendServersResponse{}
	_body, _err := client.SetBackendServersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of an HTTP listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - SetLoadBalancerHTTPListenerAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLoadBalancerHTTPListenerAttributeResponse
func (client *Client) SetLoadBalancerHTTPListenerAttributeWithOptions(request *SetLoadBalancerHTTPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *SetLoadBalancerHTTPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheck)) {
		query["HealthCheck"] = request.HealthCheck
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckMethod)) {
		query["HealthCheckMethod"] = request.HealthCheckMethod
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckTimeout)) {
		query["HealthCheckTimeout"] = request.HealthCheckTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestTimeout)) {
		query["RequestTimeout"] = request.RequestTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.XForwardedFor)) {
		query["XForwardedFor"] = request.XForwardedFor
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLoadBalancerHTTPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetLoadBalancerHTTPListenerAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetLoadBalancerHTTPListenerAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configurations of an HTTP listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - SetLoadBalancerHTTPListenerAttributeRequest
//
// @return SetLoadBalancerHTTPListenerAttributeResponse
func (client *Client) SetLoadBalancerHTTPListenerAttribute(request *SetLoadBalancerHTTPListenerAttributeRequest) (_result *SetLoadBalancerHTTPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLoadBalancerHTTPListenerAttributeResponse{}
	_body, _err := client.SetLoadBalancerHTTPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of an HTTPS listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - SetLoadBalancerHTTPSListenerAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLoadBalancerHTTPSListenerAttributeResponse
func (client *Client) SetLoadBalancerHTTPSListenerAttributeWithOptions(request *SetLoadBalancerHTTPSListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *SetLoadBalancerHTTPSListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheck)) {
		query["HealthCheck"] = request.HealthCheck
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckMethod)) {
		query["HealthCheckMethod"] = request.HealthCheckMethod
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckTimeout)) {
		query["HealthCheckTimeout"] = request.HealthCheckTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.IdleTimeout)) {
		query["IdleTimeout"] = request.IdleTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestTimeout)) {
		query["RequestTimeout"] = request.RequestTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.ServerCertificateId)) {
		query["ServerCertificateId"] = request.ServerCertificateId
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLoadBalancerHTTPSListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetLoadBalancerHTTPSListenerAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetLoadBalancerHTTPSListenerAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configurations of an HTTPS listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - SetLoadBalancerHTTPSListenerAttributeRequest
//
// @return SetLoadBalancerHTTPSListenerAttributeResponse
func (client *Client) SetLoadBalancerHTTPSListenerAttribute(request *SetLoadBalancerHTTPSListenerAttributeRequest) (_result *SetLoadBalancerHTTPSListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLoadBalancerHTTPSListenerAttributeResponse{}
	_body, _err := client.SetLoadBalancerHTTPSListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the status of the listener for an Edge Load Balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - SetLoadBalancerStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLoadBalancerStatusResponse
func (client *Client) SetLoadBalancerStatusWithOptions(request *SetLoadBalancerStatusRequest, runtime *util.RuntimeOptions) (_result *SetLoadBalancerStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerStatus)) {
		query["LoadBalancerStatus"] = request.LoadBalancerStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLoadBalancerStatus"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetLoadBalancerStatusResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetLoadBalancerStatusResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the status of the listener for an Edge Load Balancer (ELB) instance.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - SetLoadBalancerStatusRequest
//
// @return SetLoadBalancerStatusResponse
func (client *Client) SetLoadBalancerStatus(request *SetLoadBalancerStatusRequest) (_result *SetLoadBalancerStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLoadBalancerStatusResponse{}
	_body, _err := client.SetLoadBalancerStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a TCP listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - SetLoadBalancerTCPListenerAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLoadBalancerTCPListenerAttributeResponse
func (client *Client) SetLoadBalancerTCPListenerAttributeWithOptions(request *SetLoadBalancerTCPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *SetLoadBalancerTCPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EipTransmit)) {
		query["EipTransmit"] = request.EipTransmit
	}

	if !tea.BoolValue(util.IsUnset(request.EstablishedTimeout)) {
		query["EstablishedTimeout"] = request.EstablishedTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectTimeout)) {
		query["HealthCheckConnectTimeout"] = request.HealthCheckConnectTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckDomain)) {
		query["HealthCheckDomain"] = request.HealthCheckDomain
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckHttpCode)) {
		query["HealthCheckHttpCode"] = request.HealthCheckHttpCode
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckType)) {
		query["HealthCheckType"] = request.HealthCheckType
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckURI)) {
		query["HealthCheckURI"] = request.HealthCheckURI
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.PersistenceTimeout)) {
		query["PersistenceTimeout"] = request.PersistenceTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLoadBalancerTCPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetLoadBalancerTCPListenerAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetLoadBalancerTCPListenerAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configurations of a TCP listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - SetLoadBalancerTCPListenerAttributeRequest
//
// @return SetLoadBalancerTCPListenerAttributeResponse
func (client *Client) SetLoadBalancerTCPListenerAttribute(request *SetLoadBalancerTCPListenerAttributeRequest) (_result *SetLoadBalancerTCPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLoadBalancerTCPListenerAttributeResponse{}
	_body, _err := client.SetLoadBalancerTCPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a UDP listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - SetLoadBalancerUDPListenerAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetLoadBalancerUDPListenerAttributeResponse
func (client *Client) SetLoadBalancerUDPListenerAttributeWithOptions(request *SetLoadBalancerUDPListenerAttributeRequest, runtime *util.RuntimeOptions) (_result *SetLoadBalancerUDPListenerAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EipTransmit)) {
		query["EipTransmit"] = request.EipTransmit
	}

	if !tea.BoolValue(util.IsUnset(request.EstablishedTimeout)) {
		query["EstablishedTimeout"] = request.EstablishedTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectPort)) {
		query["HealthCheckConnectPort"] = request.HealthCheckConnectPort
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckConnectTimeout)) {
		query["HealthCheckConnectTimeout"] = request.HealthCheckConnectTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckExp)) {
		query["HealthCheckExp"] = request.HealthCheckExp
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckInterval)) {
		query["HealthCheckInterval"] = request.HealthCheckInterval
	}

	if !tea.BoolValue(util.IsUnset(request.HealthCheckReq)) {
		query["HealthCheckReq"] = request.HealthCheckReq
	}

	if !tea.BoolValue(util.IsUnset(request.HealthyThreshold)) {
		query["HealthyThreshold"] = request.HealthyThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	if !tea.BoolValue(util.IsUnset(request.Scheduler)) {
		query["Scheduler"] = request.Scheduler
	}

	if !tea.BoolValue(util.IsUnset(request.UnhealthyThreshold)) {
		query["UnhealthyThreshold"] = request.UnhealthyThreshold
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetLoadBalancerUDPListenerAttribute"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &SetLoadBalancerUDPListenerAttributeResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &SetLoadBalancerUDPListenerAttributeResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Modifies the configurations of a UDP listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second.
//
//		- You can call this operation up to 10 times per second per account.
//
// @param request - SetLoadBalancerUDPListenerAttributeRequest
//
// @return SetLoadBalancerUDPListenerAttributeResponse
func (client *Client) SetLoadBalancerUDPListenerAttribute(request *SetLoadBalancerUDPListenerAttributeRequest) (_result *SetLoadBalancerUDPListenerAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetLoadBalancerUDPListenerAttributeResponse{}
	_body, _err := client.SetLoadBalancerUDPListenerAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts an edge network instance.
//
// @param request - StartEpnInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartEpnInstanceResponse
func (client *Client) StartEpnInstanceWithOptions(request *StartEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *StartEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StartEpnInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StartEpnInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Starts an edge network instance.
//
// @param request - StartEpnInstanceRequest
//
// @return StartEpnInstanceResponse
func (client *Client) StartEpnInstance(request *StartEpnInstanceRequest) (_result *StartEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartEpnInstanceResponse{}
	_body, _err := client.StartEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts an instance.
//
// Description:
//
//	  You can call the operation only when the instance is in the Stopped state.
//
//		- If the operation is successful, the status of the instance becomes Starting.
//
// @param request - StartInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartInstanceResponse
func (client *Client) StartInstanceWithOptions(request *StartInstanceRequest, runtime *util.RuntimeOptions) (_result *StartInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StartInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StartInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Starts an instance.
//
// Description:
//
//	  You can call the operation only when the instance is in the Stopped state.
//
//		- If the operation is successful, the status of the instance becomes Starting.
//
// @param request - StartInstanceRequest
//
// @return StartInstanceResponse
func (client *Client) StartInstance(request *StartInstanceRequest) (_result *StartInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartInstanceResponse{}
	_body, _err := client.StartInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 选择批量实例进行启动操作
//
// @param tmpReq - StartInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartInstancesResponse
func (client *Client) StartInstancesWithOptions(tmpReq *StartInstancesRequest, runtime *util.RuntimeOptions) (_result *StartInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StartInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StartInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StartInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 选择批量实例进行启动操作
//
// @param request - StartInstancesRequest
//
// @return StartInstancesResponse
func (client *Client) StartInstances(request *StartInstancesRequest) (_result *StartInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartInstancesResponse{}
	_body, _err := client.StartInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables a listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - StartLoadBalancerListenerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartLoadBalancerListenerResponse
func (client *Client) StartLoadBalancerListenerWithOptions(request *StartLoadBalancerListenerRequest, runtime *util.RuntimeOptions) (_result *StartLoadBalancerListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerProtocol)) {
		query["ListenerProtocol"] = request.ListenerProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartLoadBalancerListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StartLoadBalancerListenerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StartLoadBalancerListenerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Enables a listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - StartLoadBalancerListenerRequest
//
// @return StartLoadBalancerListenerResponse
func (client *Client) StartLoadBalancerListener(request *StartLoadBalancerListenerRequest) (_result *StartLoadBalancerListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartLoadBalancerListenerResponse{}
	_body, _err := client.StartLoadBalancerListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts the elastic IP address (EIP) specified in a source network address translation (SNAT) entry.
//
// @param request - StartSnatIpForSnatEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartSnatIpForSnatEntryResponse
func (client *Client) StartSnatIpForSnatEntryWithOptions(request *StartSnatIpForSnatEntryRequest, runtime *util.RuntimeOptions) (_result *StartSnatIpForSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SnatEntryId)) {
		query["SnatEntryId"] = request.SnatEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.SnatIp)) {
		query["SnatIp"] = request.SnatIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartSnatIpForSnatEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StartSnatIpForSnatEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StartSnatIpForSnatEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Starts the elastic IP address (EIP) specified in a source network address translation (SNAT) entry.
//
// @param request - StartSnatIpForSnatEntryRequest
//
// @return StartSnatIpForSnatEntryResponse
func (client *Client) StartSnatIpForSnatEntry(request *StartSnatIpForSnatEntryRequest) (_result *StartSnatIpForSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartSnatIpForSnatEntryResponse{}
	_body, _err := client.StartSnatIpForSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops an EPN instance.
//
// @param request - StopEpnInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopEpnInstanceResponse
func (client *Client) StopEpnInstanceWithOptions(request *StopEpnInstanceRequest, runtime *util.RuntimeOptions) (_result *StopEpnInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EPNInstanceId)) {
		query["EPNInstanceId"] = request.EPNInstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopEpnInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StopEpnInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StopEpnInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Stops an EPN instance.
//
// @param request - StopEpnInstanceRequest
//
// @return StopEpnInstanceResponse
func (client *Client) StopEpnInstance(request *StopEpnInstanceRequest) (_result *StopEpnInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopEpnInstanceResponse{}
	_body, _err := client.StopEpnInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops an instance.
//
// Description:
//
//	  You can call this operation to stop instances that are only in the Running state.
//
//		- If the call is successful, the state of the instance becomes Stopping.
//
//		- Once the instance is stopped, the state of the instance becomes Stopped.
//
//		- Force stop is supported, which is equivalent to power-off. Data that is not written to disks on the instance may be lost.
//
// @param request - StopInstanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopInstanceResponse
func (client *Client) StopInstanceWithOptions(request *StopInstanceRequest, runtime *util.RuntimeOptions) (_result *StopInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ForceStop)) {
		query["ForceStop"] = request.ForceStop
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopInstance"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StopInstanceResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StopInstanceResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Stops an instance.
//
// Description:
//
//	  You can call this operation to stop instances that are only in the Running state.
//
//		- If the call is successful, the state of the instance becomes Stopping.
//
//		- Once the instance is stopped, the state of the instance becomes Stopped.
//
//		- Force stop is supported, which is equivalent to power-off. Data that is not written to disks on the instance may be lost.
//
// @param request - StopInstanceRequest
//
// @return StopInstanceResponse
func (client *Client) StopInstance(request *StopInstanceRequest) (_result *StopInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInstanceResponse{}
	_body, _err := client.StopInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 选择批量实例进行停止操作
//
// @param tmpReq - StopInstancesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopInstancesResponse
func (client *Client) StopInstancesWithOptions(tmpReq *StopInstancesRequest, runtime *util.RuntimeOptions) (_result *StopInstancesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StopInstancesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("simple"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopInstances"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StopInstancesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StopInstancesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 选择批量实例进行停止操作
//
// @param request - StopInstancesRequest
//
// @return StopInstancesResponse
func (client *Client) StopInstances(request *StopInstancesRequest) (_result *StopInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInstancesResponse{}
	_body, _err := client.StopInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables a listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - StopLoadBalancerListenerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopLoadBalancerListenerResponse
func (client *Client) StopLoadBalancerListenerWithOptions(request *StopLoadBalancerListenerRequest, runtime *util.RuntimeOptions) (_result *StopLoadBalancerListenerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ListenerPort)) {
		query["ListenerPort"] = request.ListenerPort
	}

	if !tea.BoolValue(util.IsUnset(request.ListenerProtocol)) {
		query["ListenerProtocol"] = request.ListenerProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LoadBalancerId)) {
		query["LoadBalancerId"] = request.LoadBalancerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopLoadBalancerListener"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StopLoadBalancerListenerResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StopLoadBalancerListenerResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables a listener.
//
// Description:
//
//	  You can call this operation up to 100 times per second per account.
//
//		- You can call this operation up to 10 times per second per user.
//
// @param request - StopLoadBalancerListenerRequest
//
// @return StopLoadBalancerListenerResponse
func (client *Client) StopLoadBalancerListener(request *StopLoadBalancerListenerRequest) (_result *StopLoadBalancerListenerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopLoadBalancerListenerResponse{}
	_body, _err := client.StopLoadBalancerListenerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables an elastic IP address (EIP) in a source network address translation (SNAT) entry.
//
// @param request - StopSnatIpForSnatEntryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopSnatIpForSnatEntryResponse
func (client *Client) StopSnatIpForSnatEntryWithOptions(request *StopSnatIpForSnatEntryRequest, runtime *util.RuntimeOptions) (_result *StopSnatIpForSnatEntryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SnatEntryId)) {
		query["SnatEntryId"] = request.SnatEntryId
	}

	if !tea.BoolValue(util.IsUnset(request.SnatIp)) {
		query["SnatIp"] = request.SnatIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopSnatIpForSnatEntry"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &StopSnatIpForSnatEntryResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &StopSnatIpForSnatEntryResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disables an elastic IP address (EIP) in a source network address translation (SNAT) entry.
//
// @param request - StopSnatIpForSnatEntryRequest
//
// @return StopSnatIpForSnatEntryResponse
func (client *Client) StopSnatIpForSnatEntry(request *StopSnatIpForSnatEntryRequest) (_result *StopSnatIpForSnatEntryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopSnatIpForSnatEntryResponse{}
	_body, _err := client.StopSnatIpForSnatEntryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates and adds tags to specific Edge Node Service (ENS) resources.
//
// Description:
//
// Before you add tags to a resource, Alibaba Cloud checks the number of existing tags on the resource. If the number exceeds the upper limit, an error message is returned. Only instance resources, such as virtual machines and bare machines, are supported.
//
// @param request - TagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &TagResourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &TagResourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Creates and adds tags to specific Edge Node Service (ENS) resources.
//
// Description:
//
// Before you add tags to a resource, Alibaba Cloud checks the number of existing tags on the resource. If the number exceeds the upper limit, an error message is returned. Only instance resources, such as virtual machines and bare machines, are supported.
//
// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disassociates an elastic IP address (EIP) from an instance.
//
// @param request - UnAssociateEnsEipAddressRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnAssociateEnsEipAddressResponse
func (client *Client) UnAssociateEnsEipAddressWithOptions(request *UnAssociateEnsEipAddressRequest, runtime *util.RuntimeOptions) (_result *UnAssociateEnsEipAddressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllocationId)) {
		query["AllocationId"] = request.AllocationId
	}

	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnAssociateEnsEipAddress"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UnAssociateEnsEipAddressResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UnAssociateEnsEipAddressResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disassociates an elastic IP address (EIP) from an instance.
//
// @param request - UnAssociateEnsEipAddressRequest
//
// @return UnAssociateEnsEipAddressResponse
func (client *Client) UnAssociateEnsEipAddress(request *UnAssociateEnsEipAddressRequest) (_result *UnAssociateEnsEipAddressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnAssociateEnsEipAddressResponse{}
	_body, _err := client.UnAssociateEnsEipAddressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unassigns secondary private IP addresses from an elastic network interface (ENI).
//
// @param request - UnassignPrivateIpAddressesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnassignPrivateIpAddressesResponse
func (client *Client) UnassignPrivateIpAddressesWithOptions(request *UnassignPrivateIpAddressesRequest, runtime *util.RuntimeOptions) (_result *UnassignPrivateIpAddressesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkInterfaceId)) {
		query["NetworkInterfaceId"] = request.NetworkInterfaceId
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIpAddress)) {
		query["PrivateIpAddress"] = request.PrivateIpAddress
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnassignPrivateIpAddresses"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UnassignPrivateIpAddressesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UnassignPrivateIpAddressesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Unassigns secondary private IP addresses from an elastic network interface (ENI).
//
// @param request - UnassignPrivateIpAddressesRequest
//
// @return UnassignPrivateIpAddressesResponse
func (client *Client) UnassignPrivateIpAddresses(request *UnassignPrivateIpAddressesRequest) (_result *UnassignPrivateIpAddressesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassignPrivateIpAddressesResponse{}
	_body, _err := client.UnassignPrivateIpAddressesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disassociates a high-availability virtual IP address (HAVIP) from an Edge Node Service (ENS) instance or Elastic Network Interface (ENI).
//
// @param request - UnassociateHaVipRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnassociateHaVipResponse
func (client *Client) UnassociateHaVipWithOptions(request *UnassociateHaVipRequest, runtime *util.RuntimeOptions) (_result *UnassociateHaVipResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HaVipId)) {
		query["HaVipId"] = request.HaVipId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnassociateHaVip"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UnassociateHaVipResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UnassociateHaVipResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disassociates a high-availability virtual IP address (HAVIP) from an Edge Node Service (ENS) instance or Elastic Network Interface (ENI).
//
// @param request - UnassociateHaVipRequest
//
// @return UnassociateHaVipResponse
func (client *Client) UnassociateHaVip(request *UnassociateHaVipRequest) (_result *UnassociateHaVipResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateHaVipResponse{}
	_body, _err := client.UnassociateHaVipWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disassociates a network access control list (ACL) from a network.
//
// @param request - UnassociateNetworkAclRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnassociateNetworkAclResponse
func (client *Client) UnassociateNetworkAclWithOptions(request *UnassociateNetworkAclRequest, runtime *util.RuntimeOptions) (_result *UnassociateNetworkAclResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkAclId)) {
		query["NetworkAclId"] = request.NetworkAclId
	}

	if !tea.BoolValue(util.IsUnset(request.Resource)) {
		query["Resource"] = request.Resource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnassociateNetworkAcl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UnassociateNetworkAclResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UnassociateNetworkAclResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Disassociates a network access control list (ACL) from a network.
//
// @param request - UnassociateNetworkAclRequest
//
// @return UnassociateNetworkAclResponse
func (client *Client) UnassociateNetworkAcl(request *UnassociateNetworkAclRequest) (_result *UnassociateNetworkAclResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnassociateNetworkAclResponse{}
	_body, _err := client.UnassociateNetworkAclWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes preloaded data.
//
// @param tmpReq - UnloadRegionSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnloadRegionSDGResponse
func (client *Client) UnloadRegionSDGWithOptions(tmpReq *UnloadRegionSDGRequest, runtime *util.RuntimeOptions) (_result *UnloadRegionSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UnloadRegionSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DestinationRegionIds)) {
		request.DestinationRegionIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DestinationRegionIds, tea.String("DestinationRegionIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Namespaces)) {
		request.NamespacesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Namespaces, tea.String("Namespaces"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationRegionIdsShrink)) {
		query["DestinationRegionIds"] = request.DestinationRegionIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NamespacesShrink)) {
		query["Namespaces"] = request.NamespacesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SDGId)) {
		query["SDGId"] = request.SDGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnloadRegionSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UnloadRegionSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UnloadRegionSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Deletes preloaded data.
//
// @param request - UnloadRegionSDGRequest
//
// @return UnloadRegionSDGResponse
func (client *Client) UnloadRegionSDG(request *UnloadRegionSDGRequest) (_result *UnloadRegionSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnloadRegionSDGResponse{}
	_body, _err := client.UnloadRegionSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unmounts a shared data group (SDG) from instances.
//
// @param tmpReq - UnmountInstanceSDGRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnmountInstanceSDGResponse
func (client *Client) UnmountInstanceSDGWithOptions(tmpReq *UnmountInstanceSDGRequest, runtime *util.RuntimeOptions) (_result *UnmountInstanceSDGResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UnmountInstanceSDGShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InstanceIds)) {
		request.InstanceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InstanceIds, tea.String("InstanceIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceIdsShrink)) {
		query["InstanceIds"] = request.InstanceIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SDGId)) {
		query["SDGId"] = request.SDGId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnmountInstanceSDG"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UnmountInstanceSDGResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UnmountInstanceSDGResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Unmounts a shared data group (SDG) from instances.
//
// @param request - UnmountInstanceSDGRequest
//
// @return UnmountInstanceSDGResponse
func (client *Client) UnmountInstanceSDG(request *UnmountInstanceSDGRequest) (_result *UnmountInstanceSDGResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnmountInstanceSDGResponse{}
	_body, _err := client.UnmountInstanceSDGWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes tags from resources.
//
// @param request - UntagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UntagResourcesResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UntagResourcesResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Removes tags from resources.
//
// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改售卖约束
//
// @param tmpReq - UpdateEnsSaleControlRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEnsSaleControlResponse
func (client *Client) UpdateEnsSaleControlWithOptions(tmpReq *UpdateEnsSaleControlRequest, runtime *util.RuntimeOptions) (_result *UpdateEnsSaleControlResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateEnsSaleControlShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SaleControls)) {
		request.SaleControlsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SaleControls, tea.String("SaleControls"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AliUidAccount)) {
		query["AliUidAccount"] = request.AliUidAccount
	}

	if !tea.BoolValue(util.IsUnset(request.CommodityCode)) {
		query["CommodityCode"] = request.CommodityCode
	}

	if !tea.BoolValue(util.IsUnset(request.CustomAccount)) {
		query["CustomAccount"] = request.CustomAccount
	}

	if !tea.BoolValue(util.IsUnset(request.SaleControlsShrink)) {
		query["SaleControls"] = request.SaleControlsShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEnsSaleControl"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpdateEnsSaleControlResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpdateEnsSaleControlResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// 修改售卖约束
//
// @param request - UpdateEnsSaleControlRequest
//
// @return UpdateEnsSaleControlResponse
func (client *Client) UpdateEnsSaleControl(request *UpdateEnsSaleControlRequest) (_result *UpdateEnsSaleControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEnsSaleControlResponse{}
	_body, _err := client.UpdateEnsSaleControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the image of an Android in Container (AIC) instance.
//
// @param tmpReq - UpgradeAICInstanceImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeAICInstanceImageResponse
func (client *Client) UpgradeAICInstanceImageWithOptions(tmpReq *UpgradeAICInstanceImageRequest, runtime *util.RuntimeOptions) (_result *UpgradeAICInstanceImageResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpgradeAICInstanceImageShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.ServerIds)) {
		request.ServerIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ServerIds, tea.String("ServerIds"), tea.String("json"))
	}

	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeAICInstanceImage"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpgradeAICInstanceImageResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpgradeAICInstanceImageResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Updates the image of an Android in Container (AIC) instance.
//
// @param request - UpgradeAICInstanceImageRequest
//
// @return UpgradeAICInstanceImageResponse
func (client *Client) UpgradeAICInstanceImage(request *UpgradeAICInstanceImageRequest) (_result *UpgradeAICInstanceImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeAICInstanceImageResponse{}
	_body, _err := client.UpgradeAICInstanceImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Updates the container in an asynchronous manner. You can configure multiple canary release policies.
//
// @param request - UpgradeApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeApplicationResponse
func (client *Client) UpgradeApplicationWithOptions(request *UpgradeApplicationRequest, runtime *util.RuntimeOptions) (_result *UpgradeApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Template)) {
		query["Template"] = request.Template
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeApplication"),
		Version:     tea.String("2017-11-10"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	if tea.BoolValue(util.IsUnset(client.SignatureVersion)) || !tea.BoolValue(util.EqualString(client.SignatureVersion, tea.String("v4"))) {
		_result = &UpgradeApplicationResponse{}
		_body, _err := client.CallApi(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	} else {
		_result = &UpgradeApplicationResponse{}
		_body, _err := client.Execute(params, req, runtime)
		if _err != nil {
			return _result, _err
		}
		_err = tea.Convert(_body, &_result)
		return _result, _err
	}

}

// Summary:
//
// Updates the container in an asynchronous manner. You can configure multiple canary release policies.
//
// @param request - UpgradeApplicationRequest
//
// @return UpgradeApplicationResponse
func (client *Client) UpgradeApplication(request *UpgradeApplicationRequest) (_result *UpgradeApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeApplicationResponse{}
	_body, _err := client.UpgradeApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
